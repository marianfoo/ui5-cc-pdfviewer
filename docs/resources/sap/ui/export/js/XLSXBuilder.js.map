{"version":3,"sources":["webpack://[name]/./xlsx/src/XLSXBuilder.js","webpack://[name]/./xlsx/src/binding/Column.js","webpack://[name]/./xlsx/src/binding/ColumnConfiguration.js","webpack://[name]/./xlsx/src/binding/type/BigNumber.js","webpack://[name]/./xlsx/src/binding/type/BooleanType.js","webpack://[name]/./xlsx/src/binding/type/CalendarBase.js","webpack://[name]/./xlsx/src/binding/type/CalendarDate.js","webpack://[name]/./xlsx/src/binding/type/CalendarDateTime.js","webpack://[name]/./xlsx/src/binding/type/CalendarTime.js","webpack://[name]/./xlsx/src/binding/type/Currency.js","webpack://[name]/./xlsx/src/binding/type/Enumeration.js","webpack://[name]/./xlsx/src/binding/type/Numeric.js","webpack://[name]/./xlsx/src/binding/type/ScaleSettings.js","webpack://[name]/./xlsx/src/binding/type/Text.js","webpack://[name]/./xlsx/src/binding/type/Type.js","webpack://[name]/./xlsx/src/data/Cell.js","webpack://[name]/./xlsx/src/data/Row.js","webpack://[name]/./xlsx/src/data/SharedString.js","webpack://[name]/./xlsx/src/data/SharedStrings.js","webpack://[name]/./xlsx/src/data/Sheet.js","webpack://[name]/./xlsx/src/objects/App.js","webpack://[name]/./xlsx/src/objects/ContentTypes.js","webpack://[name]/./xlsx/src/objects/Core.js","webpack://[name]/./xlsx/src/objects/ReferenceNode.js","webpack://[name]/./xlsx/src/objects/Relationships.js","webpack://[name]/./xlsx/src/objects/Workbook.js","webpack://[name]/./xlsx/src/style/Alignment.js","webpack://[name]/./xlsx/src/style/Border.js","webpack://[name]/./xlsx/src/style/Fill.js","webpack://[name]/./xlsx/src/style/Font.js","webpack://[name]/./xlsx/src/style/NumberFormat.js","webpack://[name]/./xlsx/src/style/Style.js","webpack://[name]/./xlsx/src/style/Styles.js","webpack://[name]/./xlsx/src/xml/XMLAttribute.js","webpack://[name]/./xlsx/src/xml/XMLElement.js","webpack://[name]/./xlsx/src/xml/XMLFile.js","webpack://[name]/./xlsx/src/xml/XMLNode.js","webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/startup"],"names":["App","ContentTypes","Core","Relationships","Sheet","Workbook","ScaleSettings","XLSXBuilder","aBinding","oContext","hierarchyLevel","mCustomizing","aMetadataConfig","i","oMetainfoGroup","sSheetName","sMetadataSheetName","Array","length","Error","this","app","objects","core","workbook","currency","unit","update","sheetName","metaSheetName","sheet","addSheet","columns","selectSheet","metainfo","property","label","width","metadata","hideHeader","createGroup","name","_insertIntoSheet","items","slice","prototype","build","files","zip","j","fileConfig","xmlObject","relation","zipConfig","path","type","relationships","target","JSZip3","FileType","addRelationship","file","serialize","getAbsolutePath","getRelationships","getRelatedFiles","forEach","compression","support","nodebuffer","generateAsync","append","aData","oSheet","array","insert","shift","module","exports","BigNumber","BooleanType","CalendarTime","CalendarDate","CalendarDateTime","Cell","Currency","Enumeration","Numeric","Text","Column","oData","oSharedStrings","oStyles","oColumnData","isArray","styles","_initType","cell","oType","toLowerCase","timezone","timezoneProperty","replace","registerAt","getCell","bind","setValue","oError","message","JSON","stringify","Row","ColumnConfiguration","oConfig","aColumns","oColumn","_row","sharedStrings","Object","defineProperty","value","hierarchyLevelProperty","push","_initBinding","addCell","nHierarchyLevel","normalizedHierarchyLevel","Math","min","outline","addAttribute","id","remove","getHeader","row","font","size","bold","fill","color","setStyle","getStyleId","column","getGroupHeader","sGroupName","data","spans","Type","Alignment","call","displayUnit","unitProperty","delimiter","scale","alignment","horizontal","RIGHT","LEFT","create","constructor","getScale","sUnit","iScale","getScaleForCurrency","getScaleForUnit","isNaN","getValue","sResult","sValue","toString","match","_parseValue","bDelimiter","aSplitted","aInteger","sDecimal","sInteger","split","reduceRight","accumulator","currentValue","substring","trueValue","falseValue","DEFAULT","numberFormat","isCustomFormatted","_createConfiguration","config","getPrototypeOf","format","CalendarBase","calendar","inputFormat","toUpperCase","LOCAL_TIMEZONE","Intl","DateTimeFormat","resolvedOptions","timeZone","BUILTIN","oSymbols","apply","oDate","setUTCFullYear","setUTCMonth","setUTCDate","sKey","sTemplate","getDefaultFormat","parseInt","sProperty","iTimestamp","vValue","valueOf","_parseStringValue","dateToExcel","_parseStringDate","odataDateRegex","test","_parseOdataDate","odataDateTimeOffsetRegex","Date","parse","isFinite","_parseODataDuration","parts","days","hours","minutes","seconds","ms","odataDurationRegex","exec","parseFloat","_parseTimeOfDay","date","timeOfDayRegex","setUTCHours","getTime","matchArray","offset","setUTCMinutes","getUTCMinutes","dateStringRegex","nTimestamp","iOffset","max","sPattern","aMatch","sSubstring","index","charAt","utc","displayTimezone","styleIds","_oCache","Map","getTimezone","sTimezone","addStyle","iDateDifference","fExcelValue","iTimezoneOffset","oFormat","oParts","getTimezoneFormat","formatToParts","reduce","acc","item","getUTCDate","day","getUTCHours","hour","minute","oCachedEntry","oInstance","oOptions","get","hourCycle","era","set","iExcelTimestamp","fParsedValue","sCurrencyCode","template","getUnit","MAX_CURRENCY_SCALE","_valueMap","valueMap","key","autoScale","builtin","scientificRegEx","aSegments","iExponent","Number","toFixed","isIEEE754Compliant","bCompliant","trim","CURRENCY","UNIT","sCompliantLineBreak","String","fromCharCode","wrap","_mStyleIds","formulaRegex","convertLineBreaks","align","indent","bRequiresPrefix","sIdentifier","quotePrefix","properties","reRegEx","aValues","aInputMatch","RegExp","every","styleId","textAlign","XMLNode","DataType","SharedString","writable","_shared","_oFallbackType","_applyType","Boolean","InlineString","FormularString","_cellTypeProperty","tag","attributes","bindingType","nStyle","style","setReference","sReference","reference","oBusinessObject","_isValuePresent","text","getColumnReferenceByIndex","nIndex","floor","_updateSpans","childs","oCell","count","spacePreserveAttributeId","controlCharacterTestRegex","controlCharacterReplaceRegex","spacePreserveRegex","_escapeControlCharacters","sCharHex","sMatch","codePointAt","prefix","substr","XMLFile","SharedStrings","instance","getInstance","filename","root","map","has","uniqueCount","cleanup","clear","oColumnConfiguration","_hierarchyProperty","_hierarchyLevel","_rowCount","_createCols","_createHeader","suffix","MAX_ROWS","col","minWidth","nWidth","_columns","_calculateColumnWidth","ceil","addChild","nCharacters","_setHierarchyDepth","nHierarchyDepth","hierarchyDepth","headerRow","views","defaultView","_appendRow","oRow","dimension","sSerializedRow","pop","filter","sName","nLevel","groupHeaderRow","getRowCount","application","version","FILENAME","title","modifiedBy","toISOString","modified","ReferenceNode","_relatedFiles","_relationships","addRelatedFile","oXMLFile","oReferenceNode","setFileName","getFileName","setPath","getPath","sTarget","sType","Styles","_styles","_sharedStrings","RELATIONS","_registeredSheets","nCount","sId","sSheetFileName","sheets","indexOf","sheetElement","that","createDefinedName","sDefinedName","sDimension","iIndex","aArray","definedNames","_contains","sAlign","oAggregation","contained","CENTER","contains","vertical","TOP","MIDDLE","BOTTOM","isDefault","setIndent","nIndent","_setAlignmentAttribute","setHorizontalAlignment","setWrapText","bWrap","wrappingAttribute","setVerticalAlignment","_getAlignmentAttribute","equals","oAlignment","Border","oBorder","Fill","setFill","setType","DEFAULT_TYPE","oFill","getType","getFill","rgb","sColor","reset","Font","setName","setSize","setFamily","family","setBold","DEFAULT_SIZE","DEFAULT_NAME","oFont","getName","getSize","isBold","getColor","getFamily","valueAttribute","bBold","boldProperty","nFamily","nSize","NumberFormat","BUILTIN_IDS","ID_OFFSET","getId","formatId","getFormat","setId","iId","_isBuiltin","setFormat","sFormat","oNumberFormat","Style","getAlignment","getFontId","getFillId","getBorderId","border","getNumberFormatId","hasQuotePrefix","setAlignment","oAlign","alignProperty","_apply","configurable","setFontId","nFontId","setFillId","nFillId","setBorderId","sBorderId","setNumberFormatId","nNumFmtId","setQuotePrefix","bQuotePrefix","sAttributeName","nId","applyProperty","oStyle","addFill","fontId","fillId","borderId","numberFormatId","addFont","addBorder","addNumberFormat","_addToAggregation","cellXfs","oNewItem","aAggregation","existingItem","addColor","sHexColor","colors","mru","some","fonts","fills","borders","numberFormats","XMLElement","XMLAttribute","xmlEncode","_replace","_filename","_path","sFileName","sPath","lastIndexOf","bFinalize","sSerializedString","processingInformation","attribute","node","referencedElement","splice","sSerialized","sSerializedContent","getSerializedContent","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"mappings":"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","file":"XLSXBuilder.js","sourcesContent":["var App\t\t\t\t\t= require('./objects/App'),\r\n\tContentTypes\t\t= require('./objects/ContentTypes'),\r\n\tCore\t\t\t\t= require('./objects/Core'),\r\n\tRelationships\t\t= require('./objects/Relationships'),\r\n\tSheet\t\t\t\t= require('./data/Sheet'),\r\n\tWorkbook\t\t\t= require('./objects/Workbook'),\r\n\tScaleSettings\t= require('./binding/type/ScaleSettings');\r\n\r\n/* global JSZip3 */\r\n\r\n/**\r\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\r\n * (Microsoft Excel) that can be used to insert structured and\r\n * formatted data and pack a zipped *.xlsx document.\r\n *\r\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\r\n *\r\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\r\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\r\n * @param {string} [oContext.application] - Application that created this XLSX\r\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\r\n * @param {string} [oContext.title] - Title of the XLSX document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @param {string} [oContext.sheetName] - The name of the data sheet that will be shown in Excel\r\n * @param {string} [oContext.metaSheetName] - The name of the metadata sheet that will be shown in Excel\r\n * @param {Object[]} [oContext.metainfo] - Optional Metadata that will be displayed in the additional Metadata Sheet\r\n * @param {string} [hierarchyLevel] - Name of the property that contains the hierarchy level of each lime item\r\n * @param {Object} [mCustomizing] - An object containing all customizing related information\r\n * @param {Object} [mCustomizing.currency] - Custom configuration object that can be used for {@link ScaleSettings} digits\r\n * @param {Object} [mCustomizing.unit] - Custom configuration object that can be used for {@link ScaleSettings} digits\r\n * and other customizations\r\n * @constructor\r\n */\r\nfunction XLSXBuilder(aBinding, oContext, hierarchyLevel, mCustomizing) {\r\n\tvar aMetadataConfig, i, oMetainfoGroup, sSheetName, sMetadataSheetName;\r\n\r\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\r\n\t\tthrow new Error('No binding provided');\r\n\t}\r\n\r\n\t/* Set default values */\r\n\tsSheetName = 'SAP Document Export';\r\n\tsMetadataSheetName = 'Metadata';\r\n\r\n\tthis.app = new this.objects.App(oContext);\r\n\tthis.core = new this.objects.Core(oContext);\r\n\tthis.workbook = new this.objects.Workbook();\r\n\r\n\t/* Configure currency and unit scale settings if available */\r\n\tif (mCustomizing && (mCustomizing.currency || mCustomizing.unit)) {\r\n\t\tScaleSettings.update(mCustomizing);\r\n\t}\r\n\r\n\t/* Overwrite default Sheet names if maintained */\r\n\tif (oContext) {\r\n\t\tsSheetName = oContext.sheetName ? oContext.sheetName : sSheetName;\r\n\t\tsMetadataSheetName = oContext.metaSheetName ? oContext.metaSheetName : sMetadataSheetName;\r\n\t}\r\n\r\n\tthis.sheet = this.workbook.addSheet(sSheetName, { columns: aBinding, hierarchyLevel: hierarchyLevel });\r\n\tthis.workbook.selectSheet(this.sheet);\r\n\r\n\tif (typeof oContext === 'object' && oContext.metainfo instanceof Array) {\r\n\r\n\t\t/* Define column configuration for metadata sheet */\r\n\t\taMetadataConfig = [\r\n\t\t\t{\r\n\t\t\t\tproperty: 'key',\r\n\t\t\t\tlabel: 'Key',\r\n\t\t\t\twidth: 20\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tproperty: 'value',\r\n\t\t\t\tlabel: 'Value',\r\n\t\t\t\twidth: 20\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t/* Add optional Metadata Sheet*/\r\n\t\tthis.metadata = this.workbook.addSheet(sMetadataSheetName, { columns: aMetadataConfig, hideHeader: true });\r\n\r\n\t\t/*\r\n\t\t * Add a copy of metadata to the Metadata Sheet. The method\r\n\t\t * #_insertIntoSheet uses Array#shift and would otherwise\r\n\t\t * manipulate the original metadata array.\r\n\t\t */\r\n\t\tfor (i = 0; i < oContext.metainfo.length; i++) {\r\n\t\t\toMetainfoGroup = oContext.metainfo[i];\r\n\r\n\t\t\tthis.metadata.createGroup(oMetainfoGroup.name, 1);\r\n\t\t\tthis._insertIntoSheet(oMetainfoGroup.items.slice(), this.metadata);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXLSXBuilder.prototype = {\r\n\r\n\tobjects: {\r\n\t\tApp: App,\r\n\t\tContentTypes: ContentTypes,\r\n\t\tCore: Core,\r\n\t\tRelationships: Relationships,\r\n\t\tSheet: Sheet,\r\n\t\tWorkbook: Workbook\r\n\t},\r\n\r\n\t/**\r\n\t * Triggers the packaging process for the Office Open XML\r\n\t * SpreadSheet. You need to call the method insert() first,\r\n\t * otherwise the generated Document will contain no data.\r\n\t *\r\n\t * The method returns a Promise to allow the library to work\r\n\t * asynchronously.\r\n\t *\r\n\t * @function build\r\n\t * @returns {Promise} - Promise that represents a packed zip file as Blob or Nodebuffer, depending on the runtime environment\r\n\t */\r\n\tbuild: function() {\r\n\t\tvar bFinalize, files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig;\r\n\r\n\t\tfiles = [\r\n\t\t\t{\r\n\t\t\t\tname: '[Content_Types].xml',\r\n\t\t\t\tpath: '',\r\n\t\t\t\ttype: this.objects.ContentTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '.rels',\r\n\t\t\t\tpath: '_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\tzip = new JSZip3();\r\n\t\tbFinalize = true;\r\n\r\n\t\tfor (i = 0; i < files.length; i++) {\r\n\t\t\tfileConfig = files[i];\r\n\t\t\tFileType = fileConfig.type;\r\n\t\t\txmlObject = new FileType();\r\n\r\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\r\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\r\n\t\t\t\t\trelation = fileConfig.relationships[j];\r\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\r\n\t\t}\r\n\r\n\t\t// Add document metadata\r\n\t\tzip.file(this.app.getAbsolutePath(), this.app.serialize());\r\n\t\tzip.file(this.core.getAbsolutePath(), this.core.serialize());\r\n\r\n\t\t// Add workbook and its related files\r\n\t\tzip.file(this.workbook.getAbsolutePath(), this.workbook.serialize());\r\n\t\tzip.file(this.workbook.getRelationships().getAbsolutePath(), this.workbook.getRelationships().serialize());\r\n\r\n\t\tthis.workbook.getRelatedFiles().forEach(function(file) {\r\n\t\t\tzip.file(file.getAbsolutePath(), file.serialize(bFinalize));\r\n\t\t});\r\n\r\n\t\tzipConfig = {\r\n\t\t\tcompression: 'DEFLATE',\r\n\t\t\ttype: JSZip3.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\r\n\t\t};\r\n\r\n\t\treturn zip.generateAsync(zipConfig);\r\n\t},\r\n\r\n\t/**\r\n\t * Appends the specified set of data to the Open Document Spreadsheet.\r\n\t * All data will be bound according to the {@link ColumnConfiguration}.\r\n\t *\r\n\t * @function append\r\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\r\n\t */\r\n\tappend: function(aData) {\r\n\t\tthis._insertIntoSheet(aData, this.sheet);\r\n\t},\r\n\r\n\t/**\r\n\t * Inserts the given data into the specified Sheet. The method will throw an Error if no Sheet is provided.\r\n\t *\r\n\t * @param {Array} aData - Array of business objects that should be inserted\r\n\t * @param {Sheet} oSheet - The Sheet where the data should be inserted into\r\n\t * @private\r\n\t */\r\n\t_insertIntoSheet: function(aData, oSheet) {\r\n\t\tvar array;\r\n\r\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\r\n\t\tif (typeof aData === 'undefined' || aData === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarray = aData instanceof Array ? aData : [aData];\r\n\r\n\t\twhile (array.length) {\r\n\t\t\toSheet.insert(array.shift());\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = XLSXBuilder;","var BigNumber\t \t\t= require('../binding/type/BigNumber'),\r\n\tBooleanType \t\t= require('../binding/type/BooleanType'),\r\n\tCalendarTime \t\t= require('../binding/type/CalendarTime'),\r\n\tCalendarDate \t\t= require('../binding/type/CalendarDate'),\r\n\tCalendarDateTime\t= require('../binding/type/CalendarDateTime'),\r\n\tCell\t\t\t\t= require('../data/Cell'),\r\n\tCurrency \t\t\t= require('../binding/type/Currency'),\r\n\tEnumeration \t\t= require('../binding/type/Enumeration'),\r\n\tNumeric \t\t\t= require('../binding/type/Numeric'),\r\n\tText\t\t \t\t= require('../binding/type/Text');\r\n\r\n/**\r\n * The Column class represents the field type of columns. It handles\r\n * styling, data types and data binding.\r\n *\r\n * @param {(Object|string)} oData Data object representing the Column configuration\r\n * @param {string} oData.property References the data object property that is bound as value for this column\r\n * @param {string} [oData.textAlign] Optional alignment\r\n * @param {string} [oData.label] Optional column label that will be shown in the header row\r\n * @param {string} [oData.type] Optional data type for this column. Default: Column.Type.Text\r\n * @param {string} [oData.width] Optional width of the column\r\n * @param {SharedStrings} oSharedStrings SharedStrings instance that will be used by all Cells\r\n * @param {Styles} oStyles Styles collection that is needed to register each Style a Column uses\r\n * @class\r\n * @module binding/Column\r\n */\r\nfunction Column(oData, oSharedStrings, oStyles) {\r\n\tvar oColumnData;\r\n\r\n\t/* Fallback assignment if only a key is provided */\r\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\r\n\tif (!oColumnData || (typeof oColumnData.property !== 'string' && !Array.isArray(oColumnData.property))) {\r\n\t\tthrow new Error('The property for the column is not defined');\r\n\t}\r\n\r\n\tthis.property = oColumnData.property;\r\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\r\n\tthis.width = oColumnData.width;\r\n\tthis.styles = oStyles;\r\n\tthis.type = this._initType(oColumnData);\r\n\tthis.cell = new Cell(this.type, oSharedStrings);\r\n}\r\n\r\n/**\r\n * Initializes the data type for this Column. Type specific\r\n * formatting information will be evaluated and applied.\r\n *\r\n * @param {Object} oData Configuration object for this Column that also contains type and formatting information\r\n * @param {string} oData.type Specifies the data type\r\n * @param {boolean} [oData.autoScale] Specifies if the scale customizing is being used\r\n * @param {string} [oData.calendar] Specifies the calendar if type is date, datetime or time\r\n * @param {boolean} [oData.delimiter] Specifies if a thousands delimiter is shown\r\n * @param {boolean} [oData.displayTimezone] Specifies if the IANA timezone will be visible in the cell\r\n * @param {boolean} [oData.displayUnit] Specifies if the UoM will be shown or not if type is number or currency\r\n * @param {string} [oData.falseValue] Specifies the displayed value if the boolean type has the value false\r\n * @param {string} [oData.format] Specifies a custom format if type is date, datetime or time\r\n * @param {string} [oData.hierarchyLevel] Specifies the name of the property that contains the hierarchy level\r\n * @param {string} [oData.inputFormat] Specifies the input format of a string based date\r\n * @param {number} [oData.scale] Specifies the decimal scale\r\n * @param {string} [oData.template] Specifies a template string that can be filled with several properties\r\n * @param {string} [oData.textAlign] Defines the horizontal alignment\r\n * @param {string} [oData.timezone] Specific timezone that will be applied to the Column\r\n * @param {string} [oData.timezoneProperty] Property name that references the timezone\r\n * @param {string} [oData.trueValue] Specifies the displayed value if the boolean type has the value true\r\n * @param {string} [oData.unit] Specifies the UoM if type is number\r\n * @param {string} [oData.unitProperty] Name of the property that contains the UoM if type is number or currency\r\n * @param {Object} [oData.valueMap] Contains a JS object or Map with key value pairs\r\n *\r\n * @returns {Type} - Returns the specific Type object that contains all the formatting\r\n * @private\r\n */\r\n// eslint-disable-next-line complexity\r\nColumn.prototype._initType = function(oData) {\r\n\tvar oType, sType;\r\n\r\n\tsType = typeof oData.type === 'string' ? oData.type.toLowerCase() : oData.type;\r\n\r\n\tswitch (sType) {\r\n\t\tcase 'datetime':\r\n\r\n\t\t\t/* Add \"UTC\" to column header of type datetime if UTC is configured */\r\n\t\t\tif (oData.timezone && typeof oData.timezone === 'string' && !oData.timezoneProperty) {\r\n\t\t\t\tthis.label += ' (' + oData.timezone.replace('_', ' ') + ')';\r\n\t\t\t}\r\n\t\t\toType = new CalendarDateTime(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'date':\r\n\t\t\toType = new CalendarDate(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\toType = new CalendarTime(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'percentage':\r\n\t\tcase 'number':\r\n\t\t\toType = new Numeric(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'currency':\r\n\t\t\toType = new Currency(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'boolean':\r\n\t\t\toType = new BooleanType(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'enumeration':\r\n\t\t\toType = new Enumeration(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'bignumber':\r\n\t\t\toType = new BigNumber(oData);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\toData.type = 'text';\r\n\r\n\t\t\toType = new Text(oData);\r\n\t}\r\n\r\n\toType.registerAt(this.styles);\r\n\r\n\treturn oType;\r\n};\r\n\r\n/**\r\n * Returns the Cell object that is referenced by this particular\r\n * Column. Every Column references only one single Cell that gets\r\n * reused for each and every Row.\r\n *\r\n * When binding the actual data to a row, the Cell content, its\r\n * references and its styling get updated and a serialized version\r\n * of the row is stored within the sheet.\r\n *\r\n * @returns {Cell} - The Cell that belongs to this particular Column\r\n */\r\nColumn.prototype.getCell = function() {\r\n\treturn this.cell;\r\n};\r\n\r\n/**\r\n * This method binds the actual business object property to the columns cell.\r\n *\r\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\r\n */\r\nColumn.prototype.bind = function(oData) {\r\n\r\n\t/*\r\n\t * Due to the fact that Cell#setValue updates the Style depending\r\n\t * on the actual Cell value (i.E. Unit of Measurement for\r\n\t * Currencies), we need to provide the original business object\r\n\t * so that the Cell knows the whole business object instead of\r\n\t * just the value of its particular property.\r\n\t */\r\n\ttry {\r\n\t\tthis.cell.setValue(this.property, oData);\r\n\t} catch (oError) {\r\n\r\n\t\t// Enhance error message with column and line item information\r\n\t\toError.message = (oError.message ? oError.message + '\\n\\n' : '') + 'Column: ' + this.label;\r\n\t\toError.message += '\\nData: ' + JSON.stringify(oData);\r\n\r\n\t\tthrow oError;\r\n\t}\r\n};\r\n\r\nmodule.exports = Column;","var Column\t= require('./Column'),\r\n\tText\t= require('./type/Text'),\r\n\tRow\t\t= require('../data/Row'),\r\n\tCell\t= require('../data/Cell');\r\n\r\n/**\r\n * ColumnConfiguration represents the configuration of all columns within\r\n * one Sheet. The ColumnConfiguration handles the mapping of object\r\n * properties to certain columns,, labeling, type definition and also\r\n * display information like width and alignment.\r\n *\r\n * @param {Object} oConfig -  An configuration object that contains all necessary column definitions\r\n * @param {Object} oConfig.columns -  An array of Column definitions. {@see Column} for further details\r\n * @param {string} [oConfig.hierarchyLevel] -  Name of the property that holds the hierarchy level\r\n * @param {boolean} [oConfig.hideHeader] - Flag that allows to hide the header row\r\n * @param {SharedStrings} oSharedStrings - SharedStrings instance that will be used by all Cells\r\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\r\n * @module binding/ColumnBinding\r\n * @constructor\r\n */\r\nfunction ColumnConfiguration(oConfig, oSharedStrings, oStyles) {\r\n\tvar aColumns, oColumn, i;\r\n\r\n\tthis.columns = [];\r\n\tthis._row = null;\r\n\tthis.styles = oStyles;\r\n\tthis.sharedStrings = oSharedStrings;\r\n\tthis.hideHeader = oConfig.hideHeader;\r\n\r\n\tObject.defineProperty(this, 'hierarchyLevelProperty', { value: oConfig.hierarchyLevel });\r\n\r\n\taColumns = oConfig.columns;\r\n\r\n\tfor (i = 0; i < aColumns.length; i++) {\r\n\r\n\t\t/* As specified, the hierarchy level indentation will only be applied on the first row */\r\n\t\tif (i == 0) {\r\n\t\t\tif (typeof aColumns[i] === 'string') {\r\n\t\t\t\taColumns[i] = { property: aColumns[i] };\r\n\t\t\t}\r\n\r\n\t\t\taColumns[i].hierarchyLevel = this.hierarchyLevelProperty;\r\n\t\t}\r\n\r\n\t\toColumn = aColumns[i] instanceof Column ?\r\n\t\t\taColumns[i] : new Column(aColumns[i], this.sharedStrings, this.styles);\r\n\r\n\t\tthis.columns.push(oColumn);\r\n\t}\r\n}\r\n\r\n/**\r\n * Initializes the objects that are necessary for the binding. This\r\n * components are:\r\n * - a template Row\r\n * - a Cell for each Column\r\n * - a Style for each data type referenced by each Column\r\n *\r\n * @private\r\n */\r\nColumnConfiguration.prototype._initBinding = function() {\r\n\tvar i;\r\n\r\n\tthis._row = new Row();\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis._row.addCell(this.columns[i].getCell());\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\r\n *\r\n * @param {Object} oData - The data object that has to be bound to the row\r\n * @param {number} nHierarchyLevel - Hierarchy level that will be used for indent and outline\r\n * @returns {Row} - Returns the created Row that contains the provided data\r\n */\r\nColumnConfiguration.prototype.bind = function(oData, nHierarchyLevel) {\r\n\tvar i, normalizedHierarchyLevel;\r\n\r\n\tif (this._row === null) {\r\n\t\tthis._initBinding();\r\n\t}\r\n\r\n\t/* Normalise hierarchy depth to not exceed the maximum depth of 7 */\r\n\tnormalizedHierarchyLevel = Math.min(nHierarchyLevel, 7);\r\n\r\n\t/*\r\n\t * We need to add, update or delete the outline attribute because\r\n\t * we reuse the row object\r\n\t */\r\n\tif (normalizedHierarchyLevel && !this._row.outline) {\r\n\t\tthis._row.addAttribute({\r\n\t\t\tid: 'outline',\r\n\t\t\tname: 'outlineLevel',\r\n\t\t\tvalue: normalizedHierarchyLevel\r\n\t\t});\r\n\t} else if (normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.outline.value = normalizedHierarchyLevel;\r\n\t} else if (!normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.remove('outline');\r\n\t}\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.columns[i].bind(oData);\r\n\t}\r\n\r\n\treturn this._row;\r\n};\r\n\r\n\r\n/**\r\n * Creates the header Row according to the current ColumnConfiguration and returns it.\r\n *\r\n * @returns {Row} - Header row according to the ColumnConfiguration\r\n */\r\nColumnConfiguration.prototype.getHeader = function() {\r\n\tvar cell, row, type;\r\n\r\n\tif (this.hideHeader) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F7F7F7'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId({}));\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\tthis.columns.forEach(function(column) {\r\n\r\n\t\t/* Create new Cell and assign value */\r\n\t\tcell = new Cell(type, this.sharedStrings);\r\n\t\tcell.setValue('label', column);\r\n\r\n\t\trow.addCell(cell);\r\n\t}.bind(this));\r\n\r\n\treturn row;\r\n};\r\n\r\n/**\r\n *\r\n * @param sGroupName\r\n * @return {Row}\r\n */\r\nColumnConfiguration.prototype.getGroupHeader = function(sGroupName) {\r\n\tvar cell, row, type, data;\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F2F2F2'\r\n\t\t}\r\n\t});\r\n\tdata = {\r\n\t\tname: sGroupName\r\n\t};\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId(data));\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\trow.spans.value = '1:' + this.size();\r\n\r\n\t/* Create new Cell and assign value */\r\n\tcell = new Cell(type, this.sharedStrings);\r\n\tcell.setValue('name', data);\r\n\r\n\trow.addCell(cell);\r\n\r\n\treturn row;\r\n};\r\n\r\n\r\n/**\r\n * Returns the size of the ColumnConfiguration - respectively the\r\n * count of the configured columns.\r\n *\r\n * @returns {number} Count of configured columns\r\n */\r\nColumnConfiguration.prototype.size = function() {\r\n\treturn this.columns.length;\r\n};\r\n\r\nmodule.exports = ColumnConfiguration;","var Type = require('./Type'),\r\n\tScaleSettings = require('./ScaleSettings'),\r\n\tAlignment = require('../../style/Alignment');\r\n\r\n/**\r\n * The BigNumber class represents string formatted number with\r\n * specific formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this BigNumber type\r\n * @constructor\r\n */\r\nfunction BigNumber(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.type = oConfig ? oConfig.type : null;\r\n\tthis.displayUnit = oConfig && typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\t/**\r\n\t * Due to default text alignment LTR, we need to invert the\r\n\t * alignment so that it reflects the default number alignment\r\n\t */\r\n\tthis.alignment = this.alignment === null ? Alignment.horizontal.RIGHT : Alignment.horizontal.LEFT;\r\n}\r\n\r\nBigNumber.prototype = Object.create(Type.prototype);\r\nBigNumber.prototype.constructor = BigNumber;\r\n\r\n/**\r\n * Returns the unit specific scale.\r\n *\r\n * @param {string} sUnit - ISO unit of measure or currency code string\r\n * @returns {number|null} A number that represents the unit specific scale\r\n * @public\r\n */\r\nBigNumber.prototype.getScale = function(sUnit) {\r\n\tvar fnResolveScale, iScale;\r\n\r\n\tfnResolveScale = this.type === 'currency' ? ScaleSettings.getScaleForCurrency : ScaleSettings.getScaleForUnit;\r\n\tiScale = fnResolveScale(sUnit);\r\n\r\n\tif (isNaN(iScale)) {\r\n\t\tiScale = this.scale;\r\n\t}\r\n\r\n\treturn iScale;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n * Returns null if no value is present or the value cannot be processed by this type.\r\n */\r\nBigNumber.prototype.getValue = function(property, oData) {\r\n\tvar iScale, sResult, sUnit, sValue;\r\n\r\n\tsValue = oData[property];\r\n\r\n\t/* Convert number to string for BigNumber conversion */\r\n\tif (typeof sValue == 'number') {\r\n\t\tsValue = sValue.toString();\r\n\t}\r\n\r\n\t/* The value must be passed as a string containing only numerical characters with an optional decimal separator */\r\n\tif (typeof sValue != 'string' || !sValue.match(/^(-){0,1}[0-9]+(\\.[0-9]+)*$/g)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsUnit = oData[this.unitProperty] || this.unit;\r\n\tiScale = this.getScale(sUnit);\r\n\r\n\r\n\tsResult = this._parseValue(sValue, iScale, this.delimiter);\r\n\r\n\tif (this.displayUnit) {\r\n\t\tsResult += (sUnit ? ' ' + sUnit : '');\r\n\t}\r\n\r\n\treturn sResult;\r\n};\r\n\r\n/**\r\n * Parses a string representation of a numeric value according to the given requirements.\r\n *\r\n * @param {string} sValue - String representation of a numeric value\r\n * @param {number|null} [iScale] - Defines the scale of the numeric value ( >= 0)\r\n * @param {boolean} [bDelimiter] - Defines if thousand delimiters should be visible in the output\r\n * @returns {string} - Parsed representation\r\n * @private\r\n */\r\nBigNumber.prototype._parseValue = function(sValue, iScale, bDelimiter) {\r\n\tvar aSplitted, aInteger, i, sDecimal, sInteger, sSign;\r\n\r\n\taSplitted = sValue.split('.');\r\n\tsInteger = aSplitted[0];\r\n\tsDecimal = aSplitted.length > 1 ? aSplitted[1] : '';\r\n\r\n\t/* Add thousand delimiter to the integer value */\r\n\tif (bDelimiter) {\r\n\r\n\t\t/* Remove sign before inserting the delimiter */\r\n\t\taInteger = sInteger.split('');\r\n\t\tsSign = aInteger[0] === '-' ? aInteger.shift() : '';\r\n\r\n\t\tsInteger = sSign + aInteger.reduceRight(function(accumulator, currentValue) {\r\n\t\t\treturn currentValue + (accumulator.length % 4 == 3 ? ',' + accumulator : accumulator);\r\n\t\t}, '');\r\n\t}\r\n\r\n\tif (typeof iScale === 'number') {\r\n\t\tif (iScale < sDecimal.length) {\r\n\t\t\tsDecimal = sDecimal.substring(0, iScale);\r\n\t\t} else {\r\n\t\t\tfor (i = sDecimal.length; i < iScale; i++) {\r\n\t\t\t\tsDecimal += '0';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn sInteger + (sDecimal ? '.' + sDecimal : '');\r\n};\r\n\r\nmodule.exports = BigNumber;","var Type = require('./Type');\r\n\r\n/**\r\n * The BooleanType class represents a boolean data type. BooleanType\r\n * data can work in two different ways. The first way is the Office\r\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\r\n * the users locale. This value can easily be used within formulas.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\r\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\r\n * @constructor\r\n */\r\nfunction BooleanType(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\r\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\r\n}\r\n\r\nBooleanType.prototype = Object.create(Type.prototype);\r\nBooleanType.prototype.constructor = BooleanType;\r\n\r\nBooleanType.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\n/**\r\n * This method indicates if the properties trueValue and falseValue\r\n * are configured correctly and the BooleanType supports a custom\r\n * format.\r\n *\r\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\r\n */\r\nBooleanType.prototype.isCustomFormatted = function() {\r\n\treturn !!this.trueValue\r\n\t\t&& typeof this.trueValue === 'string'\r\n\t\t&& !!this.falseValue\r\n\t\t&& typeof this.falseValue === 'string';\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nBooleanType.prototype._createConfiguration = function() {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(BooleanType.prototype)._createConfiguration.call(this);\r\n\tconfig.numberFormat =\r\n\t\tthis.isCustomFormatted() ?\r\n\t\t\t{ format: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"' } : BooleanType.DEFAULT.numberFormat;\r\n\r\n\treturn config;\r\n};\r\n\r\nmodule.exports = BooleanType;","var Type = require('./Type');\r\n\r\n/**\r\n * The <code>CalendarBase</code> class represents a date/datetime/time data type.\r\n * It handles the formatting and offers several options such as calendar, custom\r\n * format string, and a subtype.\r\n *\r\n * @param {Object} [oConfig] A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.format] A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] Specifies the calendar that will be used (default: gregorian)\r\n * @param {string} [oConfig.inputFormat] Specifies the format of the string-formatted date value (uppercase YYYYMMDD)\r\n * @constructor\r\n */\r\nfunction CalendarBase(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig && typeof oConfig.calendar === 'string' ? oConfig.calendar.toLowerCase() : null;\r\n\tthis.inputFormat = oConfig && typeof oConfig.inputFormat == 'string' ? oConfig.inputFormat.toUpperCase() : null;\r\n}\r\n\r\nCalendarBase.prototype = Object.create(Type.prototype);\r\nCalendarBase.prototype.constructor = CalendarBase;\r\n\r\nCalendarBase.LOCAL_TIMEZONE = new Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\nCalendarBase.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarBase.BUILTIN = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\nCalendarBase.oSymbols = {\r\n\t'Y': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCFullYear(sValue);\r\n\t\t}\r\n\t},\r\n\t'M': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCMonth(sValue - 1);\r\n\t\t}\r\n\t},\r\n\t'D': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCDate(sValue);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates the <code>Style</code> configuration object according to\r\n * the configuration of this<code>CalendarBase</code> instance.\r\n *\r\n * @param {Object} oData Business object that gets bound to the styling template\r\n * @return {Object} Style descriptor object\r\n * @protected\r\n */\r\nCalendarBase.prototype._createConfiguration = function(oData) {\r\n\tvar oConfig, sKey, sTemplate;\r\n\r\n\toConfig = Object.getPrototypeOf(CalendarBase.prototype)._createConfiguration.call(this, oData);\r\n\r\n\tsTemplate = this.getDefaultFormat(oData);\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\tsTemplate = 'b2' + sTemplate;\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\tsTemplate = '[$-ja-JP]' + sTemplate;\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\toConfig.numberFormat = {\r\n\t\tformat: sTemplate\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (sKey in CalendarBase.BUILTIN) {\r\n\t\tif (CalendarBase.BUILTIN[sKey] === sTemplate) {\r\n\t\t\toConfig.numberFormat = parseInt(sKey, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn oConfig;\r\n};\r\n\r\n/**\r\n * Returns the default NumberFormat for the specific type\r\n * and takes a predefined custom format into account.\r\n *\r\n * @returns {string|null} NumberFormat template of the type or null\r\n * @private\r\n */\r\nCalendarBase.prototype.getDefaultFormat = function() {\r\n\tvar sTemplate;\r\n\r\n\tif (typeof this.format === 'string' && this.format.match(/^[gdhmsy\\s-,.:/]+(AM\\/PM)?$/)) {\r\n\t\tsTemplate = this.format;\r\n\t} else if (this.calendar === 'islamic') {\r\n\t\tsTemplate = 'd mmmm yyyy';\r\n\t} else if (this.calendar === 'japanese') {\r\n\t\tsTemplate = 'ge.m.d';\r\n\t}\r\n\r\n\treturn sTemplate;\r\n};\r\n\r\n/**\r\n * Returns the value of the given property that is assigned in the line item.\r\n *\r\n * @param {string} sProperty Name of the property that contains the value\r\n * @param {Object} oData Line item that contains data\r\n * @return {number|null} XLSX-specific date/time format in days since 30.12.1899\r\n */\r\nCalendarBase.prototype.getValue = function(sProperty, oData) {\r\n\tvar iTimestamp, vValue;\r\n\r\n\tvValue = oData[sProperty];\r\n\r\n\tif (vValue === null || typeof vValue === 'undefined' || vValue === '') {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* Date or String, Number wrapper */\r\n\tif (typeof vValue === 'object') {\r\n\t\tvValue = vValue.valueOf();\r\n\t}\r\n\r\n\t/* 1. Unix timestamp as number */\r\n\tif (typeof vValue === 'number') {\r\n\t\tiTimestamp = vValue;\r\n\t}\r\n\r\n\t/* 2. String based date/time representation */\r\n\tif (typeof vValue === 'string') {\r\n\t\tiTimestamp = this._parseStringValue(vValue);\r\n\t}\r\n\r\n\treturn typeof iTimestamp === 'number'\r\n\t\t? this.dateToExcel(iTimestamp, oData) : null;\r\n};\r\n\r\n/**\r\n * Converts a textual date/time representation to a numeric timestamp.\r\n *\r\n * @param {string} sValue String representation of the date/time\r\n * @return {number|null} Numeric timestamp\r\n * @private\r\n */\r\nCalendarBase.prototype._parseStringValue = function(sValue) {\r\n\r\n\t/* 1. Pattern formatted date string */\r\n\tif (this.inputFormat && typeof this.inputFormat === 'string') {\r\n\t\treturn CalendarBase._parseStringDate(sValue, this.inputFormat);\r\n\t}\r\n\r\n\t/* 2. OData date string '/Date(1234567890)/' */\r\n\tif (CalendarBase.odataDateRegex.test(sValue)) {\r\n\t\treturn CalendarBase._parseOdataDate(sValue);\r\n\t}\r\n\r\n\t/* 3. DateTimeOffset representation 1986-04-13T01:08:00.000+01:00 */\r\n\tif (CalendarBase.odataDateTimeOffsetRegex.test(sValue)) {\r\n\t\treturn Date.parse(sValue);\r\n\t}\r\n\r\n\t/* 4. Unix timestamp as string */\r\n\tif (isFinite(sValue)) {\r\n\t\treturn parseInt(sValue, 10);\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\n/** START Copied and adapted from datajs **/\r\n/**\r\n * Extracts the milliseconds if the value is a date/time instance or formatted string.\r\n *\r\n * @param {any} vValue the value (may be <code>undefined</code> or <code>null</code>)\r\n * @return {any} the number of milliseconds or the value itself\r\n */\r\nCalendarBase._parseODataDuration = function(vValue) {\r\n\tvar parts, days, hours, minutes, seconds, ms;\r\n\t// / <summary>Parses a string in xsd:duration format.</summary>\r\n\t// / <param name=\"duration\" type=\"String\">Duration value.</param>\r\n\t// / <remarks>\r\n\t// / This method will return the input, if the input string has a year or a month component.\r\n\t// / </remarks>\r\n\t// / <returns type=\"Object\">Object representing the time</returns>\r\n\r\n\tparts = CalendarBase.odataDurationRegex.exec(vValue);\r\n\r\n\t// Unsupported duration value for Edm.Time OData spec (if year of month is present)\r\n\t/* EDITED\r\n\tif (parts[2] || parts[3]) {\r\n\t\treturn vValue;\r\n\t}\r\n\t */\r\n\r\n\tdays = parseInt(parts[4] || 0, 10);\r\n\thours = parseInt(parts[5] || 0, 10);\r\n\tminutes = parseInt(parts[6] || 0, 10);\r\n\tseconds = parseFloat(parts[7] || 0);\r\n\r\n\tms = parts[8];\r\n\tif (ms) {\r\n\t\t// Parse ms duration value ignoring any precision/scale as that part is anyway ignored by JS Date conversion!\r\n\t\tms = parseFloat('0.' + ms) * 1000;\r\n\t} else {\r\n\t\tms = 0;\r\n\t}\r\n\r\n\tms += (seconds * 1000) + (minutes * 60000) + (hours * 3600000) + (days * 86400000);\r\n\r\n\tif (parts[1] === '-') {\r\n\t\tms = -ms;\r\n\t}\r\n\r\n\treturn ms;\r\n};\r\n\r\nCalendarBase._parseTimeOfDay = function(vValue) {\r\n\tvar parts, hours, minutes, seconds;\r\n\tvar date = new Date(0);\r\n\r\n\tparts = CalendarBase.timeOfDayRegex.exec(vValue);\r\n\thours = parseInt(parts[1] || 0, 10);\r\n\tminutes = parseInt(parts[2] || 0, 10);\r\n\tseconds = parseFloat(parts[4] || 0);\r\n\tdate.setUTCHours(hours, minutes, seconds);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/**\r\n * Parses an OData date string and returns the corresponding timestamp\r\n *\r\n * @param {string} sValue - OData date string i.E. \"/Date(1524141637807)/\"\r\n * @return {number} - Unix timestamp according to OData date including offset\r\n * @private\r\n */\r\nCalendarBase._parseOdataDate = function(sValue) {\r\n\tvar matchArray, date, offset;\r\n\r\n\t/* The RegExp matches up to 4 groups:\r\n\t\t * 0: Full match\r\n\t\t * 1: Timestamp (mandatory)\r\n\t\t * 2: Timezone offset sign [ + | - ] (optional)\r\n\t\t * 3: Timezone offset minutes [0-9]{2,3} (optional)\r\n\t\t */\r\n\tmatchArray = CalendarBase.odataDateRegex.exec(sValue);\r\n\tdate = new Date(parseInt(matchArray[1], 10));\r\n\r\n\tif (matchArray[2] && matchArray[3]) {\r\n\t\toffset = parseInt(matchArray[2] + matchArray[3], 10);\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - offset);\r\n\t}\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/* The regular expression corresponds to something like this:\r\n * /Date(123+60)/\r\n *\r\n * This first number is date ticks, the + may be a - and is optional,\r\n * with the second number indicating a timezone offset in minutes.\r\n *\r\n * On the wire, the leading and trailing forward slashes are\r\n * escaped without being required to so the chance of collisions is reduced;\r\n * however, by the time we see the objects, the characters already\r\n * look like regular forward slashes.\r\n*/\r\nCalendarBase.odataDateRegex = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, milliseconds\r\nCalendarBase.odataDurationRegex =\r\n\t/^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\n/** END Copied and adapted from datajs */\r\n\r\n/* eslint-disable-next-line */\r\nCalendarBase.odataDateTimeOffsetRegex = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1])T([0-1]\\d|2[0-3])(:[0-5]\\d)(:[0-5]\\d(\\.\\d{1,12})?)?(Z|[+\\-](0\\d|1[0-2]):[0-5]\\d)/;\r\n\r\nCalendarBase.dateStringRegex = /([Y]{4,}|[M]{2}|[D]{2})/g;\r\n\r\n/* Edm.TimeOfDay can be 00:00-23:59:59.999999999999 which allows to ommit seconds and fractual seconds */\r\nCalendarBase.timeOfDayRegex = /^([0-1]\\d|2[0-3]):([0-5]\\d)(:([0-5]\\d)(.\\d{1,12})?)?$/;\r\n\r\n/**\r\n * Converts a JavaScript Date timestamp to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (00.01.1900 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n * Time specific information is represented as fraction. This means\r\n * that the value 30.5 represents 30.5 days after the 31.12.1899\r\n * where.5 stands for half a day. A day is defined as 24 hours, so\r\n * half a day means 12 hours since the beginning of the day at\r\n * 00:00:00. If the integer part of the value is greater than 0 date\r\n * specific information will be present in the cell.\r\n *\r\n * This also applies for time formatted cells. Although the cell only\r\n * displays the time specific part, the editing bar still shows the\r\n * date specific part. Therefore it is necessary to remove the date\r\n * specific part from the value in the XLSX file.\r\n *\r\n * The input format can contain milliseconds, which cannot be\r\n * displayed, since no literal is provided for this in the number\r\n * formatting of the Office Open XML Spreadsheet Format. This causes\r\n * milliseconds to be rounded to the nearest second, which can result\r\n * in a difference of one second. Therefore, milliseconds are\r\n * intentionally cut off during conversion.\r\n *\r\n * @param {number} nTimestamp JavaScript Date timestamp\r\n * @return {number} Amount of days since 31.12.1899\r\n * @private\r\n */\r\nCalendarBase.prototype.dateToExcel = function(nTimestamp) {\r\n\tvar iOffset, fExcelValue;\r\n\r\n\t/* Increase the offset if date is after February 28th 1900 */\r\n\tiOffset = nTimestamp >= -2203891200000 ? 2 : 1;\r\n\r\n\t/**\r\n\t * Fallback if date is before UTC 31.12.1899 00:00:00\r\n\t * which corresponds to 0 in Excel\r\n\t */\r\n\tfExcelValue = Math.max(((nTimestamp - (nTimestamp % 1000)) / (86400 * 1000)) + (25567 + iOffset), 0);\r\n\r\n\treturn fExcelValue;\r\n};\r\n\r\n/**\r\n * The method parses a given string value according to the provided\r\n * date pattern.\r\n *\r\n * Restrictions:\r\n * Currently only the symbols d, m, y are supported which correspond\r\n * to day, month, year.\r\n *\r\n * @param {string} sValue Date formatted string\r\n * @param {string} sPattern ISO 8601 pattern that gets applied\r\n * @return {number|null} UNIX timestamp that represents the parsed date string\r\n * @private\r\n */\r\nCalendarBase._parseStringDate = function(sValue, sPattern) {\r\n\tvar aMatch, oDate, sSubstring;\r\n\r\n\toDate = new Date(0);\r\n\r\n\tdo {\r\n\t\taMatch = CalendarBase.dateStringRegex.exec(sPattern);\r\n\r\n\t\tif (aMatch !== null) {\r\n\t\t\tsSubstring = sValue.slice(aMatch.index, aMatch.index + aMatch[0].length);\r\n\r\n\t\t\tCalendarBase.oSymbols[aMatch[0].charAt(0)].apply(parseInt(sSubstring, 10), oDate);\r\n\t\t}\r\n\t} while (aMatch !== null);\r\n\r\n\treturn oDate.getTime();\r\n};\r\n\r\nmodule.exports = CalendarBase;","var CalendarBase = require('./CalendarBase');\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.utc] Specifies if the CalendarDate is exported in UTC\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tCalendarBase.call(this, oConfig);\r\n\r\n\tthis.utc = true;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(CalendarBase.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\n\r\n/**\r\n * Returns the default NumberFormat for the specific type.\r\n *\r\n * @returns {string} NumberFormat template for type Date\r\n * @private\r\n */\r\nCalendarDate.prototype.getDefaultFormat = function() {\r\n\treturn Object.getPrototypeOf(CalendarDate.prototype).getDefaultFormat.call(this)\r\n\t\t|| CalendarBase.BUILTIN[14];\r\n};\r\n\r\nmodule.exports = CalendarDate;","var CalendarBase = require('./CalendarBase');\r\n\r\n/**\r\n * The CalendarDateTime class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] A configuration object that is used to specify the formatting\r\n * @param {boolean} [oConfig.displayTimezone=true] Whether the IANA timezone is being displayed\r\n * @param {string} [oConfig.timezone] Specific timezone that will be applied\r\n * @param {string} [oConfig.timezoneProperty] Property name that references the timezone\r\n * @constructor\r\n */\r\nfunction CalendarDateTime(oConfig) {\r\n\tCalendarBase.call(this, oConfig);\r\n\r\n\tthis.timezone = oConfig ? oConfig.timezone : null;\r\n\tthis.timezoneProperty = oConfig ? oConfig.timezoneProperty : null;\r\n\tthis.displayTimezone = oConfig && typeof oConfig.displayTimezone === 'boolean' ? oConfig.displayTimezone : true;\r\n\r\n\tthis.styleIds = {};\r\n}\r\n\r\nCalendarDateTime.prototype = Object.create(CalendarBase.prototype);\r\nCalendarDateTime.prototype.constructor = CalendarDateTime;\r\n\r\nCalendarDateTime._oCache = new Map();\r\n\r\n/**\r\n * Returns the default NumberFormat for the specific type.\r\n *\r\n * @param {Object} oData Business object that gets bound to the styling template\r\n * @returns {string} NumberFormat template for type DateTime\r\n * @private\r\n */\r\nCalendarDateTime.prototype.getDefaultFormat = function(oData) {\r\n\tvar sTemplate, sTimezone;\r\n\r\n\tsTemplate =\tObject.getPrototypeOf(CalendarDateTime.prototype).getDefaultFormat.call(this)\r\n\t\t|| CalendarBase.BUILTIN[22];\r\n\r\n\tif ((this.calendar === 'islamic' && sTemplate === 'd mmmm yyyy')\r\n\t\t|| (this.calendar === 'japanese' && sTemplate === 'ge.m.d')) {\r\n\t\tsTemplate += ' hh:mm';\r\n\t}\r\n\r\n\t/* Apply timezone on the cell format only for line item specific timezone */\r\n\tif (this.timezoneProperty && this.displayTimezone) {\r\n\t\tsTimezone = this.getTimezone(oData);\r\n\t\tsTemplate = '_-' + sTemplate + '* ';\r\n\t\tsTemplate += '\"' + sTimezone.replace('_', ' ') + '\"';\r\n\t}\r\n\r\n\treturn sTemplate;\r\n};\r\n\r\n/**\r\n * Returns the IANA timezone string that is used either for the whole\r\n * column or depending on the row data. The specific timezone is obtained\r\n * in the following order (properties):\r\n *\r\n * 1. timezoneProperty \t(dynamic)\r\n * 2. timezone\t\t\t(static)\r\n * 3. utc\t\t\t\t(UTC)\r\n *\r\n * @param {Object} oData Business object that represents a row\r\n * @returns {string|null} Specific IANA timezone string or null if no timezone could be evaluated\r\n */\r\nCalendarDateTime.prototype.getTimezone = function(oData) {\r\n\tif (oData && oData[this.timezoneProperty] && typeof oData[this.timezoneProperty] === 'string') {\r\n\t\treturn oData[this.timezoneProperty];\r\n\t}\r\n\r\n\tif (this.timezone) {\r\n\t\treturn this.timezone;\r\n\t}\r\n\r\n\treturn 'UTC';\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for the UoM\r\n * @param {string|number} [vValue] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nCalendarDateTime.prototype.getStyleId = function(oData, vValue) {\r\n\tvar iStyleId, sTimezone;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.timezoneProperty) {\r\n\t\treturn Object.getPrototypeOf(CalendarDateTime.prototype).getStyleId.call(this, oData, vValue);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tsTimezone = this.getTimezone(oData);\r\n\tiStyleId = this.styleIds[sTimezone];\r\n\r\n\tif (typeof iStyleId === 'undefined') {\r\n\t\tthis.styleIds[sTimezone] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleIds[sTimezone];\r\n};\r\n\r\n/**\r\n * Converts a JavaScript Date timestamp to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (00.01.1900 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n * Time specific information is represented as fraction. This means\r\n * that the value 30.5 represents 30.5 days after the 31.12.1899\r\n * where.5 stands for half a day. A day is defined as 24 hours, so\r\n * half a day means 12 hours since the beginning of the day at\r\n * 00:00:00. If the integer part of the value is greater than 0 date\r\n * specific information will be present in the cell.\r\n *\r\n * This also applies for time formatted cells. Although the cell only\r\n * displays the time specific part, the editing bar still shows the\r\n * date specific part. Therefore it is necessary to remove the date\r\n * specific part from the value in the XLSX file.\r\n *\r\n * The input format can contain milliseconds, which cannot be\r\n * displayed, since no literal is provided for this in the number\r\n * formatting of the Office Open XML Spreadsheet Format. This causes\r\n * milliseconds to be rounded to the nearest second, which can result\r\n * in a difference of one second. Therefore, milliseconds are\r\n * intentionally cut off during conversion.\r\n *\r\n * @param {number} nTimestamp JavaScript Date timestamp\r\n * @param {string} [oData] Defines if the timestamp remains untouched or if a timezone specific offset is considered\r\n * @return {number} Amount of days since 31.12.1899\r\n * @private\r\n */\r\nCalendarDateTime.prototype.dateToExcel = function(nTimestamp, oData) {\r\n\tvar iDateDifference, fExcelValue, iTimezoneOffset, oDate, oFormat, oParts, sTimezone;\r\n\r\n\tsTimezone = this.getTimezone(oData);\r\n\tfExcelValue = Object.getPrototypeOf(CalendarDateTime.prototype).dateToExcel.call(this, nTimestamp);\r\n\r\n\tif (sTimezone && sTimezone !== 'UTC') {\r\n\t\toFormat = CalendarDateTime.getTimezoneFormat(sTimezone);\r\n\r\n\t\t/* Calculate offset */\r\n\t\toDate = new Date(nTimestamp);\r\n\t\toParts = oFormat.formatToParts(new Date(nTimestamp)).reduce(function(acc, item) {\r\n\t\t\tswitch (item.type) {\r\n\t\t\t\tcase 'day':\r\n\t\t\t\tcase 'hour':\r\n\t\t\t\tcase 'minute':\r\n\t\t\t\t\tacc[item.type] = item.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: /* Do nothing */\r\n\t\t\t}\r\n\r\n\t\t\treturn acc;\r\n\t\t}, {});\r\n\r\n\t\tiDateDifference = oDate.getUTCDate() - parseInt(oParts.day, 10);\r\n\r\n\t\t/*\r\n\t\t * Once the date difference is more than 1 day,\r\n\t\t * the day refers to a different month. This\r\n\t\t * translates into the opposite offset.\r\n\t\t */\r\n\t\tif (iDateDifference > 1) {\r\n\t\t\tiDateDifference = -1;\r\n\t\t} else if (iDateDifference < -1) {\r\n\t\t\tiDateDifference = 1;\r\n\t\t}\r\n\r\n\t\tiTimezoneOffset = iDateDifference * 24 * 60;\r\n\t\tiTimezoneOffset += (oDate.getUTCHours() - parseInt(oParts.hour, 10)) * 60;\r\n\t\tiTimezoneOffset += (oDate.getUTCMinutes() - parseInt(oParts.minute, 10));\r\n\r\n\t\t/* Apply offset to Excel date time representation */\r\n\t\tfExcelValue -= (iTimezoneOffset / 1440); // 1440 minutes per day\r\n\t}\r\n\r\n\treturn fExcelValue;\r\n};\r\n\r\n/**\r\n * Returns a Intl.DateTimeFormat for the given timezone.\r\n *\r\n * @param {string} sTimezone Timezone that will be used by the format\r\n * @returns {Intl.DateTimeFormat} Timezone specific format\r\n */\r\nCalendarDateTime.getTimezoneFormat = function(sTimezone) {\r\n\tvar oCachedEntry, oInstance, oOptions;\r\n\r\n\toCachedEntry = CalendarDateTime._oCache.get(sTimezone);\r\n\r\n\tif (oCachedEntry) {\r\n\t\treturn oCachedEntry;\r\n\t}\r\n\r\n\toOptions = {\r\n\t\thourCycle: 'h23',\r\n\t\thour: '2-digit',\r\n\t\tminute: '2-digit',\r\n\t\tday: '2-digit',\r\n\t\ttimeZone: sTimezone,\r\n\t\tera: 'narrow'\r\n\t};\r\n\r\n\toInstance = new Intl.DateTimeFormat('en-US', oOptions);\r\n\r\n\tCalendarDateTime._oCache.set(sTimezone, oInstance);\r\n\r\n\treturn oInstance;\r\n};\r\n\r\nmodule.exports = CalendarDateTime;","var CalendarBase = require('./CalendarBase');\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] A configuration object that is used to specify the formatting\r\n * @constructor\r\n */\r\nfunction CalendarTime(oConfig) {\r\n\tCalendarBase.call(this, oConfig);\r\n\r\n\tthis.utc = true;\r\n}\r\n\r\nCalendarTime.prototype = Object.create(CalendarBase.prototype);\r\nCalendarTime.prototype.constructor = CalendarTime;\r\n\r\n/**\r\n * Returns the value of the given property that is assigned in the line item.\r\n *\r\n * @param {string} sProperty Name of the property that contains the value\r\n * @param {Object} oData Line item that contains data\r\n * @return {number|null} XLSX specific date/time format in days since 30.12.1899\r\n */\r\nCalendarTime.prototype.getValue = function(sProperty, oData) {\r\n\tvar iExcelTimestamp;\r\n\r\n\tiExcelTimestamp = Object.getPrototypeOf(CalendarTime.prototype).getValue.call(this, sProperty, oData);\r\n\r\n\t/* Remove date specific part to only represent time */\r\n\treturn typeof iExcelTimestamp === 'number' ? iExcelTimestamp % 1 : null;\r\n};\r\n\r\n/**\r\n * Returns the default NumberFormat for the specific type.\r\n *\r\n * @returns {string} NumberFormat template for type DateTime\r\n * @private\r\n */\r\nCalendarTime.prototype.getDefaultFormat = function() {\r\n\treturn Object.getPrototypeOf(CalendarTime.prototype).getDefaultFormat.call(this)\r\n\t\t|| CalendarBase.BUILTIN[21];\r\n};\r\n\r\n/**\r\n * Converts a textual date/time representation to a numeric timestamp.\r\n *\r\n * @param {string} sValue String representation of the date/time\r\n * @return {number|null} Numeric timestamp\r\n * @private\r\n */\r\nCalendarTime.prototype._parseStringValue = function(sValue) {\r\n\tvar fParsedValue;\r\n\r\n\tfParsedValue = Object.getPrototypeOf(CalendarTime.prototype)._parseStringValue.call(this, sValue);\r\n\r\n\tif (typeof fParsedValue === 'number') {\r\n\t\treturn fParsedValue;\r\n\t}\r\n\r\n\t/* 2. OData Edm.TimeOfDay */\r\n\tif (CalendarBase.timeOfDayRegex.test(sValue)) {\r\n\t\treturn CalendarBase._parseTimeOfDay(sValue);\r\n\t}\r\n\r\n\t/* 3. OData duration string 'PT01H23M45S' */\r\n\tif (CalendarBase.odataDurationRegex.test(sValue)) {\r\n\t\treturn CalendarBase._parseODataDuration(sValue);\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\n\r\nmodule.exports = CalendarTime;","var Numeric = require('./Numeric'),\r\n\tScaleSettings = require('./ScaleSettings');\r\n\r\n/**\r\n * The Currency class represents a currency data type. It handles the\r\n * formatting and accepts several options like second property for\r\n * the unit of measurement or if the unit of measurement should be\r\n * displayed.\r\n *\r\n * It styles currencies with its particular amount of decimals.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\r\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\r\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\r\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\r\n * regardless of its particular unit of measurement\r\n * @constructor\r\n */\r\nfunction Currency(oConfig) {\r\n\tNumeric.call(this, oConfig);\r\n\r\n\tthis.displayUnit = oConfig && typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n}\r\n\r\nCurrency.prototype = Object.create(Numeric.prototype);\r\nCurrency.prototype.constructor = Currency;\r\n\r\n/**\r\n * Returns the currency specific scale.\r\n *\r\n * @param {string} sCurrencyCode - ISO currency code like USD for $ and EUR for € etc.\r\n * @returns {number} A number between 2 and 3 depending on the scale of the given currency\r\n * @public\r\n */\r\nCurrency.prototype.getScale = function(sCurrencyCode) {\r\n\treturn ScaleSettings.getScaleForCurrency(sCurrencyCode);\r\n};\r\n\r\n/**\r\n * Creates the Style configuration needed for registering the Type\r\n * specific styling in the Styles class.\r\n *\r\n * @param {Object} oData - Business object that gets bound to the styling template\r\n * @returns {Object} - Styling configuration object\r\n * @protected\r\n */\r\nCurrency.prototype._createConfiguration = function(oData) {\r\n\tvar i, j, scale, template, unit;\r\n\r\n\t// TODO implement inheritance with Numeric class\r\n\r\n\ttemplate = '#,##0';\r\n\tunit = this.getUnit(oData);\r\n\r\n\t/* Apply fixed scale, only if no unitProperty is provided */\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tscale = this.scale;\r\n\t} else {\r\n\t\tscale = this.getScale(unit);\r\n\t}\r\n\r\n\t/* Apply separator or placeholder */\r\n\ttemplate += (scale > 0) ? '.' : '_.';\r\n\r\n\tfor (i = 0; i < scale; i++) {\r\n\t\ttemplate += '0';\r\n\t}\r\n\r\n\tfor (j = ScaleSettings.MAX_CURRENCY_SCALE - scale; j > 0; j--) {\r\n\t\ttemplate += '_0';\r\n\t}\r\n\r\n\t/* Add unit of measurement if required */\r\n\tif (this.displayUnit) {\r\n\t\tunit = unit ? '\"' + unit + '\"' : '_E_U_R';\r\n\r\n\t\t// Applies unit of measurement or a placeholder if unit is empty\r\n\t\ttemplate = template + '\\\\ ' + unit;\r\n\t}\r\n\r\n\t// Add formatting for negative values as well\r\n\ttemplate = '* ' + template + ';* \\\\-\\\\ ' + template;\r\n\r\n\treturn { numberFormat: { format: template } };\r\n};\r\n\r\nmodule.exports = Currency;","var Type = require('./Type');\r\n\r\n/**\r\n * The Enumeration class represents an enumeration data type.\r\n * The Enumeration allows to assign particular values for\r\n * corresponding keys.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n * @constructor\r\n */\r\nfunction Enumeration(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis._valueMap = oConfig && oConfig.valueMap ? oConfig.valueMap : {};\r\n}\r\n\r\nEnumeration.prototype = Object.create(Type.prototype);\r\nEnumeration.prototype.constructor = Enumeration;\r\n\r\n/**\r\n * Returns the mapped value for the key that is present in the\r\n * business object.\r\n *\r\n * @param {string} sProperty - Name of the property that contains the key\r\n * @param {Object} oData - Business object that contains the data\r\n * @returns {string} - The value of the given property after type specific processing\r\n * @protected\r\n */\r\nEnumeration.prototype.getValue = function(sProperty, oData) {\r\n\tvar key, result;\r\n\r\n\tkey = oData[sProperty];\r\n\tresult = this._valueMap instanceof Map ? this._valueMap.get(key) : this._valueMap[key];\r\n\r\n\treturn result || '';\r\n};\r\n\r\nmodule.exports = Enumeration;","var Type = require('./Type'),\r\n\tScaleSettings = require('./ScaleSettings');\r\n\r\n/**\r\n * The Numeric class represents a numeric data type. Numeric data can\r\n * handle several options like thousands delimiter, decimal (scale)\r\n * and different types like 'percent' and 'exponential'.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {boolean} [oConfig.autoScale] - Applies dynamic scale depending on the specific unit\r\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\r\n * @param {number} [oConfig.scale] - Defines the amount of decimals\r\n * @param {string} [oConfig.type] - Specific type that is handled by this Numeric class\r\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\r\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\r\n * @constructor\r\n */\r\nfunction Numeric(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.type = oConfig && typeof oConfig.type === 'string' ? oConfig.type.toLowerCase() : null;\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.autoScale = oConfig ? oConfig.autoScale : false;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\tthis.styleIds = {};\r\n}\r\n\r\nNumeric.prototype = Object.create(Type.prototype);\r\nNumeric.prototype.constructor = Numeric;\r\n\r\nNumeric.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\nNumeric.builtin = {\r\n\t1: '0',\r\n\t2: '0.00',\r\n\t3: '#,##0',\r\n\t4: '#,##0.00',\r\n\t9: '0%',\r\n\t10: '0.00%',\r\n\t11: '0.00E+00',\r\n\t12: '# ?/?',\r\n\t13: '# ??/??',\r\n\t37: '#,##0;(#,##0)',\r\n\t38: '#,##0;[Red](#,##0)',\r\n\t39: '#,##0.00;(#,##0.00)',\r\n\t40: '#,##0.00;[Red](#,##0.00)',\r\n\t48: '##0.0E+0'\r\n};\r\n\r\nNumeric.scientificRegEx = /^-?\\d?(\\.\\d)?\\d*[eE][+-]?\\d{1,3}$/;\r\n\r\n\r\n/**\r\n * Returns the unit specific scale.\r\n *\r\n * @param {string} sUnit - Any unit of measure that has been configured within the customizing\r\n * @returns {number|null|undefined} A positive integer that represents the decimal scale or null/undefined in\r\n * case neither dynamic nor fixed scale is available\r\n * @public\r\n */\r\nNumeric.prototype.getScale = function(sUnit) {\r\n\tvar iScale;\r\n\r\n\tif (this.autoScale) {\r\n\t\tiScale = ScaleSettings.getScaleForUnit(sUnit);\r\n\t}\r\n\r\n\tif (isNaN(iScale)) {\r\n\t\tiScale = this.scale;\r\n\t}\r\n\r\n\treturn iScale;\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nNumeric.prototype._createConfiguration = function(oData) {\r\n\tvar config, i, key,\ttemplate, unit, scale;\r\n\r\n\tconfig = Object.getPrototypeOf(Numeric.prototype)._createConfiguration.call(this, oData);\r\n\r\n\t/*\r\n\t * Evaluate unit of measurement first, because a plain built-in\r\n\t * format is used as template but we need to be able to return\r\n\t * to the DEFAULT value in case the unit is empty or invalid.\r\n\t */\r\n\tunit = this.getUnit(oData);\r\n\tscale = this.getScale(unit);\r\n\r\n\tif (!this.delimiter && typeof scale !== 'number' && !unit) {\r\n\t\tconfig.numberFormat = Numeric.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\t// Use built-in template as base\r\n\ttemplate = Numeric.builtin[1];\r\n\r\n\tif (this.delimiter) {\r\n\t\ttemplate = '#,##' + template;\r\n\t}\r\n\r\n\t/* Add decimal */\r\n\tif (typeof scale === 'number' && scale > 0) {\r\n\t\ttemplate += '.';\r\n\r\n\t\tfor (i = 0; i < scale; i++) {\r\n\t\t\ttemplate += '0';\r\n\t\t}\r\n\t}\r\n\r\n\t/* Apply unit if present */\r\n\tif (this.type === 'percentage') {\r\n\t\ttemplate += unit;\r\n\t} else if (unit) {\r\n\t\ttemplate += '\\\\ \"' + unit + '\"';\r\n\t}\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in Numeric.builtin) {\r\n\t\tif (Numeric.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for the UoM\r\n * @param {string|number} [value] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nNumeric.prototype.getStyleId = function(oData, value) {\r\n\tvar styleId, unit;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.unitProperty) {\r\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this, oData, value);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tunit = oData[this.unitProperty];\r\n\tstyleId = this.styleIds[unit];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleIds[unit];\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. The value is normalized so that different input\r\n * representations will result in the same format.\r\n *\r\n * @param {string} sProperty - Name of the property that shall be accessed\r\n * @param {Object} oData - Business object that contains the data\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n */\r\nNumeric.prototype.getValue = function(sProperty, oData) {\r\n\tvar aSegments, iScale, iExponent, sValue = oData[sProperty];\r\n\r\n\tif (typeof sValue == 'string' && Numeric.scientificRegEx.test(sValue)) {\r\n\r\n\t\taSegments = sValue.split(/\\.|[eE]/g);\r\n\t\tiScale = aSegments.length === 3 ? aSegments[1].length : 0;\r\n\t\tiExponent = Number(aSegments[aSegments.length - 1]);\r\n\r\n\t\t/* According to OData V4 Edm.Double is an IEEE 754 binary64 floating-point number (15-17 decimal digits) */\r\n\t\tsValue = Number(sValue).toFixed(Math.max(iScale - iExponent, 0));\r\n\r\n\t\t/* Write back the transformed value to avoid subsequent transformations */\r\n\t\toData[sProperty] = sValue;\r\n\t}\r\n\r\n\treturn sValue;\r\n};\r\n\r\n/**\r\n * Checks if the given value can be displayed in the IEEE 754\r\n * specification format. The function ignores leading and trailing\r\n * zeros and compares the length of the actual value does not exceed\r\n * 15 digits plus an optional decimal separator.\r\n *\r\n * The number might exceed 15 digits if it contains leading or\r\n * trailing zeros.\r\n *\r\n * @param {string} sValue - Numeric value that needs to be checked\r\n * @param {Object} oData - Business object that contains additional information like unit and scale\r\n * @returns {boolean} - Whether the number needs to be formatted as BigNumber or not\r\n */\r\nNumeric.prototype.isIEEE754Compliant = function(sValue, oData) {\r\n\tvar bCompliant = false;\r\n\tvar sUnit = this.getUnit(oData);\r\n\tvar iScale = this.getScale(sUnit);\r\n\r\n\tif (typeof sValue == 'number') {\r\n\t\t// eslint-disable-next-line no-param-reassign\r\n\t\tsValue = '' + sValue;\r\n\t}\r\n\r\n\tif (typeof sValue == 'string') {\r\n\r\n\t\tbCompliant = sValue\r\n\t\t\t.trim()\r\n\t\t\t.replace(/^-*0*|0+$/g, '')\r\n\t\t\t.split('.')\r\n\t\t\t.reduce(function(acc, value, index) {\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * The array cannot have more than 2 entries, so we take the scale\r\n\t\t\t\t * into account for all indices higher than 0.\r\n\t\t\t\t */\r\n\t\t\t\tvar length = index > 0 && typeof iScale === 'number' ? Math.min(iScale, value.length) : value.length;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t* Returns 1 if the value left of the separator is\r\n\t\t\t\t* zero and was cut of by removing leading and trailing zeros\r\n\t\t\t\t*/\r\n\t\t\t\treturn acc + length || 1;\r\n\t\t\t}, 0) <= 15;\r\n\t}\r\n\r\n\treturn bCompliant;\r\n};\r\n\r\n/**\r\n * Resolves the unit of measurement that is required for the specific formatting.\r\n * @param {Object} oData - Data object that represents the row.\r\n * @returns {string} - Unit of measurement or empty string.\r\n * @protected\r\n */\r\nNumeric.prototype.getUnit = function(oData) {\r\n\tvar unit;\r\n\r\n\t/* Obtain unit of measurement if available */\r\n\tif (this.type === 'percentage') {\r\n\t\tunit = '%';\r\n\t} else if (typeof this.unitProperty === 'string' && oData) {\r\n\t\tunit = oData[this.unitProperty];\r\n\t} else if (typeof this.unit === 'string') {\r\n\t\tunit = this.unit;\r\n\t}\r\n\r\n\t/* Ignore invalid units */\r\n\tif (typeof unit !== 'string' || unit === '\"') {\r\n\t\tunit = '';\r\n\t}\r\n\r\n\treturn unit || '';\r\n};\r\n\r\nmodule.exports = Numeric;","/**\r\n * The CurrencySettings static object represents settings for the currency data type.\r\n * It provides digits for a specific currency and the default scale.\r\n */\r\nvar ScaleSettings = {};\r\n\r\n/**\r\n * Update the default currency setting with customization.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the scale settings.\r\n * @param {Object} oConfig.currency - A custom settings object that will be used for defining currency digits.\r\n * @param {Object} oConfig.unit - A map of units with their corresponding scale\r\n * @public\r\n * @static\r\n */\r\nScaleSettings.update = function(oConfig) {\r\n\tvar sUnit, iScale;\r\n\r\n\t/* Update currency scale with custom currencies */\r\n\tif (oConfig.currency) {\r\n\r\n\t\t/*\r\n\t\t * If custom currencies contain a DEFAULT value\r\n\t\t * we clear the CLDR settings to avoid a fallback\r\n\t\t * to scale settings from CLDR.\r\n\t\t */\r\n\t\tif (oConfig.currency.DEFAULT && typeof oConfig.currency.DEFAULT.scale === 'number') {\r\n\t\t\tScaleSettings.CURRENCY = {};\r\n\t\t}\r\n\r\n\t\tfor (sUnit in oConfig.currency) {\r\n\t\t\tScaleSettings.CURRENCY[sUnit] = oConfig.currency[sUnit].scale;\r\n\t\t}\r\n\t}\r\n\r\n\t/* Determine MAX_CURRENCY_SCALE */\r\n\tfor (sUnit in ScaleSettings.CURRENCY) {\r\n\t\tiScale = ScaleSettings.CURRENCY[sUnit];\r\n\r\n\t\tif (iScale > ScaleSettings.MAX_CURRENCY_SCALE) {\r\n\t\t\tScaleSettings.MAX_CURRENCY_SCALE = iScale;\r\n\t\t}\r\n\t}\r\n\r\n\tif (oConfig.unit) {\r\n\t\tfor (sUnit in oConfig.unit) {\r\n\t\t\tScaleSettings.UNIT[sUnit] = oConfig.unit[sUnit].scale;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nScaleSettings.getScaleForCurrency = function(sCurrencyCode) {\r\n\tvar iScale;\r\n\r\n\tiScale = ScaleSettings.CURRENCY[sCurrencyCode];\r\n\r\n\t/* If the currency uses the default scale */\r\n\tif (typeof iScale !== 'number') {\r\n\t\tiScale = ScaleSettings.CURRENCY.DEFAULT;\r\n\t}\r\n\r\n\treturn iScale;\r\n};\r\n\r\nScaleSettings.getScaleForUnit = function(sUnit) {\r\n\treturn ScaleSettings.UNIT[sUnit];\r\n};\r\n\r\n/**\r\n * Defines the display default scale that is used for alignment. This has no effect on the technical scale of currency\r\n * values. It is only used for alignment purposes so that different currencies with different scale are still aligned\r\n * correctly.\r\n *\r\n * @type {number}\r\n */\r\nScaleSettings.MAX_CURRENCY_SCALE = 3;\r\n\r\n/** Default settings copied from CLDR */\r\nScaleSettings.CURRENCY = {\r\n\t'ADP': 0,\r\n\t'AFN': 0,\r\n\t'ALL': 0,\r\n\t'BHD': 3,\r\n\t'BIF': 0,\r\n\t'BYR': 0,\r\n\t'CLF': 4,\r\n\t'CLP': 0,\r\n\t'DEFAULT': 2,\r\n\t'DJF': 0,\r\n\t'ESP': 0,\r\n\t'GNF': 0,\r\n\t'HUF': 0,\r\n\t'IQD': 0,\r\n\t'IRR': 0,\r\n\t'ISK': 0,\r\n\t'ITL': 0,\r\n\t'JOD': 3,\r\n\t'JPY': 0,\r\n\t'KMF': 0,\r\n\t'KPW': 0,\r\n\t'KRW': 0,\r\n\t'KWD': 3,\r\n\t'LAK': 0,\r\n\t'LBP': 0,\r\n\t'LUF': 0,\r\n\t'LYD': 3,\r\n\t'MGA': 0,\r\n\t'MGF': 0,\r\n\t'MMK': 0,\r\n\t'MRO': 0,\r\n\t'OMR': 3,\r\n\t'PYG': 0,\r\n\t'RSD': 0,\r\n\t'RWF': 0,\r\n\t'SLL': 0,\r\n\t'SOS': 0,\r\n\t'STD': 0,\r\n\t'SYP': 0,\r\n\t'TMM': 0,\r\n\t'TND': 3,\r\n\t'TRL': 0,\r\n\t'TWD': 0,\r\n\t'UGX': 0,\r\n\t'UYI': 0,\r\n\t'UYW': 4,\r\n\t'VND': 0,\r\n\t'VUV': 0,\r\n\t'XAF': 0,\r\n\t'XOF': 0,\r\n\t'XPF': 0,\r\n\t'YER': 0,\r\n\t'ZMK': 0,\r\n\t'ZWD': 0\r\n};\r\n\r\nScaleSettings.UNIT = {};\r\n\r\nmodule.exports = ScaleSettings;","var Type = require('./Type');\r\nvar Alignment = require('../../style/Alignment');\r\n\r\nvar sCompliantLineBreak = String.fromCharCode(13, 10);\r\n\r\n/**\r\n * The Text class represents textual information without any\r\n * particular formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this Text type\r\n * @param {Object} [oConfig.font] - Font configuration object\r\n * @param {number} [oConfig.font.size] - Font size\r\n * @param {string} [oConfig.font.name] - Font name i.E. Arial, Verdana, etc.\r\n * @param {Object} [oConfig.fill] - Cell fill configuration object\r\n * @param {string} [oConfig.fill.color] - Cell fill background color\r\n * @param {string} [oConfig.fill.type] - Cell fill type\r\n * @param {string} [oConfig.template] - Text template for this Type\r\n * @param {string} [oConfig.hierarchyLevel] - Property name that is used for hierarchy level indentation\r\n * @param {boolean} [oConfig.wrap] - Indicates the wrapping behavior of the text cell\r\n * @param {string} [oConfig.inputFormat] - RegExp that identifies parts of the value to process it with a template\r\n * @constructor\r\n */\r\nfunction Text(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.font = oConfig ? oConfig.font : null;\r\n\tthis.fill = oConfig ? oConfig.fill : null;\r\n\tthis.template = oConfig ? oConfig.template : null;\r\n\tthis.hierarchyLevel = oConfig ? oConfig.hierarchyLevel : null;\r\n\tthis.wrap = oConfig ? oConfig.wrap : false;\r\n\tthis.inputFormat = oConfig ? oConfig.inputFormat : null;\r\n\r\n\tthis._mStyleIds = {};\r\n}\r\n\r\nText.prototype = Object.create(Type.prototype);\r\nText.prototype.constructor = Text;\r\n\r\nText.DEFAULT = {\r\n\tfont: {\r\n\t\tsize: 11,\r\n\t\tname: 'Arial'\r\n\t}\r\n};\r\n\r\nText.formulaRegex = /^[\\s]*[=+\\-@]/;\r\n\r\n/**\r\n * Ensures that all line breaks use CR + LF.\r\n *\r\n * @param {string} sValue - Text that may contain line breaks\r\n * @return {string} - Initial text with replaced line breaks\r\n */\r\nText.convertLineBreaks = function(sValue) {\r\n\r\n\tif (typeof sValue !== 'string') {\r\n\t\treturn sValue;\r\n\t}\r\n\r\n\treturn sValue.replace(/\\r/g, '').replace(/\\n/g, sCompliantLineBreak);\r\n};\r\n\r\n/**\r\n * This method creates the XLSX specific style configuration depending on the cell content\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Style configuration used by the Styles class\r\n * @protected\r\n */\r\nText.prototype._createConfiguration = function(oData) {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(Text.prototype)._createConfiguration.call(this);\r\n\tconfig.fill = this.fill;\r\n\tconfig.font = this.font;\r\n\r\n\t/* Overwrites existing alignment for a proper indent */\r\n\tif (this.hierarchyLevel) {\r\n\t\tconfig.align = {\r\n\t\t\thorizontal: Alignment.horizontal.LEFT,\r\n\t\t\tindent: 2 * oData[this.hierarchyLevel]\r\n\t\t};\r\n\t}\r\n\r\n\t/* Wrapping can be applied on hierarchies with indentation */\r\n\tif (this.wrap) {\r\n\t\tconfig.align = config.align || {};\r\n\r\n\t\tconfig.align.wrap = this.wrap;\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for hierarchy levels\r\n * @param {string|number} [sValue] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nText.prototype.getStyleId = function(oData, sValue) {\r\n\tvar bRequiresPrefix, sIdentifier, oConfig;\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tbRequiresPrefix = sValue && Text.formulaRegex.test(sValue);\r\n\r\n\t/* Handle simple styling without hierarchy information or prefix */\r\n\tif (!this.hierarchyLevel && !bRequiresPrefix) {\r\n\t\treturn Object.getPrototypeOf(Text.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\t/* Create local identifier to differentiate between cached styleIds */\r\n\tsIdentifier = 'id_' + oData[this.hierarchyLevel] + (bRequiresPrefix ? '_prefix' : '');\r\n\r\n\tif (typeof this._mStyleIds[sIdentifier] === 'undefined') {\r\n\t\toConfig = this._createConfiguration(oData);\r\n\t\toConfig.quotePrefix = bRequiresPrefix;\r\n\t\tthis._mStyleIds[sIdentifier] = this.styles.addStyle(oConfig);\r\n\t}\r\n\r\n\treturn this._mStyleIds[sIdentifier];\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nText.prototype.getValue = function(properties, oData) {\r\n\tvar aMatch, reRegEx, sResult, bSkip, sValue, aValues, aInputMatch;\r\n\r\n\tif (!this.template) {\r\n\t\tsValue = typeof properties === 'string' ? oData[properties] : oData[properties[0]];\r\n\r\n\t\tsValue = this.wrap ? Text.convertLineBreaks(sValue) : sValue;\r\n\r\n\t\treturn sValue;\r\n\t}\r\n\r\n\tif (typeof this.inputFormat === 'string') {\r\n\t\taInputMatch = new RegExp(this.inputFormat).exec(oData[properties]);\r\n\r\n\t\t/* Keeps the initial value in case the input does not match the regex pattern */\r\n\t\taValues = Array.isArray(aInputMatch) ? aInputMatch.slice(1) : [oData[properties]];\r\n\t} else {\r\n\t\taValues = properties.reduce(function(acc, property) {\r\n\t\t\tacc.push(oData[property]);\r\n\r\n\t\t\treturn acc;\r\n\t\t}, []);\r\n\t}\r\n\r\n\t// Obtain if the further processing should be skipped due to missing values for the template\r\n\tbSkip = aValues.every(function(value) {\r\n\t\treturn value === null\r\n\t\t\t|| typeof value === 'undefined'\r\n\t\t\t|| (typeof value === 'string' && value === '');\r\n\t});\r\n\r\n\tif (bSkip) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tsResult = this.template;\r\n\treRegEx = /{([0-9]+)}/g;\r\n\r\n\taMatch = reRegEx.exec(this.template);\r\n\twhile (aMatch !== null) {\r\n\r\n\t\tsValue = aValues[aMatch[1]];\r\n\r\n\t\t// Overwrite empty or undefined values by an empty string\r\n\t\tif (sValue === null || typeof sValue === 'undefined') {\r\n\t\t\tsValue = '';\r\n\t\t}\r\n\r\n\t\t// Replaces the matched placeholder by the indexed property value\r\n\t\tsResult = sResult.replace(aMatch[0], sValue);\r\n\r\n\t\taMatch = reRegEx.exec(this.template);\r\n\t}\r\n\r\n\treturn sResult;\r\n};\r\n\r\nmodule.exports = Text;","/**\r\n * The Type class defines a supported data type, like strings,\r\n * numeric values, decimals, dates, currencies and so on. It is NOT\r\n * part of the XML representation of the generated Excel document.\r\n *\r\n * This class is marked as abstract therefore only its sub-classes\r\n * should be used.\r\n *\r\n * @param {Object} oConfig Type specific configuration\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction Type(oConfig) {\r\n\tthis.styleId = null;\r\n\tthis.alignment = oConfig && oConfig.textAlign ? oConfig.textAlign : null;\r\n}\r\n\r\n/**\r\n * Creates the type specific configuration that is used to register\r\n * its corresponding style in the Styles class.\r\n *\r\n * All subclass implementations have to call the superclass method to\r\n * ensure that alignment information will not be lost.\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Configuration object that may contain alignment information\r\n * @protected\r\n */\r\nType.prototype._createConfiguration = function(oData) {\r\n\treturn this.alignment ? { align: {\thorizontal: this.alignment }} : {};\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} [oData] - Business object that contains the actual data\r\n * @param {string|number} [value] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nType.prototype.getStyleId = function(oData, value) {\r\n\tif (this.styleId === null) {\r\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleId;\r\n};\r\n\r\n/**\r\n * Registers the Style configuration of this Type in the given Styles\r\n * class.\r\n *\r\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\r\n */\r\nType.prototype.registerAt = function(oStyles) {\r\n\tthis.styles = oStyles;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n */\r\nType.prototype.getValue = function(property, oData) {\r\n\treturn oData[property];\r\n};\r\n\r\nmodule.exports = Type;","var XMLNode\t\t \t\t= require('../xml/XMLNode'),\r\n\tBigNumber\t\t\t= require('../binding/type/BigNumber'),\r\n\tCalendarDate \t\t= require('../binding/type/CalendarDate'),\r\n\tCalendarDateTime \t= require('../binding/type/CalendarDateTime'),\r\n\tCalendarTime \t\t= require('../binding/type/CalendarTime'),\r\n\tNumeric \t\t\t= require('../binding/type/Numeric'),\r\n\tBooleanType \t\t= require('../binding/type/BooleanType'),\r\n\tCurrency \t\t\t= require('../binding/type/Currency');\r\n\r\n/**\r\n * The Cell class represents a single cell within the spreadsheet\r\n * that has to be assigned to a particular row. A Cell stores\r\n * information supporting several types of data.\r\n *\r\n * @param {Type} oType - The data type of the cell\r\n * @param {SharedStrings} oSharedStrings - SharedStrings instance that will be used by all Cells\r\n * @class\r\n */\r\nfunction Cell(oType, oSharedStrings) {\r\n\tXMLNode.call(this, Cell.metadata);\r\n\r\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\r\n\r\n\tthis._shared = oSharedStrings;\r\n\tthis._oFallbackType = null;\r\n\tthis._applyType(oType);\r\n}\r\n\r\nCell.prototype = Object.create(XMLNode.prototype);\r\nCell.prototype.constructor = Cell;\r\n\r\nCell.DataType = {\r\n\tBoolean: 'b',\r\n\tDate: 'd',\r\n\tInlineString: 'inlineStr', // We do not support inline strings\r\n\tNumber: 'n',\r\n\tSharedString: 's',\r\n\tFormularString: 'str'\r\n};\r\n\r\nCell._cellTypeProperty = 'cellType';\r\n\r\nCell.metadata = {\r\n\ttag: 'c',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'style',\r\n\t\t\tname: 's',\r\n\t\t\tvalue: '0' // Default style id\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 'v'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Applies the given type to the current Cell and maps to the\r\n * corresponding Office Open XML type definition.\r\n *\r\n * @param {Type} oType - Value of type {@link Type}\r\n * @private\r\n */\r\nCell.prototype._applyType = function(oType) {\r\n\r\n\tthis.bindingType = oType;\r\n\r\n\tswitch (oType.constructor) {\r\n\t\tcase BooleanType:\r\n\t\t\tthis.type = Cell.DataType.Boolean;\r\n\r\n\t\t\tif (!oType.isCustomFormatted()) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.Boolean\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase CalendarDate:\r\n\t\tcase CalendarDateTime:\r\n\t\tcase CalendarTime:\r\n\t\t\tthis.type = Cell.DataType.Date;\r\n\t\t\tbreak;\r\n\r\n\t\tcase Numeric:\r\n\t\tcase Currency:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\r\n\t\t\t/*\r\n\t\t\t * As long as _applyType is only called once during\r\n\t\t\t * initialization, the fallbackType can be registered\r\n\t\t\t * without any additional check.\r\n\t\t\t */\r\n\t\t\tthis._oFallbackType = new BigNumber(oType);\r\n\t\t\tthis._oFallbackType.registerAt(oType.styles);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault: // Text is the default case\r\n\t\t\tthis.addAttribute({\r\n\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\tname: 't',\r\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t});\r\n\t\t\tthis.type = Cell.DataType.SharedString;\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the specified Style to the cell.\r\n *\r\n * @param {number|string} nStyle - Instance of Excel.objects.Style\r\n */\r\nCell.prototype.setStyle = function(nStyle) {\r\n\tthis.style.value = nStyle;\r\n};\r\n\r\n/**\r\n * Applies the specified cell location as reference. The reference\r\n * must match the regular expression of Open Document SpreadsheetML\r\n * sheet format. Starting with at least one uppercase letter for the\r\n * column followed by a number without leading zeros for the row.\r\n * [A-Z]+[1-9]+[0-9]*\r\n *\r\n * @param {string} sReference - Reference of the cells' location\r\n */\r\nCell.prototype.setReference = function(sReference) {\r\n\tif (typeof sReference != 'string'\r\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\r\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\r\n\t}\r\n\r\n\tthis.reference.value = sReference;\r\n};\r\n\r\n/**\r\n * Assigns the value to the current Cell. The method requires a\r\n * property reference and a business object that gets bound depending\r\n * on the property. It is also possible to provide an array of\r\n * properties in case of aggregated columns.\r\n *\r\n * @param {(string|Array)} sProperty - single property or Array of properties\r\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\r\n */\r\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\r\n\tvar value, bindingType;\r\n\r\n\tbindingType = this.bindingType;\r\n\tvalue = bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\tif (!this._isValuePresent(value)) {\r\n\r\n\t\t/*\r\n\t\t * We need to clear the value due to the fact\r\n\t\t * that we are re-using the Cell for each row\r\n\t\t */\r\n\t\tthis.text.value = '';\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (this.type) {\r\n\t\tcase Cell.DataType.Boolean:\r\n\r\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\r\n\t\t\tif (typeof value === 'string') {\r\n\t\t\t\tvalue = value.toLowerCase() === 'true';\r\n\t\t\t}\r\n\t\t\tthis.text.value = value ? '1' : '0';\r\n\r\n\t\t\tbreak;\r\n\t\tcase Cell.DataType.Date:\r\n\t\t\tthis.text.value = value;\r\n\r\n\t\t\tbreak;\r\n\t\tcase Cell.DataType.Number:\r\n\t\t\tif (bindingType.isIEEE754Compliant(value, oBusinessObject)) {\r\n\t\t\t\tthis.text.value = value;\r\n\r\n\t\t\t\tif (this[Cell._cellTypeProperty]) {\r\n\t\t\t\t\tthis.remove(Cell._cellTypeProperty);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t/* Handle fallback case and insert value as SharedString */\r\n\t\t\tbindingType = this._oFallbackType;\r\n\t\t\tvalue = bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\t\t\tif (!this[Cell._cellTypeProperty]) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// CAUTION: break is omitted intentionally\r\n\r\n\t\tdefault: // SharedString is the default case\r\n\t\t\tthis.text.value = this._shared.insert(value);\r\n\t}\r\n\r\n\t/*\r\n\t * Forces a style update once the value changed. This allows cell\r\n\t * specific styles for currency types. Due to the fact that the\r\n\t * Style ID gets cached within the Type, there is no performance\r\n\t * impact even on large data sets.\r\n\t */\r\n\tthis.setStyle(bindingType.getStyleId(oBusinessObject, value));\r\n};\r\n\r\n/**\r\n * Checks whether there is a value provided or not. Allowed values\r\n * are Stringsas well as numeric and boolean values. Empty Strings\r\n * will be evaluated as no value, but the numeric value 0 is a value.\r\n *\r\n * @param {(string|number|boolean|Array)} data - The value that gets checked\r\n * @returns {boolean} - true if a value is present, false if not\r\n * @private\r\n */\r\nCell.prototype._isValuePresent = function(data) {\r\n\treturn ((typeof data === 'string' && !!data)\r\n\t\t|| typeof data === 'number'\r\n\t\t|| typeof data === 'boolean'\r\n\t\t|| data instanceof Date);\r\n};\r\n\r\n/**\r\n * Specialized serialization of the Cell which prevents that empty\r\n * cells are getting serialized at all. This can reduce the size of\r\n * the parent Sheet.\r\n *\r\n * @function serialize\r\n * @returns {string} XML formatted string representation of the cell\r\n */\r\nCell.prototype.serialize = function() {\r\n\tif (!this._isValuePresent(this.text.value)) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\treturn XMLNode.prototype.serialize.call(this);\r\n};\r\n\r\nmodule.exports = Cell;","/**\r\n * Created by Sebastian Bender on 16.03.2017.\r\n */\r\nvar XMLNode = require('../xml/XMLNode');\r\nvar Cell\t= require('./Cell');\r\n\r\n/**\r\n * The Row is representing a single row according to the Office Open\r\n * XML standard. A Row provides information about its index (line\r\n * number) and can contain several Cell objects.\r\n *\r\n * @class\r\n */\r\nfunction Row() {\r\n\tXMLNode.call(this, Row.metadata);\r\n}\r\n\r\nRow.prototype = Object.create(XMLNode.prototype);\r\nRow.prototype.constructor = Row;\r\n\r\nRow.metadata = {\r\n\ttag: 'row',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'spans',\r\n\t\t\tname: 'spans',\r\n\t\t\tvalue: '1:1'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Calculates the Office Open XML Spreadsheet column reference for a\r\n * numeric value. Referring to the standard, the column is described\r\n * as a alphabetical value consisting of at least one uppercase character.\r\n * This function maps these alphabetical representation to numerical\r\n * zero-based indices.\r\n *\r\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\r\n *\r\n * @param {number} nIndex - Numerical index for the requested column\r\n * @returns {string} - The alphabetical column reference for the given index.\r\n */\r\nRow.getColumnReferenceByIndex = function(nIndex) {\r\n\treturn nIndex < 26 ?\r\n\t\tString.fromCharCode(65 + nIndex) :\r\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\r\n};\r\n\r\n\r\n/**\r\n * Update the 'spans' attribute on this particular {@link Row} for\r\n * optimization purposes. This property optimizes the loading and\r\n * rendering in Microsoft Excel.\r\n *\r\n * @private\r\n */\r\nRow.prototype._updateSpans = function() {\r\n\tthis.spans.value = '1:' + this.childs.length;\r\n};\r\n\r\n/**\r\n * Adds the specified {@link Cell} to the current {@link Row}. If the\r\n * current row already has a reference or style, it will propagate\r\n * this information to the newly added Cell.\r\n *\r\n * @param {object} oCell - Instance of Excel.objects.Cell\r\n */\r\nRow.prototype.addCell = function(oCell) {\r\n\tvar count;\r\n\r\n\tif (!oCell || !(oCell instanceof Cell)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tcount = this.childs.push(oCell);\r\n\tthis._updateSpans();\r\n\r\n\t/* Applies the cell reference if row reference is already present */\r\n\tif (this.reference.value) {\r\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\r\n\t}\r\n\r\n\tif (this.style) {\r\n\t\toCell.setStyle(this.style.value);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Updates the reference of the current {@link Row}. The Row reference\r\n * represents the line number within the Sheet. It will\r\n * automatically update all assigned Cell references.\r\n *\r\n * @param {string} sReference - Row number within the sheet\r\n */\r\nRow.prototype.setReference = function(sReference) {\r\n\tvar i, reference;\r\n\r\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\r\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Only update if necessary */\r\n\tif (this.reference.value != reference) {\r\n\t\tthis.reference.value = reference;\r\n\t\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given {@link Style} to the current {@link Row}.\r\n *\r\n * @param {(number|string)} nStyle - A number or string representing the Style id\r\n */\r\nRow.prototype.setStyle = function(nStyle) {\r\n\tvar i, style;\r\n\r\n\tif (!this.style) {\r\n\t\tstyle = this.addAttribute({name: 's'});\r\n\t\tObject.defineProperty(this, 'style', {value: style});\r\n\t}\r\n\r\n\tthis.style.value = nStyle;\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tthis.childs[i].setStyle(nStyle);\r\n\t}\r\n};\r\n\r\nmodule.exports = Row;","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The SharedString class represents each shared String within the\r\n * SharedStrings file.\r\n *\r\n * @param {string} sValue - The String that gets represented by this SharedString object\r\n * @class\r\n */\r\nfunction SharedString(sValue) {\r\n\tXMLNode.call(this, SharedString.metadata);\r\n\r\n\tthis.setValue(sValue);\r\n}\r\n\r\nSharedString.prototype = Object.create(XMLNode.prototype);\r\nSharedString.prototype.constructor = SharedString;\r\n\r\nSharedString.spacePreserveAttributeId = 'spacePreserve';\r\n\r\n// eslint-disable-next-line no-control-regex, max-len\r\nSharedString.controlCharacterTestRegex = /[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F]/m;\r\n// eslint-disable-next-line no-control-regex, max-len\r\nSharedString.controlCharacterReplaceRegex = /[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F]/gm;\r\n\r\n// Matches space either at the beginning or the end\r\nSharedString.spacePreserveRegex = /^ | $/;\r\n\r\nSharedString.metadata = {\r\n\ttag: 'si',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 't'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Replaces XML incompatible control characters with their corresponding Office Open XML escape sequence.\r\n *\r\n * @param {string} sValue - String that contains ASCII control characters\r\n * @returns {string} - Escaped string\r\n * @private\r\n */\r\nSharedString._escapeControlCharacters = function(sValue) {\r\n\tvar sCharHex;\r\n\r\n\treturn sValue.replace(SharedString.controlCharacterReplaceRegex, function(sMatch) {\r\n\t\tsCharHex = sMatch.codePointAt(0).toString(16).toUpperCase();\r\n\r\n\t\t/* Works only with control characters in ASCII range - do NOT use with Emojis */\r\n\t\treturn '_x00' + (sCharHex.length === 1 ? '0' : '') + sCharHex + '_';\r\n\t});\r\n};\r\n\r\n/**\r\n * Assigns the given value to the current SharedString instance.\r\n *\r\n * @function\r\n * @param {string} sValue - The string value that should be added\r\n */\r\nSharedString.prototype.setValue = function(sValue) {\r\n\r\n\tthis.text.remove(SharedString.spacePreserveAttributeId);\r\n\r\n\tif (SharedString.controlCharacterTestRegex.test(sValue)) {\r\n\t\tsValue = SharedString._escapeControlCharacters(sValue);\r\n\t}\r\n\r\n\tif (SharedString.spacePreserveRegex.test(sValue)) {\r\n\t\tthis.text.addAttribute({\r\n\t\t\tid: SharedString.spacePreserveAttributeId,\r\n\t\t\tname: 'space',\r\n\t\t\tprefix: 'xml',\r\n\t\t\tvalue: 'preserve'\r\n\t\t});\r\n\t}\r\n\r\n\tif (sValue && typeof sValue == 'string') {\r\n\t\tthis.text.value = sValue;\r\n\t} else {\r\n\r\n\t\t/**\r\n\t\t * There are other implementations for creating a string\r\n\t\t * representation out of a number that might be more\r\n\t\t * convenient like new String(number).toString() or\r\n\t\t * number.toString() but '' + number is the best performing.\r\n\t\t */\r\n\t\tthis.text.value = '' + sValue;\r\n\t}\r\n};\r\n\r\n/**\r\n * Serializes the XMLNode and transforms the concatenated string into a sequential string.\r\n * @return {string} - String representation of the SharedString\r\n *\r\n * @override\r\n */\r\nSharedString.prototype.serialize = function() {\r\n\tvar sSerialized;\r\n\r\n\tsSerialized = Object.getPrototypeOf(SharedString.prototype).serialize.call(this);\r\n\r\n\treturn (' ' + sSerialized).substr(1);\r\n};\r\n\r\nmodule.exports = SharedString;","var XMLFile\t\t = require('../xml/XMLFile'),\r\n\tSharedString\t= require('./SharedString');\r\n\r\n/**\r\n * The SharedStrings class represents the list of shared String\r\n * objects that is used in the Office Open XMl Spreadsheet. The\r\n * SharedStrings object reduces redundancy within the data by\r\n * providing a reference to unique Strings instead of repeating\r\n * them.\r\n *\r\n * Due to the fact that the Strings are shared within the whole\r\n * workbook, each instance of the document export only has one\r\n * single instance of SharedString and therefore it uses the\r\n * Singleton pattern to ensure this.\r\n *\r\n * @class\r\n */\r\nfunction SharedStrings() {\r\n\tXMLFile.call(this, SharedStrings.metadata);\r\n\r\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\r\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\r\n\r\n\tSharedStrings.instance = this;\r\n}\r\n\r\nSharedStrings.prototype = Object.create(XMLFile.prototype);\r\nSharedStrings.prototype.constructor = SharedStrings;\r\n\r\n/**\r\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\r\n *\r\n * @function\r\n * @returns {object} - Singleton instance\r\n */\r\nSharedStrings.getInstance = function() {\r\n\tif (!SharedStrings.instance) {\r\n\t\tSharedStrings.instance = new SharedStrings();\r\n\t}\r\n\r\n\treturn SharedStrings.instance;\r\n};\r\n\r\nSharedStrings.metadata = {\r\n\tfilename: 'sharedStrings.xml',\r\n\ttag: 'sst',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'count',\r\n\t\t\tname: 'count',\r\n\t\t\tvalue: 0\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'uniqueCount',\r\n\t\t\tname : 'uniqueCount',\r\n\t\t\tvalue: 0\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds the specified string value to the set of SharedStrings. The\r\n * method creates a SharedString proxy object that contains\r\n * information about the string itself as well as its index. The\r\n * index is zero-based and can be used for referencing within Cell\r\n * objects.\r\n *\r\n * @function insert\r\n * @param {string} sValue - The string that has to be inserted\r\n * @return {object} - The SharedString instance that represents the provided string value\r\n */\r\nSharedStrings.prototype.insert = function(sValue) {\r\n\tvar index;\r\n\r\n\tthis.count.value = this.count.value + 1;\r\n\r\n\tif (this.map.has(sValue)) {\r\n\t\treturn this.map.get(sValue);\r\n\t}\r\n\r\n\tthis._shared.setValue(sValue);\r\n\tindex = this.map.size;\r\n\tthis.map.set(sValue, index);\r\n\r\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\r\n\tthis.childs.push(this._shared.serialize());\r\n\tthis.uniqueCount.value = this.childs.length;\r\n\r\n\treturn index;\r\n};\r\n\r\n/**\r\n * Cleanup hook that gets executed when the XMLFile#serialize function\r\n * is called with the finalize flag.\r\n *\r\n * @private\r\n */\r\nSharedStrings.prototype.cleanup = function() {\r\n\tthis.map.clear();\r\n};\r\n\r\nmodule.exports = SharedStrings;","var XMLFile\t\t = require('../xml/XMLFile'),\r\n\tRow\t\t\t = require('./Row');\r\n\r\n/**\r\n * This class represents a Sheet within an Office Open XML Spreadsheet.\r\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\r\n * @constructor\r\n */\r\nfunction Sheet(oColumnConfiguration) {\r\n\tXMLFile.call(this, Sheet.metadata);\r\n\r\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\r\n\r\n\tthis._hierarchyProperty = oColumnConfiguration._hierarchyProperty;\r\n\tthis._hierarchyLevel = 0;\r\n\tthis._rowCount = 0;\r\n\tthis._createCols();\r\n\tthis._createHeader();\r\n}\r\n\r\nSheet.prototype = Object.create(XMLFile.prototype);\r\nSheet.prototype.constructor = Sheet;\r\n\r\nSheet.metadata = {\r\n\ttag: 'worksheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'sheetPr',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'outlinePr',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'summaryBelow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'dimension',\r\n\t\t\ttag: 'dimension',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'views',\r\n\t\t\ttag: 'sheetViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'defaultView',\r\n\t\t\t\t\ttag: 'sheetView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'workbookViewId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tproperties: [\r\n\r\n\t\t\t\t\t\t/* Freezes the header row */\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tid: 'pane',\r\n\t\t\t\t\t\t\ttag: 'pane',\r\n\t\t\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\r\n\t\t\t\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\r\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'activePane',\r\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'state',\r\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\ttag: 'sheetFormatPr',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultRowHeight',\r\n\t\t\t\t\tvalue: '15'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'columns',\r\n\t\t\ttag: 'cols'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'data',\r\n\t\t\ttag: 'sheetData'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'filter',\r\n\t\t\ttag: 'autoFilter',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'pageMargins',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'left',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'right',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'top',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bottom',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'header',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'footer',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nSheet.MAX_ROWS = 1048576;\r\n\r\n/**\r\n * Creates the column specific information within the worksheet.\r\n * Column specific information is i.E. the width or the use of the\r\n * bestFit functionality.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createCols = function() {\r\n\tvar col, i, minWidth, width,\r\n\t\tautoFitButtonOffset = 2.4;\r\n\r\n\t/**\r\n\t * Inner function for calculating the column width. The function\r\n\t * will ceil the width to the next step of 0.25 so that the\r\n\t * result mod step is 0.\r\n\t * @param {number} nWidth - The width that needs to be adjusted\r\n\t * @returns {number}  A width rounded to the accuracy of 0.25\r\n\t */\r\n\tfunction roundWidth(nWidth) {\r\n\t\tvar factor, step;\r\n\r\n\t\tstep = 0.25;\r\n\t\tfactor = 1 / step;\r\n\r\n\t\treturn Math.ceil(nWidth * factor) / factor;\r\n\t}\r\n\r\n\tfor (i = 0; i < this._columns.size(); i++) {\r\n\t\tcol = this._columns.columns[i];\r\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\r\n\t\twidth = roundWidth(Math.max(this._calculateColumnWidth(col.width), minWidth));\r\n\r\n\t\tthis.columns.addChild({\r\n\t\t\ttag: 'col',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'min',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'max',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bestFit',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'width',\r\n\t\t\t\t\tvalue: Math.max(width, minWidth)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'customWidth',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * This method calculates the optimal column width for the given\r\n * amount of characters. It removes the dependency on font size or\r\n * pixel width.\r\n *\r\n * @param {number} nCharacters - Amount of characters that should fit into the column\r\n * @return {number} Excel internal width value corresponding to the used font size\r\n * @private\r\n */\r\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\r\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\r\n\t\tdefaultPaddingAndBorder = 5,\r\n\t\tscaleFactor = 7.33;\r\n\r\n\tif (typeof nCharacters !== 'number') {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\r\n};\r\n\r\n/**\r\n * Sets the maximal hierarchy depth of this Sheet. The value will\r\n * only be changed if the given depth is higher than the previous\r\n * depth.\r\n *\r\n * @param {number} nHierarchyDepth - Numerical hierarchy depth\r\n * @private\r\n */\r\nSheet.prototype._setHierarchyDepth = function(nHierarchyDepth) {\r\n\r\n\t/* The maximum supported hierarchy depth is 7 */\r\n\tif (typeof nHierarchyDepth !== 'number' || nHierarchyDepth < 1 || nHierarchyDepth > 7) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!this.format.hierarchyDepth) {\r\n\t\tthis.format.addAttribute({\r\n\t\t\tid: 'hierarchyDepth',\r\n\t\t\tname: 'outlineLevelRow',\r\n\t\t\tvalue: nHierarchyDepth || 0\r\n\t\t});\r\n\t}\r\n\r\n\tthis.format.hierarchyDepth.value = Math.max(this.format.hierarchyDepth.value, nHierarchyDepth);\r\n};\r\n\r\n/**\r\n * Requests the header Row from the ColumnConfiguration and adds it to the\r\n * sheet.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createHeader = function() {\r\n\tvar headerRow = this._columns.getHeader();\r\n\r\n\tif (headerRow === null) {\r\n\t\tthis.remove('filter');\r\n\t\tthis.views.defaultView.remove('pane');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._appendRow(headerRow);\r\n};\r\n\r\n/**\r\n * Adds the specified Row to the sheetData element of this Sheet and\r\n * automatically propagates its row index to the row and its cells.\r\n *\r\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\r\n * @private\r\n */\r\nSheet.prototype._appendRow = function(oRow) {\r\n\tvar dimension, sSerializedRow;\r\n\r\n\tthis._rowCount++;\r\n\toRow.setReference('' + (this._rowCount));\r\n\r\n\tsSerializedRow = oRow.serialize();\r\n\r\n\t/* Bundle two rows into one string */\r\n\tif (this._rowCount % 2 === 0) {\r\n\t\tsSerializedRow = this.data.childs.pop() + sSerializedRow;\r\n\t}\r\n\r\n\t/*\r\n\t * Serializing the rows would create concatenated strings that are represented by a binary\r\n\t * tree that references all substrings as leaves. This increases the memory usage massively.\r\n\t *\r\n\t * To avoid this string representation we need to convert the concatenated string to a\r\n\t * sequential string by using String#substr. This reduces memory consumption\r\n\t * and due to less Garbage Collection runs, also the runtime, although there is additional\r\n\t * effort to convert the strings.\r\n\t *\r\n\t * Additional information can be found here:\r\n\t * https://bugs.chromium.org/p/v8/issues/detail?id=2869\r\n\t */\r\n\tthis.data.childs.push((' ' + sSerializedRow).substr(1));\r\n\r\n\t/* Update sheet dimension */\r\n\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this._rowCount;\r\n\r\n\tthis.dimension.reference.value = dimension;\r\n\r\n\tif (this.filter) {\r\n\t\tthis.filter.reference.value = dimension;\r\n\t}\r\n\r\n\r\n};\r\n\r\n/**\r\n * Creates a new group inside the sheet with the given hierarchy\r\n * level. All subsequent data rows will be assigned to this group.\r\n *\r\n * @function createGroup\r\n * @param {string} sName - Name of the group that will be displayed in the group header\r\n * @param {number} nLevel - Hierarchy level that will be used for outlining\r\n */\r\nSheet.prototype.createGroup = function(sName, nLevel) {\r\n\tvar groupHeaderRow;\r\n\r\n\tthis._hierarchyLevel = nLevel;\r\n\tgroupHeaderRow = this._columns.getGroupHeader(sName);\r\n\r\n\tthis._appendRow(groupHeaderRow);\r\n};\r\n\r\n/**\r\n * Requests a row from the ColumnConfiguration containing the given data\r\n * and adds it to the sheetData element of this Sheet.\r\n *\r\n * The maximum row limit is 1,048,576 but the user rather runs out of\r\n * memory than reaching this limit.\r\n *\r\n * @function insert\r\n * @param {Object} oData - Data object to be inserted\r\n */\r\nSheet.prototype.insert = function(oData) {\r\n\tvar nHierarchyLevel;\r\n\r\n\tif (this._rowCount >= Sheet.MAX_ROWS) {\r\n\t\tthrow new Error('Row limit reached.');\r\n\t}\r\n\r\n\tnHierarchyLevel =\r\n\t\tthis._columns.hierarchyLevelProperty ? oData[this._columns.hierarchyLevelProperty] : this._hierarchyLevel;\r\n\r\n\t/* Create row and apply binding */\r\n\tthis._appendRow(this._columns.bind(oData, nHierarchyLevel));\r\n\tthis._setHierarchyDepth(nHierarchyLevel);\r\n};\r\n\r\n/**\r\n * Cleanup hook that gets executed when the XMLFile#serialize function\r\n * is called with the finalize flag.\r\n *\r\n * @private\r\n */\r\nSheet.prototype.cleanup = function() {\r\n\tthis.remove('data');\r\n};\r\n\r\n/**\r\n * Returns the current row count of the Worksheet.\r\n *\r\n * @returns {number} - The amount of rows that are contained in this Worksheet\r\n *\r\n * @public\r\n */\r\nSheet.prototype.getRowCount = function() {\r\n\treturn this._rowCount;\r\n};\r\n\r\nmodule.exports = Sheet;","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the app.xml within the generated Excel. The\r\n * App contains information about the application that created the\r\n * Office Open XML Spreadsheet.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.application] - Application that created this Excel\r\n * @param {string} [oContext.version] - Application version that was used to create this Excel\r\n * @constructor\r\n */\r\nfunction App(oContext) {\r\n\tXMLFile.call(this, App.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.application) {\r\n\t\t\tthis.application.value = oContext.application;\r\n\t\t}\r\n\r\n\t\tif (oContext.version) {\r\n\t\t\tthis.version.value = oContext.version;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nApp.prototype = Object.create(XMLFile.prototype);\r\nApp.prototype.constructor = App;\r\n\r\nApp.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'app.xml',\r\n\ttag: 'Properties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'vt',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'application',\r\n\t\t\ttag: 'Application',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'DocSecurity',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Company',\r\n\t\t\tvalue: 'SAP SE'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'SharedDoc',\r\n\t\t\tvalue: 'false'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'version',\r\n\t\t\ttag: 'AppVersion',\r\n\t\t\tvalue: '1.85' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = App;","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the [Content_Types].xml within the generated Excel.\r\n *\r\n * @constructor\r\n */\r\nfunction ContentTypes() {\r\n\tXMLFile.call(this, ContentTypes.metadata);\r\n}\r\n\r\nContentTypes.prototype = Object.create(XMLFile.prototype);\r\nContentTypes.prototype.constructor = ContentTypes;\r\n\r\n\r\nContentTypes.FILENAME = '';\r\nContentTypes.metadata = {\r\n\tfilename: '[Content_Types].xml',\r\n\ttag: 'Types',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'rels'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/workbook.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/styles.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/core.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/app.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = ContentTypes;","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the core.xml within the generated Excel. The\r\n * Core contains basic information about the content and the owner of\r\n * the file.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.title] - Title of the Excel document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction Core(oContext) {\r\n\tXMLFile.call(this, Core.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.title) {\r\n\t\t\tthis.title.value = oContext.title;\r\n\t\t}\r\n\r\n\t\tif (oContext.modifiedBy) {\r\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nCore.prototype = Object.create(XMLFile.prototype);\r\nCore.prototype.constructor = Core;\r\n\r\nCore.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'core.xml',\r\n\ttag: 'cp:coreProperties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'cp',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dc',\r\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcterms',\r\n\t\t\tvalue: 'http://purl.org/dc/terms/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcmitype',\r\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xsi',\r\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'title',\r\n\t\t\ttag: 'dc:title',\r\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dc:creator',\r\n\t\t\tvalue: 'SAP UI5 Document Export'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cp:keywords',\r\n\t\t\tvalue: 'SAP UI5 EXPORT'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modifiedBy',\r\n\t\t\ttag: 'cp:lastModifiedBy',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dcterms:created',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modified',\r\n\t\t\ttag: 'dcterms:modified',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Updates the state of the Core class and returns the serialized string.\r\n *\r\n * @return {string} - Serialized representation of the Core instance\r\n */\r\nCore.prototype.serialize = function() {\r\n\tthis.modified.value = new Date().toISOString();\r\n\r\n\treturn Object.getPrototypeOf(Core.prototype).serialize.call(this);\r\n};\r\n\r\nmodule.exports = Core;","var XMLFile\t\t\t= require('../xml/XMLFile'),\r\n\tRelationships\t= require('./Relationships');\r\n\r\n/**\r\n * This class represents the a Office Open XML Spreadsheet object\r\n * that is related to other objects via Relationships. The object\r\n * manages its Relationships by itself to encapsulate the complexity.\r\n *\r\n * A ReferenceNode also provides information about its path so that\r\n * all relationships that are connected to this ReferenceNode are are\r\n * relative to its path.\r\n *\r\n * @param {Object} oConfig - Configuration object that is used by the super class XMLFile\r\n * @constructor\r\n */\r\nfunction ReferenceNode(oConfig) {\r\n\tXMLFile.call(this, oConfig);\r\n\r\n\tthis._relatedFiles = [];\r\n\tthis._relationships = new Relationships(this);\r\n\r\n\tthis.addRelatedFile(this._relationships);\r\n}\r\n\r\nReferenceNode.prototype = Object.create(XMLFile.prototype);\r\nReferenceNode.prototype.constructor = ReferenceNode;\r\n\r\n\r\nReferenceNode.prototype.addRelatedFile = function(oXMLFile) {\r\n\tif (!(oXMLFile instanceof XMLFile)) {\r\n\t\tthrow new Error('A related file must be of type XMLFile');\r\n\t}\r\n\r\n\tthis._relatedFiles.push(oXMLFile);\r\n};\r\n\r\nReferenceNode.prototype.getRelationships = function() {\r\n\treturn this._relationships;\r\n};\r\n\r\n/**\r\n * Returns an Array of {@link XMLFile} objects that are reference by\r\n * this {@link ReferenceNode}. The method provides a flat copy of the\r\n * original data to avoid manipulation.\r\n *\r\n * @returns {Array} Array containing referenced files\r\n */\r\nReferenceNode.prototype.getRelatedFiles = function() {\r\n\treturn this._relatedFiles.slice();\r\n};\r\n\r\nmodule.exports = ReferenceNode;","var\tXMLFile = require('../xml/XMLFile'),\r\n\tXMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * @param {ReferenceNode} oReferenceNode - ReferenceNode object that is the root of this Relationships XMLFile\r\n * @constructor\r\n */\r\nfunction Relationships(oReferenceNode) {\r\n\tXMLFile.call(this, Relationships.metadata);\r\n\r\n\tif (oReferenceNode instanceof XMLFile) {\r\n\t\tthis.setFileName(oReferenceNode.getFileName() + '.rels');\r\n\t\tthis.setPath(oReferenceNode.getPath() + '_rels/');\r\n\t}\r\n}\r\n\r\nRelationships.prototype = Object.create(XMLFile.prototype);\r\nRelationships.prototype.constructor = Relationships;\r\n\r\nRelationships.metadata = {\r\n\tfilename: '.rels',\r\n\tpath: '_rels/',\r\n\ttag: 'Relationships',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: []\r\n};\r\n\r\n/**\r\n * Creates a new Relationship entry for the current collection.\r\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\r\n *\r\n * @param {string} sTarget - Target file within the generated Excel\r\n * @param {string} sType - XMLNS reference of the targets file type\r\n * @returns {string} The newly created relationship id that can be referenced i.E. \"rId4\"\r\n */\r\nRelationships.prototype.addRelationship = function(sTarget, sType) {\r\n\tvar id = 'rId' + (this.childs.length + 1);\r\n\r\n\tthis.childs.push(new XMLNode({\r\n\t\ttag: 'Relationship',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Id',\r\n\t\t\t\tvalue: id\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Type',\r\n\t\t\t\tvalue: sType\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Target',\r\n\t\t\t\tvalue: sTarget\r\n\t\t\t}\r\n\t\t]\r\n\t}));\r\n\r\n\treturn id;\r\n};\r\n\r\nmodule.exports = Relationships;","var ColumnConfiguration\t= require('../binding/ColumnConfiguration'),\r\n\tReferenceNode\t\t= require('./ReferenceNode'),\r\n\tSharedStrings\t\t= require('../data/SharedStrings'),\r\n\tSheet\t\t\t\t= require('../data/Sheet'),\r\n\tStyles\t\t\t\t= require('../style/Styles');\r\n\r\n/**\r\n * This class represents the workbook.xml file within the generated\r\n * Office Open XML Spreadsheet. The workbook is the central element\r\n * of the Office Open XML Spreadsheet that references all the content.\r\n *\r\n * @constructor\r\n */\r\nfunction Workbook() {\r\n\tvar key;\r\n\r\n\tReferenceNode.call(this, Workbook.metadata);\r\n\r\n\t/* Create and register central Styles instance for this workbook */\r\n\tthis._styles = new Styles();\r\n\tthis._styles.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._styles);\r\n\r\n\t/* Create and register central SharedStrings instance for this workbook */\r\n\tthis._sharedStrings = new SharedStrings();\r\n\tthis._sharedStrings.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._sharedStrings);\r\n\r\n\tfor (key in Workbook.RELATIONS) {\r\n\t\tthis._relationships.addRelationship(Workbook.RELATIONS[key].target, Workbook.RELATIONS[key].type);\r\n\t}\r\n\r\n\tthis._registeredSheets = [];\r\n}\r\n\r\nWorkbook.prototype = Object.create(ReferenceNode.prototype);\r\nWorkbook.prototype.constructor = Workbook;\r\n\r\nWorkbook.RELATIONS = {\r\n\tsharedStrings: {\r\n\t\ttarget: 'sharedStrings.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\r\n\t},\r\n\tstyles: {\r\n\t\ttarget: 'styles.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\r\n\t}\r\n};\r\n\r\nWorkbook.metadata = {\r\n\tfilename: 'workbook.xml',\r\n\tpath: 'xl/',\r\n\ttag: 'workbook',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'bookViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'workbookView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'yWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowWidth',\r\n\t\t\t\t\t\t\tvalue: '22260'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowHeight',\r\n\t\t\t\t\t\t\tvalue: '12645'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'sheets',\r\n\t\t\ttag: 'sheets'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'definedNames',\r\n\t\t\ttag: 'definedNames'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds a new {@link Sheet} to this {@link Workbook}\r\n *\r\n * @param {string} sName - Name of the {@link Sheet} that is used as label in Microsoft Excel\r\n * @param {Object} oConfig - The column configuration of this Sheet\r\n * @param {Array} oConfig.columns - Array containing the configuration for each column\r\n * @param {boolean} [oConfig.bHideHeader] - Hides the header row (optional - default: false)\r\n * @returns {Sheet} - The newly added {@link Sheet}\r\n */\r\nWorkbook.prototype.addSheet = function(sName, oConfig) {\r\n\tvar oColumnConfiguration, nCount, sId, oSheet, sSheetFileName;\r\n\r\n\tnCount = this.sheets.childs.length + 1;\r\n\tsSheetFileName = 'sheet' + nCount + '.xml';\r\n\tsId = this._relationships.addRelationship('worksheets/' + sSheetFileName,\r\n\t\t'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet');\r\n\r\n\tthis.sheets.addChild({\r\n\t\ttag: 'sheet',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\tvalue: sName\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'sheetId',\r\n\t\t\t\tvalue: '' + nCount\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'id',\r\n\t\t\t\tprefix: 'r',\r\n\t\t\t\tvalue: sId\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n\r\n\toColumnConfiguration = new ColumnConfiguration(oConfig, this._sharedStrings, this._styles);\r\n\toSheet = new Sheet(oColumnConfiguration);\r\n\toSheet.setFileName(sSheetFileName);\r\n\toSheet.setPath(this.getPath() + 'worksheets/');\r\n\r\n\tthis.addRelatedFile(oSheet);\r\n\tthis._registeredSheets.push(oSheet);\r\n\r\n\treturn oSheet;\r\n};\r\n\r\n/**\r\n * Set the given sheet as selected. Unselects all other sheets in the workbook.\r\n *\r\n * @param {Sheet} oSheet - The Sheet object that should be selected\r\n */\r\nWorkbook.prototype.selectSheet = function(oSheet) {\r\n\r\n\tif (!(oSheet instanceof Sheet) || this._registeredSheets.indexOf(oSheet) < 0) {\r\n\t\tthrow new Error('Could not select sheet. Sheet not found.');\r\n\t}\r\n\r\n\t/* Remove selection on all sheets */\r\n\tthis._registeredSheets.forEach(function(sheetElement, index, array) {\r\n\t\tsheetElement.views.defaultView.remove('selected');\r\n\t});\r\n\r\n\t/* Select the particular Sheet */\r\n\toSheet.views.defaultView.addAttribute({\r\n\t\tid: 'selected',\r\n\t\tname: 'tabSelected',\r\n\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\r\n\t});\r\n};\r\n\r\n/**\r\n * Registers definedNames for sheets that use autoFilter\r\n * functionality before processing the super class serialization.\r\n *\r\n * @returns {string} - The serialized String representation of this workbook\r\n */\r\nWorkbook.prototype.serialize = function() {\r\n\tvar that = this;\r\n\r\n\t/**\r\n\t * Creates the value for the definedName. It automatically\r\n\t * retrieves the dimension of the sheet that is used by the\r\n\t * filter and escapes its representation.\r\n\t *\r\n\t * @param {string} sSheetName - The title of the sheet\r\n\t * @param {Sheet} oSheet - The sheet object containing the filter dimension\r\n\t * @returns {string} - Escaped definedName value\r\n\t * @private\r\n\t */\r\n\tfunction createDefinedName(sSheetName, oSheet) {\r\n\t\tvar sDefinedName, sDimension;\r\n\r\n\t\tsDimension = oSheet.filter.reference.value;\r\n\t\tsDefinedName = /^[a-zA-Z0-9]+$/.test(sSheetName) ? sSheetName : '\\'' + sSheetName + '\\'';\r\n\t\tsDefinedName += '!';\r\n\t\tsDefinedName += sDimension.replace(/([A-Z]+)|(\\d+)/g, function(match) {\r\n\t\t\treturn '$' + match;\r\n\t\t});\r\n\r\n\t\treturn sDefinedName;\r\n\t}\r\n\r\n\t/* Create definedNames before serializing the workbook */\r\n\tthis._registeredSheets.forEach(function(oSheet, iIndex, aArray) {\r\n\t\tvar sSheetName = that.sheets.childs[iIndex].name.value;\r\n\r\n\t\tif (oSheet.filter) {\r\n\t\t\tthat.definedNames.addChild({\r\n\t\t\t\ttag: 'definedName',\r\n\t\t\t\tattributes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\tvalue: '_xlnm._FilterDatabase'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'localSheetId',\r\n\t\t\t\t\t\tvalue: iIndex\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'hidden',\r\n\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tvalue: createDefinedName(sSheetName, oSheet)\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\treturn Object.getPrototypeOf(Workbook.prototype).serialize.call(this);\r\n};\r\n\r\nmodule.exports = Workbook;","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The Alignment class defines the alignment of content within the\r\n * sheet cells. The Alignment is assigned to a particular Style that\r\n * is registered in the Styles class.\r\n *\r\n * @constructor\r\n */\r\nfunction Alignment() {\r\n\tXMLNode.call(this, Alignment.metadata);\r\n}\r\n\r\nAlignment.prototype = Object.create(XMLNode.prototype);\r\nAlignment.prototype.constructor = Alignment;\r\n\r\nAlignment.metadata = {\r\n\ttag: 'alignment'\r\n};\r\n\r\nAlignment.horizontal = {\r\n\tLEFT: 'left',\r\n\tCENTER: 'center',\r\n\tRIGHT: 'right',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.horizontal);\r\n\t}\r\n};\r\n\r\nAlignment.vertical = {\r\n\tTOP: 'top',\r\n\tMIDDLE: 'middle',\r\n\tBOTTOM: 'bottom',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.vertical);\r\n\t}\r\n};\r\n\r\n/**\r\n * Checks whether the requested alignment is contained or not. An\r\n * alignment that is contained can be assigned within styles. Other\r\n * alignments that are not contained are not supported and thus not\r\n * assignable. It differentiates between horizontal and vertical\r\n * alignments, depending on the aggregation that was provided.\r\n *\r\n * @param {string} sAlign - The alignment that should be checked\r\n * @param {Array} oAggregation - The aggregation the alignment might be in\r\n * @returns {boolean} - Returns true if the alignment is supported\r\n * @private\r\n */\r\nfunction _contains(sAlign, oAggregation) {\r\n\tvar key, contained = false;\r\n\r\n\tfor (key in oAggregation) {\r\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\r\n\t}\r\n\r\n\treturn contained;\r\n}\r\n\r\nAlignment.prototype.isDefault = function() {\r\n\treturn this.attributes.length == 0;\r\n};\r\n\r\n/**\r\n * Assigns the given indent to this Alignment object.\r\n *\r\n * @param {number} nIndent - Numerical value used as indentation\r\n */\r\nAlignment.prototype.setIndent = function(nIndent) {\r\n\r\n\t/* Remove indent */\r\n\tif (typeof nIndent != 'number' || nIndent <= 0) {\r\n\t\tthis.remove('indent');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('indent', nIndent);\r\n\r\n\t/* A correct indent requires an explicit horizontal alignment */\r\n\tif (!this.horizontal) {\r\n\t\tthis.setHorizontalAlignment(Alignment.horizontal.LEFT);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Configures the wrapText attribute of the alignment which is used\r\n * for multiline text support.\r\n *\r\n * @param {boolean} bWrap - Defines if wrapping is enabled or disabled\r\n */\r\nAlignment.prototype.setWrapText = function(bWrap) {\r\n\tvar wrappingAttribute = 'wrapText';\r\n\r\n\r\n\tif (bWrap) {\r\n\t\tthis._setAlignmentAttribute(wrappingAttribute, '1');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (this[wrappingAttribute]) {\r\n\t\tthis.remove(wrappingAttribute);\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given alignment as horizontal alignment.\r\n *\r\n * @param {string} sAlign - Horizontal alignment that gets applied\r\n */\r\nAlignment.prototype.setHorizontalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.horizontal.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('horizontal', sAlign);\r\n};\r\n\r\n/**\r\n * Applies the given alignment as vertical alignment.\r\n *\r\n * @param {string} sAlign - Vertical alignment that gets applied\r\n */\r\nAlignment.prototype.setVerticalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.vertical.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('vertical', sAlign);\r\n};\r\n\r\n/**\r\n * Assigns the given value as a named property on this Alignment object.\r\n *\r\n * @param {string} sId - The named property id\r\n * @param {number|string} value - Textual or numerical value\r\n * @private\r\n */\r\nAlignment.prototype._setAlignmentAttribute = function(sId, value) {\r\n\r\n\t/* Create attribute if not present */\r\n\tif (!this[sId]) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: sId,\r\n\t\t\tname: sId\r\n\t\t});\r\n\t}\r\n\r\n\tthis[sId].value = value;\r\n};\r\n\r\n/**\r\n * Access the given alignment attribute and return its value. This is a shorthand\r\n * function to access the value without having to check for the existence of the\r\n * attribute itself.\r\n *\r\n * @param {string} sId - Alignment attribute that will be returned\r\n * @return {string|number} - value of the given alignment attribute\r\n * @private\r\n */\r\nAlignment.prototype._getAlignmentAttribute = function(sId) {\r\n\treturn this[sId] && this[sId].value;\r\n};\r\n\r\nAlignment.prototype.equals = function(oAlignment) {\r\n\treturn typeof oAlignment !== 'undefined' && oAlignment !== null\r\n\t\t&& this._getAlignmentAttribute('vertical') == oAlignment._getAlignmentAttribute('vertical')\r\n\t\t&& this._getAlignmentAttribute('horizontal') == oAlignment._getAlignmentAttribute('horizontal')\r\n\t\t&& this._getAlignmentAttribute('indent') == oAlignment._getAlignmentAttribute('indent')\r\n\t\t&& this._getAlignmentAttribute('wrapText') == oAlignment._getAlignmentAttribute('wrapText');\r\n};\r\n\r\nmodule.exports = Alignment;","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This class represents border configuration for Office Open XML Spreadsheets.\r\n * @constructor\r\n */\r\nfunction Border() {\r\n\tXMLNode.call(this, Border.metadata);\r\n}\r\n\r\nBorder.prototype = Object.create(XMLNode.prototype);\r\nBorder.prototype.constructor = Border;\r\n\r\nBorder.metadata = {\r\n\ttag: 'border',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'left'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'right'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'top'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'bottom'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'diagonal'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Border is equal to the given parameter.\r\n *\r\n * @param {Border} oBorder - Border that get's compared to the current one\r\n * @return {boolean} - Returns true if both Borders have the same configuration\r\n */\r\nBorder.prototype.equals = function(oBorder) {\r\n\r\n\t/**\r\n\t * Once it is a Border object we always return true because we\r\n\t * don't provide more than one border type\r\n\t */\r\n\treturn oBorder instanceof Border;\r\n};\r\n\r\nmodule.exports = Border;","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This Class represents a background fill of cells within the Office\r\n * Open Spreadsheet document. The Fill accepts a configuration object\r\n * which might have either an \"color\" or an \"type\" property.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @param {string} [oData.color] - HEX string defining the colored fill\r\n * @param {string} [oData.type] - Color independent fill type\r\n * @constructor\r\n */\r\nfunction Fill(oData) {\r\n\tXMLNode.call(this, Fill.metadata);\r\n\r\n\tif (oData) {\r\n\t\tif (oData.color) {\r\n\t\t\tthis.setFill(oData.color);\r\n\t\t} else if (oData.type) {\r\n\t\t\tthis.setType(oData.type);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nFill.prototype = Object.create(XMLNode.prototype);\r\nFill.prototype.constructor = Fill;\r\n\r\nFill.DEFAULT_TYPE = 'none';\r\n\r\nFill.metadata = {\r\n\ttag: 'fill',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\ttag: 'patternFill',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'type',\r\n\t\t\t\t\tname: 'patternType',\r\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Fill is equal to the one that was provided.\r\n *\r\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\r\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\r\n */\r\nFill.prototype.equals = function(oFill) {\r\n\tif (!(oFill instanceof Fill)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getType() === oFill.getType()\r\n\t\t&& this.getFill() === oFill.getFill();\r\n};\r\n\r\n/**\r\n * Returns the color of the current Fill.\r\n *\r\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\r\n */\r\nFill.prototype.getFill = function() {\r\n\r\n\t/* The opacity needs to be removed before returning the HEX color */\r\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\r\n};\r\n\r\nFill.prototype.setFill = function(sColor) {\r\n\tthis.reset();\r\n\r\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\r\n\t\tthis.fill.type.value = 'solid';\r\n\r\n\t\t/**\r\n\t\t * Apply the provided color as forground color of the\r\n\t\t * background. We add 'FF' in front of the HEX-color\r\n\t\t * for opacity.\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'fgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'rgb',\r\n\t\t\t\t\tname: 'rgb',\r\n\t\t\t\t\tvalue: 'FF' + sColor\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Add default background layer which will be used once the\r\n\t\t * foreground color uses transparency\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\ttag: 'bgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'indexed',\r\n\t\t\t\t\tvalue: '64'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns the current Fill type.\r\n *\r\n * @returns {string} - Current Fill type\r\n */\r\nFill.prototype.getType = function() {\r\n\treturn this.fill.type.value;\r\n};\r\n\r\n/**\r\n * Assigns the given type as Fill type. The Fill will be reset to\r\n * default before the type is applied.\r\n *\r\n * @param {string} sType - Type that needs to be assigned\r\n */\r\nFill.prototype.setType = function(sType) {\r\n\tthis.reset();\r\n\r\n\tthis.fill.type.value = sType;\r\n};\r\n\r\n/**\r\n * Resets the current fill to avoid side effects that might occur\r\n * when the fill is modified.\r\n */\r\nFill.prototype.reset = function() {\r\n\tthis.fill.type.value = 'none';\r\n\tthis.fill.childs.length = 0;\r\n};\r\n\r\nmodule.exports = Fill;","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The Font class represents a Font configuration within an Office\r\n * Open XML Spreadsheet.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\r\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\r\n * @param {number|String} [oData.size] - The font size that is been used\r\n * @param {number} [oData.family] - The font family reference {@see getFamily}\r\n * @constructor\r\n */\r\nfunction Font(oData) {\r\n\tXMLNode.call(this, Font.metadata);\r\n\r\n\tif (oData && oData instanceof Object) {\r\n\t\tthis.setName(oData.name)\r\n\t\t\t.setSize(oData.size)\r\n\t\t\t.setFamily(oData.family)\r\n\t\t\t.setBold(!!oData.bold);\r\n\t}\r\n}\r\n\r\nFont.prototype = Object.create(XMLNode.prototype);\r\nFont.prototype.constructor = Font;\r\n\r\nFont.DEFAULT_SIZE = 11;\r\nFont.DEFAULT_NAME = 'Arial';\r\n\r\nFont.metadata = {\r\n\ttag: 'font',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'size',\r\n\t\t\ttag: 'sz',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'color',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'theme',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\ttag: 'name',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'family',\r\n\t\t\ttag: 'family',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Font is equal to the given parameter.\r\n *\r\n * @param {Font} oFont - The Font to compare with\r\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\r\n */\r\nFont.prototype.equals = function(oFont) {\r\n\tif (!(oFont instanceof Font)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getName() == oFont.getName()\r\n\t\t&& this.getSize() == oFont.getSize()\r\n\t\t&& this.isBold() == oFont.isBold()\r\n\t\t&& this.getColor() == oFont.getColor()\r\n\t\t&& this.getFamily() == oFont.getFamily();\r\n};\r\n\r\n/**\r\n * Returns whether the Font will be displayed bold or not.\r\n *\r\n * @returns {boolean} - Returns true if the Font is bold\r\n */\r\nFont.prototype.isBold = function() {\r\n\treturn !!this.bold;\r\n};\r\n\r\n/**\r\n * Returns the size of this Font.\r\n *\r\n * @returns {number} - The size of the Font\r\n */\r\nFont.prototype.getSize = function() {\r\n\treturn this.size.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\r\n *\r\n * @returns {string} - The name of the Font\r\n */\r\nFont.prototype.getName = function() {\r\n\treturn this.name.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the color reference of this Font.\r\n *\r\n * @returns {string} - The color as HEX string\r\n */\r\nFont.prototype.getColor = function() {\r\n\treturn this.color.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the Font family reference of this Font. The reference is\r\n * defined within the Office Open XML specification.\r\n * 1 : Roman (Times New Roman, SAP-icons)\r\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\r\n * 3 : Modern\r\n * 4 : Script\r\n * 5 : Decorative\r\n * 6-14 : Reserved for future use\r\n *\r\n * @returns {number} - The Font family ID\r\n */\r\nFont.prototype.getFamily = function() {\r\n\treturn this.family.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * This method can be used to set the Font to bold or not.\r\n *\r\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setBold = function(bBold) {\r\n\tvar boldProperty = 'bold';\r\n\r\n\t/* Early return if bold status is already correct */\r\n\tif (bBold === !!this[boldProperty]) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tif (bBold) {\r\n\t\tthis.addChild({\r\n\t\t\tid: boldProperty,\r\n\t\t\ttag: 'b'\r\n\t\t});\r\n\t} else {\r\n\t\tthis.remove(boldProperty);\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * This method is used to set the Font family reference for the used font.\r\n *\r\n * @see {@link getFamily}\r\n * @param {number} nFamily - Number that references the Font family\r\n * @returns {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setFamily = function(nFamily) {\r\n\r\n\tif (nFamily > 0 && nFamily < 15) {\r\n\t\tthis.family.valueAttribute.value = nFamily;\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font name to this object.\r\n *\r\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setName = function(sName) {\r\n\tif (sName && typeof sName === 'string') {\r\n\t\tthis.name.valueAttribute.value = sName;\r\n\t}\r\n\r\n\t/*\r\n\t * If the font name is Calibri we need to add another child node:\r\n\t *\r\n\t *\t{\r\n\t *\t\ttag: 'scheme',\r\n\t *\t\tattributes: [\r\n\t *\t\t\t{\r\n\t *\t\t\t\tname: 'val',\r\n\t *\t\t\t\tvalue: 'minor'\r\n\t *\t\t\t}\r\n\t *\t\t]\r\n\t *\t}\r\n\t */\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font size to this object.\r\n *\r\n * @param {number} nSize - Textual representation of the font size\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setSize = function(nSize) {\r\n\r\n\t/* Check preconditions */\r\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\r\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\r\n\t}\r\n\r\n\tthis.size.valueAttribute.value = nSize;\r\n\r\n\treturn this;\r\n};\r\n\r\nmodule.exports = Font;","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The NumberFormat class is used to store custom formatting for\r\n * numeric values. In addition to a variety of built-in formats that\r\n * cannot be used as identifier for a particular format, the user can\r\n * create up to 250 different number formats.\r\n *\r\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\r\n *\r\n * @param {Object} oData - Configuration object that is used for initialization\r\n * @param {string} oData.format - Custom format that will be applied\r\n * @constructor\r\n */\r\nfunction NumberFormat(oData) {\r\n\tXMLNode.call(this, NumberFormat.metadata);\r\n\r\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\r\n}\r\n\r\nNumberFormat.prototype = Object.create(XMLNode.prototype);\r\nNumberFormat.prototype.constructor = NumberFormat;\r\n\r\nNumberFormat.metadata = {\r\n\ttag: 'numFmt',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'formatId',\r\n\t\t\tname: 'numFmtId'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\tname: 'formatCode'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\r\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\r\nNumberFormat.ID_OFFSET = 164;\r\nNumberFormat.DEFAULT = '#,##0.00';\r\n\r\n/**\r\n * This method returns the ID of this NumberFormat. If there was no\r\n * ID assigned yet, it will return undefined.\r\n *\r\n * @returns {number} - The ID of this NumberFormat\r\n */\r\nNumberFormat.prototype.getId = function() {\r\n\treturn this.formatId.value;\r\n};\r\n\r\n\r\n/**\r\n * Returns the format of this NumberFormat as a string.\r\n *\r\n * @returns {string} - The format template that gets applied\r\n */\r\nNumberFormat.prototype.getFormat = function() {\r\n\treturn this.format.value;\r\n};\r\n\r\n\r\n/**\r\n * Assigns the provided ID to the current NumberFormat.\r\n *\r\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\r\n */\r\nNumberFormat.prototype.setId = function(sId) {\r\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\r\n\r\n\t/* Checks if NaN, below zero or builtin ID */\r\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.formatId.value = sId;\r\n};\r\n\r\n\r\n/**\r\n * Sets a specific format.\r\n *\r\n * @param {string} sFormat - The format that gets applied by this NumberFormat\r\n */\r\nNumberFormat.prototype.setFormat = function(sFormat) {\r\n\tthis.format.value = sFormat;\r\n};\r\n\r\n\r\n/**\r\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\r\n *\r\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\r\n *\r\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\r\n * @private\r\n */\r\nNumberFormat._isBuiltin = function(iId) {\r\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\r\n};\r\n\r\n\r\n/**\r\n * Compares another NumberFormat to the current one. This method will\r\n * match NumberFormat objects by its format regardless of their ID.\r\n *\r\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\r\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\r\n */\r\nNumberFormat.prototype.equals = function(oNumberFormat) {\r\n\tif (!(oNumberFormat instanceof NumberFormat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFormat() === oNumberFormat.getFormat();\r\n};\r\n\r\nmodule.exports = NumberFormat;","var XMLNode = require('../xml/XMLNode');\r\nvar Alignment = require('./Alignment');\r\n\r\n/**\r\n * Represents a particular Style within the Office Open XML Spreadsheet.\r\n * Instances of this type will be created by the Styles Class after\r\n * registering a new Style.\r\n *\r\n * @constructor\r\n */\r\nfunction Style() {\r\n\tXMLNode.call(this, Style.metadata);\r\n}\r\n\r\nStyle.prototype = Object.create(XMLNode.prototype);\r\nStyle.prototype.constructor = Style;\r\n\r\nStyle.metadata = {\r\n\ttag: 'xf',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'numberFormat',\r\n\t\t\tname: 'numFmtId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'font',\r\n\t\t\tname: 'fontId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\tname: 'fillId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'border',\r\n\t\t\tname: 'borderId',\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nStyle.DEFAULT = {\r\n\tfont: {\r\n\t\tname: 'Arial',\r\n\t\tsize: 11,\r\n\t\tfamily: '2',\r\n\t\tcolor: '1',\r\n\t\tbold: false\r\n\t},\r\n\tfill: {\r\n\t\ttype: 'none'\r\n\t}\r\n};\r\n\r\nStyle.prototype.getAlignment = function() {\r\n\treturn this.alignment ? this.alignment : null;\r\n};\r\n\r\nStyle.prototype.getFontId = function() {\r\n\treturn this.font.value;\r\n};\r\n\r\nStyle.prototype.getFillId = function() {\r\n\treturn this.fill.value;\r\n};\r\n\r\nStyle.prototype.getBorderId = function() {\r\n\treturn this.border.value;\r\n};\r\n\r\nStyle.prototype.getNumberFormatId = function() {\r\n\treturn this.numberFormat.value;\r\n};\r\n\r\nStyle.prototype.hasQuotePrefix = function() {\r\n\treturn 'quotePrefix' in this;\r\n};\r\n\r\n/**\r\n * Applies the alignment to the Style. The alignment must match the\r\n * predefined options of <code>Alignment</code> as far as it is not\r\n * null. Other values will be ignored.\r\n *\r\n * The value <code>null</code> will delete the current alignment.\r\n *\r\n * @param {Object} oAlign - Alignment configuration that gets applied or null\r\n * @param {string} [oAlign.horizontal] - Horizontal alignment\r\n * @param {string} [oAlign.vertical] - Vertical alignment\r\n * @param {number} [oAlign.indent] - Cell indentation\r\n */\r\nStyle.prototype.setAlignment = function(oAlign) {\r\n\tvar alignment, alignProperty;\r\n\r\n\talignProperty = 'alignment';\r\n\r\n\t// Removes the applyAlignment automatically when sAlign is null\r\n\tthis._apply(oAlign, 'Alignment');\r\n\r\n\tif (typeof oAlign === 'undefined' || oAlign === null) {\r\n\t\tthis.remove(alignProperty);\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!(alignProperty in this)) {\r\n\t\talignment = new Alignment();\r\n\r\n\t\tthis.addChild(alignment);\r\n\t\tObject.defineProperty(this, alignProperty, {value: alignment, writable: false, configurable: true});\r\n\t}\r\n\r\n\tthis[alignProperty].setHorizontalAlignment(oAlign.horizontal);\r\n\tthis[alignProperty].setVerticalAlignment(oAlign.vertical);\r\n\tthis[alignProperty].setWrapText(oAlign.wrap);\r\n\tthis[alignProperty].setIndent(oAlign.indent);\r\n};\r\n\r\nStyle.prototype.setFontId = function(nFontId) {\r\n\tthis._apply(nFontId, 'Font');\r\n\r\n\tthis.font.value = nFontId;\r\n};\r\n\r\nStyle.prototype.setFillId = function(nFillId) {\r\n\tthis._apply(nFillId, 'Fill');\r\n\r\n\tthis.fill.value = nFillId;\r\n};\r\n\r\nStyle.prototype.setBorderId = function(sBorderId) {\r\n\tthis.border.value = sBorderId;\r\n};\r\n\r\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\r\n\tthis._apply(nNumFmtId, 'NumberFormat');\r\n\r\n\tthis.numberFormat.value = nNumFmtId;\r\n};\r\n\r\nStyle.prototype.setQuotePrefix = function(bQuotePrefix) {\r\n\tvar sAttributeName = 'quotePrefix';\r\n\r\n\tif (bQuotePrefix && !this.hasQuotePrefix()) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: sAttributeName,\r\n\t\t\tname: sAttributeName,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t} else if (!bQuotePrefix && this.hasQuotePrefix()) {\r\n\t\tthis.remove(sAttributeName);\r\n\t}\r\n};\r\n\r\nStyle.prototype._apply = function(nId, sType) {\r\n\tvar applyProperty = 'apply' + sType;\r\n\r\n\tthis.remove(applyProperty);\r\n\r\n\tif (nId) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: applyProperty,\r\n\t\t\tname: applyProperty,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t}\r\n};\r\n\r\nStyle.prototype.equals = function(oStyle) {\r\n\tif (!(oStyle instanceof Style)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFontId() === oStyle.getFontId()\r\n\t\t&& this.getFillId() === oStyle.getFillId()\r\n\t\t&& this.getBorderId() === oStyle.getBorderId()\r\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId()\r\n\t\t&& this.hasQuotePrefix() === oStyle.hasQuotePrefix()\r\n\t\t&& ( (!this.alignment && !oStyle.alignment) || (this.alignment && this.alignment.equals(oStyle.alignment)) );\r\n};\r\n\r\nmodule.exports = Style;","var XMLFile\t\t\t= require('../xml/XMLFile'),\r\n\tStyle\t\t\t= require('./Style'),\r\n\tFont\t\t\t= require('./Font'),\r\n\tFill\t\t\t= require('./Fill'),\r\n\tBorder\t\t\t= require('./Border'),\r\n\tNumberFormat\t= require('./NumberFormat');\r\n\r\n/**\r\n *\r\n * @class\r\n * @module style/Styles\r\n */\r\nfunction Styles() {\r\n\tXMLFile.call(this, Styles.metadata);\r\n\r\n\t/* Microsoft Excel fix - specific fill that needs to be present */\r\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\r\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\r\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\r\n}\r\n\r\nStyles.prototype = Object.create(XMLFile.prototype);\r\nStyles.prototype.constructor = Styles;\r\n\r\nStyles.metadata = {\r\n\tfilename: 'styles.xml',\r\n\ttag: 'styleSheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t,\r\n\t\t{\r\n\t\t\tname: 'mc',\r\n\t\t\tsuffix: 'Ignorable',\r\n\t\t\tvalue: 'x14ac x16r2 xr'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'x14ac',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'x16r2',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xr',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision'\r\n\t\t}\r\n\t\t*/\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'numberFormats',\r\n\t\t\ttag: 'numFmts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fonts',\r\n\t\t\ttag: 'fonts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fills',\r\n\t\t\ttag: 'fills',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'borders',\r\n\t\t\ttag: 'borders',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyleXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'xf',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'numFmtId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fontId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fillId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'borderId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'cellXfs',\r\n\t\t\ttag: 'cellXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'cellStyle',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\t\tvalue: 'Normal'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xfId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'builtinId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dxfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'tableStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultTableStyle',\r\n\t\t\t\t\tvalue: 'TableStyleMedium2'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultPivotStyle',\r\n\t\t\t\t\tvalue: 'PivotStyleLight16'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n\r\n/**\r\n * Adds the specified Style to the Styles class according to the\r\n * Style configuration. The method will return a Style object that\r\n * references Font, Fill, Border and an optional NumberFormat. If\r\n * some of the referenced Font, Fill, Border or NumberFormat objects\r\n * are not present yet, it will create them automatically, otherwise\r\n * it will re-use existing ones.\r\n *\r\n * The method ensures that particular Style combinations exist only\r\n * once and there are no duplicates.\r\n *\r\n * @param {Object} oData - Configuration object that defines the Style information\r\n * @param {Object} [oData.font] - Configuration object that defines the Font information\r\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\r\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\r\n * @param {boolean} [oData.font.bold] - Defines the Font weight\r\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\r\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\r\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\r\n * @param {Object} [oData.border] - Configuration object that defines the Border information\r\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\r\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\r\n * @param {Object} [oData.align] - Defines the text alignment within the cell\r\n * @param {string} [oData.align.horizontal] - Horizontal alignment\r\n * @param {string} [oData.align.vertical] - Vertical alignment\r\n * @param {number} [oData.align.indent] - Cell indentation\r\n * @param {boolean} [oData.quotePrefix] - Defines whether the style configuration should add a quotePrefix attribute\r\n * @returns {number} - The ID of the unique Style object that needs to be referenced\r\n */\r\nStyles.prototype.addStyle = function(oData) {\r\n\tvar style, fontId, fillId, borderId, numberFormatId;\r\n\r\n\t/* Add Font, Fill, Border and NumberFormat if needed */\r\n\tfontId = this.addFont(oData.font);\r\n\tfillId = this.addFill(oData.fill);\r\n\tborderId = this.addBorder(oData.border);\r\n\r\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\r\n\tif (typeof oData.numberFormat === 'undefined') {\r\n\t\toData.numberFormat = 0;\r\n\t}\r\n\r\n\tnumberFormatId =\r\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\r\n\r\n\t/* Create temporary Style */\r\n\tstyle = new Style();\r\n\r\n\tstyle.setFontId(fontId);\r\n\tstyle.setFillId(fillId);\r\n\tstyle.getBorderId(borderId);\r\n\tstyle.setNumberFormatId(numberFormatId);\r\n\tstyle.setAlignment(oData.align);\r\n\tstyle.setQuotePrefix(oData.quotePrefix);\r\n\r\n\t/* Add Style if not already present */\r\n\treturn this._addToAggregation(style, this.cellXfs);\r\n};\r\n\r\n\r\n/**\r\n * Adds the specific item to the provided aggregation. This Method\r\n * should only be called by the library itself due to possible\r\n * failures. It automatically updates the count within the XML\r\n * representation of this aggregation.\r\n *\r\n * This method should only be used for Font, Fill, Border or\r\n * NumberFormat objects.\r\n *\r\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\r\n * @param {Array} aAggregation - An array that represents the aggregation\r\n * @returns {number} - The zero-based index of the element after it was inserted\r\n * @private\r\n */\r\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\r\n\tvar count, i;\r\n\r\n\ti = -1;\r\n\r\n\taAggregation.childs.forEach(function(existingItem, index, array) {\r\n\t\tif (existingItem.equals(oNewItem)) {\r\n\t\t\ti = index;\r\n\t\t}\r\n\t});\r\n\r\n\tif (i === -1) {\r\n\t\taAggregation.addChild(oNewItem);\r\n\t\tcount = aAggregation.childs.length;\r\n\r\n\t\taAggregation.count.value = count;\r\n\t\ti = count - 1;\r\n\t}\r\n\r\n\treturn i;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a RGB color to the Styles collection that is\r\n * referenced by several Styles.\r\n *\r\n * If this particular color is already present, it will not add it a\r\n * second time.\r\n *\r\n * @param {string} sHexColor - HEX string representing a RGB color\r\n */\r\nStyles.prototype.addColor = function(sHexColor) {\r\n\tvar alreadyPresent;\r\n\r\n\tif (!this.colors) {\r\n\t\tthis.addChild({\r\n\t\t\tid: 'colors',\r\n\t\t\ttag: 'colors',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'mru',\r\n\t\t\t\t\ttag: 'mruColors'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\talreadyPresent = this.colors.mru.childs.some(function(color) {\r\n\t\treturn color.rgb.value === 'FF' + sHexColor;\r\n\t});\r\n\r\n\tif (alreadyPresent) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.colors.mru.addChild({\r\n\t\ttag: 'color',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'rgb',\r\n\t\t\t\tname: 'rgb',\r\n\t\t\t\tvalue: 'FF' + sHexColor\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Font to the Styles collection that can be\r\n * referenced by several Styles. The Font is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Font is already present, it will not add it a\r\n * second time. This ensures that each referenced Font is unique\r\n * according to the criteria of Font#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Font.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @returns {number} - The index of this Font used for reference by Style objects\r\n */\r\nStyles.prototype.addFont = function(oData) {\r\n\tvar oFont = new Font(oData);\r\n\r\n\treturn this._addToAggregation(oFont, this.fonts);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Fill to the Styles collection that can be\r\n * referenced by several Styles. The Fill is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Fill is already present, it will not add it a\r\n * second time. This ensures that each referenced Fill is unique\r\n * according to the criteria of Fill#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Fill.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @returns {number} - The index of this Fill used for reference by Style objects\r\n */\r\nStyles.prototype.addFill = function(oData) {\r\n\tvar index, oFill;\r\n\r\n\toFill = new Fill(oData);\r\n\r\n\tindex = this._addToAggregation(oFill, this.fills);\r\n\r\n\tif (oFill.getFill() !== null) {\r\n\t\tthis.addColor(oFill.getFill());\r\n\t}\r\n\r\n\treturn index;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Border to the Styles collection that can be\r\n * referenced by several Styles. The Border is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Border is already present, it will not add it a\r\n * second time. This ensures that each referenced Border is unique\r\n * according to the criteria of Border#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Border.\r\n *\r\n * @param {Object} oData - Configuration object for this Border\r\n * @returns {number} - The index of this Border used for reference by Style objects\r\n */\r\nStyles.prototype.addBorder = function(oData) {\r\n\tvar oBorder = new Border(oData);\r\n\r\n\treturn this._addToAggregation(oBorder, this.borders);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a NumberFormat to the Styles collection that can\r\n * be referenced by several Styles. The NumberFormat is instantiated\r\n * according to the provided configuration object.\r\n *\r\n * If this particular NumberFormat is already present, it will not\r\n * add it a second time. This ensures that each referenced\r\n * NumberFormat is unique according to the criteria of\r\n * NumberFormat#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * NumberFormat.\r\n *\r\n * @param {Object} oData - Configuration object for this NumberFormat\r\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\r\n */\r\nStyles.prototype.addNumberFormat = function(oData) {\r\n\tvar index, numberFormat;\r\n\r\n\tnumberFormat = new NumberFormat(oData);\r\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\r\n\r\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\r\n\r\n\treturn numberFormat.getId();\r\n};\r\n\r\nmodule.exports = Styles;","var XMLElement = require('./XMLElement');\r\n\r\n/**\r\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\r\n * It is mainly used for defining namespaces and namespace-related attributes.\r\n *\r\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.name - String representation of the XML tag.\r\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\r\n * @class\r\n * @module xml/XMLAttribute\r\n */\r\nfunction XMLAttribute(oConfig) {\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\tthis.name = oConfig.name ? oConfig.name : '';\r\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\r\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\r\n}\r\n\r\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\r\nXMLAttribute.prototype.constructor = XMLAttribute;\r\n\r\n/**\r\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\r\n * <prefix>:<name>:<suffix>=\"<value>\"\r\n *\r\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\r\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\r\n *\r\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLAttribute\r\n */\r\nXMLAttribute.prototype.serialize = function(){\r\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\r\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\r\n};\r\n\r\nmodule.exports = XMLAttribute;","/**\r\n * The XMLElement is an abstract base class that can store a\r\n * particular value and escape XML specific characters.\r\n *\r\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction XMLElement(oConfig) {\r\n\tthis.value = oConfig && (oConfig.value || typeof oConfig.value === 'number') ? oConfig.value : '';\r\n}\r\n\r\n/**\r\n * Escapes the given String value to fulfill the requirements of\r\n * XML encoded characters. If the String does not contain any\r\n * character that needs to be encoded, the original String will\r\n * be returned.\r\n *\r\n * This significantly increases the performance because the\r\n * initial regular expression match is much faster than the\r\n * String replace function. We assume that only a few Strings\r\n * need to be encoded.\r\n *\r\n * The following characters need to be encoded:\r\n * < (lower than)\r\n * > (greater than)\r\n * \" (quotes)\r\n * & (ampersand)\r\n *\r\n * @param {string} sValue - The value that needs to be XML encoded\r\n * @returns {string} - XML encoded String\r\n */\r\nXMLElement.prototype.xmlEncode = function(sValue) {\r\n\treturn typeof sValue === 'string' && sValue.match(/[><\"&]+/) !== null ? this._replace(sValue) : sValue;\r\n};\r\n\r\n/**\r\n * @see _xmlEncode\r\n * @param {string} sValue - The string that contains characters that needs to be replaced\r\n * @returns {string} - XML encoded String\r\n * @private\r\n */\r\nXMLElement.prototype._replace = function(sValue) {\r\n\r\n\t/**\r\n\t * Perform ampersand replacement first to avoid encoding the\r\n\t * control ampersand of other encoded characters.\r\n\t *\r\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\r\n\t */\r\n\treturn sValue\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;');\r\n};\r\n\r\nmodule.exports = XMLElement;","var XMLNode\t\t = require('../xml/XMLNode');\r\n\r\n/**\r\n * The XMLFile class is a subclass of XMLNode that enriches the\r\n * object by path and file name information.\r\n *\r\n * @param {Object} oConfig - The configuration object for this XMLFile\r\n * @param {string} oConfig.path - The relative path of this XMLFile\r\n * @param {string} oConfig.filename - The file name of this XMLFile\r\n * @class\r\n */\r\nfunction XMLFile(oConfig) {\r\n\tXMLNode.call(this, oConfig);\r\n\r\n\tthis._filename = oConfig.filename;\r\n\tthis._path = oConfig.path;\r\n}\r\n\r\nXMLFile.prototype = Object.create(XMLNode.prototype);\r\nXMLFile.prototype.constructor = XMLFile;\r\n\r\n/**\r\n * Returns the name of this particular file including its file extension.\r\n *\r\n * @returns {string} Name of the file\r\n */\r\nXMLFile.prototype.getFileName = function() {\r\n\treturn this._filename;\r\n};\r\n\r\n/**\r\n * Assigns the given string as name of the file. The name must contain a file extension.\r\n *\r\n * @param {string} sFileName - Name of the file\r\n */\r\nXMLFile.prototype.setFileName = function(sFileName) {\r\n\r\n\tif (!sFileName.match(/^\\S+\\.\\S{3,4}$/)) {\r\n\t\tthrow new Error('Invalid file name: ' + sFileName);\r\n\t}\r\n\r\n\tthis._filename = sFileName;\r\n};\r\n\r\n/**\r\n * Returns the path of the file without any filename.\r\n *\r\n * @returns {string} - Path of the file\r\n */\r\nXMLFile.prototype.getPath = function() {\r\n\treturn this._path;\r\n};\r\n\r\n/**\r\n * Returns the absolute Path to the file.\r\n *\r\n * @returns {string} - Absolute path including the filename\r\n */\r\nXMLFile.prototype.getAbsolutePath = function() {\r\n\treturn this.getPath() + this.getFileName();\r\n};\r\n\r\n/**\r\n * Assigns the given path to this XMLFile. The path needs to end with\r\n * a slash to match the criteria.\r\n *\r\n * @param {string} sPath - Relative path of this XMLFile\r\n */\r\nXMLFile.prototype.setPath = function(sPath) {\r\n\r\n\t/* IE compatible endsWith */\r\n\tif (!sPath || sPath.lastIndexOf('/') !== (sPath.length - 1)) {\r\n\t\tthrow new Error('Invalid file path: ' + sPath);\r\n\t}\r\n\r\n\tthis._path = sPath;\r\n};\r\n\r\n/**\r\n * Performs a serialization of this XMLFile based on the XMLNode#serialize\r\n * implementation. The optional parameter allows to finalize this XMLFile\r\n * so that all aggregations will be cleared and the cleanup hook\r\n * XMLFile#cleanup will be executed. The aggregations will be cleared\r\n * outside of the cleanup function. This will ensure proper cleanup\r\n * even is the subclass is not calling the super class function.\r\n *\r\n * @param {boolean} [bFinalize]\r\n * Forces the XMLFile to destroy its aggregations. It will call the\r\n * cleanup function of the instance. This can be used as a hook for\r\n * subclasses that inherit from XMLFile. This frees additional memory\r\n * but should be used with caution because after serialization all\r\n * content will be lost.\r\n *\r\n * @returns {string} The serialized XMLFile\r\n *\r\n * @Overrides XMLNode#serialize\r\n */\r\nXMLFile.prototype.serialize = function(bFinalize) {\r\n\tvar sSerializedString;\r\n\r\n\tsSerializedString = Object.getPrototypeOf(XMLFile.prototype).serialize.call(this);\r\n\r\n\tif (bFinalize) {\r\n\t\tthis.childs.length = 0;\r\n\r\n\t\tthis.cleanup();\r\n\t}\r\n\r\n\treturn sSerializedString;\r\n};\r\n\r\n/**\r\n * Abstract function that can be overridden as a cleanup hook.\r\n * @abstract\r\n */\r\nXMLFile.prototype.cleanup = function() {\r\n\r\n\t/* Do nothing */\r\n};\r\n\r\nmodule.exports = XMLFile;","var XMLElement = require('./XMLElement');\r\nvar XMLAttribute = require('./XMLAttribute');\r\n\r\n/**\r\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\r\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\r\n *\r\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.tag - String representation of the XML tag.\r\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\r\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\r\n * @param {string} [oConfig.value] - String value inside the XML tag.\r\n * @class\r\n * @module xml/XMLNode\r\n */\r\nfunction XMLNode(oConfig) {\r\n\tvar i, j, config;\r\n\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\r\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\r\n\r\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\r\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\r\n\tthis.attributes = [];\r\n\tthis.childs = [];\r\n\r\n\t/* Initialize the XML node by filling the aggregations if present */\r\n\tif (config.attributes) {\r\n\t\tfor (i = 0; i < config.attributes.length; i++) {\r\n\t\t\tthis.addAttribute(config.attributes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tif (config.properties) {\r\n\t\tfor (j = 0; j < config.properties.length; j++) {\r\n\t\t\tthis.addChild(config.properties[j]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXMLNode.prototype = Object.create(XMLElement.prototype);\r\nXMLNode.prototype.constructor = XMLNode;\r\n\r\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>';\r\n\r\n\r\n/**\r\n * Adds the provided XMLAttribute object to the XMLNode.\r\n * If no XMLAttribute is provided it will create one instead.\r\n * The method returns the XMLAttribute for chaining.\r\n *\r\n * @function addAttribute\r\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\r\n * @returns {Object} - An instance of XMLAttribute that was added to this node\r\n */\r\nXMLNode.prototype.addAttribute = function(oConfig) {\r\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\r\n\r\n\tthis.attributes.push(attribute);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn attribute;\r\n};\r\n\r\n\r\n/**\r\n * Adds the provided XMLNode object as child to the current XMLNode.\r\n * If no XMLNode is provided it will create one instead.\r\n * The method returns the XMLNode for chaining.\r\n *\r\n * @function addChild\r\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\r\n * @returns {object} - An instance of XMLNode that was added to this node\r\n */\r\nXMLNode.prototype.addChild = function(oConfig) {\r\n\r\n\t/* Additional Attributes of the child node will be added in the Constructor */\r\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\r\n\r\n\tthis.childs.push(node);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\n\r\n/**\r\n * Removes the property from this object and also deletes the\r\n * referenced item within the child nodes or attributes\r\n * aggregation.\r\n *\r\n * The method returns the previously referenced object or null if\r\n * the property name is not present on this particular XMLNode or\r\n * if no item is referenced.\r\n *\r\n * Builtin properties of XMLNode cannot be removed with this\r\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\r\n * \"value\".\r\n *\r\n * @param {string} sProperty - Name of the property that should be removed\r\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\r\n */\r\nXMLNode.prototype.remove = function(sProperty) {\r\n\tvar index, referencedElement, aAggregation;\r\n\r\n\t/* Only proceed if property is present */\r\n\tif (!(sProperty in this)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treferencedElement = this[sProperty];\r\n\r\n\t/* Check if referenced element is a XMLAttribute */\r\n\tif (referencedElement instanceof XMLAttribute) {\r\n\t\taAggregation = this.attributes;\r\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\r\n\t\taAggregation = this.childs;\r\n\t} else {\r\n\r\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\r\n\t\treturn null;\r\n\t}\r\n\r\n\tindex = aAggregation.indexOf(referencedElement);\r\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\r\n\tdelete this[sProperty];\r\n\r\n\treturn referencedElement;\r\n};\r\n\r\n/**\r\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\r\n * it will automatically add the XML processing information in front of the serialized representation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLNode\r\n */\r\nXMLNode.prototype.serialize = function() {\r\n\tvar i, sSerialized, sSerializedContent;\r\n\r\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\r\n\r\n\t/* Insert attributes including namespace information */\r\n\tfor (i = 0; i < this.attributes.length; i++) {\r\n\t\tsSerialized += this.attributes[i].serialize();\r\n\t}\r\n\r\n\tsSerializedContent = this.getSerializedContent();\r\n\r\n\tif (sSerializedContent) {\r\n\t\tsSerialized += '>';\r\n\t\tsSerialized = (' ' + sSerialized).substr(1);\r\n\t\tsSerialized += sSerializedContent;\r\n\t\tsSerialized += '</' + this.tag + '>';\r\n\t} else {\r\n\r\n\t\t/* Shorthand tag support */\r\n\t\tsSerialized += '/>';\r\n\t\tsSerialized = (' ' + sSerialized).substr(1);\r\n\t}\r\n\r\n\treturn sSerialized;\r\n};\r\n\r\n/**\r\n * Returns the serialized content of the XMLNode.\r\n * The conent includes child nodes as well as a value.\r\n *\r\n * @returns {String} Serialized string representation of the content\r\n */\r\nXMLNode.prototype.getSerializedContent = function() {\r\n\tvar i, sSerialized;\r\n\r\n\tsSerialized = '';\r\n\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tsSerialized += typeof this.childs[i] === 'string' ? this.childs[i] : this.childs[i].serialize();\r\n\t}\r\n\r\n\tsSerialized += this.xmlEncode(this.value);\r\n\r\n\treturn sSerialized;\r\n};\r\n\r\nmodule.exports = XMLNode;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(707);\n"],"sourceRoot":""}