/* SAP CVOM 4.0 Â© <2012-2014> SAP AG. All rights reserved. Build Version PI_bycheckin.1630 */
/* Included Components: common,runtime,services,builder,annotation,annotationcontrol,chart,contextmenu,custombutton,feeding,frame,mapbuilder,filterbar,filterbar0,playcontrol,propertyeditor,switchbar,popover,dedicatedlegend */
(function(){
    var define = sap.viz.moduleloader.define;
    var require = sap.viz.moduleloader.require.config({
        context: 'vizcontainer'
    });
    var requirejs = require;

define( "jquery", function() {return jQuery;});

define('sap/viz/controls/Version',[],function() {
    /** sap.viz.controls.Version
     * @class sap.viz.controls.Version
     */
    var Version = {};

    /**
     * Constant, the current version of sap.viz.controls.
     * @member sap.viz.controls.Version.VERSION
     * @return {String} read-only version string
     */
    Version.VERSION = 'PI_bycheckin.1630';
    //Version.BuildVersion = 'PI_bycheckin.1630';

    return Version;
});

define('sap/viz/controls/common/config/GlobalConfig',[],function() {
    
    /* workaround to make GlobalConfig to matain only one instance in global namesapce */
    function findInGlobal (names, scope) {
        if (names.length === 0) return;
        if (names.length === 1) return scope[ names[0] ];

        var propName = names.shift();
        if ( scope[propName] != null ) return findInGlobal(names, scope[propName]);
        return;
    }

    var mod = findInGlobal("sap/viz/controls/common/config/GlobalConfig".split("/"), this);
    if (mod) return mod;

    /**
     * @class sap.viz.controls.common.config.GlobalConfig
     */
    var GlobalConfig = {};

    GlobalConfig.DEFAULT_UICONFIG_TYPE_BUILDER = 'uiconfig-builder';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_CHART = 'uiconfig-chart';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_FEEDING = 'uiconfig-feeding';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_FRAME = 'uiconfig-frame';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_SWITCHBAR = 'uiconfig-switchbar';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_FILTERBAR0 = 'uiconfig-filterbar0';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_FILTERBAR = 'uiconfig-filterbar';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_CONTEXTMENU = 'uiconfig-contextmenu';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_CUSTOMBUTTON = 'uiconfig-custombutton';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_ANNOTATION = 'uiconfig-annotation';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_ANNOTATIONCONTROL = 'uiconfig-annotationcontrol';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_MAPBUILDER = 'uiconfig-mapbuilder';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_PROPERTYEDITOR = 'uiconfig-propertyeditor';

    var _assetsRoot = "../src";

    var _isAssetsRootSet = false;
    
    var _uiConfigs = {};
    
    var defaultAssetsRootFromExtensionFramework = function() {
        if (sap && sap.bi && sap.bi.framework && sap.bi.framework.getServiceMetadata !== undefined) {
            // sap.viz.controls.common.config is the predefined component id in viz controls' aio-bundle.js
            var serviceMetadata;
            try {
            	serviceMetadata = sap.bi.framework.getServiceMetadata("sap.viz.controls.common.config");
            } catch (e) {
            }
            if (serviceMetadata && serviceMetadata.customProperties.defaultAssetsRoot) {
                return serviceMetadata.framework.bundleUrl + "/" + serviceMetadata.customProperties.defaultAssetsRoot;
            }
        }
        return undefined;
    };
    
    /**
     * register UI configuration class.
     * param {String} id
     * param {ConfigClass} uiConfig
     */
    GlobalConfig.registerUIConfig = function(id, uiConfig){
        if (id != null) {
            _uiConfigs[id] = uiConfig;
        }
    };

    /**
     * Get default UI configuration.
     *
     * @method sap.viz.controls.common.config.GlobalConfig.defaultUIConfig
     * @param {String} [type]
     *                  optional, return UI configuration of specified type, if not assigned, return all the UI
     * configurations.
     * @return {JSON}
     *              all the UI configurations:
     *              {
     *                  'uiconfig-builder': {},
     *                  'uiconfig-chart': {},
     *                  ...
     *              }
     */
    GlobalConfig.defaultUIConfig = function(type) {
        var uiConfigs = {};
      
        if (type != null && _uiConfigs[type] != null && _uiConfigs[type].instance) {
            return _uiConfigs[type].instance();
        }

        for (var i in _uiConfigs) {
            if ( i && _uiConfigs[i] && _uiConfigs[i].instance) {
                uiConfigs[i] = _uiConfigs[i].instance();    
            }
        }
        
        return uiConfigs;
    };
    /**
     * Get/Set default assets path.
     * @method sap.viz.controls.common.config.GlobalConfig.defaultAssetsRoot
     * @param {String} path
     *                  By default, the path is './', which is the same folder of sap.viz.controls.js
     */
    GlobalConfig.defaultAssetsRoot = function(path) {
        if (arguments.length > 0) {
            _assetsRoot = path;
            _isAssetsRootSet = true;
            //Set default resource path if root path changed.
            GlobalConfig._setResourcePath();
        } else {
            if (_isAssetsRootSet) {
                return _assetsRoot;
            }
            var assetsRootFromExt = defaultAssetsRootFromExtensionFramework();
            if (assetsRootFromExt) {
                return assetsRootFromExt;
            }
            return _assetsRoot;
        }
    };

    /**
     * Set resource path.
     */
    GlobalConfig._setResourcePath = function() {
        var pathArray = [GlobalConfig.defaultAssetsRoot() + "/locale/"];

        var currentPaths = sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths");
        var newPaths = currentPaths ? pathArray.concat(currentPaths) : pathArray;
        sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths", newPaths);
    };

    return GlobalConfig;
});

define('sap/viz/controls/common/constants/ChartConst',[],function() {
    var ChartConst = {};

    // Chart types
    ChartConst.TYPE_COLUMN = "viz/column";
    ChartConst.TYPE_STACKED_COLUMN = "viz/stacked_column";
    ChartConst.TYPE_DUAL_COLUMN = "viz/dual_column";
    ChartConst.TYPE_3D_COLUMN = "viz/3d_column";

    ChartConst.TYPE_LINE = "viz/line";
    ChartConst.TYPE_AREA = "viz/area";
    ChartConst.TYPE_COMBINATION = "viz/combination";
    ChartConst.TYPE_DUAL_LINE = "viz/dual_line";
    ChartConst.TYPE_DUAL_COMBINATION = "viz/dual_combination";

    ChartConst.TYPE_PIE = "viz/pie";
    ChartConst.TYPE_DONUT = "viz/donut";
    ChartConst.TYPE_PIE_WITH_DEPTH = "viz/pie_with_depth";

    ChartConst.TYPE_GEO_BUBBLE = "viz/geobubble";
    ChartConst.TYPE_GEO_CHOROPLETH = "viz/choropleth";
    ChartConst.TYPE_GEO_PIE = "viz/geopie";
    ChartConst.TYPE_GEO_MAP = 'viz/geomap';

    ChartConst.TYPE_SCATTER = "viz/scatter";
    ChartConst.TYPE_BUBBLE = "viz/bubble";
    ChartConst.TYPE_SCATTER_MATRIX = "viz/scatter_matrix";

    ChartConst.TYPE_HEATMAP = "viz/heatmap";
    ChartConst.TYPE_TREEMAP = "viz/treemap";

    ChartConst.TYPE_TABLE = "viz/ext/table";
    ChartConst.TYPE_CROSSTAB = "viz/ext/crosstab";

    ChartConst.TYPE_RADAR = "viz/radar";
    ChartConst.TYPE_BOXPLOT = "viz/boxplot";
    ChartConst.TYPE_WATERFALL = "viz/waterfall";
    ChartConst.TYPE_TAG_CLOUD = "viz/tagcloud";
    ChartConst.TYPE_TREE = "viz/tree";
    ChartConst.TYPE_NETWORK = "viz/network";
    ChartConst.TYPE_FUNNEL = 'viz/ext/pa/funnel';
    ChartConst.TYPE_PC = 'viz/ext/pa/pc';

    ChartConst.TYPE_NUMBER = 'viz/number';

    // Chart direction
    ChartConst.DIRECTION_HORIZONTAL = "horizontal";
    ChartConst.DIRECTION_VERTICAL = "vertical";

    // Chart stacking
    ChartConst.STACKING_FULL = "full";
    ChartConst.STACKING_NORMAL = "normal";

    // Peer charts
    ChartConst.TYPE_BAR = "viz/bar";

    ChartConst.TYPE_STACKED_BAR = "viz/stacked_bar";
    ChartConst.TYPE_100_STACKED_COLUMN = "viz/100_stacked_column";
    ChartConst.TYPE_100_STACKED_BAR = "viz/100_stacked_bar";

    ChartConst.TYPE_DUAL_BAR = "viz/dual_bar";

    ChartConst.TYPE_3D_BAR = "viz/3d_bar";

    ChartConst.TYPE_HORIZONTAL_LINE = "viz/horizontal_line";

    ChartConst.TYPE_HORIZONTAL_AREA = "viz/horizontal_area";
    ChartConst.TYPE_100_AREA = "viz/100_area";
    ChartConst.TYPE_100_HORIZONTAL_AREA = "viz/100_horizontal_area";

    ChartConst.TYPE_HORIZONTAL_COMBINATION = "viz/horizontal_combination";

    ChartConst.TYPE_DUAL_HORIZONTAL_LINE = "viz/dual_horizontal_line";

    ChartConst.TYPE_DUAL_HORIZONTAL_COMBINATION = "viz/dual_horizontal_combination";

    ChartConst.TYPE_HORIZONTAL_BOXPLOT = "viz/horizontal_boxplot";

    ChartConst.TYPE_HORIZONTAL_WATERFALL = "viz/horizontal_waterfall";

    // Chart feeding
    ChartConst.FEEDING_PRIMARY_VALUES = "primaryValues";
    ChartConst.FEEDING_SECONDARY_VALUES = "secondaryValues";
    ChartConst.FEEDING_AXIS_LABELS = "axisLabels";
    
    ChartConst.MEASURE_NAMES_DIMENSION = "measureNamesDimension";
    ChartConst.MEASURE_VALUES_GROUP = "measureValuesGroup";
    ChartConst.ANALYSIS_AXIS = "analysisAxis";
    
    // Chart axis
    ChartConst.AXIS_XAXIS = "xAxis";
    ChartConst.AXIS_XAXIS1 = "xAxis1";
    ChartConst.AXIS_XAXIS2 = "xAxis2";
    ChartConst.AXIS_YAXIS = "yAxis";
    ChartConst.AXIS_YAXIS1 = "yAxis1";
    ChartConst.AXIS_YAXIS2 = "yAxis2";

    return ChartConst;
});

define('sap/viz/controls/common/constants/CSSConst',[],function() {

    var CSSConst = {};

    CSSConst.PREFIX = "viz-controls-";
    CSSConst.COMMON_PREFIX = CSSConst.PREFIX + "common-";
    CSSConst.SWITCHBAR_PREFIX = CSSConst.PREFIX + "switchbar-";
    CSSConst.FEEDINGPANEL_PREFIX = CSSConst.PREFIX + "feeding-";
    CSSConst.PROPERTYEDITOR_PREFIX = CSSConst.PREFIX + "propertyeditor-";
    CSSConst.VIZDATAPICKER_PREFIX = CSSConst.PREFIX + "datapicker-";
    CSSConst.FRAME_PREFIX = CSSConst.PREFIX + "frame-";
    CSSConst.BUILDER_PREFIX = CSSConst.PREFIX + "builder-";
    CSSConst.TRELLIS_PREFIX = CSSConst.PREFIX + "trellis-";
    CSSConst.MAPBUILDER_PREFIX = CSSConst.PREFIX + "mapbuilder-";
    CSSConst.CHART_PREFIX = CSSConst.PREFIX + "chart-";
    CSSConst.FILTERBAR0_PREFIX = CSSConst.PREFIX + "filterbar0-";
    CSSConst.FILTERBAR_PREFIX = CSSConst.PREFIX + "filterbar-";
    CSSConst.CONTEXTMENU_PREFIX = CSSConst.PREFIX + "contextmenu-";
    CSSConst.CUSTOMBUTTON_PREFIX = CSSConst.PREFIX + "custombutton-";
    CSSConst.ANNOTATION_PREFIX = CSSConst.PREFIX + "annotation-";
    CSSConst.PLAYCTRL_PREFIX = CSSConst.PREFIX + "playcontrol-";

    //common view: Feedingshelf prefix
    CSSConst.FEEDINGSHELF_PREFIX = CSSConst.COMMON_PREFIX + "feeding-";

    return CSSConst;
});

define('sap/viz/controls/common/utils/Utils',[],function() {

    var utils = {};

    // static private in global to make sure id is not duplicated
    var _vc_util_GEN_UID = 0;

    /**
     * return the global uid for HTML elements in the same window scope.
     *
     */
    utils.genUID = function() {
        if (!_vc_util_GEN_UID) {
            _vc_util_GEN_UID = 0;
        }
        return "vcgen_" + (_vc_util_GEN_UID++);
    };
    var class2type = {
        '[object Boolean]' : 'boolean',
        '[object Number]' : 'number',
        '[object String]' : 'string',
        '[object Function]' : 'function',
        '[object Array]' : 'array',
        '[object Date]' : 'date',
        '[object RegExp]' : 'regexp',
        '[object Object]' : 'object'
    };
    
    utils.encodingToken = "_encoded_";
    
    /**
     * apply function when object property is function or else set property value
     *
     */
    utils.applyObjectProperty = function(object, propertyName, propertyValue) {
        try {
            if (utils.isFunction(object[propertyName])) {
                object[propertyName](propertyValue);
            } else {
                object[propertyName] = propertyValue;
            }
        } catch(e) {
            //if (console) {
            //    console.log(e);
            //}
        }

    };
    /**
     * apply properties to a item
     *
     * @name utils.utils.SpreadSheetBindingManager.applyProperties
     * @memberOf Function.prototype
     * @function
     * @param {Object}
     *            the item to apply properties
     * @param {Array}
     *            the properties array
     * */
    utils.applyProperties = function(item, properties/*Array*/) {
        if (properties) {// apply the passed properties
            var len = properties.length;
            for (var i = 0; i < len; i++) {
                var property = properties[i];
                if (property) {
                    utils.applyObjectProperty(item, property.name, property.value);
                }
            }
        }
    };
    /**
     * get object property value
     * @param {object} object
     * @param {String} propertyName
     */
    utils.getObjectProperty = function(object, propertyName) {
        try {
            if (utils.isFunction(object[propertyName])) {
                return object[propertyName]();
            } else if (object.hasOwnProperty(propertyName)) {
                return object[propertyName];
            }

        } catch(e) {
            //if (console) {
            //    console.log(e);
            //}
        }
    };
    /**
     * judge object type
     * @param {object}
     */
    utils.type = function(obj) {
        return obj == null ? String(obj) : class2type[Object.prototype.toString.call(obj)] || "object";
    };
    /**
     * judge object type is or not Function
     * @param {object}
     */
    utils.isFunction = function(obj) {
        return utils.type(obj) === "function";
    };
    /**
     * judge object type is or not Boolean
     * @param {object}
     */
    utils.isBoolean = function(obj) {
        return utils.type(obj) === "boolean";
    };
    /**
     * judge object type is or not String
     * @param {object}
     */
    utils.isString = function(obj) {
        return utils.type(obj) === "string";
    };
    /**
     * judge object type is or not Array
     * @param {object}
     */
    utils.isArray = function(obj) {
        return utils.type(obj) === "array";
    };
    /**
     * judge object type is or not Number
     * @param {object}
     */
    utils.isNumber = function(obj) {
        return utils.type(obj) === "number";
    };
    /**
     * judge object type is or not RegExp
     * @param {object}
     */
    utils.isRegExp = function(obj) {
        return utils.type(obj) === "regexp";
    };
    /**
     * Sort an object Array.
     *
     * @param {Array} arr The object Array to sort.
     * @param {String} prop The object field for the sort.
     * @param {Boolean} [desc] Sort by ASC or DESC, by default is ASC.
     *
     */
    utils.sortArrayOn = function(arr, prop, desc) {
        if (utils.isArray(arr) && utils.isString(prop)) {
            arr.sort(function(a, b) {
                return desc ? (a[prop] < b[prop]) - (a[prop] > b[prop]) : (a[prop] > b[prop]) - (a[prop] < b[prop]);
            });
        }
    };
    /**
     * An empty function doing nothing.
     */
    utils.noop = function() {
    };
    /**
     * Delay to call the function
     *
     * @param {Object} handler
     * @param {Object} wait
     */
    utils.delay = function(handler, wait) {
        return setTimeout(function() {
            return handler.apply(null);
        }, wait);
    };
    /**
     * Delay 1ms to call the function
     *
     * @param {Object} handler
     * @param {Object} wait
     */
    utils.defer = function(handler) {
        return utils.delay.call(null, handler, 1);
    };
    /**
     * get event positon
     * @param {Object} event
     */
    utils.getEventPosition = function(event) {
        var pageX = null;
        var pageY = null;
        if (event.originalEvent && event.originalEvent.targetTouches && event.originalEvent.targetTouches.length !== 0) {
            pageX = event.originalEvent.targetTouches[0].pageX;
            pageY = event.originalEvent.targetTouches[0].pageY;
        } else {
            pageX = event.pageX;
            pageY = event.pageY;
        }
        var position = {};
        position.pageX = pageX;
        position.pageY = pageY;
        return position;

    };
    /**
     * clone object
     * @param {Object} obj
     */
    utils.clone = function(obj) {
        if (obj === null || typeof (obj) !== 'object') {
            return obj;
        }
        var o = obj.constructor === Array ? [] : {};
        for (var i in obj) {
            if (obj.hasOwnProperty(i)) {
                o[i] = arguments.callee.call(null, obj[i]);
            }
        }
        return o;
    };

    utils.toJSON = function(instance, processor) {
        if (utils.isArray(instance)) {
            var result = [];
            for (var i = 0; i < instance.length; i++) {
                result.push(processor.call(null, instance[i]));
            }
            return result;
        } else if (instance) {
            return processor.call(null, instance);
        } else {
            return null;
        }
    };
    utils.fromJSON = function(json, processor) {
        if (utils.isArray(json)) {
            var result = [];
            for (var i = 0; i < json.length; i++) {
                result.push(processor.call(null, json[i]));
            }
            return result;
        } else if (json) {
            return processor.call(null, json);
        } else {
            return undefined;
        }
    };
    utils.updateJSON = function(srcJSON, newJSON) {
        var retJSON = utils.clone(srcJSON);
        retJSON = retJSON || {};
        var _update = function(srcObj, newObj) {
            for (var pro in newObj) {
                if (newObj.hasOwnProperty(pro)) {
                    var newVal = newObj[pro];
                    if (newVal !== undefined) {
                        if ( typeof (newVal) !== "object" || newVal instanceof (Array) || newVal === null) {
                            srcObj[pro] = newVal;
                        } else {
                            var srcVal = srcObj[pro];
                            if (!srcVal) {
                                if (newVal === null || newVal === undefined) {
                                    srcVal = newVal;
                                } else {
                                    srcVal = srcObj[pro] = {};
                                }
                            }
                            _update(srcVal, newVal);
                        }
                    }
                }
            }
        };
        _update(retJSON, newJSON);
        return retJSON;
    };

    utils.substitute = function(str, rest) {
        if (!str)
            return '';

        for (var i = 1; i < arguments.length; i++) {
            str = str.replace(new RegExp("\\{" + (i - 1) + "\\}", "g"), arguments[i]);
        }

        return str;
    };

    utils.invert = function(object) {
        var result = {};
        for (var key in object) {
            var value = object[key];
            result[value] = key;
        }
        return result;
    };


    /**
     * updates an id with a coding delimeter and a suffix
     * @param {String} id
     * @param {String} suffix
     */
    utils.encode = function(id, suffix) {
        // check to see if the encoding token already exists as we do not want to 
        // encode multiple times
        if( id.indexOf( utils.encodingToken ) > -1 ) {
            return id;
        } else {
            var encodedId = id + utils.encodingToken + suffix;
            return encodedId;
        }
    };
    
    /**
     * decodes an id that has been encoded using utils.encode
     * @param {String} idToDecode
     * @return {Array.<String>} First entry will be decoded id, second entry will be suffix.used to encode
     * 
     * If coding delimeter is not present in the idToDecode then only one entry (idToDecode) will exist in the returned array.
     */
    utils.decode = function(idToDecode) {
        var result = idToDecode.split(utils.encodingToken);
        return result;
    };

    utils.deepEqual = function(source, target) {
        if ( typeof source === 'object' && typeof target === 'object' && utils.isExist(source) && utils.isExist(target)) {
            var key = null;
            for (key in source) {
                if (source.hasOwnProperty(key)) {
                    if (!target.hasOwnProperty(key)) {
                        return false;
                    } else if (!utils.deepEqual(source[key], target[key])) {
                        return false;
                    }
                }
            }
            for (key in target) {
                if (target.hasOwnProperty(key)) {
                    if (!source.hasOwnProperty(key)) {
                        return false;
                    }
                }
            }
            return true;
        } else {
            return source === target;
        }
    };
    
    utils.hasCommonKeyValue = function(source, target) {
        if ( typeof source === 'object' && typeof target === 'object') {
            var key = null;
            for (key in source) {
                if (source.hasOwnProperty(key)) {
                    if (target.hasOwnProperty(key) && utils.deepEqual(source[key], target[key])) {
                        return true;
                    }
                }
            }
            return false;
        }
    };

    utils.isExist = function(o) {
        if ((typeof (o) === 'undefined') || (o === null)) {
            return false;
        }
        return true;
    };

    var genGetterSetter = utils.genGetterSetter = function (name) {
        return function (value) {
            if (arguments.length > 0) {
                this[name] = value;
                return this;
            } else {
                return this[name];
            }
        };
    };

    utils.genGetterSetters = function (prototype, names) {
        names.forEach(function (e) {
            prototype[ e.substring(1) ] = genGetterSetter(e);
        });
    };

    return utils;
});

define('sap/viz/controls/common/managers/LangManager',[],
    function() {

    var LangManager = function() {
        this.__className = "sap.viz.controls.common.managers.LangManager";
    };

    /**
     * get resoure value
     * @param {Object} name
     */
    LangManager.get = function(name) {
        // TODO should change to formal sap.viz.extapi.env.Language V2 API, which is planned for 1.18 or later
        return sap.viz.lang.langManager.get(name);
    };

    return LangManager;
});

define('sap/viz/controls/common/feeds/AnalyticalType',[],function() {
    var AnalyticalType = {};

    AnalyticalType.UNIVERSAL = 'universal';

    AnalyticalType.MEASURE = 'measure';

    AnalyticalType.DIMENSION = 'dimension';
    AnalyticalType.HIERARCHY = 'hierarchy';
	// Measure name as dimension
    AnalyticalType.MND = 'mnd';

    AnalyticalType.compatible = function(host, client) {
        if (host === AnalyticalType.UNIVERSAL) {
            return true;
        } else if (host === AnalyticalType.DIMENSION) {
            return client === AnalyticalType.DIMENSION || client === AnalyticalType.HIERARCHY || client === AnalyticalType.MND;
        } else {
            return host === client;
        }
    };

    return AnalyticalType;
});

define('sap/viz/controls/common/utils/JsonUtil',[],function(){
    var JsonUtil = {};
    JsonUtil.AnalysisObjectType = 'sap.viz.controls.common.feeds.AnalysisObject';
    JsonUtil.HierarchyLevelObjectType = 'sap.viz.controls.common.feeds.HierarchyLevelObject';
    JsonUtil.MenuItemType = 'sap.viz.controls.common.views.menu.MenuItem';
    JsonUtil.MenuGroupType = 'sap.viz.controls.common.views.menu.MenuGroup';
    
    JsonUtil._FuncMap = {};
    
    JsonUtil.register = function(type, fromFunc, toFunc){
        var obj = {
            fromFunc:fromFunc,
            toFunc:toFunc
        }
        JsonUtil._FuncMap[type] = obj;
    };
    
    JsonUtil.fromJSON = function(type, json){
        if(JsonUtil._FuncMap[type] && JsonUtil._FuncMap[type].fromFunc)
        {
            return JsonUtil._FuncMap[type].fromFunc(json);
        }else
        {
            return null;
        }
    };
     
    JsonUtil.toJSON = function(type, obj){
        if(JsonUtil._FuncMap[type] && JsonUtil._FuncMap[type].toFunc)
        {
            return JsonUtil._FuncMap[type].toFunc(obj);
        }
        else
        {
            return {};
        }
    };
    
    return JsonUtil;
})
;
define('sap/viz/controls/common/views/menu/MenuGroup',[
// @formatter:off
	'sap/viz/controls/common/utils/Utils',
	'sap/viz/controls/common/utils/JsonUtil'
],
function(utils, JsonUtil) {
// @formatter:on
    /**
     * MenuGroup Class
     *
     * @class sap.viz.controls.common.views.menu.MenuGroup
     *
     * @param {Array<sap.viz.controls.common.views.menu.MenuItem>} menuItems
     */
    var MenuGroup = function(menuItems) {
        this.__className = "sap.viz.controls.common.views.menu.MenuGroup";
        // {[MenuItem]}
        this._menuItems = menuItems;
    };
    MenuGroup.prototype.menuItems = function() {
        return this._menuItems;
    };
    MenuGroup.prototype.selectedItem = function() {
        for (var i = 0; i < this._menuItems.length; i++) {
            if (this._menuItems[i].selected()) {
                return this._menuItems[i];
            }
        }
        return null;
    };

    MenuGroup.prototype.equal = function(menuGroup) {
        if(menuGroup == undefined)
        {
            return false;
        }
        var items1 = this.menuItems()||[];
        var items2 = menuGroup.menuItems()||[];
        if(items1.length !== items2.length)
        {
            return false;
        }

        for(var i = 0; i < items1.length; i++) {
            var item1 = items1[i];
            var item2 = items2[i];
            if(!(item1 == undefined && item2 == undefined)) {
                if(item1 == undefined) {
                    return false;
                }
                if(!item1.equal(item2)) {
                    return false;
                }
            }
        }

        return true;
    };

    /**
     * Serialize MenuGroup or MenuGroup array to a JSON object.
     * @method sap.viz.controls.common.views.menu.MenuGroup.toJSON
     * @param {sap.viz.controls.common.views.menu.MenuGroup|Array<sap.viz.controls.common.views.menu.MenuGroup>} instance
     * @returns {JSON}
     */
    MenuGroup.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return {
                'menuItems' : JsonUtil.toJSON(JsonUtil.MenuItemType, instance._menuItems)
            };
        });
    };
    /**
     * Deserialize a JSON object to MenuGroup or MenuGroup array.
     * @method sap.viz.controls.common.views.menu.MenuGroup.fromJSON
     * @param {JSON} json
     * @returns {sap.viz.controls.common.views.menu.MenuGroup|Array<sap.viz.controls.common.views.menu.MenuGroup>}
     */
    MenuGroup.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            return new MenuGroup(JsonUtil.fromJSON(JsonUtil.MenuItemType, json.menuItems));
        });
    };
    JsonUtil.register(JsonUtil.MenuGroupType, MenuGroup.fromJSON, MenuGroup.toJSON);
    return MenuGroup;
});

define('sap/viz/controls/common/feeds/HierarchyLevelObject',[
// @formatter:off
    'require',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/JsonUtil'],
    function(r, utils, JsonUtil) {
// @formatter:on
    var require = r || require;
    /**
     * HierarchyLevelObject Class
     *
     */
    var HierarchyLevelObject = function(id, name, analysis) {
        this.__className = "sap.viz.controls.common.feeds.HierarchyLevelObject";
        this._id = id;
        this._name = name;
        this._analysis = analysis;

        this._selected = false;
    };
    /**
     * Get HierarchyLevelObject id
     *
     * @returns {String}
     */
    HierarchyLevelObject.prototype.id = function() {
        return this._id;
    };
    /**
     * Get HierarchyLevelObject name
     *
     * @returns {String}
     */
    HierarchyLevelObject.prototype.name = function(value) {
    	if (arguments.length > 0) {
            this._name = value;
            return this;
        } else {
            return this._name;
        }
    };
    HierarchyLevelObject.prototype.analysis = function() {
        return this._analysis;
    };
    HierarchyLevelObject.prototype.selected = function(value) {
        if (arguments.length > 0) {
            this._selected = value;
            return this;
        } else {
            return this._selected;
        }
    };

    HierarchyLevelObject.prototype.clone = function() {
        var analysis = null;
        if (this._analysis) {
            analysis = this._analysis.clone();
        }
        var clone = new HierarchyLevelObject(this._id, this._name, analysis);
        clone.selected(this._selected);
        return clone;
    };

    /**
     * Serialize a HierarchyLevelObject instance to JSON
     *
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.toJSON
     * @returns {Object}
     */
    HierarchyLevelObject.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return {
                'id' : instance._id,
                'name' : instance._name,
                'analysis' : JsonUtil.toJSON(JsonUtil.AnalysisObjectType, instance._analysis),
                'selected' : instance._selected
            };
        });
    };
    /**
     * Deserialize a JSON to HierarchyLevelObject instance
     *
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.fromJSON
     * @returns {sap.viz.controls.common.feeds.HierarchyLevelObject}
     */
    HierarchyLevelObject.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            var instance = new HierarchyLevelObject(json.id, json.name, JsonUtil.fromJSON(JsonUtil.AnalysisObjectType, json.analysis));
            instance.selected(json.selected);
            return instance;
        });
    };
    
    JsonUtil.register(JsonUtil.HierarchyLevelObjectType, HierarchyLevelObject.fromJSON, HierarchyLevelObject.toJSON);

    return HierarchyLevelObject;
});

define('sap/viz/controls/common/feeds/AnalysisObject',[
// @formatter:off
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/views/menu/MenuGroup',
    'sap/viz/controls/common/utils/JsonUtil',
    // Require HierarchyLevelObject to make sure its fromJSON function has
    // properly registered, so that AnalysisObject.fromJSON can work when
    // hierarchy levels exist.
    'sap/viz/controls/common/feeds/HierarchyLevelObject'
], function(utils, LangManager, AnalyticalType, MenuGroup, JsonUtil) {
// @formatter:on
    /**
     * AnalysisObject Class
     *
     * @class sap.viz.controls.common.feeds.AnalysisObject
     * @param {String} id
     * @param {String} name
     * @param {String} type Enumeration: dimension, measure, hierarchy, mnd
     * @param {String} dataType Enumeration: string, number, date...
     * @param {String} aggregation type: if the ananlysis object is to be used as a 
     *                 aggregation, sum, min, max, avg....
     * @param {String} aggregation target: the dimension which aggregation is created. 
     * We need to keep the dimension id for publishing to map to the real dimension
     */
    var AnalysisObject = function(id, name, type, dataType, aggregationType, aggregationTarget) {
        this.__className = "sap.viz.controls.common.feeds.AnalysisObject";
        this._id = id;
        this._name = name;
        this._type = type;
        this._dataType = dataType;
        this._aggregationType = aggregationType;
        this._aggregationTarget = aggregationTarget;
        this._actions = null;
        this._hierarchyLevels = null;
    };
    AnalysisObject.genMND = function() {
        return new AnalysisObject('mnd', '', AnalyticalType.MND, 'string');
    };

    utils.genGetterSetters(AnalysisObject.prototype,
        ["_id", "_name", "_actions", "_aggregationType", "_aggregationTarget", "_hierarchyLevels"]
    );

    /**
     * Get id
     *
     * @method sap.viz.controls.common.feeds.AnalysisObject.prototype.id
     * @returns {String}
     */
    /*AnalysisObject.prototype.id = function(value) {
         if (arguments.length > 0) {
            this._id = value;
            return this;
        } else {
            return this._id;
        }
    };*/
    /**
     * Get name
     *
     * @method sap.viz.controls.common.feeds.AnalysisObject.prototype.name
     * @returns {String}
     */
    /*AnalysisObject.prototype.name = function(value) {
        if (arguments.length > 0) {
            this._name = value;
            return this;
        } else {
            return this._name;
        }
    };*/
    /**
     * Get type
     *
     * @method sap.viz.controls.common.feeds.AnalysisObject.prototype.type
     * @returns {String}
     */
    AnalysisObject.prototype.type = function() {
        return this._type;
    };
    /**
     * Get AnalysisObject dataType
     *
     * @returns {String}
     */
    AnalysisObject.prototype.dataType = function() {
        return this._dataType;
    };
    /**
     * Get/Set AnalysisObject actions.
     * @param {Array<sap.viz.controls.common.views.menu.MenuGroup>} menuGroups
     * @returns {Array<sap.viz.controls.common.views.menu.MenuGroup>}
     */
    /*AnalysisObject.prototype.actions = function(value) {
        if (arguments.length > 0) {
            this._actions = value;
            return this;
        } else {
            return this._actions;
        }
    };*/

    /**
     * Get/Set AnalysisObject aggregationType
     * @param {<sap.viz.controls.common.feeds.SubtotalItemType>}
     * @returns {<sap.viz.controls.common.feeds.SubtotalItemType>}
    */
    /*AnalysisObject.prototype.aggregationType = function(value) {
        if (arguments.length > 0) {
            this._aggregationType = value;
            return this;
        } else {
            return this._aggregationType;
        }
    };*/

    /**
     * Get/Set AnalysisObject aggregationTaget
     * @param {String}
     * @returns {String}
    */
    /*AnalysisObject.prototype.aggregationTarget = function(value) {
        if (arguments.length > 0) {
            this._aggregationTarget = value;
            return this;
        } else {
            return this._aggregationTarget;
        }
    };*/

    /**
     * Get/Set hierarchyLevels.
     * @param {Array<sap.viz.controls.common.feeds.HierarchyLevelObject>} hierarchyLevels
     * @returns {Array<sap.viz.controls.common.feeds.HierarchyLevelObject>}
     */
    /*AnalysisObject.prototype.hierarchyLevels = function(value) {
        if (arguments.length > 0) {
            this._hierarchyLevels = value;
            return this;
        } else {
            return this._hierarchyLevels;
        }
    };*/

    AnalysisObject.prototype.selectedHierarchyLevel = function() {
        if (!this._hierarchyLevels) {
            return;
        }
        for (var i = 0; i < this._hierarchyLevels.length; i++) {
            if (this._hierarchyLevels[i].selected()) {
                return this._hierarchyLevels[i];
            }
        }
        return;
    };
    AnalysisObject.prototype.selectedHierarchyLevelID = function(id) {
        if (!this._hierarchyLevels) {
            return this;
        }
        for (var i = 0; i < this._hierarchyLevels.length; i++) {
            var level = this._hierarchyLevels[i];
            level.selected(level.id() === id);
        }
        return this;
    };

    AnalysisObject.prototype.clone = function() {
        var clone = AnalysisObject.fromJSON(AnalysisObject.toJSON(this));
        return clone;
    };

    AnalysisObject.prototype.equal = function(analysisObj){
        if(this.type() === AnalyticalType.MND && analysisObj.type() === AnalyticalType.MND) {
            return true;
        }

        if(this.type() !== analysisObj.type() || this.name() !== analysisObj.name()) {
            return false;
        }

        if(this.type() === AnalyticalType.HIERARCHY && analysisObj.type() === AnalyticalType.HIERARCHY) {
            if (this.selectedHierarchyLevel().id() !== analysisObj.selectedHierarchyLevel().id()) {
                return false;
            }

            var levels1 = this.hierarchyLevels();
            var levels2 = analysisObj.hierarchyLevels();
            if (!levels1 || !levels2 || levels1.length !== levels2.length) {
                return false;
            }

            for (var i = 0; i < levels1.length; i++) {
                var level1 = levels1[i];
                var level2 = levels2[i];
                if (level1.id() !== level2.id()) {
                    return false;
                }

                if (level1.name() !== level2.name()) {
                    return false;
                }
            }
        }

        if(this.actions()!=undefined || analysisObj.actions()!=undefined)
        {
            var actions1 = this.actions()||[];
            var actions2 = analysisObj.actions()||[];
            if(actions1.length !== actions2.length)
            {
                return false;
            }
            for(var i =0;i<actions1.length;i++)
            {
                var menuGroup1 = actions1[i];
                var menuGroup2 = actions2[i];
                if(!(menuGroup1 == undefined && menuGroup2 == undefined))
                {
                    if(menuGroup1 == undefined)
                    {
                        return false;
                    }
                    if(!menuGroup1.equal(menuGroup2))
                    {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    /**
     * Serialize AnalysisObject or AnalysisObject array to a JSON object.
     *
     * @method sap.viz.controls.common.feeds.AnalysisObject.toJSON
     * @param {sap.viz.controls.common.feeds.AnalysisObject|Array<sap.viz.controls.common.feeds.AnalysisObject>} instance
     * @returns {JSON}
     */
    AnalysisObject.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
        return {
                'id' : instance._id,
                'name' : instance._name,
                'type' : instance._type,
                'dataType' : instance._dataType,
                'actions' : MenuGroup.toJSON(instance._actions),
                'hierarchyLevels' : JsonUtil.toJSON(JsonUtil.HierarchyLevelObjectType, instance._hierarchyLevels),
                'aggregationType' : instance._aggregationType,
                'aggregationTarget' : instance._aggregationTarget
            };
        });
    };
    /**
     * Deserialize a JSON object to AnalysisObject or AnalysisObject array.
     * @method sap.viz.controls.common.feeds.AnalysisObject.fromJSON
     * @param {JSON} json
     * @returns {sap.viz.controls.common.feeds.AnalysisObject||Array<sap.viz.controls.common.feeds.AnalysisObject>}
     */
    AnalysisObject.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            var instance = new AnalysisObject(json.id, json.name, json.type, json.dataType, json.aggregationType, json.aggregationTarget);
            if (json.actions) {
                instance.actions(MenuGroup.fromJSON(json.actions));
            }
            if (json.hierarchyLevels) {
                instance.hierarchyLevels(JsonUtil.fromJSON(JsonUtil.HierarchyLevelObjectType, json.hierarchyLevels));
            }
            return instance;
        });
    };

    JsonUtil.register(JsonUtil.AnalysisObjectType, AnalysisObject.fromJSON, AnalysisObject.toJSON);
    return AnalysisObject;
});

define('sap/viz/controls/common/feeds/FeedItem',[
// @formatter:off
	'sap/viz/controls/common/utils/Utils',
	'sap/viz/controls/common/feeds/AnalysisObject'],
	function(utils, AnalysisObject) {
// @formatter:on

    /**
     * FeedItem Class
     *
     * @class sap.viz.controls.common.feeds.FeedItem
     * @param {String} id
     *                 Standard feed id string in CVOM chart. Special case:
     *                 For trellis row, the feed id is multiplier.row. For trellis column, the feed id is multiplier.column
     * @param {String} type
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} values
     */
    var FeedItem = function(id, type, values) {
        this.__className = "sap.viz.controls.common.feeds.FeedItem";
        this._id = id;
        this._type = type;
        this._values = values;
    };
    /**
     * Get type
     *
     * @method sap.viz.controls.common.feeds.FeedItem.prototype.type
     * @returns {String}
     */
    FeedItem.prototype.type = function() {
        return this._type;
    };
    /**
     * Get id
     *
     * @method sap.viz.controls.common.feeds.FeedItem.prototype.id
     * @returns {String}
     */
    FeedItem.prototype.id = function() {
        return this._id;
    };
    /**
     * Get values
     *
     * @method sap.viz.controls.common.feeds.FeedItem.prototype.values
     * @returns {Array<sap.viz.controls.common.feeds.AnalysisObject>}
     */
    FeedItem.prototype.values = function(value) {
        if (arguments.length > 0) {
            this._values = value;
            return this;
        } else {
            return this._values;
        }
    };

    /**
     * check whether this item has values
     *
     * @returns {Boolean}
     *
     */
    FeedItem.prototype.hasValues = function() {
        return (this._values && this._values.length > 0);
    };

    FeedItem.prototype.clone = function() {
        return FeedItem.fromJSON(FeedItem.toJSON(this));
    };

    /**
     * Serialize FeedItem or FeedItem array to a JSON object.
     *
     * @method sap.viz.controls.common.feeds.FeedItem.toJSON
     * @param {sap.viz.controls.common.feeds.FeedItem|Array<sap.viz.controls.common.feeds.FeedItem>} instance
     * @returns {JSON}
     */
    FeedItem.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return {
                'id' : instance._id,
                'type' : instance._type,
                'values' : AnalysisObject.toJSON(instance._values)
            };
        });
    };
    /**
     * Deserialize a JSON object to FeedItem or FeedItem array.
     *
     * @method sap.viz.controls.common.feeds.FeedItem.fromJSON
     * @param {JSON} json
     * @returns {sap.viz.controls.common.feeds.FeedItem|Array<sap.viz.controls.common.feeds.FeedItem>}
     */
    FeedItem.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            return new FeedItem(json.id, json.type, AnalysisObject.fromJSON(json.values));
        });
    };
    return FeedItem;
});

define('sap/viz/controls/common/feeds/FeedItemType',[], function() {

    var FeedItemType = function() {
        this.__className = "sap.viz.controls.common.feeds.FeedItemType";
    };

    FeedItemType.MEASURE = 'Measure';
    FeedItemType.DIMENSION = 'Dimension';
    FeedItemType.SUBTOTAL = 'Subtotal';
    FeedItemType.GEOGRAPHY = 'Geography';
    FeedItemType.ROWS = 'rows';
    FeedItemType.ROW_SUBTOTALS = 'r_subtotals';
    FeedItemType.COLUMNS = 'columns';
    FeedItemType.COLUMNS_SUBTOTALS = 'c_subtotals';
    FeedItemType.CALCULATION = 'calculation';
    FeedItemType.LEVEL = 'level';
    FeedItemType.HIERARCHY = 'hierarchy';

    return FeedItemType;
});
define('sap/viz/controls/common/feeds/valueobjects/Shelf',[], function() {

    var Shelf = function() {
        // ID: like primaryValues, regionColor, axisLabels
        this.id = null;
        // Globalized name string
        this.name = null;
        // Shelf type: Measure, Dimension, Trellis
        this.type = null;
        // Shelf analysis item type: measure, dimension, hierarchy
        this.analysisType = null;
        // Shelf feed item type: Measure, Dimension, Geography
        this.feedItemType = null;
        // Number of max analysis item count
        this.capacity = 0;
        
        
    };
    
    /**
     * check if two shelfs equals
     * @param {Shelf} shelf
     */
    Shelf.prototype.equals = function(shelf){
        if(null == shelf) {
            return false;
        }
        if(this.id == shelf.id && this.name == shelf.name &&
            this.type == shelf.type && this.analysisType == shelf.analysisType &&
            this.feedItemType == shelf.feedItemType && this.capacity == shelf.capacity) {
            return true;
        }
        return false;
    };
    
    return Shelf;
});

define('sap/viz/controls/common/feeds/valueobjects/ShelfType',[], function() {

    var ShelfType = function() {
    };

    ShelfType.MEASURE = 'measure';
    ShelfType.ATTRIBUTE = 'attribute';
    ShelfType.SUBTOTAL = 'subtotal';
    ShelfType.TRELLIS = 'trellis';

    return ShelfType;
});

define('sap/viz/controls/common/constants/DatasetTypeConst',[],function() {

    var DatasetTypeConst = {};    
    
    DatasetTypeConst.FlatTableDataset ='FlatTableDataset';
    DatasetTypeConst.CrosstableDataset ='CrosstableDataset';
    DatasetTypeConst.RawDataset ='RawDataset';

    return DatasetTypeConst;
});

define('sap/viz/controls/common/utils/PropertyFilterUtil',[],function() {
    var PropertyFilterUtil = {};

    var FILTERED_PROPERTIES = {
        "viz/bubble" : ["plotArea.maxBubbleHeight",
                "plotArea.maxBubbleWidth",
                "plotArea.maxPriValue",
                "plotArea.maxSecValue",
                "plotArea.minBubbleHeight",
                "plotArea.minBubbleWidth",
                "plotArea.minSecValue",
                "plotArea.minPriValue"],
        "viz/geobubble" : ["plotArea.maxValue",
                "plotArea.minValue"],
        "info/donut" : ["plotArea.highlight.highlightContext",
                "plotArea.highlight.unhighlightSliceColor",
                "plotArea.applyUnhighlightSliceColor",
                "plotArea.dataLabel.renderer",
                "plotArea.sliceRenderer",
                "plotArea.highlight.contextInfos"],
        "info/bar" : ["valueAxis.layout.maxWidth",
                "plotArea.primaryScale.autoMaxValue",
                "plotArea.primaryScale.autoMinValue",
                "categoryAxis.layout.maxWidth",
                "plotArea.dataLabel.renderer",
                "categoryAxis.labelRenderer",
                "plotArea.markerRenderer"],
        "info/column" : ["valueAxis.layout.maxWidth",
                "plotArea.primaryScale.autoMaxValue",
                "plotArea.primaryScale.autoMinValue",
                "categoryAxis.layout.maxWidth",
                "plotArea.dataLabel.renderer",
                "categoryAxis.labelRenderer",
                "plotArea.markerRenderer"],
        "info/line" : ["valueAxis.layout.maxWidth",
                "plotArea.primaryScale.autoMaxValue",
                "plotArea.primaryScale.autoMinValue",
                "categoryAxis.layout.maxWidth",
                "plotArea.markerRenderer",
                "plotArea.dataLabel.renderer",
                "categoryAxis.labelRenderer",
                "plotArea.lineRenderer"],
        "info/horizontal_line" : ["valueAxis.layout.maxWidth",
                "plotArea.primaryScale.autoMaxValue",
                "plotArea.primaryScale.autoMinValue",
                "categoryAxis.layout.maxWidth",
                "plotArea.dataLabel.renderer",
                "categoryAxis.labelRenderer",
                "plotArea.lineRenderer"]
    }

    PropertyFilterUtil.addDefaultProperties = function(properties, chartType) {
        var filteredProperties = FILTERED_PROPERTIES[chartType];
        if (filteredProperties) {
            filteredProperties.forEach(function(path) {
                PropertyFilterUtil.addProperty(properties, path);
            });
        }
        //This property is for sFin
        PropertyFilterUtil.addProperty(properties, "interaction.behaviorType");

        return properties;
    }

    PropertyFilterUtil.addProperty = function(properties, propertyPath) {
        if (!propertyPath){
            return properties;
        }
        properties = properties || {};
        var temp = properties;
        var path = propertyPath.split(".");
        for(var i=0; i< path.length; i++){
            if(!temp.hasOwnProperty(path[i])){
                temp[path[i]] = {};
            }
            temp = temp[path[i]];
        }
        return properties;
    }

    return PropertyFilterUtil;
});
// @formatter:off
define('sap/viz/controls/common/utils/VizUtils',
[
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/utils/PropertyFilterUtil'
],
function(DatasetTypeConst, Utils, FeedItem, AnalysisObject, PropertyFilterUtil) {
// @formatter:on
    var VizUtils = {};

    /**
     * Chech whether dataset has fake data. For dataset is null, the return value is true.
     * @param {Object} dataset
     * @returns {Boolean}
     */
    VizUtils.hasFakeData = function(dataset){
        var hasFakeData= true;
        if(dataset){
            hasFakeData = false;
        // TODO: handle FlatTable
            if( Utils.isFunction(dataset.hasFakeData)){
            // for CrossTableDataset
                hasFakeData = dataset.hasFakeData();
            } else {
                // for Table which is RawDataset
                hasFakeData = dataset.isFake === true ? true : false;
            }
        }

        return hasFakeData;
    };

    VizUtils.getDatasetType = function(dataset){
        if (dataset){
            // TODO: flatTable?
            if (dataset instanceof sap.viz.api.data.CrosstableDataset){
                return DatasetTypeConst.CrosstableDataset;
            } else if (dataset instanceof sap.viz.api.data.FlatTableDataset) {
                return DatasetTypeConst.FlatTableDataset;
            } else {
                return DatasetTypeConst.RawDataset;
            }
        }

        return DatasetTypeConst.CrosstableDataset;
    };

    /**
     * judge object type is or not Array of FeedItem
     * @param {object}
     */
    VizUtils.isArrayOfFeedItem = function(obj) {
        return VizUtils._isArrayOf(obj, FeedItem);
    };

    /**
     * judge object type is or not Array of AnalysisObject
     * @param {object}
     */
    VizUtils.isArrayOfAnalysisObject = function(obj) {
        return VizUtils._isArrayOf(obj, AnalysisObject);
    };

    VizUtils._isArrayOf = function(obj, className) {
        if (Utils.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                if (!(obj[i] instanceof className)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };

    VizUtils._parseProperties = function(propertiesConfig){
        var result = {};
        for(var name in propertiesConfig){
            if( propertiesConfig.hasOwnProperty(name) && propertiesConfig[name]){
                var config = propertiesConfig[name];
                var property = config.name || name;
                if(config.supportedValueType === "Object"){
                    if(config.supportedValues){
                        result[property] = VizUtils._parseProperties(config.supportedValues);
                    }
                } else {
                    result[property] = config.defaultValue;
                }
            }
        }

        return result;
    };

    VizUtils._convertProperties = function(allPropertiesConfig){
        var result = {};
        for(var module in allPropertiesConfig){
            if( allPropertiesConfig.hasOwnProperty(module) ){
                result[module] = VizUtils._parseProperties(allPropertiesConfig[module])
            }
        }
        return result;
    };

    VizUtils._getDefaultProperties = function(type){
        if( !type ){
            return null;
        }
        var vizDef = sap.viz.api.manifest.Viz.get(type)[0];
        if( !vizDef){
            return null;
        }
        var propertiesConfig = vizDef.allProperties();
        if( !propertiesConfig ){
            return null;
        }
        return VizUtils._convertProperties(propertiesConfig);
    };
    VizUtils._propertyExist = function(properties, propertyPath){
        if(!propertyPath){
            return false;
        }
        var path = propertyPath.split(".");
        var target = properties;
        var result = false;
        for(var i=0; i< path.length; ++i){
            if(target && target.hasOwnProperty(path[i])){
                target = target[path[i]];
                result = true;
            } else {
                result = false;
                break;
            }
        }
        return result;
    };
    VizUtils.hasProperties = function(type, properties){
        var result = [];
        if(!properties || properties.length ==0){
            return result;
        }
        var defaultProperties = VizUtils._getDefaultProperties(type);
        for(var i=0; i<properties.length; ++i){
            if(Utils.isArray(properties[i])){
                result[i] = false;
                for(var n=0; n<properties[i].length; ++n){
                    result[i] = result[i] || VizUtils._propertyExist(defaultProperties, properties[i][n]);
                }
            }else{
                result[i] = VizUtils._propertyExist(defaultProperties, properties[i]);
            }
        }
        return result;
    };

    VizUtils._removeProperty = function(properties, propertyPath){
        if(!propertyPath){
            return null;
        }
        var path = propertyPath.split(".");
        var target = properties;
        for(var i=0; i< path.length; ++i){
            if(target && target.hasOwnProperty(path[i])){
                if(i === path.length-1){
                    var result = target[path[i]];
                    delete target[path[i]];
                    return result;
                }else{
                    target = target[path[i]];
                }
            } else {
                break;
            }
        }
        return null;
    };

    VizUtils._getProperty = function(properties, propertyPath) {
        if(!propertyPath){
            return null;
        }
        var path = propertyPath.split(".");
        var target = properties;
        for(var i=0; i< path.length; ++i){
            if(target && target.hasOwnProperty(path[i])){
                if(i === path.length-1){
                    var result = target[path[i]];
                    return result;
                }else{
                    target = target[path[i]];
                }
            } else {
                break;
            }
        }
        return null;
    }

    VizUtils.removeProperties = function(properties, removeProperties){
        if(!removeProperties || removeProperties.length ==0){
            return ;
        }
        for(var i=0; i<removeProperties.length; ++i){
            VizUtils._removeProperty(properties, removeProperties[i]);
        }
    };

    VizUtils.getValueAxis = function(type){
        var manifest = sap.viz.api.manifest.Viz.get(type)[0];
        if(!manifest){
            return null;
        }
        return manifest.valueAxis;
    };
    VizUtils.isValueAxis = function(type, axisName){
        var valueAxis = VizUtils.getValueAxis(type);
        if(valueAxis){
            for(var i=0; i<valueAxis.length; i++){
                if(axisName === valueAxis[i]){
                    return true;
                }
            }
        }
        return false;
    };

    /**
     * get invalid value axis scale properties, add them to corresponding position, remove invalid properties
     * @param {object} properties, srctype, type
     * @return (object)converted properties
     */
    VizUtils.convertValueAxisScale = function(properties, srcType, type){
        if(!properties || !srcType || !type){
            return;
        }

        var srcValueAxis = VizUtils.getValueAxis(srcType);
        var valueAxis = VizUtils.getValueAxis(type);
        if(!srcValueAxis || srcValueAxis.length === 0){
            return;
        }
        var scaleProperties = [];
        for(var i=0; i<srcValueAxis.length; ++i){
            scaleProperties[i] = VizUtils._removeProperty(properties, srcValueAxis[i] + ".scale");
        }
        if(valueAxis && valueAxis.length > 0){
            for(var n=0; n<valueAxis.length; ++n){
                if(scaleProperties[n]){
                    properties[valueAxis[n]] = properties[valueAxis[n]] || {};
                    properties[valueAxis[n]]["scale"] = scaleProperties[n];
                }
            }
        }
    };

    /**
     * get category axis properties
     * @param {string} type
     * @return (object-array)converted properties
     */
    VizUtils.getCategoryAxis = function(type){
        var manifest = sap.viz.api.manifest.Viz.get(type)[0];
        if(!manifest){
            return null;
        }
        return manifest.categoryAxis;
    };

    /**
     * remove invalid properties according to chart type
     * @param {object} srcProperties, (string)type
     * @return (object)valid properties object
     */
    VizUtils.getValidProperties = function(srcProperties, type) {
        var defaultProperties = VizUtils._getDefaultProperties(type);
        //This is for internal properties which are not exported
        defaultProperties = PropertyFilterUtil.addDefaultProperties(defaultProperties, type);

        var reProperties = Utils.clone(srcProperties);
        VizUtils._deleteInvalidProperty(reProperties, defaultProperties);
        return reProperties;
    }

    VizUtils._deleteInvalidProperty = function(srcProperties, defaultProperties) {
        if (!defaultProperties) {
            return;
        }
        var propertyName;
        for (propertyName in srcProperties) {
            if (!defaultProperties.hasOwnProperty(propertyName)) {
                delete srcProperties[propertyName];
            } else if (Utils.type(srcProperties[propertyName]) === 'object'){
                VizUtils._deleteInvalidProperty(srcProperties[propertyName], defaultProperties[propertyName]);
            }
        }
    }

    /**
     * convert properties when chart type changed
     * @param {object} srcProperties, (string)srctype, (string)type
     * @return (object)converted properties
     */
    VizUtils.convertProperties = function(srcProperties, srcType, type) {
        if (!srcProperties || !srcType || !type || srcType === type) {
            return srcProperties;
        }

        var properties = Utils.clone(srcProperties);
        var srcValueAxis = VizUtils.getValueAxis(srcType);
        var valueAxis = VizUtils.getValueAxis(type);
        if(srcValueAxis && srcValueAxis.length !== 0){
            var valueAxisProperties = [];
            for(var i = 0; i < srcValueAxis.length; ++i){
                valueAxisProperties[i] = VizUtils._getProperty(srcProperties, srcValueAxis[i]);
            }
            if(valueAxis && valueAxis.length > 0){
                for(var n = 0; n < valueAxis.length; ++n){
                    if(valueAxisProperties[n]){
                        properties[valueAxis[n]] = valueAxisProperties[n];
                    }
                }
            }
        }

        var srcCategoryAxis = VizUtils.getCategoryAxis(srcType);
        var categoryAxis = VizUtils.getCategoryAxis(type);
        if(srcCategoryAxis && srcCategoryAxis.length !== 0){
            var categoryAxisProperties = [];
            for(var i = 0; i < srcValueAxis.length; ++i){
                categoryAxisProperties[i] = VizUtils._getProperty(srcProperties, srcCategoryAxis[i]);
            }
            if(categoryAxis && categoryAxis.length > 0){
                for(var n = 0; n < categoryAxis.length; ++n){
                    if(categoryAxisProperties[n]){
                        properties[categoryAxis[n]] = categoryAxisProperties[n];
                    }
                }
            }
        }
        return properties;
    }

    return VizUtils;
});

define('sap/viz/controls/common/utils/FakeDataUtils',
// @formatter:off
[
    'jquery',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/Utils'
],
function($, ChartConst, AnalyticalType, FeedItemType, LangManager, Utils){
    var FakeDataUtils = {};
    FakeDataUtils.buildFakeData = function(vizType, feeds, data) {
        var rawDataSet = data;
        var feed = FakeDataUtils.feedItems2feed(feeds);
        var rivFeeding = FakeDataUtils._buildRIVFeeding(vizType, feed);
        return FakeDataUtils._buildFake(vizType, rivFeeding, rawDataSet);
    };
    FakeDataUtils.feedItems2feed = function(feedItems) {

        var feeding = [];
        feedItems.forEach(function(feedItem) {
            var values = feedItem.values();
            if(values.length > 0) {
                for(var i = 0; i < values.length; ++i) {
                    var analysis = values[i];
                    var feed = {
                        'feed' : feedItem.id().indexOf('multiplier') !== -1 ? feedItem.id().split('.')[0] : feedItem.id()
                    };
                    if(analysis.type() === AnalyticalType.HIERARCHY) {
                        var hierarchyLevels = analysis.hierarchyLevels();
                        for(var j = 0; j < hierarchyLevels.length; j++) {
                            var level = hierarchyLevels[j];
                            if(level.selected()) {
                                feed.objId = level.id();
                            }
                        }
                        if( analysis.aggregationType() ) {
                                feed.aggregationType = analysis.aggregationType();
                        }
                    }
                    //if the analysisObj type is MND
                    else {
                        if(analysis.type() === AnalyticalType.MND){
                            feed.objId = null;
                        } else {
                            if( analysis.aggregationType() ) {
                                feed.aggregationType = analysis.aggregationType();
                                if (analysis.aggregationTarget()) {
                                    feed.objId = analysis.aggregationTarget();
                                } else {
                                    feed.objId = Utils.decode(analysis.id())[0];
                                }
                            } else {
                                feed.objId = analysis.id();
                            }
                        }
                        
                    }
                    feeding.push(feed);
                }
            }
        });
        return feeding;
    };
    FakeDataUtils._buildRIVFeeding = function(vizType, feeding) {
        var chart = sap.viz.api.manifest.Viz;
        var chartConfig = chart.get(vizType)[0];
        var feeds = chartConfig.allFeeds();
        var axesIndexes = [];
        var mgIndexes = [];
        var dataFeeding = [];
        for(var i = 0; i < feeds.length; i++) {
            var feedId = feeds[i].id;
            var feedType = feeds[i].type;
            var feedingItems = [];
            for(var j = 0; j < feeding.length; j++) {
                if(feeding[j].feed == feedId) {
                    feedingItems.push(feeding[j]);
                }
            }

            if(feedingItems.length > 0) {
                var binding = {};
                binding.feedId = feedId;
                binding.binding = [];
                var bindingIndex = 0;
                for(var k = 0; k < feedingItems.length; k++) {
                    if(feedingItems[k].objId != null) {
                        if(feedType === FeedItemType.DIMENSION) {
                            if ($.inArray(feeds[i].aaIndex, axesIndexes) == -1) {
                                binding.binding[bindingIndex] = {};
                                binding.binding[bindingIndex].type = ChartConst.ANALYSIS_AXIS;
                                binding.binding[bindingIndex].index = feeds[i].aaIndex;
                                axesIndexes.push(feeds[i].aaIndex);
                                bindingIndex++;
                            }
                        } else {
                            if ($.inArray(feeds[i].mgIndex, mgIndexes) == -1) {
                                binding.binding[bindingIndex] = {};
                                binding.binding[bindingIndex].type = ChartConst.MEASURE_VALUES_GROUP;
                                binding.binding[bindingIndex].index = feeds[i].mgIndex;
                                mgIndexes.push(feeds[i].mgIndex);
                                bindingIndex++;
                            }
                        }
                    } else if(feedType === FeedItemType.DIMENSION) {
                        binding.binding[bindingIndex] = {};
                        binding.binding[bindingIndex].type = ChartConst.MEASURE_NAMES_DIMENSION;
                        bindingIndex++;
                    }
                }
                dataFeeding.push(binding);
            }
        }
        axesIndexes.sort();
        mgIndexes.sort();
        FakeDataUtils._fillAxesHoles(dataFeeding, axesIndexes);
        FakeDataUtils._fillMgHoles(dataFeeding, mgIndexes);
        return dataFeeding;
    };
    /**
     * Add comments
     */
    FakeDataUtils._fillAxesHoles = function(dataFeeding, axesIndexes) {
        var j, diff;
        if(axesIndexes.length > 0) {
            diff = axesIndexes[0] - 1;
            if(diff > 0) {
                for(var j = 0; j < dataFeeding.length; j++) {
                    for(var k = 0; k < dataFeeding[j].binding.length; k++) {
                        if(dataFeeding[j].binding[k].type == ChartConst.ANALYSIS_AXIS && dataFeeding[j].binding[k].index != null && dataFeeding[j].binding[k].index > 1) {
                            dataFeeding[j].binding[k].index -= diff;
                        }
                    }
                }
                for(j = 0; j < axesIndexes.length; j++) {
                    axesIndexes[j] -= diff;
                }
            }
        }
        for(var i = 0; i < axesIndexes.length - 1; i++) {
            diff = axesIndexes[i + 1] - axesIndexes[i] - 1;
            if(diff > 0) {
                for(j = 0; j < dataFeeding.length; j++) {
                    for(var k = 0; k < dataFeeding[j].binding.length; k++) {
                        if(dataFeeding[j].binding[k].type == ChartConst.ANALYSIS_AXIS && dataFeeding[j].binding[k].index != null && dataFeeding[j].binding[k].index > axesIndexes[i]) {
                            dataFeeding[j].binding[k].index -= diff;
                        }
                    }
                }
                for(j = i + 1; j < axesIndexes.length; j++) {
                    axesIndexes[j] -= diff;
                }
            }
        }
    };
    FakeDataUtils._fillMgHoles = function(dataFeeding, mgIndexes) {
        var j;
        if(mgIndexes.length > 0) {
            var diff = mgIndexes[0] - 1;
            if(diff > 0) {
                for(j = 0; j < dataFeeding.length; j++) {
                    if(dataFeeding[j].binding[0].type == ChartConst.MEASURE_VALUES_GROUP && dataFeeding[j].binding[0].index != null && dataFeeding[j].binding[0].index > 1) {
                        dataFeeding[j].binding[0].index -= diff;
                    }
                }
                for(j = 0; j < mgIndexes.length; j++) {
                    mgIndexes[j] -= diff;
                }
            }
        }
        for(var i = 0; i < mgIndexes.length - 1; i++) {
            var diff = mgIndexes[i + 1] - mgIndexes[i] - 1;
            if(diff > 0) {
                for(j = 0; j < dataFeeding.length; j++) {
                    if(dataFeeding[j].binding[0].type == ChartConst.MEASURE_VALUES_GROUP && dataFeeding[j].binding[0].index != null && dataFeeding[j].binding[0].index > mgIndexes[i]) {
                        dataFeeding[j].binding[0].index -= diff;
                    }
                }
                for(j = i + 1; j < mgIndexes.length; j++) {
                    mgIndexes[j] -= diff;
                }
            }
        }
    };
    FakeDataUtils._getMNDfeed = function(feeds, feed) {
        if(!feed)
            return;
        var mndFeed = {
            priority : -1
        };

        for(var i = 0; i < feeds.length; i++) {
            var fId = feeds[i].id;
            var feeding = feeds[i];
            var acceptMND = Utils.isNumber(feeding.acceptMND) ? Number(feeding.acceptMND) : -1;
            var found = false;
            for(var j = 0; j < feed.length; j++) {
                if(feed[j].feedId == fId) {
                    if(feed[j].binding.length>0){
                        for(var k = 0; k < feed[j].binding.length; k++) {
                            if(feed[j].binding[k].type == ChartConst.MEASURE_NAMES_DIMENSION) {
                                return fId;
                            }
                        }
                    }
                    if(feed[j].binding.length < feeding.min) {
                        if(acceptMND > mndFeed.priority) {
                            mndFeed = {
                                feedId : fId,
                                priority : feeding.acceptMND
                            };
                        }
                    }
                    found = true;
                    break;
                }
            }
            if(!found) {
                if(feeding.min > 0 && acceptMND >= 0) {
                    mndFeed = {
                        feedId : fId,
                        priority : feeding.acceptMND
                    };
                }
            }
        }
        return mndFeed.feedId;
    };
    /**
     * Check whether feeding's binding object's index over dataset's analysis' length
     */
    FakeDataUtils._validateInput = function(feeding, dataset) {
        var aaLength = 0;
        if(dataset && dataset.analysisAxis) {
            aaLength = dataset.analysisAxis.length;
        }
        var mgLength = 0;
        if(dataset && dataset.measureValuesGroup) {
            mgLength = dataset.measureValuesGroup.length;
        }
        for(var i = 0; i < feeding.length; i++) {
            var feed = feeding[i];
            if(feed.binding) {
                for(var j = 0; j < feed.binding.length; j++) {
                    var index = feed.binding[j].index;
                    var type = feed.binding[j].type;
                    if( type == ChartConst.ANALYSIS_AXIS && (index > aaLength)) {
                        return false;
                    } else if( type == ChartConst.MEASURE_VALUES_GROUP && (index > mgLength)) {
                        return false;
                    }
                }
            }
        }
        return true;
    };
    FakeDataUtils._buildFake = function(vizType, rivFeeding, rawDataSet) {
        // return empty dataset and the current feeding if rawDataSet and rivFeeding are not compitable
        if(!FakeDataUtils._validateInput(rivFeeding, rawDataSet))
        {
            rawDataSet.analysisAxis = [];
            rawDataSet.measureValuesGroup = [];
            return {
                "feeding" : rivFeeding,
                "dataset" : rawDataSet
            };
        }
        var chart = sap.viz.api.manifest.Viz;
        var chartConfig = chart.get(vizType)[0];
        var feeds = chartConfig.allFeeds();
        var chartType = chartConfig.id;

        var mndFeed = FakeDataUtils._getMNDfeed(feeds, rivFeeding);

        var fakeAxesToBeBuilt = [];
        var fakeMeasuresToBeBuilt = [];
        var i, j;
        for(i = 0; i < feeds.length; i++) {
            if(feeds[i].id == mndFeed) {
                continue;
            }
            // get dimension and measure info of need to build fake
            var fakeToBeBuilt = FakeDataUtils._getFakeToBeBuilt(feeds[i], rivFeeding, rawDataSet);
            if(fakeToBeBuilt.nb > 0) {
                if(fakeToBeBuilt.axisIndex != null) {
                    fakeAxesToBeBuilt.push(fakeToBeBuilt);
                } else if(fakeToBeBuilt.mgIndex != null) {
                    fakeMeasuresToBeBuilt.push(fakeToBeBuilt);
                }
            }

        }

        if(rawDataSet.analysisAxis == null) {
            rawDataSet.analysisAxis = [];
        }

        // update rawDataSet's analysisAxis according to dimension build fake info
        for(i = 0; i < fakeAxesToBeBuilt.length; i++) {
            var fakeAxisToBeBuilt = fakeAxesToBeBuilt[i];
            var axis = null;
            for(var j = 0; j < rawDataSet.analysisAxis.length; j++) {
                if(rawDataSet.analysisAxis[j].index == fakeAxisToBeBuilt.axisIndex) {
                    axis = rawDataSet.analysisAxis[j];
                }
            }
            if(axis == null) {
                axis = {};
                axis.data = [];
                axis.index = fakeAxisToBeBuilt.axisIndex;
                rawDataSet.analysisAxis.push(axis);
            }
            var axisItem = {};
            axisItem.type = FeedItemType.DIMENSION;
            axisItem.name = LangManager.get('VIZ_COMMON_FAKE_DIMENSION');
            axisItem.isFake = true;

            var hasAllNecessaryValue = false;
            for(j = 0; j < rawDataSet.analysisAxis.length; j++) {
                if(rawDataSet.analysisAxis[j].data[0] != null && rawDataSet.analysisAxis[j].data[0].values.length > 0) {
                    hasAllNecessaryValue = true;
                } else {
                    hasAllNecessaryValue = false;
                }
            }

            if(hasAllNecessaryValue || i > 0) {
                if(chartType === ChartConst.TYPE_TREE || chartType === ChartConst.TYPE_NETWORK) {
                    axisItem.values = FakeDataUtils._buildFakeDimensionValues(axis.data[0].values.length);
                } else {
                    axisItem.values = FakeDataUtils._buildFakeDimensionValues(1);
                }
            } else {
                var nbMeasureValues = 10;
                if(rawDataSet.measureValuesGroup != null && rawDataSet.measureValuesGroup[0] != null) {
                    nbMeasureValues = rawDataSet.measureValuesGroup[0].data[0].values.length;
                }
                axisItem.values = FakeDataUtils._buildFakeDimensionValues(nbMeasureValues);
                if(FakeDataUtils._isGeoOrNor(vizType)) {
                    axisItem.infos =FakeDataUtils._buildFakeGeoInfos(nbMeasureValues);
                }
            }

            axis.data.push(axisItem);
        }

        if(rawDataSet.measureValuesGroup == null) {
            rawDataSet.measureValuesGroup = [];
        }

        var needSwapMeasure = FakeDataUtils._sortAxes(feeds, rawDataSet, rivFeeding);
        if(needSwapMeasure) {
            FakeDataUtils._swapMeasure(rawDataSet);
        }

        // update rawDataSet's measureValuesGroup according to measure build fake info
        for(i = 0; i < fakeMeasuresToBeBuilt.length; i++) {
            var fakeMeasureToBeBuilt = fakeMeasuresToBeBuilt[i];
            var mg = null;
            for(j = 0; j < rawDataSet.measureValuesGroup.length; j++) {
                if(rawDataSet.measureValuesGroup[j].index == fakeMeasureToBeBuilt.mgIndex) {
                    mg = rawDataSet.measureValuesGroup[j];
                }
            }
            if(mg == null) {
                mg = {};
                mg.data = [];
                mg.index = fakeMeasureToBeBuilt.mgIndex;
                rawDataSet.measureValuesGroup.push(mg);
            }

            for (var k = 0; k < fakeMeasureToBeBuilt.nb; k++) {
                var mgItem = {};
                mgItem.type = FeedItemType.MEASURE;
                mgItem.name = LangManager.get('VIZ_COMMON_FAKE_MEASURE') + (i+k+1);
                mgItem.isFake = true;

                var axisSizes = [];
                for (j = rawDataSet.analysisAxis.length - 1; j >= 0; j--) {
                    axisSizes.push(rawDataSet.analysisAxis[j].data[0].values.length);
                }
                if (axisSizes.length === 0) {
                    axisSizes = [1];
                }
                var values = FakeDataUtils._buildFakeMeasureValues(axisSizes);
                if (!Array.isArray(values[0])) {
                    values = [values];
                }
                mgItem.values = values;

                mg.data.push(mgItem);
            }

        }

        return {
            "feeding" : rivFeeding,
            "dataset" : rawDataSet
        };
    };
    /**
     * Update rawDataSet's analysisAxis array's sequence and feeding's aaIndex according to cvom feed defination,
     * called only when vizType is 'viz/heatmap', for heatmap, the aaIndex of data's analysis and feeding should
     * be the same as cvom
     */
    FakeDataUtils._sortAxes = function(feeds, rawDataSet, rivFeeding) {
        var aaPriorityMap = {};
        if(rawDataSet.analysisAxis.length > 1) {
            //sort axes according to the index of corresponding feed in viz manifest
            for(var i = 0; i < feeds.length; i++) {
                var feed = feeds[i];
                if(feed.type === FeedItemType.DIMENSION) {
                    for(var j = 0; j < rivFeeding.length; j++) {
                        if(rivFeeding[j].feedId === feed.id) {
                            var aaIndex = feed.aaIndex;
                            var binding = rivFeeding[j].binding;
                            for(var m = 0; m<binding.length; m++)
                            {
                                if(binding[m] && binding[m].type == ChartConst.ANALYSIS_AXIS) {
                                    var bindingIndex = binding[m].index;
                                    for(var n = 0; n < rawDataSet.analysisAxis.length; n++) {
                                        if(rawDataSet.analysisAxis[n].index === bindingIndex) {
                                            aaPriorityMap[n] = aaIndex;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        var needSwapMeasure = false;
        for(var i = 0; i < rawDataSet.analysisAxis.length; i++)
        {
            for(var j = rawDataSet.analysisAxis.length-1; j >= i+1; j--)
            {
                if(aaPriorityMap[j]<aaPriorityMap[j-1])
                {
                    var aa = rawDataSet.analysisAxis[j];
                    rawDataSet.analysisAxis[j] = rawDataSet.analysisAxis[j-1];
                    rawDataSet.analysisAxis[j-1] = aa;
                    //when axes are sorted, measuregroup array should also be swapped.
                    needSwapMeasure = true;
                }
            }
        }
        var clonedFeeding = Utils.clone(rivFeeding);
        for(var i = 0; i < rawDataSet.analysisAxis.length; i++)
        {
            var aa = rawDataSet.analysisAxis[i];
            var aaIndex = i+1;
            for(var j = 0; j < clonedFeeding.length; j++) 
            {
                var binding = clonedFeeding[j].binding;
                for(var k = 0; k<binding.length; k++)
                {
                    if(binding[k] && binding[k].type == ChartConst.ANALYSIS_AXIS && binding[k].index == aa.index) {
                        rivFeeding[j].binding[k].index = aaIndex;
                    }
                }
            }
            aa.index = aaIndex;
        }
        return needSwapMeasure;
    };
    /**
     * Update rawDataSet's measureValuesGroup array's data array's sequence
     */
    FakeDataUtils._swapMeasure = function(rawDataSet)
    {
        var measureGroup = rawDataSet.measureValuesGroup;
        if(measureGroup)
        {
            for(var m = 0; m < measureGroup.length; m++) {
                var dataGroup = measureGroup[m].data;
                if(dataGroup)
                {
                    for(var n = 0; n < dataGroup.length; n++)
                    {
                        var data = dataGroup[n];
                        var l1 = data.values.length;
                        var l2 = data.values[0].length;
                        var newValues = new Array(l2);
                        for(var j = 0; j < l2; j++) {
                            newValues[j] = new Array(l1);
                        }
                        for(var i = 0; i < l1; i++) {
                            for(var j = 0; j < l2; j++) {
                                newValues[j][i] = data.values[i][j];
                            }
                        }
                        data.values = newValues;
                    }
                }
            }
        }
    };
    /**
     * Check whether the current feed's need to build fake data and update its aaIndex
     */
    FakeDataUtils._getFakeToBeBuilt = function(feed, rivFeeding, rawDataSet) {
        var feedMin = feed.min;
        if(feed.id === "treeNode" || feed.id === "link") {
            feedMin = feed.minStackedDims;
        }
        if(feedMin == 0) {
            return {
                "nb" : 0
            };
        }
        var nbFeeding = 0;
        var i, j, k;
        //get nbFakeToBeBuilt according to rawDataSet
        for(i = 0; i < rivFeeding.length; i++) {
            var axisIndex = null;
            var mgIndex = null;
            if(feed.id == rivFeeding[i].feedId) {
                if(feed.type == FeedItemType.DIMENSION) {
                    var bindings = rivFeeding[i].binding;
                    for(k = 0; k < bindings.length; k++) {
                        if(bindings[k].index) {
                            axisIndex = bindings[k].index;
                        }
                    }
		    //the current feeding is not mnd
                    if (axisIndex !== null) {
                        // don't build fake data for empty chartDataSet
                        if (!rawDataSet.analysisAxis.length) {
                            return {
                                "nb" : 0,
                                "axisIndex" : axisIndex
                            };
                        } else {
                            for(j = 0; j < rawDataSet.analysisAxis.length; j++) {
                                if(rawDataSet.analysisAxis[j].index == axisIndex) {
                                    nbFeeding = rawDataSet.analysisAxis[j].data.length;
                                    var nbFakeToBeBuilt = feedMin - nbFeeding;
                                    if(nbFakeToBeBuilt < 0) {
                                        nbFakeToBeBuilt = 0;
                                    }
                                    return {
                                        "nb" : nbFakeToBeBuilt,
                                        "axisIndex" : axisIndex
                                    };
                                }
                            }
                        }
                    } else {//the current feeding has only mnd
            		    return {
                            "nb" : 0
                        };
        		    }

                } else if(feed.type == FeedItemType.MEASURE) {
                    mgIndex = rivFeeding[i].binding[0].index;
                    for(j = 0; j < rawDataSet.measureValuesGroup.length; j++) {
                        if(rawDataSet.measureValuesGroup[j].index == mgIndex) {
                            nbFeeding = rawDataSet.measureValuesGroup[j].data.length;
                            var nbFakeToBeBuilt = feedMin - nbFeeding;
                            if(nbFakeToBeBuilt < 0) {
                                nbFakeToBeBuilt = 0;
                            }
                            return {
                                "nb" : nbFakeToBeBuilt,
                                "mgIndex" : mgIndex
                            };
                        }
                    }
                    // don't build fake data for empty chartDataSet
                    return {
                        "nb" : 0,
                        "mgIndex" : mgIndex
                    };
                }
            }
        }
        //get infos if not found data of this feed in rawDataSet,
        //it means need to build an empty feeding info for the current feed
        if(feed.type == FeedItemType.DIMENSION) {
            var newAxisIndex = 1;
            for(i = 0; i < rivFeeding.length; i++) {
                for(k = 0; k < rivFeeding[i].binding.length; k++) {
                    if(rivFeeding[i].binding[k].type == ChartConst.ANALYSIS_AXIS && rivFeeding[i].binding[k].index >= newAxisIndex) {
                        //if rivFeeding has already an unempty binding, then aaIndex should add 1
                        newAxisIndex = rivFeeding[i].binding[k].index + 1;
                    }
                }
            }
            var binding = {};
            binding.feedId = feed.id;
            binding.binding = [];
            binding.binding[0] = {};
            binding.binding[0].type = ChartConst.ANALYSIS_AXIS;
            binding.binding[0].index = newAxisIndex;
            rivFeeding.push(binding);
            return {
                "nb" : feedMin,
                "axisIndex" : newAxisIndex
            };
        } else if(feed.type == FeedItemType.MEASURE) {
            var newMgIndex = 1;
            for(i = 0; i < rivFeeding.length; i++) {
                if(rivFeeding[i].binding[0].type == ChartConst.MEASURE_VALUES_GROUP && rivFeeding[i].binding[0].index >= newMgIndex) {
                    newMgIndex = rivFeeding[i].binding[0].index + 1;
                }
            }
            var binding = {};
            binding.feedId = feed.id;
            binding.binding = [];
            binding.binding[0] = {};
            binding.binding[0].type = ChartConst.MEASURE_VALUES_GROUP;
            binding.binding[0].index = newMgIndex;
            rivFeeding.push(binding);
            return {
                "nb" : feedMin,
                "mgIndex" : newMgIndex
            };
        }
        return null;
    };
    FakeDataUtils._buildFakeMeasureValues = function(axisSizes) {
        var values = [];
        var currentAxisSize = axisSizes[0];
        var i = 0;
        if(axisSizes.length == 1) {
            for(i = 0; i < currentAxisSize; i++) {
                values[i] = Math.round(Math.random() * 100);
            }
        } else {
            axisSizes.shift();
            for(i = 0; i < currentAxisSize; i++) {
                values[i] = FakeDataUtils._buildFakeMeasureValues(axisSizes);
            }
        }
        return values;
    };
    FakeDataUtils._buildFakeDimensionValues = function(nbValues) {
        var dimensionValues = [];
        for(var i = 0; i < nbValues; i++) {
            dimensionValues[i] = i.toString();
        }
        return dimensionValues;
    };
    FakeDataUtils._buildFakeGeoInfos = function(nbValues) {
        var fakeGeoInfos = [];
        for(var i = 0; i < nbValues; i++) {
            fakeGeoInfos[i] = '';
        }
        return fakeGeoInfos;
    };
    FakeDataUtils._isGeoOrNor = function(type) {
        if(type.search('geo') == -1 && type.search('choropleth') == -1) {
            return false;
        } else {
            return true;
        }
    };
    return FakeDataUtils;
});
define('sap/viz/controls/common/utils/InfoChartUtil',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils'
], function($, AnalyticalType, utils, VizUtils){
// @formatter:on

    // supported chart type dictionary, internal use only
    var CHART_TYPES = {
        'line': 1,
        'column': 1,
        'bar': 1,
        'donut': 1,
        'horizontal_line': 1
        // 'stacked_column': 1,
        // 'stacked_bar': 1,
        // '100_stacked_column': 1,
        // '100_stacked_bar': 1
    };

    var InfoChartUtil = {
        getInfoType: function(vizType) {
            var match = String(vizType).match(/^viz\/(.*)$/);

            if (match && CHART_TYPES[match[1]]) {
                var infoType = "info/" + match[1];
                var manifest = sap.viz.api.manifest.Viz.get(infoType);

                if (manifest && manifest[0]) {
                    return infoType;
                }
            }
            return null;
        },

        isInfoChart: function(type) {
            return (/^info\/\w+$/).test(type);
        },

        getVizType: function(infoType) {
            return this.isInfoChart(infoType) ? infoType.replace('info/', 'viz/') : null;
        },

        buildInfoDataset: function(ctbDataset) {
            // translate from cross table dataset into flat table dataset
            var data = sap.viz.data.utils.CTB2TBConvertUtil.crossTable2FlatTableData(ctbDataset);
            return new sap.viz.api.data.FlatTableDataset(data);
        },

        buildInfoFeeding: function(feeds, adjustMND) {
            // traslate FeedItem array into a mapping from feed id to AnalysisObject name array.
            var infoFeeds = {};
            for(var i = 0; i < feeds.length; i++) {
                var feed = feeds[i];
                var values = feed.values() || [];
                var list = infoFeeds[feed.id()] = [];

                for(var j = 0; j < values.length; j++) {
                    var aaObj = values[j];
                    if(aaObj.type() === AnalyticalType.MND) {
                        if(adjustMND) {
                            list.unshift("MeasureNamesDimension");
                        } else {
                            list.push("MeasureNamesDimension");
                        }
                    } else {
                        if(aaObj.type() === AnalyticalType.HIERARCHY) {
                            for(var k = 0; k < aaObj.hierarchyLevels().length; k++) {
                                var level = aaObj.hierarchyLevels()[k];
                                // use hierarchy level object id, in case its
                                // analysis object is also used in another
                                // hierarchy level object, but with a
                                // different hierarchy level name.
                                list.push(level.id());
                                if(level.selected()) {
                                    break;
                                }
                            }
                        } else {
                            list.push(aaObj.id());
                        }
                    }
                }
            }

            return infoFeeds;
        },

        buildInfoProperties: function(vizType, vizProperties) {
            var infoProperties = $.extend(true, {}, vizProperties);

            // InfoChart has renamed xAxis/yAxis to categoryAxis/valueAxis
            var categoryAxisArray = VizUtils.getCategoryAxis(vizType);
            if (categoryAxisArray && categoryAxisArray.length) {
                // primary axis
                renameProperty(infoProperties, categoryAxisArray[0], 'categoryAxis');
                // secondary axis
                if (categoryAxisArray.length > 1) {
                    renameProperty(infoProperties, categoryAxisArray[1], 'categoryAxis2');
                }
            }

            var valueAxisArray = VizUtils.getValueAxis(vizType);
            if (valueAxisArray && valueAxisArray.length) {
                // primary axis
                renameProperty(infoProperties, valueAxisArray[0], 'valueAxis');
                // secondary axis
                if (valueAxisArray.length > 1) {
                    renameProperty(infoProperties, valueAxisArray[1], 'valueAxis2');
                }
            }

            // dataLabel
            moveProperty(infoProperties, 'dataLabel', 'plotArea.dataLabel');

            // background
            moveProperty(infoProperties, 'background', 'plotArea.background');

            // background.color
            moveProperty(infoProperties, 'plotArea.background.body.color', 'plotArea.background.color');

            // .scale
            moveProperty(infoProperties, 'valueAxis.scale', 'plotArea.primaryScale');
            moveProperty(infoProperties, 'valueAxis2.scale', 'plotArea.secondaryScale');

            // .gridline
            // [FIXME] gridlines from 2 axes are conflicting with each other?
            moveProperty(infoProperties, 'valueAxis2.gridline', 'plotArea.gridline');
            moveProperty(infoProperties, 'valueAxis.gridline', 'plotArea.gridline');

            // .axisline => .axisLine
            renameProperty(infoProperties.valueAxis, 'axisline', 'axisLine');
            renameProperty(infoProperties.valueAxis2, 'axisline', 'axisLine');
            renameProperty(infoProperties.categoryAxis, 'axisline', 'axisLine');
            renameProperty(infoProperties.categoryAxis2, 'axisline', 'axisLine');

            // .lineSize => .axisLine.size
            moveProperty(infoProperties, 'valueAxis.lineSize', 'valueAxis.axisLine.size');
            moveProperty(infoProperties, 'valueAxis2.lineSize', 'valueAxis2.axisLine.size');
            moveProperty(infoProperties, 'categoryAxis.lineSize', 'categoryAxis.axisLine.size');
            moveProperty(infoProperties, 'categoryAxis2.lineSize', 'categoryAxis2.axisLine.size');

            //formatString
            updateFormatString(infoProperties, 'valueAxis.label.formatString');
            updateFormatString(infoProperties, 'valueAxis2.label.formatString');
            updateFormatString(infoProperties, 'plotArea.dataLabel.formatString');
            updateFormatString(infoProperties, 'tooltip.formatString');

            return infoProperties;
        },

        buildInfoSeries: function(feedingItem, dataset) {
            var regionColorNames = feedingItem['regionColor'];
            var seriesItemsMap = new Object, seriesNames = [];
            var item, valuedData, seriesName, seriesData, seriesItem;

            if (!regionColorNames || regionColorNames.length === 0) {
                return null;
            }
            var axisLables = feedingItem['axisLabels'];
            var measureNames = feedingItem['primaryValues'];
            var measureValued = false;
            if (regionColorNames.indexOf('MeasureNamesDimension') >= 0) {
                regionColorNames.splice(regionColorNames.indexOf('MeasureNamesDimension'), 1);
                measureValued = true;
            }

            if (regionColorNames.length <= 0) {
                var measureName;
                measureNames.forEach(function(measureName) {
                    for (i = 0; i < dataset.length; i++) {
                        item = dataset[i];
                        if (item[measureName] != null) {
                            seriesItem = new Object;
                            seriesItem['name'] = measureName;
                            seriesData = new Object;
                            seriesData['MeasureNamesDimension'] = measureName;
                            seriesItem['seriesData'] = seriesData;
                            seriesItemsMap[measureName] = seriesItem;
                            break;
                        }
                    }

                });
                return seriesItemsMap;
            }

            for (i = 0; i < dataset.length; i++) {
                item = dataset[i];
                valuedData = false;
                for (j = 0; j < measureNames.length; j++) {
                    if (item[measureNames[j]] != null) {
                        valuedData = true;
                        break;
                    }
                }
                if (valuedData) {
                    seriesName = item[regionColorNames[0]];
                    seriesData = new Object;
                    seriesItem = new Object;
                    seriesData[regionColorNames[0]] = item[regionColorNames[0]];
                    for (j = 1; j < regionColorNames.length; j++) {
                        seriesName = seriesName + " / " + item[regionColorNames[j]];
                        seriesData[regionColorNames[j]] = item[regionColorNames[j]];
                    }
                    if (measureValued) {
                        var seriesN, seriesD;
                        for (j = 0; j < measureNames.length; j++) {
                            if (!item.hasOwnProperty(measureNames[j])) {
                                continue;
                            }
                            seriesN = seriesName + " / " + measureNames[j];
                            if (seriesN && seriesNames.indexOf(seriesN) < 0) {
                                seriesNames.push(seriesN);
                                seriesD = utils.clone(seriesData);
                                seriesD[measureNames[j]] = item[measureNames[j]];
                                seriesItem = new Object;
                                seriesItem['name'] = seriesN;
                                seriesItem['seriesData'] = seriesD;
                                seriesItemsMap[seriesN] = seriesItem;
                            }
                        }
                    } else if (seriesName && seriesNames.indexOf(seriesName) < 0) {
                        seriesNames.push(seriesName);
                        seriesItem['name'] = seriesName;
                        seriesItem['seriesData'] = seriesData;
                        seriesItemsMap[seriesName] = seriesItem;
                    }
                }
            }
            return seriesItemsMap;
        }
     };

    // utility functions
    function getPath(context, path) {
        return path ? path.split('.').reduce(function(obj, partName) {
            return obj && typeof obj == 'object' ? obj[partName] : null;
        }, context) : context;
    }
    function setPath(context, path, value) {
        path.split('.').reduce(function(obj, partName, index, parts) {
            if(index < parts.length - 1){
                obj[partName] = obj[partName] != null ? obj[partName] : {};
            }else{
                obj[partName] = value;
            }
            return obj[partName];
        }, context);
    }
    function moveProperty(context, sourcePath, targetPath, reserveSource) {
        var v = getPath(context, sourcePath);
        if (v != null) {
            if (!reserveSource) {
                var parts = sourcePath.split('.');
                var prop = parts.pop();
                var parentPath = parts.join('.');
                delete getPath(context, parentPath)[prop];
            }
            setPath(context, targetPath, v);
        }
    }
    function renameProperty(context, oldProp, newProp) {
        if (context && oldProp in context) {
            context[newProp] = context[oldProp];
            delete context[oldProp];
        }
    }

    /**
     * Convert formatString from 2D array to string.
     */
    function updateFormatString(context, formatStringProp){
        var formatStringValue = getPath(context, formatStringProp);
        if(!formatStringValue){
            return;
        }
        if(utils.isString(formatStringValue)){
            return;
        }
        if(utils.isArray(formatStringValue) && utils.isArray(formatStringValue[0]) && utils.isString(formatStringValue[0][0])){
            setPath(context, formatStringProp, formatStringValue[0][0]);
        }
    }

    return InfoChartUtil;
});

define('sap/viz/controls/common/utils/TrellisUtils',[
// @formatter:off
    'sap/viz/controls/common/constants/ChartConst'
],
function(ChartConst){
// @formatter:on
    var typeProvider = {};
    var TrellisUtils = {};
    
    TrellisUtils.TRELLIS ='trellis';
    TrellisUtils.MULTIPLE ='multi';
    
    TrellisUtils._register = function(provider, type){
        if(type){
            typeProvider[type] = provider;
        }else{
            typeProvider['_default'] = provider;
        }
    };
    
    TrellisUtils._getProvider = function(type){
        var provider = typeProvider[type];
        if(!provider){
            provider = typeProvider['_default'];
        }
        return provider;
    };
    
    TrellisUtils.providerName = function(type) {
        var provider = TrellisUtils._getProvider(type);
        return provider.name;
    };
    
    TrellisUtils.isMultipleChart = function(type) {
        if (!type) {
            return false;
        }
        
        var provider = TrellisUtils._getProvider(type);
        return provider.isMultipleChart(type);
    };
    
    /**
     * Check whether type is multi chart or can be converted to multi chart
     * @param {String} type
     * @returns {Boolean}
     */
    TrellisUtils.supportMultiChart = function(type) {
        if (!type) {
            return false;
        }
        
        var provider = TrellisUtils._getProvider(type);
        return provider.supportMultiChart(type);
    };
    
    TrellisUtils.toSingleChartType = function(type) {
        if (!type) {
            return type;
        }
        
        var provider = TrellisUtils._getProvider(type);
        return provider.toSingleChartType(type);
    };
    
    TrellisUtils.toMultiChartType = function(type){
        if (!type) {
            return type;
        }
        
        var provider = TrellisUtils._getProvider(type);
        if (provider.isMultipleChart(type)) {
            return type;
        }else{
            return provider.toMultiChartType(type);
        }
    };
    
    function createProvider(name){
        var vizPrefix = 'viz/'+name+'_';
        var provider = { name : name};
        provider.isMultipleChart = function(type){
            if (!type) {
                return false;
            }
            return (type.indexOf(vizPrefix) === 0);
        };
        provider.supportMultiChart = function(type){
            if (type.indexOf(vizPrefix) === 0) {
                return true;
            }
            //already check vizType can be converted to multi chart in method toMultiChartType
            //if vizType can not be converted then multiType equal vizType
            var multiType = provider.toMultiChartType(type);
            if (multiType !== type) {
                return true;
            } else {
                return false;
            }
        };
        provider.toSingleChartType = function(type){
            if (provider.isMultipleChart(type)) {
                return type.replace(vizPrefix, 'viz/');
            }
            return type;
        };
        provider.toMultiChartType = function(type){
            var multiType = type.replace('viz/', vizPrefix);
            if (sap.viz.api.manifest.Viz.get(multiType)[0]) {
                return multiType;
            }
            return type;
        };
        return provider;
    }
    
    TrellisUtils._register( createProvider(TrellisUtils.MULTIPLE) );
    //var trellisProvider =  createProvider(TrellisUtils.TRELLIS);
    //var columID = ChartConst.TYPE_COLUMN;
    //TrellisUtils._register(trellisProvider ,columID );
    //TrellisUtils._register(trellisProvider ,trellisProvider.toMultiChartType(columID) );
    
    return TrellisUtils;
}
);

define('sap/viz/controls/common/utils/ChartTypeUtil',[
// @formatter:off
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/utils/TrellisUtils'],
function(ChartConst, DatasetTypeConst, LangManager, InfoChartUtil, TrellisUtils) {
// @formatter:on

    var ChartTypeUtil = {};

    /**
     * set map for chartType ,vizType ,vizDirection and vizStacking
     */
    ChartTypeUtil._CVOM_TYPE_MAPPING = function() {
        var mapping = {};

        /**
         * @param chartType type in CVOM context
         * @param vizType type in viz control context
         */
        var add = function(chartType, vizType, vizDirection, vizStacking) {
            var p = {
                vizType : vizType
            };
            if (vizDirection) {
                p.vizDirection = vizDirection;
            }
            if (vizStacking) {
                p.vizStacking = vizStacking;
            }
            mapping[chartType] = p;
            // Also init for info chart
            chartType = InfoChartUtil.getInfoType(chartType);
            if (chartType) {
                mapping[chartType] = p;
            }
        };

        // @formatter:off
        add(ChartConst.TYPE_STACKED_BAR,
            ChartConst.TYPE_STACKED_BAR, null, ChartConst.STACKING_NORMAL);
        add(ChartConst.TYPE_100_STACKED_BAR,
            ChartConst.TYPE_STACKED_BAR, null, ChartConst.STACKING_FULL);
        add(ChartConst.TYPE_STACKED_COLUMN,
            ChartConst.TYPE_STACKED_COLUMN, null, ChartConst.STACKING_NORMAL);
        add(ChartConst.TYPE_100_STACKED_COLUMN,
            ChartConst.TYPE_STACKED_COLUMN, null, ChartConst.STACKING_FULL);

        add(ChartConst.TYPE_3D_BAR,
            ChartConst.TYPE_3D_COLUMN, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_3D_COLUMN,
            ChartConst.TYPE_3D_COLUMN, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_HORIZONTAL_LINE,
            ChartConst.TYPE_LINE, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_LINE,
            ChartConst.TYPE_LINE, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_HORIZONTAL_AREA,
            ChartConst.TYPE_AREA, ChartConst.DIRECTION_HORIZONTAL, ChartConst.STACKING_NORMAL);
        add(ChartConst.TYPE_100_HORIZONTAL_AREA,
            ChartConst.TYPE_AREA, ChartConst.DIRECTION_HORIZONTAL, ChartConst.STACKING_FULL);
        add(ChartConst.TYPE_AREA, ChartConst.TYPE_AREA,
            ChartConst.DIRECTION_VERTICAL, ChartConst.STACKING_NORMAL);
        add(ChartConst.TYPE_100_AREA, ChartConst.TYPE_AREA,
            ChartConst.DIRECTION_VERTICAL, ChartConst.STACKING_FULL);

        add(ChartConst.TYPE_HORIZONTAL_COMBINATION,
            ChartConst.TYPE_COMBINATION, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_COMBINATION,
            ChartConst.TYPE_COMBINATION, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_DUAL_HORIZONTAL_LINE,
            ChartConst.TYPE_DUAL_LINE, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_DUAL_LINE,
            ChartConst.TYPE_DUAL_LINE, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_DUAL_HORIZONTAL_COMBINATION,
            ChartConst.TYPE_DUAL_COMBINATION, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_DUAL_COMBINATION,
            ChartConst.TYPE_DUAL_COMBINATION, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_HORIZONTAL_BOXPLOT,
            ChartConst.TYPE_BOXPLOT, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_BOXPLOT,
            ChartConst.TYPE_BOXPLOT, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_HORIZONTAL_WATERFALL,
            ChartConst.TYPE_WATERFALL, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_WATERFALL,
            ChartConst.TYPE_WATERFALL, ChartConst.DIRECTION_VERTICAL);
        // @formatter:on

        return mapping;
    };

    // TODO Globalization
    ChartTypeUtil._VIZ_TYPE_MAPPING = function() {
        var mapping = {};

        var add = function(vizType, icon) {
            var name;
            if (vizType === ChartConst.TYPE_TABLE) {
                name = LangManager.get('VIZ_COMMON_TABLE_TEXT');
            } else if (vizType === ChartConst.TYPE_CROSSTAB) {
                name = LangManager.get('VIZ_COMMON_CROSSTAB_TEXT');
            } else {
                var viz = sap.viz.api.manifest.Viz.get(vizType)[0];
                name = viz ? viz.name : vizType;
            }

            mapping[vizType] = {
                'id' : vizType,
                'caption' : name,
                'icon' : icon,
                'whiteIcon' : icon + '-white',
                'greyIcon' : icon + '-grey'
            };
            // Also init for info chart
            var infoType = InfoChartUtil.getInfoType(vizType);
            if (infoType) {
                mapping[infoType] = mapping[vizType];
            }
        };
        add(ChartConst.TYPE_BAR, 'bar');
        add(ChartConst.TYPE_COLUMN, 'column');
        add(ChartConst.TYPE_STACKED_BAR, 'stacked-bar');
        add(ChartConst.TYPE_STACKED_COLUMN, 'stacked-column');
        add(ChartConst.TYPE_DUAL_BAR, 'dual-bar');
        add(ChartConst.TYPE_DUAL_COLUMN, 'dual-column');
        add(ChartConst.TYPE_3D_COLUMN, '3D-column');
        add(ChartConst.TYPE_LINE, 'line');
        add(ChartConst.TYPE_AREA, 'area');
        add(ChartConst.TYPE_COMBINATION, 'combination');
        add(ChartConst.TYPE_DUAL_LINE, 'dual-line');
        add(ChartConst.TYPE_DUAL_COMBINATION, 'dual-combination');
        add(ChartConst.TYPE_PIE, 'pie');
        add(ChartConst.TYPE_DONUT, 'donut');
        add(ChartConst.TYPE_PIE_WITH_DEPTH, 'pie-with-depth');
        add(ChartConst.TYPE_GEO_BUBBLE, 'geo-bubble');
        add(ChartConst.TYPE_GEO_CHOROPLETH, 'geo-choropleth');
        add(ChartConst.TYPE_GEO_PIE, 'geo-pie');
        add(ChartConst.TYPE_GEO_MAP, 'geo-map');
        add(ChartConst.TYPE_SCATTER, 'scatter');
        add(ChartConst.TYPE_BUBBLE, 'bubble');
        add(ChartConst.TYPE_SCATTER_MATRIX, 'scatter-matrix');
        add(ChartConst.TYPE_HEATMAP, 'heatmap');
        add(ChartConst.TYPE_TREEMAP, 'treemap');
        add(ChartConst.TYPE_TABLE, 'table');
        add(ChartConst.TYPE_CROSSTAB, 'crosstab');
        add(ChartConst.TYPE_RADAR, 'radar');
        add(ChartConst.TYPE_BOXPLOT, 'boxplot');
        add(ChartConst.TYPE_WATERFALL, 'waterfall');
        add(ChartConst.TYPE_TAG_CLOUD, 'tag-cloud');
        add(ChartConst.TYPE_TREE, 'tree');
        add(ChartConst.TYPE_NETWORK, 'network');
        add(ChartConst.TYPE_FUNNEL, 'funnel');
        add(ChartConst.TYPE_PC, 'pc');
        add(ChartConst.TYPE_NUMBER, 'number');
        add('viz/ext/samplesbar', 'viz/ext/samplesbar');
        add('viz/ext/flagbar', 'viz/ext/flagbar');
        return mapping;
    };

    /**
     * @param {String} vizType
     *
     * @return {Object}
     */
    ChartTypeUtil.getVizTypeObject = function(vizType) {
        if (ChartTypeUtil.VIZ_TYPE__MAPPING == null) {
            ChartTypeUtil.VIZ_TYPE__MAPPING = ChartTypeUtil._VIZ_TYPE_MAPPING();
        }
        var typeObject = ChartTypeUtil.VIZ_TYPE__MAPPING[vizType];

        if (typeObject) {
            typeObject = JSON.parse(JSON.stringify(typeObject));
        }
        return typeObject;
    };
    /**
     * get vizType from map according to chartType
     * @param {Object} chartType
     */
    ChartTypeUtil.toVizProperties = function(chartType) {
        if (ChartTypeUtil.CVOM_TYPE_MAPPING == null) {
            ChartTypeUtil.CVOM_TYPE_MAPPING = ChartTypeUtil._CVOM_TYPE_MAPPING();
        }
        var p = ChartTypeUtil.CVOM_TYPE_MAPPING[chartType];
        if (!p) {
            p = {
                vizType : chartType
            };
        }
        return p;
    };
    /**
     * get type from map according to type,vizDirection and vizStacking
     * @param {String} type
     * @param {String} vizDirection
     * @param {String} vizStacking
     */
    ChartTypeUtil.fromVizProperties = function(type, vizDirection, vizStacking) {
        if (!vizDirection && !vizStacking) {
            return type;
        }

        // convert type, e.g. for "viz/horizontal_line", we should change to "viz/line"
        var vizType = ChartTypeUtil.toVizProperties(type).vizType;

        for (var chartType in ChartTypeUtil.CVOM_TYPE_MAPPING) {
            if (ChartTypeUtil.CVOM_TYPE_MAPPING.hasOwnProperty(chartType)) {
                var p = ChartTypeUtil.CVOM_TYPE_MAPPING[chartType];

                if (p.vizType === vizType && (!vizDirection || !p.vizDirection || p.vizDirection === vizDirection) && (!vizStacking || !p.vizStacking || p.vizStacking === vizStacking)) {
                    return chartType;
                }
            }
        }
        return type;
    };
    ChartTypeUtil.updateType = function(type, option) {
        var newType = type;
        if (option.hasOwnProperty("direction")) {
            newType = ChartTypeUtil.changeDirection(newType, option["direction"]);
            option["direction"] = undefined;
        }
        if (option.hasOwnProperty("stacking")) {
            newType = ChartTypeUtil.changeStacking(newType, option["stacking"]);
            option["stacking"] = undefined;
        }
        return newType;
    };
    /**
     * judge type is or not mutipleChart
     * @param {String} type
     * @returns {Boolean}
     */
    ChartTypeUtil.isMultipleChart = function(type) {
        return TrellisUtils.isMultipleChart(type);
    };
    /**
     * Convert viz type to multi chart type.
     * @param {String} vizType
     * @returns {String}
     */
    ChartTypeUtil.toMultiChartType = function(type) {
        return TrellisUtils.toMultiChartType(type);
    };
    /**
     * chage type to chartType.
     * @param {String} vizType
     * @returns {String}
     */
    ChartTypeUtil.toSingleChartType = function(type) {
        return TrellisUtils.toSingleChartType(type);
    };
    /**
     * Check whether vizType is multi chart or can be converted to multi chart
     * @param {String} vizType
     * @returns {Boolean}
     */
    ChartTypeUtil.supportMultiChart = function(vizType) {
        return TrellisUtils.supportMultiChart(vizType);
    };
    /**
     * get Direction by type
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.getDirection = function(type) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var typeProperties = ChartTypeUtil.toVizProperties(chartType);
        if (typeProperties.vizDirection) {
            return typeProperties.vizDirection;
        }
        return null;
    };
    /**
     * get Stacking by type
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.getStacking = function(type) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var typeProperties = ChartTypeUtil.toVizProperties(chartType);
        if (typeProperties.vizStacking) {
            return typeProperties.vizStacking;
        }
        return null;
    };
    /**
     * get new type by changing direction
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.changeDirection = function(type, direction) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var currenDirection = ChartTypeUtil.getDirection(chartType);
        if (currenDirection === direction || !currenDirection) {
            return type;
        }

        var stacking = ChartTypeUtil.getStacking(chartType);
        var newChartType = ChartTypeUtil.fromVizProperties(chartType, direction, stacking);
        if (ChartTypeUtil.isMultipleChart(type)) {
            return ChartTypeUtil.toMultiChartType(newChartType);
        }
        return newChartType;
    };
    /**
     * get new type by changing stacking
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.changeStacking = function(type, stacking) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var currenStacking = ChartTypeUtil.getStacking(chartType);
        if (currenStacking === stacking || !currenStacking) {
            return type;
        }

        var direction = ChartTypeUtil.getDirection(chartType);
        var newChartType = ChartTypeUtil.fromVizProperties(chartType, direction, stacking);
        if (ChartTypeUtil.isMultipleChart(type)) {
            return ChartTypeUtil.toMultiChartType(newChartType);
        }
        return newChartType;
    };
    /**
     * get new type by older chartType properties and vizType
     * @param {String} type
     * @param {String} vizType
     * @returns {String}
     */
    ChartTypeUtil.getType = function(type, vizType) {
        if (!type) {
            return vizType;
        }
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var direction = ChartTypeUtil.getDirection(chartType);
        var stacking = ChartTypeUtil.getStacking(chartType);
        chartType = ChartTypeUtil.fromVizProperties(vizType, direction, stacking);
        if (ChartTypeUtil.isMultipleChart(type)) {
            return ChartTypeUtil.toMultiChartType(chartType);

        }
        return chartType;
    };
    /**
     * get vizType by type
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.getVizType = function(type) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        return ChartTypeUtil.toVizProperties(chartType).vizType;
    };
    /**
     * Get dataset type.
     * @param {String} type
     * @returns {String} dataset type
     */
    ChartTypeUtil.getDatasetType = function(type) {
        if (ChartTypeUtil.isGeo(type) || InfoChartUtil.isInfoChart(type)) {
            return DatasetTypeConst.FlatTableDataset;
        } else if (ChartTypeUtil.isTable(type)) {
            return DatasetTypeConst.RawDataset;
        } else {
            return DatasetTypeConst.CrosstableDataset;
        }
    };
    /**
     * judge type is Table
     * @param {String} type
     * @returns {Boolean}
     */
    ChartTypeUtil.isTable = function(type) {
        return (type === ChartConst.TYPE_TABLE || type === ChartConst.TYPE_CROSSTAB);
    };

    /**
     * judge type is Geo
     * @param {String} type
     * @returns {Boolean}
     */
    ChartTypeUtil.isGeo = function(type) {
        return (type === ChartConst.TYPE_GEO_MAP);
    };

    ChartTypeUtil.isInfoChart = function(type) {
        if (type && type.indexOf("info/") == 0) {
            return true;
        }
        return false;
    };

    /**
     * judge type is support title
     * @param {String} type
     * @returns {Boolean}
     */
    ChartTypeUtil.supportTitle = function(type) {
        // new geo map and table not support title.
        if (ChartTypeUtil.isGeo(type)) {
            return false;
        } else {
            return true;
        }
    };

    ChartTypeUtil.isBuildInType = function(type) {
        var manifest = sap.viz.api.manifest.Viz.get(type)[0] || {};
        return !!manifest.isBuiltIn;
    };

    ChartTypeUtil.supportAnimation = function(type) {
        return type === ChartConst.TYPE_GEO_BUBBLE || type === ChartConst.TYPE_BUBBLE || type === ChartConst.TYPE_SCATTER;
    };

    /**
     * Check if the data is empty.
     */
    ChartTypeUtil.isEmptyData = function(type, data) {
        var datasetType = ChartTypeUtil.getDatasetType(type);
        if (datasetType === DatasetTypeConst.RawDataset) {
            return false;
        } else if (datasetType === DatasetTypeConst.FlatTableDataset) {
            return false;
        } else {
            var analysisAxis = data ? (data.data() ? data.data().analysisAxis : null) : null;
            var measureValuesGroup = data ? (data.data() ? data.data().measureValuesGroup : null) : null;
            if ((!analysisAxis || analysisAxis && analysisAxis.length === 0) && (!analysisAxis || measureValuesGroup && measureValuesGroup.length === 0)) {
                return true;
            }
        }
        return false;
    };

    /**
     * Get category axis
     * TODO: This is a hard-coded solution to determine the category axis type in a specific info chart. Ideally, the
     * info chart should provide an external API to let UVB to get the category axis and value axis.
     */
    ChartTypeUtil.getCategoryAxis = function(type) {
        if (type === 'info/bar' || type === 'info/horizontal_line' || type === 'info/stacked_bar' || type === 'info/100_stacked_bar') {
            return ['yAxis'];
        } else {
            return ['xAxis'];
        }
    };

    /**
     * Get value axis
     */
    ChartTypeUtil.getValueAxis = function(type) {
        if (type === 'info/bar' || type === 'info/horizontal_line' || type === 'info/stacked_bar' || type === 'info/100_stacked_bar') {
            return ['xAxis'];
        } else {
            return ['yAxis'];
        }
    };

    /**
     * Justify whether chart is horizontal
     */
    ChartTypeUtil.isHorizontal = function(type) {
        if (type === 'info/bar' || type === 'info/horizontal_line' || type === 'info/stacked_bar' || type === 'info/100_stacked_bar') {
            return true;
        } else {
            return false;
        }
    };

    /**
     * Justify whether x or y axis is category axis
     */
    ChartTypeUtil.isCategoryAxis = function(type, axis) {
        if (type === 'info/bar' || type === 'info/horizontal_line' || type === 'info/stacked_bar' || type === 'info/100_stacked_bar') {
            return axis === 'yAxis' ? true : false;
        } else {
            return axis === 'xAxis' ? true : false;
        }
    };
    
    ChartTypeUtil.isSupportMorphing = function(type) {
        // @formatter:off
        if (type === ChartConst.TYPE_TREE 
            || type === ChartConst.TYPE_NETWORK 
            || type === ChartConst.TYPE_FUNNEL 
            || type === ChartConst.TYPE_PC 
            || ChartTypeUtil.supportAnimation(type)) {
        // @formatter:on
            return false;
        } else if (!ChartTypeUtil.isBuildInType(type)) {
            return false;
        } else {
            return true;
        }
    };
    

    ChartTypeUtil.getChartId = function(type) {
        return ChartTypeUtil.getVizType(type).replace('viz/','');
    }

    return ChartTypeUtil;
});

define('sap/viz/controls/common/feeds/FeedUtils',
// @formatter:off
[
    'require',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/FakeDataUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil'
],
function(r, ChartConst, FeedItem, FeedItemType, AnalyticalType, Utils, FakeDataUtils, ChartTypeUtil) {
// @formatter:on
    var require = r || require;
    /**
     * FeedUtils Class
     */
    var FeedUtils = {};

    // TODO Remove these 3 consts
    FeedUtils.MultiplierFeedingName = 'multiplier';
    FeedUtils.RowsFeedingName = 'multiplier.row';
    FeedUtils.ColumnsFeedingName = 'multiplier.column';

    FeedUtils.trillisFeeds = {
        'id' : 'multiplier',
        'row' : {
            id : 'multiplier.row',
            maxStacked : 3,
            minStacked : 0,
            type : FeedItemType.DIMENSION
        },
        'column' : {
            id : 'multiplier.column',
            maxStacked : 3,
            minStacked : 0,
            type : FeedItemType.DIMENSION
        }
    };
    FeedUtils.geoFeeds = {
        'id' : 'geoFeatures'
    };

    //CVOM CrossTab DataSet limitation: Max Dimension set count is 2.
    FeedUtils.MaxDemensionFeedsCount = 2;
    /**
     * Map feed item base on feed definition. If item found, the related feedDef item will be removed from toFeedDefs.
     * @private
     */
    FeedUtils._mapFeedItem = function(feedItem, fromFeedDefs, toFeedDefs) {
        var id = feedItem.id();
        var i;
        var feedDef = null;
        //find fromFeed definition.
        for ( i = 0; i < fromFeedDefs.length; i++) {
            if (fromFeedDefs[i].id === id) {
                feedDef = fromFeedDefs[i];
                break;
            }
        }
        //row/ column feeding
        if (feedDef === null) {
            return feedItem;
        }

        var type = feedItem.type();
        var indexName = 'aaIndex';
        if (type !== FeedItemType.DIMENSION) {
            indexName = 'mgIndex';
        }
        //base on aaIndex/mgIndex to update feed item
        var result = null;
        for ( i = 0; i < toFeedDefs.length; i++) {
            if (toFeedDefs[i][indexName] === feedDef[indexName]) {
                result = new FeedItem(toFeedDefs[i].id, type, feedItem.values());
                toFeedDefs.splice(i, 1);
                return result;
            }
        }
        //if not found, update by measure and dimension
        for ( i = 0; i < toFeedDefs.length; i++) {
            if (type === toFeedDefs[i].type && toFeedDefs[i].id !== FeedUtils.MultiplierFeedingName) {
                result = new FeedItem(toFeedDefs[i].id, type, feedItem.values());
                toFeedDefs.splice(i, 1);
                return result;
            }
        }
        return result;
    };
    /**
     * @private
     */
    FeedUtils._idEquals = function(feedItem, feedDef) {
        var id = feedItem.id();
        var result = false;
        if (id === feedDef.id) {
            result = true;
        } else if (feedDef.id === FeedUtils.MultiplierFeedingName && (id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName)) {
            result = true;
        }
        return result;
    };

    /**
     * Get Feeds for vizType
     * @param {String} vizType
     * @returns {Array}
     */
    FeedUtils.getVizFeeds = function(vizType) {
        var viz = sap.viz.api.manifest.Viz.get(vizType)[0];
        if (viz) {
            return viz.allFeeds();
        } else {
            return null;
        }
    };
    /**
     * Base on aaIndex and mgIndex, map feed items to new vizType
     * @param {Array} feedItems
     * @param {String} fromType
     * @param {String} toType
     * @return {Array}
     */
    FeedUtils.mapFeeds = function(feedItems, fromType, toType) {
        if (!toType || fromType === toType || (!feedItems)) {
            return {
                'feeds' : feedItems,
                'feedsChanged' : false
            };
        }
        var fromFeedDefs = [];
        if (fromType && Utils.isString(fromType)) {
            fromFeedDefs = FeedUtils.getVizFeeds(fromType) || [];
        }

        var toFeedDefs = FeedUtils.getVizFeeds(toType);
        if (!toFeedDefs) {
            //if (console) {
            //    console.log(toType + " is not supported.");
            //}
            return {
                'feeds' : [],
                'feedsChanged' : true
            };
        }
        toFeedDefs = toFeedDefs.slice();

        var i, n;
        var feeds = [];
        //1. map feed by id
        var leftFeedItems = [];
        var found = false;
        for ( i = 0; i < feedItems.length; i++) {
            var id = feedItems[i].id();
            found = false;
            for ( n = 0; n < toFeedDefs.length; n++) {
                if (toFeedDefs[n].id === id) {
                    feeds.push(feedItems[i]);
                    toFeedDefs.splice(n, 1);
                    found = true;
                    break;
                }
            }
            if (!found) {
                leftFeedItems.push(feedItems[i]);
            }
        }
        //2. map by dimension and meausre
        var newItem;
        var feedsChanged = false;
        for ( i = 0; i < leftFeedItems.length; i++) {
            newItem = FeedUtils._mapFeedItem(leftFeedItems[i], fromFeedDefs, toFeedDefs);
            if (newItem) {
                feeds.push(newItem);
            }
            if (newItem !== leftFeedItems[i]) {
                feedsChanged = true;
            }
        }

        for ( n = 0; n < toFeedDefs.length; n++) {
            found = false;
            for (var m = 0; m < feeds.length; m++) {
                if (FeedUtils._idEquals(feeds[m], toFeedDefs[n])) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                feedsChanged = true;
                if (toFeedDefs[n].id === FeedUtils.MultiplierFeedingName) {
                    feeds.push(new FeedItem(FeedUtils.RowsFeedingName, toFeedDefs[n].type, []));
                    feeds.push(new FeedItem(FeedUtils.ColumnsFeedingName, toFeedDefs[n].type, []));
                } else {
                    feeds.push(new FeedItem(toFeedDefs[n].id, toFeedDefs[n].type, []));
                }
            }
        }

        if (FeedUtils.isEmptyFeeds(feeds)) {
            feedsChanged = false;
        }

        return {
            'feeds' : feeds,
            'feedsChanged' : feedsChanged
        };
    };
    /**
     * Check whether we can add new feed item to feedItems.
     * @param {Array} feedItems
     * @param {Object} feedDef New feed item definition
     * @param {<sap.viz.controls.common.feeds.AnalysisObject>} analysisObject
     * @param {String} zoneName
     * @returns {Boolean}
     */
    FeedUtils.canAddFeed = function(feedItems, feedDef, analysisObject, zoneName) {
        // check if the feedItem already been added.

        // for mainPlot, we should go through both multiplier.row and multiplier.column
        var isMultiplier = feedDef.id === FeedUtils.MultiplierFeedingName;
        var multiplierCount = 0;
        if (isMultiplier) {
            multiplierCount = zoneName ? (zoneName === "mainPlot" ? 2 : 1) : 2;
        }

        for (var i = 0; i < feedItems.length; i++) {
            if (!FeedUtils._idEquals(feedItems[i], feedDef)) {
                continue;
            }
            // if zoneName = multiplier.row or multiplier.column, feedItem id should match zoneName
            if ((zoneName === FeedUtils.RowsFeedingName || zoneName === FeedUtils.ColumnsFeedingName)
                && feedItems[i].id() !== zoneName) {
                continue;
            }
            var values = feedItems[i].values();
            for (var j = 0; j < values.length; j++) {
                var value = values[j];
                if (value.id() === analysisObject.id()) {
                    if (isMultiplier) {
                        if (--multiplierCount === 0) {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
            }
        }

        var type = analysisObject.type();
        if (type) {
            type = type.toLowerCase();
        }
        var dataType = analysisObject.dataType();
        if (dataType) {
            dataType = dataType.toLowerCase();
        }
        var defType = feedDef.id === FeedUtils.geoFeeds.id ? FeedItemType.GEOGRAPHY : feedDef.type;
        if (!FeedUtils.feedCompatible(defType, type, dataType)) {
            return false;
        } else if (FeedUtils.feedCompatible(type, AnalyticalType.MEASURE, dataType)) {
            return true;
        }

        var numDimension = 0;
        var numMultiplier = 0;
        for (var k = 0; k < feedItems.length; k++) {
            var feedItem = feedItems[k];
            if (!feedItem.hasValues()) {
                continue;
            } else if (FeedUtils._idEquals(feedItem, feedDef)) {

                //already in feedItems;
                return true;
            } else if (feedItem.type() === FeedItemType.DIMENSION) {
                if (feedItem.id() === FeedUtils.RowsFeedingName || feedItem.id() === FeedUtils.ColumnsFeedingName) {
                    numMultiplier = Math.min(1, numMultiplier + 1);
                } else {
                    numDimension++;
                }
            }
        }
        //CVOM CrossTab DataSet limitation: Max Dimension set count is 2.
        return (numDimension + numMultiplier) < FeedUtils.MaxDemensionFeedsCount;
    };
    /**
     * Check whether dimension feeds reach the maximum number 2
     */
    FeedUtils.checkDimensionFeedItemsToLimit = function(feedItems) {
        var numDimension = 0;
        var numMultiplier = 0;
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];
            if (feedItem.type() === FeedItemType.DIMENSION && feedItem.hasValues()) {
                if (feedItem.id() === FeedUtils.RowsFeedingName || feedItem.id() === FeedUtils.ColumnsFeedingName) {
                    numMultiplier = Math.min(1, numMultiplier + 1);
                } else {
                    numDimension++;
                }
            }
        }
        //CVOM CrossTab DataSet limitation: Max Dimension set count is 2.
        return (numMultiplier + numDimension) >= FeedUtils.MaxDemensionFeedsCount;
    };
    /**
     * Get empty feed items' id for enable or disable ui according to whether to dimension limit
     */
    FeedUtils.getEmptyFeedItemsId = function(feedItems) {
        var emptyFeedItemsId = [];
        var hasRowOrColumn = false;
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];
            if (feedItem.type() === FeedItemType.DIMENSION) {
                if (feedItem.id() === FeedUtils.RowsFeedingName || feedItem.id() === FeedUtils.ColumnsFeedingName) {
                    if (feedItem.values().length > 0) {
                        hasRowOrColumn = true;
                    }
                    continue;
                }
                if (!feedItem.values().length) {
                    emptyFeedItemsId.push(feedItem.id());
                }
            }
        }
        if (!hasRowOrColumn) {
            emptyFeedItemsId.push(FeedUtils.RowsFeedingName);
            emptyFeedItemsId.push(FeedUtils.ColumnsFeedingName);
        }
        return emptyFeedItemsId;
    };
    /**
     * Check whether feedItems have row or column
     */
    FeedUtils.hasRowOrColumn = function(feedItems) {
        var _hasRowOrColumn = false;
        if (!feedItems) {
            return _hasRowOrColumn;
        }
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];
            if (feedItem.id() === FeedUtils.RowsFeedingName || feedItem.id() === FeedUtils.ColumnsFeedingName || feedItem.id() === FeedUtils.MultiplierFeedingName) {
                if (feedItem.values().length > 0) {
                    _hasRowOrColumn = true;
                    break;
                }
            }
        }
        return _hasRowOrColumn;
    };
    /**
     * check feed items is empty
     *
     * @param {Array} feedItems
     *      Array of {FeedItem}
     *
     * @return {Boolean}
     *
     */
    FeedUtils.isEmptyFeeds = function(feedItems) {
        if (!feedItems) {
            return true;
        }

        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];
            if (feedItem) {
                var values = feedItem.values();
                if (values && values.length > 0) {
                    return false;
                }
            }
        }

        return true;
    };
    FeedUtils._toMap = function(feedsOrAnalyses) {
        var map = {};
        for (var i = 0; i < feedsOrAnalyses.length; i++) {
            var item = feedsOrAnalyses[i];
            if (!item) {
                continue;
            }
            map[item.id()] = {
                'index' : i,
                'item' : item
            };
        }
        return map;
    };
    /**
     * whether feed definition has changed
     */
    FeedUtils.isFeedDefinitionEqual = function(type1, type2) {
        if (type1 === type2) {
            return true;
        }
        if (!type1 || !type2) {
            return false;
        }

        var feeds1 = FeedUtils.getVizFeeds(type1);
        var feeds2 = FeedUtils.getVizFeeds(type2);
        if (!feeds1 || !feeds2) {
            return false;
        }

        if (feeds1.length !== feeds2.length) {
            return false;
        }

        for (var i = 0; i < feeds1.length; i++) {
            var feed1 = feeds1[i];
            var feed2 = feeds2[i];
            for (var prop in feed1) {
                if (feed1.hasOwnProperty(prop)) {
                    if (feed1[prop] !== feed2[prop]) {
                        return false;
                    }
                }
            }
        }
        return true;
    };
    /**
     * whether feeds has changed
     */
    FeedUtils.equal = function(feeds1, feeds2) {
        var i;
        var feedsMap1 = FeedUtils._toMap(feeds1);
        var feedsMap2 = FeedUtils._toMap(feeds2);

        var fid;
        // Traversal feedsMap1 to compare 1 and 2
        for (fid in feedsMap1) {
            if (feedsMap1.hasOwnProperty(fid)) {
                var feed1 = feedsMap1[fid].item;
                var analyses1 = feed1.values();
                var feed2 = feedsMap2[fid] ? feedsMap2[fid].item : null;
                var analyses2 = feedsMap2[fid] ? feed2.values() : null;
                // Remove compared
                delete feedsMap2[fid];

                if (!feed2) {
                    if (analyses1.length > 0) {
                        return false;
                    }
                } else {
                    if (analyses2.length !== analyses1.length) {
                        return false;
                    } else {
                        var analysis;
                        var analysisMap1 = FeedUtils._toMap(analyses1);
                        var analysisMap2 = FeedUtils._toMap(analyses2);
                        // Compare
                        for (var aid in analysisMap1) {
                            if (analysisMap1.hasOwnProperty(aid)) {
                                if (analysisMap2[aid] === undefined) {
                                    return false;
                                } else if (analysisMap1[aid].index !== analysisMap2[aid].index) {
                                    return false;
                                } else if (!analysisMap1[aid].item.equal(analysisMap2[aid].item)) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        // Traversal remain feed item in feedsMap2
        for (fid in feedsMap2) {
            if (feedsMap2.hasOwnProperty(fid)) {
                var feed = feedsMap2[fid].item;
                var analyses = feed.values();

                if (analyses.length > 0) {
                    return false;
                }
            }
        }
        return true;
    };
    /**
     * clone the current feeds
     */
    FeedUtils.cloneFeeds = function(feeds) {
        if (!feeds) {
            return null;
        }
        if (feeds.length === 0) {
            return [];
        }
        var retFeeds = [];
        for (var i = 0; i < feeds.length; i++) {
            var feed = feeds[i];
            retFeeds.push(feed.clone());
        }
        return retFeeds;
    };
    /**
     * whether feedItem has new value
     */
    FeedUtils.feedHasValue = function(newValue, feedItem) {
        if (!newValue || !feedItem) {
            return false;
        }
        var ret = false;
        var curValues = feedItem.values();
        for (var i = 0; i < curValues.length; i++) {
            if (curValues[i].id() === newValue.id()) {
                ret = true;
                break;
            }
        }
        return ret;
    };

    /**
     * Generate MND info in Data Feed.
     * @param {String} type
     * @param {Array} feedings
     */
    FeedUtils.buildMNDFeedings = function(feedings, type) {
        if (!feedings) {
            return;
        }

        var chart = sap.viz.api.manifest.Viz;
        var chartConfig = chart.get(type)[0];
        var feeds = chartConfig.allFeeds();
        var mndFeed = {
            feedId : null,
            index : -1,
            priority : -1
        };

        for (var i = 0; i < feeds.length; i++) {
            var fId = feeds[i].id;
            var feeding = feeds[i];
            var found = false;
            for (var j = 0; j < feedings.length; j++) {
                if (feedings[j].feedId === fId) {
                    if (feedings[j].binding.length < feeding.min) {
                        if (FeedUtils.canAcceptMND(feeding.acceptMND)) {
                            mndFeed = {
                                feedId : fId,
                                index : j,
                                priority : feeding.acceptMND
                            };
                        }
                    }
                    found = true;
                    break;
                }
            }
            if (!found) {
                if (feeding.min > 0 && FeedUtils.canAcceptMND(feeding.acceptMND)) {
                    mndFeed = {
                        feedId : fId,
                        index : -1,
                        priority : feeding.acceptMND
                    };
                }
            }
        }

        var chartFeedData = feedings;
        if (chartFeedData && mndFeed.index >= 0) {
            chartFeedData[mndFeed.index].binding.push({
                "type" : ChartConst.MEASURE_NAMES_DIMENSION
            });
        } else if (chartFeedData && mndFeed.feedId) {
            chartFeedData.push({
                binding : [{
                    "type" : ChartConst.MEASURE_NAMES_DIMENSION
                }],
                feedId : mndFeed.feedId
            });
        }
        return chartFeedData;
    };
    FeedUtils._useFullHierarchies = function(feedId, feedDef, analyses) {
        var result = true;
        if (feedId === "geoFeatures") {
            result = false;
        } else if (Utils.isNumber(feedDef.maxStackedDims)) {
            var stackedDims = 0;
            for (var j = 0; j < analyses.length; j++) {
                var analysis = analyses[j];
                if (analysis.type() === AnalyticalType.HIERARCHY) {
                    var levels = analysis.hierarchyLevels();
                    for (var k = 0; k < levels.length; k++) {
                        stackedDims++;
                        if (levels[k].selected()) {
                            break;
                        }
                    }
                } else if (analysis.type() === AnalyticalType.DIMENSION) {
                    stackedDims++;
                }
            }

            if (feedDef.maxStackedDims < stackedDims) {
                result = false;
            }
        }

        return result;
    };
    /**
     * Build a CVOM feeding object by type & feeds & data.
     *
     * @param {String} type
     * @param {Array} feeds
     */
    FeedUtils.buildFeedings = function(type, feeds, data) {
        //call FakeDataUtil, since passed data is complete, no fake will be filled, only feeding would be generated.
        return FeedUtils.buildFeedingsWithFakeData(type, feeds, data);
    };

    /**
     * Adjust MND when it's between trellis rows and trellis columns.
     */
    FeedUtils._adjustMND = function(feeds, feedsValuesMap) {
        var multiplierAnalyses = feedsValuesMap['multiplier'];
        if (multiplierAnalyses) {
            var columnsLen = FeedUtils.getNumberOfDimensionsInColumn(feeds);
            var rowsLen = multiplierAnalyses.length - columnsLen;
            if (rowsLen > 0 && columnsLen > 0) {
                for (var i = 0; i < multiplierAnalyses.length; i++) {
                    // AnalysisObject
                    if (multiplierAnalyses[i].type() === AnalyticalType.MND) {
                        if (i > 0 && i < rowsLen + columnsLen - 1) {
                            var analysis = multiplierAnalyses[i];
                            if (i < rowsLen) {
                                multiplierAnalyses.unshift(analysis);
                                multiplierAnalyses.splice(i + 1,1);
                            } else {
                                multiplierAnalyses.push(analysis);
                                multiplierAnalyses.splice(i,1);
                            }
                        }
                        break;
                    }
                }
            }
        }
    };

    /**
     * Find binding index from data according analysisobject names.
     */
    FeedUtils._findBindingIndex = function(datas, analysisObjectNames) {
        for (var i = 0; i < datas.length; i++) {
            var data = datas[i];
            if (data.data.length !== analysisObjectNames.length) {
                continue;
            }
            var match = true;
            for (var j = 0; j < data.data.length; j++) {
                match = match && data.data[j].name === analysisObjectNames[j];
            }
            if (match) {
                datas.splice(i, 1);
                return data.index;
            }
        }
    };
    /**
     * Remove row and column feed items from feeds
     */
    FeedUtils.removeRowAndColumnFeedItems = function(feeds) {
        var retFeeds = FeedUtils.cloneFeeds(feeds);
        var len = retFeeds.length;
        while (len) {
            var curIndex = len - 1;
            var feedItem = retFeeds[curIndex];
            if (feedItem.id() === FeedUtils.RowsFeedingName || feedItem.id() === FeedUtils.ColumnsFeedingName || feedItem.id() === FeedUtils.MultiplierFeedingName) {
                retFeeds.splice(curIndex, 1);
            }
            len--;
        }
        return retFeeds;
    };
    /**
     * get number of dimensions in trellis column feed.
     */
    FeedUtils.getNumberOfDimensionsInColumn = function(feeds) {
        var number = 0;
        feeds.forEach(function(feed) {
            if (feed.id() === FeedUtils.ColumnsFeedingName) {
                var analysisObjects = feed.values();
                analysisObjects.forEach(function(analysisObject) {
                    if (analysisObject.type() === AnalyticalType.HIERARCHY) {
                        var levels = analysisObject.hierarchyLevels();
                        for (var i = 0; i < levels.length; i++) {
                            number++;
                            if (levels[i].selected()) {
                                break;
                            }
                        }
                    } else {
                        number++;
                    }
                });
                return;
            }
        });
        return number;
    };
    /**
     * Generate Data Feed.
     * @param {String} vizType
     * @param {Array} feeds
     * @param {Object} data
     */
    FeedUtils.buildFeedingsWithFakeData = function(vizType, feeds, data) {
        var data = JSON.parse(JSON.stringify(data.data()));
        //TODO, check if the logic of generating data and calculating feeding can be seperated.
        var feeding = FakeDataUtils.buildFakeData(vizType, feeds, data).feeding;
        return feeding;
    }
    FeedUtils.meetMinDimensions = function(type, feeds) {
        var id;
        var vizManifestFeedsMap = FeedUtils.getManifestFeedsMap(type);
        var feedsValuesMap = FeedUtils._getFeedsValuesMap(feeds);
        for (id in vizManifestFeedsMap) {
            var vizManifestFeed = vizManifestFeedsMap[id];
            var feedsValues = feedsValuesMap[id];
            var lowerAType = vizManifestFeed.type.toLowerCase();
            if (AnalyticalType.compatible(AnalyticalType.DIMENSION, lowerAType)) {
                var numDataContainers = FeedUtils.countDataContainers(feedsValues);
                if (numDataContainers < vizManifestFeed.min) {
                    return false;
                }
            }
        }
        return true;
    };
    FeedUtils.removeMND = function(feeds) {
        if (!feeds) {
            return feeds;
        }
        var feedsWithoutMND = [];
        for (var i = 0; i < feeds.length; i++) {
            if (feeds[i]) {
                var feed = feeds[i].clone();
                var values = feed.values();
                if (values) {
                    for (var j = 0; j < values.length; j++) {
                        var analysis = values[j];
                        if (!analysis) {
                            continue;
                        }
                        if (AnalyticalType.compatible(AnalyticalType.MND, analysis.type())) {
                            values.splice(j, 1);
                            j--;
                        }
                    }
                }
            }
            feedsWithoutMND.push(feed);
        }
        return feedsWithoutMND;
    };
    FeedUtils.hasMND = function(feeds) {
        return FeedUtils.countAnalyses(feeds, AnalyticalType.MND) > 0;
    };
    FeedUtils.countAnalyses = function(feeds, type) {
        var number = 0;

        for (var i = 0; i < feeds.length; i++) {
            var feed = feeds[i];
            var values = feed.values();
            for (var j = 0; j < values.length; j++) {
                var analysis = values[j];
                if (AnalyticalType.compatible(type, analysis.type())) {
                    number++;
                }
            }
        }
        return number;
    };
    FeedUtils.convertFeedType = function(feedItemType) {
        if (feedItemType === FeedItemType.GEOGRAPHY) {
            return FeedItemType.DIMENSION;
        }
        return feedItemType;
    }
    FeedUtils.isGeoHierarchyFeed = function(feedItemType, analyticType, dataType) {
        var lowerFIType = feedItemType ? feedItemType.toLowerCase() : null;
        var lowerAType = analyticType ? analyticType.toLowerCase() : null;
        var lowerDType = dataType ? dataType.toLowerCase() : null;
        return lowerFIType === FeedItemType.GEOGRAPHY.toLowerCase()
               && lowerAType === AnalyticalType.HIERARCHY
               && lowerDType === FeedItemType.GEOGRAPHY.toLowerCase();
    };
    FeedUtils.feedCompatible = function(feedItemType, analyticType, dataType) {
        var lowerFIType = feedItemType ? feedItemType.toLowerCase() : null;
        var lowerAType = analyticType ? analyticType.toLowerCase() : null;
        var lowerDType = dataType ? dataType.toLowerCase() : null;
        if (lowerFIType === FeedItemType.DIMENSION.toLowerCase()) {
            return lowerAType === AnalyticalType.DIMENSION
                   || lowerAType === AnalyticalType.HIERARCHY
                   || lowerAType === AnalyticalType.MND;
        } else if (lowerFIType === FeedItemType.SUBTOTAL.toLowerCase()) {
            return lowerAType === FeedItemType.DIMENSION.toLowerCase()
        } else if (lowerFIType === FeedItemType.GEOGRAPHY.toLowerCase()) {
            return (lowerAType === AnalyticalType.DIMENSION || lowerAType === AnalyticalType.HIERARCHY)
                    && lowerDType === FeedItemType.GEOGRAPHY.toLowerCase();
        } else {
            return lowerFIType === lowerAType;
        }
    };
    FeedUtils.getManifestFeedsMap = function(type) {
        var vizManifestFeeds = FeedUtils.getVizFeeds(type);
        if (!vizManifestFeeds) {
            return {};
        }
        var vizManifestFeedsMap = {};
        for (var i = 0; i < vizManifestFeeds.length; i++) {
            vizManifestFeedsMap[vizManifestFeeds[i].id] = vizManifestFeeds[i];
        }
        return vizManifestFeedsMap;
    };
    FeedUtils._getFeedsValuesMap = function(feeds, mergeMultiplier) {
        mergeMultiplier = mergeMultiplier !== false;

        var feedsValuesMap = {};
        for (var i = 0; i < feeds.length; i++) {
            var feed = feeds[i];
            var id = feed.id();
            if (mergeMultiplier && (id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName)) {
                id = 'multiplier';
            }
            if (!feedsValuesMap[id]) {
                feedsValuesMap[id] = feed.values();
            } else {
                feedsValuesMap[id] = feedsValuesMap[id].concat(feed.values());
            }
        }
        return feedsValuesMap;
    };
    FeedUtils.countDataContainers = function(values) {
        if (!values) {
            return 0;
        }
        var numMeasures = 0, numDimensions = 0, numMND = 0;
        for (var i = 0; i < values.length; i++) {
            // AnalysisObject
            var a = values[i];

            if (AnalyticalType.compatible(AnalyticalType.MEASURE, a.type())) {
                numMeasures++;
            } else {
                if (AnalyticalType.compatible(AnalyticalType.MND, a.type())) {
                    numMND++;
                } else if (AnalyticalType.compatible(AnalyticalType.DIMENSION, a.type())) {
                    numDimensions++;
                }
            }
        }
        return numMeasures + Math.min(1, numDimensions) + Math.min(1, numMND);
    };
    /**
     * Calculate number of aa of feeds
     */
    FeedUtils.countAAOfFeeds = function(feedItems) {
        var numDimension = 0;
        var numMultiplier = 0;
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];
            if (feedItem.type() === FeedItemType.DIMENSION && FeedUtils.countAAOfFeedItem(feedItem)) {
                if (feedItem.id() === FeedUtils.RowsFeedingName || feedItem.id() === FeedUtils.ColumnsFeedingName) {
                    numMultiplier = Math.min(1, numMultiplier + 1);
                } else {
                    numDimension++;
                }
            }
        }
        //CVOM CrossTab DataSet limitation: Max Dimension set count is 2.
        return (numMultiplier + numDimension);
    };
    /**
     * Calculate number of aa of feedItem
     */
    FeedUtils.countAAOfValues = function(values) {
        if (!values || !values.length) {
            return 0;
        }
        var hasMND = FeedUtils.hasMNDInValues(values);
        if (hasMND && values.length === 1) {
            return 0;
        }
        return 1;
    };
    /**
     * Calculate number of aa of feedItem
     */
    FeedUtils.countAAOfFeedItem = function(feedItem) {
        if (!feedItem || !feedItem.hasValues()) {
            return 0;
        }
        var values = feedItem.values();
        return FeedUtils.countAAOfValues(values);
    };
    /**
     * Justify whether valus has mnd
     */
    FeedUtils.hasMNDInValues = function(values) {
        return (FeedUtils.indexOfMNDInValues(values) !== -1);
    };
    /**
     * Get mnd value index of values of src feedItem's values
     */
    FeedUtils.indexOfMNDInValues = function(values) {
        if (!values || !values.length) {
            return -1;
        }
        var indexMND = -1;
        for (var i = 0; i < values.length; i++) {
            var value/*AnalysisObject*/ = values[i];
            if (value.type() === AnalyticalType.MND) {
                indexMND = i;
                break;
            }
        }
        return indexMND;
    };
    /**
     * get value capacity of feedDef
     */
    FeedUtils._getCapacityOfFeedDef = function(feedDef) {
        var retCapacity = 0;
        if (feedDef.type === FeedItemType.DIMENSION) {//dimension
            if (feedDef.id === FeedUtils.RowsFeedingName || feedDef.id === FeedUtils.ColumnsFeedingName || feedDef.id === FeedUtils.MultiplierFeedingName) {
                retCapacity = FeedUtils.trillisFeeds.row.maxStacked;
            } else {
                retCapacity = feedDef.maxStackedDims ? feedDef.maxStackedDims : Number.MAX_VALUE;
            }
        } else {//measure
            retCapacity = feedDef.max == 'Infinity' ? Number.MAX_VALUE : feedDef.max;
        }
        return retCapacity;
    };

    FeedUtils._getMNDfeed = function(feeds, feed) {
        if(!feed)
            return;
        var mndFeed = {
            priority : -1
        };

        for(var i in feeds) {
            var feeding = feeds[i];
            var fId = feeding.id;
            var acceptMND = Utils.isNumber(feeding.acceptMND) ? Number(feeding.acceptMND) : -1;
            var found = false;
            for(var j = 0; j < feed.length; j++) {
                if(feed[j].id() == fId) {
                    var length = feed[j].values().length;
                    if(length < feeding.min) {
                        if(acceptMND > mndFeed.priority) {
                            mndFeed = {
                                feedId : fId,
                                priority : feeding.acceptMND
                            };
                        }
                    }
                    found = true;
                }
            }
            if(!found) {
                if(feeding.min > 0 && acceptMND > mndFeed.priority) {
                    mndFeed = {
                        feedId : fId,
                        priority : feeding.acceptMND
                    };
                }
            }
        }
        return mndFeed.feedId;
    };
    /**
     * Justify whether can add value to the feedItem
     */
    FeedUtils.canAddValue = function(feeds, shelfId, feedDefsMapOriginal, isMNDVisible, isMND, feedId) {
        var feedDefsMap = Utils.clone(feedDefsMapOriginal);
        if(!feedId)
        {
            feedId = shelfId;
        }
        if(feedDefsMap[FeedUtils.MultiplierFeedingName])
        {
            feedDefsMap[FeedUtils.MultiplierFeedingName].min = 0;
        }
        if(feedDefsMap[FeedUtils.RowsFeedingName])
        {
           feedDefsMap[FeedUtils.RowsFeedingName].min = 0;
        }
        if(feedDefsMap[FeedUtils.ColumnsFeedingName])
        {
            feedDefsMap[FeedUtils.ColumnsFeedingName].min = 0;
        }
        var feedDef = feedDefsMap[feedId];
        if(!feedDef) {
            return false;
        }
        var feedsMap = FeedUtils._toMap(feeds);
        var feedItem = feedsMap[shelfId] ? feedsMap[shelfId].item : null;
        var values = feedItem ? feedItem.values() : [];
        if (shelfId === FeedUtils.RowsFeedingName || shelfId === FeedUtils.ColumnsFeedingName) {
            values = FeedUtils.getRowAndColumnValues(feeds);
        }

        var mndFeed = FeedUtils._getMNDfeed(feedDefsMap, feeds);
        var dimensionNum = 0;
        var multiplierNum = 0;
        for(var i = 0; i < feeds.length; i++)
        {
            var feed = feeds[i];
            if(feed.type() == FeedItemType.DIMENSION)
            {
                var feedValues = feed.values();
                for(var j = 0; j < feedValues.length; j++)
                {
                    var feedValue = feedValues[j];
                    if(feedValue.type() != 'mnd')
                    {
                        dimensionNum++;
                        if(feed.id() === FeedUtils.RowsFeedingName || feed.id() === FeedUtils.ColumnsFeedingName) {
                            multiplierNum++;
                        }
                        break;
                    }
                }
            }
        }
        var mndFeeding;
        for(var i = 0; i < feeds.length; i++)
        {
            var feed = feeds[i];
            if(feed.type() == FeedItemType.DIMENSION)
            {
                var feedValues = feed.values();
                for(var j = 0; j < feedValues.length; j++)
                {
                    var feedValue = feedValues[j];
                    if(feedValue.type() == 'mnd')
                    {
                        mndFeeding = feed.id();
                        break;
                    }
                }
            }
        }

        if(isMND && mndFeeding != mndFeed && shelfId != mndFeed)
        {
            dimensionNum++;
        }
        else
        if(!isMND && mndFeeding && mndFeed && mndFeeding != mndFeed && shelfId != mndFeed)
        {
            dimensionNum++;
        }
        if(multiplierNum>0)
        {
            dimensionNum -= multiplierNum-1;
        }
        if((shelfId === FeedUtils.RowsFeedingName || shelfId === FeedUtils.ColumnsFeedingName)&& multiplierNum>0)
        {
            dimensionNum--;
        }
        var canAdd;
        // check aa limitation
        if (isMND) {//add mnd value has no result in aa limitation
            canAdd = FeedUtils.canAcceptMND(feedDef.acceptMND) && (dimensionNum <= FeedUtils.MaxDemensionFeedsCount);
        } else {
            canAdd = FeedUtils._canAddValueAtAALimitaion(feeds, values, feedId, feedDefsMap);
            if(values.length==0 || (values.length==1 && values[0].id() == AnalyticalType.MND))
            {
                canAdd = canAdd && (dimensionNum <= FeedUtils.MaxDemensionFeedsCount-1);
            }
        }

        // check datacontainer limitaion and capacity limitation
        if (canAdd) {
            // check datacontainer limitaion
            var max = feedDef.max;
            canAdd = FeedUtils._canAddValueAtDataContainerLimitaion(values, max, isMNDVisible, isMND);
            if (canAdd) {
                // check capacity limitation
                var capacity = FeedUtils._getCapacityOfFeedDef(feedDef);
                canAdd = FeedUtils._canAddValueAtCapacityLimitaion(feedItem, capacity, isMNDVisible);
            }
        }
        return canAdd;
    };
    /**
     * Justify whether can add value to the feedItem at num of aa limitation : 2
     */
    FeedUtils._canAddValueAtAALimitaion = function(feeds, values, feedId, feedDefsMap) {
        var aaCountOfFeeds = FeedUtils.countAAOfFeeds(feeds);
        var canAdd = (aaCountOfFeeds <= FeedUtils.MaxDemensionFeedsCount);
        if (canAdd) {
            var aaCountOfFeedItem = FeedUtils.countAAOfValues(values);
            if (aaCountOfFeedItem === 0) {

                // Calculate the minimun count of missing required feeds
                var multiplierCount = 0;
                var minMissingRequiredFeedsCount = feeds.reduce(function(count, feedItem){
                    var id = feedItem.id();
                    var isMultiplierFeedId = id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName;
                    var feedDef = feedDefsMap[id];
                    // when adding a multiplier feed, feedDefsMap has RowsFeedingName or ColumnsFeedingName;
                    // but when adding a normal dimension, feedDefsMap only has MultiplierFeedingName.
                    if (!feedDef && isMultiplierFeedId) {
                        feedDef = feedDefsMap[FeedUtils.MultiplierFeedingName];
                    }
                    if (feedDef && id !== feedId &&         // if this feed is not the current feed
                            feedDef.type === FeedItemType.DIMENSION && // and is Dimension
                            feedDef.min > 0 &&              // and is required
                            !feedItem.values().length) {    // and is not filled yet
                        // then it is a "missing required feed".
                        if (isMultiplierFeedId) {
                            multiplierCount++;
                        }
                        // FIXME: is feedDef.min > 1 possible?
                        return count + 1;
                    }
                    return count;
                }, 0);
                // multipliers are considered as one feeding.
                if (multiplierCount > 1) {
                    minMissingRequiredFeedsCount -= multiplierCount - 1;
                }

                var aaCountOfFeedsAfterAdd = aaCountOfFeeds + minMissingRequiredFeedsCount + 1;
                if (aaCountOfFeedsAfterAdd > FeedUtils.MaxDemensionFeedsCount) {
                    canAdd = false;
                }
            }
        }
        return canAdd;
    };
    /**
     * Justify whether can add value to the feedItem at num of DataContainer limitation
     */
    FeedUtils._canAddValueAtDataContainerLimitaion = function(values, maxDataContainer, isMNDVisible, isMND) {
        var numDataContainer = FeedUtils.countDataContainers(values);
        if (numDataContainer > maxDataContainer) {
            //if (console) {
            //    console.log("Current feeds was invalid because some feedItem was over data container limitation!");
            //}
            return false;
        }
        var canAdd = (maxDataContainer > 0 && (numDataContainer <= maxDataContainer));
        if (canAdd && numDataContainer === maxDataContainer) {
            var hasMND = FeedUtils.hasMNDInValues(values);
            if (isMND) {//add mnd value
                if (!hasMND) {
                    if (numDataContainer === 1) {
                        canAdd = false;
                    } else if (numDataContainer === 2) {
                        //should not run here since our feeds has only one mnd
                    }
                } else {
                    //should not run here since our feeds has only one mnd
                    canAdd = false;
                }
            } else {// add not mnd value
                if (!hasMND) {
                    if (numDataContainer === 1) {
                        canAdd = true;
                    } else if (numDataContainer === 2) {
                        //should not run here since our feeds has only one mnd
                    }
                } else {
                    if (numDataContainer === 1) {
                        if (isMNDVisible) {
                            canAdd = false;
                        } else {
                            canAdd = true;
                        }
                    } else if (numDataContainer === 2) {
                        canAdd = true;
                    }
                }
            }
        }
        return canAdd;
    };
    /**
     * Justify whether can add value to the feedItem at capacity limitation
     */
    FeedUtils._canAddValueAtCapacityLimitaion = function(feedItem, capacity, isMNDVisible) {
        var valuesSize = feedItem ? feedItem.values().length : 0;
        if (valuesSize && !isMNDVisible && FeedUtils.hasMNDInValues(feedItem.values())) {
            valuesSize--;
        }
        return (valuesSize < capacity);
    };
    /**
     * Justify whether can accept mnd according to cvom feed definition
     */
    FeedUtils.canAcceptMND = function(acceptMND) {
        // acceptMND : false|undefined|number
        acceptMND = Utils.isNumber(acceptMND) ? Number(acceptMND) : -1;
        return (acceptMND >= 0);
    };
    /**
     * Justify whether the current feeds support for multi chart
     */
    FeedUtils.supportMultiChart = function(feeds, feedDefs) {
        if (!feeds) {
            return true;
        }
        var i;
        var feedItem;
        var id;
        var numDataContainer;
        var feedDef;
        for ( i = 0; i < feeds.length; i++) {
            feedItem = feeds[i];
            id = feedItem.id();
            if (id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName) {
                feedDef = feedDefs[FeedUtils.MultiplierFeedingName];
            } else {
                feedDef = feedDefs[id];
            }
            numDataContainer = FeedUtils.countDataContainers(feedItem.values());
            if (feedDef && numDataContainer > feedDef.max) {
                return false;
            }
        }
        return true;
    };
    /**
     * Get row and column values according to the current feeds
     */
    FeedUtils.getRowAndColumnValues = function(feeds) {
        if (!feeds) {
            return null;
        }
        var i;
        var feedItem;
        var id;
        var numDataContainer;
        var retValues = [];
        for ( i = 0; i < feeds.length; i++) {
            feedItem = feeds[i];
            id = feedItem.id();
            if (id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName) {
                retValues = retValues.concat(feedItem.values());
            }
        }
        return retValues;
    };
    FeedUtils.match = function(type, feeds, strictly) {
        if (!strictly && ChartTypeUtil.supportMultiChart(type)) {
            var single = ChartTypeUtil.toSingleChartType(type);
            var multi = ChartTypeUtil.toMultiChartType(type);

            return FeedUtils.match(single, feeds, true) || FeedUtils.match(multi, feeds, true);
        } else {
            var vizManifestFeedsMap = FeedUtils.getManifestFeedsMap(type);
            var feedsValuesMap = FeedUtils._getFeedsValuesMap(feeds);

            var id;
            for (id in feedsValuesMap) {
                if (feedsValuesMap.hasOwnProperty(id)) {
                    // Feed manifest in CVOM
                    var vizManifestFeed = vizManifestFeedsMap[id];
                    if (!vizManifestFeed) {
                        return false;
                    }
                }
            }
            return true;
        }
    };
    /**
     * generate empty feeds if has empty fromFeeds
     * @param{String} vizType
     * @return{Object} emptyFeeds
     */
    FeedUtils.buildEmptyFeeds = function(vizType) {
        var emptyFeeds = [];

        var toFeedDefs = FeedUtils.getVizFeeds(vizType);
        if (toFeedDefs) {
            for (var i = 0; i < toFeedDefs.length; i++) {
                var toFeedDef = toFeedDefs[i];
                if (toFeedDef.id === FeedUtils.MultiplierFeedingName) {
                    emptyFeeds.push(new FeedItem(FeedUtils.RowsFeedingName, toFeedDef.type, []));
                    emptyFeeds.push(new FeedItem(FeedUtils.ColumnsFeedingName, toFeedDef.type, []));
                } else {
                    emptyFeeds.push(new FeedItem(toFeedDef.id, toFeedDef.type, []));
                }
            }
        } else {
            //if (console) {
            //    console.log(vizType + " is not supported.");
            //}
        }
        return emptyFeeds;
    };

    /**
     * Merge client feeds to host feeds
     *
     * @param {Array.<FeedItem>} host
     * @param {Array.<FeedItem>} client
     */
    FeedUtils.merge = function(host, client) {
        var clientMap = FeedUtils._getFeedsValuesMap(client, false);
        for (var i = 0; i < host.length; i++) {
            // FeedItem
            var fi = host[i];
            if (clientMap[fi.id()]) {
                fi.values(fi.values().concat(clientMap[fi.id()]));
            }
        }
        return host;
    };
    FeedUtils.getFeed = function(feeds, id) {
        for (var i = 0; i < feeds.length; i++) {
            var fi = feeds[i];
            if (fi.id() === id) {
                return fi;
            }
        }
        return null;
    };
    FeedUtils.supportMND = function(type) {
        var vizManifestFeeds = FeedUtils.getVizFeeds(type);
        for (var i = 0; i < vizManifestFeeds.length; i++) {
            var acceptMND = vizManifestFeeds[i].acceptMND;
            // acceptMND : false|undefined|number
            if (FeedUtils.canAcceptMND(acceptMND)) {
                return true;
            }
        }
        return false;
    };
     /**
     * judge type is or not mutipleChart
     * @param {String} type
     * @returns {String}
     */
    FeedUtils.getColumnFeeding = function(feedingItems) {
        var columnFeeding = null;
        for (var i = 0; i < feedingItems.length; i++) {
            var id = feedingItems[i].id();
            if (id === FeedUtils.trillisFeeds.column.id) {
                columnFeeding = feedingItems[i];
            }
        }
        return columnFeeding;
    };
    return FeedUtils;
});

define('sap/viz/controls/common/feeds/AutoFeedingUtils',[
// @formatter:off
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/valueobjects/Shelf',
    'sap/viz/controls/common/feeds/valueobjects/ShelfType',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil'
],
function(ChartConst, FeedItem, FeedItemType, AnalyticalType, LangManager, Shelf, ShelfType, Utils, VizUtils, FeedUtils, ChartTypeUtil) {
// @formatter:on
    var AutoFeedingUtils = {};
    /**
     * parse shelves according to the type of vizModel and manifest's feed definitaion
     * @param {String} type, cvom chart type
     * @return {Object} shelves
     */
    // TODO Move these logic to feeding panel
    AutoFeedingUtils.getInitialShelves = function(type) {
        var shelves = {
            "measure" : [],
            "attribute" : [],
            "subtotal" : [],
            "trellis" : []
        };
        var feedDefsMap = AutoFeedingUtils.getFeedDefsMap(type);
        if (feedDefsMap) {
            //measure
            var measureFeedDefsMap = feedDefsMap.measure;
            var measureSortedIds = AutoFeedingUtils._getSortedIds(measureFeedDefsMap, false);
            var id;
            var feedDef;
            for (var i = 0; i < measureSortedIds.length; i++) {
                id = measureSortedIds[i];
                feedDef = measureFeedDefsMap[id];
                shelves["measure"].push(AutoFeedingUtils._getShelfByFeedDef(feedDef, ShelfType.MEASURE, type));
            }
            //dimension
            var dimensionFeedDefsMap = feedDefsMap.dimension;
            var dimensionSortedIds = AutoFeedingUtils._getSortedIds(dimensionFeedDefsMap, true);
            for (var j = 0; j < dimensionSortedIds.length; j++) {
                id = dimensionSortedIds[j];
                feedDef = dimensionFeedDefsMap[id];
                if (id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName) {
                    shelves["trellis"].push(AutoFeedingUtils._getShelfByFeedDef(feedDef, ShelfType.TRELLIS));
                } else
                {
                    shelves["attribute"].push(AutoFeedingUtils._getShelfByFeedDef(feedDef, ShelfType.ATTRIBUTE, type));
                }
            }
            //subtotal
            var subtotalFeedDefsMap = feedDefsMap.subtotal;
            var subtotalSortedIds = AutoFeedingUtils._getSortedIds(subtotalFeedDefsMap, false);
            for (var i = 0; i < subtotalSortedIds.length; i++) {
                id = subtotalSortedIds[i];
                feedDef = subtotalFeedDefsMap[id];
                shelves["subtotal"].push(AutoFeedingUtils._getShelfByFeedDef(feedDef, ShelfType.SUBTOTAL, type));
            }

            //single chart should have row and column shelves if it supports for coverting to multiple
            if (!ChartTypeUtil.isMultipleChart(type) && ChartTypeUtil.supportMultiChart(type)) {
                shelves["trellis"].push(AutoFeedingUtils._getShelfByFeedDef(FeedUtils.trillisFeeds.row, ShelfType.TRELLIS));
                shelves["trellis"].push(AutoFeedingUtils._getShelfByFeedDef(FeedUtils.trillisFeeds.column, ShelfType.TRELLIS));
            }
        }
    
        return shelves;
};
    /**
     * parse shelf according to feeds properties of manifest's model
     * @param {Object} feed model
     * @param {ShelfType} shelfType
     * @param {Boolean} type, cvom chart type
     * @return {Shelf} shelf
     */
    AutoFeedingUtils._getShelfByFeedDef = function(feedDef, shelfType, type) {
        //TODO: remove this convert and add multi and bar or column vizType in ChartConst
        //convert multi to single
        //suppose multipleChart has same feeding with singleChart
        var vizType = ChartTypeUtil.isMultipleChart(type) ? ChartTypeUtil.toSingleChartType(type): type;
        var shelf = new Shelf();
        shelf.id = feedDef.id;
        shelf.type = shelfType;
        if (shelf.id === ChartConst.FEEDING_PRIMARY_VALUES) {
            var valueAxis = VizUtils.getValueAxis(vizType);
            if (!valueAxis) {
                if (vizType === ChartConst.TYPE_3D_BAR) {
                    //X Axis for 3D_BAR
                    shelf.name = LangManager.get(shelfId2Name[shelf.id][1]);
                } else {
                    //Y Axis for 3D_COLUMN and SCATTER_MATRIX
                    shelf.name = LangManager.get(shelfId2Name[shelf.id][0]);
                }
            } else {
                if(valueAxis.length === 1) {
                    if (valueAxis[0] === ChartConst.AXIS_YAXIS) {
                        //Y Axis
                        shelf.name = LangManager.get(shelfId2Name[shelf.id][0]);
                    } else {
                        //X Axis
                        shelf.name = LangManager.get(shelfId2Name[shelf.id][1]);
                    }
                } else {
                    for (var i = 0; i < valueAxis.length; i++) {
                        if (valueAxis[i] === ChartConst.AXIS_YAXIS2) {
                            //Y Axis1
                            shelf.name = LangManager.get(shelfId2Name[shelf.id][2]);
                            break;
                        } else if (valueAxis[i] === ChartConst.AXIS_XAXIS2) {
                            //X Axis1
                            shelf.name = LangManager.get(shelfId2Name[shelf.id][3]);
                            break;
                        } else {
                            //X Axis
                            shelf.name = LangManager.get(shelfId2Name[shelf.id][1]);
                        }
                    }
                }
            }
        } else if (shelf.id === ChartConst.FEEDING_SECONDARY_VALUES) {
            var valueAxis = VizUtils.getValueAxis(vizType);
            if (!!valueAxis){
                for (var i = 0; i < valueAxis.length; i++) {
                    if (valueAxis[i] === ChartConst.AXIS_YAXIS2) {
                        //Y Axis2
                        shelf.name = LangManager.get(shelfId2Name[shelf.id][0]);
                        break;
                    } else if (valueAxis[i] === ChartConst.AXIS_XAXIS2) {
                        //X Axis2
                        shelf.name = LangManager.get(shelfId2Name[shelf.id][2]);
                        break;
                    } else {
                        //X Axis
                        shelf.name = LangManager.get(shelfId2Name[shelf.id][1]);
                    }
                }
            }
        } else if (shelf.id === ChartConst.FEEDING_AXIS_LABELS) {
            var categoryAxis = VizUtils.getCategoryAxis(vizType);
            if (!categoryAxis) {
                if (vizType === ChartConst.TYPE_3D_BAR) {
                    //Y Axis for 3D_BAR
                    shelf.name = LangManager.get(shelfId2Name[shelf.id][1]);
                } else {
                    //X Axis for 3D_COLUMN and SCATTER_MATRIX
                    shelf.name = LangManager.get(shelfId2Name[shelf.id][0]);
                }
            } else {
                if (categoryAxis[0] === ChartConst.AXIS_XAXIS) {
                    //X Axis
                    shelf.name = LangManager.get(shelfId2Name[shelf.id][0]);
                } else {
                    //Y Axis
                    shelf.name = LangManager.get(shelfId2Name[shelf.id][1]);
                }
            }
        } else {
                //others
                shelf.name = LangManager.get(shelfId2Name[shelf.id]);
        }
        // For extension charts, use manifest name as shelf name
        if (!shelf.name) {
            shelf.name = feedDef.name;
        }
        shelf.analysisType = feedDef.type.toLowerCase();
        shelf.feedItemType = shelf.id === FeedUtils.geoFeeds.id ? FeedItemType.GEOGRAPHY : feedDef.type;
        // Infinity
        shelf.capacity = feedDef.maxStacked;
        return shelf;
    };
    // do smart auto feeding and balance the feeds.
    AutoFeedingUtils.smartFeeding = function(currentFeeds, currentType, analysisObjects, feedingScope) {
        return AutoFeedingUtils._autoFeedItems(AutoFeedingUtils._STRATEGY_SMART, currentFeeds, currentType, analysisObjects, feedingScope);
    };
    // do direct auto feeding without balance the feeds.
    AutoFeedingUtils.directFeeding = function(currentFeeds, currentType, analysisObjects) {
        return AutoFeedingUtils._autoFeedItems(AutoFeedingUtils._STRATEGY_DIRECT, currentFeeds, currentType, analysisObjects);
    };

    // Steps: ID Mapping > Generate pool > Merge pool and additionalAnalysisObjects > Calc size of feeds > Average
    // distribute size > Release pool by size
    AutoFeedingUtils._STRATEGY_SMART = 'smart';
    // Steps: ID Mapping > Generate pool > Merge pool and additionalAnalysisObjects > Calc size of feeds > Release pool
    // by size
    AutoFeedingUtils._STRATEGY_DIRECT = 'direct';
    /*
     * get feed items according to current from feeds
     */
    AutoFeedingUtils._autoFeedItems = function(strategy, fromFeeds, toType, additionalAnalysisObjects, feedingScope) {
        //main mapping
        fromFeeds = FeedUtils.cloneFeeds(fromFeeds);
        /**
         * {
         *  dimension: {
         *      axisLabels: {
         *          id, aaIndex, min, max
         *      },
         *      multiplier.column: {
         *      }
         *  },
         *  measure: {
         *  }
         * }
         */
        var toFeedDefinations = AutoFeedingUtils.getFeedDefsMap(toType);
        /**
         * {
         *  dimension: [FeedItem],
         *  measure: [FeedItem]
         * }
         */
        var preparedFrom = AutoFeedingUtils._prepareData(fromFeeds);
        if (!toFeedDefinations || !preparedFrom) {
            return fromFeeds;
        }

        /**
         * {
         *  dimension: [AnalysisObject],
         *  measure: [AnalysisObject]
         * }
         */
        var pool = {
            'measure' : [],
            'dimension' : [],
            'subtotal' : []
        };

        additionalAnalysisObjects = additionalAnalysisObjects || [];
        for (var i = 0; i < additionalAnalysisObjects.length; i++) {
            var analysis = additionalAnalysisObjects[i];
            if (AnalyticalType.compatible(AnalyticalType.MEASURE, analysis.type())) {
                pool.measure.push(analysis);
            } else {
                if (AnalyticalType.compatible(AnalyticalType.DIMENSION, analysis.type())) {
                    pool.dimension.push(analysis);
                }
            }
        }

        if (feedingScope) {
            AutoFeedingUtils._addFeedingScope(toFeedDefinations.measure, feedingScope);
            AutoFeedingUtils._addFeedingScope(toFeedDefinations.dimension, feedingScope);
        }
        //measure
        var toMeasureFeeds = AutoFeedingUtils._mapFeedsProcess(strategy, preparedFrom.measure, toFeedDefinations.measure, false, pool.measure);

        //Added changes to make sure that dimensions are not swapped when converting to VizType
        if(toType === "viz/ext/table" 
           && preparedFrom.dimension !== undefined && preparedFrom.dimension.length >= 2 
           && preparedFrom.dimension[0].id() === "regionColor" 
           && preparedFrom.dimension[1].id() !== "regionShape"){
                var feedSwapTemp = preparedFrom.dimension[0];
                preparedFrom.dimension[0] = preparedFrom.dimension[1];
                preparedFrom.dimension[1] = feedSwapTemp;
        }
        
        //dimension
        var toDimensionFeeds = AutoFeedingUtils._mapFeedsProcess(strategy, preparedFrom.dimension, toFeedDefinations.dimension, true, pool.dimension);

        //subtotal
        var toSubtotalFeeds = AutoFeedingUtils._mapFeedsProcess(strategy, preparedFrom.subtotal, toFeedDefinations.subtotal, false, pool.subtotal);

	// cleanse the DimensionFeeds of any subtotal analysis objects as we do not them to map any other chart/shelf..
	for (var i = 0; i < toDimensionFeeds.length; i++) {
		var curFeedItem = toDimensionFeeds[i];
		var feedAnalysisObjects = curFeedItem.values();
		for (var j = 0; j < feedAnalysisObjects.length; j++) {
			var curAnalysisObject = feedAnalysisObjects[j];
			if (curAnalysisObject.aggregationType()) {
				feedAnalysisObjects.splice(j, 1);
			}
		}
	}
        //merge into one feeds
        var toFeeds = toMeasureFeeds.concat(toDimensionFeeds);
        toFeeds = toFeeds.concat(toSubtotalFeeds);

        return toFeeds;
    };
 

    /**
     * add auto feeding scope flag in feedDefination, 
     * flag : outOfFeedingScope means feedId is not in feedingScope, 
     * If source feedItems in feeding scope then run auto feeding process, else just copy source to target in id Mapping.
     */
    AutoFeedingUtils._addFeedingScope = function(feedDefsMap, feedingScope) {
        if (feedingScope) {
            for (var feedId in feedDefsMap) {
                if (feedingScope.indexOf(feedId) === -1) {
                    feedDefsMap[feedId].outOfFeedingScope = true; 
                }
            }
        }
    };
    /**
     * whether need to auto feeding
     */
    AutoFeedingUtils.needAutoFeeding = function(fromfeeds, fromType, toType) {
        var need = true;
        if (!toType || fromType === toType || (!fromfeeds)) {
            need = false;
        }
        return need;
    };
    /**
     * get feedDefs according to vizType
     */
    AutoFeedingUtils.getFeedDefsMap = function(vizType) {
        var map = {
            'measure' : {},
            'dimension' : {},
            'subtotal' : {}
        };
        var toFeedDefs = FeedUtils.getVizFeeds(vizType);
        if (toFeedDefs) {
            for (var i = 0; i < toFeedDefs.length; i++) {
                var toFeedDef = toFeedDefs[i];
                if (toFeedDef.type === FeedItemType.MEASURE) {
                    map.measure[toFeedDef.id] = AutoFeedingUtils._addMinAndMaxStackedToFeedDef(toFeedDef);
                } else if (toFeedDef.type === FeedItemType.DIMENSION) {
                    if (toFeedDef.id === FeedUtils.MultiplierFeedingName) {
                        // Trillis
                        var rowsFeedDef = Utils.clone(toFeedDef);
                        rowsFeedDef.id = FeedUtils.RowsFeedingName;
                        map.dimension[FeedUtils.RowsFeedingName] = AutoFeedingUtils._addMinAndMaxStackedToFeedDef(rowsFeedDef, true);
                        var columnsFeedDef = Utils.clone(toFeedDef);
                        columnsFeedDef.id = FeedUtils.ColumnsFeedingName;
                        map.dimension[FeedUtils.ColumnsFeedingName] = AutoFeedingUtils._addMinAndMaxStackedToFeedDef(columnsFeedDef, true);
                    } else {
                        // Common
                        map.dimension[toFeedDef.id] = AutoFeedingUtils._addMinAndMaxStackedToFeedDef(toFeedDef, true);
                    }
                } else if (toFeedDef.type === FeedItemType.SUBTOTAL) {
                    map.subtotal[toFeedDef.id] = AutoFeedingUtils._addMinAndMaxStackedToFeedDef(toFeedDef);
                }
            }
        } else {
            return null;
        }
        return map;
    };
    AutoFeedingUtils._addMinAndMaxStackedToFeedDef = function(feedDef, isDimension) {
        var retFeedDef = Utils.clone(feedDef);
        if (isDimension) {//dimension
            if (feedDef.id === FeedUtils.RowsFeedingName) {
                retFeedDef.minStacked = FeedUtils.trillisFeeds.row.minStacked;
                retFeedDef.maxStacked = FeedUtils.trillisFeeds.row.maxStacked;
            } else if (feedDef.id === FeedUtils.ColumnsFeedingName) {
                retFeedDef.minStacked = FeedUtils.trillisFeeds.column.minStacked;
                retFeedDef.maxStacked = FeedUtils.trillisFeeds.column.maxStacked;
            } else {
                var minStacked = 0;
                if (feedDef.min) {
                    minStacked = feedDef.minStackedDims ? feedDef.minStackedDims : feedDef.min;
                }
                retFeedDef.minStacked = minStacked;
                var maxStacked = feedDef.maxStackedDims ? feedDef.maxStackedDims : Number.MAX_VALUE;
                retFeedDef.maxStacked = maxStacked;
            }
        } else {//measure
            retFeedDef.minStacked = feedDef.min;
            retFeedDef.maxStacked = feedDef.max == 'Infinity' ? Number.MAX_VALUE : feedDef.max;
        }
        return retFeedDef;
    };
    /**
     * separate source feeds and feedDefs according to dimension and measure
     * @param{Array} fromFeeds
     * @param{String} vizType
     *
     * @return{Object}
     * sample {
     *     'measure' : {
     *          'fromFeeds': [],
     *          'feedDefs': {}
     *      },
     *     'dimension' : {
     *          'fromFeeds': [],
     *          'feedDefs': {}
     *      }
     * }
     */
    AutoFeedingUtils._prepareData = function(fromFeeds) {
        var MeasureFeeds = [];
        var DimensionFeeds = [];
        var SubtotalFeeds = [];
        if (fromFeeds.length > 0) {
            for (var i = 0; i < fromFeeds.length; i++) {
                var feedItem = fromFeeds[i];
                // we do not want to map any of the subtotal objects to other
                // chart types so exclude the feed item
                if( feedItem._id === FeedItemType.ROW_SUBTOTALS ) {
                        SubtotalFeeds.push(feedItem);
                }
                if (feedItem.type() === FeedItemType.MEASURE) {
                    MeasureFeeds.push(feedItem);
                } else if (feedItem.type() === FeedItemType.DIMENSION) {
                    DimensionFeeds.push(feedItem);
                }
            }
        }
        return {
            'measure' : MeasureFeeds,
            'dimension' : DimensionFeeds,
            'subtotal' : SubtotalFeeds
        };
    };
    /**
     * main logic of mapping feeds
     * step1 : map by feed id
     * step2 : pre calculate how many values should each feed item have.
     * step3 : locate values to feeds according to results of precalculation.
     *
     * @param{Array} fromFeeds
     * @param{Object} feedDefsMap
     * @param{[AnalysisObject]} pool
     */
    AutoFeedingUtils._mapFeedsProcess = function(strategy, fromFeeds, feedDefsMap, isDimension, pool) {
        //map by id
        var result = AutoFeedingUtils._idMapping(fromFeeds, feedDefsMap);

        var toFeedsMap = result.feeds;
        pool = result.pool.concat(pool || []);
        var sortedIds = AutoFeedingUtils._getSortedIds(feedDefsMap, isDimension, true);
        //feed mnd and geo
        if (isDimension) {
            //feed mnd
            var indexOfMND = FeedUtils.indexOfMNDInValues(pool);
            //has mnd in pool
            if (indexOfMND !== -1) {
                var mndValue = pool[indexOfMND];
                pool.splice(indexOfMND, 1);
                AutoFeedingUtils._autoFeedMNDValue(sortedIds, feedDefsMap, toFeedsMap, mndValue);
            }

	    //feed geo
            //feed the feedItem with id FeedUtils.geoFeeds.id and its capacity is 1.
            //pool and toFeedsMap may be changed during this process
            if (strategy === AutoFeedingUtils._STRATEGY_SMART) {
                AutoFeedingUtils._feedGeographyFeedItem(sortedIds, feedDefsMap, toFeedsMap, pool);
            }
        }

        sortedIds.forEach(function(id){
            toFeedsMap[id] = toFeedsMap[id] || new FeedItem(id, feedDefsMap[id].type, []);
        });

        //precalculate size
        var id2size = AutoFeedingUtils._precalFeedItemValuesSize(strategy, sortedIds, feedDefsMap, toFeedsMap, pool.length, isDimension);

        //push values to feeds according to cal size
        var allSortedIds = AutoFeedingUtils._getSortedIds(feedDefsMap, isDimension);
        var finalFeedsMap = AutoFeedingUtils._locateValuestoFeeds(allSortedIds, feedDefsMap, toFeedsMap, pool, id2size);

        //convert map to array
        var toFeeds = AutoFeedingUtils._convertToFeeds(allSortedIds, finalFeedsMap);
        return toFeeds;
    };
    /**
     * map by feed id
     *
     * @param{Array} fromFeeds in
     * @param{Object} feedDefsMap in
     * @param{Object} toFeedsMap out
     * @param{Array} pool out
     */
    AutoFeedingUtils._idMapping = function(fromFeeds, feedDefsMap) {
        var toFeedsMap = {};
        var pool = [];
        var mndValue;
        var rowAndColumnValues = FeedUtils.getRowAndColumnValues(fromFeeds);
        for (var i = 0; i < fromFeeds.length; i++) {
            var feedItem = fromFeeds[i];
            var id = feedItem.id();
            var values = feedItem.values();
            values = values ? values : [];
            var toId = AutoFeedingUtils._getIdByShelfName(id, feedDefsMap);
            if (toId) {
                if (feedDefsMap[toId].outOfFeedingScope) {
                    //outOfFeedingScope: this flag means just copy from source to target, not run other auto feeding process
                    toFeedsMap[toId] = feedItem;
                    continue;
                }
                var max = feedDefsMap[toId].maxStacked;                
                var acceptMND = FeedUtils.canAcceptMND(feedDefsMap[toId].acceptMND);
                var indexOfMNDValue = FeedUtils.indexOfMNDInValues(values);
                var needRemoveMND = false;
                if (!acceptMND) {
                    //remove mnd if not accept mnd
                    needRemoveMND = true;
                    
                } else {                    
                    if (indexOfMNDValue > max) {
                        //remove mnd if mnd value's index exceeds its capacity
                        needRemoveMND = true;
                                                
                    } else {
                        var maxDataContainer = feedDefsMap[toId].max;
                        var numDataContainer;                    
                        var indexOfMNDValueForTrellis = -1;
                        //calculate num of row or column datacontainer, should merge row and column values
                        if (id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName) {
                            numDataContainer = FeedUtils.countDataContainers(rowAndColumnValues);
                            indexOfMNDValueForTrellis = FeedUtils.indexOfMNDInValues(rowAndColumnValues);
                        } else {
                            numDataContainer = FeedUtils.countDataContainers(values);
                        }
                        if (numDataContainer > maxDataContainer) {
                            if (id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName) {
                                if (indexOfMNDValueForTrellis === 0) {//mnd is at first
                                    if (indexOfMNDValue === 0) {
                                        max = 1;//can have only mnd and remove other values
                                    } else if (indexOfMNDValue === -1) {//mnd in row but current feed is column
                                        max = 0;//remove not mnd values
                                    }
                                } else {//remove mnd if mnd is not at first
                                    needRemoveMND = true;
                                    //remove mnd from rowAndColumnValues when mnd will be removed from current values
                                    //case: row is not empty and mnd is in columns
                                    if (indexOfMNDValue !== -1 && indexOfMNDValueForTrellis !== -1) {
                                        rowAndColumnValues.splice(indexOfMNDValueForTrellis, 1);;  
                                    }
                                }
                            } else {
                                if (indexOfMNDValue === 0) {
                                    max = 1;//can push only mnd
                                } else {//remove mnd if mnd value's index exceeds its datacontainer's limit
                                    needRemoveMND = true;
                                }
                            }
                        }
                    }
                }
                //remove mndValue from values when values has mnd and needRomoveMND is true
                if (needRemoveMND && indexOfMNDValue !== -1) {
                    //remove mndValue
                    mndValue = values[indexOfMNDValue];
                    values.splice(indexOfMNDValue, 1);
                    AutoFeedingUtils._pushFeedItemValuesToPool([mndValue], pool);
                }
                //check max
                if (max < values.length) {
                    var remainingValues = values.slice(max, values.length);
                    AutoFeedingUtils._pushFeedItemValuesToPool(remainingValues, pool);
                    var toValues = values.slice(0, max);
                    var toFeedItem = new FeedItem(toId, feedItem.type(), toValues);
                    toFeedsMap[toId] = toFeedItem;
                } else {
                    toFeedsMap[toId] = new FeedItem(toId, feedItem.type(), values);
                }
            } else {
                //push to pool if not found
                AutoFeedingUtils._pushFeedItemValuesToPool(values, pool);
            }
        }

        return {
            'feeds' : toFeedsMap,
            'pool' : pool
        };
    };
    /**
     * move mnd value to some feed item
     */
    AutoFeedingUtils._autoFeedMNDValue = function(sortedIds, feedDefsMap, feedsMap, mndValue) {
        var curAcceptMND = -1;//priority of feeding mnd
        var feedIdOfMND;
        var feeds = AutoFeedingUtils._convertToFeeds(sortedIds, feedsMap);
        for (var i = 0; i < sortedIds.length; i++) {
            var id = sortedIds[i];
            var feedDef = feedDefsMap[id];
            var isMNDVisible = true;
            var isMND = true;
            var canFeedMND = FeedUtils.canAddValue(feeds, id, feedDefsMap, isMNDVisible, isMND);
            if (canFeedMND) {
                var acceptMND = feedDef.acceptMND;
                var feedItem = feedsMap[id];
                var values = feedItem ? feedItem.values() : null;
                var numDataContainers = FeedUtils.countDataContainers(values);
                var min = feedDefsMap[id].min;
                if (numDataContainers < min) {
                    // Add 10 priority when min not meet
                    acceptMND += 10;
                }
                if (acceptMND > curAcceptMND) {
                    curAcceptMND = acceptMND;
                    feedIdOfMND = id;
                }
            }
        }
        if (feedIdOfMND) {
            var feedItem = feedsMap[feedIdOfMND];
            var feedDef = feedDefsMap[feedIdOfMND];
            var values = feedItem ? feedItem.values() : [];
            values.push(mndValue);
            feedsMap[feedIdOfMND] = new FeedItem(feedDef.id, feedDef.type, values);
        }
    };
    /**
     * feed geography values to the FeedItem of id FeedUtils.geoFeeds.id
     */
    AutoFeedingUtils._feedGeographyFeedItem = function(sortedIds, feedDefsMap, feedsMap, pool) {
        //not feed if no geography feeditem
        var geographyFeedDef = feedDefsMap[FeedUtils.geoFeeds.id];
        if (!geographyFeedDef) {
            return;
        }

        var geographyFeedItem = feedsMap[FeedUtils.geoFeeds.id];
        if (!geographyFeedItem) {
            geographyFeedItem = new FeedItem(FeedUtils.geoFeeds.id, geographyFeedDef.type, []);
        }
        //not feed if geography feeditem's values reach capacity 1
        var values = geographyFeedItem.values();
        if (values.length > 0) {
            return;
        }

        var _findGeographyValue = function(valuesAry) {
            var retIndex = -1;
            for (var i = 0; i < valuesAry.length; i++) {
                var value/*AnalysisObject*/ = valuesAry[i];
                if (value.dataType() && value.dataType().toLowerCase() === FeedItemType.GEOGRAPHY.toLowerCase()) {
                    retIndex = i;
                    break;
                }
            }
            return retIndex;
        };
        var newValue;
        //find geography value from pool for feeding
        var index = _findGeographyValue(pool);
        if (index !== -1) {
            newValue = pool[index];
            pool.splice(index, 1);
        } else {
            //find geography value from feedsMap for balancing
            var id, feedDef, feedItem, srcValues;
            for (var i = 0; i < sortedIds.length; i++) {
                id = sortedIds[i];
                feedDef = feedDefsMap[id];
                feedItem = feedsMap[id];
                if (id === FeedUtils.geoFeeds.id || !feedItem) {
                    continue;
                }
                srcValues = feedItem.values();
                if (srcValues.length > 1 && srcValues.length > feedDef.minStacked) {
                    index = _findGeographyValue(srcValues);
                    if (index !== -1) {
                        newValue = srcValues[index];
                        srcValues.splice(index, 1);
                        break;
                    }
                }
            }
        }
        if (newValue) {
            //update values of the geography feeditem
            values.push(newValue);
            feedsMap[FeedUtils.geoFeeds.id] = geographyFeedItem;
        }
    };
    /**
     * get id according to from shelf name and to shelf name
     *
     * @param{Array} fromId
     * @param{Object} feedDefsMap
     *
     * @return{String} id
     */
    AutoFeedingUtils._getIdByShelfName = function(fromId, feedDefsMap) {
        //return fromid if found id in to feedDefs
        if (feedDefsMap[fromId]) {
            return fromId;
        }
        var fromShelfName = shelfId2Name[fromId];
        for (var id in feedDefsMap) {
            if (feedDefsMap.hasOwnProperty(id)) {
                var feedDef = feedDefsMap[id];
                var toShelfName = shelfId2Name[id];
                if (fromShelfName === toShelfName) {
                    return id;
                }
            }
        }
        return null;
    };
    /**
     * locate values to feeds according to results of precalculation.
     *
     * @param{Object} feedDefsMap
     * @param{Object} feedsMap
     * @param{Array} pool
     * @param{Object} id2size
     */
    AutoFeedingUtils._locateValuestoFeeds = function(sortedIds, feedDefsMap, feedsMap, pool, id2size) {
        var i, id, feedItem, values, calSize;
        //move values over enough out of the feedsMap to pool
        for ( i = 0; i < sortedIds.length; i++) {
            id = sortedIds[i];
            feedItem = feedsMap[id];
            if (feedItem) {
                values = feedItem.values();
                calSize = id2size[id];
                //move values over enough out of the feedsMap
                if (values.length > calSize) {
                    //not move out mnd value
                    var indexOfMNDValue = FeedUtils.indexOfMNDInValues(values);
                    if (indexOfMNDValue !== -1 && indexOfMNDValue >= calSize) {
                        var mndValue = values[indexOfMNDValue];
                        values.splice(indexOfMNDValue, 1);
                        values.splice(calSize - 1, 0, mndValue);
                    }
                    var remainingValues = values.slice(calSize, values.length);
                    AutoFeedingUtils._pushFeedItemValuesToPool(remainingValues, pool);
                }
            }
        }
        //update values according to cal size
        for ( i = 0; i < sortedIds.length; i++) {
            id = sortedIds[i];
            feedItem = feedsMap[id];
            if (!feedItem) {
                feedItem = new FeedItem(id, feedDefsMap[id].type, []);
                feedsMap[id] = feedItem;
            }

            var valuesChanged = false;
            calSize = id2size[id];
            values = feedItem.values();
            if (calSize < values.length) {
                valuesChanged = true;
                //remove overflow values
                values = values.slice(0, calSize);
            } else if (calSize > values.length && pool.length > 0) {
                valuesChanged = true;
                //fill values from pool
                var duplicatedValuesCache = [];
                var isLastValueMND = false;
                if (values.length > 1 && values[values.length - 1].type() === AnalyticalType.MND) {
                    isLastValueMND = true;
                }
                while (pool.length > 0 && calSize > values.length) {
                    var newValue = pool.shift();
                    //add undupicated newValue to feedItem
                    if (!FeedUtils.feedHasValue(newValue, feedItem)) {
                        if (isLastValueMND) {
                            //Since chart cannot be drawn if the mnd value is in the middle of the values,
                            //insert new value ahead of mnd value so that mnd value was kept at the end.
                            values.splice(values.length - 1, 0, newValue);
                        } else {
                            values.push(newValue);
                        }
                    } else {
                        duplicatedValuesCache.push(newValue);
                    }
                }
                //add duplicatedValuesCache at pool's end for the following loop
                if (duplicatedValuesCache.length > 0) {
                    pool = pool.concat(duplicatedValuesCache);
                }
            }

            if (valuesChanged) {
                feedsMap[id] = new FeedItem(id, feedDefsMap[id].type, values);
            }
        }
        return feedsMap;
    };
    /**
     * push values to pool
     */
    AutoFeedingUtils._pushFeedItemValuesToPool = function(feedItemValues, pool) {
        for (var i = 0; i < feedItemValues.length; i++) {
            var feedItemValue = feedItemValues[i];
            pool.push(feedItemValue);
        }
    };
    /**
     * pre calculate how many values should each feed item have based on pool's size
     * step1: base condition: balance over enough feeditems and not enough feeditems
     * step2: if not meet step1 balance over enough feeditems and not enough feeditems
     * step3: if meet step1 then fill empty feeditems size 1
     * step4: if meet step3 then fill all feeditems size max
     * if pool still has remaining then ignore
     *
     * @return{Object} id2size
     */
    AutoFeedingUtils._precalFeedItemValuesSize = function(strategy, sortedIds, feedDefsMap, feedsMap, poollen, isDimension) {
        var id2size = AutoFeedingUtils._initializeId2Size(sortedIds, feedsMap);
        var id2canFeed;
        if (isDimension) {
            id2canFeed = AutoFeedingUtils._getFeedsStatus(sortedIds, feedDefsMap, feedsMap);
        }
        //step1: base condition: balance over enough feeditems and not enough feeditems
        var needToFillFeedsId = AutoFeedingUtils._getNeedToFillFeedsId(sortedIds, id2size, feedDefsMap);
        //check whether id mapping success;
        var mapSuccess = !needToFillFeedsId.length;
        var curIndex = 0;
        var success;
        var i;
        var id;
        var size;
        var min;
        var addsize;
        if (!mapSuccess && poollen > 0) {
            success = true;
            for ( i = 0; i < needToFillFeedsId.length; i++) {
                curIndex = i;
                id = needToFillFeedsId[i];
                if (isDimension && !id2canFeed[id]) {
                    continue;
                }
                size = id2size[id];
                min = feedDefsMap[id].minStacked;
                addsize = min - size;
                if (poollen < addsize) {
                    addsize = poollen;
                    success = false;
                }
                id2size[id] = size + addsize;
                poollen -= addsize;
                if (!poollen) {
                    break;
                }
            }
            mapSuccess = success && (curIndex == needToFillFeedsId.length - 1);
        } else if (!mapSuccess) {
            if (strategy === AutoFeedingUtils._STRATEGY_SMART) {
                //step2:balance over enough feeditems and not enough feeditems if not meet base condition:min mapping
                var oveminFeedsId = AutoFeedingUtils._getOverMinFeedsId(sortedIds, id2size, feedDefsMap);
                if (oveminFeedsId.length > 0) {
                    success = true;
                    var overcanmoveMap = [];
                    var overcanmoveLen = 0;
                    var overid;
                    for ( i = 0; i < oveminFeedsId.length; i++) {
                        overid = oveminFeedsId[i];
                        var oversize = id2size[overid];
                        var overmin = feedDefsMap[overid].minStacked;
                        var overcanmove = oversize - overmin;
                        overcanmoveMap[overid] = overcanmove;
                        overcanmoveLen += overcanmove;
                    }
                    var curIndex2 = curIndex;
                    for ( i = curIndex; i < needToFillFeedsId.length; i++) {
                        curIndex2 = i;
                        id = needToFillFeedsId[i];
                        if (isDimension && !id2canFeed[id]) {
                            continue;
                        }
                        size = id2size[id];
                        min = feedDefsMap[id].minStacked;
                        addsize = min - size;

                        var curaddsize = addsize;
                        for (var overcanmoveid in overcanmoveMap) {
                            if (overcanmoveMap.hasOwnProperty(overcanmoveid)) {
                                var overcanmove = overcanmoveMap[overcanmoveid];
                                if (overcanmove < curaddsize) {
                                    curaddsize -= overcanmove
                                    id2size[overid] -= overcanmove;
                                } else {
                                    overcanmoveMap[overid] -= curaddsize;
                                    id2size[overid] -= curaddsize;
                                    curaddsize = 0
                                    break;
                                }
                            }
                        }

                        if (curaddsize > 0) {
                            addsize -= curaddsize;
                            success = false;
                        }
                        id2size[id] = size + addsize;
                        overcanmoveLen -= addsize;
                        if (!overcanmoveLen) {
                            break;
                        }
                    }
                    mapSuccess = success && (curIndex2 == needToFillFeedsId.length - 1);
                }
            }
            return id2size;
        }

        //step3: fill empty feeditems size 1
        if (mapSuccess && poollen > 0) {
            var emptyFeedsId = AutoFeedingUtils._getEmptyFeedsId(sortedIds, id2size);
            for ( i = 0; i < emptyFeedsId.length; i++) {
                id = emptyFeedsId[i];
                if (isDimension && !id2canFeed[id]) {
                    continue;
                }
                poollen--;
                id2size[id] = 1;
                if (!poollen) {
                    if (i < emptyFeedsId.length) {
                        mapSuccess = false;
                    }
                    break;
                }
            }
        }
        //step4: fill all feeditems size max
        if (mapSuccess && poollen > 0) {
            var notfullFeedsId = AutoFeedingUtils._getNotFullFeedsId(sortedIds, id2size, feedDefsMap);
            for ( i = 0; i < notfullFeedsId.length; i++) {
                id = notfullFeedsId[i];
                if (isDimension && !id2canFeed[id]) {
                    continue;
                }
                size = id2size[id];
                var max = feedDefsMap[id].maxStacked;
                addsize = max - size;
                if (poollen < addsize) {
                    addsize = poollen;
                }
                id2size[id] = size + addsize;
                poollen -= addsize;
                if (!poollen) {
                    break;
                }
            }
        }
        return id2size;
    };
    /**
     * convert feedsmap to array
     *
     */
    AutoFeedingUtils._convertToFeeds = function(sortedIds, feedsMap) {
        var toFeeds = [];
        for (var i = 0; i < sortedIds.length; i++) {
            var id = sortedIds[i];
            var feed = feedsMap[id];
            if (feed) {
                toFeeds.push(feed);
            }
        }
        return toFeeds;
    };
    /**
     * sorting feed according to aaIndex and mgIndex of cvom feed defination
     * flag : inScope means get sorted feedIds in feedingScope.
     *
     * @return{Array} all the ids after sorting
     */
    AutoFeedingUtils._getSortedIds = function(feedDefsMap, isDimension, inScope) {
        var sortedIds = [];
        var id2PriorityAry = [];
        for (var id in feedDefsMap) {
            var feedDef = feedDefsMap[id];
            var priority = isDimension ? feedDef.aaIndex : feedDef.mgIndex;
            if (id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName) {
                //make rows and columns sorted last since trellis sequence in feeding shelf
                priority = 1000 + feedDef.aaIndex;
            }
            id2PriorityAry.push({
                id : id,
                priority : priority
            });
        };
        id2PriorityAry.sort(function(f1, f2) {
            return f1.priority - f2.priority;
        });
        for (var i = 0; i < id2PriorityAry.length; i++) {
            var curId = id2PriorityAry[i].id;
            if (inScope && feedDefsMap[curId].outOfFeedingScope) {
                continue;
            }
            sortedIds.push(curId);
        };
        return sortedIds;
    };
    /**
     * initialize a map of all tofeeditem after id mapping, if not mapping by id then set 0
     * id: feedItem's id;
     * size: total of values that each feedItem should have, if not mapping by id then set 0.
     *
     */
    AutoFeedingUtils._initializeId2Size = function(sortedIds, feedsMap) {
        var id2size = {};
        for (var i = 0; i < sortedIds.length; i++) {
            var id = sortedIds[i];
            // exclude the row or column subtotals feedItem to the id2size map as we do not want regular dimensions being populated in
            // these feeds when transitioning between chart types
            if( id === FeedItemType.ROW_SUBTOTALS || id === FeedItemType.COLUMNS_SUBTOTALS ) {
                continue;
            }
            var size = 0;
            var feedItem = feedsMap[id];
            if (feedItem) {
                size = feedItem.values().length;
            }
            id2size[id] = size;
        }
        return id2size;
    };
    /**
     * get all the ids of not meet min
     *
     */
    AutoFeedingUtils._getNeedToFillFeedsId = function(sortedIds, id2size, feedDefsMap) {
        var feedsId = [];
        for (var i = 0; i < sortedIds.length; i++) {
            var id = sortedIds[i];
            var feedDef = feedDefsMap[id];
            var min = feedDef.minStacked;
            var size = id2size[id];
            if (size < min) {
                feedsId.push(id);
            }
        }
        return feedsId;
    };
    /**
     * get all the ids of not meet max
     *
     */
    AutoFeedingUtils._getNotFullFeedsId = function(sortedIds, id2size, feedDefsMap) {
        var feedsId = [];
        for (var i = 0; i < sortedIds.length; i++) {
            var id = sortedIds[i];
            var feedDef = feedDefsMap[id];
            var max = feedDef.maxStacked;
            var size = id2size[id];
            if (size < max) {
                feedsId.push(id);
            }
        }
        return feedsId;
    };
    /**
     * get all the ids of over enough
     *
     */
    AutoFeedingUtils._getOverMinFeedsId = function(sortedIds, id2size, feedDefsMap) {
        var feedsId = [];
        for (var i = 0; i < sortedIds.length; i++) {
            var id = sortedIds[i];
            var feedDef = feedDefsMap[id];
            var min = feedDef.minStacked;
            var size = id2size[id];
            //by design, row and column
            // if(id === FeedUtils.RowsFeedingName || id === FeedUtils.ColumnsFeedingName){
            // continue;
            // }
            //by design, cannot move an unempty feed to empty feed.
            if (size > 1 && size > min) {
                feedsId.push(id);
            }
        }
        return feedsId;
    };
    /**
     * get all the ids of empty feeds
     *
     */
    AutoFeedingUtils._getEmptyFeedsId = function(sortedIds, id2size) {
        var feedsId = [];
        for (var i = 0; i < sortedIds.length; i++) {
            var id = sortedIds[i];
            var size = id2size[id];
            if (size === 0) {
                feedsId.push(id);
            }
        }
        return feedsId;
    };
    /**
     * get the status about whether can feed of each feeditem
     */
    AutoFeedingUtils._getFeedsStatus = function(sortedIds, feedDefsMap, feedsMap) {
        var id2canFeed = {};
        var aanumOfMulti;
        var _countAAOfFeedItem = function(feedId) {
            var retAANum = 0;
            if (feedId === FeedUtils.RowsFeedingName || feedId === FeedUtils.ColumnsFeedingName) {
                if (aanumOfMulti !== undefined) {
                    var rowsFeedItem = feedsMap[FeedUtils.RowsFeedingName] ? feedsMap[FeedUtils.RowsFeedingName].item : null;
                    var columnsFeedItem = feedsMap[FeedUtils.ColumnsFeedingName] ? feedsMap[FeedUtils.ColumnsFeedingName].item : null;
                    var rowsValues = rowsFeedItem ? rowsFeedItem.values() : [];
                    var columnsValues = columnsFeedItem ? columnsFeedItem.values() : [];
                    var multiValues = rowsValues.concat(columnsValues);
                    retAANum = FeedUtils.countAAOfValues(multiValues);
                    aanumOfMulti = retAANum;
                } else {
                    retAANum = aanumOfMulti;
                }
            } else {
                var feedItem = feedsMap[feedId];
                retAANum = FeedUtils.countAAOfFeedItem(feedItem);
            }
            return retAANum;
        };
        
        var allSortedIds = AutoFeedingUtils._getSortedIds(feedDefsMap, true);
        var feeds = AutoFeedingUtils._convertToFeeds(allSortedIds, feedsMap);
        var aanumOfFeeds = FeedUtils.countAAOfFeeds(feeds);
        var canAdd = (aanumOfFeeds <= FeedUtils.MaxDemensionFeedsCount);

        var isMNDVisible = true;
        var isMND = false;

        for (var i = 0; i < sortedIds.length; i++) {
            var canFeedMND = false;
            //feeding geography values has been finished before calculating id2size
            if (canAdd) {
                var id = sortedIds[i];
                if (id === FeedUtils.geoFeeds.id) {
                    id2canFeed[id] = false;
                    continue;
                }
                var feedDef = feedDefsMap[id];
                canFeedMND = FeedUtils.canAddValue(feeds, id, feedDefsMap, isMNDVisible, isMND);
                if (canFeedMND) {
                    var aaCountOfFeedItem = _countAAOfFeedItem(id);
                    if (aaCountOfFeedItem === 0) {
                        aanumOfFeeds++;
                        if (aanumOfFeeds > FeedUtils.MaxDemensionFeedsCount) {
                            canFeedMND = false;
                            aanumOfFeeds--;
                        } else if (id === FeedUtils.RowsFeedingName) {
                            //if rows can feed then columns can feed
                            aanumOfFeeds--;
                        }
                    }
                    canAdd = (aanumOfFeeds <= FeedUtils.MaxDemensionFeedsCount);
                }
            }
            id2canFeed[id] = canFeedMND;
        }
        return id2canFeed;
    };
    /**
     * map shelf's id to shelf's name
     *
     */
    var shelfId2Name = {
        //"primaryValues" map to "Y Axis1" for common chart
        //"primaryValues" map to "X Axis" for bubble chart and horizontal chart
        //"primaryValues" map to "X Axis1" for dual horizontal chart
        "primaryValues" : ['VIZ_COMMON_YAXIS', 'VIZ_COMMON_XAXIS', 'VIZ_COMMON_PRIMARY_YAXIS', 'VIZ_COMMON_PRIMARY_XAXIS'],
        //"secondaryValues" map to "Y Axis2" for common chart
        //"secondaryValues" map to "Y Axis" for bubble chart
        //"primaryValues" map to "X Axis2" for dual horizontal chart
        "secondaryValues" : ['VIZ_COMMON_SECONDARY_YAXIS', 'VIZ_COMMON_YAXIS', 'VIZ_COMMON_SECONDARY_XAXIS'],
        "pieSectorSize" : 'VIZ_COMMON_PIE_SECTORS',
        "pieDepthSize" : 'VIZ_COMMON_PIE_DEPTH',
        "featureValues" : 'VIZ_COMMON_FEATUREVALUES',
        "bubbleWidth" : 'VIZ_COMMON_BUBBLE_WIDTH',
        "bubbleHeight" : 'VIZ_COMMON_BUBBLE_HEIGHT',
        "rectangleColor" : 'VIZ_COMMON_RECTANGLECOLOR',
        "rectangleWeight" : 'VIZ_COMMON_RECTANGLEWEIGHT',
        "regionColor" : 'VIZ_COMMON_REGIONCOLOR',
        //"axisLabels" map to "Y Axis" for horizontal chart
        "axisLabels" : ['VIZ_COMMON_XAXIS','VIZ_COMMON_YAXIS'],
        "pieSectorColor" : 'VIZ_COMMON_REGIONCOLOR',
        "geoFeatures" : 'VIZ_COMMON_GEO_FEATURES',
        "featureAnalysis" : 'VIZ_COMMON_FEATUREANALYSIS',
        "regionShape" : 'VIZ_COMMON_REGIONSHAPE',
        "rectangleTitle" : 'VIZ_COMMON_AREANAME',
        "mainLabelAxis" : 'VIZ_COMMON_AREANAME',
        "secondaryLabelAxis" : 'VIZ_COMMON_SECONDARY_AREANAME',
        "radarAxesValues" : 'VIZ_COMMON_YAXIS',
        "radarAxes" : 'VIZ_COMMON_RADAR_AXES',
        "tagWeight" : 'VIZ_COMMON_TAGWEIGHT',
        "tagFamily" : 'VIZ_COMMON_TAGFAMILY',
        "tagName" : 'VIZ_COMMON_TAGNAME',
        "multiplier.column" : 'VIZ_COMMON_COLUMNS',
        "multiplier.row" : 'VIZ_COMMON_ROWS',
        "treeNode" : 'VIZ_COMMON_TREENODE',
        "link" : 'VIZ_COMMON_LINK',
        "rows" : 'VIZ_COMMON_TABLE_DIMENSION',
        "values" : 'VIZ_COMMON_TABLE_MEASURE',
        "r_subtotals" : 'VIZ_COMMON_TABLE_ROWS_SUBTOTALS',
        "cols" : 'VIZ_COMMON_TABLE_COLUMNS_AXIS',
        "c_subtotals" : 'VIZ_COMMON_TABLE_COLUMNS_SUBTOTALS'
    };
    return AutoFeedingUtils;
});

/**
 * AbstractFilter, DateRangeFilter, NumericRangeFilter and ValueFilter are copied from Lumira desktop.
 */
// @formatter:off
define('sap/viz/controls/common/filter/AbstractFilter',[],
function() {
// @formatter:on

    /**
     * Base class for FilterItem.
     */
    var AbstractFilter = function(type, objectId, objectName) {
        this.__className = "sap.viz.controls.common.filter.AbstractFilter";

        this.filterType = type;
        this.filteredObjectId = objectId;
        this.filteredObjectName = objectName;
        this.isReverse = true;
        
        this._isGlobalFilter = false;
    };

    AbstractFilter.VALUE_TYPE = "VALUE_FILTER_TYPE";
    AbstractFilter.NUMERIC_RANGE_TYPE = "NUMERIC_RANGE_TYPE";
    AbstractFilter.DATE_RANGE_TYPE = "DATE_RANGE_TYPE";

    AbstractFilter.prototype.getType = function() {
        return this.filterType;
    };

    AbstractFilter.prototype.getFilteredObjectId = function() {
        return this.filteredObjectId;
    };


    AbstractFilter.prototype.getFilteredObjectName = function() {
        return this.filteredObjectName;
    };
    
    AbstractFilter.prototype.setReverseSelection = function(reverse) {
        this.isReverse = reverse;
    };

    AbstractFilter.prototype.isReverseSelection = function() {
        return this.isReverse;
    };
    
    AbstractFilter.prototype.isEmpty = function() {
        return false;
    };
    
    AbstractFilter.prototype.toJSON = function() {
        var jsoned = {};
        jsoned.filteredObjectId = this.filteredObjectId;
        jsoned.filteredObjectName = this.filteredObjectName;
        jsoned.filterType = this.filterType;
        jsoned.isReverse = this.isReverse;
        jsoned.isGlobalFilter = this._isGlobalFilter;
        return jsoned;
    };
    
    // To support backward compatibility, provide below functions wrappers.    
    /**
     * Get analysisObjectId
     */
    AbstractFilter.prototype.analysisObjectId = function() {
        return this.getFilteredObjectId();
    };
    
    /**
     * Get Id
     */
    AbstractFilter.prototype.id = function() {
        //For FilterBar to exclude the existing filter items
        return this.getFilteredObjectId();
    };
    
    /**
     *  Get filterName.
     */
    AbstractFilter.prototype.filterName = function() {
        return this.getFilteredObjectName();
    };
    
    /**
     * Get/Set isExcluded flag.
     *
     * @returns {Boolean}
     */
    AbstractFilter.prototype.isExcluded = function(isExcluded) {
        if (arguments.length > 0) {
            this.isReverse = !isExcluded;
        } else {
            return !this.isReverse;
        }
    };
    
    /**
     * Get/Set isGlobalFilter flag.
     *
     * @returns {Boolean}
     */
    AbstractFilter.prototype.isGlobalFilter = function(isGlobalFilter) {
        if (arguments.length > 0) {
            this._isGlobalFilter = isGlobalFilter;
            return this;
        } else {
            return this._isGlobalFilter;
        }
    };
    
    /**
     * Get filter title.
     */
    AbstractFilter.prototype.filterTitle = function() {
        return this.filteredObjectName;
    };
    
    /**
     * Get filter content.
     */
    AbstractFilter.prototype.filterContent = function() {
        return this.filteredObjectName;
    };

    return AbstractFilter;
});

define('sap/viz/controls/common/utils/OOUtil',[],function() {

    // make sure undefined is undefined
    var undefined;

    var OOUtil = {};

    /**
     * Extend class, superClz's constructor will be applied with no parameters.
     *
     * @para {function} subClz the sub class
     * @para {function} superClz the super class to be extended
     * @return {function} the extended subClz
     * @public
     * @static
     */
    OOUtil.extend = function(subClz, superClz) {
        var subClzPrototype = subClz.prototype;

        // add the superclass prototype to the subclass definition
        subClz.superclass = superClz.prototype;

        // copy prototype
        var F = function() {
        };
        F.prototype = superClz.prototype;

        subClz.prototype = new F();
        for(var prop in subClzPrototype) {
            if(subClzPrototype.hasOwnProperty(prop)) {
                subClz.prototype[prop] = subClzPrototype[prop];
            }
        }
        subClz.prototype.constructor = subClz;
        if(superClz.prototype.constructor == Object.prototype.constructor) {
            superClz.prototype.constructor = superClz;
        }
        return subClz;
    };
    return OOUtil;
});

// @formatter:off
define('sap/viz/controls/common/filter/DateRangeFilter',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/managers/LangManager'
],
function(OOUtil, AbstractFilter, LangManager) {
// @formatter:on

    var DateRangeFilter = function(objectId, objectName) {
        var args = [];
        args.push(AbstractFilter.DATE_RANGE_TYPE);
        args.push(objectId);
        args.push(objectName);
        DateRangeFilter.superclass.constructor.apply(this, args);
        this.__className = "sap.viz.controls.common.filter.DateRangeFilter";

        this.minDate = null;
        this.maxDate = null;
        this.excludeNull = false;
    };

    OOUtil.extend(DateRangeFilter, AbstractFilter);

    DateRangeFilter.prototype.isEmpty = function() {
        // if both of minDate and maxDate = null, the filter is empty
        if (this.minDate === null && this.maxDate === null) {
            return true;
        }
        return false;
    };

    DateRangeFilter.prototype.getMin = function() {
        return this.minDate;
    };

    DateRangeFilter.prototype.getMax = function() {
        return this.maxDate;
    };

    DateRangeFilter.prototype.isExcludeNull = function() {
        return this.excludeNull;
    };

    DateRangeFilter.prototype.setMin = function(min) {
        this.minDate = min;
    };

    DateRangeFilter.prototype.setMax = function(max) {
        this.maxDate = max;
    };

    DateRangeFilter.prototype.setExcludeNull = function(exclude) {
        this.excludeNull = exclude;
    };

    DateRangeFilter.prototype.toJSON = function() {
        var jsoned = DateRangeFilter.superclass.toJSON.apply(this, arguments);
        jsoned.minDate = this.minDate;
        jsoned.maxDate = this.maxDate;
        jsoned.excludeNull = this.excludeNull;
        return jsoned;
    };

    DateRangeFilter.fromJSON = function(filterJson) {
        var filter = new DateRangeFilter(filterJson.filteredObjectId, filterJson.filteredObjectName);
        filter.setReverseSelection(filterJson.isReverse);
        filter.isGlobalFilter(filterJson.isGlobalFilter);
        filter.minDate = filterJson.minDate;
        filter.maxDate = filterJson.maxDate;
        filter.excludeNull = filterJson.excludeNull;
        return filter;
    };
    
    DateRangeFilter.prototype.clone = function(){
        var jsonObj = this.toJSON();
        return DateRangeFilter.fromJSON(jsonObj);
    };
    /**
     * Get filter title.
     * @override
     */
    DateRangeFilter.prototype.filterTitle = function() {
        return this.filteredObjectName + '('+ LangManager.get('VIZ_COMMON_BETWEEN') +')';
    };
    /**
     * Get filter content.
     * @override
     */
    DateRangeFilter.prototype.filterContent = function() {
        return '(' + this.minDate + '  -  ' + this.maxDate + ')';
    };

    return DateRangeFilter;
});

// @formatter:off
define('sap/viz/controls/common/filter/NumericRangeFilter',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/managers/LangManager'
],
function(OOUtil, AbstractFilter, LangManager) {
// @formatter:on

    var NumericRangeFilter = function(objectId, objectName) {
        var args = [];
        args.push(AbstractFilter.NUMERIC_RANGE_TYPE);
        args.push(objectId);
        args.push(objectName);

        NumericRangeFilter.superclass.constructor.apply(this, args);
        this.__className = "sap.viz.controls.common.filter.NumericRangeFilter";

        this.minValue = null;
        this.maxValue = null;
        this.excludeNull = false;
    };

    OOUtil.extend(NumericRangeFilter, AbstractFilter);

    NumericRangeFilter.prototype.isEmpty = function() {
        // if both of minValue and maxValue = null, the filter is empty
        if (this.minValue === null && this.maxValue === null) {
            return true;
        }
        return false;
    };

    NumericRangeFilter.prototype.getMin = function() {
        return this.minValue;
    };

    NumericRangeFilter.prototype.getMax = function() {
        return this.maxValue;
    };

    NumericRangeFilter.prototype.isExcludeNull = function() {
        return this.excludeNull;
    };

    NumericRangeFilter.prototype.setMin = function(min) {
        this.minValue = min;
    };

    NumericRangeFilter.prototype.setMax = function(max) {
        this.maxValue = max;
    };

    NumericRangeFilter.prototype.setExcludeNull = function(exclude) {
        this.excludeNull = exclude;
    };

    NumericRangeFilter.prototype.toJSON = function() {
        var jsoned = NumericRangeFilter.superclass.toJSON.apply(this, arguments);
        jsoned.minValue = this.minValue;
        jsoned.maxValue = this.maxValue;
        jsoned.excludeNull = this.excludeNull;
        return jsoned;
    };

    NumericRangeFilter.fromJSON = function(filterJson) {
        var filter = new NumericRangeFilter(filterJson.filteredObjectId, filterJson.filteredObjectName);
        filter.setReverseSelection(filterJson.isReverse);
        filter.isGlobalFilter(filterJson.isGlobalFilter);
        filter.minValue = filterJson.minValue;
        filter.maxValue = filterJson.maxValue;
        filter.excludeNull = filterJson.excludeNull;
        return filter;
    };

    NumericRangeFilter.prototype.clone = function(){
        var jsonObj = this.toJSON();
        return NumericRangeFilter.fromJSON(jsonObj);
    };
    /**
     * Get filter title.
     * @override
     */
    NumericRangeFilter.prototype.filterTitle = function() {
        return this.filteredObjectName + '('+ LangManager.get('VIZ_COMMON_BETWEEN') +')';
    };
    /**
     * Get filter content.
     * @override
     */
    NumericRangeFilter.prototype.filterContent = function() {
        return '(' + this.minValue + '  -  ' + this.maxValue + ')';
    };

    return NumericRangeFilter;
});

// @formatter:off
define('sap/viz/controls/common/filter/ValueFilter',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/filter/AbstractFilter'
],
function(OOUtil, AbstractFilter) {
// @formatter:on

    var ValueFilter = function(objectId, objectName) {
        ValueFilter.superclass.constructor.apply(this, [AbstractFilter.VALUE_TYPE, objectId, objectName]);
        this.__className = "sap.viz.controls.common.filter.ValueFilter";

        this.hierarchyLevelId = null;
        this.filteredValues = [];
    };

    OOUtil.extend(ValueFilter, AbstractFilter);


    ValueFilter.prototype.getValues = function() {
        return this.filteredValues;
    };

    ValueFilter.prototype.isEmpty = function() {
        if (this.filteredValues && this.filteredValues.length > 0) {
            return false;
        } else {
            return true;
        }
    };

    ValueFilter.prototype.removeAllValues = function() {
        this.filteredValues.length = 0;
    };

    /**
     * Add filter value.
     * value = {
     *     'value' : filterLabel,
     *     'infoValue' : filterInfos,
     *     'paths' : {
     *         'name' : pathName,
     *         'value' : pathValue,
     *         'infoValue' : pathInfos
     *     }
     * }
     */
    ValueFilter.prototype.addValue = function(value) {
        return this.filteredValues.push(value);
    };

    ValueFilter.prototype.removeValue = function(value) {
        //var index = this.filteredValues.indexOf(value);

        for (var i = 0; i < this.filteredValues.length; i++) {
            if (this.filteredValues[i].key === value.key && this.filteredValues[i].value === value.value) {
                this.filteredValues.splice(i, 1);
            }

        }
        /*if(index !== -1)
         {
         this.filteredValues.splice(index, 1);
         }*/
    };

    ValueFilter.prototype.toJSON = function() {
        var jsoned = ValueFilter.superclass.toJSON.apply(this, arguments);
        jsoned.filteredValues = this.filteredValues;
        if (this.hierarchyLevelId) {
            jsoned.hierarchyLevelId = this.hierarchyLevelId;
        }
        return jsoned;
    };

    ValueFilter.fromJSON = function(filterJson) {
        var filter = new ValueFilter(filterJson.filteredObjectId, filterJson.filteredObjectName);
        filter.setReverseSelection(filterJson.isReverse);
        filter.isGlobalFilter(filterJson.isGlobalFilter);
        filter.filteredValues = filterJson.filteredValues;
        if (filterJson.hierarchyLevelId) {
            filter.hierarchyLevelId = filterJson.hierarchyLevelId;
        }
        return filter;
    };
    
    ValueFilter.prototype.clone = function(){
        var jsonObj = this.toJSON();
        return ValueFilter.fromJSON(jsonObj);
    };
    ///////////////////////////////////////////
    ValueFilter.prototype.values = function() {
        return this.filteredValues;
    };
    ValueFilter.prototype.updateValues = function(values) {
        return this.filteredValues = values;
    };
    /**
     * Get filter title.
     * @override
     */
    ValueFilter.prototype.filterTitle = function() {
        return this.filteredObjectName + ' (' + this.filteredValues.length + ')';
    };
    /**
     * Get filter content.
     * @override
     */
    ValueFilter.prototype.filterContent = function() {
        var valuesString = "";
        for (var i = 0, length = this.filteredValues.length; i < length; i++) {
            if (valuesString) {
                valuesString += ", " + this.filteredValues[i].value;
            } else {
                valuesString = this.filteredValues[i].value;
            }
        }
        return valuesString;
    };

    return ValueFilter;
});

// @formatter:off
define('sap/viz/controls/common/events/EventDispatcher',[
    'sap/viz/controls/common/utils/Utils'],
function(utils) {
// @formatter:on

    /**
     * The EventDispatcher class is the base class for all classes that dispatch events.
     */
    /**
     * EventDispatcher Class
     * we remove the orignal two properties, because this is Base class;
     * all the properties should be dynamically created during function call
     * of subclass.
     *
     */
    var EventDispatcher = function() {
        this.__className = "sap.viz.controls.common.events.EventDispatcher";

        // lazy create the listeners maps
        // this._listeners/*<String Array<{type:type, scope:scope, listener:listener, priority:priority}>>*/ = {};
        /**
         * {Boolean}
         */
        this._enableDispatchEvent = true;
    };

    /**
     * Registers an event listener object with an EventDispatcher object so that the listener receives notification of an
     * event.
     *
     * You can register event listeners on any EventDispatcher object for a specific type of event, scope, and
     * priority. If you no longer need an event listener, remove it by calling removeEventListener(), or memory problems
     * could result.
     *
     * @method sap.viz.controls.common.events.EventDispatcher.prototype.addEventListener
     *
     * @param {String} type
     *            The type of event.
     * @param {Function} listener
     *            The listener function that processes the event.
     * @param {Object} scope
     *            The scope.
     * @param {int} priority
     *            The priority level of the event listener.
     */
    EventDispatcher.prototype.addEventListener = function(type, listener, scope, priority) {
        // default priority is 0 if priority is not assigned or null.
        if (!priority) {
            priority = 0;
        }

        var eventListener = this._findEventListener(type, listener, scope);
        if (eventListener) {
            // already exists
            return;
        }
        eventListener = {
            type : type,
            scope : scope,
            listener : listener,
            priority : priority
        };

        var listeners = this.listeners()[type];
        if (!listeners) {
            this.listeners()[type] = listeners = [eventListener];
        } else {
            // insert the eventListener at correct position according to its priority
            var isAdded = false;
            for (var n = 0; n < listeners.length; ++n) {
                var temp = listeners[n];
                if (priority > temp.priority) {
                    listeners.splice(n, 0, eventListener);
                    isAdded = true;
                    break;
                }
            }

            if (isAdded === false) {
                listeners.push(eventListener);
            }
        }
    };

    /**
     * Removes a listener from the EventDispatcher object.
     * @method sap.viz.controls.common.events.EventDispatcher.prototype.removeEventListener
     *
     * @param {String} type
     *            The type of event.
     * @param {Function} listener
     *            The listener function that processes the event.
     * @param {Object} scope
     *            The scope.
     */
    EventDispatcher.prototype.removeEventListener = function(type, listener, scope) {
        var eventListener = this._findEventListener(type, listener, scope);
        if (eventListener) {
            var listeners = this.listeners()[type];
            listeners.splice(listeners.indexOf(eventListener), 1);
        }
    };

    /**
     * Removes the listeners of s specified event type.
     * @method sap.viz.controls.common.events.EventDispatcher.prototype.removeEventListeners
     *
     * @param {String} type
     *            The type of event.
     */
    EventDispatcher.prototype.removeEventListeners = function(type) {
        this.listeners()[type] = [];
    };

    /**
     * Removes all the event listeners.
     * @method sap.viz.controls.common.events.EventDispatcher.prototype.removeEventListeners
     *
     */
    EventDispatcher.prototype.removeAllEventListeners = function() {
        this._listeners = {};
    };

    /**
     * Checks whether the EventDispatcher object has any listeners registered for a specific type,
     * listener and scope of event.
     *
     * @param {String} type
     *            The type of event
     * @param {Function} listener
     *            The listener function that processes the event
     * @param {Object} scope
     *            scope
     * @returns {Boolean}
     */
    EventDispatcher.prototype.hasEventListener = function(type, listener, scope) {
        var eventListener = this._findEventListener(type, listener, scope);
        return eventListener !== null;
    };

    /**
     * Checks whether the EventDispatcher object has any listeners registered for a specific type
     * (with any listeners or scopes) of event.
     *
     * @param {String} type
     *            The type of event
     * @returns {Boolean}
     */
    EventDispatcher.prototype.hasEventListeners = function(type) {
        var listeners = this.listeners()[type];
        if (listeners) {
            return listeners.length > 0;
        }
        return false;
    };

    /**
     * Dispatch event.
     *
     * @param {Event} event
     *            The event object.
     */
    EventDispatcher.prototype._dispatchEvent = function(event) {
        if (this._enableDispatchEvent === undefined) {
            this._enableDispatchEvent = true;
        }
        if (this._enableDispatchEvent) {
            var type = event.type();
            var listeners = this.listeners()[type];
            if (listeners) {
                var clones = listeners.slice(0);
                for (var n = 0; n < clones.length; ++n) {
                    var listener = clones[n];
                    listener.listener.call(listener.scope, event);
                }
            }
        }
    };

    /**
     * Enable/disable dispatch event.
     * @param value Enable-true, disable-false
     */
    EventDispatcher.prototype.enableDispatchEvent = function(v) {
        if (this._enableDispatchEvent === undefined) {
            this._enableDispatchEvent = true;
        }
        if (arguments.length >= 1) {
            if (utils.isBoolean(v)) {
                this._enableDispatchEvent = v;
            }
            return this;
        } else {
            return this._enableDispatchEvent;
        }
    };
    // -------------------------------------------
    // Private Methods
    // -------------------------------------------

    /**
     * Find the EventListener.
     * @private
     *
     * @param {String} type
     *            The type of event
     * @param {Function} listener
     *            The listener function that processes the event
     * @param {Object} scope
     *            scope
     * @returns {Object|null}
     */
    EventDispatcher.prototype._findEventListener = function(type, listener, scope) {
        var listeners = this.listeners()[type];
        if (!listeners) {
            return null;
        }

        for (var n = 0; n < listeners.length; ++n) {
            var eventListener = listeners[n];
            if (eventListener.listener === listener && eventListener.scope === scope) {
                return eventListener;
            }
        }

        return null;
    };

    /**
     * Get all event listeners.(Read only)
     * @returns All event listeners.
     */
    EventDispatcher.prototype.listeners = function() {
        if (this._listeners === undefined) {
            this._listeners = {};
        }
        return this._listeners;
    };

    return EventDispatcher;
});

// @formatter:off
define('sap/viz/controls/common/UIControl',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/utils/Utils'],
function($, OOUtil, EventDispatcher, utils) {
// @formatter:on

    /**
     * Base class for UI control.
     * @extends sap.viz.controls.common.events.EventDispatcher
     */
    var UIControl = function UIControl(dom/*HTMLElement*/, uiConfig/*JSON*/) {
        UIControl.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.UIControl";

        // internal
        this._dom = dom;
        this._dom$ = $(dom);

        this._uiConfig = uiConfig;

        // uid of this UI control
        this._uid = utils.genUID();
    };
    OOUtil.extend(UIControl, EventDispatcher);

    /**
     * Get/Set UIControl size {width, height} in pixel or in percentage.
     * @method sap.viz.controls.common.UIControl.prototype.size
     * @param {Object} value Optional, current UIControl size.
     */
    UIControl.prototype.size = function(value) {
        if (arguments.length > 0) {
            if (value.width != null) {
                this._dom$.width(value.width);
            }
            if (value.height != null) {
                this._dom$.height(value.height);
            }
            this._validateSize();
            return this;
        } else {
            return {
                'width' : this._dom$.width(),
                'height' : this._dom$.height()
            };
        }
    };
    UIControl.prototype._validateSize = function() {

    };

    /**
     * Hide or show a control by setting its css style.
     * @method sap.viz.controls.common.UIControl.prototype.visible
     * @param {Boolean} value True, show the control by setting {'visibility' : 'visible'}.
     *                        False, hide the control by setting {'visibility' : 'hidden'}.
     */
    UIControl.prototype.visible = function(value) {
        this._dom$.css("visibility", value ? "visible" : "hidden");
        return this;
    };

    /**
     * Hide a control.
     * @method sap.viz.controls.common.UIControl.prototype.hide
     */
    UIControl.prototype.hide = function() {
        this._dom$.hide();

        return this;
    };

    /**
     * Show a control.
     * @method sap.viz.controls.common.UIControl.prototype.show
     */
    UIControl.prototype.show = function() {
        this._dom$.show();

        return this;
    };

    /**
     * Destroy this control instance by removing all children dom elements and event listeners. The inherited class
     * should override this method to perform clean staff.
     * @method sap.viz.controls.common.UIControl.prototype.destroy
     */
    UIControl.prototype.destroy = function() {
        this._dom$.removeData().off().find('*').removeData().off();
        this._dom$.empty();
        this._dom = null;
    };

    return UIControl;
});

define('sap/viz/controls/common/views/drag/DropAction',[], 
function() {
    var DropAction = {};

    DropAction.ACCEPT = 'accept';
    DropAction.ACCEPT_AS_REPLACEMENT = 'acceptAsReplacement';
    DropAction.ACCEPT_AS_COPY = 'acceptAsCopy';
    DropAction.DENY = 'deny';
    DropAction.AS_TRASH = 'asTrash';

    return DropAction;
});

// @formatter:off
define('sap/viz/controls/common/views/drag/AnalysisToken',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/drag/DropAction'],
function($, CSSConst, OOUtil, utils, UIControl, DropAction) {
// @formatter:on
    /**
     * @param domHelper DOM of dragging helper
     *      jQuery data in domHelper
     *          sap.viz.controls.analysisDrag.analysisToken
     *          sap.viz.controls.analysisDrag.analysisObject
     *          sap.viz.controls.analysisDrag.action
     *      jQuery event of domHelper
     *          sap.viz.controls.analysisDrag.events.drag
     *          sap.viz.controls.analysisDrag.events.dropAction
     *
     * @param domDraggable DOM of draggable
     *
     * @param defaultAction Default action for dragging, when there is not over a droppable container
     * @param analysisObject
     */
    var AnalysisToken = function(domHelper, domDraggable, analysisObject) {
        AnalysisToken.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.drag.AnalysisToken";

        this._domHelper$ = $(domHelper);
        this._domDraggable$ = $(domDraggable);
        this._fixDragingPosition();

        this._defaultAction = DropAction.DENY;

        this.analysisObject = analysisObject;

        this.playDefaultAction();

    };
    OOUtil.extend(AnalysisToken, UIControl);

    AnalysisToken.prototype._fixDragingPosition = function() {
        var draggable$ = this._domDraggable$;

        var dragHandler = $.proxy(function(event, ui) {
            // Work around with jquery ui when scroll top of window is not 0
            ui.position.top = ui.offset.top;
            // Work around with jquery ui when scroll left of window is not 0
            ui.position.left = ui.offset.left;
            // Dispatch an event to notify the droppable
            ui.helper.trigger('sap.viz.controls.analysisDrag.events.drag', [event.pageX, event.pageY]);
        }, this);
        var dragStopHandler = $.proxy(function(event, ui) {
            off();
        }, this);

        var off = function() {
            draggable$.off('drag', dragHandler);
            draggable$.off('dragstop', dragStopHandler);
        };
        // Add event listener for fix dragging position
        off();
        draggable$.on('drag', dragHandler);
        draggable$.on('dragstop', dragStopHandler);
    };
    // ------------------------------------
    // Public methods
    // ------------------------------------
    AnalysisToken.prototype.defaultAction = function(value) {
        if (arguments.length > 0) {
            this._defaultAction = value;
            return this;
        } else {
            return this._defaultAction;
        }
    };
    /**
     *  clear away revert animation
     */
    AnalysisToken.prototype.killRevertAnimation = function() {
        var draggable$ = this._domDraggable$;
        if (draggable$) {
            var old = draggable$.draggable('option', 'revertDuration');
            // Set duration to 0 to kill animation
            draggable$.draggable('option', 'revertDuration', 0);
            // Reset the duration
            utils.defer(function() {
                try {
                    draggable$.draggable('option', 'revertDuration', old);
                } catch(error) {
                    // Ignore the error, since the draggable dom may already be removed.
                }
            });
        }
    };
    /**
     * dropTarget dropped UI control
     */
    AnalysisToken.prototype.dropTarget = function(value) {
    };

    /**
     * change the style for AnalysisToken accroding to action name
     * @param{String} value
     */
    AnalysisToken.prototype.currentAction = function(value) {
        if (arguments.length > 0) {
            this._domHelper$.data('sap.viz.controls.analysisDrag.action', value);
            this._domHelper$.trigger('sap.viz.controls.analysisDrag.events.dropAction', [value]);

            return this;
        } else {
            return this._domHelper$.data('sap.viz.controls.analysisDrag.action');
        }
    };
    /**
     * change the style to defualt value for DefaultAnalysisToken
     */
    AnalysisToken.prototype.playDefaultAction = function() {
        this.currentAction(this._defaultAction);
    };

    /**
     * show or hide warning message
     */
    AnalysisToken.prototype.showWarn = function(warnMsg) {
    };

    return AnalysisToken;
});

// @formatter:off
define('sap/viz/controls/common/views/drag/DefaultAnalysisToken',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/drag/AnalysisToken',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/utils/Utils'],
function($, CSSConst, AnalyticalType, OOUtil, UIControl,
    AnalysisToken, DropAction, Utils) {
// @formatter:on
    /**
     * @param domHelper
     * @param domDraggable
     * @param analysisObject
     */
    var DefaultAnalysisToken = function(domHelper, domDraggable, analysisObject) {
        DefaultAnalysisToken.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.drag.DefaultAnalysisToken";

        this._dom$ = $(domHelper);
        this._icon$ = null;
        this._warn$ = null;
        this._warnspan$ = null;

        this._dropTarget = null;

        this._createChildren();
        this._dom$.appendTo(document.body);
        this.currentAction(this._defaultAction);

        DefaultAnalysisToken._instance = this;
    };
    OOUtil.extend(DefaultAnalysisToken, AnalysisToken);

    // ------------------------------------
    // Static
    // ------------------------------------
    /**
     * set map between DropActon name and value
     */
    DefaultAnalysisToken._ACTION_TO_CLASS = (function() {
        var mapping = {};
        var prefix = CSSConst.COMMON_PREFIX;
        var className = prefix + 'havanaVXTabSprite16 ' + prefix + 'analysisDraggingToken-' + 'icon-dropAccepted';
        mapping[DropAction.ACCEPT] = className;
        mapping[DropAction.ACCEPT_AS_COPY] = className;
        className = prefix + 'havanaVXTabSprite16 ' + prefix + 'analysisDraggingToken-icon-dropAcceptedAsReplacement';
        mapping[DropAction.ACCEPT_AS_REPLACEMENT] = className;
        className = prefix + 'havanaVXTabSprite16 ' + prefix + 'analysisDraggingToken-' + 'icon-dropDenied';
        mapping[DropAction.DENY] = className;
        className = prefix + 'havanaSharedSprite16 ' + prefix + 'analysisDraggingToken-icon-dropAsTrash';
        mapping[DropAction.AS_TRASH] = className;
        return mapping;
    })();
    // ------------------------------------
    // Public methods
    // ------------------------------------
    /**
     * dropTarget dropped UI control
     */
    DefaultAnalysisToken.prototype.dropTarget = function(value) {
        if (arguments.length > 0) {
            this._dropTarget = value;
            return this;
        } else {
            return this._dropTarget;
        }
    };

    /**
     * change the style for DefaultAnalysisToken accroding to action name
     * @param{String} value
     */
    DefaultAnalysisToken.prototype.currentAction = function(value) {
        if (this._icon$) {
            if (arguments.length > 0) {
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.ACCEPT]);
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.ACCEPT_AS_COPY]);
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.ACCEPT_AS_REPLACEMENT]);
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.DENY]);
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.AS_TRASH]);

                this._icon$.addClass(DefaultAnalysisToken._ACTION_TO_CLASS[value]);
            }
        }
        return DefaultAnalysisToken.superclass.currentAction.apply(this, arguments);
    };

    /**
     * show or hide warning message
     */
    DefaultAnalysisToken.prototype.showWarn = function(warnMsg) {
        if (warnMsg) {
            if (!this._warn$) {
                this._warn$ = $(document.createElement('div')).addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn').appendTo(this._dom$);
                this._warnspan$ = $(document.createElement('span')).addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn-text').appendTo(this._warn$);
            }
            this._warnspan$.text(warnMsg);
            this._layoutWarn();
            this._dom$.bind("mousemove", $.proxy(function(e) {
                 this._layoutWarn(); //relayout when mouse move
            },this));
        } else {
            if (this._warn$) {
                this._warn$.hide(0);
                this._dom$.unbind("mousemove");//remove listener of mousemove
            }
        }
    };

    /**
     * layout warning message
     */
    DefaultAnalysisToken.prototype._layoutWarn = function() {
        //restore to original css
        this._warn$.removeClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn');
        this._warn$.addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn');
        this._warnspan$.removeClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn-text');
        this._warnspan$.addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn-text');
        this._warn$.css({
            'maxWidth' : $(window).width() + 'px'
        });

        //calculate left space, right space
        var domWidth = this._dom$.outerWidth();
        var domHeight = this._dom$.outerHeight();
        var leftSpace = this._dom$.offset().left - document.body.scrollLeft;
        var rightSpace = $(window).width() - this._dom$.offset().left - domWidth;

        //calculate margin top, margin left, min width, max width for warn
        var wrapText = false;
        var marginTop = 0;
        var marginLeft = 0;
        var warnMinWidth = domWidth;
        var warnMaxWidth = this._warnspan$.outerWidth();//include padding space
        this._warn$.hide(0);
        if(rightSpace >= warnMaxWidth) {//right and no wrap text
            marginTop = -domHeight;
            marginLeft = domWidth;
            warnMinWidth = warnMaxWidth;//change auto width from dom width to max width if locate right
        }else if(leftSpace >= warnMaxWidth) {//left and no wrap text
            marginLeft = -warnMaxWidth;
        }else if(rightSpace >= warnMinWidth){//right and wrap text
            wrapText = true;
            marginTop = -domHeight;
            marginLeft = domWidth;
            warnMinWidth = rightSpace;//change auto width from dom width to right space if locate right
        }else if(leftSpace >= warnMinWidth){//left and wrap text
            wrapText = true;
            marginLeft = -leftSpace;
            warnMaxWidth = leftSpace;//change auto width from max width to right space if locate left
        }else{//bottom and wrap text
            wrapText = true;
            marginLeft = -leftSpace;
        }

        //modify min and max width according to $(window).width()
        warnMinWidth = Math.min(warnMinWidth, $(window).width());
        warnMaxWidth = Math.min(warnMaxWidth, $(window).width());
        this._warn$.css({
            'marginTop' : marginTop + 'px',
            'marginLeft' : marginLeft + 'px',
            'minWidth' : warnMinWidth + 'px',
            'maxWidth' : warnMaxWidth + 'px'
        });
        if(wrapText){
            this._warnspan$.css({
                'whiteSpace' : 'pre-line'
            });
        }
        this._warn$.show(0);
    };

    // ------------------------------------
    // Private methods
    // ------------------------------------
    DefaultAnalysisToken.prototype._createChildren = function() {
        this._dom$.addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken');
        var name = this.analysisObject.name();
        if (this.analysisObject.type() === AnalyticalType.HIERARCHY) {
            var selectedLevel = this.analysisObject.selectedHierarchyLevel();
            name = selectedLevel.name();
        }
        var span$ = $(document.createElement('span')).appendTo(this._dom$).text(name);
        span$.addClass(CSSConst.COMMON_PREFIX + 'text-ellipsis');
        var icon$ = this._icon$ = $(document.createElement('input')).appendTo(this._dom$);
        icon$.addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-icon');
    };

    return DefaultAnalysisToken;
});

define('sap/viz/controls/common/managers/DragManager',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/views/drag/DefaultAnalysisToken',
    'sap/viz/controls/common/views/drag/AnalysisToken',
    'sap/viz/controls/common/views/drag/DropAction'
], function($, DefaultAnalysisToken, AnalysisToken, DropAction) {
// @formatter:on

    /**
     * @class sap.viz.controls.common.managers.DragManager
     */
    var DragManager = function() {
        this.__className = "sap.viz.controls.common.managers.DragManager";
    };

    // ------------------------------------
    // Static
    // ------------------------------------
    DragManager._instance = null;
    DragManager.instance = function() {
        if (!DragManager._instance) {
            DragManager._instance = new DragManager();
        }
        return DragManager._instance;
    };
    /**
     * Enable a jqueryui draggable element to drop to viz controls, such as FeedingPanel.
     *
     * @method sap.viz.controls.common.managers.DragManager.enableDraggableFeeding
     * @param {HTMLElement} dom
     *                     A jqueryui draggable dom element
     * @param {sap.viz.controls.common.feeds.AnalysisObject} analysisObject
     *           An analysis object will be added to analysis container when drop.
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} backupAOs
     *           optional, when analysisObject is not valid, backupAOs will be checked one by one till some element is valid.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var draggable$ = $('#divAppDraggable');
     * draggable$.draggable();
     * DragManager.enableDraggableFeeding(draggable$[0], analysisObject);
     * </pre>
     */
    DragManager.enableDraggableFeeding = function(dom, analysisObject, backupAOs) {
        var dom$ = $(dom);
        dom$.off('dragstart', DragManager._feedingDragStartHandler);
        dom$.on('dragstart', DragManager._feedingDragStartHandler);
        dom$.addClass(DragManager.DRAGGABLE_CLASS_ANALYSIS);
        // Bind analysisObject to draggable dom
        dom$.data(DragManager._KEY_ANALYSIS, analysisObject);
        // Bind backup analysis objects to draggable dom
        dom$.data(DragManager._KEY_BACKUPAOS, backupAOs);
    };

    /**
     * Disable the draggable element to drop to viz controls.
     *
     * @method sap.viz.controls.common.managers.DragManager.disableDraggableFeeding
     * @param {HTMLElement} dom
     *                     The dom element which is enableDraggableFeeding
     *
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var draggable$ = $('#divAppDraggable');
     * draggable$.draggable();
     * DragManager.enableDraggableFeeding(draggable$[0], analysisObject);
     * DragManager.disableDraggableFeeding(draggable$[0]);
     * </pre>
     */
    DragManager.disableDraggableFeeding = function(dom) {
        var dom$ = $(dom);
        dom$.off('dragstart', DragManager._feedingDragStartHandler);
        dom$.removeClass(DragManager.DRAGGABLE_CLASS_ANALYSIS);
        dom$.removeData(DragManager._KEY_ANALYSIS);
        dom$.removeData(DragManager._KEY_BACKUPAOS);
    };

    /**
     * Get a default helper element to be used for dragging display.
     *
     * @method sap.viz.controls.common.managers.DragManager.getDefaultHelper
     * @param {HTMLElement} dom
     *                     The dom element which is enableDraggableFeeding
     * @return {HTMLElement} helper
     *
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var draggable$ = $('#divAppDraggable');
     * draggable$.draggable({
     *     'helper' : function(event) {
     *         return DragManager.getDefaultHelper(this);
     *     }
     * });
     * DragManager.enableDraggableFeeding(draggable$[0], analysisObject);
     * </pre>
     *
     */
    DragManager.getDefaultHelper = function(dom) {
        var dom$ = $(dom);
        var analysis = dom$.data(DragManager._KEY_ANALYSIS);
        if (!analysis) {
            return null;
        }
        var helper = document.createElement('div');
        var token = new DefaultAnalysisToken(helper, dom, analysis);
        var backupAOs = dom$.data(DragManager._KEY_BACKUPAOS);
        if (backupAOs) {
            token.backupAOs = backupAOs;
        }
        $(helper).data(DragManager._KEY_TOKEN, token);

        return helper;
    };

    DragManager._feedingDragStartHandler = function(event, ui) {
        var dom$ = $(event.currentTarget);
        // Bind analysis to helper dom
        ui.helper.data(DragManager._KEY_ANALYSIS, dom$.data(DragManager._KEY_ANALYSIS));
        ui.helper.data(DragManager._KEY_DRAGGABLE, dom$[0]);
    };

    // Class should be added to draggble dom
    DragManager.DRAGGABLE_CLASS_ANALYSIS = 'viz-controls-common-analysisDraggable';
    // Key of analysisObject should be added to helper dom
    DragManager._KEY_ANALYSIS = 'sap.viz.controls.reserved.draggableFeeding.analysisObject';
    DragManager._KEY_BACKUPAOS = 'sap.viz.controls.reserved.draggableFeeding.backupAnalysisObjects';
    DragManager._KEY_TOKEN = 'sap.viz.controls.reserved.draggableFeeding.analysisToken';
    DragManager._KEY_DRAGGABLE = 'sap.viz.controls.reserved.draggableFeeding.domDraggable';
    // ------------------------------------
    // Public method
    // ------------------------------------
    DragManager.prototype.getAnalysisToken = function(helper$) {
        var token = helper$.data(DragManager._KEY_TOKEN);
        if (token) {
            return token;
        } else {
            var analysisObject = helper$.data(DragManager._KEY_ANALYSIS);
            if (analysisObject) {
                // Create a empty token for external dragging
                token = new AnalysisToken(helper$[0], helper$.data(DragManager._KEY_DRAGGABLE), analysisObject);
                helper$.data(DragManager._KEY_TOKEN, token);
                return token;
            } else {
                return null;
            }
        }
    };

    return DragManager;
});

// @formatter:off
define('sap/viz/controls/common/utils/DatasetUtil',[
    'sap/viz/controls/common/utils/Utils'
],
function(Utils) {
// @formatter:on
    var DatasetUtil = {};

    DatasetUtil.findAAIndex = function(feedID, feeding) {
        for (var i = 0; i < feeding.length; i++) {
            if (feeding[i].feedId === feedID) {
                var bindings = feeding[i].binding;
                for (var j = 0; j < bindings.length; j++) {
                    var binding = bindings[j];
                    if (binding.index != null) {
                        return binding.index;
                    }
                }
            }
        }
        return -1;
    };

    DatasetUtil.getValue = function(data, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex) {
        var value = null;
        DatasetUtil._searchDimension(function(dimension, dimensionIndex, globalDimensionIndex) {
            value = dimension.values[dimensionValueIndex]
        }, data, aaIndex, dimensionName, dimensionIndex);

        return value;
    };
    DatasetUtil.getInfoValue = function(data, additionalData, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex) {
        var infoValue;
        if (additionalData && additionalData.length) {
            infoValue = DatasetUtil._getInfoValue(data, additionalData, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex);
        }
        return infoValue;
    };
    DatasetUtil._getInfoValue = function(data, additionalData, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex) {
        for (var i = 0; i < additionalData.length; i++) {
            var ad = additionalData[i];
            if (ad.type !== 'additionalData') {
                continue;
            }
            var infos = ad.info;
            // Find infoValue by index, additionalData should be align with analysisAxis
            var infoValue = null;
            DatasetUtil._searchDimension(function(dimension, dimensionIndex, globalDimensionIndex) {
                infoValue = infos[globalDimensionIndex].infoValues[dimensionValueIndex];
            }, data, aaIndex, dimensionName, dimensionIndex);
            return infoValue;
        }
        return null;
    };
    DatasetUtil._searchDimension = function(callback, data, aaIndex, dimensionName, dimensionIndex) {
        var analysisAxis = data.analysisAxis;

        var globalDimensionIndex = 0;
        for (var i = 0; i < analysisAxis.length; i++) {
            var aa = analysisAxis[i];
            if (aaIndex === aa.index) {
                for (var j = 0; j < aa.data.length; j++) {
                    var dimension = aa.data[j];

                    var match = isNaN(dimensionIndex) ? dimension.name === dimensionName : dimensionIndex === j;
                    if (match) {
                        callback(dimension, j, globalDimensionIndex);
                    }
                    globalDimensionIndex++;
                }
            } else {
                globalDimensionIndex += aa.data.length;
            }
        }
    };

    DatasetUtil._hasNegativeValue = function (array) {
        var ret = false;
        for (var i = 0; i < array.length; i++) {
            if (Utils.isNumber(array[i]) && array[i] < 0) {
                ret = true;
                break;
            }
        }
        return ret;
    };
    var SupportCharts = {
        'viz/bubble': ['bubbleWidth', 'bubbleHeight'],
        'viz/geobubble': ['featureValues'],
        'viz/multi_geobubble': ['featureValues'],
        'viz/multi_bubble': ['bubbleWidth', 'bubbleHeight']
    };
    DatasetUtil.hasNegativeMeasureValue = function (crosstableDataset, chartType) {
        var measureIds = Utils.clone(SupportCharts[chartType]);
        if (!measureIds || !crosstableDataset) {
            return false;
        }
        var data = crosstableDataset.data();
        if (!data) {
            return false;
        }
        var mg = data.measureValuesGroup;
        if (!sap.viz.api.manifest.Viz.get(chartType)[0]) {
            return;
        }
        var feedDefs = sap.viz.api.manifest.Viz.get(chartType)[0].allFeeds(true);
        var indexes = [];
        for (var i = 0; i < feedDefs.length; i++) {
            if (measureIds.length <= 0) {
                break;
            }
            for (var j = 0; j < measureIds.length; j++) {
                if (feedDefs[i].id === measureIds[j]) {
                    indexes.push(feedDefs[i].mgIndex);
                    measureIds.splice(j, 1);
                    break;
                }
            }
        }
        for (i = 0; i < mg.length; i++) {
            var measures = mg[i];
            if (!measures || !Utils.isArray(measures.data)) {
                continue;
            }
            if (indexes.indexOf(mg[i].index) < 0) {
                continue;
            }
            for (j = 0; j < measures.data.length; j++) {
                var measure = measures.data[j];
                if (!measure || !Utils.isArray(measure.values)) {
                    continue;
                }
                for (var k = 0; k < measure.values.length; k++) {
                    var value = measure.values[k];
                    if (!Utils.isArray(value)) {
                        continue;
                    }
                    if (this._hasNegativeValue(value)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };

    return DatasetUtil;
});

// @formatter:off
define('sap/viz/controls/common/filter/FilterHelper',[
    'jquery',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/DatasetUtil',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/filter/DateRangeFilter',
    'sap/viz/controls/common/filter/NumericRangeFilter',
    'sap/viz/controls/common/filter/ValueFilter'
],
function($, utils, DatasetUtil, AnalyticalType, FeedItemType, FeedUtils, AbstractFilter, DateRangeFilter, NumericRangeFilter, ValueFilter) {
// @formatter:on

    var FilterHelper = {};
    FilterHelper.getMapFilterItems = function(selection, isExcluded, filters, feeds){
        if(!selection || selection.length<1 ||!feeds || feeds.length<1){
            return filters;
        }

        var pendingFilters = [];
        for(var i=0; i< selection.length; ++i){
            var index = selection[i].layerIndex;
            var layerFeeds = feeds[index];
            if(!layerFeeds || layerFeeds.length<1){
                continue;
            }
            for(var dimension in selection[i].data){
                if( !selection[i].data.hasOwnProperty(dimension)){
                    continue;
                }

                var analysisObject = FilterHelper._getAnalysisObject(dimension, layerFeeds);
                if(!analysisObject){
                    continue;
                }
                var info = FilterHelper.getFilterInfo(analysisObject);
                var filterValue = {
                    'value' : selection[i].data[dimension]
                };

                var found = false;
                for(var n=0; n<pendingFilters.length; ++n){
                    if(pendingFilters[n].filterInfo.id === info.id && pendingFilters[n].filterInfo.hierarchyLevelId === info.hierarchyLevelId){
                        found = true;
                        pendingFilters[n].values.push(filterValue);
                        break;
                    }
                }
                if(!found){
                    pendingFilters.push({
                        filterInfo : info,
                        values : [filterValue]
                    });
                }
            }
        }
        var result = filters.slice(0);
        for(var m=0; m<pendingFilters.length; m++){
            var filter = FilterHelper._getFilter(result, pendingFilters[m].filterInfo.id, pendingFilters[m].filterInfo.hierarchyLevelId);
            if (filter) {
                result = FilterHelper._updateFilterItem(result, filter, pendingFilters[m].values, isExcluded);
            } else {
                result = FilterHelper._addFilterItem(result, pendingFilters[m].filterInfo, pendingFilters[m].values, isExcluded);
            }
        }
        return result;
    };

    FilterHelper._getAnalysisObject = function(dimension, feeds){
        for (var i = 0; i < feeds.length; i++) {
            if (feeds[i].type() !== FeedItemType.DIMENSION) {
                continue;
            }
            var analysisObjects = feeds[i].values();
            for (var j = 0; j < analysisObjects.length; j++) {
                if(analysisObjects[j].id() === dimension){
                    return analysisObjects[j];
                }
            }
        }
        return null;
    };
    /**
     * Get filter info object.
     *
     */
    FilterHelper.getFilterInfo = function(analysisObject) {
        var name = analysisObject.name();
        var id = analysisObject.id();
        if (analysisObject.type() === AnalyticalType.HIERARCHY) {
            var selectedLevel = analysisObject.selectedHierarchyLevel();
            name = selectedLevel.name();
            id = selectedLevel.analysis().id();
            return {
                name : name,
                id : id,
                hierarchyLevelId : selectedLevel.id(),
                hierarchyInfo : FilterHelper._buildFilterHierarchyInfo(analysisObject)
            };
        }

        return {
            name : name,
            id : id
        };
    };
    /**
     * build filter hierarchy info.
     * @param {sap.viz.controls.common.feeds.AnalysisObject} analysisObject
     * @returns {JSON} {
     *     hierarchyId : hierarchyId,
     *     levels : {
     *         id : levelId,
     *         name : levelName,
     *         selected : isSelected
     *     }
     * }
     */
    FilterHelper._buildFilterHierarchyInfo = function(analysisObject) {
        var hierarchyInfo = null;
        if (analysisObject.type() === AnalyticalType.HIERARCHY) {
            hierarchyInfo = {
                hierarchyId : analysisObject.id(),
                levels : FilterHelper._buildFilterHierarchyLevels(analysisObject.hierarchyLevels())
            };
        }
        return hierarchyInfo;
    };
    /**
     * Get new filterItems based on user selection on chart. The filter item should be ValueFilter.
     *
     * @param {Array} selection
     * @param {CrosstableDataset} dataset
     * @param {Boolean} isExcluded
     * @returns {Array} an array of ValueFilter.
     */
    FilterHelper.getFilterItems = function(selection, isExcluded, filters, feeds, dataset, feeding) {
        if (!selection || selection.length === 0) {
            return filters;
        }

        // cache these for performance reasons
        var data = dataset.data();
        var additionalData = dataset.info('additionalData');

        //change feeds value to build filter for Trellis
        var i;
        var filterFeeds = FeedUtils.cloneFeeds(feeds);
        var isMultiplier = false;
        for (i = 0; i < feeding.length; i++) {
            if (feeding[i].feedId === FeedUtils.MultiplierFeedingName && feeding[i].binding.length > 0) {
                isMultiplier = true;
                break;
            }
        }
        if (isMultiplier) {
            filterFeeds = FilterHelper._getFilterFeeds(filterFeeds);
        }
        // Find info and aaIndex
        var infos = [], aaIndices = [], dimensionIndices = [];
        for (i = 0; i < filterFeeds.length; i++) {
            if (filterFeeds[i].type() !== FeedItemType.DIMENSION) {
                continue;
            }
            var aaIndex = DatasetUtil.findAAIndex(filterFeeds[i].id(), feeding);
            var analysisObjects = filterFeeds[i].values();
            var dimensionIndex = 0;
            for (var j = 0; j < analysisObjects.length; j++) {
                infos.push(FilterHelper.getFilterInfo(analysisObjects[j]));
                if (analysisObjects[j].type() === AnalyticalType.MND) {
                    aaIndices.push(-1);
                    dimensionIndices.push(-1);
                } else {
                    aaIndices.push(aaIndex);
                    dimensionIndices.push(dimensionIndex);
                    dimensionIndex++;
                }
            }
        }
        filters = filters.slice(0);
        // Increase the dimension index when use full hierarchy
        var dimensionIndexOffsets = {};
        for (i = 0; i < infos.length; i++) {
            var info = infos[i];
            var aaIndex = aaIndices[i];
            //For MND, aaIndex is -1. And if selection is MND, we need to ignore it.
            if (aaIndex < 0) {
                continue;
            }
            // Find values
            if (!dimensionIndexOffsets[aaIndex]) {
                dimensionIndexOffsets[aaIndex] = 0;
            }
            var pathIndex = FilterHelper._pathsIndex(info.hierarchyInfo);
            var aaDataLength = FilterHelper._getAADataLength(data, aaIndex);
            if (pathIndex > 0 && pathIndex < aaDataLength) {
                dimensionIndexOffsets[aaIndex] += pathIndex;
            }
            var values = FilterHelper._getFilterValues(data, additionalData, selection, aaIndex, info.name, dimensionIndices[i] + dimensionIndexOffsets[aaIndex], info.hierarchyInfo);
            if (!values || values.length === 0) {
                continue;
            }
            // Build filter
            var filter = FilterHelper._getFilter(filters, info.id, info.hierarchyLevelId);
            if (filter) {
                filters = FilterHelper._updateFilterItem(filters, filter, values, isExcluded);
            } else {
                filters = FilterHelper._addFilterItem(filters, info, values, isExcluded);
            }
        }

        return filters;
    };
    /**
     * change feeds value to build filter for multiplier.row and multiplier.column
     */
    FilterHelper._getFilterFeeds = function(filterFeeds) {
        var newFeedItem;
        var values = [];
        for (var i = filterFeeds.length - 1; i >= 0; i--) {
            if (filterFeeds[i].id().indexOf(FeedUtils.MultiplierFeedingName) === 0) {
                values = values.concat(filterFeeds[i].values().reverse());
                newFeedItem = filterFeeds[i];
                filterFeeds.splice(i, 1);
            }
        }
        newFeedItem.values(values.reverse());
        newFeedItem._id = FeedUtils.MultiplierFeedingName;
        filterFeeds.push(newFeedItem);
        return filterFeeds;
    };

    /**
     * Exclude values from filter
     */
    FilterHelper._excludeFilterValues = function(filter, values) {
        var newValues = filter.values().slice(0);
        var i, n;
        if (filter.isExcluded()) {
            //add values to filter.values
            for ( i = 0; i < values.length; i++) {
                var exist = false;
                for ( n = 0; n < newValues.length; n++) {
                    if (FilterHelper._filterValueEquals(values[i], newValues[n])) {
                        exist = true;
                        break;
                    }
                }
                if (!exist) {
                    newValues.push(values[i]);
                }
            }
        } else {
            //remove exclude value from filter.values
            for ( i = 0; i < values.length; i++) {
                for ( n = 0; n < newValues.length; n++) {
                    if (FilterHelper._filterValueEquals(values[i], newValues[n])) {
                        newValues.splice(n, 1);
                        break;
                    }
                }
            }
        }

        filter.updateValues(newValues);
    };
    /**
     * update filterItem.
     * @param {String} name
     * @param {Array} selection
     * @param {Boolean} isExcluded
     */
    FilterHelper._updateFilterItem = function(filterItems, filterItem, values, isExcluded) {
        if (isExcluded) {
            FilterHelper._excludeFilterValues(filterItem, values);
        } else {
            filterItem.isExcluded(isExcluded);
            filterItem.updateValues(values);
        }

        if (filterItem.isEmpty()) {
            var index = filterItems.indexOf(filterItem);
            filterItems.splice(index, 1);
        }

        return filterItems;
    };

    FilterHelper._getFilterValues = function(data, additionalData, selection, aaIndex, dimensionName, dimensionIndex, hierarchyInfo) {
        var values = [];
        for (var i in selection) {
            var dataPoint = selection[i];
            var dimensionValueIndex = dataPoint.ctx[0]['dii_a' + aaIndex];

            var value = DatasetUtil.getValue(data, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex);
            if (!value) {
                continue;
            }
            var infoValue = DatasetUtil.getInfoValue(data, additionalData, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex);

            var filterValue;
            filterValue = {
                'value' : value,
                'infoValue' : infoValue
            };
            if (!FilterHelper._isValueExisted(values, filterValue)) {
                values.push(filterValue);
            }
        }
        return values;
    };

    FilterHelper._getAADataLength = function(data, aaIndex) {
        var length = 0;
        var rawData = data;
        //aaIndex is 1-based.
        var index = aaIndex -1;
        if(rawData && rawData.analysisAxis && rawData.analysisAxis[index]) {
            var aaData = rawData.analysisAxis[index].data;
            if(aaData) {
                length = aaData.length;
            }
        }
        return length;
    };

    FilterHelper._pathsIndex = function(hierarchyInfo) {
        if (hierarchyInfo && hierarchyInfo.levels) {
            var levels = hierarchyInfo.levels;
            for (var i in levels) {
                if (levels[i].selected === true) {
                    return Number(i);
                }
            }
        }
        return -1;
    };
    /**
     * get new filterItems.
     *
     * @param {Array} selection
     * @param {Boolean} isExcluded
     */
    FilterHelper._addFilterItem = function(filterItems, info, values, isExcluded) {
        var filterItem = new ValueFilter(info.id, info.name);
        filterItem.hierarchyLevelId = info.hierarchyLevelId;
        filterItem.updateValues(values);
        filterItem.isExcluded(isExcluded);

        filterItems.push(filterItem);

        return filterItems;
    };
    /**
     * build filter hierarchy levels.
     * @param {sap.viz.controls.common.feeds.HierarchyLevelObject} hierarchyLevelObjects
     * @returns {JSON} {
     *     id : levelId,
     *     name : levelName,
     *     selected : isSelected
     * }
     */
    FilterHelper._buildFilterHierarchyLevels = function(hierarchyLevelObjects) {
        var levels = [];
        if (hierarchyLevelObjects && hierarchyLevelObjects.length > 0) {
            for (var i in hierarchyLevelObjects) {
                var level = {
                    id : hierarchyLevelObjects[i].id(),
                    name : hierarchyLevelObjects[i].name(),
                    selected : hierarchyLevelObjects[i].selected()
                };
                levels.push(level);
            }
        }
        return levels;
    };
    FilterHelper._filterValueEquals = function(v1, v2) {
        if (!v1 && !v2) {
            return true;
        }
        if ((!v1 && v2) || (v1 && !v2)) {
            return false;
        }

        if (v1.value !== v2.value) {
            return false;
        }
        //Need to compare infoValue is exist.
        if(v1.infoValue === v2.infoValue){
            return true;
        }
        if(v1.infoValue == null || v2.infoValue == null ){
            return true;
        }
        //Use equals function if it exists in inforValue
        if(utils.isFunction(v1.infoValue.equals)){
            return v1.infoValue.equals(v2.infoValue);
        } else if(v1.infoValue.hasOwnProperty('key')){
            //Compare key if key property exists.
            return v1.infoValue.key === v2.infoValue.key;
        } else {
            return true;
        }

    };
    /**
     * is item existed.
     * @param {Object} name
     */
    FilterHelper._isValueExisted = function(array, filterValue) {
        var value = filterValue.value;
        var infoValue = filterValue.infoValue;

        var isExisted = false;
        if (!array || array.length === 0) {
            return isExisted;
        }
        for (var i = 0; i < array.length; i++) {
            if (array[i]) {
                // we may use other format {'key':..., 'caption':...}
                isExisted = FilterHelper._filterValueEquals(array[i], filterValue);
                if (isExisted === true) {
                    break;
                }
            }
        }
        return isExisted;
    };
    /**
     * Get filter from filterItems by id.
     * @param {Array} filterItems
     *              Array of filters
     * @param {String} id
     * @returns {Object}
     */
    FilterHelper._getFilter = function(filterItems, id, hierarchyLevelId) {
        var result = null;
        for (var i = 0; i < filterItems.length; i++) {
            var filter = filterItems[i];
            if (!filter.isGlobalFilter() && filter.id() === id && (filter.hierarchyLevelId == hierarchyLevelId)) {
                result = filter;
                break;
            }
        }
        return result;
    };
    /**
     * is FilterItem existed.
     * @param {String} id
     */
    FilterHelper.isFilterItemExisted = function(model, id, hierarchyLevelId) {
        var filter = FilterHelper._getFilter(model.filterItems(), id, hierarchyLevelId);
        if (filter) {
            return true;
        } else {
            return false;
        }
    };

    //--helper for serializa and deserialize for different filter items.(ValueFilter, DateRangeFilter, NumericRangeFilter)
    /**
     * Helper function to serialize an array of AbstracFilter objects(including ValueFilter,DateRangeFilter,
     * NumericRangeFilter) to JSON. Sub classes of AsbractFilter override the AsbractFilter.toJSON() function, which will
     * be called to serialize the instance correctly.
     * @method sap.viz.controls.common.filter.FilterHelper.toJSON
     * @param {Object|Array} instance An instance of AbstracFilter sub class, or an array of AbstracFilter sub class
     * instances.
     */
    FilterHelper.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return instance.toJSON();
        });
    };

    /**
     * Helper function to deserialize an array of AbstracFilter objects(including ValueFilter,DateRangeFilter,
     * NumericRangeFilter) from JSON. According to the filter type, call corresponding fromJSON(json) function of
     * sub class of AbstracFilter.
     * @method sap.viz.controls.common.filter.FilterHelper.fromJSON
     * @returns {Object|Array} An instance of AbstracFilter sub class, or an array of AbstracFilter sub class instances.
     */
    FilterHelper.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            var filterType = json.filterType;
            var instance;
            switch(filterType) {
                case AbstractFilter.VALUE_TYPE:
                    instance = ValueFilter.fromJSON(json);
                    break;
                case AbstractFilter.NUMERIC_RANGE_TYPE:
                    instance = NumericRangeFilter.fromJSON(json);
                    break;
                case AbstractFilter.DATE_RANGE_TYPE:
                    instance = DateRangeFilter.fromJSON(json);
                    break;
            }
            return instance;
        });
    };

    return FilterHelper;
});

define('sap/viz/controls/services/FakeDataService',
// @formatter:off
['sap/viz/controls/common/utils/FakeDataUtils'], function(FakeDataUtils) {
    // @formatter:on
    /**
     * Constructor of FakeDataService. This class is to fill raw dataset with fake data which chart can consume.
     * @class sap.viz.controls.services.FakeDataService
     * @param {String} vizType
     *            Viz type of the chart
     * @param {JSON} rawDataSet
     *            JSON object of raw dataset fetched from data service
     * @param {JSON} feedItems
     *            JSON object to present collection of FeedItems
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var fds = new FakeDataService(...);
     * </pre>
     */
    var FakeDataService = function(vizType, rawDataSet, feedItems) {
        this._createChart(vizType, rawDataSet, feedItems);
    };
    /**
     * convert feedItems to feed structure which FakeDataService can consume.
     * @method sap.viz.controls.services.FakeDataService.feedItems2feed
     * @param {JSON} feedItems
     *             JSON object to present collection of feed items
     * @return {JSON}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var feedItems = {...};
     * var feed = FakeDataService.feedItems2feed(feedItems);
     * </pre>
     */
    FakeDataService.feedItems2feed = function(feedItems) {

        return FakeDataUtils.feedItems2feed(feedItems);
    };
    /**
     * Get vizType for chart
     * @method sap.viz.controls.services.FakeDataService.prototype.getVizType
     * @return {String}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var fds = new FakeDataService(...);
     * var type = fds.getVizType();
     * </pre>
     */
    FakeDataService.prototype.getVizType = function() {
        return this._vizType;
    };
    /**
     * Get dataset filled with fake data if necessary, which is ready to be consumed by chart.
     * @method sap.viz.controls.services.FakeDataService.prototype.getVizDataset
     * @return {JSON}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var fds = new FakeDataService(...);
     * var dataset = fds.getVizDataset();
     * </pre>
     */
    FakeDataService.prototype.getVizDataset = function() {
        return this._vizDataset;
    };
    FakeDataService.prototype._createChart = function(vizType, rawDataSet, feedItems) {
        this._vizType = vizType;
        var fakedata = FakeDataUtils.buildFakeData(vizType, feedItems, rawDataSet);
        this._vizDataset = fakedata.dataset;
        this._vizFeeding = fakedata.feeding;
    };
    return FakeDataService;
});

// @formatter:off
define('sap/viz/controls/common/utils/IncompleteGhost',[
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/services/FakeDataService'
    ],
function(ChartConst, ChartTypeUtil, FakeDataService) {
// @formatter:on
    var IncompleteGhost = {};

    IncompleteGhost.getDataset = function(type) {

        if(!sap.viz.api.manifest.Viz.get(type)[0]) {
            // return empty crosstable dataset if chart is no loaded.
            var dataset = new sap.viz.api.data.CrosstableDataset();
            return dataset;
        } else if((!ChartTypeUtil.isBuildInType(type)) && type !== ChartConst.TYPE_PC && type !== ChartConst.TYPE_FUNNEL && !ChartTypeUtil.isTable(type)) {
            // use common incomplete data for PC and funnel chart.
            var fakeDataService = new FakeDataService(type, {}, []);
            var dataset = new sap.viz.api.data.CrosstableDataset();

            var data = fakeDataService.getVizDataset();
            dataset.data(data);
            return dataset;

        } else {
            var data = IncompleteGhost._DATA_BY_TYPE[type] ? IncompleteGhost._DATA_BY_TYPE[type] : IncompleteGhost._DATA_COMMON;
            if(ChartTypeUtil.isTable(type)) {
                return data;
            } else {
                var dataset = new sap.viz.api.data.CrosstableDataset();
                dataset.data(data);
                return dataset;
            }
        }
    };
    IncompleteGhost._DATA_COMMON = {
        'analysisAxis' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Country',
                'values' : ['Country 1', 'Country 2', 'Country 3', 'Country 4', 'Country 5', 'Country 6', 'Country 7', 'Country 8', 'Country 9']
            }]
        }, {
            'index' : 2,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Product',
                'values' : ['Product 1', 'Product 2', 'Product 3', 'Product 4']
            }]
        }],
        'measureValuesGroup' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Revenue',
                'values' : [[98, 113, 105, 29, 53, 31, 48, 51, 58], [87, 103, 27, 61, 28, 74, 50, 32, 65], [148, 109, 91, 43, 114, 50, 35, 76, 75], [71, 102, 80, 29, 43, 101, 69, 38, 58]]
            }]
        }, {
            'index' : 2,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Cost',
                'values' : [[32, 78, 91, 45, 110, 55, 39, 26, 50], [86, 108, 27, 50, 17, 28, 89, 116, 123], [83, 28, 58, 100, 86, 59, 66, 87, 63], [39, 100, 88, 18, 85, 96, 72, 37, 59]]
            }]
        }, {
            'index' : 3,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Margin',
                'values' : [[46, 58, 90, 5, 10, 4, 79, 86, 30], [56, 98, 20, 20, 7, 58, 39, 16, 23], [103, 98, 78, 40, 76, 29, 16, 59, 43], [59, 80, 98, 8, 45, 16, 120, 97, 39]]
            }]
        }]
    };
    IncompleteGhost._DATA_BY_TYPE = {};
    IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_NUMBER] = {
        'analysisAxis' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Country',
                'values' : ['Country 1']
            }]
        }],
        'measureValuesGroup' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Revenue',
                'values' : [[null]]
            }]
        }]
    };
    IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_COMBINATION] = {
        'analysisAxis' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Country',
                'values' : ['Country 1', 'Country 2', 'Country 3', 'Country 4', 'Country 5', 'Country 6', 'Country 7', 'Country 8', 'Country 9']
            }]
        }, {
            'index' : 2,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Product',
                'values' : ['Product 1', 'Product 2', 'Product 3', 'Product 4']
            }]
        }],
        'measureValuesGroup' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Revenue',
                'values' : [[98, 113, 105, 29, 53, 31, 48, 51, 58], [87, 103, 27, 61, 28, 74, 50, 32, 65], [148, 109, 91, 43, 114, 50, 35, 76, 75], [71, 102, 80, 29, 43, 101, 69, 38, 58]]
            },{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Cost',
                'values' : [[32, 78, 91, 45, 110, 55, 39, 26, 50], [86, 108, 27, 50, 17, 28, 89, 116, 123], [83, 28, 58, 100, 86, 59, 66, 87, 63], [39, 100, 88, 18, 85, 96, 72, 37, 59]]
            }]
        }]
    };
    IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_GEO_BUBBLE] = IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_GEO_CHOROPLETH] =
    IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_GEO_PIE] = IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_GEO_MAP] = {
        'analysisAxis' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Region',
                'values' : ['United Kingdom', 'Italy', 'United States', 'New Zealand', 'Germany', 'China', 'Russia', 'Canada', 'Brazil'],
                'infos' : [{
                    'featureId' : 'UK,NAVTEQ',
                    'latLong' : undefined
                }, {
                    'featureId' : '20110484,NAVTEQ',
                    'latLong' : undefined
                }, {
                    'featureId' : '21000001,NAVTEQ',
                    'latLong' : undefined
                }, {
                    'featureId' : '23060936,NAVTEQ',
                    'latLong' : undefined
                }, {
                    'featureId' : '20147700,NAVTEQ',
                    'latLong' : undefined
                }, {
                    'featureId' : '22928332,NAVTEQ',
                    'latLong' : undefined
                }, {
                    'featureId' : '20485579,NAVTEQ',
                    'latLong' : undefined
                }, {
                    'featureId' : '21041602,NAVTEQ',
                    'latLong' : undefined
                }, {
                    'featureId' : '23028911,NAVTEQ',
                    'latLong' : undefined
                }]
            }]
        }, {
            'index' : 2,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Product',
                'values' : ['Product 1', 'Product 2', 'Product 3', 'Product 4']
            }]
        }],
        'measureValuesGroup' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Revenue',
                'values' : [[98, 113, 105, 29, 53, 31, 48, 51, 58], [87, 103, 27, 61, 28, 74, 50, 32, 65], [148, 109, 91, 43, 114, 50, 35, 76, 75], [71, 102, 80, 29, 43, 101, 69, 38, 58]]
            }]
        }, {
            'index' : 2,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Cost',
                'values' : [[32, 78, 91, 45, 110, 55, 39, 26, 50], [86, 108, 27, 50, 17, 28, 89, 116, 123], [83, 28, 58, 100, 86, 59, 66, 87, 63], [39, 100, 88, 18, 85, 96, 72, 37, 59]]
            }]
        }, {
            'index' : 3,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Margin',
                'values' : [[46, 58, 90, 5, 10, 4, 79, 86, 30], [56, 98, 20, 20, 7, 58, 39, 16, 23], [103, 98, 78, 40, 76, 29, 16, 59, 43], [59, 80, 98, 8, 45, 16, 120, 97, 39]]
            }]
        }]
    };
    IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_SCATTER_MATRIX] = {
        "analysisAxis" : [{
            "index" : 1,
            "data" : [{
                'isFake' : true,
                'type' : 'Dimension',
                "name" : "Country",
                "values" : ["Country 1", "Country 1", "Country 2", "Country 2"]
            }, {
                'isFake' : true,
                'type' : 'Dimension',
                "name" : "Product",
                "values" : ['Product 1', 'Product 2', 'Product 3', 'Product 4']
            }]
        }],
        "measureValuesGroup" : [{
            "index" : 1,
            "data" : [{
                'isFake' : true,
                'type' : 'Measure',
                "name" : "Revenue",
                "values" : [[43, 31, 43, 41]]
            }, {
                'isFake' : true,
                'type' : 'Measure',
                "name" : "Cost",
                "values" : [[252, 124, 370, 170]]
            }]
        }]
    };
    IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_TREE] = IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_NETWORK] = {
        'analysisAxis' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Country',
                'values' : ['Country 1', 'Country 2', 'Country 3', 'Country 4', 'Country 1', 'Country 2', 'Country 3', 'Country 4', 'Country 1', 'Country 2', 'Country 3', 'Country 4', 'Country 1', 'Country 2', 'Country 3', 'Country 4']
            }, {
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Product',
                'values' : ['Product 1', 'Product 1', 'Product 1', 'Product 1', 'Product 2', 'Product 2', 'Product 2', 'Product 2', 'Product 3', 'Product 3', 'Product 3', 'Product 3', 'Product 4', 'Product 4', 'Product 4', 'Product 4']
            }]
        }],
        'measureValuesGroup' : []
    };
    IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_PC] = {
        'analysisAxis' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Dimension',
                'name' : 'Country',
                'values' : ['Country 1', 'Country 1', 'Country 1', 'Country 2', 'Country 2', 'Country 3', 'Country 4', 'Country 4', 'Country 4', 'Country 5', 'Country 6', 'Country 7', 'Country 8', 'Country 9', 'Country 9']
            }]
        }],
        'measureValuesGroup' : [{
            'index' : 1,
            'data' : [{
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Revenue',
                'values' : [[5.1, 4.9, 4.7, 4.6, 5, 7, 6.4, 6.9, 5.5, 6.5, 6.3, 5.8, 7.1, 6.3, 6.5]]
            }, {
                'isFake' : true,
                'type' : 'Measure',
                'name' : 'Cost',
                'values' : [[3.1, 8.9, 2.7, 6.6, 5, 5, 6.6, 6.9, 7.5, 2.5, 2.3, 5.8, 8.1, 1.3, 2.5]]
            }]
        }]
    };
    IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_TABLE] = IncompleteGhost._DATA_BY_TYPE[ChartConst.TYPE_CROSSTAB] = {
        "isFake" : true,
        "queryResponse" :[{
            "dimAxes" : {
                "rowsDim" : {
                    "count" : 0,
                    "values" : []
                }
            },
            "metadata" : {
                "dictionary" : {
                    "rowsDim" : [],
                    "measures" : []
                }
            },
            "valueAxes" : [],
            "ranges" : {
                "cellsDim" : [{
                    "marksNum" : []
                }]
            },
            "executionStatus" : {
                "status" : "ok"
            }
        },
        //footer
        {
            "valueAxes" : [],
            "executionStatus" : {
                "status" : "ok"
            }
        }]
    };

    return IncompleteGhost;
});

// @formatter:off
define('sap/viz/controls/common/utils/Serialization',[
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/Version',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/InfoChartUtil'
],
function(FeedItem, AnalysisObject, AbstractFilter, FilterHelper, utils, VizUtils, GlobalConfig, IncompleteGhost, LangManager,
    Version, FeedUtils, ChartTypeUtil, InfoChartUtil) {
// @formatter:on
    /**
     * Utility class provides approaches to manipulate vizContainer serialization package.
     * @class sap.viz.controls.common.utils.Serialization
     */
    var Serialization = {};
    Serialization.TypeConst = {
        FlatTableDataset : 'FlatTable',
        CrosstableDataset : 'Crosstable',
        RawDataset : 'JSON'
    };

    /**
     * Migrate a serialized vizContainer JSON of older version to the latest version.
     * For 1.0, the serialization JSON is:
     * {
     *     'version' : versionNumber,
     *     'chart' : chartJSON,
     *     'comments' : commentsJSON,
     *     'isMNDVisible' : false
     * }
     * For 1.1, the serialization JSON is:
     * {
     *     'vizFrame' : {
     *              'version' : versionNumber,
     *              'chart' : chartJSON,
     *              'filterBar' : filterBarJSON,
     *              'contextMenu' : contextMenuJSON,
     *              'annotation' : annotationJSON
     *     },
     *     'vizBuilder' : {
     *              'version' : versionNumber,
     *              'switchBar' : switchBarJSON,
     *              'feedingPanel' : feedingPanelJSON
     * },
     *     'customData' : customData,
     * }
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} migrated serialization package
     **/
    Serialization.migrate = function(valueJSON) {
        var result = utils.clone(valueJSON);
        var isMNDVisible;
        var version = result['version'];
        if (version === '1.0') {
            var vizFrame = Serialization.migrateVizFrame(result);
            result = {}
            result['vizFrame'] = vizFrame;
        } else {
            var vizFrame = result['vizFrame'];
            if (vizFrame) {
                result['vizFrame'] = Serialization.migrateVizFrame(vizFrame);
            }
            if (result['vizBuilder']) {
                var feedingPanel = result['vizBuilder']['feedingPanel'];
                if (feedingPanel) {
                    result['vizBuilder']['feedingPanel'] = Serialization.migrateFeedingPanel(feedingPanel);
                }
            }
        }
        return result;
    };

    Serialization.migrateVizFrame = function(valueJSON) {
        var result = utils.clone(valueJSON);
        var version = result['version'];
        if (version === '1.0') {
            var frameJSON = {
                chart : {}
            };

            if (result['chart']) {
                var modelJSON = result['chart']['vizModel'];
                if (modelJSON) {
                    frameJSON['chart']['type'] = modelJSON['vizType'];
                    frameJSON['chart']['feedingItems'] = modelJSON['feedingItems'];
                    frameJSON['filterBar'] = {};
                    frameJSON['filterBar']['filterItems'] = modelJSON['filterItems'];
                    frameJSON['contextMenu'] = {};
                    frameJSON['contextMenu']['isMNDVisible'] = modelJSON['isMNDVisible'];
                }
                var instanceJSON = result['chart']['vizInstance'];
                if (instanceJSON) {
                    frameJSON['chart']['vizInstance'] = instanceJSON;
                }
            }

            var commentsJSON = result['comments'];
            if (commentsJSON) {
                frameJSON['annotation'] = commentsJSON;
            }
            frameJSON['version'] = Version.VERSION;
            result = frameJSON;
        }

        // backward compability of BITSDC4-475.
        // the feedingitem in VizFrame's serialization before 1.16 use vizModel's feedingItem which may include
        // incorrect mnd feed. we need to fix the feeds in the serialization.
        if (result['chart']) {
            var type = result['chart']['type'];
            var isMNDVisible = result['contextMenu'] ? result['contextMenu']['isMNDVisible'] : null;
            Serialization._migrateFeeds(result['chart'], type, isMNDVisible);
        }

        return result;
    };

    Serialization.migrateFeedingPanel = function(valueJSON) {
        var result = utils.clone(valueJSON);

        // backward compability of BITSDC4-475.
        // the feedingitem in VizFrame's serialization before 1.16 use vizModel's feedingItem which may include
        // incorrect mnd feed. we need to fix the feeds in the serialization.
        var type = result.type;
        var isMNDVisible = result['mndVisible'];

        Serialization._migrateFeeds(result, type, isMNDVisible);

        return result;
    };

    /**
     * backward compability of BITSDC4-475.
     * The feedingitem in VizFrame's serialization before 1.16 use vizModel's feedingItem which may include
     * incorrect mnd feed. we need to fix the feeds in the serialization.
     */
    Serialization._migrateFeeds = function(valueJSON, vizType, isMNDVisible) {
        if (isMNDVisible === false) {
            var feeds = Serialization._getFeedsFromInnerControl(valueJSON);
            if(ChartTypeUtil.isGeo(vizType)) {
                for(var i = 0; i < feeds.length; i++) {
                    feeds = FeedUtils.removeMND(feeds[i]);
                }
            } else {
                feeds = FeedUtils.removeMND(feeds);
            }
            Serialization._updateFeedsToInnerControl(valueJSON, feeds);
        }
    };

    /**
     * Get FeedItems from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.getFeeds
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {Array<sap.viz.controls.common.feeds.FeedItem>|2DArray<sap.viz.controls.common.feeds.FeedItem>}
     **/
    Serialization.getFeeds = function(value) {
        var feedsJSON = null;
        var feedsJSONfromChart = Serialization._getValue(value, ['vizFrame', 'chart', 'feedingItems']);
        var feedsJSONfromPanel = Serialization._getValue(value, ['vizBuilder', 'feedingPanel', 'feedingItems']);
        var isMNDVisible;
        if (feedsJSONfromChart) {
            feedsJSON = feedsJSONfromChart;
            var contextMenuJSON = Serialization._getValue(value, ['vizFrame', 'contextMenu']);
            if (contextMenuJSON) {
                isMNDVisible = contextMenuJSON.isMNDVisible;
            }
        } else if (feedsJSONfromPanel) {
            feedsJSON = feedsJSONfromPanel;
            var feedingPanelJSON = Serialization._getValue(value, ['vizBuilder', 'feedingPanel']);
            if (feedingPanelJSON) {
                isMNDVisible = feedingPanelJSON.mndVisible;
            }
        }

        if (feedsJSON == null) {
            return [];
        }
        var feeds = FeedItem.fromJSON(feedsJSON);

        // backward compability of BITSDC4-475.
        // the feedingitem in VizFrame's serialization before 1.16 use vizModel's feedingItem which may include
        // incorrect mnd feed. we need to fix the feeds in the serialization.
        if (isMNDVisible === false) {
            feeds = FeedUtils.removeMND(feeds);
        }

        return feeds;
    };

    Serialization._getFeedsFromInnerControl = function(value) {
        var feedsJSON = null;
        var feedsJSONfromControl = Serialization._getValue(value, ['feedingItems']);
        if (feedsJSONfromControl) {
            feedsJSON = feedsJSONfromControl;
        }
        if (feedsJSON == null) {
            return [];
        }
        var feeds = FeedItem.fromJSON(feedsJSON);
        return feeds;
    };

    /**
     * Update a serialized vizContainer JSON object with specified FeedItems.
     * @method sap.viz.controls.common.utils.Serialization.updateFeeds
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {Array<sap.viz.controls.common.feeds.FeedItem>|2DArray<sap.viz.controls.common.feeds.FeedItem>} feeds
     * @return {JSON} updated serialization package
     **/
    Serialization.updateFeeds = function(value, feeds) {
        var feedsJSON = FeedItem.toJSON(feeds);
        Serialization._setValue(value, ['vizFrame', 'chart', 'feedingItems'], feedsJSON);
        Serialization._setValue(value, ['vizBuilder', 'feedingPanel', 'feedingItems'], feedsJSON);
        return value;
    };

    Serialization._updateFeedsToInnerControl = function(value, feeds) {
        var feedsJSON = FeedItem.toJSON(feeds);
        Serialization._setValue(value, ['feedingItems'], feedsJSON);
        return value;
    };

    /**
     * Get FilterItems from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.getFilters
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return
     * {Array<sap.viz.controls.common.filter.AbstractFilter>|2DArray<sap.viz.controls.common.filter.AbstractFilter>}
     * filters
     **/
    Serialization.getFilters = function(value) {
        var filtersJSON = Serialization._getValue(value, ['vizFrame', 'filterBar', 'filterItems']);
        if (filtersJSON == null) {
            return [];
        }
        var filters = FilterHelper.fromJSON(filtersJSON);
        return filters;
    };

    /**
     * Update a serialized vizContainer JSON object with specified FilterItems.
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param
     * {Array<sap.viz.controls.common.filter.AbstractFilter>|2DArray<sap.viz.controls.common.filter.AbstractFilter>}
     * filters
     * @return {JSON} updated serialization package
     **/
    Serialization.updateFilters = function(value, filters) {
        var filtersJSON = FilterHelper.toJSON(filters);
        Serialization._setValue(value, ['vizFrame', 'filterBar', 'filterItems'], filtersJSON);
        return value;
    };

    /**
     * Remove dataset from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.removeDataset
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} updated serialization package
     **/
    Serialization.removeDataset = function(value) {
        var vizInstance = Serialization._getValue(value, ['vizFrame', 'chart', 'vizInstance']);
        if (vizInstance) {
            delete vizInstance['data'];
        }
        return value;
    };

    /**
     * Empty dataset of a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.emptyDataset
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} updated serialization package
     **/
    Serialization.emptyDataset = function(value) {
        var dataJSON = Serialization._getValue(value, ['vizFrame', 'chart', 'vizInstance', 'data']);
        if (dataJSON) {
            Serialization._emptyDataset(dataJSON);
        }

        var slicedDataJSON = Serialization._getValue(value, ['vizFrame', 'playControl', 'slicedData']);
        if (slicedDataJSON) {
            slicedDataJSON.measuresInfo = [];
            slicedDataJSON.slices = [];
        }

        return value;
    };

    Serialization._emptyDataset = function(dataJSON) {
        if (!dataJSON) {
            return;
        }
        if ( dataJSON instanceof Array) {
            for (var i = 0; i < dataJSON.length; i++) {
                Serialization._emptyDataset(dataJSON[i]);
            }
        } else {
            var type = dataJSON['type'];
            var data = dataJSON['val'];
            var dataset = {};
            var datasetJSON = {};
            if (type === Serialization.TypeConst.CrosstableDataset) {
                dataset = new sap.viz.api.data.CrosstableDataset();
                dataset.data(data);
                datasetJSON = dataset.toJSON({
                    emptyDataset : true
                }).data;
            } else if (type === Serialization.TypeConst.FlatTableDataset) {
                dataset = new sap.viz.api.data.FlatTableDataset(feedData);
                datasetJSON = dataset.toJSON({
                    emptyDataset : true
                }).data;
            } else if (type === Serialization.TypeConst.RawDataset) {
                datasetJSON = {};
            } else {
                throw LangManager.get('VIZ_COMMON_SERIALIZATION_FAILED') + LangManager.get('VIZ_COMMON_INVALID_SERIALIZATION_PACKAGE');
            }
            dataJSON['val'] = datasetJSON;
        }
    };

    /**
     * Update a serialized vizContainer JSON object with specified dataset.
     * @method sap.viz.controls.common.utils.Serialization.updateDataset
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param
     * {sap.viz.api.data.CrosstableDataset|sap.viz.api.data.FlatTableDataset|Array<sap.viz.api.data.FlatTableDataset>|Object}
     * dataset
     *     CrosstableDataset and FlatTableDataset is for common CVOM charts,
     *     Array<FlatTableDataset> is for GeoMap
     *     Object is specially for viz/ext/table and viz/ext/crosstab
     * @return {JSON} updated serialization package
     **/
    Serialization.updateDataset = function(value, dataset) {
        var vizInstance = Serialization._getValue(value, ['vizFrame', 'chart', 'vizInstance']);
        if (vizInstance) {
            vizInstance['data'] = {};
            if(InfoChartUtil.isInfoChart(vizInstance.type)
                && ( dataset instanceof sap.viz.api.data.CrosstableDataset)){
                dataset = InfoChartUtil.buildInfoDataset(dataset);
            }
            Serialization._updateDataset(vizInstance['data'], dataset);
        }
        return value;
    };

    Serialization._updateDataset = function(dataJSON, dataset) {
        if (!dataJSON || !dataset) {
            return;
        }
        if ( dataset instanceof Array) {
            for (var i = 0; i < dataset.length; i++) {
                var data = dataset[i];
                Serialization._updateDataset(dataJSON[i], data);
            }
        } else if ( dataset instanceof sap.viz.api.data.CrosstableDataset) {
            dataJSON['type'] = Serialization.TypeConst.CrosstableDataset;
            dataJSON['val'] = dataset.data();
        } else if ( dataset instanceof sap.viz.api.data.FlatTableDataset) {
            dataJSON['type'] = Serialization.TypeConst.FlatTableDataset;
            dataJSON['val'] = dataset.data();
        } else {
            //dataset is rawdataset
            dataJSON['type'] = Serialization.TypeConst.RawDataset;
            dataJSON['val'] = dataset;
        }
    };

    /**
     * Convert VizContainer serialization package data to viz instance serialization data.
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @returns {JSON} viz instance serialization data
     */
    Serialization.convertToVizSerialization = function(value) {
        var vizInstance = Serialization._getValue(value, ['vizFrame', 'vizInstance']);
        if (vizInstance) {
            return utils.clone(vizInstance);
        }
        return null;
    };

    /**
     * Update vizContainer serialization package with specified properties.
     * @method sap.viz.controls.common.utils.Serialization.updateProperties
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {JSON} properties
     *     viz properties
     * @return {JSON} updated serialization package
     **/
    Serialization.updateProperties = function(value, properties) {
        Serialization._setValue(value, ['vizFrame', 'chart', 'vizInstance', 'properties'], properties);
        return value;
    };

    /**
     * Get properties JSON object from vizContainer serialization package.
     * @method sap.viz.controls.common.utils.Serialization.getProperties
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} properties JSON
     **/
    Serialization.getProperties = function(value) {
        var properties = Serialization._getValue(value, ['vizFrame', 'chart', 'vizInstance', 'properties']);
        return properties || {};
    };

    /**
     * Update analysis objects labels from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.updateAnalysisObjectLabels
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     * @return {JSON} updated serialization package
     **/
    Serialization.updateAnalysisObjectLabels = function(value, analysisObjects) {
        if (!analysisObjects) {
            return value;
        }
        var feeds = Serialization.getFeeds(value) || [];
        var filters = Serialization.getFilters(value) || [];
        var sliceDimension = Serialization._getSliceDimension(value);

        function createHierarchyLevelsHash(hls){
            var hash = {};
            hls.forEach(function(hl){
                if(hl){
                    hash[hl.id()] = hl;
                }
            });
            return hash;
        }
        function createAnalysisObjectsHash(aos){
            var hash = {};
            var q = aos.slice();
            while (q.length) {
                var ao = q.shift();
                if (ao) {
                    var hierarchyLevels = ao.hierarchyLevels() || [];
                    hash[ao.id()] = {
                        ao: ao,
                        hlHash: createHierarchyLevelsHash(hierarchyLevels)
                    };
                    q = q.concat(hierarchyLevels.map(function(hl) {
                        return hl._analysis;
                    }));
                }
            }
            return hash;
        }

        var newAosHash = createAnalysisObjectsHash(analysisObjects);
        feeds.forEach(function(fi) {
            var aos = fi.values();
            if (aos) {
                var oldAosHash = createAnalysisObjectsHash(aos);

                for (var aoId in oldAosHash) {
                    var oldAoItem = oldAosHash[aoId];
                    var newAoItem = newAosHash[aoId];
                    if (newAoItem) {
                        oldAoItem.ao.name(newAoItem.ao.name());

                        // Loop hierarchy levels.
                        for (var hlId in oldAoItem.hlHash) {
                            var oldHl = oldAoItem.hlHash[hlId];
                            var newHl = newAoItem.hlHash[hlId];
                            if (newHl) {
                                oldHl._name = newHl.name();
                            }
                        }
                    }
                }
            }
        });

        filters.forEach(function(fi) {
            if(fi){
                var type = fi.getType();
                if (type === AbstractFilter.NUMERIC_RANGE_TYPE ||
                    type === AbstractFilter.DATE_RANGE_TYPE ||
                    (type === AbstractFilter.VALUE_TYPE && !fi.hierarchyLevelId)) {

                    var newAoItem = newAosHash[fi.getFilteredObjectId()];
                    if (newAoItem) {
                        fi.filteredObjectName = newAoItem.ao.name();
                    }
                } else if (type === AbstractFilter.VALUE_TYPE && fi.hierarchyLevelId) {
                    // Loop new AO's hierarchy level by hierarchy level id.
                    for (var j = 0; j < analysisObjects.length; j++) {
                        var newAoHls = analysisObjects[j].hierarchyLevels();
                        if (newAoHls) {
                            for (var k = 0; k < newAoHls.length; k++) {
                                var newAoHl = newAoHls[k];
                                if (newAoHl && newAoHl.id() === fi.hierarchyLevelId) {
                                    fi.filteredObjectName = newAoHl.name();
                                    break;
                                }
                            }
                        }
                    }
                }

            }
        });

        if (sliceDimension) {
            var newAoItem = newAosHash[sliceDimension.id()];
            if (newAoItem) {
                sliceDimension.name(newAoItem.ao.name());

                var oldHlHash = createHierarchyLevelsHash(sliceDimension.hierarchyLevels() || []);

                // Loop hierarchy levels.
                for (var hlId in oldHlHash) {
                    var oldAoHl = oldHlHash[hlId];
                    var newAoHl = newAoItem.hlHash[hlId];

                    if (newAoHl) {
                        oldAoHl._name = newAoHl.name();
                        if (oldAoHl._analysis && newAoHl._analysis && oldAoHl._analysis.id() === newAoHl._analysis.id()) {
                            oldAoHl._analysis.name(newAoHl._analysis.name());
                        }
                    }
                }
            }
        }

        Serialization.updateFeeds(value, feeds);
        Serialization.updateFilters(value, filters);
        Serialization._updateSliceDimension(value, sliceDimension);
        return value;
    };

    /**
     * Get default incomplete ghost package for createViz.
     * @method sap.viz.controls.common.utils.Serialization.defaultIncompletePackage
     *
     * @param {String} type
     *     vizType
     * @return {JSON} default incomplete serialization package of the specific chart type
     **/
    Serialization.defaultIncompletePackage = function(type) {
        var uiConfig = GlobalConfig.defaultUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_CHART);
        var properties;
        if (type) {
            var chartId = ChartTypeUtil.getChartId(type);
            if (uiConfig && uiConfig.hasOwnProperty('specificProperties')) {
                properties = utils.updateJSON(uiConfig.defaultProperties, uiConfig.specificProperties[chartId]);
            } else {
                properties = uiConfig ? uiConfig.defaultProperties : {};
            }
            properties = VizUtils.convertProperties(properties, ChartTypeUtil.getVizType(type), type);
        } else {
            properties = {};
        }
        var dataset = IncompleteGhost.getDataset(type);
        var data;
        //TODO: FlatTableDataset
        if (ChartTypeUtil.isTable(type)) {
            data = {
                type : Serialization.TypeConst.RawDataset,
                val : dataset
            }
        } else {
            data = {
                type : Serialization.TypeConst.CrosstableDataset,
                val : dataset.data()
            }
        }
        return {
            vizFrame : {
                version : Version.VERSION,
                chart : {
                    vizInstance : {
                        data : data,
                        properties : properties,
                        type : type
                    },
                    vizTitleMode : "auto"
                },
                contextMenu : {}
            }
        };
    };

    /**
     * Update vizContainer serialization package with specified data.
     * @method sap.viz.controls.common.utils.Serialization.updateCustomData
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {JSON} customData

     *     custom data in JSON
     * @return {JSON} updated serialization package
     **/
    Serialization.updateCustomData = function(value, properties) {
        Serialization._setValue(value, ['customData'], properties);
        return value;
    };

    /**
     * Get custom data from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.getCustomData
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} custom data JSON
     **/
    Serialization.getCustomData = function(value) {
        return Serialization._getValue(value, ['customData']) || {};
    };


    /**
     * Update vizContainer serialization package with specified control setting.
     * For chart doesn't support playControl, nothing will happen when this api invoked on playControl settings.
     * {for now, only playControl.slicedData and playControl.sliceDimension are supported}
     * @method sap.viz.controls.common.utils.Serialization.updateControlSettings
     *
     * @param {JSON} valueJSON
     *     VizContainer serialization package
     * @param {String} controlName
     * @param {String} settingName
     * @param {Object} value
     **/
    Serialization.updateControlSettings = function(valueJSON, controlName, settingName, value) {
        var type = Serialization._getValue(valueJSON, ['vizFrame', 'chart', 'type']);
        if(ChartTypeUtil.supportAnimation(type) && controlName === 'playControl')
        {
            if(settingName === 'slicedData')
            {
                Serialization._updateSlicedData(valueJSON, value);
            }
            else
            if(settingName === 'sliceDimension')
            {
                Serialization._updateSliceDimension(valueJSON, value);
            }
            else
            if(settingName === 'value')
            {
                Serialization._setValue(valueJSON, ['vizFrame', 'playControl', 'value'], value);
            }
        }
    };

    /**
     * Get control settings from a serialized JSON object which represents a VizFrame control.
     * {for now, only playControl.slicedData and playControl.sliceDimension are supported}
     * @method sap.viz.controls.common.utils.Serialization.getControlSettings
     *
     * @param {JSON} valueJSON
     *     VizContainer serialization package
     * @param {String} controlName
     * @param {String} settingName
     * @return {Object} control setting
     **/
    Serialization.getControlSettings = function(valueJSON, controlName, settingName) {
        if(controlName === 'playControl')
        {
            if(settingName === 'slicedData')
            {
                return Serialization._getSlicedData(valueJSON);
            }
            else
            if(settingName === 'sliceDimension')
            {
                return Serialization._getSliceDimension(valueJSON);
            }
            if(settingName === 'value')
            {
                return Serialization._getValue(valueJSON, ['vizFrame', 'playControl', 'value']);
            }
        }
        else
        {
            return null;
        }
    };

    /**
     * Get chart type from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.getChartType
     *
     * @param {JSON} valueJSON
     *     VizContainer serialization package
     * @return {String} chart type
     **/
    Serialization.getChartType = function(valueJSON) {
        return Serialization._getValue(valueJSON, ['vizFrame', 'chart', 'type']);
    };

    /**
     * Update vizContainer serialization package with specified css.
     * @method sap.viz.controls.common.utils.Serialization.updateCss
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {String} css

     *     css string
     * @return {JSON} updated serialization package
     **/
    Serialization.updateCss = function(value, css) {
        Serialization._setValue(value, ['vizFrame', 'chart', 'vizInstance', 'css'], css);
        return value;
    };

    Serialization._updateSliceDimension = function(valueJSON, value)
    {
        if(utils.isArray(value))
        {
            return;
        }
        var aaJSON = AnalysisObject.toJSON(value);
        Serialization._setValue(valueJSON, ['vizFrame', 'playControl', 'sliceDimension'], aaJSON);
    }

    Serialization._getSliceDimension = function(valueJSON)
    {
        var aaJSON = Serialization._getValue(valueJSON, ['vizFrame', 'playControl', 'sliceDimension']);
        if(aaJSON)
        {
            return AnalysisObject.fromJSON(aaJSON);
        }
        else
        {
            return null;
        }
    }

    Serialization._updateSlicedData = function(valueJSON, slicedData)
    {
        var result = {};
        result.measuresInfo = slicedData.measuresInfo;
        if(utils.isArray(slicedData.slices)) {
            result.slices = [];
            for(var i = 0; i < slicedData.slices.length; i++) {
                result.slices.push({
                    data : slicedData.slices[i].data.toJSON(),
                    dimensionMember : slicedData.slices[i].dimensionMember
                });
            }
        }
        Serialization._setValue(valueJSON, ['vizFrame', 'playControl', 'slicedData'], result);
    };

    Serialization._getSlicedData = function(valueJSON)
    {
        var slicedDataJSON = Serialization._getValue(valueJSON, ['vizFrame', 'playControl', 'slicedData'])
        if(slicedDataJSON)
        {
            var result = {};
            result.measuresInfo = slicedDataJSON.measuresInfo;
            result.slices = [];
            var slicesJSON =  slicedDataJSON.slices;
            if(slicesJSON)
            {
                for(var i = 0; i < slicesJSON.length; i++)
                {
                    var sliceJSON = slicesJSON[i]
                    result.slices.push({
                        data:sap.viz.api.data.CrosstableDataset.fromJSON(sliceJSON.data),
                        dimensionMemeber: sliceJSON.dimensionMemeber
                    });
                }
            }
            return result;
        }
        else
        {
            return null;
        }
    };

    Serialization._getValue = function(root, path) {
        if (!root || !path || !path.length) {
            return null;
        }
        var node = root;
        for (var i = 0; i < path.length; i++) {
            if (!node[path[i]]) {
                return null;
            }
            node = node[path[i]];
        }
        return node;
    };

    Serialization._setValue = function(root, path, value) {
        if (!root || !path || !path.length) {
            return null;
        }
        var node = root;
        for (var i = 0; i < path.length - 1; i++) {
            if (!node[path[i]]) {
                return;
            }
            node = node[path[i]];
        }
        var leaf = path[path.length - 1];
        node[leaf] = value;
    };

    return Serialization;
});

define('sap/viz/controls/common/views/menu/MenuItem',[
// @formatter:off
    'require',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/JsonUtil'
],
function(r, utils, JsonUtil) {
// @formatter:on
    var require = r || require;
    /**
     * MenuItem Class
     *
     * @class sap.viz.controls.common.views.menu.MenuItem
     *
     * @param {String} id
     * @param {String} name
     * @param {Array<sap.viz.controls.common.views.menu.MenuGroup>} subMenuGroups
     */
    var MenuItem = function(id, name, subMenuGroups) {
        this.__className = "sap.viz.controls.common.views.menu.MenuItem";
        this._id = id;
        this._name = name;

        this._enabled = true;
        this._selected = false;
        // {[MenuGroup]}
        this._subMenuGroups = subMenuGroups;
    };
    MenuItem.prototype.id = function() {
        return this._id;
    };
    MenuItem.prototype.name = function() {
        return this._name;
    };
    MenuItem.prototype.icon = function() {
        return this._icon;
    };
    MenuItem.prototype.subMenuGroups = function() {
        return this._subMenuGroups;
    };
    MenuItem.prototype.enabled = function(value) {
        if (arguments.length > 0) {
            this._enabled = value;
            return this;
        } else {
            return this._enabled;
        }
    };
    MenuItem.prototype.selected = function(value) {
        if (arguments.length > 0) {
            this._selected = value;
            return this;
        } else {
            return this._selected;
        }
    };

    MenuItem.prototype.equal = function(menuItem) {
        if (menuItem == undefined) {
            return false;
        }
        if (this.id() !== menuItem.id()) {
            return false;
        }
        if (this.name() !== menuItem.name()) {
            return false;
        }
        if (this.enabled() !== menuItem.enabled()) {
            return false;
        }
        if (this.selected() !== menuItem.selected()) {
            return false;
        }
        var subMenuGroups1 = this.subMenuGroups() || [];
        var subMenuGroups2 = menuItem.subMenuGroups() || [];
        if (subMenuGroups1.length !== subMenuGroups2.length) {
            return false;
        }

        for (var i = 0; i < subMenuGroups1.length; i++) {
            var menuGroup1 = subMenuGroups1[i];
            var menuGroup2 = subMenuGroups2[i];
            if (!(menuGroup1 == undefined && menuGroup2 == undefined)) {
                if (menuGroup1 == undefined) {
                    return false;
                }
                if (!menuGroup1.equal(menuGroup2)) {
                    return false;
                }
            }
        }

        return true;
    };


    /**
     * Serialize MenuItem or MenuItem array to a JSON object.
     * @method sap.viz.controls.common.views.menu.MenuItem.toJSON
     * @param {sap.viz.controls.common.views.menu.MenuItem|Array<sap.viz.controls.common.views.menu.MenuItem>} instance
     * @returns {JSON}
     */
    MenuItem.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return {
                'id' : instance._id,
                'name' : instance._name,
                'subMenuGroups' : JsonUtil.toJSON(JsonUtil.MenuGroupType, instance._subMenuGroups),
                'enabled' : instance._enabled,
                'selected' : instance._selected
            };
        });
    };
    /**
     * Deserialize a JSON object to MenuItem or MenuItem array.
     * @method sap.viz.controls.common.views.menu.MenuItem.fromJSON
     * @param {JSON} json
     * @returns {sap.viz.controls.common.views.menu.MenuItem|Array<sap.viz.controls.common.views.menu.MenuItem>}
     */
    MenuItem.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            var mi = new MenuItem(json.id, json.name, JsonUtil.fromJSON(JsonUtil.MenuGroupType, json.subMenuGroups));
            mi.enabled(json.enabled);
            mi.selected(json.selected);
            return mi;
        });
    };
    JsonUtil.register(JsonUtil.MenuItemType, MenuItem.fromJSON, MenuItem.toJSON);

    return MenuItem;
});

define('sap/viz/controls/common/events/Event',[],function() {

    /**
     * sap.viz.controls.common.events.Event Class
     *
     * @param {String} type
     *            event type
     * @param {sap.viz.controls.common.events.EventDispatcher} target
     *            event target
     * @param {Object|undefined} data
     *            event data
     */
    var Event = function(type, target, data) {
        this.__className = "sap.viz.controls.common.events.Event";

        /**
         * {String}
         */
        this._type = type;
        /**
         * {sap.viz.controls.common.events.EventDispatcher}
         */
        this._target = target;
        /**
         * {Object}
         */
        this.data = data;
    };
    /**
     * Get event type
     *
     * @returns {String}
     */
    Event.prototype.type = function() {
        return this._type;
    };
    /**
     * Get event target
     *
     * @returns {sap.viz.controls.common.events.EventDispatcher}
     */
    Event.prototype.target = function() {
        return this._target;
    };
    return Event;
});

define('sap/viz/controls/common/events/FeedEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {
    var FeedEvent = function(target, data) {
        FeedEvent.superclass.constructor.apply(this, arguments);

        this.__className = "sap.viz.controls.common.events.FeedEvent";
    };

    OOUtil.extend(FeedEvent, Event);

    FeedEvent.FEED_READY = "feedReady";
    FeedEvent.REQUEST_FEED = "requestFeed";
    FeedEvent.FEEDS_CHANGED = "feedsChanged";

    return FeedEvent;
});

// @formatter:off
define('sap/viz/controls/runtime/Runtime',[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/events/Event',
'sap/viz/controls/common/events/EventDispatcher'
],
function(OOUtil, Event, EventDispatcher) {
// @formatter:on
    var Runtime = function() {
        this._models = {};
        this._modelRefs = {};
    };

    OOUtil.extend(Runtime, EventDispatcher);
    
    /***
     * register model to runtime
     * @param {String} uid
     * @param {Object} model
     */
    Runtime.prototype.registerModel = function(uid, model) {
        this._models[uid] = model;
        this._modelRefs[uid] = 1;
    };
    /**
     * Add model reference.
     * @param {String} uid Uid of model
     */
    Runtime.prototype.addModelRef = function(uid){
        this._modelRefs[uid] ++;
    };
    /**
     * Remove model reference.
     * @param {String} uid Uid of model
     */
    Runtime.prototype.removeModelRef = function(uid){
        this._modelRefs[uid] --;
        if(this._modelRefs[uid] ===0){
            this._models[uid] = null;
        }
    };
    /***
     * get model by type
     * @param {String} type
     * @return {Object}
     */
    Runtime.prototype.getModel = function(uid) {
        return this._models[uid];
    };
    return Runtime;
});

// @formatter:off
define('sap/viz/controls/runtime/RuntimeManager',[
'sap/viz/controls/runtime/Runtime'
],
function(Runtime) {
// @formatter:on
    var _runtime = null;
    var RuntimeManager = {};

    /**
     * Get runtime instance
     * @return {Runtime}
     */
    RuntimeManager.getRuntime = function() {
        if(_runtime === null) {
            _runtime = new Runtime();
        }
        return _runtime;
    };
    return RuntimeManager;
});

// @formatter:off
define('sap/viz/controls/common/services/BVRService',[
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/feeds/AutoFeedingUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/Utils'
],
function(FeedUtils, AutoFeedingUtils, ChartTypeUtil, Utils) {
// @formatter:on

    var BVRService = {};
    /**
     * @return {String} read-only version string
     */
    BVRService.VERSION = '1.0';

    /**
     * Suggest new feeds by existing feeds after viz type is changed
     *
     * @param {String} newType
     * @param {String} currentType
     *          null or blank if no current viz type
     * @param {[sap.viz.controls.common.feeds.FeedItem]} feeds
     *          proposed feeding items
     *
     * @return {[sap.viz.controls.common.feeds.FeedItem]}
     *          the processed feeding items by different viz types
     *
     */
    BVRService.switchFeeds = function(newType, currentType, feeds) {
        //whether to autofeeding
        if (!AutoFeedingUtils.needAutoFeeding(feeds, currentType, newType)) {
            return {
                'vizType' : newType,
                'feeds' : feeds
            };
        }
        //generate ghost feeding if no fromfeeds
        if (newType && FeedUtils.isEmptyFeeds(feeds)) {
            var emptyFeeds = FeedUtils.buildEmptyFeeds(newType);
            if (!emptyFeeds.length) {
                //if (console) {
                //    console.log(newType + " is not supported.");
                //}
            }
            return {
                'vizType' : newType,
                'feeds' : emptyFeeds
            };
        }

        var toFeeds;
        // if type switch between single and multiple, just need to do direct feeding.
        // otherwise, do smart feeding.
        if (ChartTypeUtil.toSingleChartType(Utils.clone(newType)) === ChartTypeUtil.toSingleChartType(Utils.clone(currentType))) {
            toFeeds = AutoFeedingUtils.directFeeding(feeds, newType);
        } else {
            toFeeds = AutoFeedingUtils.smartFeeding(feeds, newType);
        }

        return {
            'vizType' : newType,
            'feeds' : toFeeds
        };
    };

    /**
     * Suggest new feeds by viz type and existing analysis objects
     *
     * @param {String} newType
     *          null or blank if no current viz type
     * @param {[sap.viz.controls.common.feeds.AnalysisObject]} analysisObjects
     *          proposed AnalysisObjects to feed
     *
     * @return {
     *             vizType: String,
     *             feeds: [sap.viz.controls.common.feeds.FeedItem]
     *         }
     *
     */

    /**
     * Suggest new feeds when new analysis objects are added to existing viz and feeds
     *
     * @param {String} currentType
     *
     * @param {[sap.viz.controls.common.feeds.FeedItem]} currentFeeds
     *          current existing feeds
     *
     * @param {[sap.viz.controls.common.feeds.AnalysisObject]} analysisObjects
     *          proposed AnalysisObjects to feed
     *
     * @param {Array<String>} feedingScope
     *          proposed feed ids, analysisObjects can only be feeded in this scope
     *
     * @return {
     *             vizType: String,
     *             feeds: [sap.viz.controls.common.feeds.FeedItem]
     *         }
     *
     */
    BVRService.suggestFeeds = function(type, arg1, arg2, arg3) {
        var feeds, analysisObjects, feedingScope;

        if (arguments.length === 2) {
            feeds = [];
            analysisObjects = arg1;
        } else if (arguments.length >= 3) {
            feeds = arg1;
            analysisObjects = arg2;
            feedingScope = arg3;
        }

        return {
            'vizType' : type,
            'feeds' : AutoFeedingUtils.smartFeeding(feeds, type, analysisObjects, feedingScope)
        };
    };

    /**
     * Suggest viz type by analysis objects
     *
     *
     * @param {[sap.viz.controls.common.feeds.AnalysisObject]} analysisObjects
     *          proposed AnalysisObjects to feed
     *
     * @return {
     *             vizType: String,
     *             feeds: [sap.viz.controls.common.feeds.FeedItem]
     *         }
     *
     */
    BVRService.suggestChartWithFeeds = function(analysisObjects) {
    };
    return BVRService;
});

// @formatter:off
define('sap/viz/controls/common/helpers/MapLayers',[
    'sap/viz/controls/common/utils/Utils'
],
function(Utils) {
// @formatter:on

    var MapLayers = {};

    MapLayers.toJSON = function(instance) {
        return Utils.toJSON(instance, function(instance) {
            return instance;
        });
    };

    MapLayers.fromJSON = function(json) {
        return Utils.fromJSON(json, function(json) {
            return json;
        });
    };

    return MapLayers;
});

// @formatter:off
define('sap/viz/controls/runtime/ModelHandler',[
 'sap/viz/controls/common/utils/ChartTypeUtil'
],
function(ChartTypeUtil) {
// @formatter:on

    var ModelHandler = function(vizModel) {
        this.__className = "sap.viz.controls.runtime.ModelHandler";
        this._vizModel = vizModel;
        this._isMNDVisibleChanged = false;
        this._feedingItemsChanged = false;
    };

    ModelHandler.prototype._type = function(value) {
        if (arguments.length > 0) {
            this._vizModel._type = value;
            return this;
        } else {
            return this._vizModel._type;
        }
    };
    
    ModelHandler.prototype._feedingItems = function(value) {
        if (arguments.length > 0) {
            this._vizModel._feedingItems = value;
            return this;
        } else {
            return this._vizModel._feedingItems;
        }
    };
    
    ModelHandler.prototype._filterItems = function(value) {
        if (arguments.length > 0) {
            this._vizModel._filterItems = value;
            return this;
        } else {
            return this._vizModel._filterItems;
        }
    };
    
    ModelHandler.prototype.explicitFeedingItems = function(options) {
        return this._vizModel.feedingItems();
    };
    
    ModelHandler.prototype.deactive = function(){
    };
    
    ModelHandler.prototype.postLoad = function(){
    };
    /**
     * get and set filter items
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    ModelHandler.prototype.feedingItemsChanged = function(value, enableTrellis) {
    };

    /**
     * show or hide MND
     * @param {Boolean} value
     * @return {Boolean}
     */
    ModelHandler.prototype.isMNDVisibleChanged = function(value) {
    };
    
    ModelHandler.prototype._setIsMNDVisible = function(value) {
    };

    ModelHandler.prototype.vizModelChanged = function(options) {
    };

    ModelHandler.prototype._restorePlayerFieldHistory = function(newType) {
        if(!ChartTypeUtil.supportAnimation(newType)) {
            var playerFieldHistory = this._vizModel.playerField() ? this._vizModel.playerField().clone() : null;
            this._vizModel.playerField(null);
            if(playerFieldHistory) {
                this._vizModel._playerFieldHistory = playerFieldHistory;
            }
        } else {
            if(!this._vizModel.playerField()) {
                this._vizModel.playerField(this._vizModel._playerFieldHistory);
            }
        }
    };
    /**
     * Update the vizType when properties (type, direction or stacking property) change or feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed.
     * @private
     * @param {String} type
     * @param {Boolean} typeChanged
     */
    ModelHandler.prototype.propertiesChanged = function(type, typeChanged) {
    };
    
    ModelHandler.prototype.getFilterItems = function(selection, isExclude, vizData, feeding) {
    };
    
    ModelHandler.prototype.cloneFeeds = function(feeds){
        
    };
    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    ModelHandler.prototype.clone = function(cloneModel) {
    };

    return ModelHandler;
});

// @formatter:off
define('sap/viz/controls/runtime/InfoModelHandler',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/AutoFeedingUtils',
    'sap/viz/controls/common/feeds/HierarchyLevelObject',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/helpers/MapLayers',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/runtime/ModelHandler'
],
function(OOUtil, utils, Event, EventDispatcher, ChartConst, AnalysisObject, AnalyticalType, AutoFeedingUtils,
    HierarchyLevelObject, FeedItem, FeedUtils, MapLayers, BVRService, AbstractFilter, ChartTypeUtil, FilterHelper, ModelHandler) {
// @formatter:on

    var InfoModelHandler = function(vizModel) {
        InfoModelHandler.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.InfoModelHandler";
    };
    
    OOUtil.extend(InfoModelHandler, ModelHandler);

    /**
     * get and set filter items
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    InfoModelHandler.prototype.feedingItemsChanged = function(value, enableTrellis) {
        this._feedingItems( value || [] );
    };

    /**
     * Update the vizModel when properties (type, direction or stacking property) change, feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed, or filter information changed.
     * @param {Object} options {
     *                              type: String,
     *                              feedingItems: [FeedingItem],
     *                              filterItems : [FilterItem]
     *                          }
     * @public
     */
    InfoModelHandler.prototype.vizModelChanged = function(options) {
        var feedsChanged = false;

        // Option: type
        var oldType = this._type();
        if (options.type) {
            this._type(options.type);
        }
        var newType = this._type();

        if(newType !== oldType)
        {
            this._restorePlayerFieldHistory(newType);
        }

        // Option: feedingItems
        var feedsChanged = false;
        if (options.feedingItems) {
            feedsChanged = true;
            this._feedingItems(options.feedingItems);
        }

        var filterChanged = false;
        if (options.filterItems) {
            this._filterItems( options.filterItems );
            filterChanged = true;
        }
        
        var args = {
            'vizTypeChanged' : oldType !== newType,
            'feedingItemsChanged' : this._feedingItemsChanged || feedsChanged,
            'filterChanged' : filterChanged
        };

        // Reset this flag
        this._feedingItemsChanged = false;
        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    /**
     * Update the vizType when properties (type, direction or stacking property) change or feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed.
     * @private
     * @param {String} type
     * @param {Boolean} typeChanged
     */
    InfoModelHandler.prototype.propertiesChanged = function(type, typeChanged) {
        var vizModelType = this._type();
        if (!vizModelType) {
            return;
        }

        var args = {
            'vizTypeChanged' : typeChanged
        };
        
        if(args.vizTypeChanged)
        {
            this._restorePlayerFieldHistory(type);
        }
        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    InfoModelHandler.prototype.getFilterItems = function(selection, isExclude, vizData, feeding) {
        return FilterHelper.getFilterItems(selection, isExclude, this._filterItems(), this._feedingItems(), vizData, feeding);
    };

    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    InfoModelHandler.prototype.clone = function(cloneModel) {
        var result = cloneModel;
        result._type = this._type();
        var feedingItems = this._feedingItems();
        if (feedingItems && feedingItems.length > 0) {
            for (var i = 0; i < feedingItems.length; i++) {
                result._feedingItems[i] = feedingItems[i].clone();
            }
        }
        var filterItems = this._filterItems();
        if (filterItems && filterItems.length > 0) {
            for (var j = 0; j < filterItems.length; j++) {
                result._filterItems[j] = filterItems[j].clone();
            }
        }
        return result;
    };

    return InfoModelHandler;
});

// @formatter:off
define('sap/viz/controls/runtime/MapModelHandler',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/AutoFeedingUtils',
    'sap/viz/controls/common/feeds/HierarchyLevelObject',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/helpers/MapLayers',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/runtime/ModelHandler'
],
function(OOUtil, utils, Event, EventDispatcher, ChartConst, AnalysisObject, AnalyticalType, AutoFeedingUtils,
    HierarchyLevelObject, FeedItem, FeedUtils, MapLayers, BVRService, AbstractFilter, ChartTypeUtil, FilterHelper, ModelHandler) {
// @formatter:on

    var MapModelHandler = function(vizModel) {
        MapModelHandler.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.MapModelHandler";
    };
    
    OOUtil.extend(MapModelHandler, ModelHandler);
    /**
     * feedingItemsChanged 
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @param {boolean} notify or not
     */
    MapModelHandler.prototype.feedingItemsChanged = function(value, notify) {
      
        if(notify !== false){
           var changes = [];
           var feedingItems = this._feedingItems();
           for(var i=0; i<value.length; i++){
              if(feedingItems[i] !== value[i] ){
                  if(feedingItems[i] && value[i] && FeedUtils.equal(feedingItems[i], value[i])){
                      continue;
                  } else {
                      changes.push(i);
                  }
              }
           }
           this._feedingItems(value);
           if (changes.length > 0) {
              this._vizModel._feedingItemsHistory = null;
              var args = {
                  'feedingItemsChanged' : true,
                  feedsChangedInfo : {
                      items : changes
                  }
              };
              this._feedingItemsChanged = false;
              this._vizModel.dispatchPropertiesChangedEvent(args);
           }
        }else{
          this._feedingItems(value);
        }
        
    };

    /**
     * show or hide MND
     * @param {Boolean} value
     * @return {Boolean}
     */
    MapModelHandler.prototype.isMNDVisibleChanged = function(value) {
        this._vizModel._feedingItemsHistory = null;
    };
    
    MapModelHandler.prototype._setIsMNDVisible = function(value) {
        if (this._vizModel.isMNDVisible() !== value) {
            this._vizModel._isMNDVisible = value;
            this._isMNDVisibleChanged = true;
        }
    };

    /**
     * Update the vizModel when properties (type, direction or stacking property) change, feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed, or filter information changed.
     * @param {Object} options {
     *                              type: String,
     *                              feedingItems: [FeedingItem],
     *                              filterItems : [FilterItem]
     *                          }
     * @public
     */
    MapModelHandler.prototype.vizModelChanged = function(options) {
        var feedsChanged = false;
        var oldType = this._type();
        if (options.type) {
            this._type(options.type);
        }
        var newType = this._type();
        
        if(newType !== oldType)
        {
            this._restorePlayerFieldHistory(newType);
        }
        

        // Option: feedingItems
        if (options.feedingItems) {
            var feedingItems = this._feedingItems();
            if(feedingItems.length != options.feedingItems.length){
                feedsChanged = true;
            } else {
                for(var i=0; i<feedingItems.length; i++){
                    if( !FeedUtils.equal(feedingItems[i], options.feedingItems[i]) ){
                        feedsChanged = true;
                        break;
                    }
                }
            }

            if (feedsChanged) {
                this._vizModel._feedingItemsHistory = null;
                this._feedingItems(options.feedingItems);
                this._vizModel.extensionValues({
                  map:{
                    feeding: options.feedingItems
                  }
                });
            }
        }

        var filterChanged = false;
        if (options.filterItems) {
            this._filterItems(options.filterItems);
            filterChanged = true;
        }
        
        var args = {
            'vizTypeChanged' : oldType !== newType,
            'feedingItemsChanged' : this._feedingItemsChanged || feedsChanged,
            'filterChanged' : filterChanged
        };

        this._type(newType);
        // Reset this flag
        this._feedingItemsChanged = false;

        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    /**
     * Update the vizType when properties (type, direction or stacking property) change or feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed.
     * @private
     * @param {String} type
     * @param {Boolean} typeChanged
     */
    MapModelHandler.prototype.propertiesChanged = function(type, typeChanged) {
        var vizModelType = this._type();
        if (!vizModelType) {
            return;
        }
        var newType = vizModelType;
        var args = {
            'vizTypeChanged' : typeChanged || (vizModelType !== type)
        };
        
        this._type(newType);

        // Reset this flag
        this._feedingItemsChanged = false;
        this._isMNDVisibleChanged = false;

        if(args.vizTypeChanged)
        {
            this._restorePlayerFieldHistory(newType);
        }
        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    MapModelHandler.prototype.getFilterItems = function(selection, isExclude, vizData, feeding) {
        return FilterHelper.getMapFilterItems(selection, isExclude, this._filterItems(), this._feedingItems());
    };

    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    MapModelHandler.prototype.clone = function(cloneModel) {
        var result = cloneModel;
        result._type = this._type();
        var feedingItems = this._feedingItems();
        if (feedingItems && feedingItems.length > 0) {
            for (var i = 0; i < feedingItems.length; i++) {
                result._feedingItems[i] = [];
                for(var n=0; n<feedingItems[i].length; n++){
                    result._feedingItems[i][n] = feedingItems[i][n].clone();
                }
            }
        }
        var filterItems = this._filterItems();
        if (filterItems && filterItems.length > 0) {
            for (var j = 0; j < filterItems.length; j++) {
                result._filterItems[j] = filterItems[j].clone();
            }
        }
        return result;
    };

    return MapModelHandler;
});

// @formatter:off
define('sap/viz/controls/runtime/VizModelHandler',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/AutoFeedingUtils',
    'sap/viz/controls/common/feeds/HierarchyLevelObject',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/helpers/MapLayers',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/runtime/ModelHandler'
],
function(OOUtil, utils, Event, EventDispatcher, ChartConst, AnalysisObject, AnalyticalType, AutoFeedingUtils,
    HierarchyLevelObject, FeedItem, FeedUtils, MapLayers, BVRService, AbstractFilter, ChartTypeUtil, FilterHelper, ModelHandler) {
// @formatter:on

    var VizModelHandler = function(vizModel) {
        VizModelHandler.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.VizModelHandler";
    };
    
    OOUtil.extend(VizModelHandler, ModelHandler);

    VizModelHandler.prototype.explicitFeedingItems = function(options) {
        options = options||{};
        var feeds = this._feedingItems();
        var type = this._type();
        if (!ChartTypeUtil.isMultipleChart( type )) {
            feeds = FeedUtils.removeRowAndColumnFeedItems(feeds);
        }
      var  withMND = options.withMND !=null ?  options.withMND===true : this._vizModel.isMNDVisible();
        if (!withMND) {
            feeds = FeedUtils.removeMND(feeds);
        }
        var emptyFeeds = FeedUtils.buildEmptyFeeds(type);
        feeds = FeedUtils.merge(emptyFeeds, feeds);
		return feeds;
    };
    
    VizModelHandler.prototype.deactive = function(){
        this._vizModel._feedingItemsHistory = FeedUtils.cloneFeeds(this._feedingItems());
        this._vizModel._playerFieldHistory = this._vizModel.playerField() ? this._vizModel.playerField().clone() : null;
    };
    
    VizModelHandler.prototype.postLoad = function(){
        var feedingItems = this._feedingItems();
        this._vizModel._feedingItemsHistory = FeedUtils.cloneFeeds(feedingItems);
        this._vizModel._playerFieldHistory = this._vizModel.playerField() ? this._vizModel.playerField().clone() : null;
        var type = this._type();
        var isMNDVisible = FeedUtils.hasMND(feedingItems);
        this._vizModel._isMNDVisible = isMNDVisible;
        if(!isMNDVisible){
            var feedMND = _feedMND(type, feedingItems, isMNDVisible);
            this._feedingItems(feedMND.feeds);
        }
    };
    /**
     * get and set filter items
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    VizModelHandler.prototype.feedingItemsChanged = function(value, enableTrellis) {
        // Remove multiplier when disable trellis
        var extensionValues = this._vizModel.extensionValues();
        enableTrellis = extensionValues.feedingPanel ? extensionValues.feedingPanel.enableTrellis : enableTrellis;
        if (enableTrellis === false) {
            value = FeedUtils.removeRowAndColumnFeedItems(value);
        }
        // Update MND flag
        this._setIsMNDVisible(FeedUtils.hasMND(value));
        //
        this._feedingItemsChanged = !FeedUtils.equal(value, this._feedingItems());
        if (this._feedingItemsChanged) {
            this._feedingItems( value || [] );
            this._vizModel._feedingItemsHistory = null;
            var haveRowColum = FeedUtils.hasRowOrColumn(this._feedingItems());
            var currentType = this._type();
            var newType;
            if (haveRowColum && !ChartTypeUtil.isMultipleChart(currentType)) {
                //single to multi type changed by adding row and column
                newType = ChartTypeUtil.toMultiChartType(currentType);
                this._vizModel.type(newType);
            } else if (!haveRowColum && ChartTypeUtil.isMultipleChart(currentType)) {
                //multi to single type changed by feeding with row and column
                newType = ChartTypeUtil.toSingleChartType(currentType);
                this._vizModel.type(newType);
            } else {
                //feeding items Changed
                this.propertiesChanged(currentType, false);
            }
            // feedingItemsHistory will be rewrite in _propertiesChanged, so we should clear it again
            this._vizModel._feedingItemsHistory = null;
            this._vizModel._playerFieldHistory = null;
        }
    };

    /**
     * show or hide MND
     * @param {Boolean} value
     * @return {Boolean}
     */
    VizModelHandler.prototype.isMNDVisibleChanged = function(value) {
            this._isMNDVisibleChanged = true;
            this._vizModel._feedingItemsHistory = null;
            this._vizModel._playerFieldHistory = null;
            this.propertiesChanged(this._type(), false);
            this._vizModel._feedingItemsHistory = null;
            this._vizModel._playerFieldHistory = null;
    };
    
    VizModelHandler.prototype._setIsMNDVisible = function(value) {
        var curValue = (value === true);
        if (this._vizModel.isMNDVisible() !== curValue) {
            this._vizModel._isMNDVisible = curValue;
            this._isMNDVisibleChanged = true;
        }
    };

    /**
     * Update the vizModel when properties (type, direction or stacking property) change, feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed, or filter information changed.
     * @param {Object} options {
     *                              type: String,
     *                              feedingItems: [FeedingItem],
     *                              filterItems : [FilterItem]
     *                          }
     * @public
     */
    VizModelHandler.prototype.vizModelChanged = function(options) {
        var feedsChanged = false;

        // BVR
        if (!this._vizModel._feedingItemsHistory) {
            this._vizModel._feedingItemsHistory = FeedUtils.cloneFeeds(this._feedingItems());
        }
        var isMNDVisible = this._vizModel.isMNDVisible();
        // Option: type
        var oldType = this._type();
        if (options.type) {
            this._type(options.type);
        }
        var newType = this._type();

        if(newType !== oldType)
        {
            this._restorePlayerFieldHistory(newType);
        }
        
        var feedMND;
        // Option: feedingItems
        if (options.feedingItems) {
            if(FeedUtils.supportMND(newType)){
                isMNDVisible = FeedUtils.hasMND(options.feedingItems);
                this._setIsMNDVisible(isMNDVisible);
            }
            if (FeedUtils.match(newType, options.feedingItems, false)) {
                feedMND = _feedMND(newType, options.feedingItems, isMNDVisible);
                newType = feedMND.vizType;
                options.feedingItems = feedMND.feeds;
            }

            feedsChanged = !FeedUtils.equal(this._feedingItems(), options.feedingItems);
            if (feedsChanged) {
                this._feedingItems(options.feedingItems);
                this._vizModel._feedingItemsHistory = FeedUtils.cloneFeeds(options.feedingItems);
            }
        }
        var currentFeeds = this._vizModel._feedingItemsHistory;
        // BVR: Change type for trellis and mnd 
        isMNDVisible = this._vizModel.isMNDVisible();
        newType = adaptTypeByTrellisAndMND(newType, currentFeeds, isMNDVisible);

        // If feedsChanged already set to true, don't need to call BVRService
        if (!feedsChanged) {
            var newFeeds;
            // TODO Upgrade BVRService for geo charts
            // Don't switchFeeds if type is not changed.
            if (newType !== oldType) {
                newFeeds = BVRService.switchFeeds(newType, oldType, currentFeeds).feeds;
                feedMND = _feedMND(newType, newFeeds, isMNDVisible);
                newType = feedMND.vizType;
                newFeeds = feedMND.feeds;
            }
            if (newFeeds) {
                this._feedingItems(newFeeds);

                // Update model
                if (FeedUtils.isEmptyFeeds(this._feedingItems()) && FeedUtils.isEmptyFeeds(newFeeds)) {
                    feedsChanged = false;
                } else {
                    // if feed definition changed or feeds changed, feedsChanged = true
                    feedsChanged = !FeedUtils.isFeedDefinitionEqual(oldType, newType) || !FeedUtils.equal(this._feedingItems(), newFeeds);
                }
            }
        }

        var filterChanged = false;
        if (options.filterItems) {
            this._filterItems( options.filterItems );
            filterChanged = true;
        }
        
        var args = {
            'vizTypeChanged' : oldType !== newType,
            'feedingItemsChanged' : this._feedingItemsChanged || feedsChanged,
            'filterChanged' : filterChanged
        };

        this._type( newType );
        // Reset this flag
        this._feedingItemsChanged = false;

        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    /**
     * Update the vizType when properties (type, direction or stacking property) change or feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed.
     * @private
     * @param {String} type
     * @param {Boolean} typeChanged
     */
    VizModelHandler.prototype.propertiesChanged = function(type, typeChanged) {
        var vizModelType = this._type();
        if (!vizModelType) {
            return;
        }
        // BVR
        var feedingItems = this._feedingItems();
        if (!this._vizModel._feedingItemsHistory) {
            this._vizModel._feedingItemsHistory = FeedUtils.cloneFeeds(feedingItems);
        }
        if(type !== "viz/number"){
            this._saveSubtotals(feedingItems, this._vizModel);
        } 
        var newType = vizModelType;
        var currentType = type;
        var currentFeeds = this._vizModel._feedingItemsHistory;
        // BVR: Change new type for trillis and mnd
        var isMNDVisible = this._vizModel.isMNDVisible();
        newType = adaptTypeByTrellisAndMND(newType, currentFeeds, isMNDVisible);

        var feedMND;
        if (FeedUtils.match(newType, currentFeeds, false)) {
            feedMND = _feedMND(newType, currentFeeds, isMNDVisible);
            newType = feedMND.vizType;
            currentFeeds = feedMND.feeds;
        }

        var newFeeds = BVRService.switchFeeds(newType, currentType, currentFeeds).feeds;
        feedMND = _feedMND(newType, newFeeds, isMNDVisible);
        newType = feedMND.vizType;
        newFeeds = feedMND.feeds;
        // Update model
        var feedsChanged = true;
        if (FeedUtils.isEmptyFeeds(feedingItems) && FeedUtils.isEmptyFeeds(newFeeds)) {
            feedsChanged = false;
        } else {
            // if feed definition changed or feeds changed, feedsChanged = true
            feedsChanged = !FeedUtils.isFeedDefinitionEqual(currentType, newType) || !FeedUtils.equal(feedingItems, newFeeds);
        }
        var args = {
            'vizTypeChanged' : typeChanged || (currentType !== newType),
            'feedingItemsChanged' : this._feedingItemsChanged || feedsChanged,
            'isMNDVisibleChanged' : this._isMNDVisibleChanged
        };
        
        this._type(newType);
        this._feedingItems( newFeeds );
        // Reset this flag
        this._feedingItemsChanged = false;
        this._isMNDVisibleChanged = false;

        if(args.vizTypeChanged)
        {
            this._restorePlayerFieldHistory(newType);
        }
        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    VizModelHandler.prototype._saveSubtotals = function(feedingItems, vizModel) {
        var listOfAddedSubtotals = [];
        var hasDimensions = false;
        var hasAddedValues = false;
        for(var i=0; i < feedingItems.length; i++){

            if (feedingItems[i].type() === "calculation"){
                vizModel.savedSubtotals(feedingItems[i]);
            }

            if (vizModel.savedSubtotals() !== null && feedingItems[i].type() === "Dimension"){
                hasDimensions = true;
                for (var v = 0; v < feedingItems[i].values().length; v++){
                    for (var sub = 0; sub < vizModel.savedSubtotals().values().length; sub++){
                        if (feedingItems[i].values()[v].id() === vizModel.savedSubtotals().values()[sub].aggregationTarget()){
                            listOfAddedSubtotals.push(vizModel.savedSubtotals().values()[sub]);
                            hasAddedValues = true;
                        }
                    }
                }
            }
        }
        if ((hasDimensions === false || hasAddedValues === false) && vizModel.savedSubtotals() !== null) {
            vizModel.savedSubtotals().values([]);
        }
        if(vizModel.savedSubtotals() !== null && listOfAddedSubtotals[0]){
            vizModel.savedSubtotals().values(listOfAddedSubtotals);

            var hasSubtotals = false;
            for(var i=0; i < vizModel.feedingItemsHistory().length; i++){
                if (vizModel.feedingItemsHistory()[i].type() === "calculation"){
                     var tempFeedingItemHistory = vizModel.savedSubtotals();
                        vizModel.feedingItemsHistory()[i] =  tempFeedingItemHistory;
                        hasSubtotals = true;
                }
            }
            if (hasSubtotals === false){
                vizModel.feedingItemsHistory().push(vizModel.savedSubtotals());
            }
        }
                
    };

    VizModelHandler.prototype.getFilterItems = function(selection, isExclude, vizData, feeding) {
        return FilterHelper.getFilterItems(selection, isExclude, this._filterItems(), this._feedingItems(), vizData, feeding);
    };

    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    VizModelHandler.prototype.clone = function(cloneModel) {
        var result = cloneModel;
        result._type = this._type();
        var feedingItems = this._feedingItems();
        if (feedingItems && feedingItems.length > 0) {
            for (var i = 0; i < feedingItems.length; i++) {
                result._feedingItems[i] = feedingItems[i].clone();
            }
        }
        var filterItems = this._filterItems();
        if (filterItems && filterItems.length > 0) {
            for (var j = 0; j < filterItems.length; j++) {
                result._filterItems[j] = filterItems[j].clone();
            }
        }
        return result;
    };

    function adaptTypeByTrellis (type, feeds) {
        var CT = ChartTypeUtil;

        if (CT.supportMultiChart(type)) {
            if (FeedUtils.hasRowOrColumn(feeds)) {
                return CT.toMultiChartType(type);
            } else {
                return CT.toSingleChartType(type);
            }
        } else {
            return type;
        }
    }
    /**
     * Adapt to multi when single type could not hold MND, and multi type could hold MND like 'viz/pie'
     * @param {Object} type
     */
    function adaptTypeByMND (type) {
        var CT = ChartTypeUtil;

        if (CT.supportMultiChart(type)) {
            var multi = CT.toMultiChartType(type);
            if (type !== multi && !FeedUtils.supportMND(type) && FeedUtils.supportMND(multi)) {
                return multi;
            } else {
                return type;
            }
        } else {
            return type;
        }
    }
    /**
     * Adapt to multi and mnd, when single type could not hold MND, and multi type could hold MND like 'viz/pie'
     * @param {Object} type
     */
    function adaptTypeByTrellisAndMND (type, feeds, isMNDVisible) {
        var newType = adaptTypeByTrellis(type, feeds);
        if ( isMNDVisible ) {
            newType = adaptTypeByMND(newType);
        }
        return newType;
    }

    function _feedMND (type, feeds, forceMND) {
        if (forceMND) {
            type = adaptTypeByMND(type);
            if (!FeedUtils.hasMND(feeds)) {
                feeds = AutoFeedingUtils.directFeeding(feeds, type, [AnalysisObject.genMND()]);
            }
        } else {
            feeds = FeedUtils.removeMND(feeds);
            // Adapt to single when trellis is empty
            type = adaptTypeByTrellis(type, feeds);
            // Try to add MND when min are not meet
            if (!FeedUtils.isEmptyFeeds(feeds)) {
                if (!FeedUtils.meetMinDimensions(type, feeds)) {
                    feeds = AutoFeedingUtils.directFeeding(feeds, type, [AnalysisObject.genMND()]);
                }
            }
        }
        if (FeedUtils.countAnalyses(feeds, AnalyticalType.MEASURE) === 0) {
            feeds = FeedUtils.removeMND(feeds);
        }
        type = adaptTypeByTrellis(type, feeds);
        return {
            'vizType' : type,
            'feeds' : feeds
        };
    }

    return VizModelHandler;
});

// @formatter:off
define('sap/viz/controls/runtime/VizModel',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/runtime/InfoModelHandler',
    'sap/viz/controls/runtime/MapModelHandler',
    'sap/viz/controls/runtime/VizModelHandler'
],
function(OOUtil, utils, Event, EventDispatcher, ChartConst, BVRService, ChartTypeUtil,
    InfoModelHandler, MapModelHandler, VizModelHandler) {
// @formatter:on

    /**
     * The VizModel class represents the data model used by Viz Controls and maintains the correct status. It
     * determines
     * the viz type based on properties (type, direction and stacking) and feeding information(feedingItems, rowFeeding
     * and
     * columnFeeding). Each Viz Control may listen to its "propertiesChangedEvent" event and do related stuff.(i.e.
     * update ui)
     *
     * <pre>
     * <b>Properties:</b>
     * type - general chart type, which may includes several concerate viz types. For example, the column chart inlcudes
     * "viz/column", "viz/bar", "viz/multi_column" and "viz/multi_bar".
     * direction - "horizontal"/"vertical"
     * stacking - "normal"/"full"
     *
     * feedingItems
     *
     * filters
     *
     * <b>functions:</b>
     * save()
     * load(valueJson)
     *
     * <b>Events:</b>
     * type: "propertiesChangedEvent"
     * handler:function({
     *      type:"propertiesChangedEvent",
     *      data:{
     *              vizTypeChanged : true/false,
     *              feedingItemsChanged : true/false
     *      }
     * })
     * </pre>
     *
     */
    var VizModel = function() {
        VizModel.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.VizModel";
        this._type = null;
        this._isMNDVisible = false; //use silence mnd by default

        this._feedingItems = [];
        this._feedingItemsHistory = null;
        this._savedSubtotals = null;
        this._filterItems = [];
        this._playerFieldHistory = null;
        this._playerField = null;
        this._extensionValues = {};
        this._handler = this._vizModelHandler = new VizModelHandler(this);
    };

    OOUtil.extend(VizModel, EventDispatcher);

    VizModel.PropertiesChangedEvent = 'propertiesChangedEvent';
    
    VizModel.prototype._updateHandler = function(type){
        var newHandler = this._vizModelHandler;
        if(ChartConst.TYPE_GEO_MAP === type){
            if( !this._mapModelHandler ){
                this._mapModelHandler = new MapModelHandler(this);
            }
            newHandler = this._mapModelHandler;
        } else if(ChartTypeUtil.isInfoChart(type)){
            if( !this._infoModelHandler ){
                this._infoModelHandler = new InfoModelHandler(this);
            }
            newHandler = this._infoModelHandler;
        }
        if(newHandler !== this._handler){
            this._handler.deactive();
            this._handler = newHandler;
            this._feedingItems = [];
        }
    };
    
    VizModel.prototype.load = function(options){
        if(!options){
            return;
        }
        
        var typeChanged = false;
        var feedingItemsChanged = false;
        var isMNDVisibleChanged = false;
        if(options.type && options.type!==this._type){
            this._type = options.type;
            this._updateHandler(this._type);
            typeChanged = true;
        }
        if(options.feedingItems){
            this._feedingItems =options.feedingItems;
            feedingItemsChanged = true;
        } else {
            this._feedingItems = [];
        }
        var isMNDVisible = this._isMNDVisible;
        this._handler.postLoad();
        isMNDVisibleChanged = (isMNDVisible !== this._isMNDVisible);

        if(typeChanged || feedingItemsChanged){
            var args = {
                'vizTypeChanged' : typeChanged,
                'isMNDVisibleChanged' : isMNDVisibleChanged,
                'feedingItemsChanged' : feedingItemsChanged,
            };
            this.dispatchPropertiesChangedEvent(args);
        }
    };
    
    /**
     * get and set feedingItems
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    VizModel.prototype.filterItems = function(value) {
        if (arguments.length > 0) {
            this._filterItems = value;

            var args = {
                filterChanged : true
            };
            var filterChangedEvent = new Event(VizModel.PropertiesChangedEvent, this, args);
            this._dispatchEvent(filterChangedEvent);

            return this;
        } else {
            return this._filterItems;
        }
    };
    VizModel.prototype.explicitFeedingItems = function(options) {
        return this._handler.explicitFeedingItems(options);
    };
    /**
     * get and set filter items
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    VizModel.prototype.feedingItems = function(value, enableTrellis) {
        if (arguments.length > 0) {
            this._handler.feedingItemsChanged(value, enableTrellis);
            return this;
        } else {
            return this._feedingItems.slice(0);
        }
    };
    
    VizModel.prototype.savedSubtotals = function(value) {
        if (arguments.length > 0) {
            this._savedSubtotals = value;
            return this;
        } else {
            return this._savedSubtotals;
        }
    };

    VizModel.prototype.feedingItemsHistory = function(value) {
        if (arguments.length > 0) {
            this._feedingItemsHistory = value;
            return this;
        } else {
            return this._feedingItemsHistory;
        }
    };
    /**
     * get or set type
     * @param {String} value
     * @return {String}
     */
    VizModel.prototype.type = function(value) {
        if (arguments.length > 0) {
            if (this._type !== value) {
                var olderType = this._type;
                this._type = value;
                this._updateHandler(this._type);
                this._handler.propertiesChanged(olderType, true);
            }
            return this;
        } else {
            return this._type;
        }
    };
    
    VizModel.prototype.playerField = function(value) {
        if(arguments.length > 0) {
            var args;
            if(value)
            {
                if(!this._playerField || !this._playerField.equal(value)) {
                    this._playerField = value;
                    args = {
                        'sliceDimensionChanged' : true
                    };
                    this.dispatchPropertiesChangedEvent(args);
                }
            }
            else{
                if(this._playerField)
                {
                    this._playerField = null;
                    args = {
                        'sliceDimensionChanged' : true
                    };
                    this.dispatchPropertiesChangedEvent(args);
                }
            }

            return this;
        } else {
            return this._playerField;
        }
    };

    /**
     * show or hide MND
     * @param {Boolean} value
     * @return {Boolean}
     */
    VizModel.prototype.isMNDVisible = function(value) {
        if (arguments.length > 0) {
            var curValue = (value === true);
            if (this._isMNDVisible !== curValue) {
                this._isMNDVisible = curValue;
                this._handler.isMNDVisibleChanged();
            }
            return this;
        } else {
            return this._isMNDVisible;
        }
    };
    /**
     * Update the vizModel when properties (type, direction or stacking property) change, feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed, or filter information changed.
     * @param {Object} options {
     *                              type: String,
     *                              feedingItems: [FeedingItem],
     *                              filterItems : [FilterItem]
     *                          }
     * @public
     */
    VizModel.prototype.vizModelChanged = function(options) {
        if(options.type){
            this._updateHandler(options.type);
        }
        this._handler.vizModelChanged(options);
    };

    VizModel.prototype.updateFilterItems = function(selection, isExclude, vizData, feeding){
        var newFilterItems = this._handler.getFilterItems(selection, isExclude, vizData, feeding);
        this.filterItems(newFilterItems);
    };

    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    VizModel.prototype.clone = function() {
        var result = new VizModel();
        this._handler.clone(result);

        return result;
    };

    /**
     * Get/Set extension values
     * @param {String} extensionValues
     * @return {String}
     */
    VizModel.prototype.extensionValues = function(extensionValues) {
        if (arguments.length > 0) {
            var args = {};
            if (extensionValues) {
                if (this._extensionValues !== extensionValues) {
                    this._extensionValues = extensionValues;
                    args = {
                        'extensionValuesChanged' : true
                    };
                }
            }
            var extensionValuesChangedEvent = new Event(VizModel.PropertiesChangedEvent, this, args);
            this._dispatchEvent(extensionValuesChangedEvent);

            return this;
        } else {
            return this._extensionValues;
        }
    };
    
    VizModel.prototype.dispatchPropertiesChangedEvent = function(args){
        var propertiesChangedEvent = new Event(VizModel.PropertiesChangedEvent, this, args);
        this._dispatchEvent(propertiesChangedEvent);
    };
    
    VizModel.prototype.dispatchEvent = function(event){
        this._dispatchEvent(event);
    };

    return VizModel;
});

define('sap/viz/controls/common/ProxyBase',[],
function() {
    var ProxyBase = function ProxyBase(client) {
        this.__className = "sap.viz.controls.runtime.ProxyBase";
        this.__client = client;
    };
    ProxyBase.prototype._client = function(){
        return this.__client;
    }
    ProxyBase.prototype.updateClient = function(client)
    {
        this.__client = client;
    }
    return ProxyBase;
});

define('sap/viz/controls/runtime/VizProxy',['jquery', 'sap/viz/controls/common/utils/OOUtil', 'sap/viz/controls/common/ProxyBase', 'sap/viz/controls/common/events/Event'], function($, OOUtil, ProxyBase, Event) {
    var VizProxy = function VizProxy(vizModel) {
        VizProxy.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.VizProxy";
    };
    OOUtil.extend(VizProxy, ProxyBase);

    VizProxy.VizProxyEvent = 'VizProxy.VizProxyEvent';
    VizProxy.GetTitleZoneOperation = 'getTitleZoneOperation';
    VizProxy.GetTitleTextOperation = 'getTitleTextOperation';
    VizProxy.SetTitleTextOperation = 'setTitleTextOperation';
    VizProxy.GetTitleTextByFeedingOperation = 'getTitleTextByFeedingOperation';
    VizProxy.RestoreTitleTextOperation = 'restoreTitleTextOperation';
    VizProxy.IsFakeChartOperation = 'isFakeChartOperation';
    VizProxy.IsTitleCustomizedOperation = 'isTitleCustomizedOperation';
    VizProxy.GetPropertiesOperation = 'getPropertiesOperation';
    VizProxy.SetPropertiesOperation = 'setPropertiesOperation';
    VizProxy.SetDatasetOperation = 'SetDatasetOperation';
    VizProxy.GetSelectionOperation = 'getSelectionOperation';
    VizProxy.SetTitleModeOperation = 'setTitleModeOperation';
    VizProxy.GetPropertyZonesOperation = 'getPropertyZonesOperation';
    VizProxy.SetPropertyZonesOperation = 'setPropertyZonesOperation';
    VizProxy.GetDatasetOperation = 'GetDatasetOperation';
    VizProxy.QueryPropertiesOperation = 'queryPropertiesOperation';
    VizProxy.UpdatePropertiesOperation = 'updatePropertiesOperation';
    VizProxy.AddEventListenerOperation = 'addEventListenerOperation';
    VizProxy.RemoveEventListenerOperation = 'removeEventListenerOperation';
    VizProxy.SetAxisScaleOperation = 'setAxisScaleOperation';
    VizProxy.GetTypeOperation = 'getTypeOperation';
    VizProxy.GetDataPointsPosition = 'getDataPointsPosition';
    VizProxy.OnOperation = 'onOperation';
    VizProxy.OffOperation = 'offOperation';
    VizProxy.GetSizeOperation = 'getSizeOperation';
    VizProxy.SetSizeOperation = 'setSizeOperation';
    VizProxy.GetVizFeedingOperation = 'getVizFeedingOperation';

    VizProxy.prototype._model = function() {
        return this._client();
    };
    VizProxy.prototype._doOperation = function(operation, data) {
        data = data || {};
        data.operation = operation;
        var event = new Event(VizProxy.VizProxyEvent, this._model(), data);
        this._model().dispatchEvent(event);
        return event.data.result;
    };

    VizProxy.prototype.getTitleZone = function() {
        return this._doOperation(VizProxy.GetTitleZoneOperation);
    };
    VizProxy.prototype.getTitleText = function() {
        return this._doOperation(VizProxy.GetTitleTextOperation);
    };
    VizProxy.prototype.setTitleText = function(text) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetTitleTextOperation, data);
    };
    VizProxy.prototype.getTitleTextByFeeding = function() {
        return this._doOperation(VizProxy.GetTitleTextByFeedingOperation);
    };
    VizProxy.prototype.restoreTitleText = function() {
        this._doOperation(VizProxy.RestoreTitleTextOperation);
    };

    VizProxy.prototype.SetDataset = function(dataset) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetDatasetOperation, data);
    };

    VizProxy.prototype.setTitleMode = function(mode) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetTitleModeOperation, data);
    };
    VizProxy.prototype.isFakeChart = function() {
        return this._doOperation(VizProxy.IsFakeChartOperation);
    };
    VizProxy.prototype.isTitleCustomized = function() {
        return this._doOperation(VizProxy.IsTitleCustomizedOperation);
    };
    VizProxy.prototype.getProperties = function() {
        return this._doOperation(VizProxy.GetPropertiesOperation);
    };
    VizProxy.prototype.setProperties = function(newProperties) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetPropertiesOperation, data);
    };
    VizProxy.prototype.getSelection = function() {
        return this._doOperation(VizProxy.GetSelectionOperation);
    };

    VizProxy.prototype.getType = function() {
        return this._doOperation(VizProxy.GetTypeOperation);
    };

    VizProxy.prototype.getPropertyZones = function() {
        return this._doOperation(VizProxy.GetPropertyZonesOperation);
    };

    VizProxy.prototype.setPropertyZones = function(propertyZones) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetPropertyZonesOperation, data);
    };

    VizProxy.prototype.queryProperties = function(options) {
        var data = {
            args : arguments
        };

        return this._doOperation(VizProxy.QueryPropertiesOperation, data);
    };

    VizProxy.prototype.updateProperties = function(options) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.UpdatePropertiesOperation, data);
    };

    VizProxy.prototype.getDataset = function() {
        return this._doOperation(VizProxy.GetDatasetOperation);
    };

    VizProxy.prototype.setAxisScale = function(axis) {
        var data = {
            args : arguments
        };
        return this._doOperation(VizProxy.SetAxisScaleOperation, data);
    };

    /**
     * @param {Object} type
     * 	propertyZonesChanged
     * @param {Object} listener
     * @param {Object} scope
     * @param {Object} priority
     */
    VizProxy.prototype.addEventListener = function(type, listener, scope, priority) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.AddEventListenerOperation, data);
    };

    VizProxy.prototype.removeEventListener = function(type, listener, scope) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.RemoveEventListenerOperation, data);
    };

    VizProxy.prototype.getDataPointsPosition = function(dataPoints){
        var data = {
            args : arguments
        };
        return this._doOperation(VizProxy.GetDataPointsPosition, data);
    };

    VizProxy.prototype.on = function(evtType, callback) {
        this._doOperation(VizProxy.OnOperation, {
            'args': arguments
        });
    };

    VizProxy.prototype.off = function(evtType) {
        this._doOperation(VizProxy.OffOperation, {
            'args': arguments
        });
    };

    VizProxy.prototype.getSize = function() {
        return this._doOperation(VizProxy.GetSizeOperation);
    };

    VizProxy.prototype.setSize = function(size) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetSizeOperation, data);
    };

    VizProxy.prototype.getVizFeeding = function() {
        return this._doOperation(VizProxy.GetVizFeedingOperation);
    }

    return VizProxy;
});

// @formatter:off
define('sap/viz/controls/common/VizControlBase',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/runtime/RuntimeManager',
    'sap/viz/controls/runtime/VizModel',
    'sap/viz/controls/runtime/VizProxy'],
function(OOUtil, EventDispatcher, UIControl, RuntimeManager, VizModel, VizProxy) {
// @formatter:on

    // API document: methods in super class
    /**
     * Registers an event listener object with an EventDispatcher object so that the listener receives notification of an
     * event.
     *
     * You can register event listeners on any EventDispatcher object for a specific type of event, scope, and
     * priority. If you no longer need an event listener, remove it by calling removeEventListener(), or memory problems
     * could result.
     *
     * @method sap.viz.controls.common.VizControlBase.prototype.addEventListener
     *
     * @param {String} type
     *            The type of event.
     * @param {Function} listener
     *            The listener function that processes the event.
     * @param {Object} scope
     *            The scope.
     * @param {int} priority
     *            The priority level of the event listener.
     */

    /**
     * Removes a listener from the EventDispatcher object.
     * @method sap.viz.controls.common.VizControlBase.prototype.removeEventListener
     *
     * @param {String} type
     *            The type of event.
     * @param {Function} listener
     *            The listener function that processes the event.
     * @param {Object} scope
     *            The scope.
     */

    //TODO: add a sample for the Viz UI control extension.
    /**
     * Base class for Viz UI control. Each Viz UI control should inherit from VizControlBase.
     * @class sap.viz.controls.common.VizControlBase
     * @extends sap.viz.controls.common.UIControl
     */
    var VizControlBase = function VizControlBase(dom/*HTMLElement*/, uiConfig/*JSON*/, parent) {
        VizControlBase.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.VizControlBase";

        sap.viz.base.utils.log.Analyzer.pnrContext('sap.viz.controls performance log context');

        // host the viz uid when it connects to a viz instance
        this._vizUid = null;
        if (parent) {
            this._parent = parent;
            this.__vizModel = parent._vizModel();
        } else {
            this.__vizModel = this._createModel();
        }

        this.__vizModel.addEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
        this._updatingProperty = 0;
        this.__vizProxy = new VizProxy(this.__vizModel);
    };

    OOUtil.extend(VizControlBase, UIControl);

    /**
     * Connect to a viz instance.
     * @method sap.viz.controls.common.VizControlBase.prototype.connect
     * @param <String> vizUid The uid of the viz instance.
     */
    VizControlBase.prototype.connect = function(vizUid) {
        if(this._vizUid === vizUid){
            return;
        }

        this._vizUid = vizUid;
        //Create model if model does not exist.
        var runtime = RuntimeManager.getRuntime();
        var model = runtime.getModel(vizUid);
        var modelChanged = false;

        if (!model) {
            runtime.registerModel(vizUid, this.__vizModel);
        } else {
            if (this.__vizModel !== model) {
                modelChanged = true;
                this.__vizModel.removeEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
                this.__vizModel = model;
                this.__vizModel.addEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
            }
            runtime.addModelRef(vizUid);
        }
        this._onConnect(vizUid, modelChanged);
    };
    /**
     * Get viz model.
     * @return {sap.viz.controls.runtime.VizModel} the current connected VizModel
     * @protected
     */
    VizControlBase.prototype._vizModel = function() {
        return this.__vizModel;
    };
    /**
     * Get viz proxy.
     * @return {sap.viz.controls.runtime.VizProxy} the current connected VizProxy
     * @protected
     */
    VizControlBase.prototype._vizProxy = function() {
        return this.__vizProxy;
    };
    /**
     * Handler for vizModel changed.
     * @param {sap.viz.controls.common.events.Event} e
     * @protected
     */
    VizControlBase.prototype._onVizModelChanged = function(e) {

    };
    /**
     * Create new model for the control.
     * @returns {Object}
     * @protected
     */
    VizControlBase.prototype._createModel = function() {
        return new VizModel();
    };
    /**
     * Subclass can override this method to init with new connection.
     * @param {String} vizUid
     * @param {Boolean} modelChanged
     * @protected
     */
    VizControlBase.prototype._onConnect = function(vizUid, modelChanged) {
        this._vizProxy().updateClient(this.__vizModel);
    };
    /**
     * Subclass can override this method to clean up the connection.
     * @param {String} vizUid
     * @protected
     */
    VizControlBase.prototype._onDisconnect = function() {

    };
    VizControlBase.prototype._onAfterDisconnect = function() {

    };
    /**
     * Disconnect a viz control from a viz instance.
     * @method sap.viz.controls.common.VizControlBase.prototype.disconnect
     */
    VizControlBase.prototype.disconnect = function() {
        this._removeSharedModel(true);
    };

    /**
     * Remove shared model in runtime.
     * @param {Boolean} notifyDisconnect
     */
    VizControlBase.prototype._removeSharedModel = function(notifyDisconnect) {
        var vizUid = this._vizUid;
        if (vizUid) {
            var model = RuntimeManager.getRuntime().getModel(vizUid);
            if (model) {
                if (notifyDisconnect) {
                    this._onDisconnect();
                }

                //get clone of chart model
                model.removeEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
                this.__vizModel = model.clone();
                this.__vizModel.addEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
                RuntimeManager.getRuntime().removeModelRef(vizUid);
            }
            if (notifyDisconnect) {
            	this._onAfterDisconnect();
            }
            this._vizUid = null;
        }
    };

    /**
     * @override
     */
    VizControlBase.prototype.destroy = function() {
        this._removeSharedModel(false);
        VizControlBase.superclass.destroy.apply(this, arguments);
    };

    VizControlBase.prototype._beginUpdateProperty = function(){
        this._updatingProperty++;
    };

    VizControlBase.prototype._inUpdatingProperty = function(){
        return this._updatingProperty > 0;
    };

    VizControlBase.prototype._endUpdateProperty = function(){
        this._updatingProperty--;
    };

    VizControlBase.prototype._dispatchPropertyEvent = function(e){
        if(!this._updatingProperty){
            VizControlBase.superclass._dispatchEvent.apply(this, arguments);
        }
        //Do not dispatch event if updatingProperty is true.
    };

    /**
     * Dispatch event. Override the method to add vizUid to event data.
     */
    VizControlBase.prototype._dispatchEvent = function(event) {
        if (!event.data) {
            event.data = {};
        }
        event.data.token = this._vizUid;

        VizControlBase.superclass._dispatchEvent.apply(this, arguments);
    };

    /**
     * Serialize VizControlBase to a JSON object. <br/>
     * @method sap.viz.controls.common.VizControlBase.prototype.save
     * @return {JSON}
     */
    VizControlBase.prototype.save = function(){
        return {};
    };
    /**
     * Deserialize VizControlBase from JSON object.<br/>
     * @method sap.viz.controls.common.VizControlBase.prototype.load
     * @param {JSON} valueJSON
     */
    VizControlBase.prototype.load = function(valueJSON){
    };

    return VizControlBase;
});

// @formatter:off
define('sap/viz/controls/common/VizControlHost',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/VizControlBase'],
function(OOUtil, EventDispatcher, VizControlBase) {
// @formatter:on

    /**
     * Host class for Viz UI control to group sub viz controls. For example VizFrame is a host control to group
     * Chart, FilterBar, ContextMenu, Annotation and CustomButton controls.
     * @class sap.viz.controls.common.VizControlHost
     * @extends sap.viz.controls.common.VizControlBase
     */
    var VizControlHost = function VizControlHost() {
        VizControlHost.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.VizControlHost";
        this._children = [];
    };

    OOUtil.extend(VizControlHost, VizControlBase);

    /**
     * @override
     */
    VizControlHost.prototype._onConnect = function(value) {
        VizControlHost.superclass._onConnect.apply(this, arguments);
        for (var i = 0; i < this._children.length; i++) {
            this._children[i].connect(value);
        }
    };

    /**
     * @override
     */
    VizControlHost.prototype._onDisconnect = function() {
        VizControlHost.superclass._onDisconnect.apply(this, arguments);
        for (var i = 0; i < this._children.length; i++) {
            this._children[i].disconnect();
        }
    };

    /**
     * Add child for the container, as well as the child's function name list and event type list.
     * @param {sap.viz.controls.common.VizControlBase} child
     * @param {Array} functions
     * @param {Array} events
     * @protected
     */
    VizControlHost.prototype._addChild = function(child, functions, events) {
        //add child if child is not null
        if (!child) {
            return;
        }
        this._children.push(child);

        var _this = this;

        functions && functions.forEach(function(fName) {
            _this[fName] = function() {
                return child[fName].apply(child, arguments);
            };
        });

        events && events.forEach(function(eName) {
            child.addEventListener(eName, function(event) {
                // TODO: Add event.clone() to avoid dispatch original event out.
                _this._dispatchEvent(event);
            });
        });

    };


    /**
     * @override
     */
    VizControlHost.prototype.destroy = function() {
        var child;

        while (child = this._children.shift()) {
            try {
                child.destroy();
            } catch (e) {}
        }

        VizControlHost.superclass.destroy.apply(this, arguments);
    };



    return VizControlHost;
});

define('sap/viz/controls/common/views/feed/FeedingShelfEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var FeedingShelfEvent = function(type, target, data) {
        FeedingShelfEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.FeedingShelfEvent";
    };
    OOUtil.extend(FeedingShelfEvent, Event);

    FeedingShelfEvent.CLICK_ADD_FEEDING = "clickAddFeeding";
    FeedingShelfEvent.ACTION_CHANGED = "actionChanged";
    FeedingShelfEvent.FEEDING_CHANGED = "feedingChanged";
    FeedingShelfEvent.FEEDING_EMPTY_CHANGED = "feedingEmptyChanged";
    FeedingShelfEvent.FEEDING_DROP_DENY = "feedingDropDeny";

    return FeedingShelfEvent;
});

// @formatter:off
define('sap/viz/controls/feeding/FeedingPanelConfig',[
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/config/GlobalConfig'
],
function(ChartConst, GlobalConfig) {
// @formatter:on
    var FeedingPanelConfig = {};

    FeedingPanelConfig.instance = function() {
        return {
            'useBuildInFeedList' : true,
            "defaultVizType" : ChartConst.TYPE_COLUMN,
            'enableTrellis' : true
        };
    };

    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_FEEDING, FeedingPanelConfig);
    return FeedingPanelConfig;
});

// @formatter:off
define('sap/viz/controls/mapbuilder/MapBuilderConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var MapBuilderConfig = {};

    MapBuilderConfig.instance = function() {
        return {
            basemap : {
                providers : ["ESRI", "CVOM", "NAVTEQ"],
                changeable : true,
                selected : "ESRI"
            },
            feedMap : {
                actionGroups : []
            },
            feedingPanel: {
            }
        };
    };

    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_MAPBUILDER, MapBuilderConfig);
    return MapBuilderConfig;
});

// @formatter:off
define('sap/viz/controls/switchbar/SwitchBarConfig',[
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/managers/LangManager'
],
function(GlobalConfig, ChartConst, LangManager) {
// @formatter:on
    var SwitchBarConfig = {};

    SwitchBarConfig.instance = function() {
        return {
            "visible" : true,
            "defaultVizType" : ChartConst.TYPE_BAR,
            "groups" : [{
                "name" : LangManager.get("VIZ_SWITCHBAR_BAR_COLUMN_CHARTS"),
                "types" : [{
                    "id" : ChartConst.TYPE_BAR
                }, {
                    "id" : ChartConst.TYPE_COLUMN
                }, {
                    "id" : ChartConst.TYPE_STACKED_BAR
                }, {
                    "id" : ChartConst.TYPE_STACKED_COLUMN
                }, {
                    "id" : ChartConst.TYPE_DUAL_BAR
                }, {
                    "id" : ChartConst.TYPE_DUAL_COLUMN
                }, {
                    "id" : ChartConst.TYPE_3D_COLUMN
                }]
            }, {
                "name" : LangManager.get("VIZ_SWITCHBAR_LINE_CHARTS"),
                "types" : [{
                    "id" : ChartConst.TYPE_LINE
                }, {
                    "id" : ChartConst.TYPE_AREA
                }, {
                    "id" : ChartConst.TYPE_COMBINATION
                }, {
                    "id" : ChartConst.TYPE_DUAL_LINE
                }, {
                    "id" : ChartConst.TYPE_DUAL_COMBINATION
                }]
            }, {
                "name" : LangManager.get("VIZ_SWITCHBAR_PIE_CHARTS"),
                "types" : [{
                    "id" : ChartConst.TYPE_PIE
                }, {
                    "id" : ChartConst.TYPE_DONUT
                }, {
                    "id" : ChartConst.TYPE_PIE_WITH_DEPTH
                }]
            }, {
                "name" : LangManager.get("VIZ_SWITCHBAR_GEO_CHARTS"),
                "types" : [{
                    "id" : ChartConst.TYPE_GEO_BUBBLE
                }, {
                    "id" : ChartConst.TYPE_GEO_CHOROPLETH
                }, {
                    "id" : ChartConst.TYPE_GEO_PIE
                }]
            }, {
                "name" : LangManager.get("VIZ_SWITCHBAR_SCATTER_CHARTS"),
                "types" : [{
                    "id" : ChartConst.TYPE_SCATTER
                }, {
                    "id" : ChartConst.TYPE_BUBBLE
                }, {
                    "id" : ChartConst.TYPE_SCATTER_MATRIX
                }]
            }, {
                "name" : LangManager.get("VIZ_SWITCHBAR_MAP_CHARTS"),
                "types" : [{
                    "id" : ChartConst.TYPE_HEATMAP
                }, {
                    "id" : ChartConst.TYPE_TREEMAP
                }]
            }, {
                "name" : LangManager.get("VIZ_SWITCHBAR_TABLES"),
                "types" : [{
                    "id" : ChartConst.TYPE_TABLE
                }]
            }, {
                "name" : LangManager.get("VIZ_SWITCHBAR_NUMBER_CHARTS"),
                "types" : [{
                    "id" : ChartConst.TYPE_NUMBER
                }]
            }, {
                "name" : LangManager.get("VIZ_SWITCHBAR_OTHER_CHARTS"),
                "types" : [{
                    "id" : ChartConst.TYPE_BOXPLOT
                }, {
                    "id" : ChartConst.TYPE_FUNNEL
                }, {
                    "id" : ChartConst.TYPE_NETWORK
                }, {
                    "id" : ChartConst.TYPE_PC
                }, {
                    "id" : ChartConst.TYPE_RADAR
                }, {
                    "id" : ChartConst.TYPE_TAG_CLOUD
                }, {
                    "id" : ChartConst.TYPE_TREE
                }, {
                    "id" : ChartConst.TYPE_WATERFALL
                }]
            }]
        };
    };

    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_SWITCHBAR, SwitchBarConfig);
    return SwitchBarConfig;
});

// @formatter:off
define('sap/viz/controls/builder/VizBuilderConfig',[
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/feeding/FeedingPanelConfig',
    'sap/viz/controls/mapbuilder/MapBuilderConfig',
    'sap/viz/controls/switchbar/SwitchBarConfig'
],
function(GlobalConfig, ChartConst, FeedingPanelConfig, MapBuilderConfig, SwitchBarConfig) {
// @formatter:on
    var VizBuilderConfig = {};

    VizBuilderConfig.instance = function() {
        return {
            "defaultVizType" : ChartConst.TYPE_COLUMN,
            "header" : {
                "visible" : true
            },
            "controls" : {
                "switchBar" : SwitchBarConfig.instance(),
                "feedingPanel" : FeedingPanelConfig.instance(),
                "mapBuilder" : MapBuilderConfig.instance()
            }
        };
    };

    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_BUILDER, VizBuilderConfig);
    return VizBuilderConfig;
});

define('sap/viz/controls/builder/VizBuilderEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var VizBuilderEvent = function(type, target, data) {
        VizBuilderEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.builder.VizBuilderEvent";
    };

    OOUtil.extend(VizBuilderEvent, Event);

    return VizBuilderEvent;
});

define('sap/viz/controls/mapbuilder/constants/Const',[],function() {

    var Const = {};

    Const.VIZ_TYPE_CHOROPLETH = "choropleth";
    
    Const.VIZ_TYPE_MARKER = "marker";
    
    Const.VIZ_TYPE_BUBBLE = "bubble";
    

    return Const;
});
// @formatter:off
define('sap/viz/controls/mapbuilder/components/PropertyTriangle',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst'
],
function($, CSSConst) {
// @formatter:on 
    var PropertyTriangle = function(){
        
        this.__className = "sap.viz.controls.geo.compnents.PropertyTriangle";
        
    }

    
    PropertyTriangle.prototype.createTriangle = function(){
        var icon = document.createElement('DIV');
        
        this.turnToExpandTriangle(icon);
        
        return icon;
    };
    
    PropertyTriangle.prototype.turnToExpandTriangle = function(icon){
        if(icon)
        {
            $(icon).removeClass(CSSConst.MAPBUILDER_PREFIX + "section-expand");
            $(icon).addClass(CSSConst.MAPBUILDER_PREFIX + "section-collapse");
            $(icon).removeClass(CSSConst.MAPBUILDER_PREFIX + "header-collapse");
            $(icon).addClass(CSSConst.MAPBUILDER_PREFIX + "header-expand");
        }
    };
    
    PropertyTriangle.prototype.turnToShrinkTriangle = function(icon){
        if(icon)
        {
            $(icon).removeClass(CSSConst.MAPBUILDER_PREFIX + "section-collapse");
            $(icon).addClass(CSSConst.MAPBUILDER_PREFIX + "section-expand");
            $(icon).removeClass(CSSConst.MAPBUILDER_PREFIX + "header-expand");
            $(icon).addClass(CSSConst.MAPBUILDER_PREFIX + "header-collapse");

        }
    };
    
    return PropertyTriangle;
});
// @formatter:off
define('sap/viz/controls/mapbuilder/events/GeoEvent',[
    'sap/viz/controls/common/utils/OOUtil', 
    'sap/viz/controls/common/events/Event'],
function(OOUtil, Event) {
// @formatter:on
    
    var GeoEvent = function(type, target, data) {
        GeoEvent.superclass.constructor.apply(this, arguments);
        
        this.__className = "sap.viz.controls.geo.events.GeoEvent";
    };
    
    OOUtil.extend(GeoEvent, Event);
        
    GeoEvent.ADD_LAYER = "addLayer";
    
    GeoEvent.SHOW_LAYER = "showLayer";
    
    GeoEvent.HIDE_LAYER = "hideLayer";
    
    GeoEvent.EXPAND_SECTION= "expandSection";
    
    GeoEvent.HIDE_SECTION = "hideSection";
    
    GeoEvent.DELETE_LAYER = "deleteLayer";
    
    GeoEvent.REORDER_LAYER = "reorderLayer";
    
    GeoEvent.CHANGE_LAYER_VIZTYPE = "changeLayerVizType";
    
    GeoEvent.CHANGE_BASEMAP_PROVIDER = "changeBasemapProvider";
    
    GeoEvent.UPDATE_LAYER_DATA = "updateLayerData";
    
    GeoEvent.RENAME_LAYER = "renameLayer";
    
    GeoEvent.DISPLAY_SETTINGMENU = "displaySettingMenu";
    
    GeoEvent.SHOW_LEGEND = "showLegend";
    
    GeoEvent.HIDE_LEGEND = "hideLegend";
    
    GeoEvent.CHANGE_VIZ_PROPERITIES = "changeVizProperties";
    
    GeoEvent.CHANGE_BASEMAP_TYPE = "changeBaseMapType";
    
    GeoEvent.ACTION_CHANGED = "actionChanged";
    
    return GeoEvent;
});
// @formatter:off
define('sap/viz/controls/mapbuilder/sections/SectionBase',[
  "jquery",
  "sap/viz/controls/common/utils/OOUtil", 
  "sap/viz/controls/common/UIControl",
  "sap/viz/controls/common/VizControlBase",
  "sap/viz/controls/common/constants/CSSConst",
  "sap/viz/controls/mapbuilder/components/PropertyTriangle",
  "sap/viz/controls/mapbuilder/events/GeoEvent",
  "sap/viz/controls/mapbuilder/constants/Const",
],function($, OOUtil, UIControl, VizControlBase, CSSConst, PropertyTriangle, GeoEvent, Const) {
// @formatter:on

    var SectionBase = function(div, config) {
        SectionBase.superclass.constructor.apply(this, arguments);

        this.__className = "sap.viz.controls.geo.sections.SectionBase";

        this._config = config;
        this._checkable = this._config.checkable;
        this._configable = this._config.configable;
        this._sortable = this._config.sortable;
        this._isExpand = false;
        this._isChecked = true;

        this._instanceDom = this._dom;
        this._checkBoxDom = null;
        this._symbolDom = null;
        this._headerDom = null;
        this._iconDom = null;
        this._labelDom = null;
        this._configDom$ = null;
        this._controlPanel = null;
        this._childControls = [];

        this._isMouseDown = false;
        this._selected = false;
        this._propertyTriangle = new PropertyTriangle();
        this._availableControls = [];
        this._createCompoment();
    };

    OOUtil.extend(SectionBase, VizControlBase);

    SectionBase.prototype._createCompoment = function() {
        if (this._isCreated) {
            return;
        }

        this._titleString = this._config.title ? this._config.title : null;
        this._childControlDom = [];

        this._createSection();
        this._attachEventHandler();

        this._isCreated = true;

        $(this._instanceDom).prepend($(this._sectionDom));
    };

    SectionBase.prototype._createSection = function() {
        this._sectionDom = document.createElement('div');

        this._headerDom = document.createElement('div');

        $(this._sectionDom).addClass(CSSConst.MAPBUILDER_PREFIX + "section");
        $(this._headerDom).addClass(CSSConst.MAPBUILDER_PREFIX + "section-header");

        this._checkBoxDom = document.createElement('input');
        this._checkBoxDom.type = 'checkbox';
        this._checkBoxDom.checked = this._isChecked;

       $(this._checkBoxDom).addClass(CSSConst.MAPBUILDER_PREFIX + "section-block");

        if (!this._checkable) {
            this._checkBoxDom.disabled = true;
        }

        this._symbolDom = this._propertyTriangle.createTriangle();
        $(this._symbolDom).addClass(CSSConst.MAPBUILDER_PREFIX + "section-expand");
        this._headerDom.appendChild(this._symbolDom);

        this._headerDom.appendChild(this._checkBoxDom);
        
        this._labelDom = document.createElement('div');
        $(this._labelDom).addClass(CSSConst.MAPBUILDER_PREFIX + "section-title");
        this._labelDom.innerText = this._titleString ? this._titleString : '';
        this._headerDom.appendChild(this._labelDom);

        this._iconDom = $('<div/>').addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon");
        this._iconDom.appendTo($(this._headerDom));
        this.showIcon(false);
        if(this._config.vizType) {
          this._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon");
          if(this._config.vizType === Const.VIZ_TYPE_CHOROPLETH) {
            this._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-choropleth");
          }
          else if(this._config.vizType === Const.VIZ_TYPE_MARKER) {
            this._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-marker");
          }
          else if(this._config.vizType === Const.VIZ_TYPE_BUBBLE) {
            this._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-bubble");
          }
          this.showIcon(true);
        }

        if (this._configable) {
            this._configDom$ = $('<div/>').addClass(CSSConst.MAPBUILDER_PREFIX + "section-setting");
            this._configDom$.appendTo($(this._headerDom));
        }

        this._sectionDom.appendChild(this._headerDom);
        
    };

    SectionBase.prototype._attachEventHandler = function() {
        $(this._symbolDom).bind('tap click', function(e) {
            e.stopPropagation();
            e.preventDefault();
            this._dispatchEvent(new GeoEvent(this._isExpand ? GeoEvent.HIDE_SECTION : GeoEvent.EXPAND_SECTION, this, {
                sectionIdx : this.getSectionIdx()
            }));
            
        }.bind(this));

        $(this._headerDom).bind('tap click', function(e) {
            e.stopPropagation();
            e.preventDefault();
            this._dispatchEvent(new GeoEvent(this._isExpand ? GeoEvent.HIDE_SECTION : GeoEvent.EXPAND_SECTION, this, {
                sectionIdx : this.getSectionIdx()
            }));
        }.bind(this));

        if (this._configable) {
            this._configDom$.bind('tap click', function(e) {

                this._dispatchEvent(new GeoEvent(GeoEvent.DISPLAY_SETTINGMENU, this, {
                    sectionIdx : this.getSectionIdx()
                }));
                e.stopPropagation();
                e.preventDefault();

            }.bind(this));
        }

        $(this._checkBoxDom).bind('click tap', function(e) {
            e.stopPropagation();
            e.preventDefault();
        });

        $(this._checkBoxDom).bind('mousedown', function(e) {
            this._isMouseDown = true;
        }.bind(this));

        $(this._checkBoxDom).bind('mouseup', function(e) {
            if (this._isMouseDown) {
                this._isChecked = !this._isChecked;
                e.target.checked = this._isChecked;
                e.stopPropagation();
                e.preventDefault();
                this._isMouseDown = false;
                this._selected = true;

                this._dispatchEvent(new GeoEvent(this._isChecked ? GeoEvent.SHOW_LAYER : GeoEvent.HIDE_LAYER, this, {
                    sectionIdx : this.getSectionIdx()
                }));
            }
        }.bind(this));

        if (this._sortable) {
            $(this._instanceDom).sortable({
                start : function(event, ui) {
                    ui.item.data("__origIdx", ui.item.index());
                },

                update : function(event, ui) {

                    this._dispatchEvent(new GeoEvent(GeoEvent.REORDER_LAYER, this, {
                        from : ui.item.data("__origIdx"),
                        to : ui.item.index()
                    }));
                }.bind(this)
            });
        }
    };

    SectionBase.prototype._hideSectionHandler = function() {
        var _self = this;
        if (this._controlPanel != null) {
            $(this._controlPanel).hide();
        }

//        if (this._sortable) {
//            $(this._instanceDom).sortable("enable");
//        }

        $(this._sectionDom).removeClass(CSSConst.MAPBUILDER_PREFIX + "section-header-expand");

        this._propertyTriangle.turnToExpandTriangle(this._symbolDom);
        $(this._headerDom).bind("mouseover", function() {
            _self._configDom$.show();
        }).bind("mouseout", function() {
            _self._configDom$.hide();
        });

        this._isExpand = false;
    };

    SectionBase.prototype._expandSectionHandler = function() {

        this._propertyTriangle.turnToShrinkTriangle(this._symbolDom);
        $(this._sectionDom).addClass(CSSConst.MAPBUILDER_PREFIX + "section-header-expand");
        this._configDom$.show();
        $(this._headerDom).unbind("mouseover").unbind("mouseout");
//        if (this._sortable) {
//            $(this._instanceDom).sortable("disable");
//        }

        if (this._controlPanel != null) {
            $(this._controlPanel).show();
        } else {
            this._controlPanel = $('<div/>').appendTo($(this._sectionDom));
            this._createChildControlPanel(this._controlPanel);
        }

        this._isExpand = true;
    };

    SectionBase.prototype.getSectionIdx = function() {
        return $(this._sectionDom).index();
    };

    /**
     *  get section top dom elements
     *
     *  @return jquery dom element
     */
    SectionBase.prototype.getSectionDom = function() {
        return $(this._sectionDom);
    };

    /**
     * Change title of viz layer
     *
     * @param {Object} title   viz layer title
     * @param {Object} custom  custom or not. If yes, override title and alway use it. If no, change the title for temp
     * and will not save it.
     */
    SectionBase.prototype.title = function(title, custom) {
        if (!arguments.length) {
            return this._labelDom.innerText;
        } else {
            if (custom) {
                this._titleString = title;
                this._labelDom.innerText = this._titleString;
            } else {
                if (this._titleString != null) {
                    this._titleString = title;
                    this._labelDom.innerText = this._titleString;
                } else {
                    this._labelDom.innerText = title;
                }
            }

        }
    };
    
    SectionBase.prototype.showIcon = function(flag) {
      if(!arguments.length) {
        return this._showIconDom;
      }
      if(flag) {
        this._iconDom.css('visibility', '');
        this._showIconDom = true;
      }
      else {
        this._iconDom.css('visibility', 'hidden');
        this._showIconDom = false;
      }
    }

    return SectionBase;
});

// @formatter:off
define('sap/viz/controls/mapbuilder/widgets/WidgetBase',[
   "jquery",
   "sap/viz/controls/common/utils/OOUtil", 
   "sap/viz/controls/common/VizControlBase"
],
function($, OOUtil, VizControlBase) {
// @formatter:on
    var WidgetBase  = function(rootDiv, config){

        WidgetBase.superclass.constructor.apply(this, arguments);
        
        this.__className = "sap.viz.controls.geo.widgets.WidgetBase";
        
        this._config = config;
        
    };
    
    OOUtil.extend(WidgetBase, VizControlBase);
     
    return WidgetBase;
});
    

// @formatter:off
define('sap/viz/controls/mapbuilder/widgets/WidgetTitle',[
  "jquery",
  "sap/viz/controls/common/utils/OOUtil", 
  "sap/viz/controls/common/constants/CSSConst", 
  "sap/viz/controls/mapbuilder/widgets/WidgetBase"
],
function($, OOUtil, CSSConst, WidgetBase) {
    
// @formatter:on
    /**
     * 
       * @param {Object} div     container div
       * @param {Object} config  config
       *  
     */
    var WidgetTitle  = function(div, config){

        WidgetTitle.superclass.constructor.apply(this, arguments);
        
        this.__className = "sap.viz.controls.geo.widgets.WidgetTitle";
        
        this._title$ = null;
        
        this._creatControls();
    };
    
    OOUtil.extend(WidgetTitle, WidgetBase);

    WidgetTitle.prototype._creatControls = function(){
        
        var rootDiv = $(this._dom);
        
        this._title$ = $('<div/>').appendTo(rootDiv).addClass(CSSConst.MAPBUILDER_PREFIX + "section-category-title");
        var $titleText = $('<div/>').appendTo(this._title$).addClass(CSSConst.MAPBUILDER_PREFIX + "section-category-title-text");
        
        $titleText.text(this._config.title);
    };
    
    WidgetTitle.prototype.show = function(){
        this._title$.show();
    };
    
    WidgetTitle.prototype.hide = function(){
        this._title$.hide();
    };
    
    return WidgetTitle;
});
// @formatter:off
define('sap/viz/controls/mapbuilder/widgets/WidgetDataPoint',[
   "jquery",
   "sap/viz/controls/common/utils/OOUtil",
   "sap/viz/controls/common/constants/CSSConst",
   "sap/viz/controls/common/managers/LangManager",
   "sap/viz/controls/mapbuilder/events/GeoEvent",
   "sap/viz/controls/mapbuilder/constants/Const",
   "sap/viz/controls/mapbuilder/widgets/WidgetBase"
],
function($, OOUtil, CSSConst, LangManager, GeoEvent, Const, WidgetBase) {
// @formatter:on

    var INLINE_BLOCK_CLASS = CSSConst.MAPBUILDER_PREFIX + "inline-block";
    var TYPE_SELECTED_CLASS = CSSConst.MAPBUILDER_PREFIX + "viztype-selected";
    /**
     *
     * @param {Object} div     container div
     * @param {Object} config  config
     *
     */
    var WidgetDataPoint = function(div$, config) {

        WidgetDataPoint.superclass.constructor.apply(this, arguments);

        this.__className = "sap.viz.controls.geo.widgets.WidgetDataPoint";

        this._vizTypeButton$ = {};

        this._creatControls();
        this._addEventListeners();
    };

    OOUtil.extend(WidgetDataPoint, WidgetBase);

    WidgetDataPoint.prototype.update = function(config) {
        var vizType = config.vizType;

        if (vizType) {
            for (var key in this._vizTypeButton$) {
                if (this._vizTypeButton$.hasOwnProperty(key)) {
                    this._vizTypeButton$[key].removeClass(TYPE_SELECTED_CLASS);
                }
            }

            this._vizTypeButton$[vizType].addClass(TYPE_SELECTED_CLASS);

        }
    };

    WidgetDataPoint.prototype._creatControls = function() {

        var rootDiv = $(this._dom);

        //var $title = $('<div/>').appendTo(rootDiv).addClass(CSSConst.MAPBUILDER_PREFIX + "section-sub-title");
        //var $titleText = $('<div/>').appendTo($title).addClass(CSSConst.MAPBUILDER_PREFIX + "section-sub-title-text").addClass(INLINE_BLOCK_CLASS);
        //var $typeText = $('<div/>').appendTo($title).addClass(CSSConst.MAPBUILDER_PREFIX + "section-sub-title-text").addClass(INLINE_BLOCK_CLASS);

        var $dataType = $('<button/>').appendTo(rootDiv).addClass(CSSConst.MAPBUILDER_PREFIX + "viztype").addClass(INLINE_BLOCK_CLASS);
        $("<div/>").addClass(CSSConst.MAPBUILDER_PREFIX + 'viztype-choropleth').addClass(CSSConst.MAPBUILDER_PREFIX + 'viztype-icon').appendTo($dataType);
        $dataType.data("__viztype", "choropleth");
        $dataType.attr("title", LangManager.get('VIZ_MAPBUILDER_CHOROPLETH'));
        this._vizTypeButton$['choropleth'] = $dataType;
        
        $dataType = $('<button/>').appendTo(rootDiv).addClass(CSSConst.MAPBUILDER_PREFIX + "viztype").addClass(INLINE_BLOCK_CLASS);
        $("<div/>").addClass(CSSConst.MAPBUILDER_PREFIX + 'viztype-bubble').addClass(CSSConst.MAPBUILDER_PREFIX + 'viztype-icon').appendTo($dataType);
        $dataType.data("__viztype", "bubble");
        $dataType.attr("title", LangManager.get('VIZ_MAPBUILDER_BUBBLE'));
        this._vizTypeButton$['bubble'] = $dataType;

        $dataType = $('<button/>').appendTo(rootDiv).addClass(CSSConst.MAPBUILDER_PREFIX + "viztype").addClass(INLINE_BLOCK_CLASS);
        $("<div/>").addClass(CSSConst.MAPBUILDER_PREFIX + 'viztype-marker').addClass(CSSConst.MAPBUILDER_PREFIX + 'viztype-icon').appendTo($dataType);
        $dataType.data("__viztype", "marker");
        $dataType.attr("title", LangManager.get('VIZ_MAPBUILDER_MARKER'));
        this._vizTypeButton$['marker'] = $dataType;

        //$titleText.text(this._config.title);
        //$typeText.text(this._config.type);

        this._vizTypeButton$[this._config.selected].addClass(TYPE_SELECTED_CLASS);
    };

    WidgetDataPoint.prototype._addEventListeners = function() {

        var _self = this;

        for (var key in this._vizTypeButton$) {
            if (this._vizTypeButton$.hasOwnProperty(key)) {
                this._vizTypeButton$[key].bind('click tap', function(e) {

                    for (var key in _self._vizTypeButton$) {
                        if (_self._vizTypeButton$.hasOwnProperty(key)) {
                            _self._vizTypeButton$[key].removeClass(TYPE_SELECTED_CLASS);
                        }
                    }

                    $(this).addClass(TYPE_SELECTED_CLASS);
                    _self._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_LAYER_VIZTYPE, this, {
                        vizType : $(this).data("__viztype")
                    }));
                });
            }
        }
    };

    return WidgetDataPoint;
});

// @formatter:off
define('sap/viz/controls/common/helpers/Rectangle',[],
function() {
// @formatter:on

    var Rectangle = function(left, top, width, height) {
        this._left = left;
        this._top = top;
        this._width = width;
        this._height = height;
    };
    Rectangle.parseDOM = function(dom$) {
        var offset = dom$.offset();
        return new Rectangle(offset.left, offset.top, dom$.outerWidth(), dom$.outerHeight());
    };

    Rectangle.prototype.left = function(value) {
        if (arguments.length > 0) {
            this._left = value;
        } else {
            return this._left;
        }
    };
    Rectangle.prototype.top = function(value) {
        if (arguments.length > 0) {
            this._top = value;
        } else {
            return this._top;
        }
    };
    Rectangle.prototype.right = function(value) {
        if (arguments.length > 0) {
            this.left(value - this.width());
        } else {
            return this.left() + this.width();
        }
    };
    Rectangle.prototype.bottom = function(value) {
        if (arguments.length > 0) {
            this.top(value - this.height());
        } else {
            return this.top() + this.height();
        }
    };
    Rectangle.prototype.width = function() {
        return this._width;
    };
    Rectangle.prototype.height = function() {
        return this._height;
    };
    Rectangle.prototype.hCenter = function() {
        return this.left() + this.width() / 2;
    };
    Rectangle.prototype.vCenter = function() {
        return this.top() + this.height() / 2;
    };
    Rectangle.prototype.hContains = function(target) {
        return this.left() <= target.left() && this.right() >= target.right();
    };
    Rectangle.prototype.vContains = function(target) {
        return this.top() <= target.top() && this.bottom() >= target.bottom();
    };
    Rectangle.prototype.contains = function(target) {
        return this.hContains(target) && this.vContains(target);
    };
    Rectangle.toJSON = function(instance) {
        return {
            'left' : instance.left(),
            'top' : instance.top(),
            'width' : instance.width(),
            'height' : instance.height()
        };
    };

    return Rectangle;
});

define('sap/viz/controls/common/views/menu/PopUpMenuEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var PopUpMenuEvent = function(type, target, data) {
        PopUpMenuEvent.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.common.views.PopUpMenuEvent';
    };
    OOUtil.extend(PopUpMenuEvent, Event);

    PopUpMenuEvent.OPENED = 'opened';
    PopUpMenuEvent.CLOSED = 'closed';
    PopUpMenuEvent.ITEM_SELECTED = 'itemSelected';

    return PopUpMenuEvent;
});

// @formatter:off
define('sap/viz/controls/common/views/menu/DockStrategy',[],
function() {
// @formatter:on

    var DockStrategy = {};

    DockStrategy.RIGHT = 'right';
    DockStrategy.RIGHT_WITH_ARROW = 'rightWithArrow';
    DockStrategy.LEFT = 'left';
    DockStrategy.LEFT_WITH_ARROW = 'leftWithArrow';
    DockStrategy.DOWN = 'down';
    DockStrategy.DOWN_WITH_ARROW = 'downWithArrow';
    DockStrategy.UP = 'up';
    DockStrategy.UP_WITH_ARROW = 'upWithArrow';

    DockStrategy._oppsosite = (function() {
        var oppsosite = {};
        oppsosite[DockStrategy.RIGHT] = DockStrategy.LEFT;
        oppsosite[DockStrategy.RIGHT_WITH_ARROW] = DockStrategy.LEFT_WITH_ARROW;
        oppsosite[DockStrategy.DOWN] = DockStrategy.UP;
        oppsosite[DockStrategy.DOWN_WITH_ARROW] = DockStrategy.UP_WITH_ARROW;
        return oppsosite;
    })();

    DockStrategy.oppsosite = function(strategy) {
        for (var positive in DockStrategy._oppsosite) {
            if (DockStrategy._oppsosite.hasOwnProperty(positive)) {
                var negative = DockStrategy._oppsosite[positive];
                if (positive === strategy) {
                    return negative;
                } else if (negative === strategy) {
                    return positive;
                }
            }
        }
    };
    DockStrategy.arrow = function(strategy) {
        // @formatter:off
        return strategy === DockStrategy.RIGHT_WITH_ARROW || strategy === DockStrategy.LEFT_WITH_ARROW
            || strategy === DockStrategy.DOWN_WITH_ARROW || strategy === DockStrategy.UP_WITH_ARROW;
        // @formatter:on
    };
    DockStrategy.up = function(strategy) {
        return strategy === DockStrategy.UP || strategy === DockStrategy.UP_WITH_ARROW;
    };
    DockStrategy.down = function(strategy) {
        return strategy === DockStrategy.DOWN || strategy === DockStrategy.DOWN_WITH_ARROW;
    };
    DockStrategy.left = function(strategy) {
        return strategy === DockStrategy.LEFT || strategy === DockStrategy.LEFT_WITH_ARROW;
    };
    DockStrategy.right = function(strategy) {
        return strategy === DockStrategy.RIGHT || strategy === DockStrategy.RIGHT_WITH_ARROW;
    };
    DockStrategy.horizontal = function(strategy) {
        return DockStrategy.left(strategy) || DockStrategy.right(strategy);
    };
    DockStrategy.vertical = function(strategy) {
        return DockStrategy.up(strategy) || DockStrategy.down(strategy);
    };
    return DockStrategy;
});

// @formatter:off
define('sap/viz/controls/common/views/menu/PopUpMenu',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/helpers/Rectangle',
    'sap/viz/controls/common/views/menu/PopUpMenuEvent',
    'sap/viz/controls/common/views/menu/DockStrategy'],
function($, CSSConst, OOUtil, utils, UIControl, Rectangle, PopUpMenuEvent, DockStrategy) {
// @formatter:on
    var cssPrefix = CSSConst.COMMON_PREFIX;

    /**
     *
     * @param {Object} dom
     * @param {Object} menuGroups
     */
    var PopUpMenu = function(dom, menuGroups) {
        PopUpMenu.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.menu.PopUpMenu";

        this._menuGroups = menuGroups;
        this._dock$ = null;
        this._preferredDockStrategy = null;
        this._dockStrategy = null;
        this._hOffset = null;
        this._vOffset = null;
        // {PopUpMenu}
        this._subMenu = null;
        // {Function}
        this._documentHandler = null;

        this._createChildren();
        this._dom$.appendTo($('body'));
    };
    OOUtil.extend(PopUpMenu, UIControl);

    PopUpMenu.prototype.open = function(dock$, preferredDockStrategy, hOffset, vOffset) {
        this._dock$ = dock$;
        this._preferredDockStrategy = preferredDockStrategy;
        this._hOffset = hOffset ? hOffset : 0;
        this._vOffset = vOffset ? vOffset : 0;

        this._locate(this._preferredDockStrategy);

        this._dispatchEvent(new PopUpMenuEvent(PopUpMenuEvent.OPENED, this));

        this._documentHandler = $.proxy(function(event) {
            var parentMenuNode = this._dock$[0];
            // Close self when mouse down outside
            if (!$.contains(this._dom, event.target) &&
            // Close self when this is a subMenu and not click its parentMenu item or its parentMenu is not a menu list
            ((!this._subMenu && (!$.contains(parentMenuNode, event.target) || parentMenuNode.nodeName !== 'LI')) ||
            // Close self when this is a parentMenu and not click one item of its subMenu
            (this._subMenu && !$.contains(this._subMenu._dom, event.target))
            )) {
                this.close();
            }
        }, this);
        document.addEventListener("mousedown", this._documentHandler, true);
        $(window).on('blur', this._documentHandler);
    };
    PopUpMenu.prototype.close = function() {
        var dom$ = this._dom$;

        document.removeEventListener("mousedown", this._documentHandler, true);
        $(window).off('blur', this._documentHandler);
        this._dispatchEvent(new PopUpMenuEvent(PopUpMenuEvent.CLOSED, this));
        this.removeAllEventListeners();
        // Close transition
        utils.delay(function() {
            dom$.removeClass(cssPrefix + 'menu-transition');
            dom$.detach();
        }, 240);
        this._dom$.css('opacity', 0).addClass(cssPrefix + 'menu-transition');
        this.destroy();
    };
    PopUpMenu.prototype._createChildren = function() {
        var i, j;
        var dom$ = this._dom$;
        // Set style
        dom$.addClass(cssPrefix + 'menu');
        // Create menu options
        var list$ = $('<div/>').addClass([cssPrefix + 'menu-list', CSSConst.COMMON_PREFIX + 'scrollable', CSSConst.COMMON_PREFIX + 'scrollable-y'].join(' ')).appendTo(dom$);
        var ul$ = $('<ul/>').appendTo(list$);
        for ( i = 0; i < this._menuGroups.length; i++) {
            // Menu group
            var mg = this._menuGroups[i];
            for ( j = 0; j < mg.menuItems().length; j++) {
                // Menu item
                var mi = mg.menuItems()[j];
                var li$ = $('<li/>').appendTo(ul$);
                li$.addClass(cssPrefix + 'menu-list-prefix-icon-x1');
                li$.data('item', mi);
                // Icon selected
                if (mg.selectedItem() === mi) {
                    li$.addClass(cssPrefix + 'menu-list-selected');
                }
                li$.on('mouseenter', function(event) {
                    $('li', ul$).each(function() {
                        var li$ = $(this);
                        if (this === event.currentTarget) {
                            li$.addClass(cssPrefix + 'menu-list-hovered');
                        } else {
                            li$.removeClass(cssPrefix + 'menu-list-hovered');
                        }
                    });
                }).on('mouseleave', function(event) {
                });
                // Click handler
                li$.on('click', $.proxy(function(event) {
                    var li$ = $(event.currentTarget);
                    var mi = li$.data('item');
                    if (mi.subMenuGroups()) {
                        return;
                    } else {
                        this._dispatchEvent(new PopUpMenuEvent(PopUpMenuEvent.ITEM_SELECTED, this, {
                            'selectedItem' : mi
                        }));
                        this.close();
                    }
                }, this));
                // Caption
                var caption$ = $('<div/>').addClass([cssPrefix + 'menu-list-caption', cssPrefix + 'text-ellipsis'].join(' ')).appendTo(li$);
                caption$.text(mi.name());
                // Sub menu
                var hoverSubMenu = false;
                li$.on('mouseenter', $.proxy(function(event) {
                    this._closeSubMenu();
                }, this)).on('mouseleave', $.proxy(function(event) {
                    var li$ = $(event.currentTarget);
                    var mi = li$.data('item');
                    // Defer to wait sub menu trigger mouseenter
                    utils.defer($.proxy(function() {
                        if (!hoverSubMenu) {
                            this._closeSubMenu();
                        }
                    }, this));
                }, this));
                if (mi.subMenuGroups()) {
                    // Icon submenu
                    li$.addClass(cssPrefix + 'menu-list-suffix-icon-x1');
                    $('<div/>').addClass([cssPrefix + 'menu-list-suffix-icon-submenu', cssPrefix + 'havanaSharedSprite16'].join(' ')).appendTo(li$);
                    // Create sub menu
                    li$.on('mouseenter', $.proxy(function(event) {
                        var li$ = $(event.currentTarget);
                        var mi = li$.data('item');
                        hoverSubMenu = mi.subMenuGroups().length > 0;
                        if (mi.subMenuGroups().length > 0) {
                            this._subMenu = new PopUpMenu(document.createElement('div'), mi.subMenuGroups());
                            this._subMenu.addEventListener(PopUpMenuEvent.ITEM_SELECTED, function(event) {
                                this._dispatchEvent(event);
                                this.close();
                            }, this);
                            this._subMenu.open(li$, DockStrategy.RIGHT, -6, 6);
                            $(this._subMenu._dom).on('mouseenter', $.proxy(function(event) {
                                hoverSubMenu = true;
                            }, this));
                        }
                    }, this));
                }
            }
            // Create group split line
            if (i !== this._menuGroups.length - 1) {
                var splitter$ = $('<div/>').addClass(cssPrefix + 'menu-list-group-splitter').appendTo(ul$);
            }
        }
    };
    PopUpMenu.prototype._closeSubMenu = function() {
        if (this._subMenu) {
            $(this._subMenu._dom).off('mouseenter');
            this._subMenu.close();
            this._subMenu = null;
        }
    };
    PopUpMenu.prototype._locate = function(dockStrategy) {
        var allowFail = (dockStrategy === this._preferredDockStrategy);
        var fail = false;
        var transitionCSS = {
            'from' : {
                'visibility' : 'hidden',
                'opacity' : 0
            },
            'to' : {
                'visibility' : '',
                'opacity' : 1
            }
        };
        var gapToDock = 6;
        var animationLength = 6;
        var dockRec = Rectangle.parseDOM(this._dock$);
        var menuRec = Rectangle.parseDOM(this._dom$);
        var bodyRec = Rectangle.parseDOM($('body'));

        // TODO Locate arrow
        var withArrow = DockStrategy.arrow(dockStrategy);
        if (DockStrategy.horizontal(dockStrategy)) {
            // Calculate loaction
            if (DockStrategy.left(dockStrategy)) {
                animationLength *= -1;
                gapToDock *= -1;
                menuRec.right(dockRec.left() + gapToDock - this._hOffset);
            } else if (DockStrategy.right(dockStrategy)) {
                menuRec.left(dockRec.right() + gapToDock + this._hOffset);
            }
            menuRec.top(dockRec.top() + this._vOffset);
            // Check fail
            fail = !bodyRec.hContains(menuRec);
            // Build up css
            transitionCSS.from.left = menuRec.left() - animationLength + 'px';
            transitionCSS.to.left = menuRec.left() + 'px';
            transitionCSS.from.top = transitionCSS.to.top = menuRec.top() + 'px';
        } else if (DockStrategy.vertical(dockStrategy)) {
            // Calculate loaction
            if (withArrow) {
                menuRec.left(dockRec.hCenter() - menuRec.width() * 3 / 4 + this._hOffset);
            } else {
                menuRec.left(dockRec.left() + this._hOffset);
            }
            if (DockStrategy.up(dockStrategy)) {
                animationLength *= -1;
                gapToDock *= -1;
                menuRec.bottom(dockRec.top() + gapToDock + this._vOffset);
            } else if (DockStrategy.down(dockStrategy)) {
                menuRec.top(dockRec.bottom() + gapToDock + this._vOffset);
            }
            // Check fail
            fail = !bodyRec.vContains(menuRec);
            // Build up css
            transitionCSS.from.left = transitionCSS.to.left = menuRec.left() + 'px';
            transitionCSS.from.top = menuRec.top() - animationLength + 'px';
            transitionCSS.to.top = menuRec.top() + 'px';
        }

        // Relocate to oppsosite
        if (allowFail && fail) {
            this._locate(DockStrategy.oppsosite(dockStrategy));
        } else {
            this._dockStrategy = dockStrategy;
            if (transitionCSS) {
                // Open transition
                this._dom$.css(transitionCSS.from);
                utils.defer($.proxy(function() {
                    this._dom$.css(transitionCSS.to).addClass(cssPrefix + 'menu-transition');
                }, this));
                utils.delay($.proxy(function() {
                    this._dom$.removeClass(cssPrefix + 'menu-transition');
                }, this), 240);
            }
        }
    };
    return PopUpMenu;
});

define('sap/viz/controls/common/feeds/SubtotalItemType',['sap/viz/controls/common/managers/LangManager'], function(LangManager) {

    var SubtotalItemType = function() {
        this.__className = "sap.viz.controls.common.feeds.SubtotalItemType";
    };

    SubtotalItemType.action = 'addSubTotal';
    
    SubtotalItemType.TOTAL = 'default';
    SubtotalItemType.SUM = 'sum';
    SubtotalItemType.MIN = 'min';
    SubtotalItemType.MAX = 'max';
    SubtotalItemType.COUNT = 'count';
    SubtotalItemType.AVG = 'average'; 


    SubtotalItemType.getAggregationType = function(token) {
        if(token.indexOf(SubtotalItemType.TOTAL) !== -1) {
            return SubtotalItemType.TOTAL;
        } else if(token.indexOf(SubtotalItemType.SUM) !== -1) {
            return SubtotalItemType.SUM;
        }else if(token.indexOf(SubtotalItemType.MIN) !== -1) {
            return SubtotalItemType.MIN;
        }else if(token.indexOf(SubtotalItemType.MAX) !== -1) {
            return SubtotalItemType.MAX;
        } else if(token.indexOf(SubtotalItemType.COUNT) !== -1) {
            return SubtotalItemType.COUNT;
        }  else if(token.indexOf(SubtotalItemType.AVG) !== -1) {
            return SubtotalItemType.AVG;
        }
        return null;
    };
    
    SubtotalItemType.getSubTotalsAggregationDisplayType = function( aggregationType ) {

         switch( aggregationType ) {
            case SubtotalItemType.SUM:
                return LangManager.get('VIZ_COMMON_SUM_OF');
            case SubtotalItemType.MIN:
                return LangManager.get('VIZ_COMMON_MIN_OF');
            case SubtotalItemType.MAX:
                return LangManager.get('VIZ_COMMON_MAX_OF');
            case SubtotalItemType.COUNT:
                return LangManager.get('VIZ_COMMON_COUNT_OF');
            case SubtotalItemType.AVG:
                return LangManager.get('VIZ_COMMON_AVERAGE_OF');
            case SubtotalItemType.TOTAL:
                return LangManager.get('VIZ_COMMON_TOTAL_OF');
            default:
                return " ";
            }
    };
    

    /* Function removes any presence of the subtotals types from 
     * the AnalysisObjects display name, this would occur if a subtotals was 
     * created from selecting a demension from the quick list
     * @param {list} analysis objects
     * @return {list} analysis objects
    */
    SubtotalItemType.sanitizeAnalysisObjects = function(allAnalyses) {

        for( var i = 0; i < allAnalyses.length; i++) {

            var tmpAnalysisName = allAnalyses[i].name();

            if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.TOTAL) ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.TOTAL), allAnalyses[i]);
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.SUM)  ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.SUM), allAnalyses[i] );
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.MIN)  ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.MIN), allAnalyses[i] );
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.MAX)  ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.MAX) , allAnalyses[i] );
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.COUNT)   ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.COUNT), allAnalyses[i] );
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.AVG)   ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.AVG), allAnalyses[i] );
            }
        }

        return allAnalyses;

    };
    
    /* Function removes the occurance of the subtotal token from the analysis object's name
     * @param {SubtotalItemType} token to remove
     * @param {analysisObject} analysis Object we are cleansing
    */ 
    SubtotalItemType.removeSubtotalItemTokenFromName = function(token, analysisObj) {

        var tokenLen = token.length;
        // accomidate for the space between the token and the name len+1
        var cleansedName = analysisObj.name().substr( tokenLen+1 );
        analysisObj.name(cleansedName);


    };

    
    
    return SubtotalItemType;
});

define('sap/viz/controls/common/menu/MenuExtensionBuilder',[], function() {

    var _menuTreeCache = null;

    var MenuExtensionBuilder = function() {
        this.__className = "sap.viz.controls.common.menu.MenuExtensionBuilder";
    };

    var _isFullUrl = function(url) {
        if (url && (url.indexOf("http://") === 0 || url.indexOf("https://") === 0 || url.indexOf("/") === 0)) {
            return true;
        }
        return false;
    };

    var _parseLocation = function(url) {
        var urlParts = url.split("?");
        var location = urlParts[0];
        var parameters = {};
        if (urlParts.length > 1) {
            var elements = urlParts[1].split("&");
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                var pairs = element.split("=");
                if (pairs.length === 2) {
                    parameters[pairs[0]] = pairs[1];
                }
            }
        }
        return {
            location : location,
            parameters : parameters
        };
    };

    var _findMenuBundlePath = function(menuId, isGroup) {
        if (menuId && sap && sap.bi && sap.bi.framework && sap.bi.framework.getServiceMetadata !== undefined) {
            var allMetadata = [];
            if (isGroup) {
                allMetadata = sap.bi.framework.getServiceMetadata("*sap.bi.framework.ui.menugroup");
            } else {
                allMetadata = sap.bi.framework.getServiceMetadata("*sap.bi.framework.ui.menuitem");
            }
            for (var i = 0; i < allMetadata.length; i++) {
                var metadata = allMetadata[i];
                if (metadata.framework && metadata.id === menuId) {
                    return metadata.framework.bundleUrl;
                }
            }
        }
        return null;
    };

    var _pushToPosition = function(existingMenus, newMenu) {
        // first insert the new menu to its right place
        existingMenus.push(newMenu);
        // second to re-order existing menus by their before/after place
        var allMenus = existingMenus.slice(0);
        for (var i = 0; i < allMenus.length; i++) {
            var currentMenu = allMenus[i];
            if (currentMenu._locationBefore || currentMenu._locationAfter) {
                for (var j = 0; j < existingMenus.length; j++) {
                    var existingMenu = existingMenus[j];
                    if (existingMenu.id === currentMenu._locationBefore) {
                        var currentMenuIndex = existingMenus.indexOf(currentMenu);
                        existingMenus.splice(currentMenuIndex, 1);
                        existingMenus.splice(j, 0, currentMenu);
                        break;
                    } else if (existingMenu.id === currentMenu._locationAfter) {
                        var currentMenuIndex = existingMenus.indexOf(currentMenu);
                        existingMenus.splice(currentMenuIndex, 1);
                        existingMenus.splice(j + 1, 0, currentMenu);
                        break;
                    }
                }
            }
        }
    };

    var _buildMenuTree = function() {
        /*
        var MenuGroup = {
            id : "sap.bi.ui.main.menubar.file",
            location : "sap.bi.ui.main.menubar", // point to another extension of sap.bi.framework.ui.menugroup
            label : "sap.bi.ui.main.strings.file",
            // following is optional properties
            tooltip : "sap.bi.ui.main.strings.file",
            visible : true,
            enabled : true,
            checked : false,
            icon : {
                url : "./icons/file.png"
            },
            parentMenuGroup: <MenuGroup>,
            subMenuItems: [<MenuItem>]
        };
        
        var MenuItem = {
            id : "sap.viz.controls.feedingpanel.menu.runavg",
            location : "sap.viz.controls.feedingpanel.menu",
            label : "sap.bi.ui.vizroom.strings.menu.runavg",
            event : "sap.viz.controls.feedingpanel.menu.runavg.pressed",
            // optional for static value case
            stateId : "sap.bi.ui.vizroom.menustate",
            // following is optional properties
            tooltip : "sap.bi.ui.vizroom.strings.menu.runavg",
            visible : true,  // optional, default value when state extension doesnât return this
            enabled : true,  // optional, default value when state extension doesnât return this
            checked : false, // optional, default value when state extension doesnât return this
            icon : {
                url : "./icons/runavg.png"
            },
            
            parentMenuGroup: <MenuGroup>
        }
        
        location: <MenuGroup-id>[?<before|after>=<sub-MenuGroup-id|MenuItem-id>]
        */
        // TODO should we cache _menuTree?
        var _menuTree = [];
        if (sap && sap.bi && sap.bi.framework && sap.bi.framework.getService !== undefined) {
            var menuGroups = sap.bi.framework.getService("*", "*sap.bi.framework.ui.menugroup");
            var menuItems  = sap.bi.framework.getService("*", "*sap.bi.framework.ui.menuitem");
            //clone
            menuGroups = JSON.parse(JSON.stringify(menuGroups));
            menuItems = JSON.parse(JSON.stringify(menuItems));
            // re organize menu group parent-children relationships
            for (var i = 0; i < menuGroups.length; i++) {
                var menuGroup = menuGroups[i];
                if (menuGroup && menuGroup.location) {
                    // parse location to find parent
                    var location = _parseLocation(menuGroup.location);
                    var parentMenuId = location.location;
                    menuGroup._locationBefore = location.parameters["before"];
                    menuGroup._locationAfter = location.parameters["after"];
                    if (!menuGroup.subMenuItems) {
                        menuGroup.subMenuItems = [];
                    }
                    // convert icon url to full path with bundle url
                    if (menuGroup.icon && menuGroup.icon.url && _isFullUrl(menuGroup.icon.url) === false) {
                        var menuBundlePath = _findMenuBundlePath(menuGroup.id);
                        if (menuBundlePath) {
                            menuGroup.icon.url = menuBundlePath + "/" + menuGroup.icon.url;
                        }
                    }
                    // lookup parent group
                    for (var j = 0; j < menuGroups.length; j++) {
                        var parentMenuGroup = menuGroups[j];
                        if (parentMenuGroup !== menuGroup && parentMenuGroup.id === parentMenuId) {
                            menuGroup.parentMenuGroup = parentMenuGroup;
                            if (!parentMenuGroup.subMenuItems) {
                                parentMenuGroup.subMenuItems = [];
                            }
                            _pushToPosition(subMenuItems, menuGroup);
                            break;
                        }
                    }
                    // check whether it's a root menu group
                    if (!menuGroup.parentMenuGroup) {
                        _menuTree.push(menuGroup);
                    }
                }
            }
            // put menu items to corresponding menu group
            for (var i = 0; i < menuItems.length; i++) {
                var menuItem = menuItems[i];
                if (menuItem && menuItem.location) {
                    // parse location to find parent
                    var location = _parseLocation(menuItem.location);
                    var parentMenuId = location.location;
                    menuItem._locationBefore = location.parameters["before"];
                    menuItem._locationAfter = location.parameters["after"];
                    // convert icon url to full path with bundle url
                    if (menuItem.icon && menuItem.icon.url && _isFullUrl(menuItem.icon.url) === false) {
                        var menuBundlePath = _findMenuBundlePath(menuItem.id);
                        if (menuBundlePath) {
                            menuItem.icon.url = menuBundlePath + "/" + menuItem.icon.url;
                        }
                    }
                    // lookup parent group
                    for (var j = 0; j < menuGroups.length; j++) {
                        var parentMenuGroup = menuGroups[j];
                        if (parentMenuGroup.id === parentMenuId) {
                            menuItem.parentMenuGroup = parentMenuGroup;
                            if (!parentMenuGroup.subMenuItems) {
                                parentMenuGroup.subMenuItems = [];
                            }
                            _pushToPosition(subMenuItems, menuItem);
                            break;
                        }
                    }
                }
            }
        }
        return _menuTree;
    };

    var _lookupMenuByLocation = function(menuGroups, location) {
        for (var i = 0; i < menuGroups.length; i++) {
            var menuGroup = menuGroups[i];
            if (menuGroup.id === location) {
                return menuGroup;
            } else if (menuGroup.subMenuItems && menuGroup.subMenuItems.length > 0) {
                menuGroup = _lookupMenuByLocation(menuGroup.subMenuItems, location);
                if (menuGroup) {
                    return menuGroup;
                }
            }
        }
        return null;
    };

    MenuExtensionBuilder.getMenu = function(location) {
        if (!_menuTreeCache) {
            _menuTreeCache = _buildMenuTree();
        }
        return _lookupMenuByLocation(_menuTreeCache, location).subMenuItems;
    };
    
    MenuExtensionBuilder.clearCache = function() {
        _menuTreeCache = null;
    };

    return MenuExtensionBuilder;
});

define('sap/viz/controls/common/views/feed/FeedingShelf',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/managers/DragManager',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/views/feed/FeedingShelfEvent',
    'sap/viz/controls/common/views/menu/PopUpMenu',
    'sap/viz/controls/common/views/menu/PopUpMenuEvent',
    'sap/viz/controls/common/views/menu/DockStrategy',
    'sap/viz/controls/common/views/menu/MenuGroup',
    'sap/viz/controls/common/views/menu/MenuItem',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/HierarchyLevelObject',
    'sap/viz/controls/common/feeds/SubtotalItemType',
    'sap/viz/controls/common/menu/MenuExtensionBuilder'],
function($, OOUtil, Utils, CSSConst, UIControl, DragManager,
    DropAction, FeedingShelfEvent, PopUpMenu, PopUpMenuEvent, DockStrategy, MenuGroup, MenuItem,
    LangManager, AnalyticalType, AnalysisObject, FeedUtils, FeedItemType, HierarchyLevelObject, SubtotalItemType, MenuExtensionBuilder) {
// @formatter:on
    /**
     * @param dom Target dom element
     * @param shelf shelf vo
     */
    var FeedingShelf = function(dom, shelf) {
        FeedingShelf.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.FeedingShelf";

        this._dom$.addClass(CSSConst.FEEDINGSHELF_PREFIX + "view");

        this._list$ = null;
        this._ghostCard$ = null;
        this._draggingCard$ = null;
        this._addIndicator$ = null;
        this._addIcon$ = null;
        this._activeHandler = $.proxy(this._active, this);
        this._dropIndicator$ = $(document.createElement('hr')).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'drop-indicator');
        // Model
        this._shelf = shelf;
        this._lastCardRemoved = null;
        this._lastAnalysisObjectRemoved = null;
        this._lastTwinAnalysisObjectRemoved = null;
	    this._lastHierarchyOjbectUpdated = null;
        // Initialize dom
        this._createChildren();
        this._droppable();
        this._enableFeeding = true;
    };
    OOUtil.extend(FeedingShelf, UIControl);

    FeedingShelf.CARD_HEIGHT = 24;
    /**
     * Get the current shelf vo
     */
    FeedingShelf.prototype.shelf = function() {
        return this._shelf;
    };
    /**
     * Return the dock position for data picker
     */
    FeedingShelf.prototype.popUpDock = function() {
        var _this = this;
        return function() {
            var offset = _this._list$.offset();
            return {
                'x' : offset.left,
                'y' : offset.top + FeedingShelf.CARD_HEIGHT / 2,
                'shelfWidth' : _this._list$.outerWidth()
            };
        }
    };
    /**
     * Get/Set analyses
     *
     * @param {String} value
     *            optional
     * @returns {String}
     */
    FeedingShelf.prototype.analyses = function(value) {
        if (arguments.length > 0) {
            var i;
            // Remove duplicate
            var idMap = {};
            for ( i = 0; i < value.length; ) {
                if (!idMap[value[i].id()]) {
                    idMap[value[i].id()] = true;
                    i++;
                } else {
                    value.splice(i, 1);
                }
            }
            // Remove old
            this._traversalCards(function() {
                $(this).remove();
            }, true, true);
            // Add new
            for ( i = 0; i < value.length; i++) {
                this._addCardAt(value[i], -1);
            }
            this._analysesChanged();
            return this;
        } else {
            var analyses = [];
            this._traversalCards(function(index) {
                var card$ = $(this);
                var analysis = card$.data('__analysis');
                if (analysis) {
                    analyses.push(analysis);
                }
            }, true, true);
            return analyses;
        }
    };
    FeedingShelf.prototype._numCards = function() {
        var numCards = 0;
        this._traversalCards(function(index) {
            numCards++;
        }, true, true);
        return numCards;
    };
    /**
     * Add an analysis to list
     */
    FeedingShelf.prototype.addAnalysis = function(analysis) {
        return this._addAnalysisAt(analysis, -1);
    };
    FeedingShelf.prototype._addAnalysisAt = function(analysis, index) {

        // ensure we reset the last card removed var
        this._lastCardRemoved = null;
        this._lastAnalysisObjectRemoved = null;

        var card$ = this._addCardAt(analysis, index);
        this._analysesChanged();

        return card$;
    };


    FeedingShelf.prototype.lastAnalysisObjectRemoved = function(arg) {
        if(arguments.length > 0) {
            this._lastAnalysisObjectRemoved = arg;
        } else {
            return this._lastAnalysisObjectRemoved;
        }
    } 

    FeedingShelf.prototype.lastCardRemoved = function(arg) {
         if(arguments.length > 0) {
            this._lastCardRemoved = arg;
        } else {
            return this._lastCardRemoved;
        }
    }

    FeedingShelf.prototype.lastTwinAnalysisObjectRemoved = function(arg) {
        if(arguments.length > 0) {
            this._lastTwinAnalysisObjectRemoved = arg;
        } else {
            return this._lastTwinAnalysisObjectRemoved;
        }
    }

    FeedingShelf.prototype.lastHierarchyOjbectUpdated = function(arg) {
        if(arguments.length > 0) {
            this._lastHierarchyOjbectUpdated = arg;
        } else {
            return this._lastHierarchyOjbectUpdated;
        }
    }

    FeedingShelf.prototype.destroy = function() {
        this.removeAllEventListeners();
        $('body').off('mouseup', this._activeHandler);

        FeedingShelf.superclass.destroy.apply(this, arguments);
    };
    /**
     * create feedingShelf view .
     */
    FeedingShelf.prototype._createChildren = function() {
        var item$ = $(document.createElement('div')).appendTo(this._dom$).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item');
        var itemTitle$ = $(document.createElement('div')).appendTo(item$).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-title');
        itemTitle$.text(this._shelf.name);

        var content$ = $(document.createElement('div')).appendTo(item$).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-content');
        var list$ = this._list$ = $(document.createElement('div')).appendTo(content$).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-list');
        var addIndicator$ = this._addIndicator$ = $(document.createElement('div')).appendTo(list$);
        addIndicator$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-ph');
        var addText$ = $(document.createElement('a')).appendTo(addIndicator$);
        addText$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-ph-text');
        var addIcon$ = this._addIcon$ = $(document.createElement('div')).appendTo(content$).addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16');
        addIcon$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-add-icon');

        var addFeeding = $.proxy(this._dispatchAddFeedingEvent, this);
        addIndicator$.on('mousedown', this._activeHandler).on('mouseenter', this._activeHandler).on('mouseleave', this._activeHandler).on('click', addFeeding);
        addIcon$.on('mousedown', this._activeHandler).on('mouseenter', this._activeHandler).on('mouseleave', this._activeHandler).on('click', addFeeding);
        $('body').on('mouseup', this._activeHandler);
    };

    FeedingShelf.prototype._dispatchAddFeedingEvent = function(){
        if (this.enableFeeding()) {
            this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.CLICK_ADD_FEEDING, this));
        }
    };
    FeedingShelf.prototype._active = function(event){
        if(this._enableFeeding){
            if (event.type === 'mouseup' || event.type === 'mouseleave') {
                this._list$.removeClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-list_active');
                this._addIcon$.removeClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-add-icon_active');
            } else if (event.type === 'mousedown' || event.type === 'mouseenter') {
                this._list$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-list_active');
                this._addIcon$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-add-icon_active');
            }
        }
    };
    /**
     * judge parameter is or not a valid
     * @param  analysisObject
     */
    FeedingShelf.prototype._isValidToken = function(analysisObject) {
        // Valid when drag shelf equals to drop shelf
        if (this._draggingCard$) {
            return true;
        }
        // Check valid by analyticalType
        
        if (analysisObject.aggregationTarget() !== undefined) {
            return false;
        }
        var type = analysisObject.type()
        var dataType = analysisObject.dataType();
        var tokenAnalyticalType = type ? type.toLowerCase() : type;
        var tokenDataType = dataType ? dataType.toLowerCase() : dataType;
        var shelfFeedItemType = this._shelf.feedItemType;

        var valid = FeedUtils.feedCompatible(shelfFeedItemType, tokenAnalyticalType, tokenDataType);
        // Check valid by current analyses and if the dimensions subtotal is already present it makes it invalid.
        if (valid) {
            var analyses = this.analyses();
            for (var i = 0; i < analyses.length; i++) {
                if (analyses[i].id() === analysisObject.id() || analyses[i].aggregationTarget() === analysisObject.id()) {
                    valid = false;
                    break;
                }
            }
        }
        return valid;
    };

    /**
     * make this._list$ droppable
     */
    FeedingShelf.prototype._droppable = function() {
        var _this = this;
        var dropReplacement;
        var dropIndex;
        var mousePosition;
        var dropValidToken = function (ao, token) {
            token.killRevertAnimation();

            if (dropReplacement) {
                token.currentAction(DropAction.ACCEPT_AS_REPLACEMENT);
                $(dropReplacement).detach();
            } else {
                token.currentAction(DropAction.ACCEPT);
            }
            _this._addAnalysisAt(ao, dropIndex);
        };
        var handleValidToken = function (ao, helper$, token) {
            // if shelf already has cards, it means the shelf can accept AnalysisObject no matter
            // _enableFeeding is true or false. only when the shelf don't have card and
            // _enableFeeding = false, then we need to show warning.
            if (_this._numCards() === 0) {
                helper$.off('sap.viz.controls.analysisDrag.events.drag');
                if (!_this._enableFeeding) {
                    token.currentAction(DropAction.DENY);
                    var warnMsg = LangManager.get('VIZ_COMMON_DIMENSION_LIMITATION_WARN');
                    token.showWarn(warnMsg);
                    return;
                } else {
                    // Add ghost card
                    _this._ghostCard$ = _this._addGhostAnalysisAt(ao, 0);

                    token.currentAction(DropAction.ACCEPT);
                }
            } else {
                // Add drop indicator
                helper$.on('sap.viz.controls.analysisDrag.events.drag', function(event, pageX, pageY) {
                    var cardOffsets = [];
                    var draggingCardIndex = -1;
                    _this._traversalCards(function(index) {
                        if (_this._draggingCard$ && _this._draggingCard$[0] === this) {
                draggingCardIndex = index;
                        }
                        cardOffsets.push({
                'card' : this,
                'offset' : $(this).offset()
                        });
                    }, false, true);

                    dropIndex = -1;
                    dropReplacement = null;
                    for (var i = 0; i < cardOffsets.length; i++) {
                        var cardY = cardOffsets[i].offset.top;
                        // Find the drop index when mouse y small than card y + card height
                        if (pageY < cardY + FeedingShelf.CARD_HEIGHT - 6) {
                dropIndex = i;
                // Replace the card when mouse y over the card
                if (pageY >= cardY + 2) {
                    // Disable replace, and we may remove replace feature totally in future
                    // dropReplacement = cardOffsets[dropIndex].card;
                }
                break;
                        }
                    }
                    if (dropIndex === -1) {
                        dropIndex = cardOffsets.length;
                    }
                    if (ao.type === AnalyticalType.MND) {
                        dropIndex = (dropIndex < cardOffsets.length / 2) ? 0 : cardOffsets.length;
                    }
                    // Force replace card when analyses is full
                    if (!_this._draggingCard$ && _this._numCards() === _this._shelf.capacity) {
                        dropReplacement = cardOffsets[dropIndex === cardOffsets.length ? dropIndex - 1 : dropIndex].card;
                    }

                    var dropOnDraggingShelf = draggingCardIndex !== -1;
                    var dropOnDraggingCard = dropOnDraggingShelf && (draggingCardIndex === dropIndex || (draggingCardIndex + 1 === dropIndex && !dropReplacement));
                    // Force insert card when drop on dragging shelf
                    if (dropOnDraggingShelf) {
                        dropReplacement = null;
                    }
                    // Reset the drop indicator
                    _this._dropIndicator$.detach();
                    if (dropReplacement) {
                        token.currentAction(DropAction.ACCEPT_AS_REPLACEMENT);
                    } else {
                        if (!_this._enableFeeding) {
                token.currentAction(DropAction.DENY);
                var warnMsg = LangManager.get('VIZ_COMMON_DIMENSION_LIMITATION_WARN');
                token.showWarn(warnMsg);
                        } else {
                token.currentAction(DropAction.ACCEPT);
                if (!dropOnDraggingCard) {
                    _this._addElementAt(_this._list$, _this._dropIndicator$, dropIndex);
                }
                        }
                    }
                });
            }
        };
        this._list$.droppable({
            tolerance : 'pointer',
            accept : '.' + DragManager.DRAGGABLE_CLASS_ANALYSIS,
            activate : function(event, ui) {
            },
            deactivate : $.proxy(function(event, ui) {
                if (this._ghostCard$) {
                    this._ghostCard$.remove();
                }
                if (this._dropIndicator$) {
                    this._dropIndicator$.detach();
                }
            }, this),
            drop : $.proxy(function(event, ui) {
                var helper$ = ui.helper;
                var token = DragManager.instance().getAnalysisToken(helper$);
                var analysisObject = token.analysisObject;
                // when user drop an AnalysisObject, only if the current action is DENY, remove the ghost card.
                // for the other cases, we should do adding or replacing.
                if (token.currentAction() !== DropAction.DENY && this._isValidToken(analysisObject)) {
                    dropValidToken(analysisObject, token);
                } else if (token.currentAction() !== DropAction.DENY && Utils.isArray(token.backupAOs)) {
                    var found = false;
                    for (var i = 0; i < token.backupAOs.length; i++) {
                        if (this._isValidToken(token.backupAOs[i])) {
                            dropValidToken(token.backupAOs[i], token);
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        token.currentAction(DropAction.DENY);
                    }
                } else {
                    token.currentAction(DropAction.DENY);
                }
                token.dropTarget(this._shelf);

                if (this._ghostCard$) {
                    this._ghostCard$.remove();
                }
                this._dropIndicator$.detach();
            }, this),
            over : function(event, ui) {
                var helper$ = ui.helper;
                mousePosition = 'over';
                // Defer call the real logic, to make sure that over handler will excute after droppable.out
                Utils.defer(function() {
                    if(mousePosition != 'over') {
                        return;
                    }
                    var token = DragManager.instance().getAnalysisToken(helper$);
                    var analysisObject = token.analysisObject;
                    if (_this._isValidToken(analysisObject)) {
                        handleValidToken(analysisObject, helper$, token);
                    } else if (Utils.isArray(token.backupAOs)) {
                        var found = false;
                        for (var i = 0; i < token.backupAOs.length; i++) {
                            if (_this._isValidToken(token.backupAOs[i])) {
                                handleValidToken(token.backupAOs[i], helper$, token);
                                found = true;
                                break;
                            }
                        }
                        if (!found) {
                            token.currentAction(DropAction.DENY);
                        }
                    } else {
                        token.currentAction(DropAction.DENY);
                    }
                });
            },
            out : $.proxy(function(event, ui) {
                var helper$ = ui.helper;
                mousePosition = 'out';
                helper$.off('sap.viz.controls.analysisDrag.events.drag');

                var token = DragManager.instance().getAnalysisToken(helper$);
                token.playDefaultAction();
                if (this._ghostCard$) {
                    this._ghostCard$.remove();
                }
                this._dropIndicator$.detach();
                token.showWarn();
            }, this)
        });
    };
    /**
     * TODO: Add comments.
     */
    FeedingShelf.prototype._traversalCards = function(callback, ignoreDragging, ignoreGhost) {
        var children = this._list$.children();

        var index = 0;
        for (var i = 0; i < children.length; i++) {
            var card = children[i];

            if (this._addIndicator$ && this._addIndicator$[0] === card) {
                continue;
            }
            if (this._dropIndicator$ && this._dropIndicator$[0] === card) {
                continue;
            }
            if (ignoreDragging && this._draggingCard$ && this._draggingCard$[0] === card) {
                continue;
            }
            if (ignoreGhost && this._ghostCard$ && this._ghostCard$[0] === card) {
                continue;
            }
            callback.call(card, index);
            index++;
        }
    };
    /**
     * Add a ghost card by analysis
     */
    FeedingShelf.prototype._addGhostAnalysisAt = function(analysis, index) {
        var card$ = this._addCardAt(analysis, index);
        card$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-ghost');

        return card$;
    };

    /**
     * TODO Param card$ is confuse, should be an analysis
     * @param {Object} card$
     */
    FeedingShelf.prototype.removeCard = function(card$) {
        // before we remove the card, store the id for reference
        if( card$.data ) {
            this._lastAnalysisObjectRemoved = card$.data('__analysis');
        }
        this._lastCardRemoved = card$;
        card$.remove();
        this._analysesChanged();
    };

    /**
     * update list children when analyses changed
     */
    FeedingShelf.prototype._analysesChanged = function() {
        var numCards = this._numCards();
        // Reset the add indicator, Remove the indicator when shelf has card
        if (numCards >= 1) {
            this._addIndicator$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-ph-half');
        } else {
            this._addIndicator$.removeClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-ph-half');
        }
        if (numCards >= this._shelf.capacity) {
            this._addIcon$.css('display','none');
            this._addIndicator$.detach();
        } else {
            this._addIcon$.css('display','');
            this._addIndicator$.appendTo(this._list$);
        }
        // Dispatch event
        this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.FEEDING_CHANGED, this));
    };
    FeedingShelf.prototype._updateCard = function(card$, analysis) {
        var caption;
        if (analysis.type() === AnalyticalType.HIERARCHY) {
            caption = analysis.selectedHierarchyLevel().name();
	        this._lastHierarchyOjbectUpdated = analysis;
        } else {
            caption = analysis.name();
        }
        card$.data('__analysis', analysis);
        card$.attr('title', caption);
        var text$ = $('.' + CSSConst.FEEDINGSHELF_PREFIX + 'card-text', card$);
        text$.text(caption);
    };
    FeedingShelf.prototype._genHierarchyMenuGroups = function(analysis) {
        // Build menuGroups
        var menuItems = [];
        var hierarchyLevels = analysis.hierarchyLevels();

        if(analysis.aggregationType() !== undefined) {
            SubtotalItemType.sanitizeAnalysisObjects(hierarchyLevels);
        }
        for (var i = 0; i < hierarchyLevels.length; i++) {
            var level = hierarchyLevels[i];
            var menuItem = new MenuItem(level.id(), level.name());
            menuItem.selected(level.selected());
            menuItems.push(menuItem);
        }

        var menuGroups = [new MenuGroup(menuItems, true)];
        var actions = analysis.actions();

        if (actions) {
            for (var i = 0; i < actions.length; i++) {
            var action = actions[i];
            menuGroups.push(action);
            }
        }

        return menuGroups;
    };
    FeedingShelf.prototype._genMenuGroups = function(analysis) {
        // Build menuGroups
        return analysis.actions();
    };
    /**
     * create card view and put it into list at appropriate position according to index
     * @param{object}anaylsis
     * @param{String}index
     */
    FeedingShelf.prototype._addCardAt = function(analysis, index) {
    	var card$ = $(document.createElement('div')).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card');
        card$.attr('id', analysis.id());

        var numIcons = 0;
        var i, j;
        var menuGroups, menuItems, menuItem, subMenuGroups;
        if (analysis.type() === AnalyticalType.HIERARCHY) {
            // Analytical type hierarchy
            // Prefix icon
            var hierarchy$ = $(document.createElement('span')).appendTo(card$);
            hierarchy$.addClass([CSSConst.FEEDINGSHELF_PREFIX + 'hierarchy-card-icon', CSSConst.COMMON_PREFIX + 'UVBSharedSprite'].join(' '));
            // Action
            // Create action
            this._createCardAction(card$, this._genHierarchyMenuGroups, $.proxy(function(event) {


                var selectedItemId = event.data.selectedItem.id();
                var selectedItemIsHierarchyLevel = false;
                var hierarchyLevels = analysis.hierarchyLevels();

                for (i = 0; i < hierarchyLevels.length; i++) {
                    if(hierarchyLevels[i].id() === selectedItemId) {
                        selectedItemIsHierarchyLevel = true;
                        break;
                    }
                }


                if(selectedItemIsHierarchyLevel) {
                    analysis = analysis.clone();
                    // Set selected to level
                    analysis.selectedHierarchyLevelID(event.data.selectedItem.id());
                    this._updateCard(card$, analysis);
                    this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.FEEDING_CHANGED, this));
                } else {
                    this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.ACTION_CHANGED, this, {
                        'feedItemID' : this._shelf.id,
                        'analysisObjectID' : analysis.id(),
                        'actionID' : event.data.selectedItem.id()
                    }));
                }
            }, this), analysis);
            numIcons++;
        } else if (analysis.actions() && analysis.actions().length > 0) {
            // Create action
            this._createCardAction(card$, this._genMenuGroups, $.proxy(function(event) {
                this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.ACTION_CHANGED, this, {
                    'feedItemID' : this._shelf.id,
                    'analysisObjectID' : analysis.id(),
                    'actionID' : event.data.selectedItem.id()
                }));
            }, this), analysis);

            numIcons++;
        }

        var remove$ = $(document.createElement('div')).appendTo(card$);
        remove$.attr('style', 'width:19px; height:22px;');
        remove$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-operation-div');
        var removeIcon$ = $(document.createElement('span')).appendTo(remove$);
        removeIcon$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-operation ' + CSSConst.COMMON_PREFIX + 'havanaSharedSprite16');
        remove$.click($.proxy(function() {
            this.removeCard(card$);
        }, this));
        numIcons++;

        var text$ = $(document.createElement('div')).appendTo(card$);
        text$.addClass([CSSConst.FEEDINGSHELF_PREFIX + 'card-text', CSSConst.FEEDINGSHELF_PREFIX + 'card-text-with-icon-' + numIcons].join(' '));
        text$.addClass(CSSConst.COMMON_PREFIX + 'text-ellipsis');

        this._updateCard(card$, analysis);
        // Add to DOM
        this._addElementAt(this._list$, card$, index);
        this._draggable(card$);

        return card$;
    };

    /**
     * Given an analysis object name we want to retrieve it's associated card
     * @param analysisName
     * @return card$ or null
    */
    FeedingShelf.prototype.getCardFromAnalysisObject = function( analysisObject ) {

        var analysisObjectName;
        var tmpCard = this._list$[0];

        if( analysisObject.dataType() === FeedItemType.LEVEL || analysisObject.dataType() === FeedItemType.HIERARCHY) {

          var levels = analysisObject.hierarchyLevels();

            for( var i = 0; i < levels.length; i++ ) {

                var tmpLevel = levels[i];

                if( tmpLevel.selected() ) {

                    analysisObjectName = tmpLevel._name;
                }
            }
        } else {
            analysisObjectName = analysisObject.name();
        }

        for( var i = 0; i < tmpCard.childNodes.length; i++ ) {
            // TODO: improve this search as it may not always return a unique token
            var childNode = tmpCard.childNodes[i];
            if( childNode.innerText.indexOf(analysisObjectName) !== -1 ) {
                return $(childNode);
            } else if (childNode.textContent && childNode.textContent.indexOf(analysisObjectName) !== -1) {
                // add checking for textContent because sometimes the innerText is not consistent with textContent
                return $(childNode);
            }
        }
        // not found so return null
        return null;

    };

    FeedingShelf.prototype._createCardAction = function(card$, menuGroupsGenerator, menuItemSelectedHandler, analysis) {
        var action$ = $(document.createElement('div')).appendTo(card$);
        action$.attr('style', 'width:19px; height:22px;');
        action$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'action-icon-div');
        var actionIcon$ = $(document.createElement('span')).appendTo(action$);
        if (analysis.type() === AnalyticalType.HIERARCHY) {
            card$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-hierarchy');
            actionIcon$.addClass([CSSConst.FEEDINGSHELF_PREFIX + 'action-icon-hierarchy', CSSConst.COMMON_PREFIX + 'UVBSharedSprite'].join(' '));
        }
        if (analysis.actions()) {
            card$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-measure');
            actionIcon$.addClass([CSSConst.FEEDINGSHELF_PREFIX + 'action-icon-measure', CSSConst.COMMON_PREFIX + 'havanaSharedSprite16'].join(' '));
        }

        action$.on('click', $.proxy(function() {
            var menu = new PopUpMenu(document.createElement('div'), menuGroupsGenerator.call(this, card$.data('__analysis')));
            menu.addEventListener(PopUpMenuEvent.ITEM_SELECTED, menuItemSelectedHandler, this);
            menu.open(action$, DockStrategy.DOWN_WITH_ARROW);
        }, this));
        return action$;
    };

    /**
     * put card into container at appropriate position according to index
     * @param{htmlelement}container$
     * @param{htmlelement}element$
     * @param{string}index
     */
    FeedingShelf.prototype._addElementAt = function(container$, element$, index) {
        var children = container$.children();
        if (index !== -1 && index < children.length) {
            $(children[index]).before(element$);
        } else {
            container$.append(element$);
        }
    };

    /**
     * make card draggable
     * @param{htmlelement}
     */
    FeedingShelf.prototype._draggable = function(card$) {
        var _this = this;

        DragManager.enableDraggableFeeding(card$[0], card$.data('__analysis'));
        card$.draggable({
            containment : 'document',
            revert : 'valid',
            helper : function(event) {
                var helper = DragManager.getDefaultHelper(this);
                var token = DragManager.instance().getAnalysisToken($(helper));
                token.defaultAction(DropAction.AS_TRASH);
                return helper;
            },
            start : $.proxy(function(event, ui) {
                this._draggingCard$ = $(this);
                this._draggingCard$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-ghost');
                var helper$ = ui.helper;
                var token = DragManager.instance().getAnalysisToken(helper$);
                var analysisObject = token.analysisObject;
                var eventData = {
                    'analysisObject' : analysisObject,
                    'feedId' : this._shelf.id
                };
                this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.FEEDING_EMPTY_CHANGED, this, eventData));
            }, this),
            stop : function(event, ui) {
                var helper$ = ui.helper;

                if (_this._draggingCard$) {
                    _this._draggingCard$.removeClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-ghost');
                    _this._draggingCard$ = null;
                }

                var token = DragManager.instance().getAnalysisToken(helper$);
                // Detach current card, if it is dropped to a new shelf
                if (!token.dropTarget() || token.currentAction() === DropAction.ACCEPT || token.currentAction() === DropAction.ACCEPT_AS_REPLACEMENT) {
                    _this.removeCard($(this));
                } else {
                    var eventData = {
                        'analysisObject' : token.analysisObject,
                        'feedId' : _this._shelf.id
                    };
                    _this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.FEEDING_DROP_DENY, this, eventData));
                }
            },
            drag : function(event, ui) {
            }
        });
    };
    FeedingShelf.prototype.enableFeeding = function(enabled) {
        if (arguments.length > 0) {
            this._enableFeeding = enabled;
            this._updateFeedingEnabled(enabled);
        } else {
            return this._enableFeeding;
        }
    };
    FeedingShelf.prototype._updateFeedingEnabled = function(enabled) {
        if (enabled) {
            this._list$.css('cursor', 'pointer');
            this._addIcon$.css('display','block');
        } else {
            this._list$.css('cursor', 'default');
            this._addIcon$.css('display','none');
        }
    };

    /**
     * Function resets the last removed analysis object and card from the shelf
     *
    */
    FeedingShelf.prototype.resetLastRemoved = function() {

        this._lastAnalysisObjectRemoved = null;
        this._lastCardRemoved = null;

    };

    /**
     * Function resets the twin analysis Object
     *
    */
    FeedingShelf.prototype.resetTwinAnalysisObject = function() {

        this._lastTwinAnalysisObjectRemoved = null;
    };

    FeedingShelf.langProps = {
        // Change calculation
        'changeCalculation' : 'VIZ_COMMON_CHANGE_CALCULATION',
        'sum' : 'VIZ_COMMON_SUM',
        'average' : 'VIZ_COMMON_AVERAGE',
        'min' : 'VIZ_COMMON_MIN',
        'max' : 'VIZ_COMMON_MAX',
        'countDistinct' : 'VIZ_COMMON_COUNT_DISTINCT',
        'countAll' : 'VIZ_COMMON_COUNT_ALL',
        'none' : 'VIZ_COMMON_NONE',
        'sum_short' : 'VIZ_COMMON_SUM_SHORT',
        'average_short' : 'VIZ_COMMON_AVERAGE_SHORT',
        'min_short' : 'VIZ_COMMON_MIN_SHORT',
        'max_short' : 'VIZ_COMMON_MAX_SHORT',
        'countDistinct_short' : 'VIZ_COMMON_COUNT_DISTINCT_SHORT',
        'countAll_short' : 'VIZ_COMMON_COUNT_ALL_SHORT',
        'none_short' : 'VIZ_COMMON_NONE_SHORT'
    };
    return FeedingShelf;
});
define('sap/viz/controls/common/views/feed/FeedListEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var FeedListEvent = function(type, target, data) {
        FeedListEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.FeedListEvent";
    };
    OOUtil.extend(FeedListEvent, Event);

    FeedListEvent.DROP_DOWN_OPENED = "dropDownOpened";
    FeedListEvent.DROP_DOWN_CLOSED = "dropDownClosed";
    FeedListEvent.ITEM_SELECTED = "itemSelected";

    return FeedListEvent;
});

define('sap/viz/controls/common/constants/KeyboardEventConst',[],function() {

    var KeyboardEventConst = {};

    // Event types
    KeyboardEventConst.UP = 38;
    KeyboardEventConst.DOWN = 40;
    KeyboardEventConst.ENTER = 13;
    KeyboardEventConst.SPACE = 32;
    KeyboardEventConst.ESC = 27;
    KeyboardEventConst.SUBTRACT = 45;
    KeyboardEventConst.DECIMAL = 46;
    KeyboardEventConst.NUM_0 = 48;
    KeyboardEventConst.NUM_9 = 57;
    return KeyboardEventConst;
});
/**
 * FeedList in Feed Panel.
 */
// @formatter:off
define('sap/viz/controls/common/views/feed/FeedList',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/feed/FeedListEvent',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/constants/KeyboardEventConst'],
function($, CSSConst, utils, OOUtil, UIControl, FeedListEvent, LangManager, AnalyticalType, FeedItemType, FeedUtils, KeyboardEventConst) {
// @formatter:on
    /**
     * analyses: [{
     *  colName: 'PRODUCT',
     *     type: 'varchar'
     * }]
     */
    var FeedList = function(dom, analyses, feedItemType, excludes) {
        FeedList.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.FeedList";

        this._dom$ = $(dom);
        this._analyses = analyses;
        this._feedingType = feedItemType;

        this._dataProvider = [];
        var i, j;

        // TODO Grey out the excluded items
        var excluded = function(id) {
            for (var i = 0; i < excludes.length; i++) {
                if (excludes[i].id() === id) {
                    return true;
                }
            }
            return false;
        };
        if (analyses) {
            for ( i = 0; i < analyses.length; i++) {
                var analysis = analyses[i];
                if (excluded(analysis.id())) {
                    continue;
                }
                if (FeedUtils.feedCompatible(this._feedingType, analysis.type(), analysis.dataType())) {
                    this._dataProvider.push({
                        'label' : analysis.name(),
                        'analysis' : analysis
                    });
                }
            }
        }

        this._header = {
            'label' : LangManager.get(FeedList.langProps[this._feedingType]),
            'suffix' : this._dataProvider.length
        };

        this._container$ = null;
        this._content$ = null;
        this._header$ = null;
        this._ul$ = null;
        this._arrow$ = null;
        this._createChildren();
        this._dock = null;
        this._calDockPosFun = null;
        this._resizeHandler = null;
        this._documentHandler = null;
        this._keyDownHandlerProvider = $.proxy(this._keyDownHandler, this);
        this._mouseMoveHandlerProvider = $.proxy(this._mouseMoveHandler, this);
    };
    OOUtil.extend(FeedList, UIControl);

    FeedList.langProps = {
        'Measure': 'VIZ_COMMON_MEASURES',
        'Dimension': 'VIZ_COMMON_DIMENSIONS',
        'Geography': 'VIZ_COMMON_DIMENSIONS',
        'Subtotal': 'VIZ_COMMON_SUBTOTALS'
    };
    var SCROLL_DOWN = 'down';
    var SCROLL_UP = 'up';
    /**
     * set feedList position
     * @param {object} position of selectedfeedShelfListElement
     * @param {String} feedList orientation
     */
    FeedList.prototype.locate = function(dock, orientation) {
        var dom$ = this._dom$;

        var ul$ = this._ul$;
        var ulHeight = ul$.outerHeight();
        var bodyHeight = Math.max($(document.body).height(), $(window).height());
        var maxHeight = bodyHeight - this._header$.outerHeight() - 15;
        if (ulHeight > maxHeight) {
            ulHeight = maxHeight;
        }
        ul$.outerHeight(ulHeight);
        var contentHeight = ulHeight + this._header$.outerHeight() + 5;
        var contentWidth = Math.max(ul$.outerWidth(), this._header$.outerWidth());
        var arrowWidth = this._arrow$.outerWidth();
        var dockStrategy = 'left';
        if (orientation === 'left' || orientation === 'right') {
            dockStrategy = orientation;
        } else if (contentWidth + arrowWidth*3/4 > dock.x) {
            dockStrategy = 'right';
        }
        var arrowBottomOffset = 8;
        var arrowHeight = this._arrow$.outerHeight() + 18;
        // ajdust dock.y to avoid scroll  bar
        var dockYoffset = Math.max(0, dock.y - bodyHeight + arrowHeight / 2 + arrowBottomOffset);
        dock.y = Math.min(dock.y, bodyHeight - arrowHeight / 2 - arrowBottomOffset);
        var top = Math.max(dock.y - dockYoffset + arrowHeight / 2 + arrowBottomOffset - contentHeight, 5);
        var arrowTop = Math.min(dock.y - top - 12, bodyHeight - arrowHeight - arrowBottomOffset - top - dockYoffset);
        
        var listPadding = 2;        

        if (dockStrategy === 'right') {
            this._container$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-container-right');
            dom$.css({
                "left" : dock.x + dock.shelfWidth + arrowWidth*3/4,
                "top" : top
            });
            this._arrow$.css({
                "left" : -arrowWidth/2 + listPadding,
                "top" : arrowTop
            });
        } else if (dockStrategy === 'left') {
            this._container$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-container-left');
            dom$.css({
                "left" : dock.x - contentWidth - arrowWidth*3/4,
                "top" : top
            });
            this._arrow$.css({
                "left" : contentWidth - arrowWidth/2 - listPadding,
                "top" : arrowTop
            });
        }
        this._content$.css({
            'width' : contentWidth + 'px',
            'height' : contentHeight + 'px'
        });
        this._container$.css({
            'width' : contentWidth + 2 + 'px',
            'height' : contentHeight + 'px'
        });
    };
    /**
     * open feedList
     * @param {object} position or a callback function to calculate the position of selectedfeedShelfListElement
     * @param {String} feedList orientation
     */
    FeedList.prototype.open = function(dock) {
        if( typeof(dock) === 'function'){
            this._dock = dock();
            this._calDockPosFun = dock;
        }else{
            this._dock = dock;
        }
        var dom$ = this._dom$;
        dom$.appendTo($("body"));
        this._dispatchEvent(new FeedListEvent(FeedListEvent.DROP_DOWN_OPENED, this));
        // Animation
        // TODO Move animation to css
        // TODO Handle out of window
        this.locate(this._dock);
        // Handler document events: mousedown
        // We should listen the mousedown when event capturing, since cvom chart will stop event propagation when
        // bubbling
        this._documentHandler = $.proxy(function(event) {
            if (!$.contains(this._dom, event.target)) {
                this.close();
            }
        }, this);
        this._addEventListeners();
        document.addEventListener("mousedown", this._documentHandler, true);
        document.addEventListener("keydown", this._keyDownHandlerProvider, true);
        $(window).on('blur', this._documentHandler);
        this._cursorShowed = true;
    };
    /**
     *close feedList
     */
    FeedList.prototype.close = function() {
        var dom$ = this._dom$;
        var delay = 1;
        if (this._classVisible) {
            dom$.removeClass(this._classVisible);
            delay = 2000;
        }
        setTimeout(function() {
            dom$.detach();
        }, delay);

        document.removeEventListener("mousedown", this._documentHandler, true);
        document.removeEventListener("keydown", this._keyDownHandlerProvider, true);
        document.removeEventListener("mousemove", this._mouseMoveHandlerProvider, true);
        $(window).off('blur', this._documentHandler);
        $(window).off('resize', this._resizeHandler);
        this._dispatchEvent(new FeedListEvent(FeedListEvent.DROP_DOWN_CLOSED, this));
        //show cursor when close feedlist
        if (!this._cursorShowed) {
            $('.' + CSSConst.COMMON_PREFIX + 'hide-cursor').removeClass(CSSConst.COMMON_PREFIX + 'hide-cursor');
        }
        this._calDockPosFun = null;
        this.destroy();
    };
    /**
     *create feedList
     * @param {Array} value [{
     *  text: xxx,
     *  callback: function() {}
     * }]
     */
    FeedList.prototype._createChildren = function(analyses) {
        this._dom$.addClass(CSSConst.COMMON_PREFIX + 'feedlist');
        var _this = this;
        var container$ = this._container$ = $(document.createElement('div')).appendTo(this._dom$);
        container$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-container');
        var arrow$ = this._arrow$ = $(document.createElement('div')).appendTo(container$);
        arrow$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-arrow');
        arrow$.addClass(CSSConst.PREFIX + 'feedlist');
        var content$ = this._content$ = $(document.createElement('div')).appendTo(container$);
        content$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-content');
        // Header
        var header$ = this._header$ = $(document.createElement('div')).appendTo(content$).text(this._header.label);
        header$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-content-header');
        // List
        var ul$ = this._ul$ = $(document.createElement('ul')).appendTo(content$);
        ul$.addClass(CSSConst.COMMON_PREFIX + 'scrollable');
        ul$.addClass(CSSConst.COMMON_PREFIX + 'scrollable-y');

        var i;
        var dp;
        // TODO Support hierarchy with tree ui
        for ( i = 0; i < this._dataProvider.length; i++) {
            var li$ = $(document.createElement('li')).appendTo(ul$);
            var a$ = $(document.createElement('a')).appendTo(li$);
            dp = this._dataProvider[i];

            var iconContainer$, icon$;
            var dataType = dp.analysis.dataType();
            var isGeoHierarchy = FeedUtils.isGeoHierarchyFeed(this._feedingType, dp.analysis.type(), dataType);
            if ((this._feedingType === FeedItemType.DIMENSION && dp.analysis.type() === AnalyticalType.HIERARCHY)
                 || isGeoHierarchy) {
                var hierarchyAnalysis = this._setHierarchyAnalysis(dp.analysis.clone(), 0);
                li$.data('__item', hierarchyAnalysis);

                iconContainer$ = $(document.createElement('div')).appendTo(li$);
                iconContainer$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-hierarchy-indicator');
                icon$ = $(document.createElement('div')).appendTo(iconContainer$);
                icon$.addClass(CSSConst.COMMON_PREFIX + 'UVBSharedSprite');
                if (dataType && dataType.toLowerCase() === FeedItemType.GEOGRAPHY.toLowerCase()) {
                    icon$.addClass(CSSConst.COMMON_PREFIX + 'geography');
                } else {
                    icon$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-hierarchy-Icon');
                }

                var expandButton$ = $(document.createElement('div')).appendTo(li$);
                expandButton$.data('__items', dp.analysis);
                expandButton$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button');
                var plusIcon$ = $(document.createElement('div')).appendTo(expandButton$);
                plusIcon$.addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16 ' + CSSConst.COMMON_PREFIX + 'feedlist-li-plus-icon');
                expandButton$.attr('command', 'open');
                expandButton$.click(function(event) {
                    event.stopPropagation();
                    _this._expandButtonHandler(event);
                });
                li$.click($.proxy(this._analysisSelectedHandler, this));
            } else {
                if (dataType && dataType.toLowerCase() === FeedItemType.GEOGRAPHY.toLowerCase()) {
                    iconContainer$ = $(document.createElement('div')).appendTo(li$);
                    iconContainer$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-hierarchy-indicator');
                    icon$ = $(document.createElement('div')).appendTo(iconContainer$);
                    icon$.addClass(CSSConst.COMMON_PREFIX + 'geography');
                }

                li$.data('__item', dp.analysis);
                li$.click($.proxy(this._analysisSelectedHandler, this));
            }
            li$.hover($.proxy(function(event) {
                this._highlightItem($(event.currentTarget));
            }, this), $.proxy(function(event) {
                this._unhighlightItem($(event.currentTarget));
            }, this));
            a$.text(dp.label);
            a$.addClass(CSSConst.COMMON_PREFIX + 'text-ellipsis');

            if (dp.suffix) {
                a$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-a_suffix').attr('__suffix', dp.suffix);
            }
            if (dp.icon) {
                // TODO Support icon
            }
        }
    };
    /**
     *handle expande button click event
     *
     */
    FeedList.prototype._expandButtonHandler = function(event) {
        var expandButton$ = $(event.currentTarget);
        if (expandButton$.attr('command') === 'open') {
            this._openHierarchyItem(expandButton$);
        } else {
            this._closeHierarchyItem(expandButton$);
        }
    };
    /**
     *set the value of selected property of hierarchyAnalysis
     *
     */
    FeedList.prototype._setHierarchyAnalysis = function(hierarchyAnalysis, i) {
        var hierarchyLevels = hierarchyAnalysis.hierarchyLevels();
        for (var j = 0; j < hierarchyLevels.length; j++) {
            var level = hierarchyLevels[j];
            if (j === i) {
                level.selected(true);
            } else {
                level.selected(false);
            }
        }
        return hierarchyAnalysis;
    };
    /**
     *handle li click event
     *
     */
    FeedList.prototype._analysisSelectedHandler = function(event) {
        var _this = this;
        var li$ = $(event.currentTarget);

        var item = li$.data('__item');
        _this._dispatchEvent(new FeedListEvent(FeedListEvent.ITEM_SELECTED, _this, {
            'selectedItem' : item
        }));
        _this.close();
    };
    /**
     * Handle key down event 
     */
    FeedList.prototype._keyDownHandler = function(event) {
        //hide cursor
        var keyCode =  event.keyCode;
        if (!event.ctrlKey && (keyCode === KeyboardEventConst.DOWN || keyCode === KeyboardEventConst.UP)) {
            if (this._cursorShowed) {
                //TODO: hide cursor
                $("*").addClass(CSSConst.COMMON_PREFIX + 'hide-cursor');
                this._cursorShowed = false;
                setTimeout($.proxy(function() {
                    document.addEventListener('mousemove', this._mouseMoveHandlerProvider, true);
                },this),200);
            }
        }
        var li$ = $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-highlight', this._ul$);
        switch (keyCode) {
            case KeyboardEventConst.UP:
                if (event.ctrlKey) {
                    var minusIcon$ = $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-minus-icon', li$);
                    if (minusIcon$[0]) {
                        this._closeHierarchyItem(minusIcon$.parent());
                    }
                } else if (li$[0] != this._ul$[0].firstChild){
                    this._unhighlightItem(li$);
                    this._highlightItem(li$.prev());
                    if (li$.offset().top - this._ul$.offset().top < li$.height()) {
                        this._updateScrollBarPosition(li$, SCROLL_UP);
                    }
                }
                break;
            case KeyboardEventConst.DOWN:
                if (event.ctrlKey) {
                    var plusIcon$ = $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-plus-icon', li$);
                    if (plusIcon$[0]) {
                        this._openHierarchyItem(plusIcon$.parent());
                    }
                } else {
                    if (!li$[0]) {
                        this._highlightItem($(this._ul$[0].firstChild));
                    }else if (li$[0] != this._ul$[0].lastChild){
                        this._unhighlightItem(li$);
                        this._highlightItem(li$.next());
                        if (li$.offset().top + li$.height() > this._ul$.offset().top + this._ul$.height()) {
                            this._updateScrollBarPosition(li$, SCROLL_DOWN);
                        }
                    }
                }
                break;
            case KeyboardEventConst.ENTER:
            case KeyboardEventConst.SPACE:
                if (li$[0]) {
                    this._selectItem(li$);
                }
                break;
            case KeyboardEventConst.ESC:
                this.close();
                break; 
        }
    };
    /**
     * validate the position of feeding list when window resize
     */
    FeedList.prototype._validateSize = function() {
        if(!!this._calDockPosFun && typeof (this._calDockPosFun) === 'function') {
            this.locate(this._calDockPosFun());
        }
    };
    /**
     * Call when the window resize
     */
    FeedList.prototype._resizer = function(event) {
        var _this = this;
        if(!event.data.invalidateSize) {
            setTimeout(function() {
                event.data.invalidateSize = false;
                _this._validateSize();
            }, 1000 / 24);
        }
        event.data.invalidateSize = true;
    };
    /**
     * Use to add event listener
     */
    FeedList.prototype._addEventListeners = function() {
        this._resizeHandler = $.proxy(this._resizer, this);
        $(window).resize({
            'invalidateSize' : false
        }, this._resizeHandler);
    };
    /**
     * Handle mouse move event 
     */
    FeedList.prototype._mouseMoveHandler = function(event) {
        if (!this._cursorShowed) {
            $('.' + CSSConst.COMMON_PREFIX + 'hide-cursor').removeClass(CSSConst.COMMON_PREFIX + 'hide-cursor');
            this._cursorShowed = true;
            document.removeEventListener('mousemove', this._mouseMoveHandlerProvider, true);
            var li$ = $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-highlight', this._ul$);
            this._unhighlightItem(li$);
        }
    };
    /**
     * Highlight item
     */
    FeedList.prototype._highlightItem = function(li$) {
        li$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-highlight');
    };
    /**
     * Remove highlight of item
     */
    FeedList.prototype._unhighlightItem = function(li$) {
        li$.removeClass(CSSConst.COMMON_PREFIX + 'feedlist-li-highlight');
    };
    /**
     * Select item
     */
    FeedList.prototype._selectItem = function(li$) {
        var item = li$.data('__item');
        this._dispatchEvent(new FeedListEvent(FeedListEvent.ITEM_SELECTED, this, {
            'selectedItem' : item
        }));
        this.close();
    };
    /**
     * Expand the hierarchy item
     */
    FeedList.prototype._openHierarchyItem = function(expandButton$) {
        var analysis = expandButton$.data('__items');
        var hierarchyLevels = analysis.hierarchyLevels();
        var borther$ = expandButton$.parent();
        for (var i = 0; i < hierarchyLevels.length; i++) {
            var li$ = $(document.createElement('li'));
            $(borther$).after(li$);
            borther$ = li$;
            var span$ = $(document.createElement('span')).appendTo(li$);
            var hierarchy = this._setHierarchyAnalysis(analysis.clone(), i);
            li$.data('__item', hierarchy);
            span$.text(hierarchyLevels[i].name());
            span$.addClass(CSSConst.COMMON_PREFIX + 'text-ellipsis');
            li$.click($.proxy(this._analysisSelectedHandler, this));
            li$.hover($.proxy(function(event) {
                this._highlightItem($(event.currentTarget));
            }, this), $.proxy(function(event) {
                this._unhighlightItem($(event.currentTarget));
            }, this));
        }
        
        expandButton$.attr('command', 'close');
        expandButton$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button-close');
        expandButton$.children().attr('class', CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16 ' + CSSConst.COMMON_PREFIX + 'feedlist-li-minus-icon');
        this._updateAllExpandButtons();
    };
    /**
     * Collapse the hierarchy item
     */
    FeedList.prototype._closeHierarchyItem = function(expandButton$) {
        var analysis = expandButton$.data('__items');
        var hierarchyLevels = analysis.hierarchyLevels();
        for (var j = 0; j < hierarchyLevels.length; j++) {
            expandButton$.parent().next().remove();
        }
        expandButton$.attr('command', 'open');
        expandButton$.removeClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button-close');
        expandButton$.children().attr('class', CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16 ' + CSSConst.COMMON_PREFIX + 'feedlist-li-plus-icon');
        this._updateAllExpandButtons();
    };
    /**
     * Update position of all expand buttons 
     */
    FeedList.prototype._updateAllExpandButtons = function() {
        // ul has scroll bar
        var hasScroll = this._ul$[0].scrollHeight > this._ul$.outerHeight();
        $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-button').each(function() {
            $(this).removeClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button-offset');
            if (hasScroll) {
                $(this).addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button-offset');
            };
        });
    };
    /**
     * Update scrollbar's position
     */
    FeedList.prototype._updateScrollBarPosition = function(li$, direction) {
        var currentPos = this._ul$.scrollTop();
        if (direction === SCROLL_DOWN) {
            var nextItems = li$.nextAll();
            var nextItemsHeight = li$.height() * nextItems.length;
            if (nextItemsHeight <= this._ul$.height()) {
                //scroll to bottom
                currentPos += nextItemsHeight;
            } else {
                //scroll to next page
                currentPos += (this._ul$.scrollHeight()/li$.height());
            }
        } else {
            var prevItems = li$.prevAll();
            var prevItemsHeight = li$.height() * prevItems.length;
            if (prevItemsHeight <= this._ul$.height()) {
                //scroll to top
                currentPos = 0;
            } else {
                //scroll to last page
                currentPos -= (this._ul$.scrollHeight()/li$.height());
            }
        }
        // Don't show cursor during mouse moving caused by scrolling
        this._cursorShowed = true;
        this._ul$.scrollTop(currentPos);
        setTimeout($.proxy(function() {
            this._cursorShowed = false;
        },this),500);
    };
    return FeedList;
});

// @formatter:off
define('sap/viz/controls/mapbuilder/widgets/WidgetFeeding',[
   "jquery",
   "sap/viz/controls/common/utils/OOUtil",
   "sap/viz/controls/common/utils/Utils",
   "sap/viz/controls/common/constants/CSSConst",
   "sap/viz/controls/common/managers/LangManager",
   "sap/viz/controls/common/views/feed/FeedingShelf",
   "sap/viz/controls/common/views/feed/FeedingShelfEvent",
   "sap/viz/controls/common/feeds/FeedItem",
   "sap/viz/controls/common/feeds/FeedItemType",
   "sap/viz/controls/common/feeds/FeedUtils",
   'sap/viz/controls/common/views/feed/FeedList',
   'sap/viz/controls/common/views/feed/FeedListEvent',
   'sap/viz/controls/common/events/FeedEvent',
   "sap/viz/controls/mapbuilder/constants/Const",
   "sap/viz/controls/mapbuilder/widgets/WidgetBase",
   "sap/viz/controls/mapbuilder/widgets/WidgetTitle",
   "sap/viz/controls/mapbuilder/events/GeoEvent"
],
function($, OOUtil, Utils, CSSConst, LangManager, FeedingShelf, FeedingShelfEvent, FeedItem, FeedItemType, FeedUtils, FeedList, FeedListEvent, FeedEvent, Const, WidgetBase, WidgetTitle, GeoEvent) {

    var GEO_INFO_FEED = {
        id: "location",
        name: "VIZ_MAPBUILDER_GEO",
        capacity: 1,
        analysisType: "dimension",
        feedItemType: FeedItemType.GEOGRAPHY


    };

    var PROPERTIES_CHOROPLETH_COLOR_FEED = {
        id: "color",
        name: "VIZ_MAPBUILDER_GEO_COLOR",
        capacity : 1,
        analysisType:  "measure",
        feedItemType: FeedItemType.MEASURE

    };

    var PROPERTIES_BUBBLE_COLOR_FEED = {
        id: "color",
        name: "VIZ_MAPBUILDER_GEO_COLOR",
        capacity : 1,
        analysisType:  "dimension",
        feedItemType: FeedItemType.DIMENSION

    };

    var PROPERTIES_SIZE_FEED = {
        id: "size",
        name: "VIZ_MAPBUILDER_GEO_SIZE",
        capacity : 1,
        analysisType: "measure",
        feedItemType: FeedItemType.MEASURE

        };

    var WidgetFeeding  = function(div, config){

        WidgetFeeding.superclass.constructor.apply(this, arguments);

        this.__className = "sap.viz.controls.geo.widgets.WidgetFeeding";

        this._feedMap = this._config.feedMap;

        this._measures = null;

        this._attributes = null;

        this._measures$ = null;

        this._attributes$ = null;

        this._feedingSelves = {};

        this._feedingPanel$ = $("<div/>").appendTo(div);

        this._vizType = this._config.vizType != null ? this._config.vizType : Const.VIZ_TYPE_CHOROPLETH;

        this._titleMeasure = null;

        this._creatControls();

        this.update({feeding : this._config.feeding});

    };

    OOUtil.extend(WidgetFeeding, WidgetBase);

    WidgetFeeding.prototype._prepareFeeding = function(vizType){

        if(vizType == Const.VIZ_TYPE_CHOROPLETH){
           this._measures =   [Utils.clone(PROPERTIES_CHOROPLETH_COLOR_FEED)];
           this._attributes = [Utils.clone(GEO_INFO_FEED)];
        }else if(vizType == Const.VIZ_TYPE_BUBBLE){
            this._measures =   [Utils.clone(PROPERTIES_SIZE_FEED),Utils.clone(PROPERTIES_BUBBLE_COLOR_FEED)];
            this._attributes = [Utils.clone(GEO_INFO_FEED)];
         }else if(vizType == Const.VIZ_TYPE_MARKER){
            this._measures = [];
            this._attributes = [Utils.clone(GEO_INFO_FEED)];
        }else{
            throw LangManager.get('VIZ_MAPBUILDER_NOT_SUPPORT_ERROR');
        }

        var addFeeding = function(e){
            var uiShelf = e.target();
            this._uiShelf = uiShelf;
            if (this._config.feedingPanel && this._config.feedingPanel.useBuildInFeedList === true) {
                var shelf = uiShelf.shelf();
                var dom = document.createElement('div');
                var fi = this._getFeed(shelf.id);
                var currentValues = fi ? fi.values() : [];
                var feedList = new FeedList(dom, this._allAnalyses, shelf.feedItemType, currentValues);

                feedList.addEventListener(FeedListEvent.ITEM_SELECTED, function(event) {
                    var selectedItem = event.data.selectedItem;
                    uiShelf.addAnalysis(selectedItem);
                }, this);
                feedList.open(uiShelf.popUpDock());
            } else {
                this._dispatchEvent(new FeedEvent(FeedEvent.REQUEST_FEED, this, {
                    'feedId' : uiShelf.shelf().id,
                    'fieldLocalPosition' : uiShelf.popUpDock()
                }));
            }
        };

        if(this._measures.length > 0){
           //this._titleMeasure.show();
           this._measures$.show();
           for(var i = 0; i < this._measures.length; i++){
              var  feed_title = LangManager.get(this._measures[i].name);
              this._measures[i].name = feed_title ? feed_title : "Color";
              var feedingShelf1 = new FeedingShelf(this._measures$, this._measures[i], this._feedMap);
              feedingShelf1.addEventListener( FeedingShelfEvent.FEEDING_CHANGED, function(e){
                   this._dispatchEvent(e);
              }, this);
              feedingShelf1.addEventListener( FeedingShelfEvent.CLICK_ADD_FEEDING, addFeeding, this);
              this._feedingSelves[this._measures[i].id]= feedingShelf1;
              
              feedingShelf1.addEventListener(FeedingShelfEvent.ACTION_CHANGED, this._actionChangedHandler, this);
           }
        }else{
              //this._titleMeasure.hide();
              this._measures$.hide();
        }

        if(this._attributes.length > 0){
           for(var j = 0; j < this._attributes.length; j++){
              this._attributes[j].name = LangManager.get(this._attributes[j].name);
              var feedingShelf2 = new FeedingShelf(this._attributes$, this._attributes[j], this._feedMap);
              feedingShelf2.addEventListener( FeedingShelfEvent.FEEDING_CHANGED, function(e){
                   this._dispatchEvent(e);
              }, this);
              feedingShelf2.addEventListener( FeedingShelfEvent.CLICK_ADD_FEEDING, addFeeding, this);
              this._feedingSelves[this._attributes[j].id]= feedingShelf2;
              
              feedingShelf2.addEventListener(FeedingShelfEvent.ACTION_CHANGED, this._actionChangedHandler, this);
           }
        }
    };

    WidgetFeeding.prototype._creatControls = function(){
        var root$ = $(this._dom);
        //var title = new WidgetTitle(root$, {title: LangManager.get("VIZ_MAPBUILDER_GEO")});
        this._attributes$ = $('<div/>').appendTo(root$).addClass(CSSConst.MAPBUILDER_PREFIX + 'feeding-container');
        //this._titleMeasure = new WidgetTitle(root$, {title: LangManager.get("VIZ_MAPBUILDER_GEO_COLOR")});
        this._measures$ = $('<div/>').appendTo(root$).addClass(CSSConst.MAPBUILDER_PREFIX + 'feeding-container');
        this._prepareFeeding(this._vizType);
    };

    WidgetFeeding.prototype.update = function(config){
        var feedings = config.feeding;
        if(feedings){
            for(var i = 0; i < feedings.length; i++){
                var feeding = feedings[i];
                if(feeding) {
                //do not dispatch event when updating by API
                    this._feedingSelves[feeding.id()].enableDispatchEvent(false);
                    this._feedingSelves[feeding.id()].analyses(feeding.values());
                    this._feedingSelves[feeding.id()].enableDispatchEvent(true);
                }
            }
        }
    };

    WidgetFeeding.prototype.changeFeeding = function(type){
        this._measures$.empty();
        for(var key in this._feedingSelves) {
            if(this._feedingSelves.hasOwnProperty(key)) {
               this._feedingSelves[key].removeAllEventListeners();
            }
        }
        this._feedingSelves = {};
        this._attributes$.empty();
        this._prepareFeeding(type);
    };

    WidgetFeeding.prototype.getFeeds = function(){
        var feedItems = [];
        for(var key in this._feedingSelves) {
            if(this._feedingSelves.hasOwnProperty(key)) {
               var shelf = this._feedingSelves[key].shelf();
               feedItems.push(new FeedItem(shelf.id, FeedUtils.convertFeedType(shelf.feedItemType), this._feedingSelves[key].analyses()));
            }
        }
        return feedItems;
    };

    WidgetFeeding.prototype._getFeed = function(id) {
        var feedingItems = this.getFeeds();
        for (var i = 0; i < feedingItems.length; i++) {
            var fi = feedingItems[i];
            if (fi.id() === id) {
                return fi;
            }
        }
        return null;
    };
    WidgetFeeding.prototype.save = function() {
        var feedItems = [];
        for (var i = 0; i < this.getFeeds().length; i++) {
            feedItems[i] = FeedItem.toJSON(this.getFeeds()[i]);
        }
        var jsonValue = {feeding: feedItems};
        return jsonValue;
    };
    WidgetFeeding.prototype.feedingFromJson = function(jsonValue) {
        if(!jsonValue){
            return;
        }
        var feedItems = [];
        for(var i = 0; i< jsonValue.feeding.length; i++) {
            feedItems[i] = FeedItem.fromJSON(jsonValue.feeding[i]);
        }
        return feedItems;
    };

    WidgetFeeding.prototype._analysisObjectsForPicker = function(analysisObjects) {
        if (arguments.length > 0) {
            this._allAnalyses = analysisObjects;
        } else {
            return this._allAnalyses;
        }
    };
    
    WidgetFeeding.prototype._actionChangedHandler = function(event){

      this._dispatchEvent(new GeoEvent(GeoEvent.ACTION_CHANGED, this, {
          'feedItemID' : event.data.feedItemID,
          'analysisObjectID' : event.data.analysisObjectID,
          'actionID' : event.data.actionID
      }));
    };
    
    return WidgetFeeding;
});
// @formatter:off
define('sap/viz/controls/mapbuilder/widgets/WidgetProperties',[
  "jquery",
  "sap/viz/controls/common/utils/OOUtil", 
  "sap/viz/controls/common/constants/CSSConst", 
  "sap/viz/controls/common/managers/LangManager",
  "sap/viz/controls/mapbuilder/widgets/WidgetBase",
  "sap/viz/controls/mapbuilder/events/GeoEvent"
],
function($, OOUtil, CSSConst, LangManager, WidgetBase, GeoEvent) {
    
// @formatter:on
    /**
     *
     * @param {Object} div     container div
     * @param {Object} config  config
     *
     */
    var WidgetProperties = function(div, config) {
        WidgetProperties.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.geo.widgets.WidgetProperties";
        this._properties = this._config.properties;
        this._settings = this._config.settings;
        this._settings$ = {};
        this._creatControls();
    };

    OOUtil.extend(WidgetProperties, WidgetBase);

    WidgetProperties.prototype._creatSettings = function() {
        var rootDiv = $(this._dom);
        for (var i = 0; i < this._settings.length; i++) {
            var setting = this._settings[i];
            var setting$;
            if (setting.type === "check") {
                setting$ = $("<div/>").appendTo(rootDiv);
                var check$ = $("<input type=\"checkbox\"></input>").appendTo(setting$)
                              .addClass(CSSConst.MAPBUILDER_PREFIX + "inline-block");
                var name$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "inline-block")
                             .html(LangManager.get(setting.name)).addClass(CSSConst.MAPBUILDER_PREFIX + "inline-block")
                             .addClass(CSSConst.MAPBUILDER_PREFIX + "property-text").appendTo(setting$);
                check$.on("click", $.proxy(this._clickCheckBoxHandler, check$, setting, this));
                check$.attr("checked", setting.value);
                this._settings$[setting.id] = check$;
                if((i===0) && !(this._config.showLegend)) {
                    setting$.hide();
                }
            }
        }
    };

    WidgetProperties.prototype._creatControls = function() {
        this._creatSettings();
    };

    WidgetProperties.prototype._clickCheckBoxHandler = function(setting, parent, event) {
        if (setting.checkedEvent && setting.uncheckedEvent) {
            if (this.attr("checked")) {
                parent._dispatchEvent(new GeoEvent(setting.checkedEvent, this));
            } else {
                parent._dispatchEvent(new GeoEvent(setting.uncheckedEvent, this));
            }
        }

        if (setting.event) {
            parent._dispatchEvent(new GeoEvent(setting.event, this, {
                id : setting.id,
                value : this[0].checked
            }));
        }

    };

    WidgetProperties.prototype.update = function(config) {
        $.each(config, function(i, n) {
            if (this.settings[n].type === "check") {
                this.setting$[n].attr("checked", config[n]);
            }
        });
    };

    WidgetProperties.prototype.changeSetting = function(settings) {
        this._settings = settings;
        $(this._dom).empty();
        this._settings$ = {};
        this._creatSettings();
    };

    return WidgetProperties;
});

define('sap/viz/controls/mapbuilder/utils/UIHelper',[
  'sap/viz/controls/common/managers/LangManager',
  "sap/viz/controls/common/utils/Utils",
  "sap/viz/controls/mapbuilder/constants/Const",
  "sap/viz/controls/mapbuilder/events/GeoEvent"
],function(LangManager, Utils, Const, GeoEvent){

   var PROPERTY_SHOW_LEGEND = {
       id: "legendVisible",
       name : "VIZ_MAPBUILDER_SHOW_LEGEND",
       type : "check",
       value: true,
       checkedEvent: GeoEvent.SHOW_LEGEND,
       uncheckedEvent: GeoEvent.HIDE_LEGEND
   };

   var PROPERTY_MARKER_CLUSTER = {
       id: "markerCluster",
       name: "VIZ_MAPBUILDER_MARKER_CLUSTER",
       type : "check",
       value: false,
       event: GeoEvent.CHANGE_VIZ_PROPERITIES
   };
   
   var PROPERTY_BUBBLE_CLUSTER = {
       id: "bubbleCluster",
       name: "VIZ_MAPBUILDER_BUBBLE_CLUSTER",
       type : "check",
       value: false,
       event: GeoEvent.CHANGE_VIZ_PROPERITIES
   };

   var UIHelper = function(){
       this.__className = "sap.viz.controls.geo.utils.UIHelper";
   };

   /**
    * Get Available Settings by viz type
    * @param {Object} vizType
    */
   UIHelper.getAvailableSettings= function(vizType){
       if(vizType === Const.VIZ_TYPE_CHOROPLETH){
           return [ Utils.clone(PROPERTY_SHOW_LEGEND)];
       }else if(vizType === Const.VIZ_TYPE_MARKER){
           return [ Utils.clone(PROPERTY_SHOW_LEGEND), Utils.clone(PROPERTY_MARKER_CLUSTER)];
       }else if(vizType === Const.VIZ_TYPE_BUBBLE){
           return [ Utils.clone(PROPERTY_SHOW_LEGEND), Utils.clone(PROPERTY_BUBBLE_CLUSTER)];
       }else{
           throw LangManager.get('VIZ_MAPBUILDER_NOT_SUPPORT_ERROR');
       }

   };
   return UIHelper;
});

// @formatter:off
define('sap/viz/controls/mapbuilder/sections/GeoVizLayerSection',[
  "jquery",
  "sap/viz/controls/common/utils/OOUtil",
  "sap/viz/controls/common/constants/CSSConst",
  "sap/viz/controls/common/views/feed/FeedingShelfEvent",
  "sap/viz/controls/common/managers/LangManager",
  "sap/viz/controls/common/feeds/FeedItem",
  "sap/viz/controls/common/feeds/FeedItemType",
  "sap/viz/controls/common/feeds/AnalysisObject",
  "sap/viz/controls/common/feeds/AnalyticalType",
  "sap/viz/controls/mapbuilder/constants/Const",
  "sap/viz/controls/mapbuilder/events/GeoEvent", 
  "sap/viz/controls/mapbuilder/sections/SectionBase",
  "sap/viz/controls/mapbuilder/widgets/WidgetTitle",
  "sap/viz/controls/mapbuilder/widgets/WidgetDataPoint",
  "sap/viz/controls/mapbuilder/widgets/WidgetFeeding",
  "sap/viz/controls/mapbuilder/widgets/WidgetProperties",
  "sap/viz/controls/mapbuilder/utils/UIHelper"
],
function($, OOUtil, CSSConst, FeedingShelfEvent, LangManager, FeedItem, FeedItemType, AnalysisObject, AnalyticalType, Const,
         GeoEvent, SectionBase,  WidgetTitle, WidgetDataPoint, WidgetFeeding, WidgetProperties,UIHelper) {
// @formatter:on

    /**
     *
     * @param {Object} div     container div
     * @param {Object} config  config
     *
     */
	var GeoVizLayerSection = function(div, config) {

        GeoVizLayerSection.superclass.constructor.apply(this, arguments);

        this.__className = "sap.viz.controls.geo.sections.GeoVizLayerSection";

        this._feedMap = this._config.feedMap;

        this._feeding = null;

        this._dataType = null;

        this._properties = null;

        this._vizType = this._config.vizType ? this._config.vizType : Const.VIZ_TYPE_CHOROPLETH;

        this._lableTitle = null;
        this._lableText = null;

        this._geoLocationFeedId = "";
        this._geoFeatureColorFeedId = "";
        this._geoFeatureSizeFeedId = "";

        this._geoLocationFeedName = "";
        this._geoFeatureColorFeedName = "";
        this._geoFeatureSizeFeedName = "";
        
        this._geoLocationFeedValues = [];
        this._geoFeatureColorFeedValues = [];
        this._geoFeatureSizeFeedValues = [];

        this._colorAnalysisType = "";
        this._locationLength = "";
        this._colorMeasureLength = "";
        this._colorDimensionLength = "";
        this._sizeLength = "";
        
        this._showIconDom = false;

        this._clusterChecked = false;

        this._lableTitleText = LangManager.get("VIZ_MAPBUILDER_CHOROPLETH");

        //this._propertyTitle = null;

        this._allAnalyses = null;
    };

    OOUtil.extend(GeoVizLayerSection, SectionBase);

    //Update Layer Setting
    GeoVizLayerSection.prototype.update = function(config) {
        if (config.vizType) {
            this._feeding.changeFeeding(config.vizType);
        }

        if (config.feeding) {
            this._feeding.update({
                feeding : config.feeding
            });
        }

        if (config.title) {
            this.title(config.title, true);
        }

        if (config.properties) {
            this._properties.update(config.properties);
        }

    };

    GeoVizLayerSection.prototype._createChildControl = function($div) {

        var title = new WidgetTitle($div, {
            title : LangManager.get("VIZ_MAPBUILDER_DATA_POINTS") + ": "
        });
        this._lableTitle = $(document.createElement("div")).appendTo($div).addClass(CSSConst.MAPBUILDER_PREFIX + "chartType-icon-title");
        this._lableText = $('<div/>').appendTo(this._lableTitle).addClass(CSSConst.MAPBUILDER_PREFIX + "chartType-icon-title-text");
        this._lableText.text(this._lableTitleText);

        var typechooser = $(document.createElement("div")).appendTo($div).addClass(CSSConst.MAPBUILDER_PREFIX + "datapointchooser");

        this._dataType = new WidgetDataPoint(typechooser, {
            title : LangManager.get("VIZ_MAPBUILDER_TYPE")+ ": ",
            selected : this._vizType
        });

        var feeding$ = $(document.createElement("div")).appendTo($div);

        this._feeding = new WidgetFeeding(feeding$, {
            feedMap : this._feedMap,
            vizType : this._vizType,
            feeding : this._config.feeding ? this._config.feeding : [],
            feedingPanel: this._config.feedingPanel
        });
        this._feeding._analysisObjectsForPicker(this._allAnalyses);

//        this._propertyTitle = new WidgetTitle($div, {
//            title : LangManager.get("VIZ_MAPBUILDER_PROPERTIES")
//        });

//        if(this._vizType === Const.VIZ_TYPE_CHOROPLETH) {
//            this._propertyTitle.hide();
//        }
        var properties$ = $(document.createElement("div")).appendTo($div).addClass(CSSConst.MAPBUILDER_PREFIX + "properites");
        this._properties = new WidgetProperties(properties$, {
            properites : this._config.properties,
            settings : UIHelper.getAvailableSettings(this._vizType),
            showLegend: this._config.showLegend
        });
    };

    GeoVizLayerSection.prototype._addEventHandler = function() {

        this._feeding.addEventListener(FeedingShelfEvent.FEEDING_CHANGED, function(e) {
            this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.FEEDING_CHANGED, this, {
                sectionIdx : this.getSectionIdx()
            }));
        }, this);
        
 
        this._feeding.addEventListener(GeoEvent.ACTION_CHANGED, function(e) {
          this._dispatchEvent(new GeoEvent(GeoEvent.ACTION_CHANGED, this, {
              feedItemID : e.data.feedItemID,
              analysisObjectID : e.data.analysisObjectID,
              actionID : e.data.actionID,
              sectionIdx : this.getSectionIdx()
          }));
      }, this);

        this._dataType.addEventListener(GeoEvent.CHANGE_LAYER_VIZTYPE, function(e) {
            this._changeVizType(e.data.vizType);
        }, this);
        
        if(this._config.showLegend) {
            this._properties.addEventListener(GeoEvent.SHOW_LEGEND, function(e) {
                this._dispatchEvent(new GeoEvent(GeoEvent.SHOW_LEGEND, this, {
                    sectionIdx : this.getSectionIdx()
                }));
            }, this);

            this._properties.addEventListener(GeoEvent.HIDE_LEGEND, function(e) {
                this._dispatchEvent(new GeoEvent(GeoEvent.HIDE_LEGEND, this, {
                    sectionIdx : this.getSectionIdx()
                }));
            }, this);
        }

        this._properties.addEventListener(GeoEvent.CHANGE_VIZ_PROPERITIES, function(e) {
            this._clusterChecked = e.data.value;
            this._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_VIZ_PROPERITIES, this, {
                sectionIdx : this.getSectionIdx(),
                id : e.data.id,
                value : this._clusterChecked
            }));
        }, this);

    };

    GeoVizLayerSection.prototype._createChildControlPanel = function($div) {

        this._createChildControl($div);
        this._addEventHandler();
    };

    GeoVizLayerSection.prototype.getFeeds = function() {
        return this._feeding.getFeeds();
    };

    GeoVizLayerSection.prototype.destroy = function() {
        this.getSectionDom().detach();
    };

    GeoVizLayerSection.prototype._changeVizType = function(vizType) {
        var oldVizType = this._vizType;
        this._vizType = vizType;

        var feedings = [];
        var feedItems = this.getFeeds();
        var feedItem;
        for(var i = 0; i < feedItems.length ; i++ ){
            feedItem = feedItems[i];
            var length = feedItem.values().length;
            if(feedItem.id() === "location") {
                this._locationLength = length;
            } else if(feedItem.id() === "color") {
                if(feedItem.type() === FeedItemType.MEASURE) {
                    this._colorMeasureLength = length;
                } else {
                    this._colorDimensionLength = length;
                }
            } else if(feedItem.id() === "size") {
                this._sizeLength = length;
            }
            for(var j = 0; j < length; j++) {
                var id = feedItem.values()[j].id();
                var name = feedItem.values()[j].name();
                var values = feedItem.values();
                if(feedItem.id() === "location"){
                    this._geoLocationFeedName = name;
                    this._geoLocationFeedId = id;
                    this._geoLocationFeedValues = values;
                }else if(feedItem.id() === "color"){
                    this._geoFeatureColorFeedName = name;
                    this._geoFeatureColorFeedId = id;
                    this._geoFeatureColorFeedValues = values;
                    this._colorAnalysisType = feedItem.type();
                }else if(feedItem.id() === "size"){
                    this._geoFeatureSizeFeedName = name;
                    this._geoFeatureSizeFeedId = id;
                    this._geoFeatureSizeFeedValues = values;
                }
            }
        }
        if(this._vizType === Const.VIZ_TYPE_CHOROPLETH) {
            //this._propertyTitle.hide();
            this.title("", false);
            this.showIcon(false);
            this._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-marker");
            this._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-bubble");
            this._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-choropleth");
            this._lableTitleText = LangManager.get("VIZ_MAPBUILDER_CHOROPLETH");

            if(this._geoLocationFeedId && this._locationLength > 0) {
                feedings[0] = new FeedItem( "location", FeedItemType.DIMENSION , this._geoLocationFeedValues);
                this.title(this._geoLocationFeedName, false);
                this.showIcon(true);
            }
            if(this._geoFeatureColorFeedId && this._colorAnalysisType === FeedItemType.MEASURE && this._colorMeasureLength > 0) {
                feedings[1] = new FeedItem( "color", FeedItemType.MEASURE , this._geoFeatureColorFeedValues);
                this.title(this._geoFeatureColorFeedName, false);
                this.showIcon(true);
            }
            if(this._geoFeatureSizeFeedId && this._sizeLength > 0) {
                feedings[1] = new FeedItem( "color", FeedItemType.MEASURE , this._geoFeatureSizeFeedValues);
                this.title(this._geoFeatureSizeFeedName, false);
                this.showIcon(true);
            }
        } else if(this._vizType === Const.VIZ_TYPE_MARKER) {
            //this._propertyTitle.hide();
            this.title("", false);
            this.showIcon(false);
            this._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-choropleth");
            this._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-bubble");
            this._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-marker");
            this._lableTitleText = LangManager.get("VIZ_MAPBUILDER_MARKER");

            if(this._geoLocationFeedId && this._locationLength > 0) {
                feedings[0] = new FeedItem( "location", FeedItemType.DIMENSION , this._geoLocationFeedValues);
                this.title(this._geoLocationFeedName, false);
                this.showIcon(true);
            }
       } else if(this._vizType === Const.VIZ_TYPE_BUBBLE) {
           //this._propertyTitle.hide();
           this.title("", false);
           this.showIcon(false);
           this._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-choropleth");
           this._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-marker");
           this._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-bubble");
           this._lableTitleText = LangManager.get("VIZ_MAPBUILDER_BUBBLE");
           if(this._geoLocationFeedId && this._locationLength > 0) {
               feedings[0] = new FeedItem( "location", FeedItemType.DIMENSION , this._geoLocationFeedValues);
               this.title(this._geoLocationFeedName, false);
               this.showIcon(true);
          }

           if(this._geoFeatureSizeFeedId && this._sizeLength > 0) {
               if(this._colorDimensionLength === 0 && this._geoFeatureSizeFeedName === this._geoFeatureColorFeedName && this._geoFeatureSizeFeedId === this._geoFeatureColorFeedId) {}
               else {
                   feedings[1] = new FeedItem( "size", FeedItemType.MEASURE , this._geoFeatureSizeFeedValues);
                   if(feedings[0]) {
                       this.title(this._geoFeatureSizeFeedName, false);
                       this.showIcon(true);
                   }
               }
           }
          if(this._geoFeatureColorFeedId && this._colorMeasureLength > 0 && this._colorAnalysisType === FeedItemType.MEASURE) {
               feedings[1] = new FeedItem( "size", FeedItemType.MEASURE , this._geoFeatureColorFeedValues);
               if(feedings[0]) {
                   this.title(this._geoFeatureColorFeedName, false);
                   this.showIcon(true);
               }
          }

           if(this._geoFeatureColorFeedId && this._colorAnalysisType === FeedItemType.DIMENSION && this._colorDimensionLength > 0) {
               feedings[2] = new FeedItem( "color", FeedItemType.DIMENSION , this._geoFeatureColorFeedValues);
           }
          }

        this._lableText.text(this._lableTitleText);
        this._feeding.changeFeeding(this._vizType);
        this.update({feeding: feedings});
        this._properties.changeSetting(UIHelper.getAvailableSettings(this._vizType));

        this._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_LAYER_VIZTYPE, this, {
            sectionIdx : this.getSectionIdx(),
            vizType : this._vizType,
            feeding: ((feedings.length === 1 && this._geoLocationFeedId && this._locationLength > 0) || oldVizType === this._vizType) ? null : feedings
        }));
        this._dispatchEvent(new FeedingShelfEvent(FeedingShelfEvent.FEEDING_CHANGED, this, {
            sectionIdx : this.getSectionIdx()
        }));
        if(oldVizType === this._vizType && this._clusterChecked) {
            if(this._vizType=== Const.VIZ_TYPE_BUBBLE) {
                this._properties._settings$.bubbleCluster[0].checked = this._clusterChecked;
                this._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_VIZ_PROPERITIES, this, {
                    sectionIdx : this.getSectionIdx(),
                    id : "bubbleCluster",
                    value : this._clusterChecked
                }));
            } else if(this._vizType=== Const.VIZ_TYPE_MARKER) {
                this._properties._settings$.markerCluster[0].checked = this._clusterChecked;
                this._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_VIZ_PROPERITIES, this, {
                    sectionIdx : this.getSectionIdx(),
                    id : "markerCluster",
                    value : this._clusterChecked
                }));
            }
        }
    };

    GeoVizLayerSection.prototype._analysisObjectsForPicker = function(analysisObjects) {
        if (arguments.length > 0) {
            this._allAnalyses = analysisObjects;
            if(this._feeding){
               this._feeding._analysisObjectsForPicker(this._allAnalyses);
            }
            
        } else {
            return this._allAnalyses;
        }
    };
    GeoVizLayerSection.prototype.save = function() {
        var sectionValue = {vizType: this._vizType,
                            feedMap: this._feedMap,
                            feeding: this._feeding.save(),
                            title: this.title(),
                            checked: this._isChecked,
                            checkable: this._checkable,
                            configable: this._configable,
                            expand: this._isExpand,
                            sortable: this._sortable,
                            titleText: this._lableTitleText,
                            clusterChecked: this._vizType === Const.VIZ_TYPE_CHOROPLETH ? null: this._clusterChecked,
                            showLegend: this._config.showLegend,
                            showIconDom: this._showIconDom
                            };
        return sectionValue;
    };
//    GeoVizLayerSection.prototype.fromJson = function(jsonValue) {
//        if(!jsonValue){
//            return;
//        }
//        if(jsonValue.feeding) {
//            jsonValue.feeding = this._feeding.feedingFromJson(jsonValue.feeding.feeding);
//        }
//        return jsonValue;
//    };

    return GeoVizLayerSection;
});
// @formatter:off
define('sap/viz/controls/mapbuilder/models/Analysis',[],
function(){
// @formatter:on

    var Analysis = function() {
        
        this.__className = "sap.viz.controls.geo.models.Analysis";
        
        this.id = null;
        this.name = null;
        // Measure, Dimension
        this.type = null;
    };

    return Analysis;
});

// @formatter:off
define('sap/viz/controls/mapbuilder/models/VizLayer',[], 
function(){
// @formatter:on

    var VizLayer = function(){
        
        this.__className = "sap.viz.controls.geo.models.VizLayer";
        
        this._feedItems = [];
    };
    
    VizLayer.prototype.feedItems = function(_){
         if( !arguments.length){
             return this._feedItems;
         }else{
             this._feedItems = _;
         }
        
    };
     
    return VizLayer;
});

// @formatter:off
define('sap/viz/controls/mapbuilder/widgets/WidgetESRIMapStyle',[
  "jquery",
  "sap/viz/controls/common/utils/OOUtil", 
  "sap/viz/controls/common/constants/CSSConst", 
  "sap/viz/controls/common/managers/LangManager",
  "sap/viz/controls/mapbuilder/widgets/WidgetBase",
  "sap/viz/controls/mapbuilder/widgets/WidgetTitle",
  "sap/viz/controls/mapbuilder/events/GeoEvent"
],
function($, OOUtil, CSSConst, LangManager,  WidgetBase, WidgetTitle, GeoEvent) {
    
    var ESRI_MAPS = [{
           name       : "VIZ_MAPBUILDER_ESRI_MAP_STYLE_MAP",
           type       : "topo"
        },{
           name       : "VIZ_MAPBUILDER_ESRI_MAP_STYLE_SATELLITE",
           type       : "satellite"
        },{
           name       : "VIZ_MAPBUILDER_ESRI_MAP_STYLE_TERRAIN",
           type       : "national-geographic"
        },{
           name       : "VIZ_MAPBUILDER_ESRI_MAP_STYLE_STREETS",
           type       : "streets"
        }
    ];
// @formatter:on
    /**
     *
     * @param {Object} div     container div
     * @param {Object} config  config
     *
     */
    var WidgetESRIMapStyle = function(div, config) {

        WidgetESRIMapStyle.superclass.constructor.apply(this, arguments);

        this.__className = "sap.viz.controls.geo.widgets.WidgetESRIMapStyle";

        this._creatControls();
    };

    OOUtil.extend(WidgetESRIMapStyle, WidgetBase);

    WidgetESRIMapStyle.prototype._creatControls = function() {

        var rootDiv$ = $(this._dom).addClass(CSSConst.MAPBUILDER_PREFIX + "map-styles");

        var title = new WidgetTitle(rootDiv$, {
            title : "STYLES"
        });

        var container = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "map-styles-container").appendTo(rootDiv$);
        for (var i = 0; i < ESRI_MAPS.length; i++) {

            var style = ESRI_MAPS[i];
            var style$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "map-style").appendTo(container);

            var title$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "map-style-title").appendTo(style$);
            title$.html(LangManager.get(style.name) + ": ");

            var image$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "map-style-esri-" + style.type).appendTo(style$);
            image$.addClass(CSSConst.MAPBUILDER_PREFIX + "map-style-esri-icon");
            image$.data("__basemapType", style.type);
            var _this = this;
            image$.on("click tap", function() {
                $("." + CSSConst.MAPBUILDER_PREFIX + "map-style-esri-icon").removeClass(CSSConst.MAPBUILDER_PREFIX + "map-style-esri-icon-selected");
                $(this).addClass(CSSConst.MAPBUILDER_PREFIX + "map-style-esri-icon-selected");
                _this._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_BASEMAP_TYPE, this, {
                    basemapType : $(this).data("__basemapType")
                }));
            });
        }
    };

    return WidgetESRIMapStyle;
});

// @formatter:off
define('sap/viz/controls/mapbuilder/sections/GeoBasemapLayerSection',[
  "jquery",
  "sap/viz/controls/common/utils/OOUtil",
  "sap/viz/controls/common/constants/CSSConst",
  "sap/viz/controls/common/managers/LangManager",
  "sap/viz/controls/mapbuilder/events/GeoEvent", 
  "sap/viz/controls/mapbuilder/sections/SectionBase",
  "sap/viz/controls/mapbuilder/widgets/WidgetTitle",
  "sap/viz/controls/mapbuilder/widgets/WidgetESRIMapStyle"
],
function($, OOUtil, CSSConst, LangManager, GeoEvent, SectionBase, WidgetTitle, WidgetESRIMapStyle) {
// @formatter:on

    var SELECTOR = "<select id=\"combobox\"><select>";

    //<option value=\"Navteq\">Navteq</option><option value=\"ESRI\">ESRI</option><option value=\"CVOM\">CVOM</option>
    /**
     *
     * @param {Object} div     container div
     * @param {Object} config  config
     *
     */
    var GeoBasemapLayerSection = function(div, config) {

        GeoBasemapLayerSection.superclass.constructor.apply(this, arguments);

        this.__className = "sap.viz.controls.geo.sections.GeoBasemapLayerSection";

        this._config = config;

        this._providers = this._config.providers;
        this._changable = this._config.changable;

        this._$providerSelector = null;
        this._esriMapStyle = null;
        this._esriMapStyle$ = null;
    };

    OOUtil.extend(GeoBasemapLayerSection, SectionBase);

    GeoBasemapLayerSection.prototype._createChildControl = function($div) {

        var title = new WidgetTitle($div, {
            title : LangManager.get("VIZ_MAPBUILDER_MAP")
        });

        var provider$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "map-provider").appendTo($div);

        $(document.createElement("div")).html(LangManager.get("VIZ_MAPBUILDER_PROVIDERS")+ ":").addClass(CSSConst.MAPBUILDER_PREFIX + "section-sub-title-text").appendTo(provider$);

        this._$providerSelector = $(SELECTOR).appendTo(provider$);

        var defaultIdx = 0;

        for (var i = 0; i < this._providers.length; i++) {
            var option;
            if (this._config.defaultProvider == this._providers[i]) {
                option = "<option selected=\"selected\" value=\"" + this._providers[i] + "\">" + this._providers[i] + "</option>";
            } else {
                option = "<option value=\"" + this._providers[i] + "\">" + this._providers[i] + "</option>";
            }
            $(option).appendTo(this._$providerSelector);
        }

        this._esriMapStyle$ = $(document.createElement("div")).appendTo($div);
        this._esriMapStyle = new WidgetESRIMapStyle(this._esriMapStyle$);
        if (this._config.defaultProvider !== "ESRI") {
            this._esriMapStyle$.hide();
        }

    };

    GeoBasemapLayerSection.prototype._addEventHandler = function() {

        this._$providerSelector.change( function() {
            this._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_BASEMAP_PROVIDER, this, {
                basemapProvider : this._$providerSelector.val()
            }));
            if (this._$providerSelector.val() !== "ESRI") {
                this._esriMapStyle$.hide();
            } else {
                this._esriMapStyle$.show();
            }

        }.bind(this));

        this._esriMapStyle.addEventListener(GeoEvent.CHANGE_BASEMAP_TYPE, function(e) {
            this._dispatchEvent(e);
        }, this);
    };

    GeoBasemapLayerSection.prototype._createChildControlPanel = function($div) {

        this._createChildControl($div);
        this._addEventHandler();

    };

    return GeoBasemapLayerSection;
});

// @formatter:off
define('sap/viz/controls/mapbuilder/widgets/WidgetContextMenu',[
  "jquery",
  "sap/viz/controls/common/utils/OOUtil", 
  "sap/viz/controls/common/constants/CSSConst", 
  "sap/viz/controls/common/managers/LangManager",
  "sap/viz/controls/mapbuilder/widgets/WidgetBase",
  "sap/viz/controls/mapbuilder/events/GeoEvent"
],
function($, OOUtil, CSSConst, LangManager, WidgetBase, GeoEvent) {
// @formatter:on

    var MENU_DELETE = {
        iconClass : CSSConst.MAPBUILDER_PREFIX + "contextmenu-delete",
        actionType : GeoEvent.DELETE_LAYER,
        name : "VIZ_MAPBUILDER_DELETE"
    };

    var MENU_MOVEUP = {
            iconClass : CSSConst.MAPBUILDER_PREFIX + "contextmenu-moveup",
            actionType : GeoEvent.REORDER_LAYER,
            name : "VIZ_MAPBUILDER_MOVEUP"
        };

    var MENU_MOVEDOWN = {
        iconClass : CSSConst.MAPBUILDER_PREFIX + "contextmenu-movedown",
        actionType : GeoEvent.REORDER_LAYER,
        name : "VIZ_MAPBUILDER_MOVEDOWN"
    };

//    var MENU_SHOW_HIDE = {
//            iconClass : CSSConst.MAPBUILDER_PREFIX + "contextmenu-hide",
//            actionType : GeoEvent.HIDE_LAYER,
//            name : "VIZ_MAPBUILDER_HIDE"
//        };

//    var MENU_RENAME = {
//        iconClass : CSSConst.MAPBUILDER_PREFIX + "contextmenu-rename",
//        actionType : GeoEvent.RENAME_LAYER,
//        name : "VIZ_MAPBUILDER_RENAME"
//    };

    /**
     *
     * @param {Object} div     container div
     * @param {Object} config  config
     *
     */
    var WidgetContextMenu = function(div, config) {
        WidgetContextMenu.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.geo.widgets.WidgetContextMenu";
        this._menu$ = null;
        this._text$ = null;
        //this._input$ = null;
        this._buttonCancel$ = null;
        this._buttonOk$ = null;
        this._actionType = "";
        this._container$ = null;
        this._layerName = null;
        this._moveName = null;
        this._layerIndex = null;
        this._layerCount = null;
        this._instanceDom = null;
        this._beforeInstanceDom = null;
        this._afterInstanceDom = null;
        this._firstInstanceDom = null;
        this._showHideMenu = null;
        this._showHideMenuItem = null;
        this._actionContainer$ = null;
        this._warning$ = null;
        this._creatControls();
    };

    OOUtil.extend(WidgetContextMenu, WidgetBase);

    WidgetContextMenu.prototype._creatControls = function() {
        var rootDiv = $(document.createElement("div")).appendTo($(this._dom)).addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-container");
        this._container$ = rootDiv;
        var menu = document.createElement("ul");
        this._menu$ = $(menu).addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu");
        this._createMenuItem(this._menu$, MENU_MOVEUP);
        this._createMenuItem(this._menu$, MENU_MOVEDOWN);

        this._createMenuItem(this._menu$, MENU_DELETE);
        this._menu$.appendTo(rootDiv);
        this._actionContainer$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action-container").appendTo(rootDiv);
        this._warning$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action-warning").appendTo(this._actionContainer$);
        var action$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action-title").appendTo(this._actionContainer$);
        this._text$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action-name").appendTo(action$);
        //this._layerName$ = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action-layer-name").appendTo(action$);
        //this._input$ = $("<input type=\"text\" value=\"\"/>").addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-input");
        //this._input$.appendTo(rootDiv);
        var buttonContainer = $(document.createElement("div")).addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action").appendTo(rootDiv);
        this._buttonCancel$ = $("<button type=\"button\"></button>").addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action-cancel")
                            .appendTo(buttonContainer);
        this._buttonOk$ = $("<button type=\"button\"></button>").addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action-button")
                            .addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-action-ok").appendTo(buttonContainer);
        this._actionContainer$.hide();
        this._text$.hide();
        //this._layerName$.hide();
        //this._input$.hide();
        this._buttonCancel$.hide();
        this._buttonOk$.hide();
        this._warning$.hide();
        this._buttonOk$.click( function() {
            if (this._actionType == GeoEvent.DELETE_LAYER) {
                this._dispatchEvent(new GeoEvent(GeoEvent.DELETE_LAYER, this));
            }
            this._close();
        }.bind(this));
        this._buttonCancel$.click( function() {
            this._close();
        }.bind(this));
    };

    WidgetContextMenu.prototype._createMenuItem = function(menu$, menuItem) {
        var menuItem$ = $(document.createElement("li")).addClass(CSSConst.MAPBUILDER_PREFIX + "menuitem");
        $(document.createElement("div")).appendTo(menuItem$).addClass(menuItem.iconClass);
        var menuText$ = $(document.createElement("div")).appendTo(menuItem$).addClass(CSSConst.MAPBUILDER_PREFIX + "menutext");
//        if(menuItem == MENU_SHOW_HIDE)
//        {
//            this._showHideMenu = menuText$;
//            this._showHideMenuItem = menuItem$;
//        }
        menuText$.text(LangManager.get(menuItem.name));                                         

        menuItem$.appendTo(menu$);
        menuItem$.data("actionType", menuItem.actionType);
        menuItem$.click($.proxy(this._clickHanlder, this));
    };

    WidgetContextMenu.prototype._clickHanlder = function(event) {
        var _that = this;
        this._actionType = $(event.currentTarget).data('actionType');
        this._moveName = event.currentTarget.children[1].innerText;
        this._menu$.hide();
        //this._layerName$.hide();
        this._actionContainer$.show();
        this._warning$.hide();
        this._text$.show();
        if (this._actionType === GeoEvent.DELETE_LAYER) {
            this._warning$.show();
            this._text$.html(LangManager.get('VIZ_MAPBUILDER_DELETE_GEO_LAYER') + "?");
            //this._layerName$.show();
            //this._layerName$.html("\"" + this._layerName + "\"?");
            //this._buttonOk$.text(LangManager.get("VIZ_MAPBUILDER_DELETE"));
            this._buttonCancel$.show();
            this._buttonOk$.show();
            this._container$.removeClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-container");
            this._container$.addClass(CSSConst.MAPBUILDER_PREFIX + "configmenu-container");
            var root$ = $(this._dom);
            root$.css({
                top : this._container$.offset().top,
                left : this._container$.offset().left - 35,
                position : "absolute"
            });
        } else if (this._actionType === GeoEvent.REORDER_LAYER) {
            var fromIdx = this._layerIndex;
            var toIdx;
            if(this._moveName === LangManager.get('VIZ_MAPBUILDER_MOVEUP')) {
                toIdx = fromIdx + 1;
                this._instanceDom.insertBefore(this._beforeInstanceDom);
            } else if(this._moveName === LangManager.get('VIZ_MAPBUILDER_MOVEDOWN')) {
                toIdx = fromIdx - 1;
                this._instanceDom.insertAfter(this._afterInstanceDom);
            }
            this._dispatchEvent(new GeoEvent(GeoEvent.REORDER_LAYER, this, {
                from : fromIdx,
                to : toIdx
            }));

//            }
            //this._instanceDom.insertBefore(this._beforeInstanceDom);
            this._close();
        }
    };

    WidgetContextMenu.prototype._mouseDownHandler = function(event) {
        if (!$.contains(this._dom, event.srcElement)) {
            this._close();
        }
    };

    /**
     *  show context menu
     */
    WidgetContextMenu.prototype.show = function(offset) {
        var root$ = $(this._dom);
        root$.css({
            top : offset.top,
            left : offset.left + 85,
            position : "absolute"

        });
        root$.appendTo($("body"));
        if(this._layerCount > 0) {
        if(this._layerCount === 1) {
            this._menu$[0].style.display = "block";
            this._menu$[0].children[0].style.display = "none";
            this._menu$[0].children[1].style.display = "none";
            this._menu$[0].children[2].style.display = "block";
        } else if(this._layerCount > 1 && this._layerIndex === this._layerCount -1) {
            this._menu$[0].style.display = "block";
            this._menu$[0].children[0].style.display = "none";
            this._menu$[0].children[1].style.display = "block";
            this._menu$[0].children[2].style.display = "block";
        } else if(this._layerCount > 1 && this._layerIndex === 0) {
            this._menu$[0].style.display = "block";
            this._menu$[0].children[0].style.display = "block";
            this._menu$[0].children[1].style.display = "none";
            this._menu$[0].children[2].style.display = "block";
        } else {
            this._menu$[0].style.display = "block";
            this._menu$[0].children[0].style.display = "block";
            this._menu$[0].children[1].style.display = "block";
            this._menu$[0].children[2].style.display = "block";
        }
        }
        this._text$.hide();
        //this._input$.hide();
        this._buttonCancel$.hide();
        this._buttonOk$.hide();
        this._warning$.hide();
        this._actionContainer$.hide();
        //this._layerName$.hide();
        document.addEventListener("mousedown", $.proxy(this._mouseDownHandler, this), true);
        $(window).on('blur', $.proxy(this._mouseDownHandler, this));
        this._container$.removeClass(CSSConst.MAPBUILDER_PREFIX + "configmenu-container");
        this._container$.addClass(CSSConst.MAPBUILDER_PREFIX + "contextmenu-container");
    };
    WidgetContextMenu.prototype._close = function() {
        $(this._dom).detach();
        document.removeEventListener("mousedown", $.proxy(this._mouseDownHandler, this), true);
        $(window).off('blur', $.proxy(this._mouseDownHandler, this));
    };
//    WidgetContextMenu.prototype.setLayerName = function(_) {
//        //use to show layer name when delete
//        this._layerName = _;
//    };
    WidgetContextMenu.prototype.setLayerIdx = function(_) {
        this._layerIndex = _;
    };
    WidgetContextMenu.prototype.setLayerCount = function(_) {
        this._layerCount = _;
    };
    WidgetContextMenu.prototype.setInstanceDom = function(_) {
        this._instanceDom = _;
    };
    WidgetContextMenu.prototype.setBeforeInstanceDom = function(_) {
        this._beforeInstanceDom = _;
    };
    WidgetContextMenu.prototype.setAfterInstanceDom = function(_) {
        this._afterInstanceDom = _;
    };
    WidgetContextMenu.prototype.setFirstInstanceDom = function(_) {
        this._firstInstanceDom = _;
    };
//    WidgetContextMenu.prototype.setShowHideAction = function(_) {
//        MENU_SHOW_HIDE.actionType = _;
//    };
//    WidgetContextMenu.prototype.setShowHideName = function(_) {
//        MENU_SHOW_HIDE.name = _;
    //};
    return WidgetContextMenu;
});
/**
 * Class Geo Map Builder
 */
// @formatter:off
define('sap/viz/controls/mapbuilder/MapBuilder',[
    "jquery",
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/constants/CSSConst',
    "sap/viz/controls/mapbuilder/constants/Const",
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/mapbuilder/MapBuilderConfig',
    'sap/viz/controls/mapbuilder/sections/SectionBase',
    'sap/viz/controls/mapbuilder/sections/GeoVizLayerSection',
    'sap/viz/controls/mapbuilder/models/Analysis',
    'sap/viz/controls/mapbuilder/models/VizLayer',
    'sap/viz/controls/common/views/feed/FeedingShelfEvent',
    'sap/viz/controls/mapbuilder/sections/GeoBasemapLayerSection',
    'sap/viz/controls/mapbuilder/events/GeoEvent',
    'sap/viz/controls/mapbuilder/widgets/WidgetContextMenu'
],
function($, OOUtil, UIControl, VizControlBase, FeedItem, FeedItemType, CSSConst, Const, LangManager, ChartTypeUtil, MapBuilderConfig, Section,
    GeoVizLayerSection, Analysis, VizLayer, FeedingShelfEvent, GeoBasemapLayerSection, GeoEvent,
    ContextMenu) {
// @formatter:on
    var reorderArray = function(array, from, to) {
        array.splice(to, 0, array.splice(from, 1)[0]);
    };

    /**
     * The MapBuilder class is a control to build geo map.
     * @class sap.viz.controls.mapbuilder.MapBuilder
     * @see {@link sap.viz.controls.common.VizControlBase}
     * @param {HTMLElement}      dom                            element to contain the control
     * @param {JSON}             [config]                     configuration for initialization to map builder
     * @param {array}            config.layers                <br>configuration for layers</br><br>array of layer json
     * object format as below<br>
     * @param {string}           config.layers.vizType        <br>viz type of layer, could be<br>
     * <ul><li>"choropleth"</li><li>"marker"</li><li>"bubble"</li><ul>
     * @param {array}            config.layers.feeding        array of {@link sap.vizs.controls.common.feeds.FeedItem}
     * @param {string}           config.layers.title          title of layer
     * @param {JSON}             config.basemap               configuration of basemap
     * @param {array}            config.basemap.providers     providers list which will show in the provider selector
     * <br>could contains: "ESRI", "CVOM", "NAVTEQ"<br>
     * @param {boolean}          config.basemap.changeable    could change base map type in the provider selector
     * @param {string}           config.basemap.selected      default selected provider
     */

    var MapBuilder = function(div, uiConfig) {
        MapBuilder.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.geo.MapBuilder";

        this._uiConfig = uiConfig;
        this._feedMap = !this._uiConfig.feedMap ? {} : this._uiConfig.feedMap;
        this._$mapBuilder = null;
        this._$controller = null;

        this._$header = null;
        this._$headerPlus = null;
        this._$headerText = null;
        this._vizSectionsContainer = null;
        this._vizSections = [];
        this._vizLayers = [];

        this._baseMapSection = null;

        this._contextMenu = null;

        this._$footer = null;
        this._$footerText = null;
        
        this._createChildren();

        this._currentSettingLayer = -1;
        
        this._loadConfig();
    };

    /**
     * Dispatch updateLayerData event after feeding changed when dragging dimension or measure to the feed item
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#updateLayerData
     * @param          {object}      event                    event object which will pass to listener as first parameter
     * @param          {object}      event.data               event data
     * @param          {number}      event.data.layerIdx      layer index whose feeding is changed
     * @param          {array}       event.data.feedItems     feedItems {@link sap.vizs.controls.common.feeds.FeedItem}
     */

    /**
     * Dispatch showLayer event after checking the check box in the section header
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#showLayer
     * @param          {object}      event                    event object which will pass to listener as first parameter
     * @param          {object}      event.data               event data
     * @param          {number}      event.data.layerIdx      layer index whose feeding is changed
     */

    /**
     * Dispatch hideLayer event after unchecking the check box in the section header
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#hideLayer
     * @param          {object}      event                    event object which will pass to listener as first parameter
     * @param          {object}      event.data               event data
     * @param          {number}      event.data.layerIdx      layer index whose feeding is changed
     */

    /**
     * Dispatch deleteLayer event after choosing to delete layer
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#deleteLayer
     * @param          {object}      event                    event object which will pass to listener as first parameter
     * @param          {object}      event.data               event data
     * @param          {number}      event.data.layerIdx      layer index whose feeding is changed
     */

    /**
     * Dispatch reorderLayer event after reordering the layer by dragging section
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#reorderLayer
     * @param          {object}      event                    event object which will pass to listener as first parameter
     * @param          {object}      event.data               event data
     * @param          {number}      event.data.from          layer index indicate the original layer index before
     * reorder
     * @param          {number}      event.data.to            layer index indicate the new layer index after reorder
     */

    /**
     * Dispatch changeLayerVizType event after choosing to different viz type
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#changeLayerVizType
     * @param          {object}      event                    event object which will pass to listener as first parameter
     * @param          {object}      event.data               event data
     * @param          {number}      event.data.layerIdx      layer index whose viz type is changed
     * @param          {string}      event.data.vizType       <br> new viz type of layer, could be<br>
     * <ul><li>"choropleth"</li><li>"marker"</li><li>"bubble"</li><ul>
     */

    /**
     * Dispatch changeBasemapProvider event after choosing to different provider
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#changeBasemapProvider
     * @param          {object}      event                        event object which will pass to listener as first
     * parameter
     * @param          {object}      event.data                   event data
     * @param          {string}      event.data.basemapProvider   base map provider name which is equal to the selector
     */

    /**
     * Dispatch showLegend event after checking to show legend
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#showLegend
     * @param          {object}      event                        event object which will pass to listener as first
     * parameter
     * @param          {object}      event.data                   event data
     * @param          {string}      event.data.layerIdx          layer index
     */

    /**
     * Dispatch hideLegend event after choosing to hide legend
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#hideLegend
     * @param          {object}      event                        event object which will pass to listener as first
     * parameter
     * @param          {object}      event.data                   event data
     * @param          {string}      event.data.layerIdx          layer index
     */

    /**
     * Dispatch changeBaseMapType event after choosing to different base map type
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#changeBaseMapType
     * @param          {object}      event                        event object which will pass to listener as first
     * parameter
     * @param          {object}      event.data                   event data
     * @param          {string}      event.data.basemapType       base map type which will be available for online map
     * provider like ESRI
     */

    /**
     * Dispatch changeVizProperties event after changing the properties
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#changeVizProperties
     * @param          {object}      event                          event object which will pass to listener as first
     * parameter
     * @param          {object}      event.data                     event data
     * @param          {string}      event.data.layerIdx            layer index
     * @param          {string}      event.data.id                  property id
     * @param          {boolean}     [event.data.id.cluster]        cluster or not
     */

    /**
     * Dispatch addLayer event after one layer is added by clicking "add new layer"
     * @ignore
     * @event sap.viz.controls.mapbuilder.MapBuilder#addLayer
     * @param          {object}      event                          event object which will pass to listener as first
     * parameter
     * @param          {object}      event.data                     event data
     * @param          {string}      event.data.layerIdx            new layer index
     */
    OOUtil.extend(MapBuilder, VizControlBase);

    /**
     * configure single layer
     * @ignore
     * @method sap.viz.controls.mapbuilder.MapBuilder.prototype.config
     * @param {JSON}       config                                layer configuration
     * @param {string}     config.vizType                        <br>viz type of layer, could be<br>
     * <ul><li>"choropleth"</li><li>"marker"</li><li>"bubble"</li><ul>
     * @param {array}      config.feeding                        array of {@link sap.vizs.controls.common.feeds.FeedItem}
     * @param {string}     config.title                          title of layer
     * @param {JSON}       config.properites                     properties of layer
     * @param {boolean}    config.properites.legendVisible       show legend or not
     * @param {boolean}    config.properites.cluster             cluster data point or not
     * @param {number}     layerIdx                              layer index
     */
    MapBuilder.prototype.config = function(config, layerIdx) {
        this._vizSections[layerIdx].update(config);
    };

    MapBuilder.prototype._createHeader = function() {
        this._$header = $("<div/>").appendTo(this._$controller).addClass(CSSConst.MAPBUILDER_PREFIX + "header");
        this._$headerPlus = $("<div></div>").appendTo(this._$header).addClass(CSSConst.MAPBUILDER_PREFIX + "header-plus");
        this._$headerText = $("<div></div>").appendTo(this._$header).addClass(CSSConst.MAPBUILDER_PREFIX + "header-text").html(LangManager.get("VIZ_MAPBUILDER_ADD_NEW_LAYER"));
        
        this._$headerPlus.bind('tap click', this._addHeaderEventHandler.bind(this));
        this._$headerText.bind('tap click', this._addHeaderEventHandler.bind(this));
    };
    
    MapBuilder.prototype._createFooter = function() {
      this._$footer = $("<div/>").appendTo(this._$controller).addClass(CSSConst.MAPBUILDER_PREFIX + "footer");

      this._$footerText = $("<div></div>").appendTo(this._$footer).addClass(CSSConst.MAPBUILDER_PREFIX + "footer-text").html(LangManager.get("VIZ_MAPBUILDER_IMPORT_ESRI_CUSTOM_SERVICE"));
      this._$footerRadio = $(document.createElement("input")).attr("type", "checkbox").addClass(CSSConst.MAPBUILDER_PREFIX + "footer-radio").appendTo(this._$footer).on("click tap", function(){
         if(this._$footerRadio.prop("checked")){
           this._$footerRadioText.removeClass('disable');
           this._notifyModelChange({
             mapBuilder : {
                 mapservice : {
                     action : 'enable'
                 }
             }
           });
         }else{
           this._$footerRadioText.addClass('disable');
           this._notifyModelChange({
             mapBuilder : {
                 mapservice : {
                     action : 'disable'
                 }
             }
           });
         }
       
    }.bind(this));
      this._$footerRadio.hide();
      this._$footerRadioText = $("<div></div").html(LangManager.get("VIZ_MAPBUILDER_ESRI_CUSTOM_SERVICE")).addClass(CSSConst.MAPBUILDER_PREFIX + "footer-radio-text").appendTo(this._$footer);
      this._$footerRadioText.hide();
      
      this._$footerText.bind('tap click', this._footerClickEventHandler.bind(this));
      this._$footerRadioText.bind('tap click', this._footerClickTextEventHandler.bind(this));
  };

    MapBuilder.prototype._addHeaderEventHandler = function(e) {
        if(this._vizLayers.length >= 5) {
            this._$header.disabled = true;
            this._$headerPlus.removeClass(CSSConst.MAPBUILDER_PREFIX + "header-plus");
            this._$headerPlus.addClass(CSSConst.MAPBUILDER_PREFIX + "disable-header-plus");
            this._$headerText.css("color","#a6a6a6");
        } else if(this._vizLayers.length < 5) {
            this._$header.disabled = false;
            this._$headerText.css("color","#008fd3");
            this._$headerPlus.removeClass(CSSConst.MAPBUILDER_PREFIX + "disable-header-plus");
            this._$headerPlus.addClass(CSSConst.MAPBUILDER_PREFIX + "header-plus");
            if(this._vizLayers.length === 4) {
                this._addVizSection();
                this._$header.disabled = true;
                this._$headerPlus.removeClass(CSSConst.MAPBUILDER_PREFIX + "header-plus");
                this._$headerPlus.addClass(CSSConst.MAPBUILDER_PREFIX + "disable-header-plus");
                this._$headerText.css("color","#a6a6a6");
            } else {
                this._addVizSection();
            }
            e.stopPropagation();
            e.preventDefault();
      }
    };
    
    MapBuilder.prototype._footerClickEventHandler = function(e) {      
      this._notifyModelChange({
        mapBuilder : {
            mapservice : {
                action : 'choose'
            }
        }
      });
    }
    
    MapBuilder.prototype._footerClickTextEventHandler = function(e) {     
      if(this._$footerRadio.prop("checked")){
        this._notifyModelChange({
          mapBuilder : {
              mapservice : {
                  action : 'choose'
              }
          }
        });
      }
    }
    
    MapBuilder.prototype._hide = function(){
        this._$mapBuilder.hide();
    }
    
    MapBuilder.prototype._show = function(){
        this._$mapBuilder.show()
    }

    /**
     * reset map builder to initial status
     * @method sap.viz.controls.mapbuilder.MapBuilder.prototype.reset
     */
    MapBuilder.prototype.reset = function(){

      for(var i = 0; i < this._vizSections.length; i++){
          this._vizSections[i].destroy();
      }

      this._vizSections.length = 0;
      this._vizLayers.length = 0;
    };

    MapBuilder.prototype._createChildren = function() {

        var builder$ = $("<div/>").appendTo(this._dom).addClass(CSSConst.PREFIX + "mapbuilder");

        this._$controller = $("<div/>").appendTo(builder$).addClass(CSSConst.MAPBUILDER_PREFIX + "area");

        this._createHeader();
        
        this._createFooter();
        
        var sectionsContainer = document.createElement('div');

        $(sectionsContainer).addClass(CSSConst.MAPBUILDER_PREFIX + "section-container");

        var basesectionLayer = document.createElement('div');

        this._vizSectionsContainer = document.createElement('div');
        if (this._uiConfig.showBaseMap) {
            this._baseMapSection = new GeoBasemapLayerSection(basesectionLayer, {
                title : LangManager.get('VIZ_MAPBUILDER_BASE_MAP_NAME'),
                providers : this._uiConfig.basemap.providers,
                changeable : this._uiConfig.basemap.changable,
                checkable : false,
                sortable : false,
                configable : false,
                defaultProvider : this._uiConfig.basemap.selected
            });
            this._baseMapSection.addEventListener(GeoEvent.CHANGE_BASEMAP_PROVIDER, function(event) {
                this._dispatchEvent(event);
            }, this);

            this._baseMapSection.addEventListener(GeoEvent.CHANGE_BASEMAP_TYPE, function(event) {
                this._dispatchEvent(event);
            }, this);
        }

        sectionsContainer.appendChild(this._vizSectionsContainer);

        sectionsContainer.appendChild(basesectionLayer);

        $(sectionsContainer).appendTo(this._$controller);

        this._contextMenu = new ContextMenu(document.createElement("div"), {});

        this._contextMenu.addEventListener(GeoEvent.DELETE_LAYER, function(e) {
            this._removeLayer(this._currentSettingLayer);
        }, this);

        this._contextMenu.addEventListener(GeoEvent.REORDER_LAYER, function(e) {
            this._reorderLayer(e.data.from, e.data.to);
        }, this);

        this._$mapBuilder= builder$;
        
        this._hide();
        //        this._contextMenu.addEventListener(GeoEvent.RENAME_LAYER, function(e) {
        //            this._renameLayer(this._currentSettingLayer, e.data.layerName);
        //        }, this);
    };

    MapBuilder.prototype._loadConfig = function() {
        var layers = this._uiConfig.layers;
        if (layers) {
            for (var i = 0; i < layers.length; i++) {
                var layer = layers[i];
                var section = this._createVizLayerSection({
                    vizType : layer.vizType,
                    feeding : layer.feeding,
                    title : layer.title,
                    showLegend : this._uiConfig.showLegend
                });
            }
        }
    };

    /**
     * save map builder, return an array of json values
     * @method sap.viz.controls.mapbuilder.MapBuilder.prototype.save
     */
    MapBuilder.prototype.save = function() {
      var retJsons = [];
      for (var i = 0; i < this._vizSections.length; i++) {
          var vizSection = this._vizSections[i];
          if(vizSection) {
              var sectionValue = vizSection.save();
              retJsons.push(sectionValue);
          }
      }
      return retJsons;
  };

  /**
   * load layer after save
   * @method sap.viz.controls.mapbuilder.MapBuilder.prototype.load
   * @param {array}      retJsons                               array of layers configuration
   * @param {string}     retJsons[].vizType                      <br>viz type of layer, could be<br>
   * <ul><li>"choropleth"</li><li>"marker"</li><li>"bubble"</li><ul>
   * @param {array}      retJsons[].feeding                     array of {@link sap.vizs.controls.common.feeds.FeedItem}
   * @param {string}     retJsons[].title                       title of layer
   * @param {boolean}    retJsons[].showLegend                  show legend or not
   * @param {boolean}    retJsons[].showIconDom                 show title icon or not
   * @param {boolean}    retJsons[].clusterChecked              cluster data point or not
   * @param {string}     retJsons[].titleText                   data point type text, could be<br>
   * <ul><li>"choropleth"</li><li>"marker"</li><li>"bubble"</li><ul>
   * @param {boolean}    retJsons[].sortable                    layer section can be sort or not
   * @param {boolean}    retJsons[].expand                      layer section can be expand or not
   * @param {boolean}    retJsons[].configable                  layer section can be config or not
   * @param {boolean}    retJsons[].checkable                   show/hide layer check box can be checked or not
   * @param {boolean}    retJsons[].checked                     show/hide layer check box checked or not
   */
  MapBuilder.prototype.load = function(retJsons) {
      if(!retJsons){
          return;
      }
      this.reset();
      for(var i = 0; i< retJsons.length; i++) {
            var sectionValue = retJsons[i];
            var feedItems = [];
            for(var j = 0; j< sectionValue.feeding.feeding.length; j++) {
                feedItems[j] = FeedItem.fromJSON(sectionValue.feeding.feeding[j]);
            }
            var sectionLayer = this._createVizLayerSection({
                               feedMap: sectionValue.feedMap,
                               vizType : sectionValue.vizType,
                               feeding : feedItems,
                               title : sectionValue.title,
                               checkable: sectionValue.checkable,
                               configable: sectionValue.configable,
                               sortable: sectionValue.sortable,
                               showLegend: sectionValue.showLegend
          });
          if(sectionValue.showIconDom) {
              sectionLayer.showIcon(true);
              if(sectionValue.vizType === Const.VIZ_TYPE_CHOROPLETH) {
                  sectionLayer._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-marker");
                  sectionLayer._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-bubble");
                  sectionLayer._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-choropleth");
              } else if(sectionValue.vizType === Const.VIZ_TYPE_BUBBLE) {
                  sectionLayer._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-marker");
                  sectionLayer._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-choropleth");
                  sectionLayer._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-bubble");
              } else if(sectionValue.vizType === Const.VIZ_TYPE_MARKER) {
                  sectionLayer._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-bubble");
                  sectionLayer._iconDom.removeClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-choropleth");
                  sectionLayer._iconDom.addClass(CSSConst.MAPBUILDER_PREFIX + "section-icon-marker");
              }
          }
          sectionLayer._lableText.text(sectionValue.titleText);
          sectionLayer._lableTitleText = sectionValue.titleText;
          if(!sectionValue.checked){
              sectionLayer._checkBoxDom.checked = sectionValue.checked;
              sectionLayer._isChecked = sectionValue.checked;
              $(sectionLayer._labelDom).css("color","#a6a6a6");
          }
          if(!sectionValue.expand) {
              sectionLayer._isExpand = sectionValue.expand;
          }
          if(sectionValue.clusterChecked) {
              sectionLayer._clusterChecked = true;
              if(sectionValue.vizType === Const.VIZ_TYPE_MARKER) {
                  sectionLayer._properties._settings$.markerCluster[0].checked = true;
              } else {
                  sectionLayer._properties._settings$.bubbleCluster[0].checked = true;
              }
          }
      }
      if(retJsons.length >= 5) {
          this._$header.disabled = true;
          this._$headerPlus.removeClass(CSSConst.MAPBUILDER_PREFIX + "header-plus");
          this._$headerPlus.addClass(CSSConst.MAPBUILDER_PREFIX + "disable-header-plus");
          this._$headerText.css("color","#a6a6a6");
      }
      for(var j = 0; j< retJsons.length; j++) {
          if(retJsons[j].expand && retJsons[j].checked) {
              this._vizSections[j]._expandSectionHandler();
          } else {
                  this._vizSections[j]._hideSectionHandler();
          }
      }
  };

    MapBuilder.prototype._getLayerCount = function() {
        return this._vizLayers.length;
    };

    MapBuilder.prototype._createVizLayerSection = function(config) {
        var vizSection = new GeoVizLayerSection(this._vizSectionsContainer, {
            feedMap : this._feedMap,
            title : config.title,
            checkable : config.checkable ? config.checkable : true,
            configable : config.configable ? config.configable : true,
            sortable : config.sortable ? config.sortable : true,
            vizType : config.vizType,
            feeding : config.feeding,
            showLegend : config.showLegend,
            feedingPanel: this._uiConfig.feedingPanel
        });
        vizSection._analysisObjectsForPicker(this._allAnalyses);
        vizSection._expandSectionHandler();
        if(vizSection._sortable) {
            $(vizSection._instanceDom).sortable("disable");
        }
        vizSection.addEventListener(FeedingShelfEvent.FEEDING_CHANGED, function(event) {
            this._layerFeedChange(this._getLayerIdxBySectionIdx(event.data.sectionIdx));
        }, this);

        vizSection.addEventListener(GeoEvent.ACTION_CHANGED, function(e) {
          this._dispatchEvent(new GeoEvent(GeoEvent.ACTION_CHANGED, this, {
              feedItemID : e.data.feedItemID,
              analysisObjectID : e.data.analysisObjectID,
              actionID : e.data.actionID,
              layerIdx : this._getLayerIdxBySectionIdx(e.data.sectionIdx)
          }));
        }, this);
        
        vizSection.addEventListener(GeoEvent.EXPAND_SECTION, function(event) {
            var layerIdx = this._getLayerIdxBySectionIdx(event.data.sectionIdx);
            this._dispatchEvent(new GeoEvent(GeoEvent.EXPAND_SECTION, this, {
                layerIdx : layerIdx
            }));
            if (this._vizSections.length >= 1) {
                for (var i = 0; i < this._vizSections.length; i++) {
                    if (i === layerIdx && !(vizSection._isExpand) && vizSection._isChecked) {
                        this._vizSections[i]._expandSectionHandler();
                    } else {
                        if(vizSection._isChecked) {
                            this._vizSections[i]._hideSectionHandler();
                        }
                    }
                    if(this._vizSections[i]._sortable) {
                        $(this._vizSections[i]._instanceDom).sortable("disable");
                    }
                }
            }
       }, this);

        vizSection.addEventListener(GeoEvent.HIDE_SECTION, function(event) {
            var layerIdx = this._getLayerIdxBySectionIdx(event.data.sectionIdx);
            this._dispatchEvent(new GeoEvent(GeoEvent.HIDE_SECTION, this, {
                layerIdx : layerIdx
            }));
            if (this._vizSections.length >= 1) {
                for (var i = 0; i < this._vizSections.length; i++) {
                    if (i === layerIdx && vizSection._isExpand) {
                        this._vizSections[i]._hideSectionHandler();
                    }
                    if(this._vizSections[i]._sortable) {
                        $(this._vizSections[i]._instanceDom).sortable("enable");
                    }
                }
            }
       }, this);

        vizSection.addEventListener(GeoEvent.SHOW_LAYER, function(event) {
            var layerIdx = this._getLayerIdxBySectionIdx(event.data.sectionIdx);
            this._notifyModelChange({
                mapBuilder : {
                               layer : {
                               action : 'show',
                               idx : layerIdx
                            }
                }
            });
            this._dispatchEvent(new GeoEvent(GeoEvent.SHOW_LAYER, this, {
                layerIdx : layerIdx
            }));
            if(vizSection._isChecked) {
                $(vizSection._labelDom).css("color","#333333");
                for (var i = 0; i < this._vizSections.length; i++) {
                    if (i === layerIdx && vizSection._isChecked) {
                        this._vizSections[i]._expandSectionHandler();
                    } else {
                        this._vizSections[i]._hideSectionHandler();
                    }
                    if(this._vizSections[i]._sortable) {
                        $(this._vizSections[i]._instanceDom).sortable("disable");
                    }
                }
            }
       }, this);

       vizSection.addEventListener(GeoEvent.HIDE_LAYER, function(event) {
           var layerIdx = this._getLayerIdxBySectionIdx(event.data.sectionIdx);

           this._notifyModelChange({
               mapBuilder : {
                            layer : {
                                action : 'hide',
                                idx : layerIdx
                            }
                            }
           });
           this._dispatchEvent(new GeoEvent(GeoEvent.HIDE_LAYER, this, {
                layerIdx : layerIdx
           }));
           if(!vizSection._isChecked) {
               $(vizSection._labelDom).css("color","#a6a6a6");
               vizSection._hideSectionHandler();
               $(vizSection._instanceDom).sortable("enable");
           }
        }, this);

        vizSection.addEventListener(GeoEvent.DISPLAY_SETTINGMENU, function(event) {
            this._displaySettingMenu(this._getLayerIdxBySectionIdx(event.data.sectionIdx), event.data.position);
        }, this);

        vizSection.addEventListener(GeoEvent.REORDER_LAYER, function(event) {
            this._reorderLayer(this._getLayerIdxBySectionIdx(event.data.from), this._getLayerIdxBySectionIdx(event.data.to));
        }, this);

        vizSection.addEventListener(GeoEvent.CHANGE_LAYER_VIZTYPE, function(e) {
            var layerIdx = this._getLayerIdxBySectionIdx(e.data.sectionIdx);
            var vizType = e.data.vizType;
            var feeding = e.data.feeding;

            this._notifyModelChange({
                mapBuilder : {
                    layer : {
                        action : 'changeVizType',
                        idx : layerIdx,
                        vizType : vizType,
                        feeding: feeding
                    }
                }
            });

            this._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_LAYER_VIZTYPE, this, {
                layerIdx : layerIdx,
                vizType : vizType,
                feeding: feeding
            }));
        }, this);

        //        vizSection.addEventListener(GeoEvent.SHOW_LEGEND, function(e) {
        //            this._dispatchEvent(new GeoEvent(GeoEvent.SHOW_LEGEND, this, {
        //                layerIdx : this._getLayerIdxBySectionIdx(e.data.sectionIdx)
        //            }));
        //        }, this);
        //
        //        vizSection.addEventListener(GeoEvent.HIDE_LEGEND, function(e) {
        //            this._dispatchEvent(new GeoEvent(GeoEvent.HIDE_LEGEND, this, {
        //                layerIdx : this._getLayerIdxBySectionIdx(e.data.sectionIdx)
        //            }));
        //        }, this);

        vizSection.addEventListener(GeoEvent.CHANGE_VIZ_PROPERITIES, function(e) {
            var layerIdx = this._getLayerIdxBySectionIdx(e.data.sectionIdx);
            var propKey = e.data.id;
            var propValue = e.data.value;

            this._notifyModelChange({
                mapBuilder : {
                    layer : {
                        action : 'changeProperties',
                        idx : layerIdx,
                        propKey : propKey,
                        propValue : propValue
                    }
                }
            });

            this._dispatchEvent(new GeoEvent(GeoEvent.CHANGE_VIZ_PROPERITIES, this, {
                layerIdx : layerIdx,
                id : propKey,
                value : propValue
            }));
        }, this);

        this._vizSections.push(vizSection);
        if (this._vizSections.length > 1) {
            for (var i = 0; i < this._vizSections.length; i++) {
                if (i === this._vizSections.length - 1) {
                    this._vizSections[i]._expandSectionHandler();
                } else {
                    this._vizSections[i]._hideSectionHandler();
                }
            }
        }

        if (config.title) {
            vizSection.title(config.title, true);
        } else {
            var vizIdx = this._vizSections.length;
            //vizSection.title(LangManager.get("VIZ_MAPBUILDER_VIZ_LAYER_NAME") + " " + vizIdx, false);
        }

        this._vizLayers.push(new VizLayer());

        return vizSection;
    };

    MapBuilder.prototype._addVizSection = function() {

        var section  = this._createVizLayerSection({
            showLegend : this._uiConfig.showLegend
        });
        
        this._notifyModelChange({
          mapBuilder : {
              layer : {
                  action : 'add',
                  feeds: section.getFeeds()
              }
          }
        });
        
        this._dispatchEvent(new GeoEvent(GeoEvent.ADD_LAYER, this, {
            layerIdx : this._vizSections.length - 1
        }));
    };

    MapBuilder.prototype._getLayerIdxBySectionIdx = function(sectionIdx) {

        return this._vizSections.length - sectionIdx - 1;
    };

    MapBuilder.prototype._createAnalysis = function(id, name, type) {
        var analysis = new Analysis();
        analysis.id = id;
        analysis.name = name;
        analysis.type = type;

        this._feedMap[id] = analysis;
        return analysis;
    };

    MapBuilder.prototype._layerFeedChange = function(layerIdx) {

        var layer = this._vizLayers[layerIdx];
        var section = this._vizSections[layerIdx];
        var vizType = section._vizType;
        var feedItems = section.getFeeds();

        layer.feedItems(feedItems);

        //Change section title
        var name, location, color, size, colorAnalysisType;
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];

            for (var j = 0; j < feedItem.values().length; j++) {

                name = feedItem.values()[j].name();
                if (feedItem.id() === "location") {
                    location = name;
                } else if (feedItem.id() === "color") {
                    color = name;
                    colorAnalysisType = feedItem.type();
                } else if (feedItem.id() === "size") {
                    size = name;
                }
            }
        }

        if(vizType === Const.VIZ_TYPE_CHOROPLETH) {
            section.title("", false);
            section.showIcon(false);
            if (location != undefined) {
                if(color != undefined && colorAnalysisType === FeedItemType.MEASURE) {
                    section.title(color, false);
                } else {
                    section.title(location, false);
                }
                section.showIcon(true);
            }
        } else if(vizType === Const.VIZ_TYPE_BUBBLE) {
            section.title("", false);
            section.showIcon(false);
            if (location != undefined) {
                if(size != undefined) {
                    section.title(size, false);
                } else {
                    section.title(location, false);
                }
                section.showIcon(true);
            }
        } else if(vizType === Const.VIZ_TYPE_MARKER) {
            section.title("", false);
            section.showIcon(false);
            if (location != undefined) {
                section.title(location, false);
                section.showIcon(true);
            }
        }

        var feedingItems = this._vizModel().feedingItems();
        feedingItems[layerIdx] = feedItems;
        this._vizModel().feedingItems(feedingItems);
      
        this._dispatchEvent(new GeoEvent(GeoEvent.UPDATE_LAYER_DATA, this, {
            "feedItems" : feedItems,
            "layerIdx" : layerIdx
        }));
    };

    MapBuilder.prototype._removeLayer = function(idx) {

        this._vizSections[idx].destroy();

        this._vizSections.splice(idx, 1);
        this._vizLayers.splice(idx, 1);

        this._notifyModelChange({
            mapBuilder : {
                layer : {
                    action : 'delete',
                    idx : idx
                }
            }
        });

        this._dispatchEvent(new GeoEvent(GeoEvent.DELETE_LAYER, this, {
            layerIdx : idx
        }));
        if(this._vizLayers.length < 5) {
            this._$header.disabled = false;
            this._$headerPlus.removeClass(CSSConst.MAPBUILDER_PREFIX + "disable-header-plus");
            this._$headerPlus.addClass(CSSConst.MAPBUILDER_PREFIX + "header-plus");
            this._$headerText.css("color","#008fd3");
        } else if(this._vizLayers.length >= 5) {
            this._$header.disabled = true;
            this._$headerText.css("color","#a6a6a6");
            this._$headerPlus.removeClass(CSSConst.MAPBUILDER_PREFIX + "header-plus");
            this._$headerPlus.addClass(CSSConst.MAPBUILDER_PREFIX + "disable-header-plus");
        }
    };

    MapBuilder.prototype._reorderLayer = function(fromIdx, toIdx) {

        reorderArray(this._vizSections, fromIdx, toIdx);
        reorderArray(this._vizLayers, fromIdx, toIdx);

        this._notifyModelChange({
            mapBuilder : {
                layer : {
                    action : 'reorder',
                    from: fromIdx,
                    to: toIdx
                }
            }
        });
        this._dispatchEvent(new GeoEvent(GeoEvent.REORDER_LAYER, this, {
            from : fromIdx,
            to : toIdx
        }));
    };

    MapBuilder.prototype._notifyModelChange = function(model){
        this._vizModel().extensionValues(model);
    };
    
    MapBuilder.prototype._displaySettingMenu = function(layerIdx, position) {
        this._currentSettingLayer = layerIdx;
        var section$ = this._vizSections[this._currentSettingLayer].getSectionDom();
        var beforeSection$, afterSection$;
        if(this._vizSections.length > 0) {
            if(this._vizSections.length === 1) {
                beforeSection$ = null;
                afterSection$ = null;
            } else if(this._vizSections.length > 1 && this._currentSettingLayer === this._vizSections.length - 1) {
                beforeSection$ = null;
                afterSection$ = this._vizSections[this._currentSettingLayer - 1].getSectionDom();
            } else if(this._vizSections.length > 1 && this._currentSettingLayer === 0) {
                beforeSection$ = this._vizSections[this._currentSettingLayer + 1].getSectionDom();;
                afterSection$ = null;
            } else {
                beforeSection$ = this._vizSections[this._currentSettingLayer + 1].getSectionDom();
                afterSection$ = this._vizSections[this._currentSettingLayer - 1].getSectionDom();
            }
        }
        var offset = section$.offset();
        //this._contextMenu.setLayerName(this._vizSections[this._currentSettingLayer].title());
        this._contextMenu.setLayerIdx(this._currentSettingLayer);
        this._contextMenu.setLayerCount(this._vizSections.length);
        this._contextMenu.setInstanceDom(section$);
        this._contextMenu.setBeforeInstanceDom(beforeSection$);
        this._contextMenu.setAfterInstanceDom(afterSection$);
        this._contextMenu.show(offset);
    };

//    MapBuilder.prototype._renameLayer = function(layerIdx, newName) {
//        this._vizSections[layerIdx].title(newName, true);
//        this._dispatchEvent(new GeoEvent(GeoEvent.RENAME_LAYER, this, {
//            layerIdx : layerIdx,
//            layerName : newName
//        }));
//    };

    MapBuilder.prototype._onVizModelChanged = function(event) {
      
        if(event.data.extensionValuesChanged){
           var val = this._vizModel().extensionValues();
           
           if(val.mapBuilder){
              if(val.mapBuilder.status){
                 this._show();
                 this.load(val.mapBuilder.status);
              }else if(val.mapBuilder.mapservice && val.mapBuilder.mapservice.showRadio){
                 this._show();
                 this._$footerText.hide();
                 this._$footerRadio.show();
                 this._$footerRadioText.show();
                 this._$footerRadio.prop("checked", val.mapBuilder.mapservice.checked);
                 if(!val.mapBuilder.mapservice.checked){
                    this._$footerRadioText.addClass("disable");
                 }else{
                    this._$footerRadioText.removeClass("disable");
                 }
             }
           }
           
           if(val.map){
               if(val.map.created){
                 this._show();
                 this.reset();
                 this._addVizSection();
               }else if(val.map.logOnFail){
                 this._hide();
               }
               
               if(val.map.feeding){
                  for(var i = 0; i < val.map.feeding.length ; i++){
                    this._vizSections[i].update({
                       feeding: val.map.feeding[i]
                    });
                  }
               }
           }
        } 
     };

    MapBuilder.prototype.analysisObjectsForPicker = function(analysisObjects) {
        if (arguments.length > 0) {
            this._allAnalyses = analysisObjects;
            for(var i = 0; i <  this._vizSections.length ; i++){
              this._vizSections[i]._analysisObjectsForPicker(this._allAnalyses);
            }
        } else {
            return this._allAnalyses;
        }
    };

    return MapBuilder;
});
define('sap/viz/controls/switchbar/SwitchBarEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil', 
    'sap/viz/controls/common/events/Event', 
    'jquery'],
function(OOUtil, Event, $) {
// @formatter:on
    var SwitchBarEvent = function(type, target, data) {
        SwitchBarEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.switchbar.SwitchBarEvent";
    };
    OOUtil.extend(SwitchBarEvent, Event);

    SwitchBarEvent.VIZ_TYPE_CHANGED = "vizTypeChanged";

    return SwitchBarEvent;
});

define('sap/viz/controls/switchbar/views/SwitcherEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var SwitcherEvent = function(type, target, data) {
        SwitcherEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.switchbar.views.SwitcherEvent";
    };
    OOUtil.extend(SwitcherEvent, Event);

    SwitcherEvent.TYPE_CHANGED = "typeChanged";

    return SwitcherEvent;
});

define('sap/viz/controls/switchbar/views/DropDownListEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var DropDownListEvent = function(type, target, data) {
        DropDownListEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.switchbar.views.DropDownListEvent";
    };
    OOUtil.extend(DropDownListEvent, Event);

    DropDownListEvent.DROP_DOWN_OPENED = "dropDownOpened";
    DropDownListEvent.DROP_DOWN_CLOSED = "dropDownClosed";
    DropDownListEvent.ITEM_SELECTED = "itemSelected";

    return DropDownListEvent;
});

define('sap/viz/controls/switchbar/views/DropDownList',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/switchbar/views/DropDownListEvent'],
// @formatter:on
function($, ChartConst, CSSConst, utils, OOUtil, ChartTypeUtil, UIControl, DropDownListEvent) {
    // Alias
    var cssPrefix = CSSConst.SWITCHBAR_PREFIX;
    /**
     *
     * @param typeObjects Array of object {id, icon, srcIcon, caption}
     * @param header String
     * }
     */
    var DropDownList = function(dom, header, typeObjects) {
        DropDownList.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.switchbar.views.DropDownList";

        // Data model
        this._header = header;
        this._typeObjects = typeObjects;
        this._selectedChartList = null;
        // DOM view
        this._dom$ = $(dom);
        this._$container = null;
        this._$content = null;
        this._$arrow = null;
        this._mousedownHandler = $.proxy(this._globalMouseDownHandler, this);
        this._createChildren();
    };
    OOUtil.extend(DropDownList, UIControl);

    /**
     * Open DropdownList using the defined position
     * @param {HTMLDivElement} $dock
     */
    DropDownList.prototype.open = function($dock) {
        this._dispatchEvent(new DropDownListEvent(DropDownListEvent.DROP_DOWN_OPENED, this));
        this._dom$.appendTo($("body"));
        this._locate($dock);

        document.addEventListener("mousedown", this._mousedownHandler, true);
        $(window).on('blur', this._mousedownHandler);
        this._$container.css('opacity', '1');
        this._$container.css('top', '15px');
    };
    /**
     * Handler document events: mousedown
     * Listen the mousedown when event capturing, since cvom chart will stop event propagation when bubbling
     */
    DropDownList.prototype._globalMouseDownHandler = function(event) {
        var target = event.srcElement ? event.srcElement : event.target;
        if (!$.contains(this._dom, target)) {
            this.close();
        }
    };
    /**
     * update the position of dropdown list
     * @param {Number} arrowRight
     */
    DropDownList.prototype._updateDropdownPosition = function(arrowRight) {

        var maxHeight = this._$li.outerHeight() * 11 + this._$content.outerHeight() % this._$li.outerHeight();
        var needScroll = this._$content.outerHeight() > maxHeight;
        if (needScroll) {
            this._$content.outerWidth(this._$li.outerWidth() + 28);
            this._$content.outerHeight(maxHeight);
        } else {
            this._$content.outerWidth(this._$li.outerWidth() + 14);
        }
        
        var contentWidth = this._$content.outerWidth();
        var contentHeight = this._$content.outerHeight();
        this._$container.css({
            'width' : contentWidth + 'px',
            'height' : contentHeight + 'px'
        });
        
        var initArrowLeft = -5;
        var containerWidth = this._$container.outerWidth();
        var containerLeft = (containerWidth / 3) * 2 + 1;
        if (containerLeft / 2 > arrowRight) {
            containerLeft += containerLeft / 2 - arrowRight;

        }
        var arrowLeft = initArrowLeft + containerLeft;
        this._$arrow.css({
            "left" : arrowLeft
        });
        this._$container.css({
            "left" : -containerLeft
        });
    };
    /**
     * locate DropdownList
     * @param {HTMLDivElement} dropdownArrowElement
     */
    DropDownList.prototype._locate = function($dock) {
        var scrollDelta = document.body.scrollWidth - $(window).width();
        var arrowRight = $(window).outerWidth() - $dock.offset().left;
        this._updateDropdownPosition(arrowRight + scrollDelta);
        this._dom$.css({
            "right" : arrowRight,
            "top" : $dock.offset().top + $dock.outerHeight()
        });
        //handle dropDownList get out of window on left side
        if (this._$container.offset().left < 0) {
            var parentLeft = this._dom$.offset().left;
            var oldContainerLeft = this._$container.offset().left;
            this._$container.css({
                "left": -parentLeft + "px"
            });
            var arrowLeft = Number(this._$arrow.css("left").replace('px', ''));
            this._$arrow.css({
                "left" : arrowLeft + oldContainerLeft - this._$container.offset().left + "px"
            });
        }
        
        var arrowOffsetRight = $(window).width() - this._$arrow.offset().left - this._$arrow.outerWidth() - 12;
        var containerOffsetRight = $(window).width() - this._$container.offset().left - this._$container.outerWidth();
        var substractOffsetRight = containerOffsetRight - arrowOffsetRight;
        if (substractOffsetRight > 0) {
            this._$container.css({
                "width" : this._$container.width() + substractOffsetRight
            });
            this._$content.css({
                "width" : this._$content.width() + substractOffsetRight
            });
        }
    };
    /**
     * Close DropdownList if detect mousedown event.
     */
    DropDownList.prototype.close = function() {
        var $dom = $(this._dom);
        var delay = 1;
        if (this._classVisible) {
            $dom.removeClass(this._classVisible);
            delay = 2000;
        }
        setTimeout(function() {
            $dom.detach();
        }, delay);

        this._dispatchEvent(new DropDownListEvent(DropDownListEvent.DROP_DOWN_CLOSED, this));
        document.removeEventListener("mousedown", this._mousedownHandler, true);
        $(window).off('blur', this._mousedownHandler);
        this.destroy();
    };
    /**
     * Create the content for DropdownList.
     */
    DropDownList.prototype._createChildren = function() {
        var _this = this;
        this._dom$.addClass(cssPrefix + 'dropDownList');

        var $container = this._$container = $('<div/>').appendTo(this._dom$);
        this._$container.addClass(cssPrefix + 'dropDownList-container');
        var $arrow = this._$arrow = $('<div/>').appendTo($container);
        this._$arrow.addClass(cssPrefix + 'dropDownList-arrow uvb-dropDownList');
        var $content = this._$content = $('<div/>').appendTo($container);
        this._$content.addClass([cssPrefix + 'dropDownList-content', CSSConst.COMMON_PREFIX + 'scrollable', CSSConst.COMMON_PREFIX + 'scrollable-y'].join(' '));
        // List
        var $ul = this._$ul = $('<ul/>').appendTo($content);
        this._$ul.addClass(cssPrefix + 'chart-list-container');
        // Header
        var $header = $('<div/>').appendTo($ul).text(this._header);
        $header.addClass(cssPrefix + 'chart-list-header');
        var i;
        var o;
        for ( i = 0; i < this._typeObjects.length; i++) {
            o = this._typeObjects[i];
            this._$li = $('<li/>').appendTo($ul).attr('class', 'chartList');
            var $li = this._$li;
            $li.data('type', o);
            $li.click($.proxy(this._chartListClickHandler, this));

            var $icon = $('<div/>');
            $icon.addClass(cssPrefix + 'dropDownList-chart-list');
            var vizType = o.id;
            //check whether the chartType belongs to Extension
            if ((ChartTypeUtil.isBuildInType(vizType)) 
            || vizType === ChartConst.TYPE_TABLE || vizType === ChartConst.TYPE_CROSSTAB
            || vizType === ChartConst.TYPE_FUNNEL || vizType === ChartConst.TYPE_PC) {
                //chartType not belongs to Extension
                $icon.append($("<div/>", {
                    "class" : cssPrefix + "chart-icon" + " " + cssPrefix + "chart-icon-" + o.icon
                }), $("<span/>", {
                    "class" : cssPrefix + "chart-text",
                    "text" : o.caption
                }));
            } else {
                //chartType belongs to Extension
                //if the src of the icon not exists
                if (!o.srcIcon) {
                    $icon.append($("<div/>", {
                        "class" : cssPrefix + "chart-icon" + " " + cssPrefix + "chart-icon-extension"
                    }), $("<span/>", {
                        "class" : cssPrefix + "chart-text",
                        "text" : o.caption
                    }));
                } else {
                    //the src of the icon exists
                    $icon.append($("<img/>", {
                        "class" : cssPrefix + "chart-icon",
                        "src" : o.srcIcon
                    }), $("<span/>", {
                        "class" : cssPrefix + "chart-text",
                        "text" : o.caption
                    }));
                    $icon.children('img').css('background', 'none');
                }
            }
            $($icon[0].firstChild).css('margin', '3px 5px 3px 0px');
            $icon.appendTo($li);
        }
    };
    /**
     * Handle dropdown item click event. Dispatch itemSelected event to SwitchBar.
     * And close DropdownList.
     * @param {Event} event
     */
    DropDownList.prototype._chartListClickHandler = function(event) {
        this._dispatchEvent(new DropDownListEvent(DropDownListEvent.ITEM_SELECTED, this, {
            'selectedTypeObject' : $(event.currentTarget).data('type')
        }));
        this.close();
    };
    /**
     * Highlight the selected item of the chart list
     */
    DropDownList.prototype.updateSelectedUI = function(selectedCaption) {
        var chartList = this._$ul.children('li');
        for (var i = 0; i < chartList.length; i++) {
            var item$ = $(chartList[i]);
            if (item$.text() === selectedCaption) {
                item$.addClass(cssPrefix + 'dropDownList-chart-list-selected');
                break;
            }
        }
    };
    return DropDownList;
});

define('sap/viz/controls/switchbar/views/Switcher',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/switchbar/views/SwitcherEvent',
    'sap/viz/controls/switchbar/views/DropDownList',
    'sap/viz/controls/switchbar/views/DropDownListEvent'],
function($, ChartConst, CSSConst, utils, OOUtil, ChartTypeUtil, UIControl,
    SwitcherEvent, DropDownList, DropDownListEvent) {
// @formatter:on
    // Alias
    var cssPrefix = CSSConst.SWITCHBAR_PREFIX;
    var cssCommon = CSSConst.COMMON_PREFIX;

    /**
     *
     * @param typeObjects Array of object {id, icon, srcIcon, caption}
     */
    var Switcher = function(dom, caption, typeObjects) {
        Switcher.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.switchbar.views.Switcher';

        // Data model
        this._caption = caption;
        this._typeObjects = typeObjects;
        this._selectedTypeObject = null;
        // DOM view
        this._dom$ = $(dom);
        this._chartIcon$ = null;
        this._arrow$ = null;
        this._createChildren();
        this._commitSelectedType();

        this.size({
            'width' : 58,
            'height' : 34
        });
    };
    OOUtil.extend(Switcher, UIControl);
    // ------------------------------------
    // Setter/Getter
    // ------------------------------------
    Switcher.prototype.selectedType = function(value) {
        if (arguments.length > 0) {
            var typeObject = null;
            if (value) {
                for (var i = 0; i < this._typeObjects.length; i++) {
                    if (this._typeObjects[i].id === value) {
                        typeObject = this._typeObjects[i];
                        break;
                    }
                }
            }
            this.selectedTypeObject(typeObject);
        } else {
            return this._selectedTypeObject ? this._selectedTypeObject.id : null;
        }
    };
    Switcher.prototype.selectedTypeObject = function(value) {
        if (arguments.length > 0) {
            if (this._selectedTypeObject != value || (this._selectedTypeObject && value && this._selectedTypeObject.id != value.id)) {
                this._selectedTypeObject = value;
                this._commitSelectedType();

                this._dispatchEvent(new SwitcherEvent(SwitcherEvent.TYPE_CHANGED, this));
            }
        } else {
            return this._selectedTypeObject;
        }
    };
    // ------------------------------------
    // Public methods
    // ------------------------------------
    // ------------------------------------
    // Private methods
    // ------------------------------------
    Switcher.prototype._createChildren = function() {
        this._dom$.addClass([cssPrefix + 'chart', cssPrefix + 'switcher'].join(' '));
        
        var iconWrapper$ = $(document.createElement('div'));
        iconWrapper$.addClass(cssPrefix + 'chart-icon-wrapper');
        var srcIcon = this._typeObjects[0].srcIcon;
        if (!srcIcon) {
            this._chartIcon$ = $(document.createElement('div'));
        } else {
            this._chartIcon$ = $(document.createElement('img'));
        }
        this._chartIcon$.addClass(cssPrefix + 'chart-icon');
        this._updateChartIcon(this._typeObjects[0], false);
        this._chartIcon$.appendTo(iconWrapper$);
        iconWrapper$.click($.proxy(this._chartIconClickHandler, this));
        iconWrapper$.appendTo(this._dom$);

        var splitter$ = this._arrow$ = $(document.createElement('div'));
        splitter$.addClass(cssPrefix + 'splitter');
        splitter$.appendTo(this._dom$);

        var arrow$ = this._arrow$ = $(document.createElement('div'));
        arrow$.addClass(cssPrefix + 'dropdown-arrow');
        $(document.createElement('div')).addClass([cssPrefix + 'dropdown-arrow-icon', cssCommon + 'havanaSharedSprite16-mask'].join(' ')).appendTo(arrow$);
        arrow$.click($.proxy(this._arrowClickHandler, this));
        arrow$.appendTo(this._dom$);
    };
    /**
     * Handle chart icon click
     * @param {Event} event
     */
    Switcher.prototype._chartIconClickHandler = function(event) {
        this.selectedTypeObject(this._chartIcon$.data('type'));
    };

    /**
     * Handle arrow click, display the chart group dropdown list
     * @param {Event} event
     */
    Switcher.prototype._arrowClickHandler = function(event) {
        var dropDownList = this._dropDownList = new DropDownList(document.createElement('div'), this._caption, this._typeObjects);
        dropDownList.addEventListener(DropDownListEvent.ITEM_SELECTED, function(event) {
            this.selectedTypeObject(event.data.selectedTypeObject);
        }, this);
        if (this._selectedTypeObject) {
            dropDownList.updateSelectedUI(this._selectedTypeObject.caption);
        }
        dropDownList.open(this._arrow$);
    };

    /**
     * handle chart item click in dropdown list
     * @param {HTMLDivElement} chartListElement
     */
    Switcher.prototype._commitSelectedType = function() {
        if (this._selectedTypeObject) {
            this._updateChartIcon(this._selectedTypeObject, true);

            this._dom$.removeClass(cssPrefix + 'chart');
            this._dom$.addClass(cssPrefix + 'chart-selected');
        } else {
            this._updateChartIcon(this._selectedTypeObject, false);

            this._dom$.addClass(cssPrefix + 'chart');
            this._dom$.removeClass(cssPrefix + 'chart-selected');
        }
    };
    Switcher.prototype._updateChartIcon = function(typeObject, selected) {
        if (!typeObject) {
            typeObject = this._chartIcon$.data('type');
        }
        var vizType = typeObject.id;
        if ((ChartTypeUtil.isBuildInType(vizType)) 
            || vizType === ChartConst.TYPE_TABLE || vizType === ChartConst.TYPE_CROSSTAB
            || vizType === ChartConst.TYPE_FUNNEL || vizType === ChartConst.TYPE_PC) {
            //setting for chartType not belongs to extension
            this._chartIcon$.attr({
                'class' : cssPrefix + 'chart-icon' + ' ' + cssPrefix + 'chart-icon-' + (selected ? typeObject.whiteIcon : typeObject.icon),
                'title' : typeObject.caption
            }).data('type', typeObject);
        } else {
            //setting for Extension
            //check the icon of extension
            if (!typeObject.srcIcon) {
                if (this._chartIcon$[0].nodeName === 'IMG') {
                    this._chartIcon$ = $(document.createElement("div")).replaceAll(this._chartIcon$);
                }
                this._chartIcon$.attr({
                    'class' : cssPrefix + 'chart-icon' + ' ' + cssPrefix + 'chart-icon-' + (selected ? 'extension-white' : 'extension'),
                    'title' : typeObject.caption
                }).data('type', typeObject);
            } else {
                if (this._chartIcon$[0].nodeName === 'DIV') {
                    this._chartIcon$ = $(document.createElement("img")).replaceAll(this._chartIcon$);
                }
                this._chartIcon$.attr({
                    'class' : cssPrefix + 'chart-icon',
                    'src' : selected ? typeObject.srcWhiteIcon : typeObject.srcIcon,
                    'title' : typeObject.caption
                }).data('type', typeObject);
                this._chartIcon$.css('background', 'none');
            }
        }
    };

    return Switcher;
});

// @formatter:off
define('sap/viz/controls/switchbar/SwitchBar',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/runtime/RuntimeManager',
    'sap/viz/controls/switchbar/SwitchBarConfig',
    'sap/viz/controls/switchbar/SwitchBarEvent',
    'sap/viz/controls/switchbar/views/Switcher',
    'sap/viz/controls/switchbar/views/SwitcherEvent'
],
function($, VizControlBase, CSSConst, ChartConst, LangManager, OOUtil, utils, ChartTypeUtil, RuntimeManager, SwitchBarConfig,
    SwitchBarEvent, Switcher, SwitcherEvent) {
// @formatter:on

    // Alias
    var cssPrefix = CSSConst.SWITCHBAR_PREFIX;

    var minHorizontalGap = 2;
    var minVerticalGap = 2;

    /**
     * The SwitchBar is a control that categories all chart types in groups. User can click on the arrow icon of group to display
     * chart type items, click one of these items to change the current chart type.<br/><br/>
     *
     * @class sap.viz.controls.switchbar.SwitchBar
     * @param {HTMLElement}      dom                                      element to contain the control
     * @param {JSON}             [uiConfig]                               configuration for initialization to SwitchBar. If this not
     * transferred, auto using the default uiconfig to create a switch bar. Please refer to the following sample code for details.
     * @param {Boolean}          uiConfig.visible                         show or hide the control<br/>
     * control<br/>
     * @param {String}           uiConfig.defaultVizType                  default viz type<br/>
     * @param {Array}            uiConfig.groups                          configuration for categories of all viz types, each element
     * of the groups is type of JSON Object, which contains "name" and "types". Take column chart category for example,
     * <pre>
     * {
     *      "name" : LangManager.get("VIZ_SWITCHBAR_COLUMN_CHARTS"),
     *      "types" : [{
     *          "id" : ChartConst.TYPE_COLUMN
     *      }, {
     *          "id" : ChartConst.TYPE_STACKED_COLUMN
     *      }, {
     *          "id" : ChartConst.TYPE_DUAL_COLUMN
     *      }, {
     *          "id" : ChartConst.TYPE_3D_COLUMN
     *      }]
     * }
     * </pre>
     * @extends sap.viz.controls.common.VizControlBase
     * @example <caption>sample code of getting the parameter "uiConfig":</caption>
     * <pre>
     * // 1. Create an uiconfig from empty object not recommended.
     * var newUiConfig = {
     *      "visible" : true,
     *      "defaultVizType" : "viz/column",
     *      "groups" : [{
     *          "name" : LangManager.get("VIZ_SWITCHBAR_COLUMN_CHARTS"),
     *          "types" : [{
     *              "id" : ChartConst.TYPE_COLUMN
     *          }, {
     *              "id" : ChartConst.TYPE_STACKED_COLUMN
     *          }, {
     *              "id" : ChartConst.TYPE_DUAL_COLUMN
     *          }, {
     *              "id" : ChartConst.TYPE_3D_COLUMN
     *          }]
     *      }//,{other group}]
     * };
     *
     * // 2. Use the default switch bar uiconfig and customized it commended.
     * // 'assetsRoot' is the path of the assets folder used by switch bar.
     * var newUiConfig = SwitchBar.instance(assetsRoot);
     *
     * // Customize the default switch bar uiconfig.
     * </pre>
     */
    var SwitchBar = function(div, uiConfig) {
        SwitchBar.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.switchbar.SwitchBar";

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_switchbar_control');

        /** {Array} */
        this._vizGroups = null;
        /** {Object} {id, caption, icon, srcIcon, whiteIcon, srcWhiteIcon} */
        this._selectedTypeObject = null;
        this._direction = null;
        this._stacking = null;

        // View
        this._uiSwitchers = null;

        // DOM
        this._dom$ = $(this._dom);
        this._dom$.addClass([CSSConst.SWITCHBAR_PREFIX + "view", CSSConst.COMMON_PREFIX + 'scrollable', CSSConst.COMMON_PREFIX + 'scrollable-y'].join(' '));
        this._container$ = null;

        // check the sap.viz.controls.switchbar.groups extension point
        if (sap && sap.bi && sap.bi.framework && sap.bi.framework.getService !== undefined) {
            var groupsExt = sap.bi.framework.getService("*", "sap.viz.controls.switchbar.groups");
            if (groupsExt) {
                // clone the input uiConfig
                uiConfig = JSON.parse(JSON.stringify(uiConfig));
                // first respect settings from uiConfig, then from extension point
                if (!uiConfig.defaultVizType && groupsExt.defaultVizType) {
                    uiConfig.defaultVizType = groupsExt.defaultVizType;
                }
                if (!uiConfig.groups && groupsExt.groups) {
                    uiConfig.groups = groupsExt.groups;
                }
            }
        }

        // Prepare data model
        if (!uiConfig) {
            uiConfig = SwitchBarConfig.instance();
        }

        this._parseConfiguration(uiConfig);
        // Draw DOM
        this._horizontalGap = 24;
        this._verticalGap = 14;

        this._createChildren();
        this._validateSize();

        if (this._vizModel().type() === uiConfig.defaultVizType) {
            this._applyModel();
        } else {
            this._vizModel().type(uiConfig.defaultVizType);
        }
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_switchbar_control');
    };
    /**
     * Dispatches "vizTypeChanged" event when visualization type changes.
     * <pre>
     * type: "vizTypeChanged"
     * handler: function({
     *                    type: "vizTypeChanged",
     *                    data: {
     *                        oldType: "<vizType>",
     *                        newType: "<vizType>"
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.switchbar.SwitchBar#vizTypeChanged
     * @param {String} evt.type "vizTypeChanged"
     * @param {String} evt.data.oldType
     *                 vizType
     * @param {String} evt.data.newType
     *                 vizType
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var switchBar = new SwitchBar(...);
     * var vizTypeChangedHandler = function(event) {
     *     var log = "vizTypeChanged event from switchBar and viz type changed from " +
     *                  event.data.oldType  + "to " + event.data.newType + ".";
     *     console.log(log);
     * };
     * switchBar.addEventListener('vizTypeChanged', vizTypeChangedHandler);
     * </pre>
     */

    OOUtil.extend(SwitchBar, VizControlBase);

    /*
    * **************************************************************************
    * * Public API(s), which will be used by applications outside VizControls. *
    * **************************************************************************
    */

    /**
     * Get/Set selected viz type.
     * @method sap.viz.controls.switchbar.SwitchBar.prototype.vizType
     * @param {String} vizType
     *                 A string of supported viz type
     * @returns {String}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var switchBar = new SwitchBar(...);
     * //Set 'column' for the current viz type
     * switchBar.vizType("viz/column");
     * //Get the current viz type
     * var currentVizType = switchBar.vizType();
     * </pre>
     */
    SwitchBar.prototype.vizType = function(value) {
        if (arguments.length > 0) {
            if (!utils.isString(value)) {
                return;
            }

            var chartModel = this._vizModel();
            var newType = ChartTypeUtil.getType(chartModel.type(), value);
            this._beginUpdateProperty();
            chartModel.type(newType);
            this._endUpdateProperty();
            return this;
        } else {
            return this._selectedTypeObject ? this._selectedTypeObject.id : null;
        }
    };
    /**
     * Get/Set horizontal gap value for free layout.
     * @method sap.viz.controls.switchbar.SwitchBar.prototype.horizontalGap
     * @param {Number} value
     *                 A numeric value of horizontal gap
     * @returns {Number}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var switchBar = new SwitchBar(...);
     * //Set '20' for the current horizontal gap
     * switchBar.horizontalGap(20);
     * //Set '20.5' for the current horizontal gap
     * switchBar.horizontalGap(20.5);
     * //Get the current horizontal gap
     * var currentHorizontalGap = switchBar.horizontalGap();//returns 20.5
     * </pre>
     */
    SwitchBar.prototype.horizontalGap = function(value) {
        if (arguments.length > 0) {
        	if(isNaN(value)) {
        		throw LangManager.get('VIZ_CONTROLS_API_PARAMETER_ERROR');
        	}
        	value = Math.max(minHorizontalGap, Number(value));
            if (this._horizontalGap !== value) {
                this._horizontalGap = value;
                this._validateSize();
            }
            return this;
        } else {
            return this._horizontalGap;
        }
    };
    /**
     * Get/Set vertical gap value for free layout.
     * @method sap.viz.controls.switchbar.SwitchBar.prototype.verticalGap
     * @param {Number} value
     *                 A numeric value of vertical gap
     * @returns {Number}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var switchBar = new SwitchBar(...);
     * //Set '20' for the current vertical gap
     * switchBar.verticalGap(20);
     * //Set '20.5' for the current vertical gap
     * switchBar.verticalGap(20.5);
     * //Get the current vertical gap
     * var currentVerticalGap = switchBar.verticalGap();//returns 20.5
     * </pre>
     */
    SwitchBar.prototype.verticalGap = function(value) {
        if (arguments.length > 0) {
        	if(isNaN(value)) {
        		throw LangManager.get('VIZ_CONTROLS_API_PARAMETER_ERROR');
        	}
        	value = Math.max(minVerticalGap, Number(value));
            if (this._verticalGap !== value) {
                this._verticalGap = value;
                this._validateSize();
            }
            return this;
        } else {
            return this._verticalGap;
        }
    };
    /*
    * ****************************************************************************
    * * Inner API(s), which will be used by other components inside VizControls. *
    * ****************************************************************************
    */

    /**
     * Set method call from event of ui switcher
     */
    SwitchBar.prototype.selectedTypeObject = function(value) {
        if (arguments.length > 0) {
            if (this._selectedTypeObject != value || (this._selectedTypeObject && value && this._selectedTypeObject.id != value.id)) {
                this._selectedTypeObject = value;
                this._commitSelectedTypeObject();
            }
            return this;
        } else {
            return this._selectedTypeObject;
        }
    };
    /**
     * Serialize SwitchBar to a JSON object. <br/>
     * @method sap.viz.controls.switchbar.SwitchBar.prototype.save
     * @return {JSON}
     */
    SwitchBar.prototype.save = function() {
        var jsonValue = {};
        jsonValue['type'] = this.vizType();
        return jsonValue;
    }
    /**
     * Deserialize SwitchBar from JSON object.<br/>
     * @method sap.viz.controls.switchbar.SwitchBar.prototype.load
     * @param {JSON} valueJSON
     */
    SwitchBar.prototype.load = function(valueJSON) {
        this.vizType(valueJSON.type);
    }
    /**
     * @override
     * @param {String} vizUid
     */
    SwitchBar.prototype._onConnect = function(vizUid) {
        var chartModel = this._vizModel();
        var newVizType = ChartTypeUtil.getVizType(chartModel.type());
        this._changeVizType(newVizType);

    };
    /**
     * handler for chart model properties changed
     */
    SwitchBar.prototype._onVizModelChanged = function(e) {
        if (e.data.vizTypeChanged) {
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:change_switchbar_viz_type');

            this._applyModel();

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:change_switchbar_viz_type');
        }
    };
    SwitchBar.prototype._applyModel = function(e) {
        var type = this._vizModel().type();
        this._direction = ChartTypeUtil.getDirection(type) || this._direction;
        this._stacking = ChartTypeUtil.getStacking(type) || this._stacking;
        this._changeVizType(ChartTypeUtil.getVizType(type));
    };
    /**
     * @refresh SwitchBar vizType and UI by value
     * @param {String} value
     */
    SwitchBar.prototype._changeVizType = function(value) {
        var valid = false;
        for (var i = 0; i < this._vizGroups.length; i++) {
            var group = this._vizGroups[i];
            for (var j = 0; j < group.typeObjects.length; j++) {
                var typeObject = group.typeObjects[j];
                if (typeObject.id === value) {
                    this.selectedTypeObject(typeObject);
                    valid = true;
                    break;
                }
            }
            if (valid) {
                break;
            }
        }
        if (!valid) {
            this.selectedTypeObject(null);
        }
    };
    SwitchBar.prototype._commitSelectedTypeObject = function() {
        var selectedType = this._selectedTypeObject ? this._selectedTypeObject.id : null;
        // Update UI
        for (var i = 0; i < this._uiSwitchers.length; i++) {
            this._uiSwitchers[i].selectedType(selectedType);
        }
        // Dispatch event (please update the API document accordingly if update the code.)
        this._dispatchPropertyEvent(new SwitchBarEvent(SwitchBarEvent.VIZ_TYPE_CHANGED, this, {
            'vizType' : selectedType
        }));
    };
    /**
     * Set JSON object to local variable.
     * Merge uiConfig & resourceMapping
     * @param {JSON} uiConfig
     */
    SwitchBar.prototype._parseConfiguration = function(uiConfig/*JSON*/) {
        var log = function(log) {
            //if (console) {
            //    console.log(log);
            //}
        };
        try {
            // Parse viz groups
            this._vizGroups = [];

            var cfgIDs = {};
            var cfgGroups = uiConfig.groups;
            if (cfgGroups && cfgGroups.length) {
                for (var i = 0; i < cfgGroups.length; i++) {
                    var cfgGroup = cfgGroups[i];
                    var cfgTypes = cfgGroup.types;
                    if (!cfgTypes || cfgTypes.length === 0) {
                        continue;
                    }

                    var vizGroup = {
                        'caption' : cfgGroup.name,
                        'typeObjects' : []
                    };
                    for (var j = 0; j < cfgTypes.length; j++) {
                        var cfgType = cfgTypes[j];

                        var cfgID = cfgType.id;
                        if (cfgIDs[cfgID]) {
                            continue;
                        }
                        var vizManifests = sap.viz.api.manifest.Viz.get(cfgID);
                        if (!vizManifests || !vizManifests[0]) {
                            continue;
                        }
                        cfgIDs[cfgID] = true;

                        var typeObject = ChartTypeUtil.getVizTypeObject(cfgID);
                        if (!typeObject) {
                            // Extension
                            typeObject = {
                                'id' : cfgID
                            };
                            var manifest = sap.viz.api.manifest.Viz.get(typeObject.id);
                            typeObject.caption = (manifest && manifest[0]) ? manifest[0].name : '';
                            // icon/whiteIcon for extension should be a absolute path passed by application
                            typeObject.srcIcon = cfgType.icon;
                            typeObject.srcWhiteIcon = cfgType.whiteIcon;
                        }
                        vizGroup.typeObjects.push(typeObject);
                    }
                    if (vizGroup.typeObjects.length > 0) {
                        this._vizGroups.push(vizGroup);
                    }
                }
            }
        } catch (error) {
            log("Invalid config format");
        }
    };
    /**
     * create children
     */
    SwitchBar.prototype._createChildren = function() {
        this._uiSwitchers = [];
        var container$ = this._container$ = $(document.createElement('div')).addClass(cssPrefix + 'switcher-container');
        for (var i = 0; i < this._vizGroups.length; i++) {
            var group = this._vizGroups[i];

            var switcher$ = $(document.createElement('div'));
            var uiSwitcher = new Switcher(switcher$[0], group.caption, group.typeObjects);
            uiSwitcher.addEventListener(SwitcherEvent.TYPE_CHANGED, this._switcherTypeChanged, this);
            switcher$.appendTo(container$);

            this._uiSwitchers.push(uiSwitcher);
        }
        container$.appendTo(this._dom$);
    };
    SwitchBar.prototype._switcherTypeChanged = function(event){
        var uiSwitcher = event.target();
        if (uiSwitcher.selectedTypeObject()) {
            var chartModel = this._vizModel();
            var option = {};
            if(this._stacking){
                option.stacking = this._stacking;
            }
            if(this._direction){
                option.direction = this._direction;
            }
            var newType =ChartTypeUtil.updateType(uiSwitcher.selectedTypeObject().id,option);
            if(ChartTypeUtil.isMultipleChart(chartModel.type())){
                newType = ChartTypeUtil.toMultiChartType(newType);
            }
            chartModel.type(newType);
        }
    };
    SwitchBar.prototype._validateSize = function() {
        var availableWidth = this._dom$.width();
        var offsetX = 0;
        var offsetY = 0;
        var switcherRowCount = 0;
        for (var i = 0; i < this._uiSwitchers.length; i++) {
            var uiSwitcher = this._uiSwitchers[i];
            var size = uiSwitcher.size();
            var switcher$ = $(uiSwitcher._dom);
            // Set position
            switcher$.css({
                'left' : offsetX,
                'top' : offsetY
            });
            offsetX = offsetX + size.width + this._horizontalGap;
            // Adjust offset
            if (i + 1 < this._uiSwitchers.length) {
                var next = this._uiSwitchers[i + 1];
                if (offsetX + next.size().width > availableWidth) {
                    offsetX = 0;
                    offsetY = offsetY + size.height + this._verticalGap;
                    switcherRowCount++;
                }
            } else {
                switcherRowCount++;
            }
        }
        if (this._uiSwitchers.length > 0) {
            var height = (this._uiSwitchers[0].size().height + this._verticalGap) * switcherRowCount;
            this._container$.height(height);
        }
    };

    return SwitchBar;
});

define('sap/viz/controls/common/views/feed/PlayerFieldShelfEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var PlayerFieldShelfEvent = function(type, target, data) {
        PlayerFieldShelfEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.PlayerFieldShelfEvent";
    };
    OOUtil.extend(PlayerFieldShelfEvent, Event);

    PlayerFieldShelfEvent.CLICK_ADD_PLAYER_FIELD = "clickAddplayerField";
    PlayerFieldShelfEvent.PLAYER_FIELD_CHANGED = "playerFieldChanged";
    PlayerFieldShelfEvent.ACTION_CHANGED = "playerFieldActionChanged";
    PlayerFieldShelfEvent.PLAYER_FIELD_EMPTY_CHANGED = "playerFieldEmptyChanged";
    PlayerFieldShelfEvent.PLAYER_FIELD_DROP_DENY = "playerFieldDropDeny";

    return PlayerFieldShelfEvent;
});

define('sap/viz/controls/common/views/feed/PlayerFieldShelf',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/managers/DragManager',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/views/feed/PlayerFieldShelfEvent',
    'sap/viz/controls/common/views/menu/PopUpMenu',
    'sap/viz/controls/common/views/menu/PopUpMenuEvent',
    'sap/viz/controls/common/views/menu/DockStrategy',
    'sap/viz/controls/common/views/menu/MenuGroup',
    'sap/viz/controls/common/views/menu/MenuItem',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/feeds/HierarchyLevelObject',
    'sap/viz/controls/common/feeds/valueobjects/Shelf',
    'sap/viz/controls/common/feeds/FeedItemType'],
function($, OOUtil, Utils, CSSConst, UIControl, DragManager,
    DropAction, PlayerFieldShelfEvent, PopUpMenu, PopUpMenuEvent, DockStrategy, MenuGroup, MenuItem,
    LangManager, AnalyticalType, AnalysisObject, FeedUtils, HierarchyLevelObject, Shelf, FeedItemType) {
// @formatter:on
    /**
     * @param dom Target dom element
     * @param shelf shelf vo
     */
    var PlayerFieldShelf = function(dom) {
        PlayerFieldShelf.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.PlayerFieldShelf";

        this._dom$.addClass(CSSConst.FEEDINGSHELF_PREFIX + "view");

        this._list$ = null;
        this._ghostCard$ = null;
        this._draggingCard$ = null;
        this._addIndicator$ = null;
        this._addIcon$ = null;
        this._activeHandler = $.proxy(this._active, this);
        this._dropIndicator$ = $(document.createElement('hr')).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'drop-indicator');
        // Model
        this._shelf = new Shelf();
        
        this._shelf.id = 'playerField';
        this._shelf.name = LangManager.get('VIZ_COMMON_ANIMATION');
        this._shelf.type = FeedItemType.DIMENSION;
        this._shelf.analysisType = AnalyticalType.DIMENSION ;
        this._shelf.feedItemType = FeedItemType.DIMENSION;
        this._shelf.capacity = 1;
        
        // Initialize dom
        this._createChildren();
        this._droppable();
        this._enableFeeding = true;
    };
    OOUtil.extend(PlayerFieldShelf, UIControl);

    PlayerFieldShelf.CARD_HEIGHT = 24;
    /**
     * Get the current shelf vo
     */
    PlayerFieldShelf.prototype.shelf = function() {
        return this._shelf;
    };
    /**
     * Return the dock position for data picker
     */
    PlayerFieldShelf.prototype.popUpDock = function() {
        var _this = this;
        return function() {
            var offset = _this._list$.offset();
            return {
                'x' : offset.left,
                'y' : offset.top + PlayerFieldShelf.CARD_HEIGHT / 2,
                'shelfWidth' : _this._list$.outerWidth()
            };
        }
    };
    /**
     * Get/Set analyses
     *
     * @param {String} value
     *            optional
     * @returns {String}
     */
    PlayerFieldShelf.prototype.analyses = function(value) {
        if (arguments.length > 0) {
            var i;
            // Remove duplicate
            var idMap = {};
            for ( i = 0; i < value.length; ) {
                if (!idMap[value[i].id()]) {
                    idMap[value[i].id()] = true;
                    i++;
                } else {
                    value.splice(i, 1);
                }
            }
            // Remove old
            this._traversalCards(function() {
                $(this).remove();
            }, true, true);
            // Add new
            for ( i = 0; i < value.length; i++) {
                this._addCardAt(value[i], -1);
            }
            this._analysesChanged();
            return this;
        } else {
            var analyses = [];
            this._traversalCards(function(index) {
                var card$ = $(this);
                var analysis = card$.data('__analysis');
                if (analysis) {
                    analyses.push(analysis);
                }
            }, true, true);
            return analyses;
        }
    };
    PlayerFieldShelf.prototype._numCards = function() {
        var numCards = 0;
        this._traversalCards(function(index) {
            numCards++;
        }, true, true);
        return numCards;
    };
    /**
     * Add an analysis to list
     */
    PlayerFieldShelf.prototype.addAnalysis = function(analysis) {
        return this._addAnalysisAt(analysis, -1);
    };
    PlayerFieldShelf.prototype._addAnalysisAt = function(analysis, index) {
        var card$ = this._addCardAt(analysis, index);
        this._analysesChanged();

        return card$;
    };

    PlayerFieldShelf.prototype.destroy = function() {
        this.removeAllEventListeners();
        $('body').off('mouseup', this._activeHandler);

        PlayerFieldShelf.superclass.destroy.apply(this, arguments);
    };
    /**
     * create feedingShelf view .
     */
    PlayerFieldShelf.prototype._createChildren = function() {
        var item$ = $(document.createElement('div')).appendTo(this._dom$).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item');
        var itemTitle$ = $(document.createElement('div')).appendTo(item$).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-title');
        itemTitle$.text(this._shelf.name);

        var content$ = $(document.createElement('div')).appendTo(item$).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-content');
        var list$ = this._list$ = $(document.createElement('div')).appendTo(content$).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-list');
        var addIndicator$ = this._addIndicator$ = $(document.createElement('div')).appendTo(list$);
        addIndicator$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-ph');
        var addText$ = $(document.createElement('a')).appendTo(addIndicator$);
        addText$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-ph-text');
        var addIcon$ = this._addIcon$ = $(document.createElement('div')).appendTo(content$).addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16');
        addIcon$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-add-icon');

        var addFeeding = $.proxy(this._dispatchAddFeedingEvent, this);
        addIndicator$.on('mousedown', this._activeHandler).on('mouseenter', this._activeHandler).on('mouseleave', this._activeHandler).on('click', addFeeding);
        addIcon$.on('mousedown', this._activeHandler).on('mouseenter', this._activeHandler).on('mouseleave', this._activeHandler).on('click', addFeeding);
        $('body').on('mouseup', this._activeHandler);
    };

    PlayerFieldShelf.prototype._dispatchAddFeedingEvent = function(){
        if (this.enableFeeding()) {
            this._dispatchEvent(new PlayerFieldShelfEvent(PlayerFieldShelfEvent.CLICK_ADD_PLAYER_FIELD, this));
        }
    };
    PlayerFieldShelf.prototype._active = function(event){
        if(this._enableFeeding){
            if (event.type === 'mouseup' || event.type === 'mouseleave') {
                this._list$.removeClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-list_active');
                this._addIcon$.removeClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-add-icon_active');
            } else if (event.type === 'mousedown' || event.type === 'mouseenter') {
                this._list$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-list_active');
                this._addIcon$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-add-icon_active');
            }
        }
    };
    /**
     * judge parameter is or not a valid
     * @param  analysisObject
     */
    PlayerFieldShelf.prototype._isValidToken = function(analysisObject) {
        // Valid when drag shelf equals to drop shelf
        if (this._draggingCard$) {
            return true;
        }
        // Check valid by analyticalType
        var type = analysisObject.type();
        var dataType = analysisObject.dataType();
        var tokenAnalyticalType = type ? type.toLowerCase() : type;
        var tokenDataType = dataType ? dataType.toLowerCase() : dataType;
        var shelfFeedItemType = this._shelf.feedItemType;

        var valid = FeedUtils.feedCompatible(shelfFeedItemType, tokenAnalyticalType, tokenDataType);
        // Check valid by current analyses
        if (valid) {
            var analyses = this.analyses();
            for (var i = 0; i < analyses.length; i++) {
                if (analyses[i].id() === analysisObject.id()) {
                    valid = false;
                    break;
                }
            }
        }
        return valid;
    };

    /**
     * make this._list$ droppable
     */
    PlayerFieldShelf.prototype._droppable = function() {
        var _this = this;
        var dropReplacement;
        var dropIndex;
        this._list$.droppable({
            tolerance : 'pointer',
            accept : '.' + DragManager.DRAGGABLE_CLASS_ANALYSIS,
            activate : function(event, ui) {
            },
            deactivate : $.proxy(function(event, ui) {
                if (this._ghostCard$) {
                    this._ghostCard$.remove();
                }
                if (this._dropIndicator$) {
                    this._dropIndicator$.detach();
                }
            }, this),
            drop : $.proxy(function(event, ui) {
                var helper$ = ui.helper;
                var token = DragManager.instance().getAnalysisToken(helper$);
                var analysisObject = token.analysisObject;
                // when user drop an AnalysisObject, only if the current action is DENY, remove the ghost card.
                // for the other cases, we should do adding or replacing.
                if (token.currentAction() !== DropAction.DENY && this._isValidToken(analysisObject)) {
                    token.killRevertAnimation();

                    if (dropReplacement) {
                        token.currentAction(DropAction.ACCEPT_AS_REPLACEMENT);
                        $(dropReplacement).detach();
                    } else {
                        token.currentAction(DropAction.ACCEPT);
                    }
                    this._addAnalysisAt(analysisObject, dropIndex);
                } else {
                    token.currentAction(DropAction.DENY);
                }
                token.dropTarget(this._shelf);

                if (this._ghostCard$) {
                    this._ghostCard$.remove();
                }
                this._dropIndicator$.detach();
            }, this),
            over : function(event, ui) {
                var helper$ = ui.helper;
                // Defer call the real logic, to make sure that over handler will excute after droppable.out
                Utils.defer(function() {
                    var token = DragManager.instance().getAnalysisToken(helper$);
                    var analysisObject = token.analysisObject;
                    if (_this._isValidToken(analysisObject)) {
                        // if shelf already has cards, it means the shelf can accept AnalysisObject no matter
                        // _enableFeeding is true or false. only when the shelf don't have card and
                        // _enableFeeding = false, then we need to show warning.
                        if (_this._numCards() === 0) {
                            if (!_this._enableFeeding) {
                                token.currentAction(DropAction.DENY);
                                var warnMsg = LangManager.get('VIZ_COMMON_DIMENSION_LIMITATION_WARN');
                                token.showWarn(warnMsg);
                                return;
                            } else {
                                // Add ghost card
                                _this._ghostCard$ = _this._addGhostAnalysisAt(analysisObject, 0);

                                token.currentAction(DropAction.ACCEPT);
                            }
                        } else {
                            // Add drop indicator
                            helper$.on('sap.viz.controls.analysisDrag.events.drag', function(event, pageX, pageY) {
                                var cardOffsets = [];
                                var draggingCardIndex = -1;
                                _this._traversalCards(function(index) {
                                    if (_this._draggingCard$ && _this._draggingCard$[0] === this) {
                                        draggingCardIndex = index;
                                    }
                                    cardOffsets.push({
                                        'card' : this,
                                        'offset' : $(this).offset()
                                    });
                                }, false, true);

                                dropIndex = -1;
                                dropReplacement = null;
                                for (var i = 0; i < cardOffsets.length; i++) {
                                    var cardY = cardOffsets[i].offset.top;
                                    // Find the drop index when mouse y small than card y + card height
                                    if (pageY < cardY + PlayerFieldShelf.CARD_HEIGHT - 6) {
                                        dropIndex = i;
                                        // Replace the card when mouse y over the card
                                        if (pageY >= cardY + 2) {
                                            // Disable replace, and we may remove replace feature totally in future
                                            // dropReplacement = cardOffsets[dropIndex].card;
                                        }
                                        break;
                                    }
                                }
                                if (dropIndex === -1) {
                                    dropIndex = cardOffsets.length;
                                }
                                if (analysisObject.type === AnalyticalType.MND) {
                                    dropIndex = (dropIndex < cardOffsets.length / 2) ? 0 : cardOffsets.length;
                                }
                                // Force replace card when analyses is full
                                if (!_this._draggingCard$ && _this._numCards() === 1) {
                                    dropReplacement = cardOffsets[dropIndex === cardOffsets.length ? dropIndex - 1 : dropIndex].card;
                                }

                                var dropOnDraggingShelf = draggingCardIndex !== -1;
                                var dropOnDraggingCard = dropOnDraggingShelf && (draggingCardIndex === dropIndex || (draggingCardIndex + 1 === dropIndex && !dropReplacement));
                                // Force insert card when drop on dragging shelf
                                if (dropOnDraggingShelf) {
                                    dropReplacement = null;
                                }
                                // Reset the drop indicator
                                _this._dropIndicator$.detach();
                                if (dropReplacement) {
                                    token.currentAction(DropAction.ACCEPT_AS_REPLACEMENT);
                                } else {
                                    if (!_this._enableFeeding) {
                                        token.currentAction(DropAction.DENY);
                                        var warnMsg = LangManager.get('VIZ_COMMON_DIMENSION_LIMITATION_WARN');
                                        token.showWarn(warnMsg);
                                    } else {
                                        token.currentAction(DropAction.ACCEPT);
                                        if (!dropOnDraggingCard) {
                                            _this._addElementAt(_this._list$, _this._dropIndicator$, dropIndex);
                                        }
                                    }
                                }
                            });
                        }
                    } else {
                        token.currentAction(DropAction.DENY);
                    }
                });
            },
            out : $.proxy(function(event, ui) {
                var helper$ = ui.helper;
                helper$.off('sap.viz.controls.analysisDrag.events.drag');

                var token = DragManager.instance().getAnalysisToken(helper$);
                token.playDefaultAction();
                if (this._ghostCard$) {
                    this._ghostCard$.remove();
                }
                this._dropIndicator$.detach();
                token.showWarn();
            }, this)
        });
    };
    /**
     * TODO: Add comments.
     */
    PlayerFieldShelf.prototype._traversalCards = function(callback, ignoreDragging, ignoreGhost) {
        var children = this._list$.children();

        var index = 0;
        for (var i = 0; i < children.length; i++) {
            var card = children[i];

            if (this._addIndicator$ && this._addIndicator$[0] === card) {
                continue;
            }
            if (this._dropIndicator$ && this._dropIndicator$[0] === card) {
                continue;
            }
            if (ignoreDragging && this._draggingCard$ && this._draggingCard$[0] === card) {
                continue;
            }
            if (ignoreGhost && this._ghostCard$ && this._ghostCard$[0] === card) {
                continue;
            }
            callback.call(card, index);
            index++;
        }
    };
    /**
     * Add a ghost card by analysis
     */
    PlayerFieldShelf.prototype._addGhostAnalysisAt = function(analysis, index) {
        var card$ = this._addCardAt(analysis, index);
        card$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-ghost');

        return card$;
    };
    /**
     * TODO Param card$ is confuse, should be an analysis
     * @param {Object} card$
     */
    PlayerFieldShelf.prototype._removeCard = function(card$) {
        card$.remove();
        this._analysesChanged();
    };

    /**
     * update list children when analyses changed
     */
    PlayerFieldShelf.prototype._analysesChanged = function() {
        var numCards = this._numCards();
        // Reset the add indicator, Remove the indicator when shelf has card
        if (numCards >= 1) {
            this._addIndicator$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-ph-half');
        } else {
            this._addIndicator$.removeClass(CSSConst.FEEDINGSHELF_PREFIX + 'item-ph-half');
        }
        if (numCards >= 1) {
            this._addIcon$.css('display','none');
            this._addIndicator$.detach();
        } else {
            this._addIcon$.css('display','block');
            this._addIndicator$.appendTo(this._list$);
        }

        // Dispatch event
        this._dispatchEvent(new PlayerFieldShelfEvent(PlayerFieldShelfEvent.PLAYER_FIELD_CHANGED, this));
    };
    PlayerFieldShelf.prototype._updateCard = function(card$, analysis) {
        var caption;
        if (analysis.type() === AnalyticalType.HIERARCHY) {
            caption = analysis.selectedHierarchyLevel().name();
        } else {
            caption = analysis.name();
        }
        card$.data('__analysis', analysis);
        card$.attr('title', caption);
        var text$ = $('.' + CSSConst.FEEDINGSHELF_PREFIX + 'card-text', card$);
        text$.text(caption);
    };
    PlayerFieldShelf.prototype._genHierarchyMenuGroups = function(analysis) {
        // Build menuGroups
        var menuItems = [];
        var hierarchyLevels = analysis.hierarchyLevels();
        for (var i = 0; i < hierarchyLevels.length; i++) {
            var level = hierarchyLevels[i];
            var menuItem = new MenuItem(level.id(), level.name());
            menuItem.selected(level.selected());
            menuItems.push(menuItem);
        }
        var menuGroups = [new MenuGroup(menuItems, true)];
        return menuGroups;
    };
    PlayerFieldShelf.prototype._genMeasureMenuGroups = function(analysis) {
        // Build menuGroups
        return analysis.actions();
    };
    /**
     * create card view and put it into list at appropriate position according to index
     * @param{object}anaylsis
     * @param{String}index
     */
    PlayerFieldShelf.prototype._addCardAt = function(analysis, index) {
        var card$ = $(document.createElement('div')).addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card');

        var numIcons = 0;
        var i, j;
        var menuGroups, menuItems, menuItem, subMenuGroups;
        if (analysis.type() === AnalyticalType.HIERARCHY) {
            // Analytical type hierarchy
            // Prefix icon
            var hierarchy$ = $(document.createElement('span')).appendTo(card$);
            hierarchy$.addClass([CSSConst.FEEDINGSHELF_PREFIX + 'hierarchy-card-icon', CSSConst.COMMON_PREFIX + 'UVBSharedSprite'].join(' '));
            // Action
            // Create action
            this._createCardAction(card$, this._genHierarchyMenuGroups, $.proxy(function(event) {
                analysis = analysis.clone();
                // Set selected to level
                analysis.selectedHierarchyLevelID(event.data.selectedItem.id());
                this._updateCard(card$, analysis);
                this._dispatchEvent(new PlayerFieldShelfEvent(PlayerFieldShelfEvent.PLAYER_FIELD_CHANGED, this));
            }, this), analysis);
            numIcons++;
        } else if (analysis.type() === AnalyticalType.MEASURE && analysis.actions() && analysis.actions().length > 0) {
            // Create action
            this._createCardAction(card$, this._genMeasureMenuGroups, $.proxy(function(event) {
                this._dispatchEvent(new PlayerFieldShelfEvent(PlayerFieldShelfEvent.ACTION_CHANGED, this, {
                    'feedItemID' : this._shelf.id,
                    'analysisObjectID' : analysis.id(),
                    'actionID' : event.data.selectedItem.id()
                }));
            }, this), analysis);

            numIcons++;
        }

        var remove$ = $(document.createElement('div')).appendTo(card$);
        remove$.attr('style', 'width:19px; height:22px;');
        remove$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-operation-div');
        var removeIcon$ = $(document.createElement('span')).appendTo(remove$);
        removeIcon$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-operation ' + CSSConst.COMMON_PREFIX + 'havanaSharedSprite16');
        remove$.click($.proxy(function() {
            this._removeCard(card$);
        }, this));
        numIcons++;

        var text$ = $(document.createElement('div')).appendTo(card$);
        text$.addClass([CSSConst.FEEDINGSHELF_PREFIX + 'card-text', CSSConst.FEEDINGSHELF_PREFIX + 'card-text-with-icon-' + numIcons].join(' '));
        text$.addClass(CSSConst.COMMON_PREFIX + 'text-ellipsis');

        this._updateCard(card$, analysis);
        // Add to DOM
        this._addElementAt(this._list$, card$, index);
        this._draggable(card$);

        return card$;
    };
    PlayerFieldShelf.prototype._createCardAction = function(card$, menuGroupsGenerator, menuItemSelectedHandler, analysis) {
        var action$ = $(document.createElement('div')).appendTo(card$);
        action$.attr('style', 'width:19px; height:22px;');
        action$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'action-icon-div');
        var actionIcon$ = $(document.createElement('span')).appendTo(action$);
        if (analysis.type() === AnalyticalType.HIERARCHY) {
            card$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-hierarchy');
            actionIcon$.addClass([CSSConst.FEEDINGSHELF_PREFIX + 'action-icon-hierarchy', CSSConst.COMMON_PREFIX + 'UVBSharedSprite'].join(' '));
        }
        if (analysis.type() === AnalyticalType.MEASURE) {
            card$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-measure');
            actionIcon$.addClass([CSSConst.FEEDINGSHELF_PREFIX + 'action-icon-measure', CSSConst.COMMON_PREFIX + 'havanaSharedSprite16'].join(' '));
        }

        action$.on('click', $.proxy(function() {
            var menu = new PopUpMenu(document.createElement('div'), menuGroupsGenerator.call(this, card$.data('__analysis')));
            menu.addEventListener(PopUpMenuEvent.ITEM_SELECTED, menuItemSelectedHandler, this);
            menu.open(action$, DockStrategy.DOWN_WITH_ARROW);
        }, this));
        return action$;
    };

    /**
     * put card into container at appropriate position according to index
     * @param{htmlelement}container$
     * @param{htmlelement}element$
     * @param{string}index
     */
    PlayerFieldShelf.prototype._addElementAt = function(container$, element$, index) {
        var children = container$.children();
        if (index !== -1 && index < children.length) {
            $(children[index]).before(element$);
        } else {
            container$.append(element$);
        }
    };

    /**
     * make card draggable
     * @param{htmlelement}
     */
    PlayerFieldShelf.prototype._draggable = function(card$) {
        var _this = this;

        DragManager.enableDraggableFeeding(card$[0], card$.data('__analysis'));
        card$.draggable({
            containment : 'document',
            revert : 'valid',
            helper : function(event) {
                var helper = DragManager.getDefaultHelper(this);
                var token = DragManager.instance().getAnalysisToken($(helper));
                token.defaultAction(DropAction.AS_TRASH);
                return helper;
            },
            start : $.proxy(function(event, ui) {
                this._draggingCard$ = $(this);
                this._draggingCard$.addClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-ghost');
                var helper$ = ui.helper;
                var token = DragManager.instance().getAnalysisToken(helper$);
                var analysisObject = token.analysisObject;
                var eventData = {
                    'analysisObject' : analysisObject,
                    'feedId' : this._shelf.id
                };
                this._dispatchEvent(new PlayerFieldShelfEvent(PlayerFieldShelfEvent.PLAYER_FIELD_EMPTY_CHANGED, this, eventData));
            }, this),
            stop : function(event, ui) {
                var helper$ = ui.helper;

                if (_this._draggingCard$) {
                    _this._draggingCard$.removeClass(CSSConst.FEEDINGSHELF_PREFIX + 'card-ghost');
                    _this._draggingCard$ = null;
                }

                var token = DragManager.instance().getAnalysisToken(helper$);
                // Detach current card, if it is dropped to a new shelf
                if (!token.dropTarget() || token.currentAction() === DropAction.ACCEPT || token.currentAction() === DropAction.ACCEPT_AS_REPLACEMENT) {
                    _this._removeCard($(this));
                } else {
                    var eventData = {
                        'analysisObject' : token.analysisObject,
                        'feedId' : _this._shelf.id
                    };
                    _this._dispatchEvent(new PlayerFieldShelfEvent(PlayerFieldShelfEvent.PLAYER_FIELD_DROP_DENY, this, eventData));
                }
            },
            drag : function(event, ui) {
            }
        });
    };
    PlayerFieldShelf.prototype.enableFeeding = function(enabled) {
        if (arguments.length > 0) {
            this._enableFeeding = enabled;
            this._updateFeedingEnabled(enabled);
        } else {
            return this._enableFeeding;
        }
    };
    PlayerFieldShelf.prototype._updateFeedingEnabled = function(enabled) {
        if (enabled) {
            this._list$.css('cursor', 'pointer');
            this._addIcon$.css('display','block');
        } else {
            this._list$.css('cursor', 'default');
            this._addIcon$.css('display','none');
        }
    };
    PlayerFieldShelf.langProps = {
        // Change calculation
        'changeCalculation' : 'VIZ_COMMON_CHANGE_CALCULATION',
        'sum' : 'VIZ_COMMON_SUM',
        'average' : 'VIZ_COMMON_AVERAGE',
        'min' : 'VIZ_COMMON_MIN',
        'max' : 'VIZ_COMMON_MAX',
        'countDistinct' : 'VIZ_COMMON_COUNT_DISTINCT',
        'countAll' : 'VIZ_COMMON_COUNT_ALL',
        'none' : 'VIZ_COMMON_NONE',
        'sum_short' : 'VIZ_COMMON_SUM_SHORT',
        'average_short' : 'VIZ_COMMON_AVERAGE_SHORT',
        'min_short' : 'VIZ_COMMON_MIN_SHORT',
        'max_short' : 'VIZ_COMMON_MAX_SHORT',
        'countDistinct_short' : 'VIZ_COMMON_COUNT_DISTINCT_SHORT',
        'countAll_short' : 'VIZ_COMMON_COUNT_ALL_SHORT',
        'none_short' : 'VIZ_COMMON_NONE_SHORT'
    };
    return PlayerFieldShelf;
});

define('sap/viz/controls/feeding/FeedingPanelEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var FeedingPanelEvent = function(type, target, data) {
        FeedingPanelEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.FeedingPanelEvent";
    };
    OOUtil.extend(FeedingPanelEvent, Event);

    FeedingPanelEvent.ACTION_CHANGED = "actionChanged";

    return FeedingPanelEvent;
});

// @formatter:off
define('sap/viz/controls/feeding/FeedingPanel',[

    'jquery',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/SubtotalItemType',
    'sap/viz/controls/common/views/feed/FeedList',
    'sap/viz/controls/common/views/feed/FeedListEvent',
    'sap/viz/controls/common/views/feed/FeedingShelf',
    'sap/viz/controls/common/views/feed/FeedingShelfEvent',
    'sap/viz/controls/common/views/feed/PlayerFieldShelf',
    'sap/viz/controls/common/views/feed/PlayerFieldShelfEvent',
    'sap/viz/controls/runtime/RuntimeManager',
    'sap/viz/controls/common/feeds/AutoFeedingUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/feeding/FeedingPanelConfig',
    'sap/viz/controls/feeding/FeedingPanelEvent',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/utils/Serialization'
],
function($, FeedEvent, utils, OOUtil, VizUtils, CSSConst, LangManager, VizControlBase, AnalyticalType, FeedItem, FeedItemType, SubtotalItemType,
    FeedList, FeedListEvent, FeedingShelf, FeedingShelfEvent, PlayerFieldShelf, PlayerFieldShelfEvent, RuntimeManager, AutoFeedingUtils, ChartTypeUtil, FeedUtils,
    FeedingPanelConfig, FeedingPanelEvent, BVRService, Serialization) {
// @formatter:on

        var cssCommon = CSSConst.COMMON_PREFIX;

        /**
         * The FeedingPanel is a control that lists feeding containers of chart feeds and offers ui interactions about feeds such as
         * open a feeding list, add and delete feed items. User can open a feeding list by clicking the '+' icon at right of the feeding
         * container; add a feed item to the feed containers by dragging and dropping a object into the feeding container area or selecting
         * a feed item from the feeding list; delete a feed item from the feed containers by dragging and dropping a object outside the
         * feeding container area or clicking its 'Ã' icon after mousing over it.<br/><br/>
         *
         * @class sap.viz.controls.feeding.FeedingPanel
         * @param {HTMLElement}      dom                                      element to contain the control
         * @param {JSON}             [uiConfig]                               configuration for initialization to FeedingPanel. If this not
         * transferred, auto using the default uiconfig to create a feeding panel. Please refer to the following sample code for details.
         * @param {Boolean}          uiConfig.visible                         show or hide the control<br/>
         * @param {Boolean}          uiConfig.useBuildInFeedList              Whether using the built-in FeedList in our package
         * "./src/common/views/feed/FeedList.js"<br/>
         * @param {String}           uiConfig.defaultVizType                  default viz type<br/>
         * @param {Boolean}          uiConfig.enableTrellis                   Whether using trellis section of the control</br>
         * @extends sap.viz.controls.common.VizControlBase
         * @example <caption>sample code of getting the parameter "uiConfig":</caption>
         * <pre>
         * // 1. Create an uiconfig from empty object is not recommended.
         * var newUiConfig = {
         *      'visible' : true,
         *      'useBuildInFeedList' : true,
         *      'defaultVizType' : "viz/column",
         *      'enableTrellis' : true
         * };
         *
         * // 2. Use the default feeding panel uiconfig and customized is recommended.
         * var newUiConfig = FeedingPanel.instance();
         *
         * // Customize the default feeding panel uiconfig.
         * // Take not using trellis section of the feeding panel for example
         * newUiConfig.enableTrellis = false;
         * </pre>
         */
        var FeedingPanel = function(dom, uiConfig) {
            FeedingPanel.superclass.constructor.apply(this, arguments);
            this.__className = "sap.viz.controls.feeding.FeedingPanel";

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_feedingpanel_control');

            this._dom$ = $(dom);
            this._dom$.addClass([CSSConst.FEEDINGPANEL_PREFIX + "view", cssCommon + 'scrollable', cssCommon + 'scrollable-y'].join(' '));

            this._uiShelf = null;
            this._dicUIShelf = {};
            //the arrow icon for expanding or collapsing trellis section
            this._trellisArrowIcon$ = null;

            //the trelllis is collapsed by default
            this._trellisCollapsed = true;
            this._trellisDom$ = null;
            this._trellisContainer$ = null;

            // Feeding
            this._allAnalyses = null;

            // UI config
            this._uiConfig = uiConfig ? uiConfig : FeedingPanelConfig.instance();
            this._enableTrellis = (this._uiConfig.enableTrellis !== false);

            this._feedsUpdatedRequested = false;

            if (this._vizModel().type() === this._uiConfig.defaultVizType) {
                this._applyModel();
            } else {
                this._vizModel().type(this._uiConfig.defaultVizType);
            }
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_feedingpanel_control');
        };
        /**
         * Dispatches "requestFeed" event when click '+' icon at right of the feeding container and the flag useBuildInFeedList
         * of uiConfig values false, which means application does not use Viz Container's built-in feedlist. Then application
         * may need to pop up a customized feedlist, and dispatch a event with feed when a item selected.<br/>
         * Please ignore this event if using Viz Container's built-in feedlist.<br/>
         * <pre>
         * type: "requestFeed"
         * handler: function({
         *                    type: "requestFeed",
         *                    data: {
         *                        feedId: "<feedId>",
         *                        fieldLocalPosition: {shelfWidth, x, y}
         *                    }
         * })
         * </pre>
         * @event sap.viz.controls.feeding.FeedingPanel#requestFeed
         * @param {String} evt.type "requestFeed"
         * @param {String} evt.data.feedId "feedItem's id means which feeding container will be feeded"
         * @param {Object} evt.data.fieldLocalPosition "the data for calculating the location where the feed list will pop up at"
         * @param {Object} evt.data.fieldLocalPosition.shelfWidth "the width of a feeding shelf"
         * @param {Object} evt.data.fieldLocalPosition.x "the left position of a feeding shelf"
         * @param {Object} evt.data.fieldLocalPosition.y "the top position of a feeding shelf"
         * @example <caption>Sample code:</caption>
         * <pre>
         * var feedingPanel = new FeedingPanel(...);
         * var feedRequestHandler = function(event) {
         *     //User needs to build up a feedlist
         *     var feedList = new FeedList(...);
         *     //User needs to add item selected event for feedlist and handle it
         *     feedList.addEventListener('itemSelected', function(event) {
         *         var selectedItem = event.data.selectedItem;
         *         //Set back feeds by calling feedingPanel.feeds() API
         *         feedingPanel.feeds(selectedItem)
         *     }, this);
         *     //User needs to calculate the position feedlist pop up at.
         *     var popupPosition = feedList.calculatePopupPosition(event.fieldLocalPosition);
         *     feedList.open(popupPosition);
         * }
         * feedingPanel.addEventListener('requestFeed', feedRequestHandler);
         * </pre>
         */

        /**
         * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change FeedItems on feeding panel<br/>
         * Application should listen to "feedsChanged" event to get the corresponding data and set it back to VizFrame to
         * to update the visualization with the new data.
         *
         * <pre>
         * type: "feedsChanged"
         * handler: function({
         *                    type: "feedsChanged",
         *                    data: {
         *                        feeds: {Array<sap.viz.controls.common.FeedItem>}
         *                    }
         * })
         * </pre>
         * @event sap.viz.controls.feeding.FeedingPanel#feedsChanged
         * @param {String} evt.type "feedsChanged".
         * @param {Array<sap.viz.controls.common.FeedItem>} evt.data.feeds
         * @example <caption>Sample code:</caption>
         * <pre>
         * var feedingPanel = new FeedingPanel(...);
         * var feedsChangedHandler = function(event){
         *     var feeds = event.data.feeds;
         *     console.log(feeds);
         * }
         * feedingPanel.addEventListener('feedsChanged', feedsChangedHandler);
         * </pre>
         */

        /**
     * Dispatches "actionChanged" event when click setting icon of measure feed item that showed by mouse over the feed item, to pop
     * up a action list and select one item of the list. The application can handle something listed on the list about changing
     * the the current data by listening to this event, such as sorting by the current measures of data in ascending or descending order.
     * <pre>
     * type: "actionChanged"
     * handler: function({
     *                    type: "actionChanged",
     *                    data: {
     *                        feedItemID,
     *                        analysisObjectID,
     *                        actionID
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.feeding.FeedingPanel#actionChanged
     * @param {String} evt.type "actionChanged"
     * @param {String} evt.data.feedItemID
                       Which FeedItem id will be changed by the selected action.
     * @param {String} evt.data.analysisObjectID
                       Which measure item was clicked.
     * @param {String} evt.data.actionID
                       Which action was selected in the action list.
     * @example <caption>Sample code:</caption>
     * <pre>
     * var feedingPanel = new FeedingPanel(...);
     * var actionChangedHandler = function(event) {
     *     console.log(event.data);
     * }
     * feedingPanel.addEventListener('actionChanged', actionChangedHandler);
     * </pre>
     */

        OOUtil.extend(FeedingPanel, VizControlBase);

        /*
         * **************************************************************************
         * * Public API(s), which will be used by applications outside VizControls. *
         * **************************************************************************
         */

        /**
         * Get/Set all feeds data.
         * To get feeds, please use feeds() or feeds({withMND: true/false}). The feeds order is always same with the feeding
         * definition of chart.
         * If the user shows MND in UI,
         * with option {withMND : true}, return current feeds with MND;
         * with option {withMND : false}, return current feeds without MND;
         * with no option, return current feeds.
         * If the user doesn't show MND in UI, get feeds always return current feeds, the option value will be ignored.
         * To set feeds, please use feeds(feedItems).
         * @method sap.viz.controls.feeding.FeedingPanel.prototype.feeds
         * @param {Array<sap.viz.controls.common.FeedItem>|JSON} value
         * @return {Array<sap.viz.controls.common.FeedItem>} value
         * @example <caption>Sample code:</caption>
         * <pre>
         * var feedingPanel = new FeedingPanel(...);
         * //Set feeds, please refer to FeedItem for details.
         * var newFeeds = [
         *     new FeedItem("primaryValues", "Measure", [
         *         new AnalysisObject("M1", "M1", "measure", "number")]),
         *     new FeedItem("axisLabels", "Dimension", [
         *         new AnalysisObject("D1", "D1", "dimension", "string")]),
         *     new FeedItem("regionColor", "Dimension", [
         *         new AnalysisObject("D2", "D2", "dimension", "string")])
         * ];
         * feedingPanel.feeds(newFeeds);
         * //Get feeds
         * var currentFeeds = feedingPanel.feeds();
         * </pre>
         */
        FeedingPanel.prototype.feeds = function(value) {
            if (arguments.length > 0 && utils.isArray(value)) {
                if (value != null && !VizUtils.isArrayOfFeedItem(value)) {
                    return;
                }

                var type = this._vizModel().type();
                if (ChartTypeUtil.isGeo(type)) {
                    var newValue = [];
                    for (var i = 0; i < value.length; i++) {
                        newValue[i] = FeedUtils.cloneFeeds(value[i]);
                    }
                    this._vizModel().feedingItems(newValue, this._enableTrellis);
                } else {
                    var newValue = FeedUtils.cloneFeeds(value);
                    this._vizModel().feedingItems(newValue, this._enableTrellis);
                }
                return this;
            } else {
                return this._vizModel().explicitFeedingItems(value);
            }
        };
        FeedingPanel.prototype.playerField = function(value) {
            if (arguments.length > 0) {
                this._vizModel().playerField(value);
                return this;
            } else {
                return this._vizModel().playerField();
            }
        };

        /**
         * Get/Set available AnalysisObjects for object picker popup UI
         * @method sap.viz.controls.feeding.FeedingPanel.prototype.analysisObjectsForPicker
         * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
         * @return {Array<sap.viz.controls.common.feeds.AnalysisObject>}
         * @example <caption>Sample code:</caption>
         * <pre>
         * var feedingPanel = new FeedingPanel(...);
         * //Set analysisObjects, please refer to FeedItem for details.
         * var newAnalysisObjects = [
         *     new AnalysisObject("M1", "M1", "measure", "number"),
         *     new AnalysisObject("D1", "D1", "dimension", "string"),
         *     new AnalysisObject("D2", "D2", "dimension", "string")
         * ];
         * feedingPanel.analysisObjectsForPicker(newAnalysisObjects);
         * //Get analysisObjects
         * var currentAnalysisObjects = feedingPanel.analysisObjectsForPicker();
         * </pre>
         */
        FeedingPanel.prototype.analysisObjectsForPicker = function(analysisObjects) {
            if (arguments.length > 0) {
                if (analysisObjects != null && !VizUtils.isArrayOfAnalysisObject(analysisObjects)) {
                    return;
                }

                this._allAnalyses = analysisObjects;
            } else {
                return this._allAnalyses;
            }
        };

        /**
     * Update or add feed FeedItem
     * @method sap.viz.controls.feeding.FeedingPanel.prototype.feedAnalysisObjects
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     * @param {Boolean} [append]
                            optional, whether to append new feeds.
     *                      Default value is false.
     *                      If append is true, append new feeds.
     *                      If append is false, clean existing feeds.
     *
     * @return {Array<sap.viz.controls.common.feeds.FeedItem>} actually applied feeds by BVR (Best Visualization Recommendation)
     * @example <caption>Sample code:</caption>
     * <pre>
     * var feedingPanel = new FeedingPanel(...);
     * //Set analysisObjects, please refer to FeedItem for details.
     * var newAnalysisObjects = [
     *     new AnalysisObject("M1", "M1", "measure", "number"),
     *     new AnalysisObject("D1", "D1", "dimension", "string"),
     *     new AnalysisObject("D2", "D2", "dimension", "string")
     * ];
     * feedingPanel.feedAnalysisObjects(newAnalysisObjects, true);
     * //Get analysisObjects
     * var currentAnalysisObjects = feedingPanel.feedAnalysisObjects();
     * </pre>
     */
        FeedingPanel.prototype.feedAnalysisObjects = function(analysisObjects, append) {
            if (analysisObjects != null && !VizUtils.isArrayOfAnalysisObject(analysisObjects)) {
                return;
            }

            var model = this._vizModel();
            var bvrResult;
            if (append === true) {
                bvrResult = BVRService.suggestFeeds(model.type(), model.explicitFeedingItems(), analysisObjects);
            } else {
                bvrResult = BVRService.suggestFeeds(model.type(), analysisObjects);
            }
            if (bvrResult) {
                model.feedingItems(bvrResult.feeds);
            }
            return bvrResult.feeds;
        };
        /**
         * Serialize FeedingPanel to a JSON object. <br/>
         * @method sap.viz.controls.feeding.FeedingPanel.prototype.save
         * @return {JSON}
         */
        FeedingPanel.prototype.save = function() {
            var jsonValue = {};
            var type = this._vizModel().type();
            jsonValue['type'] = type;

            if (ChartTypeUtil.isGeo(type)) {
                var feedingItemsJSON = [];
                var feedingItems = this.feeds();
                for (var i = 0; i < feedingItems.length; i++) {
                    feedingItemsJSON[i] = FeedItem.toJSON(feedingItems[i]);
                }
                jsonValue["feedingItems"] = feedingItemsJSON;
            } else {
                jsonValue["feedingItems"] = FeedItem.toJSON(this.feeds());
            }

            return jsonValue;
        };
        /**
         * Deserialize FeedingPanel from JSON object.<br/>
         * @method sap.viz.controls.feeding.FeedingPanel.prototype.load
         * @param {JSON} valueJSON
         */
        FeedingPanel.prototype.load = function(valueJSON) {
            var migratedValueJSON = Serialization.migrateFeedingPanel(valueJSON);
            var type = migratedValueJSON.type;
            this._vizModel().type(type);
            var feedsJSON = migratedValueJSON.feedingItems;
            if (feedsJSON) {
                if (ChartTypeUtil.isGeo(type)) {
                    var feeds = [];
                    for (var i = 0; i < feedsJSON.length; i++) {
                        feeds[i] = FeedItem.fromJSON(feedsJSON[i]);
                    }
                    this.feeds(feeds);
                } else {
                    var feeds = FeedItem.fromJSON(feedsJSON);
                    if (feeds && feeds.length > 0) {
                        this.feeds(feeds);
                    }
                }
            }
            var playerField = this.playerField();
            if (playerField) {
                this._playerFieldShelf.analyses([playerField]);
            }

        };

        FeedingPanel.langProps = {
            'measures': 'VIZ_COMMON_MEASURES',
            'dimensions': 'VIZ_COMMON_DIMENSIONS',
            'subtotals': 'VIZ_COMMON_SUBTOTALS',
            'trellis': 'VIZ_COMMON_TRELLIS'
        };

        /*
         * ****************************************************************************
         * * Inner API(s), which will be used by other components inside VizControls. *
         * ****************************************************************************
         */

        /**
         * @override
         */
        FeedingPanel.prototype._onConnect = function(vizUid, modelChanged) {
            if (modelChanged) {
                this._vizModel().extensionValues({
                    feedingPanel: {
                        enableTrellis: this._enableTrellis
                    }
                });
                this._applyModel();
            }
        };
        /**
         * handler for chart model properties changed
         */
        FeedingPanel.prototype._onVizModelChanged = function(e) {
            var type = this._vizModel().type();
            if (ChartTypeUtil.isGeo(type)) {
                return;
            }
            if (e.data.vizTypeChanged) {
                this._applyModel();
            } else if (e.data.feedingItemsChanged || e.data.isMNDVisibleChanged || e.data.sliceDimensionChanged) {
                this._applyModel(false);
            }
        };
        FeedingPanel.prototype._getFeed = function(id) {
            var feedingItems = this._vizModel().feedingItems() || [];
            for (var i = 0; i < feedingItems.length; i++) {
                var fi = feedingItems[i];
                if (fi.id() === id) {
                    return fi;
                }
            }
            return null;
        };
        FeedingPanel.prototype._applyModel = function(redraw) {
            if (redraw !== false) {
                this._createShelves();
            }
            this._updateShelves();
        };
        FeedingPanel.prototype._createShelves = function() {
            var shelves = AutoFeedingUtils.getInitialShelves(this._vizModel().type());
            this._redrawShelves(shelves.measure, shelves.attribute, shelves.subtotal, shelves.trellis, shelves.playerField);
        };
        FeedingPanel.prototype._updateShelves = function() {
            var feedingItems = this._vizModel().explicitFeedingItems() || [];

            var traversal = function(handler) {
                for (var shelfID in this._dicUIShelf) {
                    if (this._dicUIShelf.hasOwnProperty(shelfID)) {
                        var uiShelf = this._dicUIShelf[shelfID];

                        var values = [];
                        for (var i = 0; i < feedingItems.length; i++) {
                            var fi = feedingItems[i];
                            if (fi.id() === uiShelf.shelf().id) {
                                values = fi.values();
                            }
                        }
                        handler(uiShelf, values);
                    }
                }
            };
            var measureNames = [];
            traversal.call(this, function(uiShelf, values) {
                for (var i = 0; i < values.length; i++) {
                    var analysis = values[i];
                    if (AnalyticalType.compatible(AnalyticalType.MEASURE, analysis.type())) {
                        measureNames.push(analysis.name());
                    }
                }
            });
            traversal.call(this, function(uiShelf, values) {
                for (var i = 0; i < values.length; i++) {
                    var analysis = values[i];
                    if (AnalyticalType.compatible(AnalyticalType.MND, analysis.type())) {
                        analysis.name('(' + measureNames.join(',') + ')');
                    }
                }
                uiShelf.analyses(values);
            });
            var playerField = this.playerField();
            if (this._playerFieldShelf) {
                if (playerField) {
                    this._playerFieldShelf.analyses([playerField]);
                } else {
                    this._playerFieldShelf.analyses([]);
                }
            }
        };

        /**
         * whether shelves has changed
         */
        FeedingPanel.prototype._isShelvesEqual = function(shelves1, shelves2) {
            if (null == shelves1 || null == shelves2 || shelves1.length !== shelves2.length) {
                return false;
            }
            for (var i = 0; i < shelves1.length; i++) {
                var shelve1 = shelves1[i];
                var shelve2 = shelves2[i];
                if (!shelve1.equals(shelve2)) {
                    return false;
                }
            }
            return true;
        };
        /**
         *
         * @param {Object} measureShelves Array of Shelf
         * @param {Object} attributeShelves Array of Shelf
         * @param {Object} subtotalShelves Array of shelf
         * @param {Object} trellisShelves Array of Shelf
         */
        FeedingPanel.prototype._redrawShelves = function(measureShelves, attributeShelves, subtotalShelves, trellisShelves, playerField) {
            var uiShelf;
            if (this._oldvizModelType) {
                var oldShelves = AutoFeedingUtils.getInitialShelves(this._oldvizModelType);
                if (this._isShelvesEqual(measureShelves, oldShelves.measure) && this._isShelvesEqual(attributeShelves, oldShelves.attribute) && this._isShelvesEqual(subtotalShelves, oldShelves.subtotal) && this._isShelvesEqual(trellisShelves, oldShelves.trellis) && ChartTypeUtil.supportAnimation(this._vizModel().type()) == ChartTypeUtil.supportAnimation(this._oldvizModelType)) {
                    return;
                }
            }
            // Clear old shelves
            this._dom$.empty();

            for (var shelfID1 in this._dicUIShelf) {
                if (this._dicUIShelf.hasOwnProperty(shelfID1)) {
                    uiShelf = this._dicUIShelf[shelfID1];
                    uiShelf.destroy();
                }
            }
            this._dicUIShelf = {};
            this._playerFieldShelf = null;
            // Create new
            this._createSection(LangManager.get(FeedingPanel.langProps['measures']), measureShelves);
            this._createSection(LangManager.get(FeedingPanel.langProps['dimensions']), attributeShelves);
            this._createSection(LangManager.get(FeedingPanel.langProps['subtotals']), subtotalShelves);
            if (ChartTypeUtil.supportAnimation(ChartTypeUtil.toSingleChartType(this._vizModel().type()))) {
                this._createPlayerField();
            }
            if (this._enableTrellis) {
                this._createSection(LangManager.get(FeedingPanel.langProps['trellis']), trellisShelves);
            }
            // Set feeds
            for (var shelfID2 in this._dicUIShelf) {
                if (this._dicUIShelf.hasOwnProperty(shelfID2)) {
                    uiShelf = this._dicUIShelf[shelfID2];

                    uiShelf.addEventListener(FeedingShelfEvent.CLICK_ADD_FEEDING, this._clickAddFeeding, this);
                    uiShelf.addEventListener(FeedingShelfEvent.FEEDING_CHANGED, this._deferFeedsUpdated, this);
                    uiShelf.addEventListener(FeedingShelfEvent.FEEDING_EMPTY_CHANGED, this._dragToUpdateShelvesStatus, this);
                    uiShelf.addEventListener(FeedingShelfEvent.FEEDING_DROP_DENY, this._updateShelvesStatus, this);
                    uiShelf.addEventListener(FeedingShelfEvent.ACTION_CHANGED, this._actionChangedHandler, this);
                }
            }

            if (this._playerFieldShelf) {
                this._playerFieldShelf.addEventListener(PlayerFieldShelfEvent.CLICK_ADD_PLAYER_FIELD, this._clickAddPlayerField, this);
                this._playerFieldShelf.addEventListener(PlayerFieldShelfEvent.PLAYER_FIELD_CHANGED, this._deferFeedsUpdated, this);
                this._playerFieldShelf.addEventListener(PlayerFieldShelfEvent.PLAYER_FIELD_EMPTY_CHANGED, this._dragToUpdateShelvesStatus, this);
                this._playerFieldShelf.addEventListener(PlayerFieldShelfEvent.PLAYER_FIELD_DROP_DENY, this._updateShelvesStatus, this);
            }

            this._oldvizModelType = this._vizModel().type();
        };
        FeedingPanel.prototype._clickAddFeeding = function(event) {
            var uiShelf = event.target();
            this._uiShelf = uiShelf;
            if (this._uiConfig && this._uiConfig.useBuildInFeedList === true) {
                var shelf = uiShelf.shelf();
                var dom = document.createElement('div');
                var fi = this._getFeed(shelf.id);
                var currentValues = fi ? fi.values() : [];
                if (shelf.id === FeedItemType.ROW_SUBTOTALS || shelf.id === FeedItemType.COLUMNS_SUBTOTALS) {
                    // decode the current objects in the currentValues array as their ID's are used to determine which 
                    // objects to exclude from the list in the object picker when creating a new FeedList.. 
                    for (var j = 0; j < currentValues.length; j++) {
                        var tmpId;
                        if (currentValues[j].aggregationTarget() !== undefined) {
                            tmpId = currentValues[j].aggregationTarget();
                        } else {
                            tmpId = utils.decode(currentValues[j].id())[0];
                        }
                        currentValues[j].id(tmpId);
                    }
                    for (var i = currentValues.length - 1; i >= 0; i--) {
                        // we only want to hide/remove those objects from the object picker if their aggregation is of type TOTAL
                        if (currentValues[i].aggregationType() !== null && currentValues[i].aggregationType() !== SubtotalItemType.TOTAL) {
                            currentValues.splice(i, 1);
                        }
                    }
                    var feedList = new FeedList(dom, SubtotalItemType.sanitizeAnalysisObjects(this._allAnalyses), shelf.feedItemType, currentValues);
                } else {
                    var feedList = new FeedList(dom, this._allAnalyses, shelf.feedItemType, currentValues);
                }

                feedList.addEventListener(FeedListEvent.ITEM_SELECTED, function(event) {
                    var selectedItem = event.data.selectedItem;
                    uiShelf.addAnalysis(selectedItem);
                }, this);
                feedList.open(uiShelf.popUpDock());
            } else {
                this._dispatchEvent(new FeedEvent(FeedEvent.REQUEST_FEED, this, {
                    'feedId': uiShelf.shelf().id,
                    'fieldLocalPosition': uiShelf.popUpDock()
                }));
            }
        };

        FeedingPanel.prototype._clickAddPlayerField = function(event) {
            var playerFieldShelf = event.target();
            this._playerFieldShelf = playerFieldShelf;
            var shelf = playerFieldShelf.shelf();
            var dom = document.createElement('div');
            var fi = this._getFeed(shelf.id);
            var currentValues = fi ? fi.values() : [];
            var feedList = new FeedList(dom, this._allAnalyses, shelf.feedItemType, currentValues);
            var that = this;
            feedList.addEventListener(FeedListEvent.ITEM_SELECTED, function(event) {
                var selectedItem = event.data.selectedItem;
                that.playerField(selectedItem);
            }, this);
            feedList.open(playerFieldShelf.popUpDock());
        };

        FeedingPanel.prototype._actionChangedHandler = function(event) {

            if (event.data.feedItemID === FeedItemType.ROWS && event.data.actionID.indexOf(SubtotalItemType.action) !== -1) {
                aggregationType = SubtotalItemType.getAggregationType(event.data.actionID);

                if (aggregationType === null) {
                    return;
                }

                this.updateSubtotalsWithRowAction(aggregationType, event.data.analysisObjectID, event.data.feedItemID);
            }

            this._dispatchEvent(new FeedingPanelEvent(FeedingPanelEvent.ACTION_CHANGED, this, {
                'feedItemID': event.data.feedItemID,
                'analysisObjectID': event.data.analysisObjectID,
                'actionID': event.data.actionID
            }));
        };
        /**
         * Defer the update, since drag&drop will dispatch 2 events in same time
         */
        FeedingPanel.prototype._deferFeedsUpdated = function(event) {
            if (!this._feedsUpdatedRequested) {
                this._feedsUpdatedRequested = true;
                utils.defer($.proxy(function() {
                    this._feedsUpdatedRequested = false;
                    // Has been destroyed when dom is null
                    if (this._dom) {
                        this._feedsUpdated();
                    }
                }, this));
            }

        };

        /**
         * Create feeding containers such as measures, attributes and trellis, each of which contains title and feeding shelves.
         * @param {Object} title "type of shelf, such as measures, attributes and trellis"
         * @param {Object} shelves
         */
        FeedingPanel.prototype._createSection = function(title, shelves) {
            if (shelves.length === 0) {
                return;
            }
            var child$ = $(document.createElement('div')).appendTo(this._dom$);
            // Title
            var title$ = $(document.createElement('div')).appendTo(child$);
            title$.addClass(CSSConst.FEEDINGPANEL_PREFIX + "title-without-icon");
            var titleText$ = $(document.createElement('label')).appendTo(title$);
            titleText$.addClass(CSSConst.FEEDINGPANEL_PREFIX + "title-text");
            titleText$.text(title);

            // Separator
            var separator$ = $(document.createElement('div')).appendTo(child$);
            separator$.addClass(CSSConst.FEEDINGPANEL_PREFIX + "separator");

            // Container
            var container$ = $(document.createElement('div')).appendTo(child$);
            container$.addClass(CSSConst.FEEDINGPANEL_PREFIX + "container");

            var vizModel = this._vizModel();
            for (var i = 0; i < shelves.length; i++) {
                var shelf = shelves[i];

                // Draw DOM
                var uiShelf = new FeedingShelf(document.createElement('div'), shelf, this._uiConfig.measure);
                //set the add icon state
                if (vizModel) {
                    this._setUiShelfAddIconState(uiShelf, vizModel);
                }
                container$.append(uiShelf._dom);

                // Save ui shelf
                this._dicUIShelf[shelf.id] = uiShelf;
            }

            // Add arrow icon to trellis section
            if (shelves[0].type === "trellis") {
                this._trellisDom$ = child$;
                title$.removeClass(CSSConst.FEEDINGPANEL_PREFIX + "title-without-icon");
                title$.addClass(CSSConst.FEEDINGPANEL_PREFIX + "title-with-icon");
                var arrowIcon$ = this._trellisArrowIcon$ = $(document.createElement('div'));
                arrowIcon$.appendTo(title$);
                arrowIcon$.click($.proxy(this._trellisArrowIconClickHandler, this));
                titleText$.click($.proxy(this._trellisArrowIconClickHandler, this));
                this._trellisContainer$ = container$;
                this._updateTrellisSection(this._trellisCollapsed);
            }
        };

        FeedingPanel.prototype._createPlayerField = function() {

            var child$ = $(document.createElement('div')).appendTo(this._dom$);

            // Container
            var container$ = $(document.createElement('div')).appendTo(child$);
            container$.addClass(CSSConst.FEEDINGPANEL_PREFIX + "container");

            // Draw DOM
            var playerFieldShelf = new PlayerFieldShelf(document.createElement('div'));
            container$.append(playerFieldShelf._dom);

            // Save ui shelf
            this._playerFieldShelf = playerFieldShelf;
        };


        /**
         * TODO: set uiShelf add icon state
         * @param {Object} uiShelf
         * @param {Object} vizModel
         * @private
         */
        FeedingPanel.prototype._setUiShelfAddIconState = function(uiShelf, vizModel) {
            var feedItems = FeedUtils.cloneFeeds(vizModel.feedingItems());
            //get feedDefsMap according to the current type for enable feeding logic
            var type = vizModel.type();
            var shelfId = uiShelf._shelf.id;
            //this map is not only for single or multi chart type but for the shelves ui.
            var feedDefsMap = FeedUtils.getManifestFeedsMap(type);
            //current type is single chart but the current shelves ui has trellis,
            //then need to add multiplier feedDef to the current feedDefsMap
            if (!ChartTypeUtil.isMultipleChart(type) && ChartTypeUtil.supportMultiChart(type)) {
                var multiType = ChartTypeUtil.toMultiChartType(type);
                var multiFeedDefsMap = FeedUtils.getManifestFeedsMap(multiType);
                var supportMultiChart = FeedUtils.supportMultiChart(feedItems, multiFeedDefsMap);
                if (supportMultiChart) {
                    var multiplierFeedDef = multiFeedDefsMap[FeedUtils.MultiplierFeedingName];
                    feedDefsMap[FeedUtils.MultiplierFeedingName] = multiplierFeedDef;
                }
            }
            var isMNDVisible = vizModel.isMNDVisible();
            // This flag means a common(not mnd) value but not a mnd value will be added,
            // since mnd cannot be added from the pop-up feeding list.
            // Enablefeeding logic is related to add common(not mnd) or mnd value.
            var isMND = false;
            var feedId = shelfId;
            var canAdd, feedItem;
            if (uiShelf) {
                if (uiShelf.shelf().analysisType === AnalyticalType.MEASURE) {
                    feedItem = this._getFeed(feedId);
                    canAdd = ((feedItem ? feedItem.values().length : 0) < uiShelf.shelf().capacity);
                } else {
                    if (shelfId === FeedUtils.RowsFeedingName || shelfId === FeedUtils.ColumnsFeedingName) {
                        feedId = FeedUtils.MultiplierFeedingName;
                    }
                    if (feedId === FeedUtils.MultiplierFeedingName && this.playerField()) {
                        canAdd = false;
                    } else {
                        canAdd = FeedUtils.canAddValue(feedItems, shelfId, feedDefsMap, isMNDVisible, isMND, feedId);
                    }
                }
                uiShelf.enableFeeding(canAdd);
            }
        };



        /**
         * TODO: Add comments.
         * @private
         */
        FeedingPanel.prototype._feedsUpdated = function() {
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:update_feeds');

            var vizModel = this._vizModel();

            var playerField = this.playerField();
            if (this._playerFieldShelf) {
                playerField = this._playerFieldShelf.analyses()[0];
            }

            var newFeeds = [];
            for (var shelfID in this._dicUIShelf) {
                if (this._dicUIShelf.hasOwnProperty(shelfID)) {
                    var uiShelf = this._dicUIShelf[shelfID];
                    var shelf = uiShelf.shelf();
                    // compare subtotals and rows!
                    if (shelfID === FeedItemType.ROW_SUBTOTALS || shelfID === FeedItemType.ROWS) {
                        // if we detect that rows & row subtotals are out of sync, we need to update both shelves.
                        this._compareRowsAndSubtotals(this._dicUIShelf);
                        // row subtotals
                        newFeeds.push(new FeedItem(FeedItemType.ROW_SUBTOTALS, FeedItemType.CALCULATION, this._dicUIShelf[FeedItemType.ROW_SUBTOTALS].analyses()));
                        // rows
                        newFeeds.push(new FeedItem(FeedItemType.ROWS, FeedUtils.convertFeedType(shelf.feedItemType), this._dicUIShelf[FeedItemType.ROWS].analyses()));

                        this._compareRowsAndSubtotalsForHierarchies(this._dicUIShelf);

                        break;

                    }

                    newFeeds.push(new FeedItem(shelf.id, FeedUtils.convertFeedType(shelf.feedItemType), uiShelf.analyses()));
                }
            }

            var feedingItems = vizModel.explicitFeedingItems();
            var feedsChanged = !FeedUtils.equal(feedingItems, newFeeds);

            if (feedsChanged) {
                vizModel.feedingItems(newFeeds);
                this._dispatchEvent(new FeedEvent(FeedEvent.FEEDS_CHANGED, this, {
                    'feeds': this.feeds()
                }));
            }

            if (this._playerFieldShelf) {
                vizModel.playerField(playerField);
            }

            this._updateShelvesStatus();

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:update_feeds');
        };



        /* Function updates either Row or Row subtotals shelves to ensure that for each hierarchy object
         * to corresponding level is displayed if you update which level is shown on either shelf
         *
         *
         */
        FeedingPanel.prototype._compareRowsAndSubtotalsForHierarchies = function(dicUIShelf) {

            var subTotals_uiShelf = null;
            var row_uiShelf = null;
            // assign the uiShelf from the feedItem ID
            for (var shelfID in this._dicUIShelf) {
                // capture each shelf
                if (shelfID === FeedItemType.ROWS) {
                    row_uiShelf = this._dicUIShelf[shelfID];
                }
                if (shelfID == FeedItemType.ROW_SUBTOTALS) {
                    subTotals_uiShelf = this._dicUIShelf[shelfID];
                }
            }


            var rowAnalyses = row_uiShelf.analyses();
            var subtotalsAnalyses = subTotals_uiShelf.analyses();

            // update the Subtotals shelf as row_uiShelf was just modified
            if (row_uiShelf.lastHierarchyOjbectUpdated()) {

                for (var i = 0; i < subtotalsAnalyses.length; i++) {
                    var curAnalysisObject = subtotalsAnalyses[i];
                    if (curAnalysisObject.id().indexOf(row_uiShelf.lastHierarchyOjbectUpdated().id()) > -1) {

                        var hierarchyLevelsToUpdate = curAnalysisObject.hierarchyLevels();
                        var lastSelectedLevel = row_uiShelf.lastHierarchyOjbectUpdated().selectedHierarchyLevel();

                        for (var j = 0; j < hierarchyLevelsToUpdate.length; j++) {
                            var levelToUpdate = hierarchyLevelsToUpdate[j];
                            if (levelToUpdate.id() === lastSelectedLevel.id()) {
                                curAnalysisObject.selectedHierarchyLevelID(levelToUpdate.id());
                            }
                        }
                    }
                }
            }
            // update the Row shelf as the subTotals_uiShef was just modified
            else if (subTotals_uiShelf.lastHierarchyOjbectUpdated()) {

                for (var i = 0; i < rowAnalyses.length; i++) {
                    var curAnalysisObject = rowAnalyses[i];
                    if (subTotals_uiShelf.lastHierarchyOjbectUpdated().id().indexOf(curAnalysisObject.id()) > -1) {

                        var hierarchyLevelsToUpdate = curAnalysisObject.hierarchyLevels();
                        var lastSelectedLevel = subTotals_uiShelf.lastHierarchyOjbectUpdated().selectedHierarchyLevel();

                        for (var j = 0; j < hierarchyLevelsToUpdate.length; j++) {
                            var levelToUpdate = hierarchyLevelsToUpdate[j];
                            if (levelToUpdate.id() === lastSelectedLevel.id()) {
                                curAnalysisObject.selectedHierarchyLevelID(levelToUpdate.id());
                            }
                        }
                    }
                }
            }


            row_uiShelf.lastHierarchyOjbectUpdated(null);
            subTotals_uiShelf.lastHierarchyOjbectUpdated(null);
        };

        /* Function updates the subtotal shelf with the cooresponding aggregationtype and 
         * analysis object from the row shelf, invoked
         *
         *
         */
        FeedingPanel.prototype.updateSubtotalsWithRowAction = function(aggregationType, analysisObjectID, feedItemID) {

            var subTotals_uiShelf = null;
            var row_uiShelf = null;
            var analysisObjectToAdd = null;

            // assign the uiShelf from the feedItem ID
            for (var shelfID in this._dicUIShelf) {
                // capture each shelf
                if (shelfID === FeedItemType.ROWS) {
                    row_uiShelf = this._dicUIShelf[shelfID];
                }
                if (shelfID == FeedItemType.ROW_SUBTOTALS) {
                    subTotals_uiShelf = this._dicUIShelf[shelfID];
                }
            }

            // extract the analysis object from the row shelf
            if (row_uiShelf) {

                var rowAnalyses = row_uiShelf.analyses();
                for (var i = 0; i < rowAnalyses.length; i++) {
                    if (rowAnalyses[i].id() === analysisObjectID) {
                        analysisObjectToAdd = rowAnalyses[i].clone();
                    }
                }
            }

            // we have the shelf and analysis object we want to perform actions on
            if (subTotals_uiShelf && analysisObjectToAdd) {
                var id = analysisObjectToAdd.id();
                analysisObjectToAdd.id(utils.encode(id, aggregationType));
                analysisObjectToAdd.aggregationType(aggregationType);
                analysisObjectToAdd.aggregationTarget(utils.decode(id)[0]);
                analysisObjectToAdd.actions(null);

                subTotals_uiShelf.addAnalysis(analysisObjectToAdd);

            }

        };
        /**
         * We need to determine if the shelf that was updated was the table subtotals,
         * if so we need a way to update the rows as well.
         * @param {object} dicUIShelf
         * @private
         */
        FeedingPanel.prototype._compareRowsAndSubtotals = function(dicUIShelf) {

            var subTotals_uiShelf;
            var row_uiShelf;
            var dimensionRemoved = true;

            for (var shelfID in this._dicUIShelf) {
                if (this._dicUIShelf.hasOwnProperty(shelfID)) {
                    var uiShelf = this._dicUIShelf[shelfID];

                    // capture each shelf
                    if (shelfID === FeedItemType.ROWS) {
                        row_uiShelf = uiShelf;
                    }
                    if (shelfID == FeedItemType.ROW_SUBTOTALS) {
                        subTotals_uiShelf = uiShelf;
                    }
                }
            }
            // Check to make sure that Dimension is actually removed.
            if (row_uiShelf._lastAnalysisObjectRemoved !== null && row_uiShelf.analyses().length !== 0) {
                for (var i = 0; i < row_uiShelf.analyses().length; i++) {
                    if (row_uiShelf._lastAnalysisObjectRemoved.id() === row_uiShelf.analyses()[i].id()) {
                        dimensionRemoved = false;
                    }
                }
            }

            /* There are TWO distinct workflows 
             * 1: we add to the subtotals, we add to the rows, we delete from the ROWS we delete
             *    from the subtotals
             * 2: we add to the subtotals, we add to the rows, we delete from the SUBTOTALS we do
             *    NOT delete from the rows
             * We need to discern the workflows by having a token that will be present when one of the
             * paths is chosen, for this we are using the twin analysis object that will be present when the
             * second workflow has taken place. we then use the presense of this token to determine how to
             * handle the behaviour between the two shelves.
             */


            // Store the last removed object from the subtotals onto the rowshelf for verification
            // later
            var subtotalsLastRemovedAnalysisObject = subTotals_uiShelf._lastAnalysisObjectRemoved;
            if (subtotalsLastRemovedAnalysisObject !== null) {

                row_uiShelf._lastTwinAnalysisObjectRemoved = subtotalsLastRemovedAnalysisObject;
            }

            // Ensure consistancy between row axis and row subtotals
            var subTotalsAnalysesLen = subTotals_uiShelf.analyses().length;
            var listOfSubTotalsCardsToRemove = [];
            for (var i = 0; i < subTotalsAnalysesLen; i++) {

                var curSubTotalAnalysisObj = subTotals_uiShelf.analyses()[i];
                var subTotalsAnalyses = subTotals_uiShelf.analyses();
                var tmpObjForRow = curSubTotalAnalysisObj.clone();
                var tmpObjForSubtotal = curSubTotalAnalysisObj.clone();

                // Check to ensure that if Dragged into Subtotals shelf from Row Axis Shelf, row_uiShel._lastTwinAnalysisObject is updated with this information  
                if (!curSubTotalAnalysisObj.aggregationType() && row_uiShelf._lastTwinAnalysisObjectRemoved === null) {
                    row_uiShelf._lastTwinAnalysisObjectRemoved = curSubTotalAnalysisObj;
                    for (var i = 0; i < row_uiShelf.analyses().length; i++) {
                        if (curSubTotalAnalysisObj.id() === row_uiShelf.analyses()[i].id()) {
                            row_uiShelf._lastTwinAnalysisObjectRemoved = null;
                            break;
                        }
                    }
                }
                /* Workflow 1 
                 * We've removed from the row axis check to see if analysisObject exists in subtotals and remove
                 */
                if (row_uiShelf._lastTwinAnalysisObjectRemoved === null) {
                    if (row_uiShelf._lastCardRemoved !== null && this._analysisObjectInShelfAnalyses(row_uiShelf._lastAnalysisObjectRemoved, subTotals_uiShelf.analyses())) {

                        var cardToRemove = row_uiShelf._lastCardRemoved;
                        var analysisObjectToRemove = row_uiShelf._lastAnalysisObjectRemoved;

                        var subTotalTarget;
                        if (curSubTotalAnalysisObj.aggregationTarget() !== undefined) {
                            subTotalTarget = curSubTotalAnalysisObj.aggregationTarget();
                        } else {
                            subTotalTarget = utils.decode(curSubTotalAnalysisObj._id)[0];
                        }

                        if (subTotalTarget === analysisObjectToRemove._id) {
                            var subTotalCardToRemove = subTotals_uiShelf.getCardFromAnalysisObject(curSubTotalAnalysisObj);
                            if (subTotalCardToRemove) {
                                listOfSubTotalsCardsToRemove.push(subTotalCardToRemove);
                            }
                        }
                    } else if (!this._analysisObjectInShelfAnalyses(curSubTotalAnalysisObj, row_uiShelf.analyses())) {

                        row_uiShelf.addAnalysis(tmpObjForRow);

                        FeedingPanel.updateSubtotalsAnalysisObject(tmpObjForSubtotal, SubtotalItemType.TOTAL, subTotalsAnalyses, i, subTotals_uiShelf);

                    } else if (!curSubTotalAnalysisObj.aggregationType()) {

                        FeedingPanel.updateSubtotalsAnalysisObject(tmpObjForSubtotal, SubtotalItemType.TOTAL, subTotalsAnalyses, i, subTotals_uiShelf);

                    } else if (curSubTotalAnalysisObj.aggregationType() && this._analysisObjectInShelfAnalyses(curSubTotalAnalysisObj, row_uiShelf.analyses()) &&
                        this._compareSubtotalNameToParentDimension(curSubTotalAnalysisObj, row_uiShelf.analyses())) {
                        // case where we are loading the dimension from a saved document
                        FeedingPanel.updateSubtotalsAnalysisObject(tmpObjForSubtotal, curSubTotalAnalysisObj.aggregationType(), subTotalsAnalyses, i, subTotals_uiShelf);
                    }

                }
                /* Workflow 2
                 *
                 */
                else if (row_uiShelf._lastTwinAnalysisObjectRemoved) {

                    if (!this._analysisObjectInShelfAnalyses(curSubTotalAnalysisObj, row_uiShelf.analyses())) {

                        row_uiShelf.addAnalysis(tmpObjForRow);
                        FeedingPanel.updateSubtotalsAnalysisObject(tmpObjForSubtotal, SubtotalItemType.TOTAL, subTotalsAnalyses, i, subTotals_uiShelf);

                    } else if (!curSubTotalAnalysisObj.aggregationType()) {

                        FeedingPanel.updateSubtotalsAnalysisObject(tmpObjForSubtotal, SubtotalItemType.TOTAL, subTotalsAnalyses, i, subTotals_uiShelf);
                    }

                    row_uiShelf.resetTwinAnalysisObject();
                    subTotals_uiShelf.resetLastRemoved();
                }
            }
            // remove the cards that have been marked to be removed
            if (listOfSubTotalsCardsToRemove.length > 0) {

                row_uiShelf.resetLastRemoved();
                subTotals_uiShelf.resetLastRemoved();

                if (dimensionRemoved === true) {
                    for (var l = 0; l < listOfSubTotalsCardsToRemove.length; l++) {
                        subTotals_uiShelf.removeCard(listOfSubTotalsCardsToRemove[l]);
                    }
                }
            }
        };


        /* Helper Function to abstract routine subtotals analysis object updating
         * @param {AnalysisObject} tmpSubTotalsAnalysisObject
         * @param {SubtotalItemType} aggregationType
         * @param {List} subTotalsAnalyses
         * @param {index} index
         * @param {FeedingShelf} subtotalsUIShelf
         */
        FeedingPanel.updateSubtotalsAnalysisObject = function(tmpSubTotalsAnalysisObject, aggregationType, subTotalsAnalyses, index, subtotalsUIShelf) {


            if (tmpSubTotalsAnalysisObject.dataType() === FeedItemType.LEVEL || tmpSubTotalsAnalysisObject.dataType() === FeedItemType.HIERARCHY) {

                var levels = tmpSubTotalsAnalysisObject.hierarchyLevels();

                for (var i = 0; i < levels.length; i++) {

                    var tmpLevel = levels[i];

                    if (tmpLevel.selected()) {

                        tmpLevel._name = SubtotalItemType.getSubTotalsAggregationDisplayType(aggregationType) + " " + tmpLevel._name;
                    }
                }

            } else {

                tmpSubTotalsAnalysisObject.name(SubtotalItemType.getSubTotalsAggregationDisplayType(aggregationType) + " " + tmpSubTotalsAnalysisObject.name());
            }
            var id = tmpSubTotalsAnalysisObject.id();
            tmpSubTotalsAnalysisObject.aggregationType(aggregationType);
            if (tmpSubTotalsAnalysisObject.aggregationTarget() !== undefined) {
                tmpSubTotalsAnalysisObject.aggregationTarget(tmpSubTotalsAnalysisObject.aggregationTarget());
            } else {
                tmpSubTotalsAnalysisObject.aggregationTarget(utils.decode(id)[0]);
            }
            tmpSubTotalsAnalysisObject.id(utils.encode(id, aggregationType));
            tmpSubTotalsAnalysisObject.actions(null);
            if (subtotalsUIShelf.analyses().length > 1) {
                temp = tmpSubTotalsAnalysisObject.id().split("_encoded")[0];
                for(var q = 0; q < subtotalsUIShelf.analyses().length; q++) {
                    if (temp === subtotalsUIShelf.analyses()[q].id()) {
                        index = q;
                        break;
                    } 
                }
            }

            subTotalsAnalyses[index] = tmpSubTotalsAnalysisObject;
            subtotalsUIShelf.analyses(subTotalsAnalyses);

        };

        /**
         * Checks to see if a specific token is found within the analysis objects name
         * function will return true, false if the substring is not found
         * @return bool
         * @param {object} token
         * @private
         */
        FeedingPanel.foundTokenInName = function(analysisObject, token) {

            if (analysisObject._name.indexOf(token) === -1) {
                return false;
            } else {
                return true;
            }

        };


        /**
         * Check that the analysis object is within the list ofr analyses, returns true if found
         * false if not found
         * @return bool
         * @param {object} analysisObj
         * @param {array} analyses
         */
        FeedingPanel.prototype._analysisObjectInShelfAnalyses = function(analysisObj, analyses) {

            for (var i = 0; i < analyses.length; i++) {
                var tmpAnalysisObject = analyses[i];
                var tmpDecodedId = utils.decode(tmpAnalysisObject.id())[0];
                var decodedId = utils.decode(analysisObj.id())[0];
                if (tmpDecodedId === decodedId) {
                    return true;
                } else if (tmpAnalysisObject.aggregationTarget() !== undefined && decodedId === tmpAnalysisObject.aggregationTarget()) {
                    return true;
                } else if (analysisObj.aggregationTarget() !== undefined && tmpDecodedId === analysisObj.aggregationTarget()) {
                    return true;
                }
            }

            return false;
        };

        /**
         * Check that the analysis object's name matches the one in the list of analyses, this is used in the case
         * where we are compairing one shelves analysis object against another shelves
         * @param {object} analysisObj
         * @param {array} analyses
         * @return bool
         */
        FeedingPanel.prototype._compareSubtotalNameToParentDimension = function(analysisObj, analyses) {

            for (var i = 0; i < analyses.length; i++) {

                var tmpAnalysisObject = analyses[i];

                // check the the hierarchical objects
                if ((analysisObj.dataType() === FeedItemType.LEVEL || analysisObj.dataType() === FeedItemType.HIERARCHY) &&
                    (tmpAnalysisObject.dataType() === FeedItemType.LEVEL || tmpAnalysisObject.dataType() === FeedItemType.HIERARCHY)) {
                    var tmpId;
                    if (analysisObj.aggregationTarget() !== undefined) {
                        tmpId = analysisObj.aggregationTarget();
                    } else {
                        tmpId = utils.decode(analysisObj.id())[0];
                    }
                    if (tmpId === tmpAnalysisObject.id()) {

                        var levelsONE = analysisObj.hierarchyLevels();
                        var levelsTWO = tmpAnalysisObject.hierarchyLevels();

                        for (var j = 0; j < levelsONE.length; j++) {

                            var tmpLevelsONE = levelsONE[j];

                            if (tmpLevelsONE.selected()) {

                                for (var k = 0; k < levelsTWO.length; k++) {

                                    var tmpLevelsTWO = levelsTWO[k];

                                    if (tmpLevelsTWO.selected()) {

                                        if (tmpLevelsTWO.name() === tmpLevelsONE.name()) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else if (tmpAnalysisObject.name() === analysisObj.name()) {

                    return true;
                }
            }

            return false;



        };

        /**
         * Update enable feeding of each shelf when drag a card from one shelf to any other
         */
        FeedingPanel.prototype._dragToUpdateShelvesStatus = function(event) {
            var eventData = event.data;
            var analysisObject = eventData.analysisObject;
            var feedId = eventData.feedId;

            var vizModel = this._vizModel();
            if (vizModel) {
                //get a feeds by removing the analysis object of the dragging card for enable feeding logic
                var feedsWhenDragOut = FeedUtils.cloneFeeds(vizModel.feedingItems());
                for (var i = 0; i < feedsWhenDragOut.length; i++) {
                    var feedItem = feedsWhenDragOut[i];
                    if (feedItem.id() === feedId) {
                        var values = feedItem.values();
                        for (var i = 0; i < values.length; i++) {
                            var a = values[i];
                            if (a.id() === analysisObject.id()) {
                                values.splice(i, 1);
                                break;
                            }
                        }
                        break;
                    }
                }

                var curType = utils.clone(vizModel.type());
                var curFeedDefsMap = FeedUtils.getManifestFeedsMap(curType);

                //this map is not only for single or multi chart type but for the shelves ui.
                var feedDefsMap;
                //get manifest according to the feedsWhenDragOut
                if (ChartTypeUtil.isMultipleChart(curType)) {
                    var haveRowColumn = FeedUtils.hasRowOrColumn(feedsWhenDragOut);
                    if (haveRowColumn) {
                        feedDefsMap = curFeedDefsMap;
                    } else { //may drag to be single chart
                        //feed manifest is from two parts: single manifest and trellis manifest
                        var singleType = ChartTypeUtil.toSingleChartType(curType);
                        //TODO: if this case existed, multi feeds cannot meet single manifest?
                        feedDefsMap = FeedUtils.getManifestFeedsMap(singleType);
                        var multiplierFeedDef = curFeedDefsMap[FeedUtils.MultiplierFeedingName];
                        feedDefsMap[FeedUtils.MultiplierFeedingName] = multiplierFeedDef;
                    }
                } else {
                    feedDefsMap = curFeedDefsMap;
                    if (ChartTypeUtil.supportMultiChart(curType)) {
                        var multiType = ChartTypeUtil.toMultiChartType(curType);
                        var multiFeedDefsMap = FeedUtils.getManifestFeedsMap(multiType);
                        var supportMultiChart = FeedUtils.supportMultiChart(feedsWhenDragOut, multiFeedDefsMap);
                        if (supportMultiChart) {
                            var multiplierFeedDef = FeedUtils.getManifestFeedsMap(multiType)[FeedUtils.MultiplierFeedingName];
                            feedDefsMap[FeedUtils.MultiplierFeedingName] = multiplierFeedDef;
                        }
                    }
                }

                var isMNDVisible = vizModel.isMNDVisible();
                // This flag means either mnd value or not will be added.
                // Enablefeeding logic is related to add common(not mnd) or mnd value.
                var isMND = (analysisObject.type() === AnalyticalType.MND);
                for (var shelfId in this._dicUIShelf) {
                    if (this._dicUIShelf.hasOwnProperty(shelfId)) {
                        var uiShelf = this._dicUIShelf[shelfId];
                        if (uiShelf && uiShelf.shelf().analysisType !== AnalyticalType.MEASURE) {
                            var feedId;
                            if (shelfId === FeedUtils.RowsFeedingName || shelfId === FeedUtils.ColumnsFeedingName) {
                                feedId = FeedUtils.MultiplierFeedingName;
                            } else {
                                feedId = shelfId;
                            }
                            var canAdd = FeedUtils.canAddValue(feedsWhenDragOut, shelfId, feedDefsMap, isMNDVisible, isMND, feedId);
                            uiShelf.enableFeeding(canAdd);
                        }
                    }
                }
                if (this._playerFieldShelf) {
                    var canAdd = this.playerField() == null || eventData.feedId === 'playerField';
                    this._playerFieldShelf.enableFeeding(canAdd);
                }
            }
        };
        /**
         * Update enable feeding of each shelf
         */
        FeedingPanel.prototype._updateShelvesStatus = function() {
            var vizModel = this._vizModel();
            if (vizModel) {
                var feedItems = FeedUtils.cloneFeeds(vizModel.feedingItems());
                for (var shelfId in this._dicUIShelf) {
                    if (this._dicUIShelf.hasOwnProperty(shelfId)) {
                        var uiShelf = this._dicUIShelf[shelfId];
                        this._setUiShelfAddIconState(uiShelf, vizModel);
                    }
                }
                //Expand trellis if has Row Or Column
                var hasRowOrColumn = FeedUtils.hasRowOrColumn(feedItems);
                if (hasRowOrColumn) {
                    this._CollapseTrellis(false);
                }
                if (this._playerFieldShelf) {
                    var canAdd = false;
                    if (ChartTypeUtil.supportAnimation(vizModel.type())) {
                        canAdd = this.playerField() == null;
                    }
                    this._playerFieldShelf.enableFeeding(canAdd);
                }
            }
        };

        FeedingPanel.prototype._validateSize = function() {
            var size = this.size();
            this._dom$.height(size.height);
            this._dom$.width(size.width);
        };
        /**
         * Handle arrow click, expand or collapse the trellis
         */
        FeedingPanel.prototype._trellisArrowIconClickHandler = function() {
            this._CollapseTrellis(!this._trellisCollapsed);
        };
        /**
         * Update the trellis ui according to the collpased flag
         */
        FeedingPanel.prototype._updateTrellisSection = function(isCollapsed) {
            //if no trellis then return
            if (!this._trellisArrowIcon$) {
                return;
            }
            //remove current style of trellis arrow
            this._trellisArrowIcon$.removeClass();
            this._trellisArrowIcon$.addClass(CSSConst.COMMON_PREFIX + "UVBSharedSprite");
            if (isCollapsed) {
                this._trellisArrowIcon$.addClass(CSSConst.FEEDINGPANEL_PREFIX + "collapse-icon");
                this._trellisContainer$.hide();
            } else {
                this._trellisArrowIcon$.addClass(CSSConst.FEEDINGPANEL_PREFIX + "expand-icon");
                this._trellisContainer$.show();
            }
        };
        /**
         * Set collpased flag and expand or collapse the trellis
         */
        FeedingPanel.prototype._CollapseTrellis = function(isCollapsed) {
            if (arguments.length > 0) {
                if (this._trellisCollapsed !== isCollapsed) {
                    this._trellisCollapsed = isCollapsed;
                    this._updateTrellisSection(isCollapsed);
                }
            } else {
                return this._trellisCollapsed;
            }
        };
        return FeedingPanel;
    });
define('sap/viz/controls/builder/VizBuilder',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/VizControlHost',
    'sap/viz/controls/common/views/feed/FeedingShelfEvent',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/builder/VizBuilderConfig',
    'sap/viz/controls/builder/VizBuilderEvent',
    'sap/viz/controls/mapbuilder/MapBuilder',
    'sap/viz/controls/mapbuilder/events/GeoEvent',
    'sap/viz/controls/switchbar/SwitchBar',
    'sap/viz/controls/switchbar/SwitchBarEvent',
    'sap/viz/controls/feeding/FeedingPanel',
    'sap/viz/controls/feeding/FeedingPanelEvent',
    'sap/viz/controls/Version',
    'sap/viz/controls/feeding/FeedingPanelConfig',
    'sap/viz/controls/mapbuilder/MapBuilderConfig',
    'sap/viz/controls/switchbar/SwitchBarConfig'
    ],
function($, ChartConst, CSSConst, FeedEvent, OOUtil, utils, ChartTypeUtil, VizControlHost, FeedingShelfEvent,
    LangManager, VizBuilderConfig, VizBuilderEvent, MapBuilder, GeoEvent, SwitchBar, SwitchBarEvent, FeedingPanel,
    FeedingPanelEvent, Version, FeedingPanelConfig, MapBuilderConfig, SwitchBarConfig) {
// @formatter:on

    var cssCommon = CSSConst.COMMON_PREFIX;

    /**
     * The VizBuilder is a simple control that contains a switch bar and a feeding panel. The VizBuilder can be customized to show
     * or hide each sub control.<br/><br/>
     *
     * 1. Switch bar, is a control that categories all viz types in groups. User can click on the arrow icon of group to display
     * chart type items, click one of these items to change the current viz type.<br/><br/>
     *
     * 2. Feeding panel, is a control that lists feeding containers of chart feeds and offers ui interactions about feeds such as
     * open a feeding list, add and delete feed items. User can open a feeding list by clicking the '+' icon at end of the feeding
     * container; add a feed item to the feed containers by dragging and dropping an object into the feeding container area or selecting
     * a feed item of the feeding list; delete a feed item from the feed containers by dragging and dropping an object outside the
     * feeding container area or clicking its 'Ã' icon after mousing over it.<br/><br/>
     *
     * Please refer to SwitchBar and FeedingPanel classes for details.<br/>
     *
     * @class sap.viz.controls.builder.VizBuilder
     * @param {HTMLElement}      dom                                      element to contain the control
     * @param {JSON}             [uiConfig]                               configuration for initialization to VizBuilder. If this not
     * transferred, auto using the default uiconfig to create a viz builder. Please refer to the following sample code for details.
     * @param {String}           uiConfig.defaultVizType                  default viz type<br/>
     * @param {JSON}             uiConfig.header                 configuration for title of VizBuilder to show "TYPE: Column Chart"<br/>
     * @param {JSON}             uiConfig.controls                        sub controls group<br/>
     * @param {JSON}             [uiConfig.controls.switchBar]   configuration for switch bar</br>
     * @param {JSON}             [uiConfig.controls.feedingPanel]        configuration for feeding panel</br>
     * @param {JSON}             [uiConfig.controls.mapBuilder]    configuration for map builder panerl</br>
     * @see {@link sap.viz.controls.switchbar.SwitchBar}
     * @see {@link sap.viz.controls.feeding.FeedingPanel}
     * @see {@link sap.viz.controls.mapbuilder.MapBuilder}
     * @extends sap.viz.controls.common.VizControlHost
     * @example <caption>sample code of getting the parameter "uiConfig":</caption>
     * <pre>
     * // 1. Create an uiconfig from empty object is not recommended.
     * var newUiConfig = {
     *     "defaultVizType" : "viz/column",
     *     "header" : {
     *         "visible" : true
     *      }
     *     "controls" : {
     *         "switchBar" : <SwitchBarConfig>,//refers to sap.viz.controls.switchbar.SwitchBar
     *         "feedingPanel" : <FeedingPanelConfig>,//refers to sap.viz.controls.feeding.FeedingPanel
     *         "mapBuilder" : <MapBuilderConfig>//refers to sap.viz.controls.mapbuilder.MapBuilder
     *     }
     * };
     *
     * // 2. Use the default viz builder uiconfig and customized is recommended.
     * // 'assetsRoot' is the path of assets folder used by viz builder.
     * var newUiConfig = VizBuilderConfig.instance(assetsRoot);
     *
     * // Customize the default viz builder uiconfig.
     * // Take hiding viz builder header "TYPE: Column Chart" for example
     * newUiConfig.header.visible = false;
     *
     * </pre>
     */
    var VizBuilder = function VizBuilder(dom, uiConfig) {
        VizBuilder.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.builder.VizBuilder";

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_vizbuilder_control');

        // internal
        this._dom = dom;
        this._dom$ = $(this._dom);
        this._dom$.addClass([CSSConst.BUILDER_PREFIX + 'area', cssCommon + 'scrollable', cssCommon + 'scrollable-y'].join(' '));
        this._uiConfig = uiConfig ? uiConfig : VizBuilderConfig.instance();
        this._vizModel().type(this._uiConfig.defaultVizType);

        for (var i in this._uiConfig.controls) {
            if (this._uiConfig.controls.hasOwnProperty(i)) {
                var controlConfig = this._uiConfig.controls[i];
                if (controlConfig.defaultVizType && controlConfig.defaultVizType !== this._uiConfig.defaultVizType) {
                    controlConfig.defaultVizType = this._uiConfig.defaultVizType;
                }
            }
        }
        // test
        /*border div*/
        this._layout = null;
        this._divContainer = null;

        this._switchBar = null;
        this._feedingPanel = null;
        this._mapBuilder = null;

        this._switchBarDiv = null;
        this._feedingPanelDiv = null;
        this._mapBuilderDiv = null;

        // The active feeding panel div which is currently appended to container div
        this._activeFeedingDiv = null;

        this._trellisHistory = {};
        this._attributeHistory = {};
        this._measureHistory = {};
        this._createChildren();

        var type = this._vizModel().type() ? this._vizModel().type() : this._uiConfig.defaultVizType;
        if (type === this._uiConfig.defaultVizType) {
            this._updateActiveFeedingDiv();
        }

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_vizbuilder_control');
    };

    /**
     * Dispatches "requestFeed" event when click '+' icon at right of the feeding container and the flag useBuildInFeedList
     * of uiConfig values false, which means application does not use Viz Container's built-in feedlist. Then application
     * may need to pop up a customized feedlist, and dispatch a event with feed when a item selected.<br/>
     * Please ignore this event if using Viz Container's built-in feedlist.<br/>
     * <pre>
     * type: "requestFeed"
     * handler: function({
     *                    type: "requestFeed",
     *                    data: {
     *                        feedId: "<feedId>",
     *                        fieldLocalPosition: {shelfWidth, x, y}
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.builder.VizBuilder#requestFeed
     * @param {String} evt.type "requestFeed"
     * @param {String} evt.data.feedId "feedItem's id means which feeding container will be feeded"
     * @param {Object} evt.data.fieldLocalPosition "the data for calculating the location where the feed list will pop up at"
     * @param {Object} evt.data.fieldLocalPosition.shelfWidth "the width of a feeding shelf"
     * @param {Object} evt.data.fieldLocalPosition.x "the left position of a feeding shelf"
     * @param {Object} evt.data.fieldLocalPosition.y "the top position of a feeding shelf"
     * @example <caption>Sample code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * var feedRequestHandler = function(event) {
     *     //User needs to build up a feedlist
     *     var feedList = new FeedList(...);
     *     //User needs to add item selected event for feedlist and handle it
     *     feedList.addEventListener('itemSelected', function(event) {
     *         var selectedItem = event.data.selectedItem;
     *         //Set back feeds by calling vizBuilder.feeds() API
     *         vizBuilder.feeds(selectedItem)
     *     }, this);
     *     //User needs to calculate the position feedlist pop up at.
     *     var popupPosition = feedList.calculatePopupPosition(event.fieldLocalPosition);
     *     feedList.open(popupPosition);
     * }
     * vizBuilder.addEventListener('requestFeed', feedRequestHandler);
     * </pre>
     */

    /**
     * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change FeedItems on feeding panel<br/>
     * Application should listen to "feedsChanged" event to get the corresponding data and set it back to VizFrame to
     * to update the visualization with the new data.
     * <pre>
     * type: "feedsChanged"
     * handler: function({
     *                    type: "feedsChanged",
     *                    data: {
     *                        feeds: {Array<sap.viz.controls.common.FeedItem>}
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.builder.VizBuilder#feedsChanged
     * @param {String} evt.type "feedsChanged".
     * @param {Array<sap.viz.controls.common.FeedItem>} evt.data.feeds
     * @example <caption>Sample code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * var feedsChangedHandler = function(event){
     *     var feeds = event.data.feeds;
     *     console.log(feeds);
     * }
     * vizBuilder.addEventListener('feedsChanged', feedsChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "actionChanged" event when click setting icon of measure feed item that showed by mouse over the feed item, to pop
     * up a action list and select one item of the list. The application can handle something listed on the list about changing
     * the the current data by listening to this event, such as sorting by the current measures of data in ascending or descending order.
     * <pre>
     * type: "actionChanged"
     * handler: function({
     *                    type: "actionChanged",
     *                    data: {
     *                        feedItemID,
     *                        analysisObjectID,
     *                        actionID
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.builder.VizBuilder#actionChanged
     * @param {String} evt.type "actionChanged"
     * @param {String} evt.data.feedItemID
                       Which FeedItem id will be changed by the selected action.
     * @param {String} evt.data.analysisObjectID
                       Which measure item was clicked.
     * @param {String} evt.data.actionID
                       Which action was selected in the action list.
     * @example <caption>Sample code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * var actionChangedHandler = function(event) {
     *     console.log(event.data);
     * }
     * vizBuilder.addEventListener('actionChanged', actionChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "vizTypeChanged" event when visualization type changes by UI operation.
     * <pre>
     * type: "vizTypeChanged"
     * handler: function({
     *                    type: "vizTypeChanged",
     *                    data: {
     *                        oldType: "<vizType>",
     *                        newType: "<vizType>"
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.builder.VizBuilder#vizTypeChanged
     * @param {String} evt.type "vizTypeChanged"
     * @param {String} evt.data.oldType
     *                 vizType
     * @param {String} evt.data.newType
     *                 vizType
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * var vizTypeChangedHandler = function(event) {
     *     var log = "vizTypeChanged event from vizBuilder and viz type changed from " +
     *                  event.data.oldType  + "to " + event.data.newType + ".";
     *     console.log(log);
     * };
     * vizBuilder.addEventListener('vizTypeChanged', vizTypeChangedHandler);
     * </pre>
     */

    OOUtil.extend(VizBuilder, VizControlHost);

    /**
     * Update or add feed FeedItem.
     * @method sap.viz.controls.builder.VizBuilder.prototype.feedAnalysisObjects
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     * @param {Boolean} [append]
     *                      optional, whether to append new feeds.
     *                      Default value is false.
     *                      If append is true, append new feeds.
     *                      If append is false, clean existing feeds.
     *
     * @return {Array<sap.viz.controls.common.feeds.FeedItem>} actually applied feeds by BVR (Best Visualization Recommendation)
     * @example <caption>Sample code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * //Set analysisObjects, please refer to FeedItem for details.
     * var newAnalysisObjects = [
     *     new AnalysisObject("M1", "M1", "measure", "number"),
     *     new AnalysisObject("D1", "D1", "dimension", "string"),
     *     new AnalysisObject("D2", "D2", "dimension", "string")
     * ];
     * vizBuilder.feedAnalysisObjects(newAnalysisObjects, true);
     * //Get analysisObjects
     * var currentAnalysisObjects = vizBuilder.feedAnalysisObjects();
     * </pre>
     */

    /**
     * Get/Set all feeds data.
     * To get feeds, please use feeds() or feeds({withMND: true/false}). The feeds order is always same with the feeding
     * definition of chart.
     * If the user shows MND in UI,
     * with option {withMND : true}, return current feeds with MND;
     * with option {withMND : false}, return current feeds without MND;
     * with no option, return current feeds.
     * If the user doesn't show MND in UI, get feeds always return current feeds, the option value will be ignored.
     * To set feeds, please use feeds(feedItems).
     * @method sap.viz.controls.builder.VizBuilder.prototype.feeds
     * @param {Array<sap.viz.controls.common.FeedItem>|JSON} value
     * @return {Array<sap.viz.controls.common.FeedItem>} value
     * @example <caption>Sample code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * //Set feeds, please refer to FeedItem for details.
     * var newFeeds = [
     *     new FeedItem("primaryValues", "Measure", [
     *         new AnalysisObject("M1", "M1", "measure", "number")]),
     *     new FeedItem("axisLabels", "Dimension", [
     *         new AnalysisObject("D1", "D1", "dimension", "string")]),
     *     new FeedItem("regionColor", "Dimension", [
     *         new AnalysisObject("D2", "D2", "dimension", "string")])
     * ];
     * vizBuilder.feeds(newFeeds);
     * //Get feeds
     * var currentFeeds = vizBuilder.feeds();
     * </pre>
     */

    /**
     * Get/Set selected viz type.
     * @method sap.viz.controls.builder.VizBuilder.prototype.vizType
     * @param {String} vizType
     *                 A string of supported viz type
     * @returns {String}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * //Set 'column' for the current viz type
     * vizBuilder.vizType("viz/column");
     * //Get the current viz type
     * var currentVizType = vizBuilder.vizType();
     * </pre>
     */

    /**
     * Get/Set horizontal gap value for free layout.
     * @method sap.viz.controls.builder.VizBuilder.prototype.horizontalGap
     * @param {Number} value
     *                 A numeric value of horizontal gap
     * @returns {Number}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * //Set '20' for the current horizontal gap
     * vizBuilder.horizontalGap(20);
     * //Set '20.5' for the current horizontal gap
     * vizBuilder.horizontalGap(20.5);
     * //Get the current horizontal gap
     * var currentHorizontalGap = vizBuilder.horizontalGap();//returns 20.5
     * </pre>
     */

    /**
     * Get/Set vertical gap value for free layout.
     * @method sap.viz.controls.builder.VizBuilder.prototype.verticalGap
     * @param {Number} value
     *                 A numeric value of vertical gap
     * @returns {Number}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * //Set '20' for the current vertical gap
     * vizBuilder.verticalGap(20);
     * //Set '20.5' for the current vertical gap
     * vizBuilder.verticalGap(20.5);
     * //Get the current vertical gap
     * var currentVerticalGap = vizBuilder.verticalGap();//returns 20.5
     * </pre>
     */

    /**
     * Create all the children of VizBuilder according to uiconfig
     */
    VizBuilder.prototype._createChildren = function() {
        /*border*/
        this._layout = $(document.createElement('div')).addClass(CSSConst.BUILDER_PREFIX + "view-list");

        var children = this._uiConfig.controls;
        var child;
        /*title*/
        var isHeaderVisible = true;
        if (this._uiConfig.header) {
            isHeaderVisible = this._uiConfig.header.visible === false ? false : true;
        }
        /*switch panel container*/
        var divContainer$ = this._divContainer = $(document.createElement('div'));
        divContainer$.addClass(CSSConst.BUILDER_PREFIX + 'switcher-container');
        divContainer$.appendTo(this._layout);

        /*chart switch panel*/
        var switchbar = children.switchBar ? children.switchBar : SwitchBarConfig.instance();
        if (switchbar) {
            if (isHeaderVisible) {
                var divHeader$ = $(document.createElement('div'));
                divHeader$.addClass(CSSConst.BUILDER_PREFIX + 'header');
                var headerText$ = $(document.createElement('span'));
                headerText$.addClass(CSSConst.BUILDER_PREFIX + 'header-text').text(LangManager.get('VIZ_BUILDER_CHART'));
                var headerValue$ = this._headerValue$ = $('<span/>');
                headerValue$.addClass(CSSConst.BUILDER_PREFIX + 'header-value');

                headerText$.appendTo(divHeader$);
                headerValue$.appendTo(divHeader$);
                divHeader$.appendTo(divContainer$);
            }
            // Create SwitchBar
            this._switchBarDiv = $(document.createElement('div'));
            this._switchBar = new SwitchBar(this._switchBarDiv, switchbar);
            this._switchBar.size({
                'width' : 212
            });
            this._switchBar.horizontalGap(15);
            if (isHeaderVisible) {
                // TODO Subscribe notification from model, do not listen event from switch bar
                this._switchBar.addEventListener(SwitchBarEvent.VIZ_TYPE_CHANGED, function(event) {
                    var typeObject = this._switchBar.selectedTypeObject();
                    headerValue$.text( typeObject ? typeObject.caption : '');
                }, this);
            }
            var selectedVizType = this._switchBar.vizType();
            if (isHeaderVisible && selectedVizType && selectedVizType.length > 0) {
                headerValue$.text(ChartTypeUtil.getVizTypeObject(selectedVizType).caption);
            }

            // Append to DOM
            this._switchBarDiv.appendTo(divContainer$);

            // call this._addChild to expose child's function and events
            this._addChild(this._switchBar, ['vizType', 'horizontalGap', 'verticalGap'], [SwitchBarEvent.VIZ_TYPE_CHANGED]);
        }
        /*feeding panel*/
        var feedingPanel = children.feedingPanel ? children.feedingPanel : FeedingPanelConfig.instance();
        if (feedingPanel) {
            child = feedingPanel;

            // Set the default active panel as FeedingPanel
            this._feedingPanelDiv = $(document.createElement('div'));
            this._feedingPanel = new FeedingPanel(this._feedingPanelDiv, child);

            // call this._addChild to expose child's function and events
            this._addChild(this._feedingPanel, ['feeds', 'feed', 'feedAnalysisObjects'],
                                               [FeedEvent.REQUEST_FEED,
                                               FeedEvent.FEEDS_CHANGED,
                                               FeedingPanelEvent.ACTION_CHANGED]);
        }
        /*feeding panel with chart type 'viz/geomap'*/
        var mapBuilder = children.mapBuilder ? children.mapBuilder : MapBuilderConfig.instance();
        if (mapBuilder) {
            child = mapBuilder;
            child.feedingPanel.useBuildInFeedList = children.feedingPanel.useBuildInFeedList;

            this._mapBuilderDiv = $(document.createElement('div'));
            this._mapBuilder = new MapBuilder(this._mapBuilderDiv, child);

            // call this._addChild to expose child's function and events
            this._addChild(this._mapBuilder, ['config'],
                                             [GeoEvent.CHANGE_BASEMAP_PROVIDER,
                                              GeoEvent.CHANGE_BASEMAP_TYPE,
                                              GeoEvent.SHOW_LAYER,
                                              GeoEvent.HIDE_LAYER,
                                              GeoEvent.CHANGE_LAYER_VIZTYPE,
                                              GeoEvent.SHOW_LEGEND,
                                              GeoEvent.HIDE_LEGEND,
                                              GeoEvent.CHANGE_VIZ_PROPERITIES,
                                              GeoEvent.ADD_LAYER,
                                              GeoEvent.UPDATE_LAYER_DATA,
                                              GeoEvent.DELETE_LAYER,
                                              GeoEvent.REORDER_LAYER,
                                              GeoEvent.RENAME_LAYER,
                                              GeoEvent.ACTION_CHANGED]);
        }

        $(this._layout).appendTo(this._dom);
    };

    /**
     * Update the current size
     */
    VizBuilder.prototype._validateSize = function() {
    };

    VizBuilder.prototype._onVizModelChanged = function(event) {
        if (event.data.vizTypeChanged) {
            this._updateActiveFeedingDiv();
            if(this._headerValue$) {
                var type = this._vizModel().type();
                if(type && type.length > 0)
                {
                    type = ChartTypeUtil.getVizType(type);
                    this._headerValue$.text(ChartTypeUtil.getVizTypeObject(type).caption);
                }
            }
        }
    };
    /**
     * Change current feeding panel according to the current chart type
     */
    VizBuilder.prototype._updateActiveFeedingDiv = function() {
        var model = this._vizModel();
        if (model.type() === ChartConst.TYPE_GEO_MAP) {
            this._activeFeedingDiv = this._replaceDiv(this._layout, this._activeFeedingDiv, this._mapBuilderDiv);
            if (this._mapBuilder) {
                this._mapBuilder.reset();
            }
        } else {
            this._activeFeedingDiv = this._replaceDiv(this._layout, this._activeFeedingDiv, this._feedingPanelDiv);
        }
    };

    /*
     * Replace the current div with another div calling when changed between geomap chart and any other chart
     * @param {DOM} parentDiv, the div which is appended by sourceDiv, then appended by targetDiv
     * @param {DOM} sourceDiv, the div to be replaced by targetDiv
     * @param {DOM} targetDiv, the div to replace sourceDiv
     * @return {DOM} sourceDiv
     */
    VizBuilder.prototype._replaceDiv = function(parentDiv, sourceDiv, targetDiv) {
        if (sourceDiv !== targetDiv) {
            if (sourceDiv) {
                sourceDiv.detach();
            }
            if (targetDiv) {
                targetDiv.appendTo(parentDiv);
                sourceDiv = targetDiv;
            }
        }

        return sourceDiv;
    };
    /**
     * Get/Set available AnalysisObjects for object picker popup UI.
     * @method sap.viz.controls.builder.VizBuilder.prototype.analysisObjectsForPicker
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     * @return {Array<sap.viz.controls.common.feeds.AnalysisObject>}
     * @example <caption>Sample code:</caption>
     * <pre>
     * var vizBuilder = new VizBuilder(...);
     * //Set analysisObjects, please refer to FeedItem for details.
     * var newAnalysisObjects = [
     *     new AnalysisObject("M1", "M1", "measure", "number"),
     *     new AnalysisObject("D1", "D1", "dimension", "string"),
     *     new AnalysisObject("D2", "D2", "dimension", "string")
     * ];
     * vizBuilder.analysisObjectsForPicker(newAnalysisObjects);
     * //Get analysisObjects
     * var currentAnalysisObjects = vizBuilder.analysisObjectsForPicker();
     * </pre>
     */
    VizBuilder.prototype.analysisObjectsForPicker = function(analysisObjects) {
        if (arguments.length > 0) {
            if (this._feedingPanel) {
                this._feedingPanel.analysisObjectsForPicker.apply(this._feedingPanel, arguments);
            }
            if (this._mapBuilder) {
                this._mapBuilder.analysisObjectsForPicker.apply(this._mapBuilder, arguments);
            }
        } else {
            if (this._feedingPanel) {
                return this._feedingPanel.analysisObjectsForPicker.apply(this._feedingPanel);
            }
            if (this._mapBuilder) {
                return this._mapBuilder.analysisObjectsForPicker.apply(this._mapBuilder);
            }
        }
    };

    /**
     * Serialize VizBuilder to a JSON object. <br/>
     * @method sap.viz.controls.builder.VizBuilder.prototype.save
     * @return {JSON}
     */
    VizBuilder.prototype.save = function(){
        var jsonValue = {};
        jsonValue['version'] = Version.VERSION;
        if(this._switchBar){
            jsonValue['switchBar'] = this._switchBar.save();
        }
        if(this._feedingPanel){
            jsonValue['feedingPanel'] = this._feedingPanel.save();
        }
        if(this._mapBuilder){
            jsonValue['mapBuilder'] = this._mapBuilder.save();
        }

        return jsonValue;
    };
    /**
     * Deserialize VizBuilder from JSON object.<br/>
     * @method sap.viz.controls.builder.VizBuilder.prototype.load
     * @param {JSON} valueJSON
     */
    VizBuilder.prototype.load = function(valueJSON){
        if(!valueJSON){
            return;
        }
        var module = valueJSON["switchBar"];
        if(module && this._switchBar){
            this._switchBar.load(module);
        }
        module = valueJSON["feedingPanel"];
        if(module && this._feedingPanel){
            this._feedingPanel.load(module);
        }
        module = valueJSON["mapBuilder"];
        if(module && this._mapBuilder){
            this._mapBuilder.load(module);
        }
    };

    VizBuilder.prototype.feedingPanel = function() {
        return this._feedingPanel;
    }

    VizBuilder.prototype.switchBar = function() {
        return this._switchBar;
    }

    VizBuilder.prototype.mapBuilder = function() {
        return this._mapBuilder;
    }

    return VizBuilder;
});
define('sap/viz/controls/common/constants/EventTypeConst',[],function() {

    var EventTypeConst = {};

    // Event types
    EventTypeConst.VC_CHANGE_VIZ_TYPE = "vc-changeVizType";

    EventTypeConst.PRESS_FILTER_BUTTON = "vc-filter";
    EventTypeConst.PRESS_EXCLUDE_BUTTON = "vc-exclude";
    EventTypeConst.PRESS_DRILLDOWN_BUTTON = "vc-drillDown";

    EventTypeConst.SELECT_SHOW_LEGEND = "vc-showLegend";
    EventTypeConst.SELECT_SHOW_DATALABELS = "vc-showDataLabels";
    EventTypeConst.SELECT_CHANGE_DIRECTION = "vc-changeDirection";
    EventTypeConst.SELECT_CHANGE_STACKING = "vc-changeStacking";
    EventTypeConst.SELECT_INSERT_COMMENT = "vc-insertComment";
    EventTypeConst.SELECT_CHART_EDITOR = "vc-chartEditor";
    EventTypeConst.SHOW_MESSAGE = "vc-showMessage";
    EventTypeConst.CLEAR_MESSAGE = "vc-clearMessage";
    
    EventTypeConst.VIZ_DEFINITION_CHANGED='vizDefinitionChanged';
    EventTypeConst.REQUEST_FILTER_VALUES='requestFilterValues';

    return EventTypeConst;
});

// @formatter:off
define('sap/viz/controls/annotation/AnnotationConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var AnnotationConfig = {};

    AnnotationConfig.instance = function() {
        return {};
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_ANNOTATION, AnnotationConfig);
    return AnnotationConfig;
});

define('sap/viz/controls/annotation/AnnotationEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var AnnotationEvent = function(type, target, data) {
        AnnotationEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.AnnotationEvent";
    };

    OOUtil.extend(AnnotationEvent, Event);

    AnnotationEvent.COMMENT_CHANGED_EVENT = "commentChanged";

    return AnnotationEvent;
});

define('sap/viz/controls/annotation/views/DialogEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var DialogEvent = function(type, target, data) {
        DialogEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.views.DialogEvent";
    };
    OOUtil.extend(DialogEvent, Event);

    DialogEvent.OK = "OK";
    DialogEvent.Cancel = "Cancel";

    return DialogEvent;
});

define('sap/viz/controls/annotation/views/ConfirmDialog',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/annotation/views/DialogEvent',
    'jquery'],
// @formatter:on
function(OOUtil, UIControl, CSSConst, LangManager, DialogEvent, $) {
    var ConfirmDialog = function() {
        ConfirmDialog.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.views.ConfirmDialog";

        /** confirm dialog DIV*/
        this._confirmDialog$ = null;
        this._needConfirm = true;
        this._visible = false;

        this._createChildren();
    };

    OOUtil.extend(ConfirmDialog, UIControl);

    /**
     * TODO: Add comments.
     */
    ConfirmDialog.prototype._createChildren = function() {
        var _this = this;

        //create dialog
        this._confirmDialog$ = $(document.createElement('div'));
        this._confirmDialog$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog');

        //create dialog header
        var dialogHeader$ = $(document.createElement('div'));
        dialogHeader$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-header');
        this._confirmDialog$.append(dialogHeader$);

        var dialogHeaderLeft$ = $(document.createElement('span'));
        dialogHeaderLeft$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-headerleft');
        dialogHeader$.append(dialogHeaderLeft$);

        var dialogHeaderLeftLabel$ = $(document.createElement('span'));
        dialogHeaderLeftLabel$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-headerleft-label');
        dialogHeaderLeft$.append(dialogHeaderLeftLabel$);

        var dialogHeaderRight$ = $(document.createElement('span'));
        dialogHeaderRight$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-headerright');
        dialogHeader$.append(dialogHeaderRight$);

        var dialogHeaderRightClose$ = $(document.createElement('a'));
        dialogHeaderRightClose$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-headerright-close');
        dialogHeaderRight$.append(dialogHeaderRightClose$);
        dialogHeaderRightClose$.click(function() {
            _this.hide();
        });
        //create dialog content
        var dialogContent$ = $(document.createElement('div'));
        dialogContent$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content');
        this._confirmDialog$.append(dialogContent$);

        var dialogContentUp$ = $(document.createElement('div'));
        dialogContentUp$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-up');
        dialogContentUp$.appendTo(dialogContent$);

        var icon$ = $(document.createElement('div'));
        icon$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-icon');
        icon$.appendTo(dialogContentUp$);

        var info$ = $(document.createElement('div'));
        info$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-info');
        info$.text(LangManager.get("VIZ_COMMON_DELETE_COMMENT_MESSAGE"));
        info$.appendTo(dialogContentUp$);

        var dialogContentDown$ = $(document.createElement('div'));
        dialogContentDown$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-down');
        dialogContentDown$.appendTo(dialogContent$);

        this._checkBoxNeedConfirm$ = $(document.createElement("input"));
        this._checkBoxNeedConfirm$.attr("type", "checkbox");
        this._checkBoxNeedConfirm$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-checkbox');
        this._checkBoxNeedConfirm$.appendTo(dialogContentDown$);

        var checkBoxLabel$ = $(document.createElement('div'));
        checkBoxLabel$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-checkboxlabel');
        checkBoxLabel$.text(LangManager.get("VIZ_COMMON_DONT_SHOW_MESSAGE"));
        checkBoxLabel$.appendTo(dialogContentDown$);

        //create dialog footer
        var dialogFooter$ = $(document.createElement('div'));
        dialogFooter$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-footer');
        this._confirmDialog$.append(dialogFooter$);

        var dialogFooterButtons$ = $(document.createElement('div'));
        dialogFooterButtons$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-footer-buttons');
        dialogFooter$.append(dialogFooterButtons$);

        var dialogFooterOKButton$ = $(document.createElement('button'));
        dialogFooterOKButton$.text(LangManager.get("VIZ_COMMON_OK"));
        dialogFooterOKButton$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-footer-button');
        dialogFooterOKButton$.addClass(CSSConst.COMMON_PREFIX + 'button');
        dialogFooterButtons$.append(dialogFooterOKButton$);
        dialogFooterOKButton$.click(function() {
            _this.hide();
            _this._needConfirm = !(_this._checkBoxNeedConfirm$.prop("checked"));
            _this._dispatchEvent(new DialogEvent(DialogEvent.OK, _this, _this._needConfirm));
        });
        var dialogFooterCancelButton$ = $(document.createElement('button'));
        dialogFooterCancelButton$.text(LangManager.get("VIZ_COMMON_CANCEL"));
        dialogFooterCancelButton$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-footer-button');
        dialogFooterCancelButton$.addClass(CSSConst.COMMON_PREFIX + 'button');
        dialogFooterButtons$.append(dialogFooterCancelButton$);
        dialogFooterCancelButton$.click(function() {
            _this.hide();
        });

        this._blockLayout$ = $(document.createElement('div'));
        this._blockLayout$.addClass(CSSConst.ANNOTATION_PREFIX + 'block-layer');
    };
    /**
     * TODO: Add comments.
     */
    ConfirmDialog.prototype.show = function(pos) {
        this._visible = true;
        $(document.body).append(this._blockLayout$);
        $(document.body).append(this._confirmDialog$);

        if (pos) {
            this.setPos(pos);
        }
    };
    /**
     * TODO: Add comments.
     */
    ConfirmDialog.prototype.hide = function() {
        this._visible = false;
        this._blockLayout$.detach();
        this._confirmDialog$.detach();
    };
    /**
     * TODO: Add comments.
     */
    ConfirmDialog.prototype.setPos = function(pos) {
        this._confirmDialog$.css({
            position : "absolute",
            left : pos.pageX - this._confirmDialog$.width() / 2,
            top : pos.pageY - this._confirmDialog$.height() / 2
        });
    };
    /**
     * Check whether Comment Editor Dialog is visible or not
     * @return {Boolean}
     */
    ConfirmDialog.prototype.isVisible = function() {
        return this._visible;
    };
    return ConfirmDialog;
});

define('sap/viz/controls/annotation/models/Comment',['sap/viz/controls/common/managers/LangManager'],
function(LangManager) {
    var Comment = function(dimension, dimension2, series) {
        this._dimension = dimension;
        this._dimension2 = dimension2;
        this._series = series;
        this._text = '';
        this._createTime = LangManager.get("VIZ_ANNOTATION_COMMENT");
    };

    Comment.prototype.dimension = function(value) {
        if(arguments.length > 0) {
            this._dimension = value;

            return this;
        } else {
            return this._dimension;
        }
    };

    Comment.prototype.dimension2 = function(value) {
        if(arguments.length > 0) {
            this._dimension2 = value;

            return this;
        } else {
            return this._dimension2;
        }
    };

    Comment.prototype.series = function(value) {
        if(arguments.length > 0) {
            this._series = value;

            return this;
        } else {
            return this._series;
        }
    };

    Comment.prototype.createTime = function(value) {
        if(arguments.length > 0) {
            this._createTime = value;

            return this;
        } else {
            return this._createTime;
        }
    };

    Comment.prototype.text = function(value) {
        if(arguments.length > 0) {
            this._text = value;

            return this;
        } else {
            return this._text;
        }
    };
    return Comment;
});

define('sap/viz/controls/annotation/views/Comments',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/annotation/views/DialogEvent',
    'sap/viz/controls/annotation/views/ConfirmDialog',
    'sap/viz/controls/annotation/models/Comment'],
// @formatter:on
function($, CSSConst, ChartConst, OOUtil, ChartTypeUtil, Utils, VizUtils, Event, EventDispatcher,
    DialogEvent, ConfirmDialog, Comment) {
    //fill color for Comment border, line and triangle;
    var FillColor = '#F1AB00';
    var TriangleSize = 12;
    var LineBorderLeftWidth = 4;
    //max width for comment rect
    var MaxWidth = 200;
    var ItemPadding = 8;
    //edit and delete icon size
    var IconSize = {
        width : 14,
        height : 16
    };
    //font style for creator text
    var CreatorStyle = "font-family:Arial;font-size:12px;font-weight:bold;fill:#000000;";
    //font style for comment text
    var CommentStyle = "font-family:Arial;font-size:12px;font-weight:normal;fill:#000000;";

    /**
     * TODO: Add comments.
     */
    var Comments = function() {
        this._commentsMap = {};
        /** The map for restoring customized position of comments */
        this._commentsPositionMap = {};
        this._vizData = null;
        this._vizType = null;
        this._eventHandlers = {};
        this._needConfirm = true;
        this._currentComment = null;
    };

    OOUtil.extend(Comments, EventDispatcher);

    Comments.Event_EditComment = 'Event_EditComment';
    Comments.Event_RemoveComment = 'Event_RemoveComment';
    Comments.Event_DragComment = 'Event_DragComment';

    /**
     * Show confirm dialog when deleting comment
     */
    Comments.prototype._showConfirmDialog = function() {
        this._getConfirmDialog().show({
            pageX : $(this._parent).offset().left + $(this._parent).width() / 2,
            pageY : $(this._parent).offset().top + $(this._parent).height() / 2
        });
    };
    /**
     * Create confirm dialog
     */
    Comments.prototype._getConfirmDialog = function() {
        if (!this._confirmDialog) {
            this._confirmDialog = new ConfirmDialog();
            this._confirmDialog.addEventListener(DialogEvent.OK, this._confirmChangedHandler, this);
        }

        return this._confirmDialog;
    };
    /**
     * Handler for confirm deleting comment
     * @param {Event} e
     */
    Comments.prototype._confirmChangedHandler = function(e) {
        this._needConfirm = e.data;
        this._onRemoveComment(this._currentComment);
    };
    /**
     * TODO: Add comments.
     * @param {Object} value
     */
    Comments.prototype.assetFolder = function(value) {
        if (arguments.length > 0) {
            this._assetFolder = value;

            return this;
        } else {
            return this._assetFolder;
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} value
     */
    Comments.prototype.setChartInfo = function(value) {
        if (arguments.length > 0) {
            this._vizData = value.vizData;
            this._vizType = value.vizType;
            return this;
        } else {
            return this._vizData;
        }
    };
    /**
     * TODO: Add comments.
     */
    Comments.prototype.feedsChanged = function() {
        this._commentsPositionMap = {};
    };
    /**
     * TODO: Add comments.
     */
    Comments.prototype._initDIV = function() {
        if (this._parent) {
            this._parent.empty();
        } else {
            var dom = document.createElement("DIV");
            this._parent = $(dom);
            this._chartHolderDiv = $('div.' + CSSConst.PREFIX + 'chart-holder')[0];
            this._parent.appendTo(this._chartHolderDiv).attr('id', "comments-parent");
            this._parent.attr('style', 'overflow:hidden;position:absolute;pointer-events:none;left:0px;top:0px;');
        }

        this._triangleHolder = null;
        this._lineHolder = null;
    };
    /**
     * TODO: Add comments.
     */
    Comments.prototype.redraw = function() {
        this._initDIV();

        var vizType = ChartTypeUtil.getVizType(this._vizType);
        if(!AnnotationItemConst.supportType[vizType] || VizUtils.hasFakeData(this._vizData)){
            return;
        }

        for (var id in this._commentsMap) {
            if (this._commentsMap.hasOwnProperty(id)) {
                this._drawComment(id);
            }
        }
    };
    /**
     * clean comments.
     */
    Comments.prototype.clean = function() {
        this._initDIV();
    };
    /**
     * TODO: Add comments.
     * @param {Object} path
     * @param {Object} chartData
     */
    Comments.prototype._getPathInfo = function(path, chartData) {
        var dimensionIndex = path.dii_a1;
        var seriesIndex = path.mi;
        var crossDataset = chartData._crosstableDataset;
        var dimensionLabels = crossDataset.getAnalysisAxisByIdx(0);
        var dimensionLabel = null;
        if (dimensionLabels) {
            dimensionLabel = '';
            dimensionLabels = dimensionLabels.getDimensionLabels();
            for (var i = 0; i < dimensionLabels.length; i++) {
                dimensionLabel += dimensionLabels[i].getValues()[dimensionIndex];
            }
        }
        else {
           dimensionLabel = crossDataset.getMeasureValuesGroupByIdx(0).getMeasureValues()[dimensionIndex].getId();
        }

        var dimension2Labels = crossDataset.getAnalysisAxisByIdx(1);
        var dimension2 = null;
        if (dimension2Labels) {
            dimension2 = '';
            dimension2Labels = dimension2Labels.getDimensionLabels();
            for (var n = 0; n < dimension2Labels.length; n++) {
                dimension2 += dimension2Labels[n].getValues()[path.dii_a2];
            }
        }

        var pathInfo = {
            dimensionIndex : dimensionIndex,
            seriesIndex : seriesIndex,
            dimension : dimensionLabel,
            dimension2 : dimension2
        };
        pathInfo.series = crossDataset.getMeasureValuesGroupByIdx(path.mg).getMeasureValues()[seriesIndex].getId();
        return pathInfo;
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype._findDataPoint = function(comment) {
        var datapoints = d3.selectAll('.v-datapoint')[0];
        var dimension = comment.dimension();
        var dimension2 = comment.dimension2();
        var series = comment.series();
        for (var i = 0; i < datapoints.length; i++) {
            var data = datapoints[i].__data__;
            if (data) {
                var pathInfo;
                if (Utils.isArray(data.ctx)) {
                    pathInfo = this._getPathInfo(data.ctx[0].path, this._vizData);
                    if (pathInfo.dimension === dimension && pathInfo.dimension2 === dimension2 && pathInfo.series == series) {
                        return datapoints[i];
                    }
                } else if (ChartTypeUtil.getVizType(this._vizType) === ChartConst.TYPE_BOXPLOT) {
                    for (var j = 0; j < data.length; j++) {
                        pathInfo = this._getPathInfo(data[j].ctx.path, this._vizData);
                        if (pathInfo.dimension === dimension && pathInfo.dimension2 === dimension2 && pathInfo.series == series) {
                            return datapoints[i];
                        }
                    }
                } else if (data.ctx){
                    pathInfo = this._getPathInfo(data.ctx.path, this._vizData);
                    if (pathInfo.dimension === dimension && pathInfo.dimension2 === dimension2 && pathInfo.series == series) {
                        return datapoints[i];
                    }
                }
            }
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} dataPoint
     */
    function getDataPointRect(dataPoint) {
        var data = dataPoint.__data__;
        if (data && data.r && data.midAngle) {
            //handle Pie
            var midAngle = data.midAngle();
            var x = data.r * Math.sin(midAngle);
            var y = data.r - data.r * Math.cos(midAngle);

            var parentsPath = $(dataPoint).parentsUntil('.v-m-plot');
            if (parentsPath.length > 0) {
                var plot = $(parentsPath[parentsPath.length-1]).parent()[0];
                var rects = plot.getElementsByTagName('rect');
                var plotRectHeight = rects[0].getAttribute('height');
                var plotRectWidth = rects[0].getAttribute('width');
                var plotRect = plot.getBoundingClientRect();
                var centerX = plotRect.left + plotRectWidth / 2;
                //Pie chart did not expose center position, calc it. 6 is distance between plot's top and pie top.
                var centerY = plotRect.top + 6 + data.r;

                var rect = {
                    width : 1,
                    height : 1,
                    top : centerY - data.r + y,
                    left : centerX + x
                };
                return rect;
            } else {
                return dataPoint.getBoundingClientRect();
            }
        } else {
            return dataPoint.getBoundingClientRect();
        }
    }

    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    function getID(comment) {
        var id = comment.dimension() + "-" + comment.dimension2() + "-" + comment.series();
        id = id.replace(/[^(0-9|A-z)]/g, "_");
        return id;
    }

    /**
     * TODO: Add comments.
     * @param {Object} commentID
     */
    function getLinID(commentID) {
        return commentID + '-line';
    }

    /**
     * TODO: Add comments.
     * @param {Object} commentID
     */
    function getTriangleID(commentID) {
        return commentID + '-triangle';
    }

    /**
     * TODO: Add comments.
     * @param {Object} e
     */
    function clickDeleteHandler(e) {
        var comment = e.currentTarget.parentNode.__data;
        if (e.data && comment) {
            if (e.data._needConfirm) {
                e.data._currentComment = comment;
                e.data._showConfirmDialog();
            } else {
                e.data._onRemoveComment(comment);
            }
        }
        e.stopPropagation();
    }

    /**
     * TODO: Add comments.
     * @param {Object} e
     */
    function clickEditHandler(e) {
        var comment = e.currentTarget.parentNode.__data;
        if (e.data && comment) {
            e.data._onEditComment(comment);
        }
        e.stopPropagation();
    }

    /**
     * TODO: Add comments.
     * @param {Object} e
     */
    function commentDIVClickHandler(e) {
        var target = e.target;
        if (target && target.className !== 'ui-draggable') {
            var parents = $(target).parentsUntil(e.data._parent);
            if (parents && parents.length > 0) {
                target = parents[parents.length - 1];
            }
        }
        if (e.data && target && target.className === 'ui-draggable') {
            $(target).detach();
            $(target).appendTo(e.data._parent);
        }
        e.stopPropagation();
    }

    /**
     * TODO: Add comments.
     * @param {Object} srcRect
     * @param {Object} targetRect
     * @param {Object} parentRect
     * @param {Object} line
     * @param {Object} triangle
     */
    function updateArrow(srcRect, targetRect, parentRect, line, triangle) {
        var srcPoint = {
            x : srcRect.left,
            y : srcRect.top + srcRect.height / 2
        };
        var targetPoint = {
            x : targetRect.left + targetRect.width / 2,
            y : targetRect.top
        };

        var deltaX = srcPoint.x - targetPoint.x;
        var deltaY = srcPoint.y - targetPoint.y;
        var length = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

        var angle = Math.asin(deltaY / length) * 180 / Math.PI;
        if (srcPoint.x < targetPoint.x) {
            angle = 180 - angle;
        }

        var rotate = 'rotate(' + angle + 'deg)';
        var origin = "0 0";
        line.css({
            'transform' : rotate,
            'transform-origin' : origin,
            '-webkit-transform' : rotate,
            '-webkit-transform-origin' : origin,
            '-ms-transform' : rotate,
            '-ms-transform-origin' : origin,
            '-moz-transform' : rotate,
            '-moz-transform-origin' : origin,
            width : Math.floor(length) - LineBorderLeftWidth + 'px',
            left : (targetPoint.x - parentRect.left) + 'px',
            top : targetPoint.y - parentRect.top + 'px'
        });
        rotate = 'rotate(' + (angle + 90) + 'deg)';
        origin = "50% 100%";
        triangle.css({
            'transform' : rotate,
            'transform-origin' : origin,
            '-webkit-transform' : rotate,
            '-webkit-transform-origin' : origin,
            '-ms-transform' : rotate,
            '-ms-transform-origin' : origin,
            '-moz-transform' : rotate,
            '-moz-transform-origin' : origin,
            left : (targetPoint.x - parentRect.left - TriangleSize / 2) + 'px',
            top : (targetPoint.y - parentRect.top - TriangleSize) + 'px'
        });
    }

    /**
     * TODO: Add comments.
     * @param {Object} height
     * @param {Object} width
     */
    function getTriangleStyle(height, width) {
        var style = 'height:0px;width:0px;margin:0px;padding:0px;';
        style += 'border-top-width:' + height + 'px;border-left-width: ' + width / 2 + 'px;border-right-width: ' + width / 2 + 'px;';
        style += 'border-bottom-width: 0px;border-style: solid;border-color: ' + FillColor + ' transparent transparent transparent;';
        return style;
    }

    /**
     * TODO: Add comments.
     * @param {Object} dataPoint
     * @param {Object} commentDIV
     * @param {Object} comments
     */
    Comments.prototype._initCommentUI = function(dataPoint, commentDIV, comments) {
        var dataPointRect = getDataPointRect(dataPoint);
        var parentRect = this._parent[0].getBoundingClientRect();
        var left = 0;
        var top = 0;
        var id = commentDIV.attr('id');
        if (this._commentsPositionMap.hasOwnProperty(id) && this._commentsPositionMap[id].hasOwnProperty(this._vizType)) {
            left = this._commentsPositionMap[id][this._vizType].left;
            top = this._commentsPositionMap[id][this._vizType].top;
        } else {
            left = 0;
            top = dataPointRect.top - parentRect.top - 80;

            var data = dataPoint.__data__;
            if (data && data.r && data.midAngle && Math.sin(data.midAngle()) < 0) {
                left = dataPointRect.left - Math.max(dataPointRect.width, 40) - parentRect.left - 150;
            } else {
                left = dataPointRect.left + Math.max(dataPointRect.width, 40) - parentRect.left;
            }
        }

        var style = "pointer-events:auto;";
        style += "padding:4px;background-color:#FFFFCC;";
        //div border
        style += 'border-radius:4px;border-width:2px; border-color:' + FillColor + '; border-style:solid;';
        //position
        style += "position:absolute;left: " + left + "px; top:" + top + "px;";
        //size
        style += "width:" + MaxWidth + "px;";
        commentDIV.attr('style', style);

        //events
        commentDIV.bind('mouseenter', function(e) {
            var id = $(e.currentTarget).attr('id');
            var img = $('div#' + id + ' img');
            img.css('visibility', '');
            var creatorDiv = $('div#' + id + ' div#' + 'createTime');
            if (creatorDiv) {
                creatorDiv.css('right', '68px');
            }
        });

        commentDIV.bind('mouseleave', function(e) {
            var id = $(e.currentTarget).attr('id');
            var img = $('div#' + id + ' img');
            img.css('visibility', 'hidden');
            var creatorDiv = $('div#' + id + ' div#' + 'createTime');
            if (creatorDiv) {
                creatorDiv.css('right', '18px');
            }
        });

        commentDIV.bind('contextmenu', function(e) {
            e.stopPropagation();
        });
        if (left + commentDIV.outerWidth() > this._parent.innerWidth()) {
            left = this._parent.innerWidth() - commentDIV.outerWidth();
        }
        if (top + commentDIV.outerHeight() > this._parent.innerHeight()) {
            left = this._parent.innerHeight() - commentDIV.outerHeight();
        }
        commentDIV.css({
            left : left + 'px',
            top : top + 'px'
        });
    };
    /**
     * TODO: Add comments.
     * @param {Object} dataPoint
     * @param {Object} commentDIV
     * @param {Object} comments
     */
    Comments.prototype._addCommentUI = function(dataPoint, commentDIV, comments) {
        var height = ItemPadding;
        for (var i = 0; i < comments.length; i++) {
            var div = $(document.createElement("DIV")).appendTo(commentDIV).attr('style', 'position:absolute;padding:' + ItemPadding + 'px;left:0px;right:0px;top:' + height + 'px;width:' + MaxWidth + 'px;height:auto;');
            var itemHeight = this._appendItem(div, comments[i]);
            div.css('height', itemHeight + 'px');
            height += itemHeight + ItemPadding;
            div[0].__data = comments[i];
        }
        height -= ItemPadding;
        commentDIV.css('height', height + 'px');

        var dataPointRect = getDataPointRect(dataPoint);
        var parentRect = this._parent[0].getBoundingClientRect();

        var left = Number(commentDIV.css("left").replace('px', ''));
        var top = Number(commentDIV.css("top").replace('px', ''));
        left = Math.min(Math.max(left, 0), parentRect.width - MaxWidth);
        top = Math.min(Math.max(top, 0), parentRect.height - height);
        commentDIV.css({
            left : left,
            top : top
        });

        var commentRect = commentDIV[0].getBoundingClientRect();
        //arrow
        commentDIV[0].__dataPoint = dataPoint;
        commentDIV[0].__parent = this._parent[0];
        var commenID = commentDIV.attr('id');
        var triangleID = getTriangleID(commenID);
        var triangle = $('#' + triangleID);
        if (triangle.length === 0) {
            triangle = $(document.createElement("DIV"));
            if (this._triangleHolder) {
                triangle.insertAfter(this._triangleHolder);
            } else {
                triangle.insertBefore(commentDIV);
            }
            this._triangleHolder = triangle;

            triangle.attr('id', triangleID).attr('style', 'position:absolute;' + getTriangleStyle(TriangleSize, TriangleSize));
        }

        var lineID = getLinID(commenID);
        var line = $('#' + lineID);
        if (line.length === 0) {
            line = $(document.createElement("DIV"));
            if (this._lineHolder) {
                line.insertAfter(this._lineHolder);
            } else {
                line.insertBefore(commentDIV);
            }
            this._lineHolder = line;

            line.attr('id', lineID).attr('style', 'position:absolute;border-left-width:' + LineBorderLeftWidth + 'px; border-top-width:2px;border-bottom-width:0px;border-right-width:0px;border-color:' + FillColor + ' transparent; border-style:solid;width:1px;height:0px;');
        }

        updateArrow(commentRect, dataPointRect, parentRect, line, triangle);
    };
    /**
     * TODO: Add comments.
     * @param {Object} div
     * @param {Object} comment
     */
    Comments.prototype._appendItem = function(div, comment) {
        var _this = this;
        var tooltip$ = null;
        var enter = false;

        var height = 0;
        //edit & delete buttons;
        var edit = $(document.createElement("IMG")).appendTo(div);
        edit.attr('src', this._assetFolder + '/edit.png').attr('style', 'position:absolute;pointer-events:auto;cursor:pointer;top:0px; right:' + (ItemPadding * 3 + IconSize.width) + 'px;width:' + IconSize.width + 'px;height:' + IconSize.height + 'px;visibility:hidden;');
        edit.bind('mousedown', this, clickEditHandler);
        var editRect = edit[0].getBoundingClientRect();

        var del = $(document.createElement("IMG")).appendTo(div);
        del.attr('src', this._assetFolder + '/delete.png').attr('style', 'position:absolute;pointer-events:auto;cursor:pointer;top:0px; right:' + (ItemPadding * 2) + 'px;width:' + IconSize.width + 'px;height:' + IconSize.height + 'px;visibility:hidden;');
        del.bind('mousedown', this, clickDeleteHandler);
        var delRect = del[0].getBoundingClientRect();

        var creatorDiv = this._creatorDiv = $(document.createElement("DIV")).appendTo(div);
        creatorDiv.attr('id', 'createTime');
        creatorDiv.text(comment.createTime()).attr('style', 'position:absolute;cursor:default;line-height:normal;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;left:5px;right:18px;top:0px;' + CreatorStyle);
        creatorDiv.mouseover(function(event) {
            if (creatorDiv[0].scrollWidth > creatorDiv[0].clientWidth) {
                enter = true;
                var delayedShow = setTimeout(function() {
                    if (enter) {
                        if (!tooltip$){
                            tooltip$ = $(document.createElement('div')).appendTo(div);
                            tooltip$.attr('style', 'position:absolute;border-radius:4px;z-index:100;display:block;background-color:#F2F2F2;border:1px solid #7F7F7F;box-shadow:5px 5px 10px rgba(0,0,0,0.5);-webkit-box-shadow:5px 5px 10px rgba(0,0,0,0.5);-moz-box-shadow:5px 5px 10px rgba(0,0,0,0.5);');
                            var tooltipText$ = $(document.createElement('span')).appendTo(tooltip$);
                            tooltipText$.attr('style', 'border-radius:4px;padding-left:4px;padding-right:4px;display:block;font-size:10px;white-space:nowrap;top:0px;overflow:hidden;');
                            tooltipText$.text(comment.createTime());
                        }

                        var creatorDivOffset = $(creatorDiv).offset();
                        tooltip$.offset({
                            'left' : creatorDivOffset.left - 5,
                            'top' : creatorDivOffset.top - 10
                        });
                    }
                }, 500 );
            }
        });
        creatorDiv.mouseout(function(event) {
            if (creatorDiv[0].scrollWidth > creatorDiv[0].clientWidth) {
                enter = false;
                if (tooltip$) {
                    tooltip$.remove();
                    tooltip$ = null;
                }
            }
        });

        var creatorRect = creatorDiv[0].getBoundingClientRect();
        height += Math.max(editRect.height, creatorRect.height);
        var textDiv = $(document.createElement("DIV"));
        textDiv[0].innerHTML = comment.text();
        textDiv.attr('style', 'position:absolute;pointer-events:none;line-height:normal;word-wrap:break-word;overflow:hidden;top:' + height + 'px;width:' + MaxWidth + 'px;' + CommentStyle).appendTo(div);
        height += textDiv[0].getBoundingClientRect().height;
        return height;
    };
    /**
     * TODO: Add comments.
     * @param {Object} id
     */
    Comments.prototype._removeCommentUI = function(id) {
        var lineID = getLinID(id);
        var triangleID = getTriangleID(id);
        if (this._triangleHolder && this._triangleHolder.attr('id') === triangleID) {
            this._triangleHolder = null;
        }
        if (this._lineHolder && this._lineHolder.attr('id') === lineID) {
            this._lineHolder = null;
        }

        $('div#' + id).remove();
        $('div#' + lineID).remove();
        $('div#' + triangleID).remove();

        var children = this._parent.children();
        if (this._triangleHolder === null && children.length >= 3) {
            this._triangleHolder = $(children[children.length / 3 - 1]);
        }
        if (this._lineHolder === null && children.length >= 3) {
            this._lineHolder = $(children[children.length / 3]);
        }

    };
    /**
     * @param {Object} e
     */
    function commentDrag(e) {
        var target = $(e.target);
        var _this = e.data;
        if (e.target.__dataPoint && e.target.__parent) {
            var srcRect = target[0].getBoundingClientRect();
            var targetRect = getDataPointRect(target[0].__dataPoint);
            var parentRect = target[0].__parent.getBoundingClientRect();
            var id = target.attr('id');
            var line = $('#' + getLinID(id));
            var triangle = $('#' + getTriangleID(id));
            updateArrow(srcRect, targetRect, parentRect, line, triangle);

            if (!_this._commentsPositionMap.hasOwnProperty(id)) {
                _this._commentsPositionMap[id] = {};
            }
            _this._commentsPositionMap[id][_this._vizType] = {
                left : Number(target.css("left").replace('px', '')),
                top : Number(target.css("top").replace('px', ''))
            };

            e.stopPropagation();

            _this._dispatchEvent(new Event(Comments.Event_DragComment, _this, _this._commentsMap[id]));
        }
    }

    /**
     * TODO: Add comments.
     * @param {Object} id
     */
    Comments.prototype._drawComment = function(id) {
        var _this = this;
        var comments = this._commentsMap[id];
        if (!comments || comments.length === 0) {
            this._removeCommentUI(id);
            return;
        }

        var dataPoint = this._findDataPoint(comments[0]);
        if (!dataPoint) {
            return;
        }

        var commentDIV = $('div#' + id);
        if (commentDIV.length === 0) {
            commentDIV = $(document.createElement("DIV"));
            commentDIV.appendTo(this._parent).attr('id', id);
            this._initCommentUI(dataPoint, commentDIV);
        } else {
            commentDIV.empty();
        }

        this._addCommentUI(dataPoint, commentDIV, comments);
        commentDIV.draggable({
            containment : "parent",
            start : function(e, ui) {
                e.target.__lastPosition = {
                    x : e.clientX,
                    y : e.clientY
                };
            },
            stop : function(e, ui) {
                e.data = _this;
                commentDrag(e);
            },
            drag : function(e, ui) {
                e.data = _this;
                commentDrag(e);
            }
        });
        commentDIV.bind('click', this, commentDIVClickHandler);
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype._onEditComment = function(comment) {
        if (comment == null) {
            return;
        }
        var id = getID(comment);
        var comments = this._commentsMap[id];
        if (comments == null) {
            return;
        }

        this._dispatchEvent(new Event(Comments.Event_EditComment, this, comment));
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype._onRemoveComment = function(comment) {
        if (comment == null) {
            return;
        }
        var id = getID(comment);
        var comments = this._commentsMap[id];
        if (comments == null) {
            return;
        }

        for (var i = 0; i < comments.length; i++) {
            if (comments[i] === comment) {
                comments.splice(i, 1);
                break;
            }
        }

        this._drawComment(id);

        this._dispatchEvent(new Event(Comments.Event_RemoveComment, this, comment));
    };
    /**
     * TODO: Add comments.
     */
    Comments.prototype.createComment = function(selection) {
        if (selection.length === 0) {
            return;
        }

        var path = selection[selection.length-1].ctx[0];
        var pathInfo = this._getPathInfo(path, this._vizData);
        var comment = new Comment(pathInfo.dimension, pathInfo.dimension2, pathInfo.series);
        comment.text('');

        return comment;
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype.addComment = function(comment) {
        if (comment == null) {
            return;
        }

        var id = getID(comment);
        if (this._commentsMap[id] == null) {
            this._commentsMap[id] = [];
        }
        this._commentsMap[id].push(comment);

        this._drawComment(id);
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype.updateComment = function(comment) {
        if (comment == null) {
            return;
        }

        var id = getID(comment);
        if (!this._commentsMap[id]) {
            return;
        }

        this._drawComment(id);
    };
    /**
     * Resize Comments
     * @param {width: Number, height: Number} size
     */
    Comments.prototype.size = function(size) {
        if (size) {
            $('div#comments-parent').css(size);
            if (this._getConfirmDialog().isVisible()) {
                this._getConfirmDialog().setPos({
                    pageX : $(this._parent).offset().left + $(this._parent).width() / 2,
                    pageY : $(this._parent).offset().top + $(this._parent).height() / 2
                });
            }
        }
    };
    /**
     * Add comments of JSON type to this._commentsMap
     * @param {JSON} comments
     */
    Comments.prototype.json2CommentsMap = function(comments) {
        for (var id in comments) {
            if (comments.hasOwnProperty(id)) {
                if (this._commentsMap[id] == null) {
                    this._commentsMap[id] = [];
                }
                var commentsValue = comments[id];
                for (var i = 0; i < commentsValue.length; i++) {
                    var commentObj = commentsValue[i];
                    var comment = new Comment(commentObj.dimension, commentObj.dimension2, commentObj.series);
                    comment.createTime(commentObj.createTime);
                    comment.text(commentObj.text);
                    this._commentsMap[id].push(comment);
                }
            }
        }
        this._needConfirm = comments["needConfirm"];
        this._commentsPositionMap = comments["commentsPositionMap"];
    };
    /**
     * Convert this._commentsMap to JSON and return
     * @return {JSON}
     */
    Comments.prototype.commentsMap2Json = function() {
        var retJson = {};
        for (var id in this._commentsMap) {
            if (this._commentsMap.hasOwnProperty(id)) {
                var commentsValue/*array*/ = this._commentsMap[id];
                retJson[id] = [];
                for (var i = 0; i < commentsValue.length; i++) {
                    var comment = commentsValue[i];
                    retJson[id].push({
                        "dimension" : comment.dimension(),
                        "dimension2" : comment.dimension2(),
                        "series" : comment.series(),
                        "createTime" : comment.createTime(),
                        "text" : comment.text()
                    });
                }
            }
        }
        retJson["needConfirm"] = this._needConfirm;
        retJson["commentsPositionMap"] = this._commentsPositionMap;
        return retJson;
    };
    var AnnotationItemConst = {
        "name" : "comment",
        "text" : "VIZ_CONTEXTMENU_INSERT_COMMENT",
        "icon" : {
            "show" : "/contextmenu/annotation.png"
        },
        "supportType" : {
        	"viz/bar" : true,
            "viz/column" : true,
            "viz/stacked_column" : true,
            "viz/stacked_bar" : true,
            "viz/dual_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_bar" : true,
            "viz/dual_combination" : true,
            "viz/pie" : true,
            "viz/donut" : true,
            "viz/geobubble" : true,
            "viz/choropleth" : true,
            "viz/geopie" : true,
            "viz/scatter" : true,
            "viz/bubble" : true,
            "viz/scatter_matrix" : true,
            "viz/treemap" : true,
            "viz/heatmap" : true,
            "viz/radar" : true,
            "viz/boxplot" : true
        }
    };
    return Comments;
});

define('sap/viz/controls/annotation/views/CommentEditorView',[
// @formatter:off
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/annotation/views/DialogEvent',
    'jquery'],
// @formatter:on
function(LangManager, OOUtil, Utils, UIControl, CSSConst, DialogEvent, $) {
    var MaxCommentLength = 140;
    var lastComment = "";
    var tinymce_init = false;

    var CommentEditorView = function(div/*HTMLDivElement*/) {
        CommentEditorView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.views.CommentEditorView";

        //container
        this._div = div;

        this._comment = "";
        this._visible = false;
        this._oRichTextDialog = null;
        this._createChildren();
    };

    OOUtil.extend(CommentEditorView, UIControl);

    // only for calc the position
    CommentEditorView.WIDTH = 497;
    CommentEditorView.HEIGHT = 213;

    /**
     * TODO: Add comments.
     */
    CommentEditorView.prototype._createChildren = function() {
        var _this = this;

        //create dialog
        this._oRichTextDialog = document.createElement('div');
        this._oRichTextDialog.id = "divRichTextDialog";
        $(this._oRichTextDialog).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog');
        $(document.body).append(this._oRichTextDialog);

        this.hide();

        //create dialog header
        var dialogHeader = document.createElement('div');
        dialogHeader.id = "RichTextDialogHeader";
        $(dialogHeader).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-header');
        $(this._oRichTextDialog).append(dialogHeader);

        var dialogHeaderLeft = document.createElement('span');
        $(dialogHeaderLeft).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-headerleft');
        $(dialogHeader).append(dialogHeaderLeft);

        var dialogHeaderLeftLabel = document.createElement('span');
        dialogHeaderLeftLabel.id = "RichTextDialogHeaderLabel";
        $(dialogHeaderLeftLabel).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-headerleft-label');
        $(dialogHeaderLeftLabel).text(LangManager.get("VIZ_ANNOTATION_COMMENT"));
        $(dialogHeaderLeft).append(dialogHeaderLeftLabel);

        var dialogHeaderRight = document.createElement('span');
        $(dialogHeaderRight).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-headerright');
        $(dialogHeader).append(dialogHeaderRight);

        var dialogHeaderRightClose = document.createElement('a');
        dialogHeaderRightClose.id = "RichTextDialogHeaderClose";
        $(dialogHeaderRightClose).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-headerright-close');
        $(dialogHeaderRight).append(dialogHeaderRightClose);
        $(dialogHeaderRightClose).click(function() {
            _this.hide();
        });
        //create dialog content
        var dialogContent = document.createElement('div');
        dialogContent.id = "RichTextDialogContent";
        $(dialogContent).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-content');
        $(this._oRichTextDialog).append(dialogContent);

        var dialogContentTextArea = document.createElement('textarea');
        dialogContentTextArea.id = "RichTextDialogContentTextArea";
        $(dialogContentTextArea).addClass('mceEditor');
        $(dialogContent).append(dialogContentTextArea);

        //create dialog footer
        var dialogFooter = document.createElement('div');
        dialogFooter.id = "RichTextDialogFooter";
        $(dialogFooter).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-footer');
        $(this._oRichTextDialog).append(dialogFooter);

        var dialogFooterButtons = document.createElement('div');
        $(dialogFooterButtons).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-footer-buttons');
        $(dialogFooter).append(dialogFooterButtons);

        var dialogFooterOKButton = document.createElement('button');
        dialogFooterOKButton.id = "RichTextDialogOKButton";
        $(dialogFooterOKButton).text(LangManager.get("VIZ_COMMON_OK"));
        $(dialogFooterOKButton).addClass(CSSConst.ANNOTATION_PREFIX + 'button');
        $(dialogFooterOKButton).addClass(CSSConst.COMMON_PREFIX + 'button');
        $(dialogFooterButtons).append(dialogFooterOKButton);
        $(dialogFooterOKButton).click(function() {
            _this.hide();
            _this._comment = tinymce.activeEditor.getContent();
            _this._dispatchEvent(new DialogEvent(DialogEvent.OK, _this, {
                userData : _this._userData,
                comment : _this._comment
            }));
        });
        var dialogFooterCancelButton = document.createElement('button');
        dialogFooterCancelButton.id = "RichTextDialogCancelButton";
        $(dialogFooterCancelButton).text(LangManager.get("VIZ_COMMON_CANCEL"));
        $(dialogFooterCancelButton).addClass(CSSConst.ANNOTATION_PREFIX + 'button');
        $(dialogFooterCancelButton).addClass(CSSConst.COMMON_PREFIX + 'button');
        $(dialogFooterButtons).append(dialogFooterCancelButton);
        $(dialogFooterCancelButton).click(function() {
            _this.hide();
        });

        if (!tinymce_init) {
            tinymce_init = true;
            tinymce.init({
                theme : "advanced",
                mode : "textareas",
                theme_advanced_buttons1 : "bold,italic,underline,strikethrough,|,forecolor,backcolor,|,justifyleft,justifycenter,justifyright,justifyfull,|,fontselect,fontsizeselect",
                theme_advanced_path : false,
                theme_advanced_font_sizes : "8px,9px,10px,11px,12px,14px,16px,18px,20px,22px,24px,26px,28px,36px,48px,72px",
                theme_advanced_statusbar_location : "none",
                editor_selector : "mceEditor",

                setup : function(ed) {
                    ed.onEvent.add(function(ed, e) {
                        var plainText = ed.getContent({
                            format : 'text'
                        });
                        if (plainText.length > MaxCommentLength) {
                            ed.setContent(lastComment);
                            //move cursor to the end of content
                            ed.selection.select(ed.getBody(), true);
                            ed.selection.collapse(false);
                        } else {
                            lastComment = ed.getContent();
                        }
                    });
                }
            });
        }

        this._blockLayout = document.createElement('div');
        this._blockLayout.id = "blockLayout";
        $(this._blockLayout).addClass(CSSConst.ANNOTATION_PREFIX + 'block-layer');
    };
    /**
     * TODO: Add comments.
     */
    CommentEditorView.prototype.show = function(options) {
        if (options) {
            if (options.hasOwnProperty("userData")) {
                this._userData = options.userData;
            }

            if (options.hasOwnProperty("comment") && Utils.isString(options.comment)) {
                this._comment = options.comment;
                lastComment = options.comment;
                if (tinymce.activeEditor) {
                    tinymce.activeEditor.setContent(this._comment);
                }
            }

            if (options.hasOwnProperty("position")) {
                this.setPos(options.position);
            }
        }

        this._visible = true;

        $(document.body).append(this._blockLayout);
        $(this._oRichTextDialog).show();
    };
    /**
     * TODO: Add comments.
     */
    CommentEditorView.prototype.hide = function() {
        this._visible = false;
        $(this._blockLayout).detach();
        $(this._oRichTextDialog).hide();
    };
    /**
     * TODO: Add comments.
     */
    CommentEditorView.prototype.setPos = function(pos) {
        $(this._oRichTextDialog).css({
            position : "absolute",
            left : pos.pageX - CommentEditorView.WIDTH / 2,
            top : pos.pageY - CommentEditorView.HEIGHT / 2
        });
    };
    /**
     * Check whether Comment Editor Dialog is visible or not
     * @return {Boolean}
     */
    CommentEditorView.prototype.isVisible = function() {
        return this._visible;
    };
    return CommentEditorView;
});

// @formatter:off
define('sap/viz/controls/annotation/Annotation',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/annotation/AnnotationConfig',
    'sap/viz/controls/annotation/AnnotationEvent',
    'sap/viz/controls/annotation/views/Comments',
    'sap/viz/controls/annotation/views/DialogEvent',
    'sap/viz/controls/annotation/views/CommentEditorView'
],
function($, VizControlBase, OOUtil, GlobalConfig, EventTypeConst, Event, FeedEvent, EventDispatcher,
// @formatter:on
    AnnotationConfig, AnnotationEvent, Comments, DialogEvent, CommentEditorView) {
    var Annotation = function(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        Annotation.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.Annotation";

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_annotation_control');

        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : AnnotationConfig.instance();
        // popupLayer should be set to annotation, or we will use default div as the popupLayer.
        this._popupLayer = div;
        this._commentEditor = null;

        this._createChildren();
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_annotation_control');
    };
    OOUtil.extend(Annotation, VizControlBase);
    Annotation.prototype._createChildren = function() {
        this._comments = new Comments();
        var assetPath = this._uiConfig.commentsAssetFolderPath;
        this._comments.assetFolder(assetPath ? assetPath : GlobalConfig.defaultAssetsRoot() + '/controls/frame/assets');
        this._comments.addEventListener(Comments.Event_EditComment, this._editCommentHandler, this);
        this._comments.addEventListener(Comments.Event_RemoveComment, this._removeCommentHandler, this);
        this._comments.addEventListener(Comments.Event_DragComment, this._dragCommentHandler, this);
    };
    /**
     * Create or get commentEditor if it exists.
     */
    Annotation.prototype._getCommentEditor = function() {
        if (!this._commentEditor) {
            var popupLayer = this._popupLayer;
            if (popupLayer) {
                this._commentEditor = new CommentEditorView($(popupLayer));
                this._commentEditor.addEventListener(DialogEvent.OK, this._commentChangedHandler, this);
            }
        }
        return this._commentEditor;
    };
    /**
     * Edit comment.
     */
    Annotation.prototype._editCommentHandler = function(e) {
        var comment = e.data;
        var commentEditor = this._getCommentEditor();
        commentEditor.show({
            userData : {
                isNew : false,
                comment : comment
            },
            comment : comment.text(),
            position : {
                pageX : $(this._div).offset().left + $(this._div).width() / 2,
                pageY : $(this._div).offset().top + $(this._div).height() / 2
            }
        });
    };
    /**
     * Remove comment.
     */
    Annotation.prototype._removeCommentHandler = function(e) {
        var comment = e.data;
        //dispatch comment changed event for save
        this._dispatchEvent(new Event(AnnotationEvent.COMMENT_CHANGED_EVENT, this, comment));
    };
    /**
     * Drag comment.
     */
    Annotation.prototype._dragCommentHandler = function(e) {
        var comment = e.data;
        //dispatch comment changed event for save
        this._dispatchEvent(new Event(AnnotationEvent.COMMENT_CHANGED_EVENT, this, comment));
    };
    /**
     * Handler for comment changed.
     * @param {Event} e
     */
    Annotation.prototype._commentChangedHandler = function(e) {
        var isNew = e.data.userData.isNew;
        var comment = e.data.userData.comment;
        var text = e.data.comment;

        comment.createTime(new Date().toLocaleString());
        comment.text(text);
        if (isNew) {
            this._comments.addComment(comment);
        } else {
            this._comments.updateComment(comment);
        }

        var data = {
            commentChanged : true
        };
        //dispath viz definition changed event
        this._dispatchEvent(new Event(EventTypeConst.VIZ_DEFINITION_CHANGED, this, data));
        //dispatch comment changed event
        this._dispatchEvent(new Event(AnnotationEvent.COMMENT_CHANGED_EVENT, this, comment));
    };
    /**
     * Get/Set popupLayer.
     * @param {HTMLDivElement} popupLayer
     */
    Annotation.prototype.popupLayer = function(popupLayer) {
        if (arguments.length > 0) {
            this._popupLayer = popupLayer;
            return this;
        } else {
            return this._popupLayer;
        }
    };
    /**
     * Validate size for annotation.
     * @param {Number} w width
     * @param {Number} h height
     */
    Annotation.prototype.validateSize = function(w, h) {
        if (this._comments) {
            this._comments.size({
                width : w,
                height : h
            });
        }

        if (this._commentEditor && this._commentEditor.isVisible()) {
            this._commentEditor.setPos({
                pageX : $(this._div).offset().left + $(this._div).width() / 2,
                pageY : $(this._div).offset().top + $(this._div).height() / 2
            });
        }
    };
    /**
     * Destroy itself.
     */
    Annotation.prototype.destroy = function() {
        if (this._commentEditor) {
            this._commentEditor.removeAllEventListeners();
            this._commentEditor = null;
        }
        if (this._popupLayer) {
            this._popupLayer = null;
        }
        $(this._div).remove();
    };
    /**
     * Add new comment.
     */
    Annotation.prototype.addComment = function(selection) {
        var comment = this._comments.createComment(selection);
        if (comment) {
            var commentEditor = this._getCommentEditor();
            commentEditor.show({
                userData : {
                    isNew : true,
                    comment : comment
                },
                comment : '',
                position : {
                    pageX : $(this._div).offset().left + $(this._div).width() / 2,
                    pageY : $(this._div).offset().top + $(this._div).height() / 2
                }
            });
        }
    };
    /**
     * Set chart info if chart changes.
     * @param {JSON} value {
     *     'vizType' : vizType,
     *     'vizData' : vizData
     * }
     */
    Annotation.prototype.setChartInfo = function(value) {
        this._comments.setChartInfo(value);
    };
    /**
     * Redraw comments if chart re-rendered.
     */
    Annotation.prototype.redraw = function() {
        this._comments.redraw();
    };
    /**
     * Initialize layout if chart is changing.
     */
    Annotation.prototype.clean = function() {
        this._comments.clean();
    };
    /**
     * Clean annotation if feeds changed.
     */
    Annotation.prototype.feedsChanged = function() {
        this._comments.feedsChanged();
    };
    /**
     * Get all comments of JSON type
     * @return {JSON}
     */
    Annotation.prototype.save = function() {
        return this._comments.commentsMap2Json();
    };
    /**
     * Add comments of JSON type
     * @param {JSON} valueJSON
     */
    Annotation.prototype.load = function(valueJSON) {
        this._comments.json2CommentsMap(valueJSON);
    };
    return Annotation;
});

// @formatter:off
define('sap/viz/controls/annotationcontrol/AnnotationControlConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var AnnotationControlConfig = {};

    AnnotationControlConfig.instance = function() {
        return {
            "allowDataPointValueChange" : false,
            "visualStrategies" : {
                "indicator" : {
                    "count" : {
                        "disabledRules" : ["SAME_ORIGINAL_VALUE"] // or change the meaning to âallow invalid rules like ORIGINAL_VALUEï¿½?
                    }
                }
            }
        };
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_ANNOTATIONCONTROL, AnnotationControlConfig);
    return AnnotationControlConfig;
});

define('sap/viz/controls/annotationcontrol/AnnotationControlEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var AnnotationControlEvent = function(type, target, data) {
        AnnotationControlEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotationcontrol.AnnotationControlEvent";
    };

    OOUtil.extend(AnnotationControlEvent, Event);

    AnnotationControlEvent.ANNOTATION_SELECTED_EVENT = "annotationSelected";
    AnnotationControlEvent.ANNOTATION_LAYOUTED_EVENT = "annotationLayouted";

    return AnnotationControlEvent;
});

define('sap/viz/controls/annotationcontrol/AnnotationItem',[
// @formatter:off
],
function() {
// @formatter:on
    /**
     * AnnotationItem is the basic visual abstraction of each annotation, it contains a DataContext object which represents the data position and original value in the current dataset.
     * @class sap.viz.controls.annotationcontrol.AnnotationItem
     * @param {String} id annotation item id
     * @param {String} type annotation item type
     * @param {Object} dataContext annotation 
     * @param {Object} style
     *                 style for this annotation item
     * @param {Object} contents
     *                 annotation contents, allow consumer app to keep its own data
     */
    var AnnotationItem = function(id, type, dataContext, style, contents) {
        this.__className = "sap.viz.controls.annotationcontrol.AnnotationItem";

        this._id = id;
        this._type = type;
        this._dataContext = dataContext;
        this._style = style;
        this._contents = contents;
    };

    /**
     * Get/Set AnnotationItem id.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.id
     * @param {string} value
     * @return {string}
     */
    AnnotationItem.prototype.id = function(value){
        if (arguments.length > 0) {
            this._id = value;
        } else {
            return this._id;
        }
    };
    /**
     * Get/Set AnnotationItem type.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.type
     * @param {string} value
     * @return {string}
     */
    AnnotationItem.prototype.type = function(value){
        if (arguments.length > 0) {
            this._type = value;
        } else {
            return this._type;
        }
    };
    /**
     * Get/Set AnnotationItem dataContext.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.dataContext
     * @param {Object} value
     * @return {Object}
     */
    AnnotationItem.prototype.dataContext = function(value){
        if (arguments.length > 0) {
            this._dataContext = value;
        } else {
            return this._dataContext;
        }
    };
    /**
     * Get/Set AnnotationItem style.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.style
     * @param {Object} value
     * @return {Object}
     */
    AnnotationItem.prototype.style = function(value){
        if (arguments.length > 0) {
            this._style = value;
        } else {
            return this._style;
        }
    };
    /**
     * Get/Set AnnotationItem contents.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.contents
     * @param {Object} value
     * @return {Object}
     */
    AnnotationItem.prototype.contents = function(value){
        if (arguments.length > 0) {
            this._contents = value;
        } else {
            return this._contents;
        }
    };

    return AnnotationItem;
});

define('sap/viz/controls/annotationcontrol/Layouter',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event'
],
function(OOUtil, Utils, Event) {
// @formatter:on
    var Layouter = function() {
        this.__className = "sap.viz.controls.annotationcontrol.Layouter";
    };

    return Layouter;
});

// @formatter:off
define('sap/viz/controls/annotationcontrol/AnnotationControl',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/annotationcontrol/AnnotationControlConfig',
    'sap/viz/controls/annotationcontrol/AnnotationControlEvent',
    'sap/viz/controls/annotationcontrol/AnnotationItem',
    'sap/viz/controls/annotationcontrol/Layouter',
],
function($, VizControlBase, OOUtil, AnnotationControlConfig, AnnotationControlEvent, AnnotationItem, Layouter){
// @formatter:on
    var AnnotationControl = function(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        AnnotationControl.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotationcontrol.AnnotationControl";

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_AnnotationControl_control');
        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : AnnotationControlConfig.instance();
        this._annotationItems = [];
        this._createChildren();
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_AnnotationControl_control');
    };
    
    OOUtil.extend(AnnotationControl, VizControlBase);
    
    AnnotationControl.prototype._createChildren = function() {
        this._layouter = new Layouter();
    };
    /**
     * Get/Set annotationItems.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.annotationItems
     * @param {[<AnnotationItem>]} value
     * @return {[<AnnotationItem>]}
     */
    AnnotationControl.prototype.annotationItems = function(value){
        if (arguments.length > 0) {
            this._annotationItems = value;
        } else {
            return this._annotationItems;
        }
    };
    /**
     * show annotations.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.showAnnotations
     */
    AnnotationControl.prototype.showAnnotations = function(){
    };
    /**
     * hide annotations.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.hideAnnotations
     */
    AnnotationControl.prototype.hideAnnotations = function(){
    };
    
    /**
     * get invalid annotations.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.invalidAnnotations
     * @return {[<AnnotationItem>]}
     */
    AnnotationControl.prototype.invalidAnnotations = function(){
        return [];
    };
    
    /**
     * get annotations position.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.getAnnotationPosition
     * @param {[<AnnotationItem>]} items
     * @return {[<{left : Number, top : Number}>]}
     */
    AnnotationControl.prototype.getAnnotationPosition = function(items){
        if(!items || items.length ===0){
            return [];
        }
        
        var dataPoints = [];
        for(var i=0; i<items.length; ++i){
            dataPoints[i] = items[i].dataContext().context;
        }
        return this._vizProxy().getDataPointsPosition(dataPoints);
    };
    
    /**
     * Get all comments of JSON type
     * @return {JSON}
     */
    AnnotationControl.prototype.save = function() {
        return {};
    };
    /**
     * Add comments of JSON type
     * @param {JSON} valueJSON
     */
    AnnotationControl.prototype.load = function(valueJSON) {

    };
    return AnnotationControl;
});

// @formatter:off
define('sap/viz/controls/chart/ChartConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var ChartConfig = {};

    ChartConfig.instance = function() {
        return {
            'enableTrellis' : true,
            'enableMorphing' : true,
            "useBuiltInPropertyZoneInteraction" : false,
            "useDefaultChartSizeForTrellis" : false,
            "defaultLabelFormatString" : [['u']],
            "defaultProperties" : {
                "title" : {
                    "visible" : true
                },
                "tooltip" : {
                    "visible" : true
                },
                "dataLabel" : {
                    "visible" : false
                },
                "plotArea" : {
                    "animation" : {
                        "dataLoading" : false,
                        "dataUpdating" : false,
                        "resizing" : false
                    }
                },
                "legend" : {
                    "visible" : true
                }
            },
            "specificProperties" : {
                "bar" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "background" : {
                        "border" : {
                            "left" : {
                                "visible" : false
                            },
                            "right" : {
                                "visible" : false
                            },
                            "top" : {
                                "visible" : false
                            },
                            "bottom" : {
                                "visible" : false
                            }
                        }
                    }
                },
                "column" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "stacked_bar" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    }
                },
                "stacked_column" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "dual_bar" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "xAxis2" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    }
                },
                "dual_column" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis2" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "3d_column" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "zAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    }
                },
                "line" : {
                    "plotArea" : {
                        "marker" : {
                            "shape" : "circle",
                            "size" : 6,
                            "visible" : true
                        }
                    },
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "area" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "combination" : {
                    "plotArea" : {
                        "line" : {
                            "marker" : {
                                "shape": "circle",
                                "size": 6,
                                "visible": true
                            }
                        }
                    },
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "dual_line" : {
                    "plotArea" : {
                        "marker" : {
                            "shape" : "circle",
                            "size" : 6,
                            "visible" : true
                        }
                    },
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis2" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "dual_combination" : {
                    "plotArea" : {
                        "line" : {
                            "marker" : {
                                "shape": "circle",
                                "size": 6,
                                "visible": true
                            }
                        }
                    },
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis2" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "pie" : {},
                "donut" : {},
                "pie_with_depth" : {},
                "geobubble" : {
                    "plotArea" : {
                        "showNegativeValues" : false
                    },
                    "sizeLegend" : {
                        "visible" : true
                    },
                    "geoContainer" :{
                        "isFixedScale" : false,
                        "scale" : null,
                        "center" : []
                    }
                },
                "choropleth" : {
                    "geoContainer" :{
                        "isFixedScale" : false,
                        "scale" : null,
                        "center" : []
                    }
                },
                "geopie" : {
                    "sizeLegend" : {
                        "visible" : true
                    },
                    "geoContainer" :{
                        "isFixedScale" : false,
                        "scale" : null,
                        "center" : []
                    }
                },
                "scatter" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "bubble" : {
                    "plotArea" : {
                        "showNegativeValues" : false
                    },
                    "sizeLegend" : {
                        "visible" : true
                    },
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "scatter_matrix" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "heatmap" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    }
                },
                "treemap" : {},
                "number" : {},
                "boxplot" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                "network" : {},
                "radar" : {
                    "plotArea" : {
                        "marker" : {
                            "size" : 6,
                        },
                        "valueAxis" : {
                            "title" : {
                                "visible" : true
                            }
                        },
                        "polarAxis" : {
                            "title" : {
                                "visible" : true
                            }
                        }
                    }
                },
                "tagcloud" : {},
                "tree" : {},
                "waterfall" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        },
                        "gridline" : {
                            "visible" : false
                        }
                    }
                },
                //TODO: For extension chart, will be handled by another way later.
                //"ext/table" : {},
                //"ext/pa/funnel" : {},
                //"ext/pa/pc" : {}
            }
        };
    };

    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_CHART, ChartConfig);
    return ChartConfig;
});

define('sap/viz/controls/chart/ChartPreHandler',[
// @formatter:off
    'sap/viz/controls/common/utils/FakeDataUtils',
    'sap/viz/controls/common/utils/InfoChartUtil', 
    'sap/viz/controls/common/feeds/AnalysisObject', 
    'sap/viz/controls/common/feeds/AnalyticalType', 
    'sap/viz/controls/common/feeds/AutoFeedingUtils', 
    'sap/viz/controls/common/feeds/FeedItem', 
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager'
],
function(FakeDataUtils, InfoChartUtil, AnalysisObject, AnalyticalType, AutoFeedingUtils, FeedItem, FeedUtils, LangManager) {
// @formatter:on
    var ChartPreHandler = function(config) {
        this._useInfoChart = config ? config.useInfoChart === true : false;
    };

    ChartPreHandler._toInfoChartOptions = function(options, useInfoChart) {
        if(InfoChartUtil.isInfoChart(options.type)) {
            if(options.feeds && options.data){
                var rawData = options.data.data();
                ChartPreHandler._updateFlatTableDataset(options.feeds, rawData);
                options.data = new sap.viz.api.data.FlatTableDataset(rawData);
            }
            return options;
        }
        if(!useInfoChart){
            return options;
        }

        var infoType = InfoChartUtil.getInfoType(options.type);
        if(infoType) {
            var result = {};
            for(var p in options) {
                if(options.hasOwnProperty(p)) {
                    result[p] = options[p];
                }
            }
            result.type = infoType;
            if(options.data){
                var crosTabDataset = options.data;
                var feeds = options.feeds;
                if(feeds){
                    var rawDataSet = JSON.parse(JSON.stringify(crosTabDataset.data()));
                    ChartPreHandler._updateCrossTabDataSet(options.type, feeds, rawDataSet);
                    crosTabDataset = new sap.viz.api.data.CrosstableDataset();
                    crosTabDataset.data(rawDataSet);
                }
                result.data = InfoChartUtil.buildInfoDataset(crosTabDataset);
            }
            result.properties = InfoChartUtil.buildInfoProperties(options.type, options.properties);

            return result;
        } else {
            return options
        }
    };
    ChartPreHandler._updateFlatTableDataset = function(feeds, rawDataSet){
        if(!feeds || feeds.length ===0){
            return;
        }
        if(!rawDataSet || !rawDataSet.metadata || !rawDataSet.metadata.fields 
            || rawDataSet.metadata.fields.length ===0){
            return;
        }

        //build name->ID map.
        var nameIDMap = {};
        for(var i=0; i<feeds.length; i++){
            var values = feeds[i].values();
            if(!values || values.length ===0){
                continue;
            }
            for(var valueIndex=0; valueIndex<values.length; valueIndex++){
                var val = values[valueIndex];
                if(val.type() === AnalyticalType.MND){
                    continue;
                } else if(val.type() === AnalyticalType.HIERARCHY){
                    var hierarchyLevels = val.hierarchyLevels();
                    for(var k = 0; k < hierarchyLevels.length; k++) {
                        var level = hierarchyLevels[k];
                        if(nameIDMap.hasOwnProperty(level.name())){
                            return;
                        }
                        nameIDMap[level.name()] = level.analysis().id();
                        if(level.selected()) {
                            break;
                        }
                    }
                } else {
                    if(nameIDMap.hasOwnProperty(val.name())){
                        return;
                    }
                    nameIDMap[val.name()] = val.id();
                }
            }
        }
        //update raw dataset
        var fields = rawDataSet.metadata.fields;
        for(var index=0; index<fields.length; index++){
            var field = fields[index];
            if(field.name===field.id && nameIDMap.hasOwnProperty(field.name)){
                field.id = nameIDMap[field.name];
            }
        }
    };
    /**
     * Base on feeding, update crossTab dataset to add id for dimension and measure.
     */
    ChartPreHandler._updateCrossTabDataSet = function(vizType, feeds, rawDataSet){
        if(!rawDataSet){
            return;
        }
        var result = FakeDataUtils.buildFakeData(vizType, feeds, JSON.parse(JSON.stringify(rawDataSet)));
        var feeding = result.feeding;
        if(!feeding || feeding.length ===0){
            return;
        }
        for(var i=0; i<feeding.length; i++){
            var feedingItem = feeding[i];
            var feedItem = FeedUtils.getFeed(feeds, feedingItem.feedId);
            var binding = feedingItem.binding;
            if(!feedItem || !binding || binding.length ===0){
                continue;
            }
            var feedValues = feedItem.values();
            if(!feedValues || feedValues.length ===0){
                continue;
            }
            var data = null;
            for(var n=0; n<binding.length; n++){
                var bindingItem = binding[n];
                var index = bindingItem.index;
                if(!bindingItem || !rawDataSet[bindingItem.type]){
                    continue;
                }
                data = rawDataSet[bindingItem.type][index-1];
                if(data && data.data){
                    data = data.data;
                    break;
                }
            }
            if(!data){
                continue;
            }
            ChartPreHandler._updateDataID(data, feedValues);
        }
    };
    
    ChartPreHandler._updateDataID = function(data, feedValues){
        var dataIndex = 0;
        for(var i =0; i<feedValues.length; i++){
            var val = feedValues[i];
            if(val.type() === AnalyticalType.MND){
                continue;
            } else if(val.type() === AnalyticalType.HIERARCHY){
                var hierarchyLevels = val.hierarchyLevels();
                for(var k = 0; k < hierarchyLevels.length; k++) {
                    var level = hierarchyLevels[k];
                    if(data[dataIndex] && data[dataIndex].name === level.name()){
                        // Use hierarchy level object id, in case its analysis
                        // object is also used in another hierarchy level object,
                        // but with a different hierarchy level name.
                        data[dataIndex].id = level.id();
                        dataIndex ++;
                    }
                    if(level.selected()) {
                        break;
                    }
                }
            } else {
                if(data[dataIndex] && data[dataIndex].name === val.name()){
                    data[dataIndex].id = val.id();
                    dataIndex++;
                }
            }
        }
    };

    ChartPreHandler.prototype.preCreateViz = function(options) {
        options = ChartPreHandler._toInfoChartOptions(options, this._useInfoChart);
        if (options.properties) {
            options.properties.title = options.properties.title || {};
            options.properties.title.text = options.properties.title.text || LangManager.get('IDS_DEFAULTCHARTTITLE');
        }
        return options;
    };

    ChartPreHandler.prototype.preVizUpdate = function(options) {
        options = ChartPreHandler._toInfoChartOptions(options, this._useInfoChart);
        return options;
    };

    ChartPreHandler._toInfoFeeding = function(type, feeds) {
        var newFeeds = null;
        var adjustMND = false;
        if(FeedUtils.hasMND(feeds) || (FeedUtils.countAnalyses(feeds, AnalyticalType.MEASURE) === 0)) {
            newFeeds = feeds;
        } else {
            var vizType = InfoChartUtil.getVizType(type);
            newFeeds = AutoFeedingUtils.directFeeding(feeds, vizType, [AnalysisObject.genMND()]);
            adjustMND = true;
        }
        return InfoChartUtil.buildInfoFeeding(newFeeds, adjustMND);
    };

    ChartPreHandler.prototype.preLoadChart = function(chartObj) {
        var type = chartObj.type;
        var feeds = FeedItem.fromJSON(chartObj["feedingItems"]);
        if(InfoChartUtil.isInfoChart(type)) {
            //update flatTable field id.
            if(chartObj.vizInstance && chartObj.vizInstance.data && chartObj.vizInstance.data.val){
                ChartPreHandler._updateFlatTableDataset(feeds, chartObj.vizInstance.data.val);
            }
            return chartObj;
        }

        if(!this._useInfoChart) {
            return chartObj;
        }

        var infoType = InfoChartUtil.getInfoType(type);
        if(!infoType) {
            return chartObj;
        }
        chartObj.type = infoType;
        if(chartObj.vizInstance) {
            chartObj.vizInstance.type = infoType;
            chartObj.vizInstance.properties = InfoChartUtil.buildInfoProperties(type, chartObj.vizInstance.properties);
            var rawData = chartObj.vizInstance.data;
            if(rawData && rawData.val && rawData.type === "Crosstable") {
                ChartPreHandler._updateCrossTabDataSet(type, feeds, rawData.val);
                var dataset = new sap.viz.api.data.CrosstableDataset();
                dataset.data(rawData.val);
                var infoDataset = InfoChartUtil.buildInfoDataset(dataset);
                rawData.type = "FlatTable";
                rawData.val = infoDataset.data();
            }
            chartObj.vizInstance.feeding = ChartPreHandler._toInfoFeeding(infoType, feeds);
        }

        return chartObj;
    };
    return ChartPreHandler;
});

define('sap/viz/controls/common/constants/MapProviderConst',[],function() {

    var MapProviderConst = {};

    // Map provider
    
    MapProviderConst.ESRI = "ESRI";
    
    MapProviderConst.CVOM = "CVOM";
    
    MapProviderConst.NAVTEQ = "NAVTEQ";

    return MapProviderConst;
});
define('sap/viz/controls/chart/views/AxisSizeAdjustHelper',[],function() {

  var MAIN_NODE_CLASS = "v-m-main";

  /**
   *@param {Object} the viz instance
   *@param {String} a key to specify the module to be adjusted
   *@param {Number} a float number to specify the delta size
   */
  var adjustAxisMaxSize = function(vizInstance, moduleKey, offset) {
    if (!validateHelper.isAxis(moduleKey) || !vizInstance) {
      return null;
    }
    var feedingZones = vizInstance.feedingZone();
    var feedingZone;
    feedingZones.forEach(function(e) {
      if (e.name === moduleKey) {
        feedingZone = e.bound[0];
      }
    });
    var mainNodeBoundingRect = vizInstance._usrOptions.container.querySelector("." + MAIN_NODE_CLASS).querySelector(".v-bound").getBoundingClientRect();
    var mainNodeSize, axisSize;
    if (validateHelper.isXAxis(moduleKey)) {
      mainNodeSize = mainNodeBoundingRect.height;
      axisSize = feedingZone[0][1] - feedingZone[2][1];
    } else {
      mainNodeSize = mainNodeBoundingRect.width;
      axisSize = feedingZone[0][0] - feedingZone[2][0];
    }
    mainNodeSize = Math.abs(mainNodeSize);
    axisSize = Math.abs(axisSize);
    if (mainNodeSize !== 0) {
      offset = parseFloat(offset);
      if (!isNaN(offset)) {
        axisSize += offset;
      }
      var props = {};
      props[moduleKey] = {
        maxSizeRatio: Math.max(0, axisSize / mainNodeSize)
      };
      return props;
    }
    return null;
  };

  var validateHelper = {
    xAxisCandidates: ["xAxis", "xAxis2"],
    yAxisCandidates: ["yAxis", "yAxis2"],
    isXAxis: function(key) {
      return this.xAxisCandidates.indexOf(key) > -1;
    },
    isYAxis: function(key) {
      return this.yAxisCandidates.indexOf(key) > -1;
    },
    isAxis: function(key) {
      return this.isXAxis(key) || this.isYAxis(key);
    }
  };

  return adjustAxisMaxSize;

});
define('sap/viz/controls/chart/views/AxisSplitter',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher'
],
function($, OOUtil, VizUtils, CSSConst, Event, EventDispatcher){
// @formatter:on
    var AxisSplitter = function(container, propertiesProvider, propertyZoneProvider){
        AxisSplitter.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.AxisSplitter";
        this._container = container;
        this._propertiesProvider = propertiesProvider;
        this._propertyZoneProvider = propertyZoneProvider;
        this._createChildren();
    };
    
    OOUtil.extend(AxisSplitter, EventDispatcher);
    
    AxisSplitter.AxisSplitChanged = "AxisSplitChanged";

    AxisSplitter.prototype._createChildren = function(){
        this._div$ = $(document.createElement("DIV"));
        this._resizeHelper$ = $(document.createElement("DIV")).addClass(CSSConst.CHART_PREFIX + 'axissplitter-resizehelper');
        this._mask$ = $(document.createElement("DIV")).addClass(CSSConst.CHART_PREFIX + 'axissplitter-resizehelper-mask');
        this._axis$ = this._createAxis();
        this._axis2$ = this._createAxis();
        this._div$.append(this._axis$).append(this._axis2$);
        this._div$.appendTo(this._container);
    };
    
    AxisSplitter.prototype._updateResizeHelperBound = function(bound){
        var width = bound[1][0] - bound[0][0];
        var height = bound[2][1] - bound[0][1];
        this._resizeHelper$.css({
            left  : bound[0][0],
            top   : bound[0][1],
            width : width,
            height: height
        });
        this._resizeHelper$.appendTo(this._container);
    };
    
    AxisSplitter.prototype._resizeHelper = function(offset, isHorizontal){
        var position = this._resizeHelper$.position();
        if(isHorizontal){
            this._resizeHelper$.css({
                top   : position.top + offset,
                height: this._resizeHelper$.height() - offset
            });
        } else {
            this._resizeHelper$.css({
                width : this._resizeHelper$.width() + offset
            });
        }
    };
    
    AxisSplitter.prototype._createAxis = function(){
        var axis$ = $(document.createElement("DIV")).addClass(CSSConst.CHART_PREFIX + 'axissplitter-axis');
        var isHorizontal = false;
        var startPoint, currentPoint;
        var _this = this;
        var mousemove = function(e){
            var offset = isHorizontal ? (e.clientY - currentPoint) : (e.clientX - currentPoint);
            var position = axis$.position();
            if(isHorizontal){
                offset = Math.max(-position.top, offset);
                offset = Math.min(axis$.data("bottom") - position.top, offset);
                var top = position.top + offset;
                axis$.css({
                    top : top
                });
                
            } else {
                offset = Math.max(-(position.left-axis$.data("left")), offset);
                offset = Math.min($(_this._container).width() - position.left -6, offset);
                var left = position.left + offset;
                axis$.css({
                    left : left
                });
            }
            currentPoint += offset;
            _this._resizeHelper$.css("cursor",axis$.css("cursor"));
            _this._resizeHelper(offset, isHorizontal);
           e.stopPropagation();
        };
        var mousemoveEnd = function(e){
            _this._mask$.unbind("mousemove", mousemove);
            _this._mask$.unbind("mouseup", mousemoveEnd);
            _this._mask$.unbind("mouseout", mousemoveEnd);
            _this._mask$.detach();
            _this._resizeHelper$.detach();
            var endPoint = isHorizontal ? e.clientY : e.clientX;
            var axisName = axis$.data("axis").name;
            var offset = startPoint - endPoint;
            offset = isHorizontal ? offset : -offset;
            _this._axisMoved(axisName, offset);
        };
        axis$.mousedown(function(e){
            _this._mask$.css("cursor",axis$.css("cursor"));
            _this._mask$.appendTo(document.body);
            isHorizontal = axis$.data("isHorizontal");
            startPoint = currentPoint = isHorizontal ? e.clientY : e.clientX;
            _this._updateResizeHelperBound(axis$.data("axis").bound[0]);
            _this._mask$.mousemove(mousemove);
            _this._mask$.mouseup(mousemoveEnd);
            _this._mask$.mouseout(mousemoveEnd);
        });

        return axis$;
    };

    AxisSplitter.prototype._axisMoved = function(axisName, offset){
        var data = {
            axisName : axisName,
            offset : offset
        };
        this._dispatchEvent(new Event(AxisSplitter.AxisSplitChanged , this, data));
    };

    AxisSplitter.prototype._getAxis = function(){
        var zone = this._propertyZoneProvider();
        var result = [];
        if(!zone || zone.length ==0 ){
            return result;
        }

        for(var i =0; i<zone.length; ++i){
            for(var n=0; n<this._categoryAxis.length; ++n){
                if(zone[i].name === this._categoryAxis[n]){
                    result.push(zone[i]);
                }
            }
        }
        return result;
    };
    
    AxisSplitter.prototype._layoutAxis = function(axis$, axis){
        var isHorizontal = true;
        if(axis.name === "yAxis" || axis.name === "yAxis2" ){
            isHorizontal = false;
        }
        axis$.data("isHorizontal", isHorizontal);
        axis$.data("axis", axis);
        if(isHorizontal){
            var width = axis.bound[0][1][0] - axis.bound[0][0][0];
            axis$.data("bottom", axis.bound[0][2][1]);
            axis$.css({
                left  : axis.bound[0][0][0],
                top   : axis.bound[0][1][1],
                width : width,
                height: 6,
                "margin-top": -3,
                "margin-left": 0,
                cursor : "n-resize"
            });
        } else {
            var height = axis.bound[0][2][1] - axis.bound[0][0][1];
            axis$.data("left", axis.bound[0][0][0]);
            axis$.css({
                left   : axis.bound[0][1][0],
                top    : axis.bound[0][0][1],
                height : height,
                width  : 6,
                "margin-top": 0,
                "margin-left": -3,
                cursor : "e-resize"
            });
        }
    };
    
    AxisSplitter.prototype._layout = function(){
        var axis = this._getAxis();
        if(!axis || axis.length ===0){
            return;
        }
        
        this._layoutAxis(this._axis$, axis[0]);
        if(axis[1]){
            this._axis2$.css({
                'visibility' : ""
            });
            this._layoutAxis(this._axis2$, axis[1]);
        } else {
            this._axis2$.css({
                'visibility' : "hidden"
            });
        }
    };
    AxisSplitter.prototype.reset = function(){
        this._div$.css({
            'visibility' : 'hidden'
        });
    };

    AxisSplitter.prototype.init = function(type){
        this._categoryAxis = VizUtils.getCategoryAxis(type);
        if(!this._categoryAxis || this._categoryAxis.length ==0){
            this.reset();
            return;
        }
        this._layout();
        this._div$.css({
            'visibility' : "visible"
        });
    };
    
    AxisSplitter.prototype.deactive = function(){
        this._div$.css({
            'display' : "none"
        });
    };
    
    AxisSplitter.prototype.active = function(){
        this._div$.css({
            'display' : "block"
        });
    };
    
    return AxisSplitter;
});

// @formatter:off
define('sap/viz/controls/chart/views/ChartEvent',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
function(OOUtil, Event) {
// @formatter:on
    var ChartEvent = function(type, target, data) {
        ChartEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.ChartEvent";
    };
    OOUtil.extend(ChartEvent, Event);

    ChartEvent.CHANGED_SELECTED_DATA = "changeSelectedData";

    ChartEvent.TRIGGER_CVOM_EVENT = "triggerCVOMEvent";

    ChartEvent.CHART_CHANGING = "ChartChanging";

    ChartEvent.CHART_CHANGED = "ChartChanged";

    ChartEvent.CVOM_INITIALIZED = "CVOMChartInitialized";

    ChartEvent.CLICK_FILTER_BUTTON = "clickFilterButton";

    ChartEvent.CLICK_EXCLUDE_BUTTON = "clickExcludeButton";

    ChartEvent.CLICK_DRILLDOWN_BUTTON = "clickDrillDownButton";

    ChartEvent.CHANGE_FEEDING = "changeFeeding";

    ChartEvent.ANALYSIS_DROPPED = "analysisDropped";

    ChartEvent.TITLE_CHANGED = "TitleChanged";

    ChartEvent.VIZTYPE_CHANGED = "vizTypeChanged";

    ChartEvent.VIZ_VIEW_CHANGED = 'vizViewChanged';
    /**
     * type: 'selectPropertyZone'
     * data: 'propertyZoneName'
     */
    ChartEvent.SELECT_PROPERTY_ZONE = "selectPropertyZone";

    ChartEvent.PROPERTY_ZONES_CHANGED = 'propertyZonesChanged';
    
    ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED = 'esriCustomizedServiceChanged';

    return ChartEvent;
});

define('sap/viz/controls/chart/views/DataPointFinder',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/Utils'
    ],
function($, Utils) {
// @formatter:on

    var DataPointFinder = {};

    DataPointFinder.findDataPointsPosition = function(dataPoints) {
        var result = [];
        if(!dataPoints || dataPoints.length ===0){
            return result;
        }
        
        for (var i = 0; i < dataPoints.length; i++) {
            var dataPointUI = DataPointFinder._findDataPointUI(dataPoints[i]);
            if(dataPointUI){
                result[i] = dataPointUI.getBoundingClientRect();
            }
        }
        return result;
    };

    DataPointFinder._findDataPointUI = function(dataPoint){
        var datapoints = d3.selectAll('.v-datapoint')[0];
        for (var i = 0; i < datapoints.length; i++) {
            var data = datapoints[i].__data__;
            if(!data){
                continue;
            }
            var ctx;
            if (Utils.isArray(data.ctx)) {
                ctx = data.ctx[0];
            } else {
                ctx = data.ctx;
            }
            if(ctx.path == dataPoint.ctx[0]){
                return datapoints[i];
            }
        }
        return null;
    };

    return DataPointFinder;
});

define('sap/viz/controls/chart/views/DropZone',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/managers/DragManager',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/helpers/Rectangle'],
function($, CSSConst, FeedUtils, OOUtil, utils, Event, EventDispatcher, FeedItem, FeedItemType, DragManager, DropAction,
        AnalyticalType, Rectangle) {
// @formatter:on

    var DropZone = function(targetDiv, zoneProvider, feedValidator) {
        DropZone.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.DropZone";
        this._targetDiv = targetDiv;
        this._zoneProvider = zoneProvider;
        this._feedValidator = feedValidator;
        this._enterDrop = false;
        this._dragActionArray = [];
        var style = "position:absolute;visibility:hidden;left:0px;top:0px;width:0px;height:0px;";
        this._dom = $(document.createElement("DIV")).appendTo(this._targetDiv.parentNode).attr('style', style);

        var self = this;
        this._dom.droppable({
            accept : $.proxy(function(draggable$) {
                return this._isTriggerAllowed(draggable$) === true;
            }, this),
            activate : function(e, ui) {
                self.enterDrop.apply(self, [e, ui]);
            },
            deactivate : function(e, ui) {
                utils.defer(function() {
                    self.exitDrop.apply(self, [e, ui]);
                });
            }
        });
    };

    OOUtil.extend(DropZone, EventDispatcher);

    DropZone.DROP_ITEM_EVENT = 'DROP_ITEM_EVENT';
    //padding for labels (x Axis, y Axis, rows, columns).
    var _padding = 8;

    /**
     * TODO: move to FeedUtil
     * @param {Object} zone
     * @param {Object} token
     */
    DropZone.prototype._match = function(zone, analysisObject) {
        var type = analysisObject.type();
        if (type) {
            type = type.toLowerCase();
        }
        var dataType = analysisObject.dataType();
        if (dataType) {
            dataType = dataType.toLowerCase();
        }
        var feedDefs = zone.feedDef;
        var defType = feedDefs[0].id === FeedUtils.geoFeeds.id ? FeedItemType.GEOGRAPHY : feedDefs[0].type;
        if (feedDefs.length === 1 && FeedUtils.feedCompatible(defType, type, dataType)) {
            return true;
        }

        for (var i = 0; i < feedDefs.length; i++) {
            defType = feedDefs[i].id === FeedUtils.geoFeeds.id ? FeedItemType.GEOGRAPHY : feedDefs[i].type;
            if (FeedUtils.feedCompatible(defType, type, dataType) && feedDefs[i].id !== FeedUtils.MultiplierFeedingName) {
                return true;
            }
        }

        return false;
    };
    /**
     * TODO: Add comments.
     * @param {Object} e
     * @param {Object} ui
     */
    DropZone.prototype._onDragOver = function(e, ui) {
        if (!this._enterDrop) {
            return;
        }

        var zone = e.target.__zone;
        var areaIndex = e.target.__areaIndex;
        var token = DragManager.instance().getAnalysisToken(ui.helper);

        if (!zone) {
            token.currentAction(DropAction.DENY);
            return;
        }

        this._hightlight(zone, areaIndex);

        if (this._acceptable(zone, token.analysisObject)) {
            token.dropTarget(e.target);
            token.currentAction(DropAction.ACCEPT);
        } else {
            token.currentAction(DropAction.DENY);
        }

        for (var index in this._dragActionArray) {
            if (this._dragActionArray[index].zoneName === zone.name) {
                this._dragActionArray.splice(index, 1);
                break;
            }
        }
        // please pay attention if drag over do more things than update token action in the future.
        this._dragActionArray.push({
            "zoneName" : zone.name,
            "action" : token.currentAction()
        });
    };
    DropZone.prototype._acceptable = function(zone, analysisObject) {
        var match = this._match(zone, analysisObject);
        if (!match) {
            return false;
        }

        var feedable = false;
        var feedDefs = zone.feedDef;
        for (var i = 0; i < feedDefs.length; i++) {
            if (feedDefs[i].id !== "r_subtotals") {
                feedable = feedable || this._feedValidator(feedDefs[i], analysisObject, zone.name);
            }
            
        }
        return match && feedable;
    };
    /**
     * TODO: Add comments.
     * @param {Object} e
     * @param {Object} ui
     */
    DropZone.prototype._onDragOut = function(e, ui) {
        if (!this._enterDrop) {
            return;
        }

        var zone = e.target.__zone;
        var areaIndex = e.target.__areaIndex;
        if (zone) {
            this._unHightlight(zone, areaIndex);
        }
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if (token.currentAction() === DropAction.ACCEPT && token.dropTarget() === e.target) {
            token.currentAction(DropAction.DENY);
            token.dropTarget(null);
        }

        for (var index in this._dragActionArray) {
            if (this._dragActionArray[index].zoneName === zone.name) {
                this._dragActionArray.splice(index, 1);
                break;
            }
        }

        // for radar chart, valueaxis and plot zone have overlap, dragout valueaxis should reset the token action
        // to plot's status.
        var length = this._dragActionArray.length;
        if (length > 0) {
            // please pay attention if drag over do more things than update token action in the future.
            token.currentAction(this._dragActionArray[length-1].action);
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} e
     * @param {Object} ui
     */
    DropZone.prototype._onDragDrop = function(e, ui) {
        var zone = e.target.__zone;
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if (!zone || !token) {
            return;
        }

        // for radar chart, valueaxis and plot zone have overlap, dragdrop should only trigger valueaxis
        var length = this._dragActionArray.length;
        if (length > 0) {
            // please pay attention if drag over do more things than update token action in the future.
            var lastDragInfo = this._dragActionArray[length-1];
            if (lastDragInfo.zoneName !== zone.name) {
                return;
            }
        }

        var bounds = Rectangle.parseDOM($(this._targetDiv));
        var point = new Rectangle(e.pageX, e.pageY, 0, 0);
        if (!bounds.contains(point)) {
            return;
        }

        var analysisObject = token.analysisObject;
        if (this._acceptable(zone, analysisObject)) {
            token.currentAction(DropAction.ACCEPT);
            this._dispatchEvent(new Event(DropZone.DROP_ITEM_EVENT, this, {
                'zone' : zone,
                'analysisObject' : analysisObject
            }));
        } else {
            token.currentAction(DropAction.DENY);
        }
        token.dropTarget(this._dom);
    };
    /**
     * If the draggable trigger is accepted by vizFrame.
     */

    DropZone.prototype._isTriggerAllowed = function(draggable$) {
        var allowed = draggable$.hasClass(DragManager.DRAGGABLE_CLASS_ANALYSIS);
        // don't accept dragging from feeding panel
        allowed = allowed && !draggable$.hasClass(CSSConst.FEEDINGSHELF_PREFIX + 'card');
        return allowed;
    };
    /**
     * TODO: Add comments.
     * @param {Object} area
     */
    DropZone.prototype._createDiv = function(parent, area, text, rotate) {
        var div$ = $(document.createElement("DIV"));
        var left = area[0][0], top = area[0][1], width = area[2][0] - area[0][0], height = area[2][1] - area[0][1];
        var style = "visibility:hidden;left:" + left + "px;top:" + top + "px;width:" + width + "px;height:" + height + "px;";
        var self = this;

        div$.attr('style', style).droppable({
            tolerance : 'pointer',
            accept : $.proxy(function(draggable$) {
                return this._isTriggerAllowed(draggable$) === true;
            }, this),
            drop : function(e, ui) {
                self._onDragDrop.apply(self, [e, ui]);
            },
            over : function(e, ui) {
                self._onDragOver.apply(self, [e, ui]);
            },
            out : function(e, ui) {
                self._onDragOut.apply(self, [e, ui]);
            }
        });
        div$.addClass(CSSConst.CHART_PREFIX + 'drop-zone').appendTo(parent);
        if (text && text.length > 0) {
            style = "position:absolute;left:0px;top: 0px;";
            var text$ = $(document.createElement("DIV")).attr('style', style).text(text).appendTo(div$);
            var rect = text$[0].getBoundingClientRect();
            var transform = null;
            if (rotate) {
                transform = "translate(" + (width - rect.width) / 2 + "px," + ((rect.width - rect.height) / 2 + _padding ) + "px) rotate(-90deg);";
            } else {
                transform = "translate(" + _padding + "px, " + (height - rect.height) / 2 + "px);";
            }
            style += "transform: " + transform;
            style += "-webkit-transform: " + transform;
            style += "-ms-transform: " + transform;
            style += "-moz-transform: " + transform;
            text$.attr('style', style);
        }

        return div$;
    };
    /**
     * TODO: Add comments.
     */
    DropZone.prototype.enterDrop = function(event, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if (!token) {
            return;
        }

        if (this._enterDrop) {
            return;
        }

        this._enterDrop = true;
        this._targetRect = this._targetDiv.getBoundingClientRect();
        var style = "position:absolute;left:0px;top:0px;width:" + this._targetRect.width + "px;height:" + this._targetRect.height + "px;";
        this._dom.empty().attr('style', style);

        //create sub div
        var zones = this._zoneProvider();
        if (!zones) {
            return;
        }
        this._dragActionArray = [];
        for (var i = 0; i < zones.length; i++) {
            var areas = zones[i].bound;
            for (var n = 0; n < areas.length; n++) {
                var div = this._createDiv(this._dom[0], areas[n], zones[i].text, zones[i].rotate);
                div[0].__zone = zones[i];
                div[0].__areaIndex = n;
            }
        }
    };
    /**
     * TODO: Add comments.
     */
    DropZone.prototype.exitDrop = function() {
        if (!this._enterDrop) {
            return;
        }

        this._dom.empty();
        this._dom.css('visibility', 'hidden');
        this._enterDrop = false;
    };
    /**
     * resize dropzone
     * @param {width: Number, height: Number} size
     */
    DropZone.prototype.size = function(size) {
        if (size) {
            this._dom.css({
                width : size.width + "px",
                height : size.height + "px"
            });
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} zone
     * @param {Object} areaIndex
     */
    DropZone.prototype._getDom = function(zone, areaIndex) {
        var children = this._dom.children();
        for (var i = 0; i < children.length; i++) {
            if (children[i].__zone === zone && children[i].__areaIndex === areaIndex) {
                return children[i];
            }
        }
        return null;
    };
    /**
     * TODO: Add comments.
     * @param {Object} zone
     * @param {Object} areaIndex
     */
    DropZone.prototype._hightlight = function(zone, areaIndex) {
        var dom = this._getDom(zone, areaIndex);
        if (dom) {
            $(dom).css('visibility', '');
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} zone
     * @param {Object} areaIndex
     */
    DropZone.prototype._unHightlight = function(zone, areaIndex) {
        var dom = this._getDom(zone, areaIndex);
        if (dom) {
            $(dom).css('visibility', 'hidden');
        }
    };
    return DropZone;
});

define('sap/viz/controls/chart/views/EditAxisView',
[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/managers/LangManager',
],
function($, OOUtil, VizUtils, UIControl, ChartConst, CSSConst, Event, LangManager){
    var EditAxisView = function(dom, uiconfig){
        EditAxisView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.EditAxisView";
        
        this._createChildren();
    };
    
    OOUtil.extend(EditAxisView, UIControl);
    
    EditAxisView.AxisScaleChanged = "AxisScaleChanged";
    EditAxisView.prototype._createChildren = function(){
        var _this = this;
        //create dialog
        this._confirmDialog$ = $(document.createElement('div'));
        this._confirmDialog$.addClass(CSSConst.CHART_PREFIX + 'editaxis');
        
        this._axisContainer = [];
        this._axisContainer[0] = this._createAxisUI("primaryAxis");
        this._confirmDialog$.append(this._axisContainer[0]);
        this._axisContainer[1] = this._createAxisUI("secondaryAxis");
        this._confirmDialog$.append(this._axisContainer[1]);
        
        //create dialog footer
        var dialogFooter$ = $(document.createElement('div'));
        dialogFooter$.addClass(CSSConst.CHART_PREFIX + 'editaxis-footer');
        this._confirmDialog$.append(dialogFooter$);

        var dialogFooterButtons$ = $(document.createElement('div'));
        dialogFooterButtons$.addClass(CSSConst.CHART_PREFIX + 'editaxis-footer-buttons');
        dialogFooter$.append(dialogFooterButtons$);

        var dialogFooterOKButton$ = $(document.createElement('button'));
        dialogFooterOKButton$.text(LangManager.get("VIZ_COMMON_OK"));
        dialogFooterOKButton$.addClass(CSSConst.CHART_PREFIX + 'editaxis-footer-button');
        dialogFooterOKButton$.addClass(CSSConst.COMMON_PREFIX + 'button');
        dialogFooterButtons$.append(dialogFooterOKButton$);
        dialogFooterOKButton$.click(function() {
            _this.hide();
            _this._applyChange();
        });
        var dialogFooterCancelButton$ = $(document.createElement('button'));
        dialogFooterCancelButton$.text(LangManager.get("VIZ_COMMON_CANCEL"));
        dialogFooterCancelButton$.addClass(CSSConst.CHART_PREFIX + 'editaxis-footer-button');
        dialogFooterCancelButton$.addClass(CSSConst.COMMON_PREFIX + 'button');
        dialogFooterButtons$.append(dialogFooterCancelButton$);
        dialogFooterCancelButton$.click(function() {
            _this.hide();
        });

        this._blockLayout$ = $(document.createElement('div'));
        this._blockLayout$.addClass(CSSConst.CHART_PREFIX + 'block-layer');
    };
    
    EditAxisView.prototype._createAxisUI = function(axisName){
        var _this = this;
        var container$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'editaxis-axiscontainer');
        var axis$ = $(document.createElement('div')).appendTo(container$).addClass(CSSConst.CHART_PREFIX + 'editaxis-axisname');
        $(document.createElement('span')).appendTo(axis$).attr("id","axisName").text("Axis");
        var separator$ = $(document.createElement('div')).appendTo(container$).addClass(CSSConst.CHART_PREFIX + 'editaxis-separator');
        var autoDiv$ = $(document.createElement('div')).appendTo(container$);
        autoDiv$.append('<input type="radio" id="autoRange" value="false" name="'+axisName+'"></input>');
        autoDiv$.find("#autoRange").change(function(){
            _this._updateFixedRangeInput(fixRangeDiv$.find("#fixedRange")[0], inputDiv$);
        });
        
        $(document.createElement('span')).appendTo(autoDiv$).text(LangManager.get("VIZ_CHART_AUTO_RANGE"));
        
        var fixRangeDiv$ = $(document.createElement('div')).appendTo(container$);
        fixRangeDiv$.append('<input type="radio" id="fixedRange" value="true" name="'+axisName+'"></input>');
        fixRangeDiv$.find("#fixedRange").change(function(){
            _this._updateFixedRangeInput(fixRangeDiv$.find("#fixedRange")[0], inputDiv$);
        });
       
        $(document.createElement('span')).appendTo(fixRangeDiv$).text(LangManager.get("VIZ_CHART_FIXED_RANGE"));
        var inputDiv$ = $(document.createElement('div')).appendTo(container$).addClass(CSSConst.CHART_PREFIX + 'editaxis-inputs');
        //CSP Fixing
        var minInput$ = $('<input type="number" id="minValue" style="ime-mode:Disabled" class="'+(CSSConst.CHART_PREFIX + "editaxis-inputvalue")+'"></input>');
        minInput$.on("keypress", function(event) {
            return (/[\d.-]/.test(String.fromCharCode(event.keyCode)));
        });
        inputDiv$.append(minInput$);

        $(document.createElement('span')).appendTo(inputDiv$).text(" - ");

        //CSP Fixing
        var maxInput$ = $('<input type="number" id="maxValue" style="ime-mode:Disabled" class="'+(CSSConst.CHART_PREFIX + "editaxis-inputvalue") + '"></input>');
        maxInput$.on("keypress", function(event) {
            return (/[\d.-]/.test(String.fromCharCode(event.keyCode)));
        });
        inputDiv$.append(maxInput$);

       return container$;
    };
    
    EditAxisView.prototype._updateFixedRangeInput = function(fixedRange, inputDiv$){
        var disabled = fixedRange.checked ? false : true;
        inputDiv$.find("input").attr("disabled",disabled);
    };
    
    EditAxisView.prototype._propertiesChanged = function(properties){
        for(var i=0; i<this._valueAxis.length; ++i){
            var axis = this._valueAxis[i];
            var property = properties[axis];
            var preProperty = this._properties[axis];
            if(property.scale.fixedRange !== preProperty.scale.fixedRange){
                return true;
            }
            if(property.scale.fixedRange){
                if(property.scale.minValue !== preProperty.scale.minValue || 
                    property.scale.maxValue !== preProperty.scale.maxValue){
                        return true;
                    }
            }
        }
        return false;
    };
    
    EditAxisView.prototype._applyChange = function(){
        var properties = {};
        for(var i=0; i<this._valueAxis.length; ++i){
            var axis = this._valueAxis[i];
            properties[axis] = { scale : { fixedRange: false } };
            var container$ =this._axisContainer[i];
            if(!container$){
                continue;
            }
            if(container$.find("#fixedRange")[0].checked){
                properties[axis].scale.fixedRange = true;
                properties[axis].scale.minValue = Number(container$.find("#minValue").val());
                properties[axis].scale.maxValue = Number(container$.find("#maxValue").val());
            }
        }
        if(this._propertiesChanged(properties)){
            this._dispatchEvent(new Event(EditAxisView.AxisScaleChanged, this, properties));
        }
    };

    EditAxisView.prototype._getAxisName = function(type, axis){
        var valueAxis = VizUtils.getValueAxis(type);
        var axisCount = valueAxis ? valueAxis.length : 1;
        if(axisCount ===1 || type===ChartConst.TYPE_SCATTER || type===ChartConst.TYPE_BUBBLE){
            if(axis === ChartConst.AXIS_XAXIS){
                return LangManager.get("VIZ_CHART_XAXIS_RANGE")
            } else if(axis === ChartConst.AXIS_YAXIS){
                return LangManager.get("VIZ_CHART_YAXIS_RANGE")
            }
        } else {
            if(axis === ChartConst.AXIS_XAXIS){
                return LangManager.get("VIZ_CHART_XAXIS2_RANGE")
            } else if(axis === ChartConst.AXIS_YAXIS){
                return LangManager.get("VIZ_CHART_YAXIS1_RANGE")
            }
        }
        if(axis === ChartConst.AXIS_XAXIS2){
            return LangManager.get("VIZ_CHART_XAXIS1_RANGE")
        } else if(axis === ChartConst.AXIS_YAXIS2){
            return LangManager.get("VIZ_CHART_YAXIS2_RANGE")
        }
        return "";
    };

    EditAxisView.prototype._updateUI = function(type, properties, axis){
        this._properties = properties;
        if(axis){
            this._valueAxis = [axis];
        } else {
            this._valueAxis = VizUtils.getValueAxis(type);
        }
        var valueAxis = this._valueAxis;
        if(!valueAxis || valueAxis.length ===0 ){
            return;
        }
        
        for(var i=0; i<valueAxis.length; ++i){
            var axis = valueAxis[i];
            var property = properties[axis];
            var container$ =this._axisContainer[i];
            if(!container$ ){
                continue;
            }
            container$.css({
                "display" : "block"
            });
            container$.find("#axisName").text(this._getAxisName(type, axis));
            if(property.scale.fixedRange){
                container$.find("#fixedRange")[0].checked = true;
            } else {
                container$.find("#autoRange")[0].checked = true;
            }
            container$.find("#minValue").val(property.scale.minValue);
            container$.find("#maxValue").val(property.scale.maxValue);
            this._updateFixedRangeInput(container$.find("#fixedRange")[0], container$.find("." + CSSConst.CHART_PREFIX + 'editaxis-inputs'));
        }
        for(var n=valueAxis.length; n<this._axisContainer.length; n++ ){
            this._axisContainer[n].css({
                "display" : "none"
            });
        }
    };
    
    EditAxisView.prototype.show = function(type, properties, axis){
        this._visible = true;
        var left = this._dom$.offset().left + this._dom$.width() / 2;
        var top = this._dom$.offset().top + this._dom$.height() / 2;
        $(document.body).append(this._blockLayout$);
        $(document.body).append(this._confirmDialog$);
        this._confirmDialog$.css({
            position : "absolute",
            left : left - this._confirmDialog$.width() / 2,
            top : top - this._confirmDialog$.height() / 2 
        });
        
        this._updateUI(type, properties, axis);
    };
    
    EditAxisView.prototype.hide = function() {
        this._visible = false;
        this._blockLayout$.detach();
        this._confirmDialog$.detach();
    };
    
    return EditAxisView;
}
);

define('sap/viz/controls/chart/morph/constant/MorphConst',[],function() {

    var MorphConst = {};

    // Shape Data Keys
    MorphConst.SHAPE_DATA = "data";

    MorphConst.SHAPE_GLOBAL_TRANSLATE_X = "translateX";
    MorphConst.SHAPE_GLOBAL_TRANSLATE_Y = "translateY";

    MorphConst.MORPHER_DISABLE_COLOR = "MORPHER_DISABLE_COLOR";
    MorphConst.MORPHER_DISABLE_LINE = "MORPHER_DISABLE_LINE";
    MorphConst.MORPHER_DISABLE_PATH = "MORPHER_DISABLE_PATH";
    MorphConst.MORPHER_DISABLE_RECT = "MORPHER_DISABLE_RECT";
    MorphConst.MORPHER_DISABLE_TEXT = "MORPHER_DISABLE_TEXT";
    MorphConst.MORPHER_DISABLE_TRANSFORM = "MORPHER_DISABLE_TRANSFORM";

    // Chart Types
    MorphConst.CHART_TYPE_COLUMN = "viz/column";
    MorphConst.CHART_TYPE_STACKED_COLUMN = "viz/stacked_column";
    MorphConst.CHART_TYPE_100_STACKED_COLUMN = "viz/100_stacked_column";
    MorphConst.CHART_TYPE_DUAL_COLUMN = "viz/dual_column";
    MorphConst.CHART_TYPE_3D_COLUMN = "viz/3d_column";

    MorphConst.CHART_TYPE_BAR = "viz/bar";
    MorphConst.CHART_TYPE_STACKED_BAR = "viz/stacked_bar";
    MorphConst.CHART_TYPE_100_STACKED_BAR = "viz/100_stacked_bar";
    MorphConst.CHART_TYPE_DUAL_BAR = "viz/dual_bar";
    MorphConst.CHART_TYPE_3D_BAR = "viz/3d_bar";

    MorphConst.CHART_TYPE_LINE = "viz/line";
    MorphConst.CHART_TYPE_HORIZONTAL_LINE = "viz/horizontal_line";
    MorphConst.CHART_TYPE_DUAL_LINE = "viz/dual_line";
    MorphConst.CHART_TYPE_DUAL_HORIZONTAL_LINE = "viz/dual_horizontal_line";

    MorphConst.CHART_TYPE_AREA = "viz/area";
    MorphConst.CHART_TYPE_HORIZONTAL_AREA = "viz/horizontal_area";
    MorphConst.CHART_TYPE_100_AREA = "viz/100_area";
    MorphConst.CHART_TYPE_100_HORIZONTAL_AREA = "viz/100_horizontal_area";

    MorphConst.CHART_TYPE_COMBINATION = "viz/combination";
    MorphConst.CHART_TYPE_HORIZONTAL_COMBINATION = "viz/horizontal_combination";
    MorphConst.CHART_TYPE_DUAL_COMBINATION = "viz/dual_combination";
    MorphConst.CHART_TYPE_DUAL_HORIZONTAL_COMBINATION = "viz/dual_horizontal_combination";

    MorphConst.CHART_TYPE_BOXPLOT = "viz/boxplot";
    MorphConst.CHART_TYPE_HORIZONTAL_BOXPLOT = "viz/horizontal_boxplot";

    MorphConst.CHART_TYPE_WATERFALL = "viz/waterfall";
    MorphConst.CHART_TYPE_HORIZONTAL_WATERFALL = "viz/horizontal_waterfall";

    MorphConst.CHART_TYPE_PIE = "viz/pie";
    MorphConst.CHART_TYPE_DONUT = "viz/donut";
    MorphConst.CHART_TYPE_PIE_WITH_DEPTH = "viz/pie_with_depth";

    MorphConst.CHART_TYPE_SCATTER = "viz/scatter";
    MorphConst.CHART_TYPE_BUBBLE = "viz/bubble";
    MorphConst.CHART_TYPE_SCATTER_MATRIX = "viz/scatter_matrix";

    MorphConst.CHART_TYPE_GEO_BUBBLE = "viz/geobubble";
    MorphConst.CHART_TYPE_GEO_CHOROPLETH = "viz/choropleth";
    MorphConst.CHART_TYPE_GEO_PIE = "viz/geopie";

    MorphConst.CHART_TYPE_HEATMAP = "viz/heatmap";
    MorphConst.CHART_TYPE_TREEMAP = "viz/treemap";

    MorphConst.CHART_TYPE_TABLE = "viz/ext/table";
    MorphConst.CHART_TYPE_CROSSTAB = "viz/ext/crosstab";

    MorphConst.CHART_TYPE_RADAR = "viz/radar";

    MorphConst.CHART_TYPE_TAG_CLOUD = "viz/tagcloud";

    // Chart Horizontal - Vertical Mapping
    var _CHART_VERTICAL_HORIZONTAL_MAPPING = {};
    var mapChartVH = function(vType, hType) {
        _CHART_VERTICAL_HORIZONTAL_MAPPING[vType] = hType;
    };
    mapChartVH(MorphConst.CHART_TYPE_COLUMN, MorphConst.CHART_TYPE_BAR);
    mapChartVH(MorphConst.CHART_TYPE_STACKED_COLUMN, MorphConst.CHART_TYPE_STACKED_BAR);
    mapChartVH(MorphConst.CHART_TYPE_100_STACKED_COLUMN, MorphConst.CHART_TYPE_100_STACKED_BAR);
    mapChartVH(MorphConst.CHART_TYPE_DUAL_COLUMN, MorphConst.CHART_TYPE_DUAL_BAR);
    mapChartVH(MorphConst.CHART_TYPE_3D_COLUMN, MorphConst.CHART_TYPE_3D_BAR);
    mapChartVH(MorphConst.CHART_TYPE_LINE, MorphConst.CHART_TYPE_HORIZONTAL_LINE);
    mapChartVH(MorphConst.CHART_TYPE_DUAL_LINE, MorphConst.CHART_TYPE_DUAL_HORIZONTAL_LINE);
    mapChartVH(MorphConst.CHART_TYPE_AREA, MorphConst.CHART_TYPE_HORIZONTAL_AREA);
    mapChartVH(MorphConst.CHART_TYPE_100_AREA, MorphConst.CHART_TYPE_100_HORIZONTAL_AREA);
    mapChartVH(MorphConst.CHART_TYPE_COMBINATION, MorphConst.CHART_TYPE_HORIZONTAL_COMBINATION);
    mapChartVH(MorphConst.CHART_TYPE_DUAL_COMBINATION, MorphConst.CHART_TYPE_DUAL_HORIZONTAL_COMBINATION);
    mapChartVH(MorphConst.CHART_TYPE_BOXPLOT, MorphConst.CHART_TYPE_HORIZONTAL_BOXPLOT);
    mapChartVH(MorphConst.CHART_TYPE_WATERFALL, MorphConst.CHART_TYPE_HORIZONTAL_WATERFALL);
    /**
     *
     * @param {String} type1
     * @param {String} type2
     *
     * @return {Boolean}
     */
    MorphConst.IS_V_H_MAP = function(type1, type2) {
        if(_CHART_VERTICAL_HORIZONTAL_MAPPING[type1] && _CHART_VERTICAL_HORIZONTAL_MAPPING[type1] === type2) {
            return true;
        }
        if(_CHART_VERTICAL_HORIZONTAL_MAPPING[type2] && _CHART_VERTICAL_HORIZONTAL_MAPPING[type2] === type1) {
            return true;
        }
        return false;
    };
    return MorphConst;
});

define('sap/viz/controls/chart/morph/utils/Utils',[],function() {
    var utils = {};

    // static private in globale to make sure id is not duplicated
    var _morph_util_GEN_UID = 0;
    /**
     * return the global uid for HTML elements in the same window scope.
     *
     */
    utils.genUID = function() {
        if(!_morph_util_GEN_UID) {
            _morph_util_GEN_UID = 0;
        }
        return "mgen_" + (_morph_util_GEN_UID++);
    };
    var class2type = {
        '[object Boolean]' : 'boolean',
        '[object Number]' : 'number',
        '[object String]' : 'string',
        '[object Function]' : 'function',
        '[object Array]' : 'array',
        '[object Date]' : 'date',
        '[object RegExp]' : 'regexp',
        '[object Object]' : 'object'
    };

    utils.type = function(obj) {
        return !obj ? String(obj) : class2type[Object.prototype.toString.call(obj)] || "object";
    };

    utils.isFunction = function(obj) {
        return utils.type(obj) === "function";
    };

    utils.isBoolean = function(obj) {
        return utils.type(obj) === "boolean";
    };

    utils.isString = function(obj) {
        return utils.type(obj) === "string";
    };

    utils.isArray = function(obj) {
        return utils.type(obj) === "array";
    };

    utils.isNumber = function(obj) {
        return utils.type(obj) === "number";
    };

    utils.isRegExp = function(obj) {
        return utils.type(obj) === "regexp";
    };
    /**
     * Sort an object Array.
     *
     * @param {Array} arr The object Array to sort.
     * @param {String} prop The object field for the sort.
     * @param {Boolean} [desc] Sort by ASC or DESC, by default is ASC.
     *
     */
    utils.sortArrayOn = function(arr, prop, desc) {
        if(utils.isArray(arr) && utils.isString(prop)) {
            arr.sort(function(a, b) {
                return desc ? (a[prop] < b[prop]) - (a[prop] > b[prop]) : (a[prop] > b[prop]) - (a[prop] < b[prop]);
            });
        }
    };
    /**
     * An empty function doing nothing.
     */
    utils.noop = function() {
    };
    return utils;
});

define('sap/viz/controls/chart/morph/utils/SVGShapeMetadata',[],function() {
    var SVGShapeMetadata = {};

    var SHAPE_MP_METADATA = "__vizmp__";

    SVGShapeMetadata.set = function(shapeEl, name, value) {
        if(!shapeEl[SHAPE_MP_METADATA]) {
            shapeEl[SHAPE_MP_METADATA] = {};
        }
        shapeEl[SHAPE_MP_METADATA][name] = value;
    };

    SVGShapeMetadata.get = function(shapeEl, name) {
        if(shapeEl && shapeEl[SHAPE_MP_METADATA] !== null && shapeEl[SHAPE_MP_METADATA] !== undefined) {
            return shapeEl[SHAPE_MP_METADATA][name];
        }
        return undefined;
    };

    SVGShapeMetadata.clone = function(newShapeEl, oldShapeEl) {
        newShapeEl[SHAPE_MP_METADATA] = oldShapeEl[SHAPE_MP_METADATA];
        // TODO use deep clone?
        return newShapeEl;
    };
    return SVGShapeMetadata;
});

define('sap/viz/controls/chart/morph/vo/VizShape',[],function() {
    /**
     * VizShape VO
     */
    var VizShape = function(from, to, display) {
        this.from = from;
        this.to = to;
        this.display = display;
    };
    return VizShape;
});

define('sap/viz/controls/chart/morph/vo/VizShapesHolder',[],function() {
    /**
     * VizShapes VO
     */
    var VizShapesHolder = function() {
        this.plotShapes = [];
        //[sap.viz.morph.vo.VizShape]
        this.plotLines = [];
        //[sap.viz.morph.vo.VizShape]
        this.xAxisLabels = [];
        //[sap.viz.morph.vo.VizShape]
        this.xAxis2Labels = [];
        //[sap.viz.morph.vo.VizShape]
        this.yAxisLabels = [];
        //[sap.viz.morph.vo.VizShape]
        this.yAxis2Labels = [];
        //[sap.viz.morph.vo.VizShape]
        this.backgrounds = [];
        //[sap.viz.morph.vo.VizShape]
    };
    
    VizShapesHolder.prototype.empty = function() {
        this.plotShapes = [];
        this.plotLines = [];
        this.xAxisLabels = [];
        this.xAxis2Labels = [];
        this.yAxisLabels = [];
        this.yAxis2Labels = [];
        this.backgrounds = [];
    };
    
    /**
     * convert to a single array with all the shapes
     *
     * @return {[sap.viz.morph.vo.VizShape]}
     */
    VizShapesHolder.prototype.allByOrder = function() {
        // defined the drawing order, upper is deeper
        return [].concat(this.backgrounds,
                         this.xAxis2Labels,
                         this.xAxisLabels, 
                         this.yAxis2Labels,
                         this.yAxisLabels, 
                         this.plotLines,
                         this.plotShapes 
                         );
    };

    VizShapesHolder.prototype.toShapesBySvgType = function() {
        var allByType = {};
        var allShapes = [];
        allByType["all"] = allShapes;
        var allVizShapes = this.allByOrder();
        for(var i = 0; i < allVizShapes.length; i++) {
            var vizShape = allVizShapes[i];
            if(vizShape.to) {
                var type = vizShape.to.localName;
                var typeShapes = allByType[type];
                if(!typeShapes) {
                    allByType[type] = typeShapes = [];
                }
                typeShapes.push(vizShape);
                allShapes.push(vizShape);
            }
        }
        return allByType;
    };
    return VizShapesHolder;
});

define('sap/viz/controls/chart/morph/viz/MpShapesCapturer',[
// @formatter:off
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata',
    'sap/viz/controls/chart/morph/vo/VizShape',
    'sap/viz/controls/chart/morph/vo/VizShapesHolder'],
// @formatter:on
function(MorphConst, SVGShapeMetadata, VizShape, VizShapesHolder) {
    var MpShapesCapturer = {};
    /**
     * @param {HTMLDivElement} vizDiv
     * @return {sap.viz.morph.vo.VizShapesHolder} cloned mp shapes added as "to shape" in a flaten graphic structure
     */
    MpShapesCapturer.getShapes = function(vizDiv) {
        var vizShapesHolder = new VizShapesHolder();
        // the root svg
        var vizRootSvg = d3.select(vizDiv).select(".v-m-root");
        // except title and legend
        var vizMainArea = d3.select(vizDiv).select(".v-m-main");

        var rootSvgNode = vizRootSvg.node();
        var mainAreaNode = vizMainArea.node();

        if(rootSvgNode && mainAreaNode &&
                // Make sure the svg node is visible (not display:none or under a display:none parent),
                // otherwise, the getScreenCTM function will throw error in IE9.
                rootSvgNode.offsetHeight > 0 && rootSvgNode.offsetWidth > 0 &&
                // check for only SVG node
                rootSvgNode.getScreenCTM !== undefined && mainAreaNode.getScreenCTM !== undefined) {
            // calculate gradient color
            var vizGradientColors = parseGradientColors(vizRootSvg);
            // calculate x y position
            var vizRootCTM = rootSvgNode.getScreenCTM();

            vizShapesHolder.plotShapes   = captureShapes(vizMainArea,   ".v-m-plot .v-morphable-datapoint", vizRootCTM, vizGradientColors);
            vizShapesHolder.plotLines    = captureShapes(vizMainArea,   ".v-m-plot .v-morphable-line, " + 
                                                                        ".v-m-plot .v-morphable-areabg", vizRootCTM, vizGradientColors);
            vizShapesHolder.xAxisLabels  = captureShapes(vizMainArea,   ".v-m-xAxis .v-morphable-label", vizRootCTM);
            vizShapesHolder.xAxis2Labels = captureShapes(vizMainArea,   ".v-m-xAxis2 .v-morphable-label", vizRootCTM);
            vizShapesHolder.yAxisLabels  = captureShapes(vizMainArea,   ".v-m-yAxis .v-morphable-label", vizRootCTM);
            vizShapesHolder.yAxis2Labels = captureShapes(vizMainArea,   ".v-m-yAxis2 .v-morphable-label", vizRootCTM);
            vizShapesHolder.backgrounds  = captureShapes(vizRootSvg,    ".v-m-background .v-morphable-background", vizRootCTM);

            // disable size morphing for background
            for(var i = 0; i < vizShapesHolder.backgrounds.length; i++) {
                var vizShape = vizShapesHolder.backgrounds[i];
                SVGShapeMetadata.set(vizShape.to, MorphConst.MORPHER_DISABLE_RECT, true);
            }
            // TODO: disable too complex and too many path morphing
        }

        return vizShapesHolder;
    };

    /**
     * @param {D3Selection} d3Selection
     * @param {String} shapeSelector
     * @param {Matrix} offsetCTM
     *
     * @return [{sap.viz.morph.vo.VizShape}] each VizShape has .to property keep the shape SVGElement
     */
    var captureShapes = function(d3Selection, shapeSelector, offsetCTM, vizGradientColors) {
        var shapes = d3Selection.selectAll(shapeSelector);
        var clonedShapes = [];
        shapes.each(function(d, i) {
            // the force ignore list
            if(this.localName === "path" && String(this.getAttribute("class")).indexOf("v-geo-choropleth-feature") >= 0) {
                return;
            }
            // clone the shape
            var shape = this.cloneNode(true);

            // keep d3 element's metadata
            SVGShapeMetadata.set(shape, MorphConst.SHAPE_DATA, this.__data__);
            // process shape state for different viz types
            processShape(shape, this, vizGradientColors);
            // flaten shape to one single SVG
            alignPosition(this, offsetCTM, shape);
            // new captured shape is always "to shape"
            clonedShapes.push(new VizShape(null, shape, null));
        });
        return clonedShapes;
    };
    /**
     * // TODO handle more gradient cases introduced by Viz side to get "avg" color for morphing
     *
     * @param {SVGElement} vizRootSvg
     *
     * @return {id, fillColor}
     */
    var parseGradientColors = function(vizRootSvg) {
        var gradientColorMap = {};
        var hasGradientColor = false;
        var vizDefs = vizRootSvg.selectAll("defs");
        vizDefs.each(function() {
            var defNode = this;
            if(defNode.firstChild) {
                var children = defNode.childNodes;
                for(var i = 0; i < children.length; i++) {
                    var gradientNode = children[i];
                    // refered from sap.viz.util.EffectManager
                    if(gradientNode) {
                        var gradientId = "";
                        var stops = [];
                        var fillColor = "#000000";
                        if(gradientNode.localName === "linearGradient") {
                            gradientId = gradientNode.getAttribute("id");
                            stops = gradientNode.childNodes;
                            if(stops.length === 2) {
                                fillColor = stops[1].getAttribute("stop-color");
                            } else if(stops.length === 4) {
                                fillColor = stops[3].getAttribute("stop-color");
                            } else {
                                fillColor = stops[stops.length - 1].getAttribute("stop-color");
                            }
                            gradientColorMap[gradientId] = fillColor;
                            hasGradientColor = true;
                        } else if(gradientNode.localName === "radialGradient") {
                            gradientId = gradientNode.getAttribute("id");
                            stops = gradientNode.childNodes;
                            if(stops.length === 3) {
                                fillColor = stops[1].getAttribute("stop-color");
                            } else if(stops.length === 4) {
                                fillColor = stops[3].getAttribute("stop-color");
                            } else {
                                fillColor = stops[stops.length - 1].getAttribute("stop-color");
                            }
                            gradientColorMap[gradientId] = fillColor;
                            hasGradientColor = true;
                        }
                    }
                }
            }
        });
        if(hasGradientColor) {
            // TODO const the special key
            gradientColorMap["__hasGradientColor"] = true;
        }
        return gradientColorMap;
    };
    /**
     *
     * @param {SVGElement} originalShapeEl
     * @param {Matrix} originalRootCTM
     * @param {SVGElement} newShapeEl
     */
    var alignPosition = function(originalShapeEl, originalRootCTM, newShapeEl) {
        // TODO handle Matrix abcd
        var originalCTM = originalShapeEl.getScreenCTM();
        var left = originalCTM.e - originalRootCTM.e;
        var top = originalCTM.f - originalRootCTM.f;
        newShapeEl.setAttribute("transform", "translate(" + left + "," + top + ")");

        SVGShapeMetadata.set(newShapeEl, MorphConst.SHAPE_GLOBAL_TRANSLATE_X, left);
        SVGShapeMetadata.set(newShapeEl, MorphConst.SHAPE_GLOBAL_TRANSLATE_Y, top);
        return newShapeEl;
    };

    /**
     *
     * @param {SVGElement} shapeEl
     * @param {SVGElement} originalShapeEl shape captured on the SVG with parents
     */
    var processShape = function(shapeEl, originalShapeEl, vizGradientColors) {
        // TODO process and merge g.text struction
        // TODO these shapes special processing should be marked by viz side
        if(shapeEl.localName === "path" 
            && shapeEl.getAttribute("class") && shapeEl.getAttribute("class").indexOf("v-morphable-line") >= 0) {
            shapeEl.setAttribute("fill-opacity", 0);
        }
        if(shapeEl.localName === "path" 
            && shapeEl.getAttribute("class") && shapeEl.getAttribute("class").indexOf("v-morphable-datapoint") >= 0 
            && shapeEl.getAttribute("visibility") === "hidden") {
            shapeEl.setAttribute("visibility", "");
            shapeEl.setAttribute("d", "M0,0L0,0Z");
        }
        if(originalShapeEl.localName === "rect" 
            && originalShapeEl.getAttribute("opacity") === "0"
            && originalShapeEl.parentNode 
            && originalShapeEl.parentNode.parentNode 
            && originalShapeEl.parentNode.parentNode.getAttribute("class")
            && originalShapeEl.parentNode.parentNode.getAttribute("class").indexOf("v-heatmap") >= 0){
            shapeEl.setAttribute("opacity", 1);
        }
        if(vizGradientColors && vizGradientColors["__hasGradientColor"] === true 
            && originalShapeEl.getAttribute("fill") && originalShapeEl.getAttribute("fill").indexOf("url(#") === 0){
            var gradientId = originalShapeEl.getAttribute("fill");
            // sample: url(#glossyrectangleeacf5e1horizontal)
            gradientId = gradientId.substring(5, gradientId.length - 1);
            var fillColor = vizGradientColors[gradientId];
            fillColor = fillColor ? fillColor : "#000000";
            shapeEl.setAttribute("fill", fillColor);
        }
    };
    return MpShapesCapturer;
});

define('sap/viz/controls/chart/morph/utils/SVGShapeReplacer',[
// @formatter:off
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata'],
// @formatter:on
function(SVGShapeMetadata) {

    var SVGShapeReplacer = {};

    var xmlns = "http://www.w3.org/2000/svg";

    var ignoredAttributes = ["x", "y", "width", "height", "rx", "ry", "x1", "x2", "y1", "y2"];

    var getAttrAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 0 : ret;
    };

    SVGShapeReplacer.replace = function(shapeEl, newShapeType, attributes, keepOriginalAttrs) {
        if(shapeEl && newShapeType) {
            var newShapeEl = document.createElementNS(xmlns, newShapeType);
            if(keepOriginalAttrs) {
                var originalAttrs = shapeEl.attributes;
                for(var i = 0; i < originalAttrs.length; i++) {
                    var originalAttr = originalAttrs[i];
                    if(ignoredAttributes.indexOf(originalAttr.localName) === -1) {
                        newShapeEl.setAttribute(originalAttr.localName, originalAttr.value);
                    }
                }
            }
            for(var name in attributes) {
                if (attributes.hasOwnProperty(name)) {
                    newShapeEl.setAttribute(name, attributes[name]);
                }
            }
            SVGShapeMetadata.clone(newShapeEl, shapeEl);
            if(shapeEl.parentNode) {
                // replace in the DOM
                shapeEl.parentNode.replaceChild(newShapeEl, shapeEl);
            }
            return newShapeEl;
        }
        return null;
    };

    SVGShapeReplacer.replaceToPath = function(shapeEl) {
        if(shapeEl) {
            var pathStr = null;
            switch(shapeEl.localName) {
                case "rect":
                    var x = getAttrAsFloat(shapeEl, "x");
                    var y = getAttrAsFloat(shapeEl, "y");
                    var w = getAttrAsFloat(shapeEl, "width");
                    var h = getAttrAsFloat(shapeEl, "height");
                    var rx = getAttrAsFloat(shapeEl, "rx");
                    var ry = getAttrAsFloat(shapeEl, "ry");
                    // TODO handle rx ry
                    pathStr = "M" + x + "," + y + "L" + (w + x) + "," + y + "L" + (w + x) + "," + (h + y) + "L" + x + "," + (h + y) + "L" + x + "," + y + "Z";
                    break;
                case "line":
                    var x1 = getAttrAsFloat(shapeEl, "x1");
                    var y1 = getAttrAsFloat(shapeEl, "y1");
                    var x2 = getAttrAsFloat(shapeEl, "x2");
                    var y2 = getAttrAsFloat(shapeEl, "y2");
                    pathStr = "M" + x1 + "," + y1 + "L" + x2 + "," + y2;
                    break;
                default:
            }
            if(pathStr) {
                var attrs = {
                    d : pathStr
                };
                return SVGShapeReplacer.replace(shapeEl, "path", attrs, true);
            }
        }
        return null;
    };
    return SVGShapeReplacer;
});

define('sap/viz/controls/chart/morph/viz/MpShapesMapper',[
// @formatter:off
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata',
    'sap/viz/controls/chart/morph/utils/SVGShapeReplacer',
    'sap/viz/controls/chart/morph/vo/VizShape'],
// @formatter:on
function(MorphConst, utils, SVGShapeMetadata, SVGShapeReplacer, VizShape) {

    var MpShapesMapper = {};

    /**
     * find related existing shape.display for new.from
     * via comparing newShape.to == currentShape.display
     * then put new.from = existingVizShape.display
     *
     * @param {[sap.viz.morph.vo.VizShape]} existingVizShapes
     * @param {Function} mapFunc
     *          function(fromShapeEl, toShapeEl):Boolean
     * @param {String} newVizType
     * @param {String} existingVizType
     *
     * @return mapped new shapes
     */
    MpShapesMapper.map = function(newVizShapes, existingVizShapes, newVizType, existingVizType) {
        mapFromShapes(newVizShapes.plotShapes, existingVizShapes.plotShapes, isSameShapeByDataCtx);
        mapFromShapes(newVizShapes.plotLines, existingVizShapes.plotLines, isSameShapeByDataCtx);
        if(MorphConst.IS_V_H_MAP(newVizType, existingVizType)) {
            mapFromShapes(newVizShapes.xAxisLabels, existingVizShapes.yAxisLabels, isSameShapeByDataCtx);
            mapFromShapes(newVizShapes.xAxis2Labels, existingVizShapes.yAxis2Labels, isSameShapeByDataCtx);
            mapFromShapes(newVizShapes.yAxisLabels, existingVizShapes.xAxisLabels, isSameShapeByDataCtx);
            mapFromShapes(newVizShapes.yAxis2Labels, existingVizShapes.xAxis2Labels, isSameShapeByDataCtx);
        } else {
            mapFromShapes(newVizShapes.xAxisLabels, existingVizShapes.xAxisLabels, isSameShapeByDataCtx);
            mapFromShapes(newVizShapes.xAxis2Labels, existingVizShapes.xAxis2Labels, isSameShapeByDataCtx);
            mapFromShapes(newVizShapes.yAxisLabels, existingVizShapes.yAxisLabels, isSameShapeByDataCtx);
            mapFromShapes(newVizShapes.yAxis2Labels, existingVizShapes.yAxis2Labels, isSameShapeByDataCtx);
        }
        mapFromShapes(newVizShapes.backgrounds, existingVizShapes.backgrounds, isSameShapeByClass);
        return newVizShapes;
    };
    /**
     * @private
     *
     * @param {SVGElement} fromShapeEl
     * @param {SVGElement} toShapeEl
     *
     * @return {Boolean}
     */
    var isSameShapeByDataCtx = function(fromShapeEl, toShapeEl) {
        /*
        data: Object
            ctx: Object
                path: Object
                    dii_a1: 0
                    dii_a2: 0
                    mg: 0
                    mi: 0
                type: "Measure"
            fillColor: "#748CB2"
            val: 25
            valueAxis: 0
        */

        if (toShapeEl && fromShapeEl
                && SVGShapeMetadata.get(toShapeEl, MorphConst.SHAPE_DATA)
                && SVGShapeMetadata.get(fromShapeEl, MorphConst.SHAPE_DATA)
                && SVGShapeMetadata.get(fromShapeEl, MorphConst.SHAPE_DATA).ctx) {

            var dataCtx1 = SVGShapeMetadata.get(toShapeEl, MorphConst.SHAPE_DATA).ctx;
            var dataCtx2 = SVGShapeMetadata.get(fromShapeEl, MorphConst.SHAPE_DATA).ctx;

            // for geo bubble
            if(utils.isArray(dataCtx1)) {
                dataCtx1 = dataCtx1[0];
            }
            if(utils.isArray(dataCtx2)) {
                dataCtx2 = dataCtx2[0];
            }
            if(dataCtx1 && dataCtx2) {
                return isSameDataCxt(dataCtx1, dataCtx2);
            }
        }

        if (toShapeEl && fromShapeEl
                && utils.isArray(SVGShapeMetadata.get(toShapeEl, MorphConst.SHAPE_DATA))
                && utils.isArray(SVGShapeMetadata.get(fromShapeEl, MorphConst.SHAPE_DATA))){

            var data1 = SVGShapeMetadata.get(toShapeEl, MorphConst.SHAPE_DATA);
            var data2 = SVGShapeMetadata.get(fromShapeEl, MorphConst.SHAPE_DATA);
            if(data1.length == data2.length && data1.length > 0) {
                for(var i = 0; i < data1.length; i++) {
                    if(!data1[i] || !data2[i] || isSameDataCxt(data1[i].ctx, data2[i].ctx) === false) {
                        return false;
                    }
                }
                return true;
            }
        }

        if (toShapeEl && fromShapeEl
                && toShapeEl.localName === "g"
                && fromShapeEl.localName === "g"
                && toShapeEl.firstChild.localName === "text"
                && fromShapeEl.firstChild.localName === "text"
                && toShapeEl.firstChild.textContent == fromShapeEl.firstChild.textContent) {

            return true;
        }

        // TODO process other "non-data" elements like lable and line

        return false;
    };

    var isSameDataCxt = function(dataCtx1, dataCtx2) {
        // TODO this check is ONLY for AreaChart v-morphable-areabg
        // remove this check when AreaChart v-morphable-areabg __data__ has data.ctx
        if(!dataCtx1 && !dataCtx2){
            return true;
        }
        if(!dataCtx1 || !dataCtx2 || dataCtx1.type !== dataCtx2.type ||
                (!dataCtx1.path || !dataCtx2.path) ||
                (dataCtx1.path.dii_a1 != dataCtx2.path.dii_a1) ||
                (dataCtx1.path.dii_a2 != dataCtx2.path.dii_a2) ||
                (dataCtx1.path.mg != dataCtx2.path.mg) ||
                (dataCtx1.path.mi != dataCtx2.path.mi)){
            return false;
        }
        return true;
    };
    /**
     * @private
     *
     * @param {SVGElement} fromShapeEl
     * @param {SVGElement} toShapeEl
     *
     * @return {Boolean}
     */
    var isSameShapeByClass = function(fromShapeEl, toShapeEl) {
        if (toShapeEl && fromShapeEl
                && toShapeEl.localName == fromShapeEl.localName
                && toShapeEl.getAttribute("class") == fromShapeEl.getAttribute("class")) {
            return true;
        }
    };
    /**
     * if "new.to" maps to "current.display"
     *    "new.from" = "current.display"
     */
    var mapFromShapes = function(newShapes, currentShapes, mapFunc, allowNodeMap) {
        var mappedCurrentShapes = [];
        for(var i = 0; i < newShapes.length; i++) {
            var newShape = newShapes[i];
            for(var j = 0; j < currentShapes.length; j++) {
                var currentShape = currentShapes[j];
                if(allowNodeMap || mappedCurrentShapes.indexOf(currentShape) === -1) {
                    if(mapFunc(newShape.to, currentShape.display)) {
                        // covert current shape to same type as new shape
                        var replacedShapes = replaceShape(newShape.to, currentShape.display);
                        // update new shape
                        newShape.to = replacedShapes.newShape;
                        // put current shape as new shape's from
                        newShape.from = replacedShapes.currentShape;
                        // temp hold mapped shape to avoid duplicate map
                        mappedCurrentShapes.push(currentShape);
                        break;
                    }
                }
            }
        }
    };
    var replaceShape = function(newShapeEl, currentShapeEl) {
        var replacedShapes = {
            newShape : newShapeEl,
            currentShape : currentShapeEl
        };
        var replacedShape;
        if(newShapeEl.localName === "path" && currentShapeEl.localName !== "path") {
            replacedShape = SVGShapeReplacer.replaceToPath(currentShapeEl);
            if(replacedShape) {
                replacedShapes.currentShape = replacedShape;
            }
        }
        if(newShapeEl.localName !== "path" && currentShapeEl.localName === "path") {
            replacedShape = SVGShapeReplacer.replaceToPath(newShapeEl);
            if(replacedShape) {
                replacedShapes.newShape = replacedShape;
            }
        }
        return replacedShapes;
    };
    return MpShapesMapper;
});

define('sap/viz/controls/chart/morph/utils/Cache',[],function() {
    var Cache = {};

    var repush = function(array, item) {
        // remove the item, and re-push to the end of array
        for(var i = 0, ii = array.length; i < ii; i++) {
            if(array[i] === item) {
                return array.push(array.splice(i, 1)[0]);
            }
        }
    };

    Cache.func = function(f, scope, postprocessor) {
        function newf() {
            var arg = Array.prototype.slice.call(arguments, 0), args = arg.join("\u2400"), // key
            cache = newf.cache = newf.cache || {}, // result
            count = newf.count = newf.count || [];
            // args
            if(cache.hasOwnProperty(args)) {
                repush(count, args);
                return postprocessor ? postprocessor(cache[args]) : cache[args];
            }count.length >= 1e3 &&
            delete cache[count.shift()];
            count.push(args);
            cache[args] = f.apply(scope, arg);
            return postprocessor ? postprocessor(cache[args]) : cache[args];
        }

        return newf;
    };
    return Cache;
});

define('sap/viz/controls/chart/morph/utils/ColorUtil',[
// @formatter:off
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/Cache'],
// @formatter:on
function(utils, Cache) {
    var ColorUtil = {};

    /**
     * parse color string
     * @param {String} color_string rgb(123, 234, 45) or #FF22CC or ff22cc or #f0c or F2C
     * @return {[r, g, b]}
     */
    var _parseCacheFunc = null;
    ColorUtil.parse = function(colorString) {
        if (!_parseCacheFunc) {
            _parseCacheFunc = Cache.func(RGBColorStatic.parse);
        }
        return _parseCacheFunc(colorString);
    };
    /**
     * convert number to hex String.
     * @param {Number} color the color to be converted
     * @return {String} the color in hex string
     */
    ColorUtil.numberToHexString = function(color) {
        var r = ((color & 0xff0000) >> 16).toString(16), g = ((color & 0x00ff00) >> 8).toString(16), b = (color & 0x0000ff).toString(16);
        var hex = "#" + ((r.length === 1) ? "0" + r : r) + ((g.length === 1) ? "0" + g : g) + ((b.length === 1) ? "0" + b : b);
        return hex;
    };
    /**
     * @param {String} hexColor
     * @return {Number} 0x000000-0xFFFFFF
     * @private
     */
    ColorUtil.hexStringToNumber = function(hexColor) {
        if (!hexColor) {
            return 0;
        }

        if (hexColor.charAt(0) === '#') {
            hexColor = hexColor.substr(1);
        }
        var r = parseInt(hexColor.substr(0, 2), 16), g = parseInt(hexColor.substr(2, 2), 16), b = parseInt(hexColor.substr(4, 2), 16);

        var hex = (Math.max(0, Math.min(255, r)) * 65536) + (Math.max(0, Math.min(255, g)) * 256) + Math.max(0, Math.min(255, b));
        return hex;
    };
    /**
     * Convert number to rgba color: rgba(r,g,b,a);
     * @param {Number} color
     * @param {Number} a
     *          alpha
     * @return {string}
     * @private
     */
    ColorUtil.numberToRGB = function(color) {
        var r = (color & 0xff0000) >> 16, g = (color & 0x00ff00) >> 8, b = color & 0x0000ff;
        return 'rgb(' + r + ',' + g + ',' + b + ')';
    };
    /**
     * Convert number to rgba color: rgba(r,g,b,a);
     * @param {Number} color
     * @param {Number} a
     *          alpha
     * @return {string}
     * @private
     */
    ColorUtil.numberToRGBA = function(color, alpha) {
        var r = (color & 0xff0000) >> 16, g = (color & 0x00ff00) >> 8, b = color & 0x0000ff;
        if (alpha === undefined || alpha <= 0 || alpha > 1) {
            alpha = 1;
        }
        return 'rgba(' + r + ',' + g + ',' + b + ',' + alpha + ')';
    };
    /**
     * To color Number
     * @param {Number} r 0-255
     * @param {Number} g 0-255
     * @param {Number} b 0-255
     * @return {Number} the color number 0x000000-0xFFFFFF
     */
    ColorUtil.RGBToNumber = function(r, g, b) {
        var hex = (Math.max(0, Math.min(255, r)) * 65536) + (Math.max(0, Math.min(255, g)) * 256) + Math.max(0, Math.min(255, b));
        return hex;
    };
    /**
     * returns a color from a point between two colors
     * @param {Number} color1
     * @param {Number} color2
     * @param {Number} percentage 0.0-1.0
     * @return {Number}
     */
    ColorUtil.getColorMix = function(color1, color2, percentage) {
        return ColorUtil.getPercentageOfColor(color1, 1 - percentage) + ColorUtil.getPercentageOfColor(color2, percentage);
    };
    /**
     * @param {Number} baseColor
     * @param {Number} percentage 0.0-1.0
     * @return {Number}
     */
    ColorUtil.getPercentageOfColor = function(baseColor, percentage) {
        percentage = Math.min(1, Math.max(0, percentage));
        var red/*Number*/ = (baseColor & 0xff0000) >> 16;
        var green/*Number*/ = (baseColor & 0x00ff00) >> 8;
        var blue/*Number*/ = baseColor & 0x0000ff;
        return (red * percentage) << 16 | (green * percentage) << 8 | (blue * percentage);
    };

    /**
     * Adjust brightness of rgb color
     *
     * @param {Number} rgb
     * @param {Number} briteness
     *
     * @return {Number} new rgb
     *
     */

    ColorUtil.adjustBrightness = function(rgbColor, briteness) {
        var r = Math.min(((rgbColor >> 16) & 0xFF) + briteness, 255);
        r = Math.max(r, 0);
        var g = Math.min(((rgbColor >> 8) & 0xFF) + briteness, 255);
        g = Math.max(g, 0);
        var b = Math.min((rgbColor & 0xFF) + briteness, 255);
        b = Math.max(b, 0);
        return (r << 16) | (g << 8) | b;
    };

    /**
     * Adjust brightness of rgb color, scaled
     *
     * @param {Number} rgb
     * @param {Number} briteness
     *
     * @return {Number} new rgb
     *
     */

    ColorUtil.adjustBrightness2 = function(rgbColor, briteness) {
        var r = NaN, g = NaN, b = NaN;
        if (briteness == 0) {
            return rgbColor;
        } else if (briteness > 0) {
            briteness /= 100;
            r = ((rgbColor >> 16) & 0xFF);
            g = ((rgbColor >> 8) & 0xFF);
            b = (rgbColor & 0xFF);
            r += ((0xFF - r) * briteness);
            g += ((0xFF - g) * briteness);
            b += ((0xFF - b) * briteness);
            r = Math.min(r, 255);
            g = Math.min(g, 255);
            b = Math.min(b, 255);
        } else {
            briteness = (100 + briteness) / 100;
            r = ((rgbColor >> 16) & 0xFF) * briteness;
            g = ((rgbColor >> 8) & 0xFF) * briteness;
            b = (rgbColor & 0xFF) * briteness;
        }

        return (r << 16) | (g << 8) | b;
    };

    /**
     * Multiply 2 colors
     *
     * @param {Number} color1
     * @param {Number} color2
     *
     * @return {Number} new color
     */
    ColorUtil.rgbMultiply = function(color1, color2) {
        var r1 = (color1 >> 16) & 0xFF, g1 = (color1 >> 8) & 0xFF, b1 = color1 & 0xFF;
        var r2 = (color2 >> 16) & 0xFF, g2 = (color2 >> 8) & 0xFF, b2 = color2 & 0xFF;

        return ((r1 * r2 / 255) << 16) | ((g1 * g2 / 255) << 8) | (b1 * b2 / 255);
    };
    return ColorUtil;
});

define('sap/viz/controls/chart/morph/morphers/ColorMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/ColorUtil'],
// @formatter:on
function(utils, ColorUtil) {

    var ColorMorpher = {};

    var getOpacityAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 1 : ret;
    };
    /**
     *
     * @param {String|Number} from
     * @param {String|Number} to
     * @param {Number} percentage
     * @return {String} CSS color string rgb(0,0,0)
     */
    ColorMorpher.getPercentage = function(from, to, percentage) {
        percentage = percentage > 100 ? 100 : percentage < 0 ? 0 : percentage;
        var fromRGB = ColorUtil.parse(from);
        var toRGB = ColorUtil.parse(to);
        // no morph
        if(fromRGB.length === 0 && toRGB.length === 0) {
            return "";
        }
        // from transparent to new color
        if (fromRGB.length === 0 && toRGB.length === 3) {
            return "rgb("
                        + toRGB[0] + ","
                        + toRGB[1] + ","
                        + toRGB[2] + ")";
        }
        // from old color to transparent
        if(fromRGB.length === 3 && toRGB.length === 0) {
            return "";
        }

        return "rgb("
                + Math.round(fromRGB[0] + (toRGB[0] - fromRGB[0]) * percentage / 100) + ","
                + Math.round(fromRGB[1] + (toRGB[1] - fromRGB[1]) * percentage / 100) + ","
                + Math.round(fromRGB[2] + (toRGB[2] - fromRGB[2]) * percentage / 100) + ")";
    };
    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    ColorMorpher.svg = function(fromShape, toShape, displayShape, percentage) {
        if (displayShape && toShape) {
            var fromStroke = fromShape ? fromShape.getAttribute("stroke") : "";
            var toStroke = toShape.getAttribute("stroke");

            var fromFill = fromShape ? fromShape.getAttribute("fill") : "";
            var toFill = toShape.getAttribute("fill");
            
            if (fromStroke === toStroke) {
                displayShape.setAttribute("stroke", toStroke);
            } else {
                displayShape.setAttribute("stroke", ColorMorpher.getPercentage(fromStroke, toStroke, percentage));
            }
            // BITSDC4-461: set fill-opacity="0" if fill="transparent" or invalid
            var displayShapeFill = "";
            if (fromFill === toFill) {
                displayShapeFill = toFill;
                displayShape.setAttribute("fill", displayShapeFill);
            } else {
                displayShapeFill = ColorMorpher.getPercentage(fromFill, toFill, percentage);
                displayShape.setAttribute("fill", displayShapeFill);
            }

            var toFillOpacity;
            var toStrokeOpacity;
            if(fromShape) {
                // fill-opacity
                if (displayShapeFill === "") {
                    displayShape.setAttribute("fill-opacity", 0);
                } else {
                    var fromFillOpacity = getOpacityAsFloat(fromShape, "fill-opacity");
                    toFillOpacity = getOpacityAsFloat(toShape, "fill-opacity");
                    if (fromFillOpacity != toFillOpacity) {
                        displayShape.setAttribute("fill-opacity",
                                                  fromFillOpacity + (toFillOpacity - fromFillOpacity) * percentage / 100);
                    }
                }
                // stroke-opacity
                var fromStrokeOpacity = getOpacityAsFloat(fromShape, "stroke-opacity");
                toStrokeOpacity = getOpacityAsFloat(toShape, "stroke-opacity");
                if (fromStrokeOpacity != toStrokeOpacity) {
                    displayShape.setAttribute("stroke-opacity",
                                              fromStrokeOpacity + (toStrokeOpacity - fromStrokeOpacity) * percentage / 100);
                }
            } else {
                // fill-opacity
                if (toShape.getAttribute("fill-opacity") !== "") {
                    if (displayShapeFill === "") {
                        toFillOpacity = 0;
                    } else {
                        toFillOpacity = getOpacityAsFloat(toShape, "fill-opacity");
                    }
                    displayShape.setAttribute("fill-opacity",
                                          0 + (toFillOpacity - 0) * percentage / 100);
                } else {
                    displayShape.setAttribute("fill-opacity", "");
                }
                // stroke-opacity
                if (toShape.getAttribute("stroke-opacity") !== "") {
                    toStrokeOpacity = getOpacityAsFloat(toShape, "stroke-opacity");
                    displayShape.setAttribute("stroke-opacity",
                                              0 + (toStrokeOpacity - 0) * percentage / 100);
                } else {
                    displayShape.setAttribute("stroke-opacity", "");
                }
            }
        }
    };
    return ColorMorpher;
});

define('sap/viz/controls/chart/morph/morphers/RectMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata'],
// @formatter:on
function(MorphConst, SVGShapeMetadata) {
   
    var RectMorpher = {};
    
    RectMorpher.NO_DEFAULT_DIRECTION = 0;
    RectMorpher.DEFAULT_DIRECTION_TO_NORTH = 1;
    RectMorpher.DEFAULT_DIRECTION_TO_SOUTH = 2;
    RectMorpher.DEFAULT_DIRECTION_TO_EAST = 4;
    RectMorpher.DEFAULT_DIRECTION_TO_WEST = 8;
    
    /**
     * 
     * @param {Object} from {w, h, x, y, r}
     * @param {Object} to {w, h, x, y, r}
     * @param {Number} percentage
     * @return {Object} {w, h, x, y, r}
     */
    RectMorpher.getPercentageRect = function(from, to, percentage) {
        return {
            w: from.w + (to.w - from.w) * percentage / 100,
            h: from.h + (to.h - from.h) * percentage / 100,
            x: from.x + (to.x - from.x) * percentage / 100,
            y: from.y + (to.y - from.y) * percentage / 100,
            r: from.r + (to.r - from.r) * percentage / 100
        };
    };
    
    var getAttrAsInt = function(svgEl, attrName) {
        var ret = parseInt(svgEl.getAttribute(attrName), 10);
        return isNaN(ret) ? 0 : ret;
    };
    
    var getAttrAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 0 : ret;
    };
    
    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    RectMorpher.svg = function(fromShape, toShape, displayShape, percentage, defaultDirection) {
        if(displayShape && toShape && toShape.localName === "rect") {
            var toX;
            var toRX;
            var toY;
            var toRY;
            var toW;
            var toH;
            if(SVGShapeMetadata.get(toShape, MorphConst.MORPHER_DISABLE_RECT) === true){
                toX = getAttrAsFloat(toShape, "x");
                toRX = getAttrAsFloat(toShape, "rx");
                toY = getAttrAsFloat(toShape, "y");
                toRY = getAttrAsFloat(toShape, "ry");
                toW = getAttrAsFloat(toShape, "width");
                toH = getAttrAsFloat(toShape, "height");
                
                var toX2 = getAttrAsFloat(displayShape, "x");
                var toRX2 = getAttrAsFloat(displayShape, "rx");
                var toY2 = getAttrAsFloat(displayShape, "y");
                var toRY2 = getAttrAsFloat(displayShape, "ry");
                var toW2 = getAttrAsFloat(displayShape, "width");
                var toH2 = getAttrAsFloat(displayShape, "height");
                
                if(toX !== toX2){
                    displayShape.setAttribute("x", toX);
                }
                if(toRX !== toRX2){
                    displayShape.setAttribute("rx", toRX);
                }
                if(toY !== toY2){
                    displayShape.setAttribute("y", toY);
                }
                if(toRY !== toRY2){
                    displayShape.setAttribute("ry", toRY);
                }
                if(toW !== toW2){
                    displayShape.setAttribute("width", toW);
                }
                if(toH !== toH2){
                    displayShape.setAttribute("height",toH);
                }
                
            }else if(fromShape && fromShape.localName === "rect") {
                // rect - rect
                var fromX = getAttrAsFloat(fromShape, "x");
                toX = getAttrAsFloat(toShape, "x");
                
                var fromRX = getAttrAsFloat(fromShape, "rx");
                toRX = getAttrAsFloat(toShape, "rx");
                
                var fromY = getAttrAsFloat(fromShape, "y");
                toY = getAttrAsFloat(toShape, "y");
                
                var fromRY = getAttrAsFloat(fromShape, "ry");
                toRY = getAttrAsFloat(toShape, "ry");
                
                var fromW = getAttrAsFloat(fromShape, "width");
                toW = getAttrAsFloat(toShape, "width");
                
                var fromH = getAttrAsFloat(fromShape, "height");
                toH = getAttrAsFloat(toShape, "height");
                
                // if both from and to shapes are invisible, disable animation for them
                var fromVisible = (fromW >= 1 && fromH >= 1);
                var toVisible = (toW >= 1 && toH >= 1);
                if(!fromVisible && !toVisible){
                    percentage = 100;
                }
                
                displayShape.setAttribute("x",
                                          fromX + (toX - fromX) * percentage / 100);
                displayShape.setAttribute("y",
                                          fromY + (toY - fromY) * percentage / 100);
                displayShape.setAttribute("rx",
                                          fromRX + (toRX - fromRX) * percentage / 100);
                displayShape.setAttribute("ry",
                                          fromRY + (toRY - fromRY) * percentage / 100);
                displayShape.setAttribute("width",
                                          fromW + (toW - fromW) * percentage / 100);
                displayShape.setAttribute("height",
                                          fromH + (toH - fromH) * percentage / 100);
                                          
            }else if(!fromShape) {
                // none to rect
                toX = getAttrAsFloat(toShape, "x");
                toRX = getAttrAsFloat(toShape, "rx");
                toY = getAttrAsFloat(toShape, "y");
                toRY = getAttrAsFloat(toShape, "ry");
                toW = getAttrAsFloat(toShape, "width");
                toH = getAttrAsFloat(toShape, "height");
                
                if(defaultDirection == null || defaultDirection < 0) {
                    defaultDirection = RectMorpher.DEFAULT_DIRECTION_TO_NORTH | RectMorpher.DEFAULT_DIRECTION_TO_WEST;
                }
                
                if((defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_NORTH) && (defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_SOUTH)){
                    displayShape.setAttribute("y", 
                                          toY + (toH - 0) * (100 - percentage) / 100 / 2);
                    displayShape.setAttribute("height",
                                          0 + (toH - 0) * percentage / 100);
                }else if(defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_NORTH){
                    displayShape.setAttribute("y", 
                                          toY + (toH - 0) * (100 - percentage) / 100);
                    displayShape.setAttribute("height",
                                          0 + (toH - 0) * percentage / 100);
                }else if(defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_SOUTH){
                    displayShape.setAttribute("y", 
                                          toY);
                    displayShape.setAttribute("height",
                                          0 + (toH - 0) * percentage / 100);
                }else{
                    displayShape.setAttribute("y", toY);
                    displayShape.setAttribute("height", toH);
                }
                
                if((defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_EAST) && (defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_WEST)){
                    displayShape.setAttribute("x", 
                                          toX + (toW - 0) * (100 - percentage) / 100 / 2);
                    displayShape.setAttribute("width",
                                          0 + (toW - 0) * percentage / 100);
                }else if(defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_EAST){
                    displayShape.setAttribute("x", 
                                          toX + (toW - 0) * (100 - percentage) / 100);
                    displayShape.setAttribute("width",
                                          0 + (toW - 0) * percentage / 100);
                }else if(defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_WEST){
                    displayShape.setAttribute("x", 
                                          toX);
                    displayShape.setAttribute("width",
                                          0 + (toW - 0) * percentage / 100);
                }else{
                    displayShape.setAttribute("x", toX);
                    displayShape.setAttribute("width", toW);
                }
            }
        }
    };

    return RectMorpher;
});
define('sap/viz/controls/chart/morph/morphers/LineMorpher',[],function() {

    var LineMorpher = {};

    /**
     *
     * @param {Object} from {x, y, x2, y2}
     * @param {Object} to {x, y, x2, y2}
     * @param {Number} percentage
     * @return {Object} {x, y, x2, y2}
     */
    LineMorpher.getPercentageLine = function(from, to, percentage) {
        return {
            x : from.x + (to.x - from.x) * percentage / 100,
            y : from.y + (to.y - from.y) * percentage / 100,
            x2 : from.x2 + (to.x2 - from.x2) * percentage / 100,
            y2 : from.y2 + (to.y2 - from.y2) * percentage / 100
        };
    };
    var getAttrAsInt = function(svgEl, attrName) {
        var ret = parseInt(svgEl.getAttribute(attrName), 10);
        return isNaN(ret) ? 0 : ret;
    };
    var getAttrAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 0 : ret;
    };
    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    LineMorpher.svg = function(fromShape, toShape, displayShape, percentage) {
        if(displayShape && toShape && toShape.localName === "line") {
            var toX1;
            var toX2;
            var toY1;
            var toY2;
            if(fromShape && fromShape.localName === "rect") {
                // rect - rect
                var fromX1 = getAttrAsFloat(fromShape, "x1");
                toX1 = getAttrAsFloat(toShape, "x1");

                var fromX2 = getAttrAsFloat(fromShape, "x2");
                toX2 = getAttrAsFloat(toShape, "x2");

                var fromY1 = getAttrAsFloat(fromShape, "y1");
                toY1 = getAttrAsFloat(toShape, "y1");

                var fromY2 = getAttrAsFloat(fromShape, "y2");
                toY2 = getAttrAsFloat(toShape, "y2");

                displayShape.setAttribute("x1", fromX1 + (toX1 - fromX1) * percentage / 100);
                displayShape.setAttribute("y1", fromY1 + (toY1 - fromY1) * percentage / 100);
                displayShape.setAttribute("x2", fromX2 + (toX2 - fromX2) * percentage / 100);
                displayShape.setAttribute("y2", fromY2 + (toY2 - fromY2) * percentage / 100);

            } else if(!fromShape) {
                // none to rect
                toX1 = getAttrAsFloat(toShape, "x1");
                toX2 = getAttrAsFloat(toShape, "x2");
                toY1 = getAttrAsFloat(toShape, "y1");
                toY2 = getAttrAsFloat(toShape, "y2");

                displayShape.setAttribute("x1", toX1);
                displayShape.setAttribute("y1", toY1);
                displayShape.setAttribute("x2", 0 + (toX2 - 0) * percentage / 100);
                displayShape.setAttribute("y2", 0 + (toY2 - 0) * percentage / 100);
            }

        }

    };
    return LineMorpher;
});

define('sap/viz/controls/chart/morph/morphers/PathMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/Cache',
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata'],
// @formatter:on
function(utils, Cache, MorphConst, SVGShapeMetadata) {

    //-------------------------------------------
    // PathMorpher algorithm refered from RaphaelJS
    //-------------------------------------------

    var concat = "concat", apply = "apply", has = "hasOwnProperty", split = "split",
    lowerCase = String.prototype.toLowerCase, upperCase = String.prototype.toUpperCase,
    toFloat = parseFloat, toInt = parseInt, math = Math, mmax = math.max, mmin = math.min,
    abs = math.abs, pow = math.pow, PI = math.PI, nu = "number", string = "string", array = "array",
    toString = "toString";

    var p2s = /,?([achlmqrstvxz]),?/gi,
    pathCommand = /([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig,
    pathValues = /(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/ig;

    var _path2string = function(inputArray) {
        return inputArray ? inputArray.join(",").replace(p2s, "$1") : this.join(",").replace(p2s, "$1");
    };
    // http://schepers.cc/getting-to-the-point
    var _catmullRom2bezier = function(crp, z) {
        var d = [];
        for(var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
            var p = [{
                x : +crp[i - 2],
                y : +crp[i - 1]
            }, {
                x : +crp[i],
                y : +crp[i + 1]
            }, {
                x : +crp[i + 2],
                y : +crp[i + 3]
            }, {
                x : +crp[i + 4],
                y : +crp[i + 5]
            }];
            if(z) {
                if(!i) {
                    p[0] = {
                        x : +crp[iLen - 2],
                        y : +crp[iLen - 1]
                    };
                } else if(iLen - 4 === i) {
                    p[3] = {
                        x : +crp[0],
                        y : +crp[1]
                    };
                } else if(iLen - 2 === i) {
                    p[2] = {
                        x : +crp[0],
                        y : +crp[1]
                    };
                    p[3] = {
                        x : +crp[2],
                        y : +crp[3]
                    };
                }
            } else {
                if(iLen - 4 === i) {
                    p[3] = p[2];
                } else if(!i) {
                    p[0] = {
                        x : +crp[i],
                        y : +crp[i + 1]
                    };
                }
            }
            d.push(["C", (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);
        }

        return d;
    };
    var parsePathString = function(pathString) {
        if(!pathString) {
            return null;
        }
        var paramCounts = {
            a : 7,
            c : 6,
            h : 1,
            l : 2,
            m : 2,
            r : 4,
            q : 4,
            s : 4,
            t : 2,
            v : 1,
            z : 0
        }, data = [];
        if(!data.length) {
            String(pathString).replace(pathCommand, function(a, b, c) {
                var params = [], name = b.toLowerCase();
                c.replace(pathValues, function(a, b) {
                    b && params.push(+b);
                });
                if(name === "m" && params.length > 2) {
                    data.push([b][concat](params.splice(0, 2)));
                    name = "l";
                    b = b === "m" ? "l" : "L";
                }
                if(name === "r") {
                    data.push([b][concat](params));
                } else {
                    while(params.length >= paramCounts[name]) {
                        data.push([b][concat](params.splice(0, paramCounts[name])));
                        if(!paramCounts[name]) {
                            break;
                        }
                    }
                }
            });
        }
        // TODO move to util function
        data.toString = _path2string;
        return data;
    };
    var pathToAbsolute = function(pathArray/*String*/) {
        if(!utils.isArray(pathArray) || !utils.isArray(pathArray && pathArray[0])) {// rough assumption
            pathArray = parsePathString(pathArray);
        }
        if(!pathArray || !pathArray.length) {
            return [["M", 0, 0]];
        }
        var res = [], x = 0, y = 0, mx = 0, my = 0, start = 0;
        if(pathArray[0][0] === "M") {
            x = +pathArray[0][1];
            y = +pathArray[0][2];
            mx = x;
            my = y;
            start++;
            res[0] = ["M", x, y];
        }
        var crz = pathArray.length === 3 && pathArray[0][0] === "M" && pathArray[1][0].toUpperCase() === "R" && pathArray[2][0].toUpperCase() === "Z";
        for(var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
            res.push( r = []);
            pa = pathArray[i];
            if(pa[0] != upperCase.call(pa[0])) {
                r[0] = upperCase.call(pa[0]);
                switch (r[0]) {
                    case "A":
                        r[1] = pa[1];
                        r[2] = pa[2];
                        r[3] = pa[3];
                        r[4] = pa[4];
                        r[5] = pa[5];
                        r[6] = +(pa[6] + x);
                        r[7] = +(pa[7] + y);
                        break;
                    case "V":
                        r[1] = +pa[1] + y;
                        break;
                    case "H":
                        r[1] = +pa[1] + x;
                        break;
                    case "R":
                        var dots = [x, y][concat](pa.slice(1));
                        for(var j = 2, jj = dots.length; j < jj; j++) {
                            dots[j] = +dots[j] + x;
                            dots[++j] = +dots[j] + y;
                        }
                        res.pop();
                        res = res[concat](_catmullRom2bezier(dots, crz));
                        break;
                    case "M":
                        mx = +pa[1] + x;
                        my = +pa[2] + y;
                        break;
                    default:
                        for( j = 1, jj = pa.length; j < jj; j++) {
                            r[j] = +pa[j] + ((j % 2) ? x : y);
                        }
                }
            } else if(pa[0] === "R") {
                dots = [x, y][concat](pa.slice(1));
                res.pop();
                res = res[concat](_catmullRom2bezier(dots, crz));
                r = ["R"][concat](pa.slice(-2));
            } else {
                for(var k = 0, kk = pa.length; k < kk; k++) {
                    r[k] = pa[k];
                }
            }
            switch (r[0]) {
                case "Z":
                    x = mx;
                    y = my;
                    break;
                case "H":
                    x = r[1];
                    break;
                case "V":
                    y = r[1];
                    break;
                case "M":
                    mx = r[r.length - 2];
                    my = r[r.length - 1];
                    break;
                default:
                    x = r[r.length - 2];
                    y = r[r.length - 1];
            }
        }
        res.toString = _path2string;
        return res;
    };
    var l2c = function(x1, y1, x2, y2) {
        return [x1, y1, x2, y2, x2, y2];
    };
    var q2c = function(x1, y1, ax, ay, x2, y2) {
        var _13 = 1 / 3, _23 = 2 / 3;
        return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];
    };
    var a2c = function(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
        // for more information of where this math came from visit:
        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
        var _120 = PI * 120 / 180, rad = PI / 180 * (+angle || 0), res = [], xy, rotate = Cache.func(function(x, y, rad) {
            var X = x * math.cos(rad) - y * math.sin(rad), Y = x * math.sin(rad) + y * math.cos(rad);
            return {
                x : X,
                y : Y
            };
        });
        if(!recursive) {
            xy = rotate(x1, y1, -rad);
            x1 = xy.x;
            y1 = xy.y;
            xy = rotate(x2, y2, -rad);
            x2 = xy.x;
            y2 = xy.y;
            var cos = math.cos(PI / 180 * angle), sin = math.sin(PI / 180 * angle), x = (x1 - x2) / 2, y = (y1 - y2) / 2;
            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);
            if(h > 1) {
                h = math.sqrt(h);
                rx = h * rx;
                ry = h * ry;
            }
            var rx2 = rx * rx, ry2 = ry * ry, k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))), cx = k * rx * y / ry + (x1 + x2) / 2, cy = k * -ry * x / rx + (y1 + y2) / 2, f1 = math.asin(((y1 - cy) / ry).toFixed(9)), f2 = math.asin(((y2 - cy) / ry).toFixed(9));
            f1 = x1 < cx ? PI - f1 : f1;
            f2 = x2 < cx ? PI - f2 : f2; f1 < 0 && ( f1 = PI * 2 + f1); f2 < 0 && ( f2 = PI * 2 + f2);
            if(sweep_flag && f1 > f2) {
                f1 = f1 - PI * 2;
            }
            if(!sweep_flag && f2 > f1) {
                f2 = f2 - PI * 2;
            }
        } else {
            f1 = recursive[0];
            f2 = recursive[1];
            cx = recursive[2];
            cy = recursive[3];
        }
        var df = f2 - f1;
        if(abs(df) > _120) {
            var f2old = f2, x2old = x2, y2old = y2;
            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
            x2 = cx + rx * math.cos(f2);
            y2 = cy + ry * math.sin(f2);
            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
        }
        df = f2 - f1;
        var c1 = math.cos(f1), s1 = math.sin(f1), c2 = math.cos(f2), s2 = math.sin(f2), t = math.tan(df / 4), hx = 4 / 3 * rx * t, hy = 4 / 3 * ry * t, m1 = [x1, y1], m2 = [x1 + hx * s1, y1 - hy * c1], m3 = [x2 + hx * s2, y2 - hy * c2], m4 = [x2, y2];
        m2[0] = 2 * m1[0] - m2[0];
        m2[1] = 2 * m1[1] - m2[1];
        if(recursive) {
            return [m2, m3, m4][concat](res);
        } else {
            res = [m2, m3, m4][concat](res).join()[split](",");
            var newres = [];
            for(var i = 0, ii = res.length; i < ii; i++) {
                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
            }
            return newres;
        }
    };
    var path2curveImpl = function(path, path2) {
        var p = pathToAbsolute(path), p2 = path2 && pathToAbsolute(path2), attrs = {
            x : 0,
            y : 0,
            bx : 0,
            by : 0,
            X : 0,
            Y : 0,
            qx : null,
            qy : null
        }, attrs2 = {
            x : 0,
            y : 0,
            bx : 0,
            by : 0,
            X : 0,
            Y : 0,
            qx : null,
            qy : null
        }, processPath = function(path, d) {
            var nx, ny;
            if(!path) {
                return ["C", d.x, d.y, d.x, d.y, d.x, d.y];
            }!(path[0] in {
                T : 1,
                Q : 1
            }) && (d.qx = d.qy = null);
            switch (path[0]) {
                case "M":
                    d.X = path[1];
                    d.Y = path[2];
                    break;
                case "A":
                    path = ["C"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));
                    break;
                case "S":
                    nx = d.x + (d.x - (d.bx || d.x));
                    ny = d.y + (d.y - (d.by || d.y));
                    path = ["C", nx, ny][concat](path.slice(1));
                    break;
                case "T":
                    d.qx = d.x + (d.x - (d.qx || d.x));
                    d.qy = d.y + (d.y - (d.qy || d.y));
                    path = ["C"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
                    break;
                case "Q":
                    d.qx = path[1];
                    d.qy = path[2];
                    path = ["C"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
                    break;
                case "L":
                    path = ["C"][concat](l2c(d.x, d.y, path[1], path[2]));
                    break;
                case "H":
                    path = ["C"][concat](l2c(d.x, d.y, path[1], d.y));
                    break;
                case "V":
                    path = ["C"][concat](l2c(d.x, d.y, d.x, path[1]));
                    break;
                case "Z":
                    path = ["C"][concat](l2c(d.x, d.y, d.X, d.Y));
                    break;
            }
            return path;
        }, fixArc = function(pp, i) {
            if(pp[i].length > 7) {
                pp[i].shift();
                var pi = pp[i];
                while(pi.length) {
                    pp.splice(i++, 0, ["C"][concat](pi.splice(0, 6)));
                }
                pp.splice(i, 1);
                ii = mmax(p.length, p2 && p2.length || 0);
            }
        }, fixM = function(path1, path2, a1, a2, i) {
            if(path1 && path2 && path1[i][0] === "M" && path2[i][0] !== "M") {
                path2.splice(i, 0, ["M", a2.x, a2.y]);
                a1.bx = 0;
                a1.by = 0;
                a1.x = path1[i][1];
                a1.y = path1[i][2];
                ii = mmax(p.length, p2 && p2.length || 0);
            }
        };
        for(var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {
            p[i] = processPath(p[i], attrs);
            fixArc(p, i);
            p2 && (p2[i] = processPath(p2[i], attrs2));
            p2 && fixArc(p2, i);
            fixM(p, p2, attrs, attrs2, i);
            fixM(p2, p, attrs2, attrs, i);
            var seg = p[i], seg2 = p2 && p2[i], seglen = seg.length, seg2len = p2 && seg2.length;
            attrs.x = seg[seglen - 2];
            attrs.y = seg[seglen - 1];
            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);
            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);
            attrs2.x = p2 && seg2[seg2len - 2];
            attrs2.y = p2 && seg2[seg2len - 1];
        }
        return p2 ? [p, p2] : p;
    };
    var _path2curveCacheFunc = null;
    var path2curve = function(path, path2) {
        if(!_path2curveCacheFunc) {
            _path2curveCacheFunc = Cache.func(path2curveImpl);
        }
        return _path2curveCacheFunc(path, path2);
    };
    //-------------------------------------------
    // PathMorpher class definition
    //-------------------------------------------

    var PathMorpher = {};

    /**
     * @param {String} fromPath Path String
     * @param {String} toPath Path String
     * @param {Number} percentage
     *
     * @return {String} current path by percentage
     */
    PathMorpher.getPercentagePath = function(from, to, percentage) {
        if(!from || !to) {
            // error case
            return "";
        }
        var curvePathes = path2curve(String(from), String(to));
        var fromPathArray = curvePathes[0];
        var toPathArray = curvePathes[1];
        var currentPathArray = [];
        for(var i = 0, ii = fromPathArray.length; i < ii; i++) {
            currentPathArray[i] = [fromPathArray[i][0]];
            for(var j = 1, jj = fromPathArray[i].length; j < jj; j++) {
                currentPathArray[i][j] = fromPathArray[i][j] + (toPathArray[i][j] - fromPathArray[i][j]) * percentage / 100;
            }
        }
        return _path2string(currentPathArray);
    };
    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    PathMorpher.svg = function(fromShape, toShape, displayShape, percentage) {
        if(displayShape && toShape && toShape.localName == "path" && (!fromShape || fromShape.localName == "path")) {
            var toPathStr = toShape.getAttribute("d");
            if(toPathStr && toPathStr.length > 1) {
                var displayPathStr;
                if(SVGShapeMetadata.get(toShape, MorphConst.MORPHER_DISABLE_PATH) === true) {
                    displayPathStr = displayShape.getAttribute("d");
                    if(toPathStr !== displayPathStr) {
                        displayShape.setAttribute("d", toPathStr);
                    }
                } else {
                    var fromPathStr = "";
                    if(fromShape) {
                        fromPathStr = fromShape.getAttribute("d");
                    }
                    if(!fromPathStr) {
                        // search for the first init point from toShape's path
                        var cmds = toPathStr.match(pathCommand);
                        if(cmds.length > 0) {
                            fromPathStr = cmds[0];
                        } else {
                            fromPathStr = "M0,0";
                        }
                    }
                    displayPathStr = PathMorpher.getPercentagePath(fromPathStr, toPathStr, percentage);
                    displayShape.setAttribute("d", displayPathStr);
                }
            }
        }
    };
    return PathMorpher;
});

define('sap/viz/controls/chart/morph/utils/TransformParser',[],function() {
    var TransformParser = {};

    var trimString = function(string/*string*/)/*string*/
    {
        return string.replace(/^\s*/, "").replace(/\s*$/, "");
    };

    TransformParser.parse = function(transform) {
        var rotateParams = [];
        var translateParams = [];
        var scaleParams = [];
        if(transform) {
            var trimmedValue;
            if(transform.indexOf("rotate(") >= 0) {
                var transformRotate = transform.substring(transform.indexOf("rotate("));
                transformRotate = transformRotate.substring("rotate(".length, transformRotate.indexOf(")"));
                transformRotate = trimString(transformRotate);
                var rawRotateParams = [];
                if(transformRotate.indexOf(",") > 0) {
                    // number divided by ,
                    rawRotateParams = transformRotate.split(",");
                } else {
                    rawRotateParams = transformRotate.split(" ");
                }
                for(var i = 0; i < rawRotateParams.length && rotateParams.length < 3; i++) {
                    trimmedValue = trimString(rawRotateParams[i]);
                    if(trimmedValue !== "") {
                        trimmedValue = parseFloat(trimmedValue);
                        if(isNaN(trimmedValue)) {
                            trimmedValue = 0;
                        }
                        rotateParams.push(trimmedValue);
                    }
                }
                if(rotateParams.length < 3) {
                    // rotate by 0, 0
                    rotateParams[1] = 0;
                    rotateParams[2] = 0;
                }

            }

            if(transform.indexOf("translate(") >= 0) {
                var transformTranslate = transform.substring(transform.indexOf("translate("));
                transformTranslate = transformTranslate.substring("translate(".length, transformTranslate.indexOf(")"));
                transformTranslate = trimString(transformTranslate);
                var rawTranslateParams = [];
                if(transformTranslate.indexOf(",") > 0) {
                    // number divided by ,
                    rawTranslateParams = transformTranslate.split(",");
                } else {
                    rawTranslateParams = transformTranslate.split(" ");
                }
                for(var j = 0; j < rawTranslateParams.length && translateParams.length < 2; j++) {
                    trimmedValue = trimString(rawTranslateParams[j]);
                    if(trimmedValue !== "") {
                        trimmedValue = parseFloat(trimmedValue);
                        if(isNaN(trimmedValue)) {
                            trimmedValue = 0;
                        }
                        translateParams.push(trimmedValue);
                    }
                }
                if(translateParams.length < 2) {
                    // translate by 0, 0
                    translateParams[1] = 0;
                }
            }

            if(transform.indexOf("scale(") >= 0) {
                var transformScale = transform.substring(transform.indexOf("scale("));
                transformScale = transformScale.substring("scale(".length, transformScale.indexOf(")"));
                transformScale = trimString(transformScale);
                var rawScaleParams = [];
                if(transformScale.indexOf(",") > 0) {
                    // number divided by ,
                    rawScaleParams = transformScale.split(",");
                } else {
                    rawScaleParams = transformScale.split(" ");
                }
                for(var k = 0; k < rawScaleParams.length && scaleParams.length < 2; k++) {
                    trimmedValue = trimString(rawScaleParams[k]);
                    if(trimmedValue !== "") {
                        trimmedValue = parseFloat(trimmedValue);
                        if(isNaN(trimmedValue)) {
                            trimmedValue = 0;
                        }
                        scaleParams.push(trimmedValue);
                    }
                }
                if(scaleParams.length < 2) {
                    // scale by 0, 0
                    scaleParams[1] = 0;
                }
            }
        }

        return {
            rotate : rotateParams.length > 0 ? rotateParams : null,
            translate : translateParams.length > 0 ? translateParams : null,
            scale : scaleParams.length > 0 ? scaleParams : null
        };
    };
    return TransformParser;
});

define('sap/viz/controls/chart/morph/morphers/TransformMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata',
    'sap/viz/controls/chart/morph/utils/TransformParser'],
// @formatter:on
function(MorphConst, SVGShapeMetadata, TransformParser) {
    var TransformMorpher = {};
    /**
     *
     * @param {Number} fromX
     * @param {Number} fromY
     * @param {Number} toX
     * @param {Number} toY
     * @param {Number} percentage
     * @return {String} current translate string, translate(10, 20)
     */
    TransformMorpher.applyTransform = function(fromX, fromY, toX, toY, percentage) {
        var x = fromX + (toX - fromX) * percentage / 100;
        var y = fromY + (toY - fromY) * percentage / 100;
        return "translate(" + x + "," + y + ")";
    };

    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    TransformMorpher.svg = function(fromShape, toShape, displayShape, percentage, useOriginalTranslate) {
        if(displayShape && toShape) {
            var currentTransform = "";
            // translate
            if(fromShape) {
                var fromTransform = TransformParser.parse(fromShape.getAttribute("transform"));
                var toTransform = TransformParser.parse(toShape.getAttribute("transform"));

                if(useOriginalTranslate){
                    // original transform attribute
                    if(fromTransform.translate || toTransform.translate){
                        if(!fromTransform.translate){
                            fromTransform.translate = [0, 0];
                        }
                        if(!toTransform.translate){
                            toTransform.translate = [0, 0];
                        }
                        currentTransform += (currentTransform ? " " : "") +
                                            "translate(" +
                                            (fromTransform.translate[0] + (toTransform.translate[0] - fromTransform.translate[0]) * percentage / 100) + "," +
                                            (fromTransform.translate[1] + (toTransform.translate[1] - fromTransform.translate[1]) * percentage / 100) + ")";
                    }
                }else{
                    // global transform
                    var fromX = SVGShapeMetadata.get(fromShape, MorphConst.SHAPE_GLOBAL_TRANSLATE_X) || 0;
                    var fromY = SVGShapeMetadata.get(fromShape, MorphConst.SHAPE_GLOBAL_TRANSLATE_Y) || 0;
                    var toX = SVGShapeMetadata.get(toShape, MorphConst.SHAPE_GLOBAL_TRANSLATE_X) || 0;
                    var toY = SVGShapeMetadata.get(toShape, MorphConst.SHAPE_GLOBAL_TRANSLATE_Y) || 0;
                    var displayTranslateX = fromX + (toX - fromX) * percentage / 100;
                    var displayTranslateY = fromY + (toY - fromY) * percentage / 100;
                    currentTransform += (currentTransform ? " " : "") +
                                        "translate(" +
                                        displayTranslateX + "," +
                                        displayTranslateY + ")";
                }
                // rotation
                if(fromTransform.rotate || toTransform.rotate){
                    if(!fromTransform.rotate){
                        fromTransform.rotate = [0, 0, 0];
                    }
                    if(!toTransform.rotate){
                        toTransform.rotate = [0, 0, 0];
                    }
                    currentTransform += (currentTransform ? " " : "") +
                                        "rotate(" +
                                        (fromTransform.rotate[0] + (toTransform.rotate[0] - fromTransform.rotate[0]) * percentage / 100) + "," +
                                        (fromTransform.rotate[1] + (toTransform.rotate[1] - fromTransform.rotate[1]) * percentage / 100) + "," +
                                        (fromTransform.rotate[2] + (toTransform.rotate[2] - fromTransform.rotate[2]) * percentage / 100) + ")";
                }
                // scale
                if(fromTransform.scale || toTransform.scale){
                    if(!fromTransform.scale){
                        fromTransform.scale = [0, 0];
                    }
                    if(!toTransform.scale){
                        toTransform.scale = [0, 0];
                    }
                    currentTransform += (currentTransform ? " " : "") +
                                        "scale(" +
                                        (fromTransform.scale[0] + (toTransform.scale[0] - fromTransform.scale[0]) * percentage / 100) + "," +
                                        (fromTransform.scale[1] + (toTransform.scale[1] - fromTransform.scale[1]) * percentage / 100) + ")";
                }

                displayShape.setAttribute("transform", currentTransform);
            }
        }
    };

	return TransformMorpher;
});
define('sap/viz/controls/chart/morph/morphers/TextMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/morphers/TransformMorpher'],
// @formatter:on
function(TransformMorpher) {
    var TextMorpher = {};

    var getAttrAsInt = function(svgEl, attrName) {
        var ret = parseInt(svgEl.getAttribute(attrName), 10);
        return isNaN(ret) ? 0 : ret;
    };

    var getAttrAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 0 : ret;
    };

    var reg = /(\d+)(in|cm|mm|pt|pc|em|ex|px)/i;

    var getFontSize = function(from, to, percentage) {
        var fromTokens = reg.exec(from);
        if (!fromTokens) {
            // when from = "10", no unit
            fromTokens = [from, from, ""];
        }
        var fromSize = parseInt(fromTokens[1], 10);
        var fromUnit = fromTokens[2];

        var toTokens = reg.exec(to);
        if (!toTokens) {
            // when to = "10", no unit
            toTokens = [to, to, ""];
        }
        var toSize = parseInt(toTokens[1], 10);
        var toUnit = toTokens[2];

        var fromSizeInToUnit = fromSize;

        // TODO add more font size unit support
        // conver from_unit to px
        switch (fromUnit) {
            case "pt":
                fromSizeInToUnit = fromSizeInToUnit * 1.33;
                break;
            case "px":
                fromSizeInToUnit = fromSizeInToUnit;
                break;
            default:
                fromSizeInToUnit = fromSizeInToUnit;
        }

        // conver px to to_unit
        switch (toUnit) {
            case "pt":
                fromSizeInToUnit = fromSizeInToUnit / 1.33;
                break;
            case "px":
                fromSizeInToUnit = fromSizeInToUnit;
                break;
            default:
                fromSizeInToUnit = fromSizeInToUnit;
        }

        return String(Math.round(fromSizeInToUnit + (toSize - fromSizeInToUnit) * percentage / 100)) + toUnit;
    };

    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    TextMorpher.svg = function(fromShape, toShape, displayShape, percentage) {
        if (displayShape && toShape.localName === "g" && toShape.firstChild && toShape.firstChild.localName === "text") {
            if (fromShape && fromShape.localName === "g" && fromShape.firstChild && fromShape.firstChild.localName === "text") {
                // displayShape is g element
                // displayShape.firstChild is text element
                var textFromX = getAttrAsFloat(fromShape.firstChild, "x");
                var textToX = getAttrAsFloat(toShape.firstChild, "x");
                var textFromY = getAttrAsFloat(fromShape.firstChild, "y");
                var textToY = getAttrAsFloat(toShape.firstChild, "y");
                displayShape.firstChild.setAttribute("x", textFromX + (textToX - textFromX) * percentage / 100);
                displayShape.firstChild.setAttribute("y", textFromY + (textToY - textFromY) * percentage / 100);

                var fromFontSize = fromShape.getAttribute("font-size");
                var toFontSize = toShape.getAttribute("font-size");
                if (fromFontSize && toFontSize && fromFontSize != toFontSize) {
                    var displayFontSize = getFontSize(fromFontSize, toFontSize, percentage);
                    displayShape.setAttribute("font-size", displayFontSize);
                }

                TransformMorpher.svg(fromShape.firstChild, toShape.firstChild, displayShape.firstChild, percentage, true);
            } else if (!fromShape) {
                displayShape.setAttribute("opacity", percentage / 100);
            }
        }
    };

    return TextMorpher;
});
define('sap/viz/controls/chart/morph/VizMorpher',[
// @formatter:off
    'jquery',
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata',
    'sap/viz/controls/chart/morph/vo/VizShape',
    'sap/viz/controls/chart/morph/vo/VizShapesHolder',
    'sap/viz/controls/chart/morph/viz/MpShapesCapturer',
    'sap/viz/controls/chart/morph/viz/MpShapesMapper',
    'sap/viz/controls/chart/morph/morphers/ColorMorpher',
    'sap/viz/controls/chart/morph/morphers/RectMorpher',
    'sap/viz/controls/chart/morph/morphers/LineMorpher',
    'sap/viz/controls/chart/morph/morphers/PathMorpher',
    'sap/viz/controls/chart/morph/morphers/TextMorpher',
    'sap/viz/controls/chart/morph/morphers/TransformMorpher'],
function($, MorphConst, utils, SVGShapeMetadata, VizShape, VizShapesHolder, MpShapesCapturer, MpShapesMapper, ColorMorpher,
    RectMorpher, LineMorpher, PathMorpher, TextMorpher, TransformMorpher) {
// @formatter:on
    /**
     * @param {String|HTMLDivElement} vizDiv
     * @param {String|HTMLDivElement} morphDiv
     */
    var VizMorpher = function(vizDiv, morphDiv) {
        this._vizDiv = vizDiv;
        this._morphDiv = morphDiv;

        this._currentVizType = "";
        this._currentVizShapesHolder = new VizShapesHolder();

        this._tween = null;


    };

    /**
     * clean up morph div
     */
    VizMorpher.prototype.resetMorphSvg = function() {
        var vizDiv = get$Div(this._vizDiv);
        var vizWidth = vizDiv.width();
        var vizHeight = vizDiv.height();
        var morphDiv = get$Div(this._morphDiv);
        morphDiv.empty();
        var morphSvgDiv = get$Div(document.createElement("DIV"));
        morphSvgDiv.css("overflow", "hidden").appendTo(morphDiv).width(vizWidth).height(vizHeight);
        // clone viz level css class
        var vizSvg = vizDiv.find("svg");
        if (vizSvg.length > 0) {
            // TODO put css class into const
            morphSvgDiv.attr("class", "vc-morph-svg-host " + vizSvg.parent().attr("class"));
        }
        return d3.select(morphSvgDiv.get(0)).append("svg").attr("width", vizWidth).attr("height", vizHeight).node();
    };

    /**
     * @return {String} the current viz type
     */
    VizMorpher.prototype.getCurrentVizType = function() {
        return this._currentVizType;
    };

    /**
     * @return {Boolean} whether is playing morphing
     */
    VizMorpher.prototype.isPlaying = function() {
        return (this._tween !== null);
    };

    /**
     * switch viz and morphing layers' visibility
     * @param {Boolean} morphingVisible
     * @param {Boolean} vizVisible
     *
     */
    VizMorpher.prototype.showMorphing = function(morphingVisible, vizVisible) {
        var morphDiv = get$Div(this._morphDiv);
        var vizDiv = get$Div(this._vizDiv);
        if (morphingVisible) {
            morphDiv.css("display", "");
        } else {
            morphDiv.css("display", "none");
        }
        if (vizVisible) {
            vizDiv.css("visibility", "visible");
        } else {
            vizDiv.css("visibility", "hidden");
        }
    };

    /**
     * Update viz with morphing
     *
     * @param {String} newVizType help to define different kinds of morph rules
     * @param {Number} ms morphing time in ms, if ms <= 0, update morphing directly
     * @param {Function} completeCallback
     */
    VizMorpher.prototype.morphVizType = function(newVizType, ms, completeCallback) {
        ms = utils.isNumber(ms) ? ms : 1000;
        newVizType = utils.isString(newVizType) ? newVizType : this.getCurrentVizType();
        var vizDiv = get$Div(this._vizDiv);
        var morphDiv = get$Div(this._morphDiv);
        
        
        if (this._tween) {
            // morphing is not completed, so do not trigger completeCallback
            this._tween.stop(true, false);
            this._tween = null;
            vizDiv.css("visibility", "visible");
            morphDiv.css("display", "none");
        }
        // capture new shapes
        var newVizShapesHolder = MpShapesCapturer.getShapes(vizDiv.get(0));
        // whether able to play morphing due to performance consideration of too many shapes
        var canPlayMorphing = ableToPlayMorphing(newVizShapesHolder);
        // whether to animate the morphing, or reach to finaly state directly
        var shouldAnimate = (canPlayMorphing && ms > 0);
        // check play morphing, or clean up and do nothing 
        if (canPlayMorphing) {
            // map new shape's from to current display shapes
            MpShapesMapper.map(newVizShapesHolder, this._currentVizShapesHolder, newVizType, this._currentVizType);
            // flaten to single array
            var allVizShapes = newVizShapesHolder.allByOrder();
            // clean up morph area
            var morphingLayerSvg = this.resetMorphSvg();
            // start morphing
            if (shouldAnimate) {
                vizDiv.css("visibility", "hidden");
                morphDiv.css("display", "");
                // make sure newVizShapes are updated (has .display SVGElement) and ready to be this._currentVizShapesHolder
                placeShapes(morphingLayerSvg, allVizShapes, 0);
                var me = this;
                this._startMorphShapes(allVizShapes, ms, function() {
                    vizDiv.css("visibility", "visible");
                    morphDiv.css("display", "none");
                    if (me._tween) {
                        me._tween.stop(true, false);
                    }
                    me._tween = null;
                    if (utils.isFunction(completeCallback)) {
                        completeCallback.call(null);
                    }
                });
            } else {
                // make sure newVizShapes are updated (has .display SVGElement) and ready to be this._currentVizShapesHolder
                placeShapes(morphingLayerSvg, allVizShapes, 100);
                this._tween = null;
                vizDiv.css("visibility", "visible");
                morphDiv.css("display", "none");
                if (utils.isFunction(completeCallback)) {
                    completeCallback.call(null);
                }
            }
        } else {
            newVizShapesHolder.empty();
            // clean up morph area
            this.resetMorphSvg();
            this._tween = null;
            vizDiv.css("visibility", "visible");
            morphDiv.css("display", "none");
            if (utils.isFunction(completeCallback)) {
                completeCallback.call(null);
            }
        }
        
        // update current shapes
        this._currentVizType = newVizType;
        this._currentVizShapesHolder = newVizShapesHolder;
    };

    var ableToPlayMorphing = function(newVizShapesHolder) {
        var toShapesBySvgType = newVizShapesHolder.toShapesBySvgType();
        if (toShapesBySvgType["all"].length > newVizShapesHolder.backgrounds.length) {
            // check rules
            if (toShapesBySvgType["path"] && toShapesBySvgType["path"].length > 200) {
                return false;
            }
            if (toShapesBySvgType["rect"] && toShapesBySvgType["rect"].length > 300) {
                return false;
            }
            if (toShapesBySvgType["all"].length > 400) {
                return false;
            }

            return true;
        }
        return false;
    };
    /**
     * @private
     *
     * @param {SVGDocument} svg
     * @param {[sap.viz.morph.vo.VizShape]} visShapes
     */
    VizMorpher.prototype._startMorphShapes = function(visShapes, ms, completeCallback) {
        this._tween = $({
            percentage : 1
        });
        this._tween.animate({
            percentage : 100
        }, {
            duration : ms,
            easing : "swing", //or "linear"
            step : function() {
                var percentage = this.percentage;
                morphShapes(visShapes, percentage);
            },
            complete : function() {
                completeCallback();
            }
        });

    };

    /**
     * @param {String|HTMLDivElement} div
     * @return {jQuery Object}
     */
    var get$Div = function(div) {
        if (utils.isString(div)) {
            if (div.indexOf("#") !== 0) {
                return $("#" + div);
            }
        }
        return $(div);
    };

    /**
     * add to shapes to morphing svg and morph them to initial state
     *
     * @private
     * @param {SVGDocument} svg
     * @param {[VizShape]} visShapes
     * @param {Number} percentage
     */
    var placeShapes = function(svg, visShapes, percentage) {
        percentage = percentage ? percentage : 0;
        for (var i = 0; i < visShapes.length; i++) {
            var vizShape = visShapes[i];
            var fromShape = vizShape.from;
            var toShape = vizShape.to;
            if (toShape) {
                var displayShape = vizShape.display = toShape.cloneNode(true);
                SVGShapeMetadata.clone(displayShape, toShape);
                if (percentage !== 100) {
                    morphShape(fromShape, toShape, displayShape, percentage);
                }
                svg.appendChild(displayShape);
            }
        }
    };

    /**
     * morph all the shapes by percentage
     *
     * @private
     * @param {[VizShape]} visShapes
     * @param {Number} percentage
     */
    var morphShapes = function(visShapes, percentage) {
        for (var i = 0; i < visShapes.length; i++) {
            var vizShape = visShapes[i];
            var fromShape = vizShape.from;
            var toShape = vizShape.to;
            var displayShape = vizShape.display;
            morphShape(fromShape, toShape, displayShape, percentage);
        }
    };

    /**
     * morph every single shape
     *
     * @private
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {Number} percentage
     */
    var morphShape = function(fromShape, toShape, displayShape, percentage) {
        RectMorpher.svg(fromShape, toShape, displayShape, percentage);
        LineMorpher.svg(fromShape, toShape, displayShape, percentage);
        PathMorpher.svg(fromShape, toShape, displayShape, percentage);
        ColorMorpher.svg(fromShape, toShape, displayShape, percentage);
        TextMorpher.svg(fromShape, toShape, displayShape, percentage);
        TransformMorpher.svg(fromShape, toShape, displayShape, percentage);
    };

    /**
     * For testing
     *
     * @param {String} targetDivId
     */
    VizMorpher.prototype.testDrawShapes = function(newVizType, percentage) {
        var vizDiv = get$Div(this._vizDiv);
        var morphDiv = get$Div(this._morphDiv);
        // capture new shapes
        var newVizShapesHolder = MpShapesCapturer.getShapes(vizDiv.get(0));
        // map new shape's from to current display shapes
        MpShapesMapper.map(newVizShapesHolder, this._currentVizShapesHolder, newVizType, this._currentVizType);
        // flaten to single array
        var allVizShapes = newVizShapesHolder.allByOrder();
        // clean up morph area
        var morphingLayerSvg = this.resetMorphSvg();
        // make sure newVizShapes are updated (has .display SVGElement) and ready to be this._currentVizShapesHolder
        placeShapes(morphingLayerSvg, allVizShapes, percentage);
        // update current shapes
        this._currentVizType = newVizType;
        this._currentVizShapesHolder = newVizShapesHolder;
    };

    return VizMorpher;
});

define('sap/viz/controls/chart/views/PropertyZone',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher'],
// @formatter:on
function($, CSSConst, OOUtil, Event, EventDispatcher) {

    var PropertyZone = function(targetDiv, zoneProvider) {
        PropertyZone.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.DropZone";
        this._targetDiv = targetDiv;
        this._zoneProvider = zoneProvider;
        this._selectedZone$ = null;
        var style = "position:absolute;visibility:hidden;left:0px;top:0px;width:0px;height:0px;";
        this._dom = $(document.createElement("DIV")).appendTo(this._targetDiv.parentNode).attr('style', style);        
    };

    OOUtil.extend(PropertyZone, EventDispatcher);
    
    /**
     * Select zone event
     */
    PropertyZone.SELECT_ZONE = 'SELECT_ZONE_EVENT';
    
    /**
     * Create all zones 
     */
    PropertyZone.prototype._createZones = function(){
        //clear up original
        this._targetRect = this._targetDiv.getBoundingClientRect();
        var style = "position:absolute;left:0px;top:0px;width:" + this._targetRect.width + "px;height:" + this._targetRect.height + "px;";
        this._dom.empty().attr('style', style);

        //create sub div
        var zones = this._zoneProvider();
        for (var i = 0; i < zones.length; i++) {
            var areas = zones[i].bound;
            for (var n = 0; n < areas.length; n++) {
                this._createZone(this._dom[0], areas[n], zones[i].name);
            }
        }
    };
    
    /**
     * Create each zone div 
     */
    PropertyZone.prototype._createZone = function(parent, area, zoneName) {
        var div$ = $(document.createElement("DIV"));
        var left = area[0][0], top = area[0][1], width = area[2][0] - area[0][0], height = area[2][1] - area[0][1];
        var style = "left:" + left + "px;top:" + top + "px;width:" + width + "px;height:" + height + "px;";
        div$.attr('style', style).addClass(CSSConst.CHART_PREFIX + 'property-zone').appendTo(parent);
        div$.get(0).__name = zoneName;
        div$.click($.proxy(this._selectZone, this));
    };
    
    /**
     * Handler for zone clicked
     */
    PropertyZone.prototype._selectZone = function(event) {
        var curZone$ = $(event.target);
        if(this._selectedZone$ !== curZone$){
            if(this._selectedZone$){
                this._selectedZone$.removeClass(CSSConst.CHART_PREFIX + 'property-zone-selected');
            } 
            this._selectedZone$ = curZone$;               
            this._selectedZone$.addClass(CSSConst.CHART_PREFIX + 'property-zone-selected'); 
            var eventData = {
                'propertyZoneName' : this._selectedZone$.get(0).__name
            };
            this._dispatchEvent(new Event(PropertyZone.SELECT_ZONE, this, eventData));
        } 
    }; 
    
    /**
     * Active/Disactive property zone according to flag enableProperyZone of chart view
     * @param {Boolean} enableZone, flag enableProperyZone of chart view
     */
    PropertyZone.prototype.updateZone = function(enableZone) { 
        if(enableZone){
            this._createZones();
            this._dom.css('visibility', ''); 
        }else{
            this._dom.css('visibility', 'hidden'); 
        }        
    };
    
    /**
     * resize property zone
     * @param {width: Number, height: Number} size
     */
    PropertyZone.prototype.size = function(size) {
        if (size) {
            this._dom.css({
                width : size.width + "px",
                height : size.height + "px"
            });
        }
    };
    return PropertyZone;
});

define("sap/viz/controls/LanguageLoader", [], function() {
    sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_COMMON_BAR_TEXT:"Bar Chart",VIZ_COMMON_COLUMN_TEXT:"Column Chart",VIZ_COMMON_STACKED_BAR_TEXT:"Stacked Bar Chart",VIZ_COMMON_STACKED_COLUMN_TEXT:"Stacked Column Chart",VIZ_COMMON_DUAL_BAR_TEXT:"Bar Chart With 2 Y-Axes",VIZ_COMMON_DUAL_COLUMN_TEXT:"Column Chart With 2 Y-Axes",VIZ_COMMON_3D_BAR_TEXT:"3D Bar Chart",VIZ_COMMON_3D_COLUMN_TEXT:"3D Column Chart",VIZ_COMMON_LINE_TEXT:"Line Chart",VIZ_COMMON_AREA_TEXT:"Area Chart",VIZ_COMMON_COMBINATION_TEXT:"Combined Column Line Chart",VIZ_COMMON_DUAL_LINE_TEXT:"Line Chart With 2 Y-Axes",VIZ_COMMON_DUAL_COMBINATION_TEXT:"Combined Column Line Chart With 2 Y-Axes",VIZ_COMMON_PIE_TEXT:"Pie Chart",VIZ_COMMON_DONUT_TEXT:"Donut Chart",VIZ_COMMON_PIE_WITH_DEPTH_TEXT:"Pie With Variable Slice Depth",VIZ_COMMON_GEOBUBBLE_TEXT:"Geographic Bubble Chart",VIZ_COMMON_CHOROPLETH_TEXT:"Geo Choropleth Chart",VIZ_COMMON_GEOPIE_TEXT:"Geo Pie Chart",VIZ_COMMON_GEOMAP_TEXT:"Geo Map",VIZ_COMMON_SCATTER_TEXT:"Scatter Plot",VIZ_COMMON_BUBBLE_TEXT:"Bubble Chart",VIZ_COMMON_SCATTER_MATRIX_TEXT:"Scatter Matrix Chart",VIZ_COMMON_TREEMAP_TEXT:"Tree Map",VIZ_COMMON_HEATMAP_TEXT:"Heat Map",VIZ_COMMON_TABLE_TEXT:"Table",VIZ_COMMON_CROSSTAB_TEXT:"Crosstab",VIZ_COMMON_RADAR_TEXT:"Radar Chart",VIZ_COMMON_BOXPLOT_TEXT:"Box Plot",VIZ_COMMON_WATERFALL_TEXT:"Waterfall Chart",VIZ_COMMON_TAGCLOUD_TEXT:"Tag Cloud",VIZ_COMMON_MEASURES:"MEASURES",VIZ_COMMON_DIMENSIONS:"DIMENSIONS",VIZ_COMMON_SUBTOTALS:"SUBTOTALS",VIZ_COMMON_ANIMATION:"Animation",VIZ_COMMON_TRELLIS:"TRELLIS",VIZ_COMMON_XAXIS:"X Axis",VIZ_COMMON_YAXIS:"Y Axis",VIZ_COMMON_PRIMARY_YAXIS:"Y Axis1",VIZ_COMMON_SECONDARY_YAXIS:"Y Axis2",VIZ_COMMON_PRIMARY_XAXIS:"X Axis1",VIZ_COMMON_SECONDARY_XAXIS:"X Axis2",VIZ_COMMON_PIE_SECTORS:"Pie Sectors",VIZ_COMMON_PIE_DEPTH:"Pie Depth",VIZ_COMMON_FEATUREVALUES:"Value",VIZ_COMMON_BUBBLE_WIDTH:"Bubble Width",VIZ_COMMON_BUBBLE_HEIGHT:"Bubble Height",VIZ_COMMON_RECTANGLECOLOR:"Area Color",VIZ_COMMON_RECTANGLEWEIGHT:"Area Weight",VIZ_COMMON_REGIONCOLOR:"Legend Color",VIZ_COMMON_GEO_FEATURES:"Geography",VIZ_COMMON_GEO_COLOR:"Color",VIZ_COMMON_FEATUREANALYSIS:"Overlay Data",VIZ_COMMON_REGIONSHAPE:"Legend Shape",VIZ_COMMON_AREANAME:"Area Name",VIZ_COMMON_SECONDARY_AREANAME:"Area Name2",VIZ_COMMON_RADAR_AXES:"Radar Branches",VIZ_COMMON_TAGWEIGHT:"Word Weight",VIZ_COMMON_TAGFAMILY:"Word Color",VIZ_COMMON_TAGNAME:"Word",VIZ_COMMON_COLUMNS:"Columns",VIZ_COMMON_ROWS:"Rows",VIZ_COMMON_TABLE_DIMENSION:"Rows Axis",VIZ_COMMON_TABLE_MEASURE:"Primary Values",VIZ_COMMON_TABLE_ROWS_SUBTOTALS:"Rows Subtotals",VIZ_COMMON_TABLE_COLUMNS_AXIS:"Columns Axis",VIZ_COMMON_TABLE_COLUMNS_SUBTOTALS:"Columns Subtotals",VIZ_COMMON_LEGEND:"Legend",VIZ_COMMON_DIMENSION_LIMITATION_WARN:"You have reached the maximum number of dimension feeds for this visualization.",VIZ_COMMON_CHANGE_CALCULATION:"Change Calculation",VIZ_COMMON_SUM:"Sum",VIZ_COMMON_AVERAGE:"Average",VIZ_COMMON_MIN:"Min",VIZ_COMMON_MAX:"Max",VIZ_COMMON_COUNT_DISTINCT:"Count-Distinct",VIZ_COMMON_COUNT_ALL:"Count-All",VIZ_COMMON_NONE:"None",VIZ_COMMON_SUM_SHORT:"(Sum)",VIZ_COMMON_AVERAGE_SHORT:"(Avg)",VIZ_COMMON_MIN_SHORT:"(Min)",VIZ_COMMON_MAX_SHORT:"(Max)",VIZ_COMMON_COUNT_DISTINCT_SHORT:"(Cnt-Dis)",VIZ_COMMON_COUNT_ALL_SHORT:"(Cnt-All)",VIZ_COMMON_NONE_SHORT:"(None)",VIZ_COMMON_TOTAL_OF:"Total of",VIZ_COMMON_SUM_OF:"Sum of",VIZ_COMMON_AVERAGE_OF:"Average of",VIZ_COMMON_COUNT_OF:"Count of",VIZ_COMMON_MIN_OF:"Minimum of",VIZ_COMMON_MAX_OF:"Maximum of",VIZ_COMMON_EDIT:"Edit",VIZ_COMMON_DELETE:"Delete",VIZ_COMMON_DELETE_COMMENT_MESSAGE:"Are you sure to delete the comment?",VIZ_COMMON_DONT_SHOW_MESSAGE:"Don't show this again",VIZ_COMMON_OK:"OK",VIZ_COMMON_CANCEL:"Cancel",VIZ_COMMON_BETWEEN:"BETWEEN",VIZ_COMMON_SEARCH:"Search",VIZ_COMMON_FAKE_DIMENSION:"Fake Dimension",VIZ_COMMON_FAKE_MEASURE:"Fake Measure",VIZ_COMMON_SERIALIZATION_FAILED:"Serialization error",VIZ_COMMON_INVALID_SERIALIZATION_PACKAGE:"Invalid serialization package",VIZ_COMMON_DEPENDENCY_ERROR:"Please include {0} when use {1}.",VIZ_COMMON_DEPENDENCY_ERROR_WITH_UI_CONFIG:"Please include {0} when use {1} with {2}.",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_BUILDER_CHART:"TYPE:",VIZ_BUILDER_BUILD:"Build",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_ANNOTATION_COMMENT:"Comment",}});sap.viz.extapi.env.Language.register({id:'dev',value: {}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_CHART_INCOMPLETE_DESCRIPTION:"Incomplete chart. Please add more measures or dimensions.",VIZ_CHART_GEO_INCOMPLETE_DESCRIPTION:"Incomplete chart. Please add more geography dimensions.",VIZ_CHART_MEASURE_INCOMPLETE_DESCRIPTION:"Incomplete chart. Please add more measures.",VIZ_CHART_DIMENSION_INCOMPLETE_DESCRIPTION:"Incomplete chart. Please add more dimensions.",VIZ_CHART_CREATE_CHART_FAILED:"Failed to create chart:",VIZ_CHART_UPDATE_CHART_FAILED:"Failed to update chart:",VIZ_CHART_UPDATE_DATA_FAILED:"Failed to update chart data:",VIZ_CHART_UPDATE_FEEDING_FAILED:"Failed to update chart feeding:",VIZ_CHART_UPDATE_CSS_FAILED:"Failed to update chart css:",VIZ_CHART_UPDATE_PROPERTIES_FAILED:"Failed to update chart properties:",VIZ_CHART_ADD_EVENT_FAILED:"Failed to add chart event callback:",VIZ_CHART_REMOVE_EVENT_FAILED:"Failed to remove chart event callback:",VIZ_CHART_SELECTION_FAILED:"Failed to get/set chart selection:",VIZ_CHART_FEEDINGZONE_FAILED:"Failed to get chart feedingzone:",VIZ_CHART_DESCRIPTION_FAILED:"Failed to get/set chart description:",VIZ_CHART_TRIGGER_ACTION_FAILED:"Failed to trigger chart action:",VIZ_CHART_SERIALIZE_FAILED:"Failed to serialize chart:",VIZ_CHART_VIZINSTANCE_NOT_CREATED:"VizInstance is not created.",VIZ_CHART_INVALID_VIZ_TYPE:"Cannot display this chart: {0}.",VIZ_CHART_TRELLIS_DISABLED_WARN:"The trellis is disabled in either Viz Frame or Feeding Panel.",VIZ_CHART_NO_DATA_MATCHES_YOUR_FILTER:"No data matches your filter(s)",VIZ_CHART_NEGATIVE_VALUES_WARN:"Negative values are not shown in this Bubble chart",VIZ_CHART_NEGATIVE_VALUES_INFO:"To display negative values, click the Settings button and select Show Negative Values from the contextual menu.",VIZ_CHART_TITLE_TEXT_JOIN_BY:"{0} by {1}",VIZ_CHART_TITLE_TEXT_JOIN_AND:"and",VIZ_CHART_TITLE_CONTEXT_MENU_EDIT:"Rename",VIZ_CHART_TITLE_CONTEXT_MENU_RESTORE:"Restore Default Title",VIZ_CONTROLS_API_PARAMETER_ERROR:"API parameter error.",VIZ_CHART_EXPORTSVG_FAILED:"Failed to export to svg string.",VIZ_CHART_SET_AXIS_RANGE:"Set axis range",VIZ_CHART_AXIS_ZOOM:"Zoom",VIZ_CHART_XAXIS_RANGE:"X Axis Range",VIZ_CHART_XAXIS1_RANGE:"X Axis1 Range",VIZ_CHART_XAXIS2_RANGE:"X Axis2 Range",VIZ_CHART_YAXIS_RANGE:"Y Axis Range",VIZ_CHART_YAXIS1_RANGE:"Y Axis1 Range",VIZ_CHART_YAXIS2_RANGE:"Y Axis2 Range",VIZ_CHART_AUTO_RANGE:"Automatic",VIZ_CHART_FIXED_RANGE:"Fixed",VIZ_CHART_IMPORT_ESRI_CUSTOM_SERVICE:"Import Esri Custom Service",VIZ_CHART_NEXT:"Next",VIZ_CHART_SELECT_DATASET:"Select data set",VIZ_CHART_SET_COLOR_LAYER:"Set color to feature layer",VIZ_CHART_RESET:"Reset",VIZ_CHART_SEGMENTED:"Segmented",VIZ_CHART_GRADIENT:"Gradient",VIZ_CHART_BACK:"Back",VIZ_CHART_CONFIRM:"Confirm",VIZ_CHART_ESRI_MAP_LOADING:"Loading Esri Map",VIZ_CHART_ESRI_MAP_LOG_ON:"Logging in to Esri now",VIZ_CHART_ESRI_MAP_AUTHENTICATION_FAIL:"Esri Authentication Fail",VIZ_CHART_ESRI_SERVICES_UNACCESSIBLE:"An unknown error has occurred while accessing ESRI online services. Check your internet connection",VIZ_CHART_START:"Start",VIZ_CHART_END:"End",VIZ_CHART_NO_ESRI_SERVICE:"No feature service found under your account.",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_CONTEXTMENU_SHOW_LEGEND:"Show Legend",VIZ_CONTEXTMENU_SHOW_DATALABELS:"Show Data Labels",VIZ_CONTEXTMENU_NORMAL_STACKING:"Normal Stacking",VIZ_CONTEXTMENU_FULL_STACKING:"100% Stacking",VIZ_CONTEXTMENU_HORIZONTAL:"Horizontal",VIZ_CONTEXTMENU_VERTICAL:"Vertical",VIZ_CONTEXTMENU_INSERT_COMMENT:"Insert Comment...",VIZ_CONTEXTMENU_CHANGE_MBCLEGEND_COLOR:"Choose Legend Item Colors...",VIZ_CONTEXTMENU_MENU_CHART_EDITOR:"Chart Editor...",VIZ_CONTEXTMENU_SHOW_MND:"Use Measures as a Dimension",VIZ_CONTEXTMENU_SHOW_MND_TOOLTIP:"Creates a new dimension with all the measures in the chart. The values are spread on a single axis, or separate charts for a trellis chart.",VIZ_CONTEXTMENU_NO_MENU_ITEMS:"No available items",VIZ_CONTEXTMENU_SHOW_TITLE:"Show Title",VIZ_CONTEXTMENU_SET_AXIS_SCALE:"Set Axis Scale",VIZ_CONTEXTMENU_SHOW_NEGATIVE_VALUES:"Show Negative Values",VIZ_CONTEXTMENU_CREATE_SUBTOTALS:"Create Subtotals",VIZ_CONTEXTMENU_SHOW_BEFORE_ROWS:"Show Subtotals Below Rows",VIZ_CONTEXTMENU_SHOW_ABOVE_ROWS:"Show Subtotals Above Rows",VIZ_CONTEXTMENU_CALCULATE_ROWS_TOTALS_FIRST:"Calculate Rows Totals First",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_CUSTOMBUTTON_SETTINGS:"Settings",VIZ_CUSTOMBUTTON_MAXIMIZE:"Maximize",VIZ_CUSTOMBUTTON_RESTORE_DOWN:"Restore Down",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_FRAME_FILTERMENU_FILTER:"Filter",VIZ_FRAME_FILTERMENU_EXCLUDE:"Exclude",VIZ_FRAME_FILTERBAR_DESCRIPTION:"Select fields from the Data Set to filter.",VIZ_FRAME_CHART_EDITOR:"Chart Editor",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_MAPBUILDER_VIZ_LAYER_NAME:"Layer",VIZ_MAPBUILDER_BASE_MAP_NAME:"base map",VIZ_MAPBUILDER_ADD_NEW_LAYER:"Add Layer",VIZ_MAPBUILDER_RENAME:"Rename",VIZ_MAPBUILDER_DELETE:"Delete layer",VIZ_MAPBUILDER_HIDE:"Hide",VIZ_MAPBUILDER_SHOW:"Show",VIZ_MAPBUILDER_MOVEUP:"Move up",VIZ_MAPBUILDER_MOVEDOWN:"Move down",VIZ_MAPBUILDER_DELETE_GEO_LAYER:"Delete Geo Layer",VIZ_MAPBUILDER_OK:"Ok",VIZ_MAPBUILDER_CANCEL:"Cancel",VIZ_MAPBUILDER_DATA_POINTS:"Data Point Type",VIZ_MAPBUILDER_CHOROPLETH:"choropleth",VIZ_MAPBUILDER_BUBBLE:"bubble",VIZ_MAPBUILDER_MARKER:"marker",VIZ_MAPBUILDER_TYPE:"type",VIZ_MAPBUILDER_GEO:"Geo Dimension",VIZ_MAPBUILDER_GEO_LOCATION:"Geo Location",VIZ_MAPBUILDER_GEO_COLOR:"Color",VIZ_MAPBUILDER_GEO_SIZE:"Size",VIZ_MAPBUILDER_MEASURES:"Color",VIZ_MAPBUILDER_PROPERTIES:"PROPERTIES",VIZ_MAPBUILDER_SHOW_LEGEND:"show legend",VIZ_MAPBUILDER_MARKER_CLUSTER:"Cluster adjacent markers",VIZ_MAPBUILDER_BUBBLE_CLUSTER:"Cluster adjacent bubbles",VIZ_MAPBUILDER_MAP:"MAP",VIZ_MAPBUILDER_PROVIDERS:"Providers",VIZ_MAPBUILDER_STYLES:"STYLES",VIZ_MAPBUILDER_ESRI_MAP_STYLE_MAP:"Map",VIZ_MAPBUILDER_ESRI_MAP_STYLE_SATELLITE:"Satellite",VIZ_MAPBUILDER_ESRI_MAP_STYLE_TERRAIN:"Terrain",VIZ_MAPBUILDER_ESRI_MAP_STYLE_STREETS:"Streets",VIZ_MAPBUILDER_NOT_SUPPORT_ERROR:"Not Support Yet.",VIZ_MAPBUILDER_IMPORT_ESRI_CUSTOM_SERVICE:"Import Esri Custom Service",VIZ_MAPBUILDER_ESRI_CUSTOM_SERVICE:"Esri Custom Service",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_FILTERBAR_ADD_FILTERS:"Add filters.",VIZ_FILTERBAR_CLEAR_FILTERS:"Clear filters",VIZ_FILTERBAR_READONLY_FILTER:"Read-only filter",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_FILTERBAR_DESCRIPTION:"Add filters.",VIZ_FILTERBAR_GLOBAL_FILTER:"Global Filter:",VIZ_FILTERBAR_ITEMS_EXCLUDED:"items excluded",VIZ_FILTERBAR_ITEMS_INCLUDED:"items included",}});sap.viz.extapi.env.Language.register({id:'dev',value: {}});sap.viz.extapi.env.Language.register({id:'dev',value: {PROPERTY_EDITOR_TITLE_PLACE_HOLDER:"Properties",PROPERTY_EDITOR_TITLE_PREFIX:"Properties of {0}",PROPERTY_EDITOR_GENERAL:"General",PROPERTY_EDITOR_SHOW_LEGEND:"Show Legend",PROPERTY_EDITOR_XAXIS:"X Axis",PROPERTY_EDITOR_SHOW_AXIS:"Show Axis",PROPERTY_EDITOR_SHOW_AXIS_TITLE:"Show Axis Title",PROPERTY_EDITOR_SHOW_AXIS_LABEL:"Show Axis Labels",PROPERTY_EDITOR_XAXIS2:"Secondary X Axis",PROPERTY_EDITOR_YAXIS:"Y Axis",PROPERTY_EDITOR_YAXIS2:"Secondary Y Axis",PROPERTY_EDITOR_ZAXIS:"Z Axis",PROPERTY_EDITOR_VALUE_AXIS:"Value Axis",PROPERTY_EDITOR_POLAR_AXIS:"Polar Axis",PROPERTY_EDITOR_ROW_AXIS:"Row Axis",PROPERTY_EDITOR_COLUMN_AXIS:"Column Axis",PROPERTY_EDITOR_SHOW_AXIS_LINE:"Show Axis Line and Ticker",PROPERTY_EDITOR_SHOW_AXIS_IMAGE:"Show Axis Pictograms",PROPERTY_EDITOR_SIZE_OF_ALL_IMAGES:"Size of All Pictograms",PROPERTY_EDITOR_HEIGHT_OF_AXIS_AREA:"Height of Axis Area",PROPERTY_EDITOR_WIDTH_OF_AXIS_AREA:"Width of Axis Area",PROPERTY_EDITOR_SHAPE_STYLE:"Shape Style",PROPERTY_EDITOR_BACKGROUND_COLOR:"Background Color",PROPERTY_EDITOR_POSITION:"Position",PROPERTY_EDITOR_POSITION_OUTSIDE_END:"Outside End",PROPERTY_EDITOR_POSITION_INSIDE_END:"Inside End",PROPERTY_EDITOR_POSITION_CENTER:"Center",PROPERTY_EDITOR_CHART_AREA:"Chart Area",PROPERTY_EDITOR_CHART_TITLE:"Chart Title",PROPERTY_EDITOR_PLOT_AREA:"Plot Area",PROPERTY_EDITOR_GRID_LINE:"Gridline",PROPERTY_EDITOR_LEGEND:"Legend",PROPERTY_EDITOR_HORIZONTAL_AXIS:"Horizontal Axis",PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE:"Horizontal Axis Title",PROPERTY_EDITOR_VERTICAL_AXIS:"Vertical Axis",PROPERTY_EDITOR_VERTICAL_AXIS_TITLE:"Vertical Axis Title",PROPERTY_EDITOR_COLUMN_DATA_POINT:"Column",PROPERTY_EDITOR_BAR_DATA_POINT:"Bar",PROPERTY_EDITOR_SERIES:"Series",PROPERTY_EDITOR_MARKER:"Marker",PROPERTY_EDITOR_DATA_LABELS:"Data Labels",PROPERTY_EDITOR_DATA_LABEL:"Data Label",PROPERTY_EDITOR_DONUT_INNER_CIRCLE:"Inner Circle",PROPERTY_EDITOR_DONUT_DATA_POINT:"Slice",PROPERTY_EDITOR_DONUT_DATA_POINT_SLICE_COLOR:"Slice Color",PROPERTY_EDITOR_DONUT_DATA_POINT_HIGHLIGHT:"Highlight the Slice",PROPERTY_EDITOR_DONUT_DATA_POINT_SHOW_NAME:"Show Name",PROPERTY_EDITOR_DONUT_DATA_POINT_SHOW_PERCENTAGE:"Show Percentage",PROPERTY_EDITOR_DONUT_DATA_POINT_OTHER_SLICE_COLOR:"Other Slices' Color",PROPERTY_EDITOR_LINE:"Line",PROPERTY_EDITOR_SHOW_CHART_TITLE:"Show Chart Title",PROPERTY_EDITOR_SHOW_DATA_LABEL:"Show Data Labels",PROPERTY_EDITOR_SHOW_DATA_LABEL_IMAGE:"Show Data Label Pictograms",PROPERTY_EDITOR_DATA_LABEL_IMAGE_SIZE:"Size of All Pictograms",PROPERTY_EDITOR_VALUE_AXIS_MAX_VALUE:"Value Axis Maximum",PROPERTY_EDITOR_SHOW_LEGEND_TITLE:"Show Legend Title",PROPERTY_EDITOR_SHOW_GRIDLINE:"Show Gridlines",PROPERTY_EDITOR_THICKNESS:"Thickness",PROPERTY_EDITOR_COLOR:"Color",PROPERTY_EDITOR_COLORPICKER_MORE:"More...",PROPERTY_EDITOR_COLORPICKER_NOCOLOR:"No Color",PROPERTY_EDITOR_COLORPICKER_RECENTCOLORS:"Recent Colors",PROPERTY_EDITOR_MARKER_SHAPE:"Marker Pictogram",PROPERTY_EDITOR_SIZE_OF_ALL_MARKERS:"Size of All Markers",PROPERTY_EDITOR_TITLE_POSITION:"Position",PROPERTY_EDITOR_TITLE_POSITION_TOP:"Top",PROPERTY_EDITOR_TITLE_POSITION_BOTTOM:"Bottom",PROPERTY_EDITOR_LINE_LINE_COLOR:"Line Color",PROPERTY_EDITOR_LINE_LINE_THICKNESS:"Line Thickness",PROPERTY_EDITOR_LINE_LINE_STYLE:"Line Style",PROPERTY_EDITOR_HEIGHT:"Height",PROPERTY_EDITOR_WIDTH:"Width",PROPERTY_EDITOR_LAYOUT:"Layout",PROPERTY_EDITOR_CLASSIC_LAYOUT:"Classic Layout",PROPERTY_EDITOR_LEAN_LAYOUT:"Lean Layout",FORMAT_PICKER_DECIMAL:"Decimal Places",FORMAT_PICKER_DISPLAY_NUMBER:"Display As Number",FORMAT_PICKER_DISPLAY_PERCENT:"Display As Percentage",FORMAT_PICKER_SHOW_SEP:"Show 1000 Separator (,)",FORMAT_PICKER_SHOW_BY_UNIT:"Show by KMBT",FORMAT_PICKER_UNIT_AUTO:"Auto",FORMAT_PICKER_UNIT_K:"K",FORMAT_PICKER_UNIT_M:"M",FORMAT_PICKER_UNIT_B:"B",FORMAT_PICKER_UNIT_T:"T",NUMBERCHART_SHOW_TITLE:"Show Title",NUMBERCHART_TITLE_NAME:"Title",NUMBERCHART_VALUE_NAME:"Value",PROPERTY_EDITOR_PSPICKER_PREFIX:"Prefix",PROPERTY_EDITOR_PSPICKER_SUFFIX:"Suffix",PROPERTY_EDITOR_AXIS_VALUE_SCALE:"Axis Value Scale",}});sap.viz.extapi.env.Language.register({id:'dev',value: {VIZ_SWITCHBAR_BAR_COLUMN_CHARTS:"Bar & Column Charts",VIZ_SWITCHBAR_COLUMN_CHARTS:"Column Charts",VIZ_SWITCHBAR_LINE_CHARTS:"Line Charts",VIZ_SWITCHBAR_PIE_CHARTS:"Pie Charts",VIZ_SWITCHBAR_GEO_CHARTS:"Geographic Charts",VIZ_SWITCHBAR_SCATTER_CHARTS:"Scatter Charts",VIZ_SWITCHBAR_MAP_CHARTS:"Map Charts",VIZ_SWITCHBAR_TABLES:"Tables",VIZ_SWITCHBAR_OTHER_CHARTS:"Other Charts",VIZ_SWITCHBAR_NUMBER_CHARTS:"Point Charts",}});sap.viz.extapi.env.Language.register({id:'dev',value: {}});sap.viz.extapi.env.Language.register({id:'dev',value: {}});
});


define("sap/viz/controls/TemplateLoader", [], function(){
    (function() {
var axisColor = "#333333";
var backgroundProperty = {
  border : {
    left : {
      visible : false
    },

    right : {
      visible : false
    },

    top : {
      visible : false
    },

    bottom : {
      visible : false
    }
  }
};

var interactionProperty = {
  selectability : {
    mode : "none"
  },
  enableMouseOver : false,
  enableMouseOut : false,
  enableMouseMove : false,
  enableHover : false
};

var animationProperty = {
  dataLoading : false,
  dataUpdating : false,
  resizing : false
};

var multiAxisProperty = {
  color : axisColor,
  gridline : {
    color : axisColor
  },
  enableLabelSelection : false
};

var ghost_properties_vertical_bar = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_horizontal_bar = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  xAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};
var ghost_properties_horizontal_3dbar = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },
  zAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty,
  rotate : {
    enableRotate : false
  }
};
var ghost_properties_vertical_3dbar = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },
  zAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty,
  rotate : {
    enableRotate : false
  }
};

var ghost_properties_horizontal_stackedbar = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  xAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_vertical_stackedbar = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_horizontal_line = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  xAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  plotArea : {
    marker : {
      visible : false
    },
    animation : animationProperty,
    tooltipVisble : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_vertical_line = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  plotArea : {
    marker : {
      visible : false
    },
    animation : animationProperty
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_horizontal_combination = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  xAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  plotArea : {
    line : {
      marker : {
        visible : false
      }
    },
    tooltipVisble : false,
    animation : animationProperty
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_vertical_combination = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  plotArea : {
    line : {
      marker : {
        visible : false
      }
    },
    animation : animationProperty
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_bubble = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    gridline : {
      visible : false,
    },
    enableLabelSelection : false
  },
  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  sizeLegend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_scatter = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    gridline : {
      visible : false,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};
var ghost_properties_scattermatrix = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    gridline : {
      visible : false,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  multiLayout : {
    plotTitle : {
      visible : false
    },
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_heatmap = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_treemap = {
  plotArea : {
    animation : animationProperty
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_tagcloud = {
  plotArea : {
    animation : animationProperty
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_pie = {
  plotArea : {
    animation : animationProperty
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_donut = {
  plotArea : {
    animation : animationProperty
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_pie_with_depth = {
  plotArea : {
    animation : animationProperty
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty,
  rotate : {
    enableRotate : false
  }
};

var ghost_properties_donut_with_depth = {
  plotArea : {
    animation : animationProperty
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty,
  rotate : {
    enableRotate : false
  }
};

var ghost_properties_radar = {

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },

  plotArea : {
    polarAxis : {
      title : {
        visible : false
      }
    },
    valueAxis : {
      visible : true,
    },
    animation : animationProperty
  },

  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_vertical_boxplot = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_horizontal_boxplot = {
  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  xAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_vertical_waterfall = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_horizontal_waterfall = {
  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  xAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};

var ghost_properties_mekko = {
  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  xAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};
var ghost_properties_horizontal_mekko = {
  xAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  plotArea : {
    animation : animationProperty
  },

  yAxis : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  yAxis2 : {
    color : axisColor,
    label : {
      visible : true,
    },
    axisline : {
      visible : true,
    },
    enableLabelSelection : false
  },

  title : {
    visible : false
  },
  
  tooltip: {
    visible: false
  },  

  legend : {
    visible : false
  },
  rowAxis : multiAxisProperty,

  columnAxis : multiAxisProperty,

  background : backgroundProperty,
  interaction : interactionProperty
};
var ghost_properties_network = {
    plotArea : {
      animation : animationProperty,
      draggable: false,
      label:{
          visible:false
        }
    },
 
    title : {
      visible : false
    },
  
    tooltip: {
      visible: false
    },  
  
    legend : {
      visible : false
    },
  
    background : backgroundProperty,
    interaction : interactionProperty
};

var ghost_properties_tree = {																				
        plotArea : {
          animation : animationProperty,
          clickAble : false,
          label:{
              visible:false
            }
        },
     
        title : {
          visible : false
        },
  
        tooltip: {
          visible: false
        },  
      
        legend : {
          visible : false
        },
	    
        background : backgroundProperty,
        interaction : interactionProperty
    };

sap.viz.extapi.env.Template.register( {
      id : "incomplete_ghost",
      name : "Incomplete Ghost",
      version : "4.0.0",
      properties : {
        'viz/bar' : ghost_properties_horizontal_bar,
        'viz/image_bar' : ghost_properties_horizontal_bar,
        'viz/multi_bar' : ghost_properties_horizontal_bar,
        'viz/dual_bar' : ghost_properties_horizontal_bar,
        'viz/multi_dual_bar' : ghost_properties_horizontal_bar,
        'viz/column' : ghost_properties_vertical_bar,
        'viz/multi_column' : ghost_properties_vertical_bar,
        'viz/dual_column' : ghost_properties_vertical_bar,
        'viz/multi_dual_column' : ghost_properties_vertical_bar,
        'viz/stacked_bar' : ghost_properties_horizontal_stackedbar,
        'viz/multi_stacked_bar' : ghost_properties_horizontal_stackedbar,
        'viz/dual_stacked_bar' : ghost_properties_horizontal_stackedbar,
        'viz/multi_dual_stacked_bar' : ghost_properties_horizontal_stackedbar,
        'viz/100_stacked_bar' : ghost_properties_horizontal_stackedbar,
        'viz/multi_100_stacked_bar' : ghost_properties_horizontal_stackedbar,
        'viz/100_dual_stacked_bar' : ghost_properties_horizontal_stackedbar,
        'viz/multi_100_dual_stacked_bar' : ghost_properties_horizontal_stackedbar,
        'viz/stacked_column' : ghost_properties_vertical_stackedbar,
        'viz/multi_stacked_column' : ghost_properties_vertical_stackedbar,
        'viz/dual_stacked_column' : ghost_properties_vertical_stackedbar,
        'viz/multi_dual_stacked_column' : ghost_properties_vertical_stackedbar,
        'viz/100_stacked_column' : ghost_properties_vertical_stackedbar,
        'viz/multi_100_stacked_column' : ghost_properties_vertical_stackedbar,
        'viz/100_dual_stacked_column' : ghost_properties_vertical_stackedbar,
        'viz/multi_100_dual_stacked_column' : ghost_properties_vertical_stackedbar,
        'riv/cbar' : ghost_properties_vertical_bar,
        'viz/stacked_column' : ghost_properties_vertical_stackedbar,
        'viz/multi_stacked_column' : ghost_properties_vertical_stackedbar,

        'viz/3d_bar' : ghost_properties_horizontal_3dbar,
        'viz/3d_column' : ghost_properties_vertical_3dbar,

        'viz/combination' : ghost_properties_vertical_combination,
        'viz/horizontal_combination' : ghost_properties_horizontal_combination,
        'viz/dual_combination' : ghost_properties_vertical_combination,
        'viz/dual_horizontal_combination' : ghost_properties_horizontal_combination,

        'viz/boxplot' : ghost_properties_vertical_boxplot,
        'viz/horizontal_boxplot' : ghost_properties_horizontal_boxplot,

        'viz/waterfall' : ghost_properties_vertical_waterfall,
        'viz/horizontal_waterfall' : ghost_properties_horizontal_waterfall,

        'viz/stacked_waterfall' : ghost_properties_vertical_waterfall,
        'viz/horizontal_stacked_waterfall' : ghost_properties_horizontal_waterfall,

        'viz/line' : ghost_properties_vertical_line,
        'viz/multi_line' : ghost_properties_vertical_line,
        'viz/dual_line' : ghost_properties_vertical_line,
        'viz/multi_dual_line' : ghost_properties_vertical_line,
        'viz/horizontal_line' : ghost_properties_horizontal_line,
        'viz/multi_horizontal_line' : ghost_properties_horizontal_line,
        'viz/dual_horizontal_line' : ghost_properties_horizontal_line,
        'viz/multi_dual_horizontal_line' : ghost_properties_horizontal_line,

        'viz/area' : ghost_properties_vertical_line,
        'viz/multi_area' : ghost_properties_vertical_line,
        'viz/100_area' : ghost_properties_vertical_line,
        'viz/multi_100_area' : ghost_properties_vertical_line,
        'viz/horizontal_area' : ghost_properties_horizontal_line,
        'viz/multi_horizontal_area' : ghost_properties_horizontal_line,
        'viz/100_horizontal_area' : ghost_properties_horizontal_line,
        'viz/multi_100_horizontal_area' : ghost_properties_horizontal_line,

        'viz/pie' : ghost_properties_pie,
        'viz/multi_pie' : ghost_properties_pie,
        'viz/donut' : ghost_properties_donut,
        'viz/multi_donut' : ghost_properties_donut,

        'viz/pie_with_depth' : ghost_properties_pie_with_depth,
        'viz/donut_with_depth' : ghost_properties_donut_with_depth,

        'viz/bubble' : ghost_properties_bubble,
        'viz/multi_bubble' : ghost_properties_bubble,
        'viz/scatter' : ghost_properties_scatter,
        'viz/multi_scatter' : ghost_properties_scatter,
        'viz/scatter_matrix' : ghost_properties_scattermatrix,

        'viz/radar' : ghost_properties_radar,
        'viz/multi_radar' : ghost_properties_radar,

        'viz/tagcloud' : ghost_properties_tagcloud,

        'viz/heatmap' : ghost_properties_heatmap,
        'viz/treemap' : ghost_properties_treemap,
        'viz/mekko' : ghost_properties_mekko,
        'viz/100_mekko' : ghost_properties_mekko,
        'viz/horizontal_mekko' : ghost_properties_horizontal_mekko,
        'viz/100_horizontal_mekko' : ghost_properties_horizontal_mekko,
        
        'viz/network': ghost_properties_network,
        'viz/tree' : ghost_properties_tree,
        'viz/number' : {
            plotArea: {
                valuePoint: {
                    label: {
                        fontColor: '#000000'
                    }
                }
            }
        }
      }
    // properties

    });
})();(function(){
var axisColor = "#333333";

var backgroundProperty = {
    border:{
        left:{
            visible: false
        },
        
        right:{
            visible: false
        },
        
        top:{
            visible: false
        },
        
        bottom:{
            visible: false
        }
    }
};

var interactionProperty = {
    selectability : {
        mode : "none"
    },
    enableMouseOver : false,
    enableMouseOut : false,
    enableMouseMove : false
};

var animationProperty = {
    dataLoading : false,
    dataUpdating : false
};

var multiAxisProperty = {
    color:axisColor,
    gridline:{
      color: axisColor
    },
    label:{
      visible:false
    }
};
var ghostPropertiesGeoChart = {
    
    plotArea : {
        animation : animationProperty
    },
    
    title: {
        visible: false
    },
    
    legend: {
        visible: false
    },

    sizeLegend : {
        visible : false
    },
    
    background : backgroundProperty,
    interaction : interactionProperty,

    rowAxis:multiAxisProperty,
    columnAxis:multiAxisProperty,

    geoController : {
        disableInteraction : true
    }
};

sap.viz.extapi.env.Template.register({
     id : "incomplete_ghost",
     properties :{
        'viz/geobubble' : ghostPropertiesGeoChart,
        'viz/geopie' : ghostPropertiesGeoChart,
        'viz/choropleth' : ghostPropertiesGeoChart,
        'viz/multi_geobubble' : ghostPropertiesGeoChart,
        'viz/multi_choropleth' : ghostPropertiesGeoChart
    }
});
})();
var axisColor="#333333";var backgroundProperty={border:{left:{visible:false},right:{visible:false},top:{visible:false},bottom:{visible:false}}};var interactionProperty={selectability:{mode:"none"},enableMouseOver:false,enableMouseOut:false,enableMouseMove:false,enableHover:false};var incomplete_ghostFunnelEffect={title:{visible:false},legend:{visible:false},background:backgroundProperty,interaction:interactionProperty};var incomplete_ghostPCEffect={title:{visible:false},legend:{visible:false},background:backgroundProperty};sap.viz.extapi.env.Template.register({id:"incomplete_ghost",properties:{"viz/ext/pa/funnel":incomplete_ghostFunnelEffect,"viz/ext/pa/pc":incomplete_ghostPCEffect},css:"		.v-m-main .v-background-body{fill:;}		 svg {font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:12px;}		.axis line{fill: none;stroke: #333333;shape-rendering: crispEdges;}	    .axis path{fill: none;stroke: #333333;shape-rendering: crispEdges;}	   .axistext{fill: #333333; cursor : move;}	",});var axisColor="#333333";var backgroundProperty={border:{left:{visible:false},right:{visible:false},top:{visible:false},bottom:{visible:false}}};var interactionProperty={selectability:{mode:"none"},enableMouseOver:false,enableMouseOut:false,enableMouseMove:false,enableHover:false};var incomplete_ghostFunnelEffect={title:{visible:false},legend:{visible:false},background:backgroundProperty,interaction:interactionProperty};var incomplete_ghostPCEffect={title:{visible:false},legend:{visible:false},background:backgroundProperty};sap.viz.extapi.env.Template.register({id:"incomplete_ghost",properties:{"viz/ext/pa/funnel":incomplete_ghostFunnelEffect,"viz/ext/pa/pc":incomplete_ghostPCEffect},css:"		.v-m-main .v-background-body{fill:;}		 svg {font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:12px;}		.axis line{fill: none;stroke: #333333;shape-rendering: crispEdges;}	    .axis path{fill: none;stroke: #333333;shape-rendering: crispEdges;}	   .axistext{fill: #333333; cursor : move;}	",});
});

define('sap/viz/controls/chart/views/WarningView',
[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/managers/LangManager',
],
function($, OOUtil, VizUtils, UIControl, ChartConst, CSSConst, Event, LangManager){
    var NegativeValuesView = function(dom, uiconfig){
        NegativeValuesView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.NegativeValuesView";

        this._createChildren();
    };

    OOUtil.extend(NegativeValuesView, UIControl);

    NegativeValuesView.prototype._createChildren = function(){
        //create dialog
        this._confirmDialog$ = $(document.createElement('div'));
        this._confirmDialog$.addClass(CSSConst.CHART_PREFIX + 'warning');

        this._container$ = $(document.createElement('div'));
        $(document.createElement('div')).appendTo(this._container$).addClass(CSSConst.CHART_PREFIX + 'warning-separator');
        var title$ = $(document.createElement('div')).appendTo(this._container$).addClass(CSSConst.CHART_PREFIX + 'warning-title');
        var warningIcon$ = $(document.createElement('div')).appendTo(title$);
        warningIcon$.addClass(CSSConst.CHART_PREFIX + 'warning-title-icon');
        var titleText$ = $(document.createElement('span')).appendTo(title$).text(LangManager.get("VIZ_CHART_NEGATIVE_VALUES_WARN"));
        titleText$.addClass(CSSConst.CHART_PREFIX + 'warning-title-text');
        var info$ = $(document.createElement('div')).appendTo(this._container$).addClass(CSSConst.CHART_PREFIX + 'warning-info');
        var infoText$ = $(document.createElement('span')).appendTo(info$).text(LangManager.get("VIZ_CHART_NEGATIVE_VALUES_INFO"));
        infoText$.addClass(CSSConst.CHART_PREFIX + 'warning-info-text');

        var deleteIcon$ = $(document.createElement('div')).appendTo(this._container$);
        deleteIcon$.addClass(CSSConst.CHART_PREFIX + 'warning-delete-icon');
        deleteIcon$.addClass(CSSConst.COMMON_PREFIX + 'UVBSharedSprite');
        deleteIcon$.click($.proxy(function(e) {
            this.hide();
        }, this));
        this._confirmDialog$.append(this._container$);


        this._blockLayout$ = $(document.createElement('div'));
        this._blockLayout$.addClass(CSSConst.CHART_PREFIX + 'block-layer');
    };

    NegativeValuesView.prototype.show = function(type, properties, axis){
        this._visible = true;
        var left = this._dom$.offset().left + this._dom$.width() / 2;
        var top = this._dom$.offset().top + this._dom$.height() / 2;
        $(document.body).append(this._blockLayout$);
        $(document.body).append(this._confirmDialog$);
        this._confirmDialog$.css({
            position : "absolute",
            left : left - this._confirmDialog$.width() / 2,
            top : top - this._confirmDialog$.height() / 2
        });
        this._container$.css({
                "display" : "block"
            });
    };

    NegativeValuesView.prototype.hide = function() {
        this._visible = false;
        this._blockLayout$.detach();
        this._confirmDialog$.detach();
    };

    return NegativeValuesView;
}
);

// @formatter:off
define('sap/viz/controls/chart/views/View',[
    'jquery',
    'sap/viz/controls/LanguageLoader',
    'sap/viz/controls/TemplateLoader',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/MapProviderConst',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/DatasetUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/DropZone',
    'sap/viz/controls/chart/views/WarningView',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/AnalyticalType'
],

function($, LanguageLoader, TemplateLoader, GlobalConfig, ChartConst, MapProviderConst, FeedItemType, FeedUtils, LangManager,
    OOUtil, utils, ChartTypeUtil, DatasetUtil, TrellisUtils, VizUtils, CSSConst, UIControl,
    ChartEvent, DropZone, WarningView, ChartConfig, IncompleteGhost, FeedItem, AnalyticalType) {
// @formatter:on
    /**
     * View Class
     */
    var View = function(div, options, libFolderPath, chartModelProvider, helper) {
        View.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.View";

        this._div = div;
        this._chartHolder$ = null;
        this._chartLayer$ = null;
        this._descriptionLayer$ = null;
        this._loadingIcon$ = null;

        this._chartModelProvider = chartModelProvider;
        this._helper = helper;
        this._options = options;
        this._cssCache = null;
        this._libFolderPath = libFolderPath;
        // add "/" in the path  because geo don't handle in geo's code.
        var geoResourcePath = sap.viz.api.env.Resource.path("sap.viz.geo.geographicInfo.localStorage.resourcePath");
        // TODO: throw errors if no resource path set.
        this._geoResourcePath = geoResourcePath ? geoResourcePath : this._libFolderPath + "/sap.viz.geo/geocharts/resources/data/geo/";

        this._enableTrellis = true;
        this._enableMorphing = true;
        this._enablePropertyZone = false;

        this._hasChartInstance = false;

        this._size = {
            width : View.DEFAULT_VIZ_WIDTH,
            height : View.DEFAULT_VIZ_HEIGHT
        };

        //TODO: set padding to viz chart instance
        this._padding = 24;
        // chart instance
        this._chart = null;

        this._onEventMap = {};

        this._isFeedsValid = false;
        this._templateId = View.TEMPLATE_DEFAULT;


        // Reset activeElement, since chart will stopPropagation of mousedown
        this._mouseDownHandler = $.proxy(function(event) {
            // Add condition for activeElement.tagName because in IE10/IE11, executing blur() method will cause page to vanish if current activeElement is HTMLBodyElement.
            if (document.activeElement && document.activeElement.tagName && document.activeElement.tagName.toLowerCase() != "body" && !$.contains(this._dom$[0], document.activeElement) && $.contains(this._dom$.parent()[0], event.target)) {
                document.activeElement.blur();
            }
        }, this);
        $(document).on('mousedown', this._mouseDownHandler);

        this._changeTemplateFunc = $.proxy(this.changeTemplate, this);
        sap.viz.extapi.env.Template.addListener(this._changeTemplateFunc);
    };

    OOUtil.extend(View, UIControl);

    // Default viz size when create new visualization
    View.DEFAULT_VIZ_WIDTH = 380;
    View.DEFAULT_VIZ_HEIGHT = 280;

    // Template ID
    View.TEMPLATE_DEFAULT = "default";
    View.TEMPLATE_INCOMPLETE = "incomplete_ghost";
    View.TEMPLATE_EMPTY = "empty_ghost";

    View.prototype._createChildren = function() {
        this._createChartHolder();
        this._createChartLayer();
        this._createDescriptionLayer();
        this._createLoadingIcon();
        this._createWarningDialog();
    };

    View.prototype._createChartHolder = function() {
        this._chartHolder$ = $(document.createElement('div')).addClass([CSSConst.PREFIX + 'chart-holder', CSSConst.COMMON_PREFIX + 'scrollable'].join(' '));
        this._chartHolder$.appendTo($(this._div));
        this._chartHolder$.css({
            position : 'relative'
        });
    };

    View.prototype._createChartLayer = function() {
        this._chartLayer$ = $(document.createElement('div')).addClass(CSSConst.PREFIX + 'chart-layer');
        this._chartLayer$.appendTo(this._chartHolder$);
        this._chartLayer$.css({
            position : 'absolute'
        });
    };

    View.prototype._createDescriptionLayer = function() {
        this._descriptionLayer$ = $(document.createElement('div')).addClass(CSSConst.PREFIX + "chart-description");
        this._descriptionLayer$.css({
            position : 'absolute',
        });
        this._descriptionLayer$.appendTo(this._chartHolder$);
    };

    View.prototype._createLoadingIcon = function() {
        this._loadingIcon$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + "loading-icon");
        this._loadingIcon$.appendTo(this._chartHolder$);
        this._loadingIcon$.css({
            width : this._chartHolder$.width() + "px",
            height : this._chartHolder$.height() + "px"
        });
    };

    View.prototype._createWarningDialog = function() {
        this._warningView = new WarningView(this._chartHolder$.get(0), null);
    };

    View.prototype._showWarningDialog = function() {
        this._warningView.show();
    };

    View.prototype._createDropZone = function() {
        var chartDiv$ = this._chartLayer$;
        this._dropZone = new DropZone(chartDiv$.get(0), $.proxy(this._getFeedingZone, this), $.proxy(this._dropZoneFeedValidator, this));
        this._dropZone.addEventListener(DropZone.DROP_ITEM_EVENT, this._dropItemHandler, this);
    };

    View.prototype._getFeedingZone = function() {
        if (!this._chart) {
            return [];
        }

        try {
            return this._chart.feedingZone();
        } catch(error) {
            return [];
        }
    };

    /**
     * Check whether new feed can be added to chart model.
     * @param {Object} feedDef
     * @param {<sap.viz.controls.common.feeds.AnalysisObject>} analysisObject
     * @param {String} zoneName
     * @return {Boolean}
     */
    View.prototype._dropZoneFeedValidator = function(feedDef, analysisObject, zoneName) {
        var feedItems = this._chartModelProvider().explicitFeedingItems();

        var isMultiplier = feedDef.id === FeedUtils.MultiplierFeedingName;
        if (isMultiplier) {
            var type = this._chartModelProvider().type();
            if (!ChartTypeUtil.isMultipleChart(type) && ChartTypeUtil.supportMultiChart(type)) {
                var multiType = ChartTypeUtil.toMultiChartType(type);
                var multiFeedDefsMap = FeedUtils.getManifestFeedsMap(multiType);
                var supportMultiChart = FeedUtils.supportMultiChart(feedItems, multiFeedDefsMap);
                if (!supportMultiChart) {
                    return false;
                }
            }
        }

        return FeedUtils.canAddFeed(feedItems, feedDef, analysisObject, zoneName);
    };

    /**
     * Handle drop item.
     */
    View.prototype._dropItemHandler = function(e) {
        //create feed items
        this._dispatchEvent(new ChartEvent(ChartEvent.ANALYSIS_DROPPED, this, e.data));
    };

    View.DISPATCH_PROPERTY_EVENT = 'dispatchPropertyEvent';

    View.prototype.modelChanged = function(model, options) {

    };

    View.prototype._getMinSize = function() {
        return this._size;
    };

    View.prototype._setChartSize = function(width, height) {
        if (this._chart) {
            this._chart.size({
                width : width,
                height : height
            });
        }
    };

    View.prototype._updateChartSize = function(applyToChart) {
        //update chart size for trilles
        var minSize = this._getMinSize();
        var width = minSize.width;
        var height = minSize.height;
        var cssObj = {
            width : this._size.width + "px",
            height : this._size.height + "px",
            'overflow-x' : minSize['overflow-x'] || '',
            'overflow-y' : minSize['overflow-y'] || ''
        };

        if (applyToChart) {
            this._setChartSize(width, height);
        }
        this._chartLayer$.css({
            width : width + "px",
            height : height + "px",
            visibility : "visible",
            display : ''
        });

        this._chartHolder$.css(cssObj);
        return minSize;
    };
    /**
     * update customized description from user.
     */
    View.prototype.updateDescription = function(description) {
        this._destroyChartInstance();
        this._updateDescription(description, true);
    };
    /**
     * updata ghost description.
     */
    View.prototype._updateDescription = function(description, isCustomized) {
        //called from customer, respect description from customer, isCustomized is true, arguments.length is 2
        if (arguments.length <= 0) {
            var vizType = this._options.type;
            var feeding = this._options.feeding;
            if (!this._enableTrellis && ChartTypeUtil.isMultipleChart(vizType)) {
                description = LangManager.get('VIZ_CHART_TRELLIS_DISABLED_WARN');
            } else if (!this._isFeedsValid) {
                description = getDescription(vizType, feeding, this._chartModelProvider().feedingItems());
            }
        }

        if (description) {
            if (this._descriptionLayer$) {
                this._descriptionLayer$.show();
                this._descriptionLayer$.text(description);
            }
            this._showDescription();
        } else {
            if (this._descriptionLayer$) {
                this._descriptionLayer$.hide();
                this._descriptionLayer$.text("");
            }
            this._chartHolder$.css({
                'opacity' : ""
            });
        }

        this.hideLoadingIcon();
    };
    function isFeedingAddEnough (feeds, copyfeeding, type, isGeoDimension) {
        for (var i = 0; i < copyfeeding.length; i++) {
            if (copyfeeding[i].type() === type) {
                for (var j = 0; j < feeds.length; j++) {
                    if (copyfeeding[i].id() === feeds[j].id) {
                        //same feeds
                        if ((copyfeeding[i].id() !== "geoFeatures" && !isGeoDimension) || (copyfeeding[i].id() === "geoFeatures" && isGeoDimension)) {
                            if (!feeds[j].minStackedDims) {
                                //minStackedDims undifined
                                if (copyfeeding[i].values().length < feeds[j].min) {
                                    return false;
                                }
                            } else {
                                if (copyfeeding[i].values().length < feeds[j].minStackedDims) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    };

    function getDescription (type, feeding, copyfeeding) {
        var description = LangManager.get("VIZ_CHART_INCOMPLETE_DESCRIPTION");
        var feeds = FeedUtils.getVizFeeds(type);
        var onlyDimentions = true;
        var onlyMeasures = true;
        var i;
        for ( i = 0; i < feeds.length; i++) {
            if (!onlyMeasures && !onlyDimentions) {
                break;
            }
            if (onlyMeasures && feeds[i].type === FeedItemType.DIMENSION) {
                onlyMeasures = false;
                continue;
            }
            if (onlyDimentions && feeds[i].type === FeedItemType.MEASURE) {
                onlyDimentions = false;
            }
        }

        if (onlyDimentions) {
            description = LangManager.get("VIZ_CHART_DIMENSION_INCOMPLETE_DESCRIPTION");
            return description;
        }
        if (onlyMeasures) {
            description = LangManager.get("VIZ_CHART_MEASURE_INCOMPLETE_DESCRIPTION");
            return description;
        }

        if (!feeding) {
            return description;
        }
        var isMeasuresAddEnough = isFeedingAddEnough(feeds, copyfeeding, FeedItemType.MEASURE, false);
        var isDimensionsAddEnough = isFeedingAddEnough(feeds, copyfeeding, FeedItemType.DIMENSION, false);
        var isGeoAddEnough = isFeedingAddEnough(feeds, copyfeeding, FeedItemType.DIMENSION, true);

        if (isGeoAddEnough) {
            //not need to add Geography Dimension
            if (!isMeasuresAddEnough && isDimensionsAddEnough) {
                //add Measures
                description = LangManager.get("VIZ_CHART_MEASURE_INCOMPLETE_DESCRIPTION");
            }
            if (isMeasuresAddEnough && !isDimensionsAddEnough) {
                //add Dimentions
                description = LangManager.get("VIZ_CHART_DIMENSION_INCOMPLETE_DESCRIPTION");
            }
        } else {
            //need to add Geography Dimension
            if (isMeasuresAddEnough && isDimensionsAddEnough) {
                //add GeoDimentions
                description = LangManager.get("VIZ_CHART_GEO_INCOMPLETE_DESCRIPTION");
            }
            if (isMeasuresAddEnough && !isDimensionsAddEnough) {
                //add Dimentions
                description = LangManager.get("VIZ_CHART_DIMENSION_INCOMPLETE_DESCRIPTION");
            }
        }

        return description;
    };
    View.prototype._showDescription = function() {
        this._chartHolder$.css({
            'opacity' : ".3"
        });
        if (this._descriptionLayer$) {
            this._descriptionLayer$.css({
                width : this._size.width + "px",
                height : this._size.height / 2 + 50 + "px",
                color : "black",
                'font-size' : "28px",
                'text-align' : "center",
                'top' : this._size.height / 2 - 50 + "px",
                'word-wrap' : "break-word"
            });
        }
    };

    View.prototype._destroyChartInstance = function() {
        if (this._chart) {
            this._offEvent();
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:destroy_cvom_chart_instance');
            this._chart.destroy();
            this._chart = null;
            this._hasChartInstance = false;
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:destroy_cvom_chart_instance');
        }
    };

    View.prototype._updateDescriptionByOptions = function(options) {
        if (ChartTypeUtil.isEmptyData(options.type, options.data)) {
            //TODO: if table also need to show error message for empty data?
            var errorMsg = LangManager.get('VIZ_CHART_NO_DATA_MATCHES_YOUR_FILTER');
            this._updateDescription(errorMsg);

            options.data = IncompleteGhost.getDataset(options.type);
            this._chartLayer$.css('opacity', '0');
        } else {
            // update description for different type and feeding.
            this._updateDescription();

            this._updateChartSize(false);
            this._chartLayer$.css('opacity', '');
        }
    };

    View.prototype._createChartInstance = function() {

    };
    /**
     * Get current template id used in view.
     * If dataset is specified, will return the templated id for the dataset.
     */
    View.prototype.getTemplateId = function(dataset) {
        if (arguments.length > 0) {
            return this._templateId;
        } else {
            return sap.viz.api.env.Template.get();
        }
    };
    /** Get Template ID.
     * @param {JSON} dataset
     * return {String}
     */
    View.prototype._getTemplateId = function(dataset) {
        var templateId = sap.viz.api.env.Template.get();
        if (templateId !== View.TEMPLATE_INCOMPLETE && templateId !== View.TEMPLATE_EMPTY) {
            this._templateId = templateId;
        }

        this._isFeedsValid = !VizUtils.hasFakeData(dataset);
        templateId = this._isFeedsValid ? this._templateId : View.TEMPLATE_INCOMPLETE;
        return templateId;
    };
    /**
     * need to request data from server, show loading icon.
     */
    View.prototype.showLoadingIcon = function() {
        //leave loading icon show&hide behavior to app layer
        /*
         this._loadingIcon$.css({
         display : "block"
         });
         */
    };
    /**
     * Get data from server, need to hide loading icon.
     */
    View.prototype.hideLoadingIcon = function() {
        this._loadingIcon$.css({
            display : ""
        });
    };

    /**
     * Chart instance was created or not.
     */
    View.prototype.hasChartInstance = function() {
        return this._hasChartInstance;
    };

    /*
     * Could export or not
     */
    View.prototype.exportable = function() {
       return false;
    };

    /**
     * @param {width: Number, height: Number} size
     */
    View.prototype.size = function(size) {
        if (arguments.length > 0) {
            this._size = {
                width : size.width,
                height : size.height
            };

            this._updateChartSize(true);

            var descriptionDiv$ = this._descriptionLayer$;
            if (descriptionDiv$ !== null && descriptionDiv$.length > 0) {
                descriptionDiv$.css({
                    width : this._size.width + "px",
                    height : this._size.height / 2 + 50 + "px",
                    'top' : this._size.height / 2 - 50 + "px"
                });
            }

            this._loadingIcon$.css({
                width : this._size.width + "px",
                height : this._size.height + "px"
            });

            return this;
        }
        return {
            width : this._size.width,
            height : this._size.height
        };
    };

    /**
     * change template if we detect templateChanged event.
     */
    View.prototype.changeTemplate = function() {
        var templateId = sap.viz.api.env.Template.get();
        if (templateId !== View.TEMPLATE_INCOMPLETE && templateId !== View.TEMPLATE_EMPTY && templateId !== this._templateId) {
            var templateIdFromData = this._getTemplateId(this._options.data);
            if (templateIdFromData === templateId) {
                this._requestMorphing = true;
                this._createChartInstance();

                // return empty selection array
                this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
            }
        }
    };

    /**
     * Create ChartView with new options and templateId.
     * @param {Object} options
     */
    View.prototype.create = function(options) {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-create');
        if (options) {
            this._options = options;
            this._requestMorphing = true;

            var templateId = this._getTemplateId(options.data);
            this.__templateId = templateId;
            var _this = this;
            sap.viz.api.env.Template.set(templateId, function() {
                if (_this.__templateId === templateId) {
                    _this._createChartInstance();
                }
            });
            // return empty selection array
            this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
        }
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-create');
    };

    /**
     * Destroy the chart object.
     */
    View.prototype.destroy = function() {
        $(document).off('mousedown', this._mouseDownHandler);

        this.removeAllEventListeners();
        this._onEventMap = {};
        if (this._chart) {
            this._chart.destroy();
            this._chart = null;
        }
        $(this._div).empty();

        sap.viz.extapi.env.Template.removeListener(this._changeTemplateFunc);
    };
    /**
     * Update chart data.
     * @param {Object} data
     */
    View.prototype.data = function(data) {
        var errorMsg;
        try {
            if (arguments.length > 0) {
                this._options.data = data;
                if (this._chart) {
                    if (ChartTypeUtil.isEmptyData(this._options.type, this._options.data)) {
                        // send event to clean comments
                        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this));
                        this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));

                        errorMsg = LangManager.get('VIZ_CHART_NO_DATA_MATCHES_YOUR_FILTER');
                        this._updateDescription(errorMsg);

                        this._requestMorphing = false;
                        this._options.data = IncompleteGhost.getDataset(this._options.type);
                        this._chartLayer$.css('opacity', '0');
                    } else {
                        this._updateDescription();
                        this._chartLayer$.css('opacity', '');
                    }
                    this._chart.data(this._options.data);
                    return this;
                } else {
                    errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                    this._updateDescription(errorMsg);
                    throw errorMsg;
                }
            } else {
                // TODO Remove get method
                if (this._chart) {
                    return this._chart.data();
                } else {
                    return this._options.data;
                }
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to update chart data : " + error);
            //}
            errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + error;
            this._updateDescription(errorMsg);
            throw errorMsg;
        }
    };
    /**
     * Update chart feeding.
     * @param {Object} feeding
     */
    View.prototype.feeding = function(feeding) {
        if (arguments.length > 0) {
            this._options.feeding = feeding;
            return this;
        } else {
            return this._options.feeding;
        }
    };
    /**
     * Update chart css.
     * @param {Object} css
     */
    View.prototype.css = function(css) {
        if (arguments.length > 0) {
            this._options.css = css;
            return this;
        } else {
            return this._options.css;
        }
    };

    View.prototype.getValidProperties = function(properties, chartType) {
        return VizUtils.getValidProperties(properties, chartType);
    };

    /**
     * Update chart css.
     * @param {Object} css
     */
    View.prototype.properties = function(properties) {
        if (arguments.length > 0) {
            this._options.properties = properties;
            return this;
        } else {
            return this._options.properties;
        }
    };

    /**
     * Update chart with updated options.
     * @param {Object} updates
     */
    View.prototype.update = function(updates, disableMorphing) {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-update');
        if (!updates) {
            return;
        }
        if (!disableMorphing) {
            this._requestMorphing = true;
        }

        if (updates.css) {
            // update css cache according to new css
            this._updateCssCacheByNewCss(updates.css);
            this._options.css = updates.css;
        }
        if (updates.feeding) {
            this._options.feeding = updates.feeding;
        }
        if (updates.data) {
            this._options.data = updates.data;
        }
        if (updates.properties) {
            this._options.properties = updates.properties;
        }

        var errorMsg;
        try {
            if (this._chart) {

                //Show warning message
                var showNegativeValues = false;
                if (updates.properties && updates.properties.plotArea && updates.properties.plotArea.showNegativeValues === true) {
                    showNegativeValues = true;
                }
                if (!showNegativeValues && this._chart.type && DatasetUtil.hasNegativeMeasureValue(updates.data, this._chart.type)) {
                    this._showWarningDialog();
                }

                this._updateDescription();
                if (ChartTypeUtil.isEmptyData(this._options.type, this._options.data)) {
                    // send event to clean comments
                    this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this));
                    this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));

                    errorMsg = LangManager.get('VIZ_CHART_NO_DATA_MATCHES_YOUR_FILTER');
                    this._updateDescription(errorMsg);

                    this._requestMorphing = false;
                    updates.data = IncompleteGhost.getDataset(this._options.type);
                    updates.feeding = null;
                    this._chartLayer$.css('opacity', '0');
                } else {
                    this._chartLayer$.css('opacity', '');
                }

                this._updateChartSize(true);
                this._chart.update(updates);

                sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-update');
                return this;
            } else {
                errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                this._updateDescription(errorMsg);
                sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-update');
                throw errorMsg;
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to update chart : " + error);
            //}
            errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + error;
            this._updateDescription(errorMsg);
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-update');
            throw errorMsg;
        }
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-update');
    };
    /**
     * Listen the events sent by the host
     * @param {String} eventType
     * @param {Function} callback
     *
     */
    View.prototype.on = function(evtType, callback) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    this._chart.on(evtType, callback);
                }
            }

            this._onEventMap[evtType] = callback;
            return this;
        } catch (error) {
            //if (console) {
            //    console.log("Failed to add chart event callback : " + error);
            //}
            throw LangManager.get('VIZ_CHART_ADD_EVENT_FAILED') + error;
        }
    };
    /**
     * Turn off the event.
     * @param {String} eventType
     *
     */
    View.prototype.off = function(evtType) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    this._chart.off(evtType);
                }
            }
            delete this._onEventMap[evtType];
            return this;
        } catch (error) {
            //if (console) {
            //    console.log("Failed to remove chart event callback : " + error);
            //}
            throw LangManager.get('VIZ_CHART_REMOVE_EVENT_FAILED') + error;
        }
    };

    /**
     * Update chart selection.
     * @param {Object} points
     * @param {Object} options
     */
    View.prototype.selection = function(points, options) {
        try {
            if (this._chart) {
                //TODO: cvom bug, code will be removed if bug fixed
                if (this._options.type === ChartConst.TYPE_TREE
                    || this._options.type === ChartConst.TYPE_TABLE || this._options.type === ChartConst.TYPE_CROSSTAB) {
                    return null;
                }
                if (arguments.length >= 2) {
                    sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView_selection-set');
                    this._chart.selection(points, options);
                    sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView_selection-set');
                    return this;
                } else if (arguments.length === 1) {
                    if (utils.isArray(arguments[0])) {
                        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView_selection-set');
                        this._chart.selection(arguments[0]);
                        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView_selection-set');
                        return this;
                    } else {
                        return this._chart.selection(arguments[0]);
                    }
                } else {
                    return this._chart.selection();
                }
            } else {
                if (arguments.length >= 2) {
                    throw LangManager.get('VIZ_CHART_SELECTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                } else if (arguments.length === 1) {
                    if (utils.isArray(arguments[0])) {
                        throw LangManager.get('VIZ_CHART_SELECTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                    } else {
                        return null;
                    }
                } else {
                    return null;
                }
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to selection chart : " + error);
            //}
            throw LangManager.get('VIZ_CHART_SELECTION_FAILED') + error;
        }
    };

    View.prototype.feedingZone = function() {
        return [];
    };
    /**
     * Update chart description.
     * @param {Object} description
     */
    View.prototype.description = function(description) {
        try {
            if (arguments.length > 0) {
                if (this._chart) {
                    this._chart.description(description);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_DESCRIPTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                if (this._chart) {
                    return this._chart.description();
                } else {
                    return null;
                }
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to description chart : " + error);
            //}
            throw LangManager.get('VIZ_CHART_DESCRIPTION_FAILED') + error;
        }
    };
    /**
     * Trigger chart action.
     * @param {String} keyName
     * @param {Object} args
     */
    View.prototype.action = function(keyName, args) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    return this._chart.action(keyName, args);
                }
            } else {
                throw LangManager.get('VIZ_CHART_TRIGGER_ACTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to trigger chart action: " + error);
            //}
            throw LangManager.get('VIZ_CHART_TRIGGER_ACTION_FAILED') + error;
        }
    };

    /**
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * Return the chart JSON String.
     */
    View.prototype.exportViz = function(options) {
        if (this._chart) {
            var result = this._chart.toJSON(options);
            if (result) {
                result.properties = this._options.properties;
                this._updateCssOfOptions();
                result.css = this._options.css;
            }
            return result;
        } else {
            throw LangManager.get('VIZ_CHART_SERIALIZE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };

    View.prototype.loadViz = function(vizJSON) {
        this.create(vizJSON);
    };
    /*
     * Get/set enableTrellis.
     */
    View.prototype.enableTrellis = function(value) {
        if (arguments.length > 0) {
            this._enableTrellis = (value !== false);
            return this;
        } else {
            return this._enableTrellis;
        }
    };
    /*
     * Get/Set enableMorphing.
     */
    View.prototype.enableMorphing = function(value) {
        if (arguments.length > 0) {
            this._enableMorphing = (value !== false);
            return this;
        } else {
            return this._enableMorphing;
        }
    };

    /**
     * Get/set enablePropertyZone
     */
    View.prototype.enablePropertyZone = function(value) {
        if (arguments.length > 0) {
            if (this._enablePropertyZone !== value) {
                this._enablePropertyZone = (value === true);
            }
            return this;
        } else {
            return this._enablePropertyZone;
        }
    };

    View.prototype.getTitleByFeeding = function() {
        var newTitle = "";
        var measureNamesAry = [];
        var dimensionNamesAry = [];
        var feedItems = this._chartModelProvider().feedingItems();
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem/*FeedItem*/ = feedItems[i];
            // do not add the subtotal feed items to the title of the chart
            if( feedItem._id === FeedItemType.ROW_SUBTOTALS || feedItem._id === FeedItemType.COLUMNS_SUBTOTALS ) {
                continue;
            }
            var values = feedItem.values();
            var curFeedItemNamesAry = (feedItem.type() === FeedItemType.MEASURE) ? measureNamesAry : dimensionNamesAry;
            for (var j = 0; j < values.length; j++) {
                var value/*AnalysisObject*/ = values[j];
                if (value.id() === AnalyticalType.MND) {
                    continue;
                }
                var hierLevel/*HierarchyLevelObj*/ = value.selectedHierarchyLevel();
                var name = hierLevel ? hierLevel.name() : value.name();
                curFeedItemNamesAry.push(name);
            }
        }

        var measureNames = View._getNames(measureNamesAry);
        var dimensionNames = View._getNames(dimensionNamesAry);
        if (measureNames !== "" && dimensionNames !== "") {
            newTitle = utils.substitute(LangManager.get('VIZ_CHART_TITLE_TEXT_JOIN_BY'), measureNames, dimensionNames);
        } else if (measureNames !== "") {
            newTitle = measureNames;
        } else if (dimensionNames !== "") {
            newTitle = dimensionNames;
        }
        if (newTitle == "") {
            newTitle = " ";
        }
        return newTitle;
    };
    View._getNames = function(names) {
        var retName = "";
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            retName += name;
            if (i + 2 === names.length) {
                retName += " " + LangManager.get('VIZ_CHART_TITLE_TEXT_JOIN_AND') + " ";
            } else if (i + 2 < names.length) {
                retName += ", ";
            }
        }
        return retName;
    };

    View.prototype.resetProperties = function(properties, vizType) {
        return properties;
    };

    View.prototype.copyData = function(type, data) {
        return utils.clone(data);
    };

    View.prototype.buildFeedings = function(type, data, feeds) {
        return null;
    };

    View.prototype.supportUpdate = function(type) {
        return true;
    };

    View.prototype.setPropertyZones = function(propertyZones) {
    };

    View.prototype.FeedsToJSON = function(feeds) {
        return FeedItem.toJSON(feeds);
    };

    View.prototype.save = function() {
    };

    View.prototype.load = function(json, vizInstanceProps) {
    };

    View.prototype.FeedsFromJSON = function(valueJSON) {
        var feeds = FeedItem.fromJSON(valueJSON);
        return feeds;
    };

    View.prototype.exportToSVGString = function(option) {
        if (this._chart) {
            return this._chart.exportToSVGString(option);
        } else {
            throw LangManager.get('VIZ_CHART_EXPORTSVG_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };

    View.prototype.supportExportToSVG = function() {
        if (this._chart) {
            return this._chart.supportExportToSVG();
        } else {
            throw LangManager.get('VIZ_CHART_EXPORTSVG_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };

    View.prototype.getPropertyZones = function() {
        return [];
    };

    View.prototype.getZoneName = function(point) {
    };

    View.prototype.setAxisScale = function(axis) {
    };

    View.prototype.getDataPointsPosition = function(dataPoints){
        return [];
    };

    View.prototype.updateProperties = function(options) {
    };
    /**
     * update css map
     * @param {String} selector css selector
     * @param {String} propName css property name
     * @param {String} propValue css property value
     */
    View.prototype._updateCssCache = function(selector, propName, propValue) {
        if (!this._cssCache) {
            this._updateCssCacheByOptions();
        }
        this._cssCache = this._cssCache || {};
        this._cssCache[selector] = this._cssCache[selector] || {};
        this._cssCache[selector][propName] = propValue;
    };

    /**
     * Update css cache at first time
     */
    View.prototype._updateCssCacheByOptions = function() {
        if (this._options && this._options.css) {
            this._updateCssCacheByCssString(this._options.css);
        }
    };

    /**
     * update css map according to new css, update css cache by current options.css if cache is null
     * @param {String} css string sample: 'selector1{prop1:value1;prop2:value2} selector2{prop3:value3}'
     */
    View.prototype._updateCssCacheByNewCss = function(cssStr) {
        if (!this._cssCache) {
            this._updateCssCacheByOptions();
        }

        this._updateCssCacheByCssString(cssStr);
    };

    /**
     * update css map
     * @param {String} css string sample: 'selector1{prop1:value1;prop2:value2} selector2{prop3:value3}'
     */
    View.prototype._updateCssCacheByCssString = function(cssStr) {
        if (!cssStr) {
            return;
        }
        this._cssCache = this._cssCache || {};
        var cssAry = cssStr.split('}');

        var i, j, aCssStr, aCssAry = [], selector,
            propStr, propAry, aPropStr, aPropAry, propName, propValue;
        for (i = 0; i < cssAry.length; i++) {
            aCssStr = cssAry[i];
            aCssAry = aCssStr.split('{');
            if (aCssAry.length === 2) {
                selector = aCssAry[0].trim();
                propStr = aCssAry[1];
                propAry = propStr.split(';');
                this._cssCache[selector] = this._cssCache[selector] || {};
                for (j = 0; j < propAry.length; j++) {
                    aPropStr = propAry[j];
                    aPropAry = aPropStr.split(':');
                    if (aPropAry.length === 2) {
                        propName = aPropAry[0].trim();
                        propValue = aPropAry[1];
                        this._cssCache[selector][propName] = propValue;
                    }
                }
            }
        }
    };

    /**
     * update css content of this._options according to css cache
     */
    View.prototype._updateCssOfOptions = function() {
        if (!this._cssCache) {
            return;
        }
        var newCssText = "", sel, name, value;
        for (sel in this._cssCache) {
            if (this._cssCache.hasOwnProperty(sel)) {
                newCssText += ' '+ sel + '{';
                for (name in this._cssCache[sel]) {
                    if (this._cssCache[sel].hasOwnProperty(name)) {
                        newCssText += name + ':' + this._cssCache[sel][name] +';';
                    }
                }
                newCssText += '}';
            }
        }
        if (newCssText !== "") {
            this._options.css = this._options.css ? this._options.css + newCssText : newCssText;
        }
    };

    View.prototype.cssProperty = function(selector, propName, propValue) {
        if (this._chart) {
            if (arguments.length > 2) {
                this._updateCssCache(selector, propName, propValue);
                return this._chart.cssProperty(selector, propName, propValue);
            } else if (arguments.length === 2) {
                return this._chart.cssProperty(selector, propName);
            }
        }

        return this;
    };

    View.prototype.selectedPropertyZone = function(propertyZone) {
        if (this._chart) {
            if (arguments.length > 0) {
                return this._chart.selectedPropertyZone(propertyZone);
            } else {
                return this._chart.selectedPropertyZone();
            }
        }

        return this;
    };

    View.prototype.onEventMap = function(onEventMap) {
        if (arguments.length > 0) {
            this._onEventMap = onEventMap;
            return this;
        } else {
            return this._onEventMap;
        }
    };
    View.prototype._postVizProcess = function(options) {
    	if (!!this._chart.on) {
	        Object.keys(this._onEventMap).forEach($.proxy(function(key) {
	            var callback = this._onEventMap[key];
	            this._chart.on(key, callback);
	        }, this));
        }
    };
    View.prototype._offEvent = function() {
        if (!!this._chart.off) {
            Object.keys(this._onEventMap).forEach($.proxy(function(key) {
                var callback = this._onEventMap[key];
                this._chart.off(key, callback);
            }, this));
        }
    };

    View.prototype._getCssProperties = function(css, properties) {
        var result = null;
        for (var i = 0; i < properties.length; ++i) {
            var value = this._chart.cssProperty(css, properties[i]);
            if (value != null) {
                result = result || {};
                result[properties[i]] = value;
            }
        }
        return result;
    };

    View.prototype.queryProperties = function(options) {
        if (!options || !options.css) {
            return this.properties();
        }

        var properties = options.css.properties;
        var selector = options.css.selector;
        var result = null;
        if (utils.isArray(selector)) {
            for (var i = 0; i < selector.length; ++i) {
                result = this._getCssProperties(selector[i], properties);
                if (result) {
                    break;
                }
            }
        } else {
            result = this._getCssProperties(selector, properties);
        }
        return result;
    };

    View.prototype.updateProperties = function(options) {
        if (!options) {
            return;
        }
        if (options.css && options.css.selector) {
            var css;
            var selector = options.css.selector;
            var value = options.css.value;
            var a = value.split('font-size');
            if (a.length === 2) {
                // Add important tag to font-size, since the priority is higher than uxScale in ChartView
                a[1] = a[1].replace(/;/, '!important;');
                value = a.join('font-size');
            }

            if (utils.isArray(selector)) {
                css = "";
                for (var i = 0; i < selector.length; ++i) {
                    css += selector[i] + value;
                }
            } else {
                css = selector + value;
            }
            this._helper.vizCss(css);
        } else if (options.hasOwnProperty("properties")) {
            this._helper.vizProperties(options.properties);
        }
    };

    return View;
});

define('sap/viz/controls/common/property/VizPropertyZone',['sap/viz/controls/common/utils/Utils'], function(Utils) {
    var VizPropertyZone = function(type, context, extraContext, measureNames) {
        this._type = type;
        this._context = context;
        this._extraContext = extraContext;
        this._measureNames = measureNames;
        if (Utils.isArray(measureNames)) {
            this._dimensionContext = this._filterDimensionContext(measureNames.concat('_id'));
        }
    };

    VizPropertyZone.CHART_AREA = 'CHART_AREA';
    VizPropertyZone.CHART_TITLE = 'CHART_TITLE';
    VizPropertyZone.PLOT_AREA = 'PLOT_AREA';
    VizPropertyZone.GRID_LINE = 'GRID_LINE';
    VizPropertyZone.LEGEND = 'LEGEND';
    VizPropertyZone.X_AXIS = 'X_AXIS';
    VizPropertyZone.X_AXIS_TITLE = 'X_AXIS_TITLE';
    VizPropertyZone.Y_AXIS = 'Y_AXIS';
    VizPropertyZone.Y_AXIS_TITLE = 'Y_AXIS_TITLE';
    VizPropertyZone.DATA_POINT = 'DATA_POINT';
    VizPropertyZone.DATA_LABEL = 'DATA_LABEL';
    VizPropertyZone.LINE = 'LINE';

    VizPropertyZone.prototype.type = function(value) {
        if (arguments.length > 0) {
            this._type = value;
            return this;
        } else {
            return this._type;
        }
    };

    VizPropertyZone.prototype.context = function(value) {
        if (arguments.length > 0) {
            this._context = value;
            if (Utils.isArray(this._measureNames)) {
               this._dimensionContext = this._filterDimensionContext(this._measureNames.concat('_id'));
            }
            return this;
        } else {
            return this._context;
        }
    };

    VizPropertyZone.prototype.getDimensionContext = function () {
        if (this._selectAllData) {//data context is undefined, which means it is all data's context
            return undefined;
        }
        if (this._seriesData) {// seriesData can be an empty object if no binding in regionColor
            for (var i in this._seriesData) {
                if (this._seriesData.hasOwnProperty(i)) {
                    return this._seriesData;
                }
            }
            return undefined;
        }
        return this._dimensionContext;
    };

    VizPropertyZone.prototype._filterDimensionContext = function(array) {
        var ret;
        for (var key in this._context) {
            if (!ret) {
                ret = {};
            }
            var isDimension = true;
            for (var i = 0; i < array.length; i++) {
                if (key === array[i]) {
                    array.splice(i, 1);
                    isDimension = false;
                    break;
                }
            }
            if (!isDimension) {
                continue;
            }
            ret[key] = this._context[key];
        }
        return ret;
    };
    
    VizPropertyZone.prototype.extraContext = function(value) {
        if (arguments.length > 0) {
            this._extraContext = value;
            return this;
        } else {
            return this._extraContext;
        }
    };

    VizPropertyZone.prototype.stackContext = function(value) {
        if (arguments.length > 0) {
            this._stackContext = value;
            return this;
        } else {
            return this._stackContext;
        }
    };

    VizPropertyZone.prototype.seriesContext = function(series) {
        if (arguments.length > 0) {
            this._seriesData = series;
            return this;
        } else {
            return this._seriesData;
        }
    };
    
    VizPropertyZone.prototype.selectAllData = function(selectAllData) {
        if (arguments.length > 0) {
            this._selectAllData = selectAllData;
            return this;
        } else {
            return this._selectAllData;
        }
    };

    return VizPropertyZone;
});

// @formatter:off
define('sap/viz/controls/chart/views/ChartView',[
    'jquery',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/MapProviderConst',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/DatasetUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/chart/views/AxisSizeAdjustHelper',
    'sap/viz/controls/chart/views/AxisSplitter',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/DataPointFinder',
    'sap/viz/controls/chart/views/DropZone',
    'sap/viz/controls/chart/views/EditAxisView',
    'sap/viz/controls/chart/morph/VizMorpher',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/chart/views/PropertyZone',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/property/VizPropertyZone'
],
function($, GlobalConfig, ChartConst, MapProviderConst, FeedItemType, FeedUtils, LangManager,
    OOUtil, utils, ChartTypeUtil, DatasetUtil, TrellisUtils, VizUtils, CSSConst,
    AxisSizeAdjustHelper, AxisSplitter, ChartEvent, DataPointFinder, DropZone, EditAxisView,
    VizMorpher, ChartConfig, PropertyZone, View, IncompleteGhost, AnalyticalType, VizPropertyZone) {
// @formatter:on
    /**
     * ChartView View represent a CVOM chart.
     */
    var ChartView = function(div/*HTMLDivElement*/, options, libFolderPath, chartModelProvider) {
        ChartView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.ChartView";

        this._morphingLayer$ = null;
        this._supportMorphing = true;
        this._requestMorphing = false;
        // viz morpher
        this._vizMorpher = null;

        options = options||{};
        this._enablePropertyZone = false;
        this._useBuiltInPropertyZoneInteraction = options.useBuiltInPropertyZoneInteraction;
        this._useDefaultChartSizeForTrellis = options.useDefaultChartSizeForTrellis;
        this._createChildren();
    };

    OOUtil.extend(ChartView, View);

    var SupportedZoneNames = ["legend", "sizeLegend"];

    ChartView.prototype._createChildren = function() {
        this._createChartHolder();
        this._createChartLayer();

        this._editAxisView = new EditAxisView(this._chartHolder$.get(0), null);
        this._editAxisView.addEventListener(EditAxisView.AxisScaleChanged, this._axisScalerChangedHandler, this);

        this._axisSplitter = new AxisSplitter(this._chartHolder$.get(0), $.proxy(this.properties, this), $.proxy(this._getPropertyZone, this));
        this._axisSplitter.addEventListener(AxisSplitter.AxisSplitChanged, this._axisSplitChangedHandler, this);

        this._morphingLayer$ = $(document.createElement('div')).addClass(CSSConst.PREFIX + 'morphing-layer');
        this._morphingLayer$.appendTo(this._chartHolder$);
        this._morphingLayer$.css({
            position : 'absolute'
        });
        this._createDescriptionLayer();
        this._createLoadingIcon();
        this._createWarningDialog();

        this._createDropZone();
        var chartDiv$ = this._chartLayer$;

        this._propertyZone = new PropertyZone(chartDiv$.get(0), $.proxy(this._getPropertyZone, this));
        this._propertyZone.addEventListener(PropertyZone.SELECT_ZONE, $.proxy(function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.SELECT_PROPERTY_ZONE, this, e.data));
        }, this));

        this._uxScaleIndex = null;
    };

    ChartView.prototype.getZoneName = function(point) {
        if (!point || !this._chart) {
            return null;
        }
        var zoneName = this._getZoneName(point);
        if (zoneName) {
            if (VizUtils.isValueAxis(this._chart.type, zoneName)) {
                return zoneName;
            } else {
                for (var i = 0; i < SupportedZoneNames.length; i++) {
                    if (SupportedZoneNames[i] === zoneName) {
                        return zoneName;
                    }
                }
            }
        }
        return null;
    };

    ChartView.prototype._getZoneName = function(point) {
        var zones = this._getPropertyZone();
        for (var i = 0; i < zones.length; i++) {
            var areas = zones[i].bound;
            var name = zones[i].name;
            for (var n = 0; n < areas.length; n++) {
                if (areas[n][0][0] < point.x && areas[n][1][0] > point.x && areas[n][1][1] < point.y && areas[n][2][1] > point.y) {
                    return name;
                }
            }
        }
        return null;
    };

    ChartView.prototype.setAxisScale = function(axis) {
        if (this._chart) {
            var type = this._chart.type;
            this._editAxisView.show(type, this._chart.properties(), axis);
        }
    };

    ChartView.prototype._axisScalerChangedHandler = function(e) {
        if (!this._chart) {
            return;
        }
        this._helper.vizProperties(e.data);
    };

    ChartView.prototype._axisSplitChangedHandler = function(e) {
        var categoryScaleProperties = AxisSizeAdjustHelper(this._chart, e.data.axisName, e.data.offset);
        if (categoryScaleProperties) {
            this._helper.vizProperties(categoryScaleProperties);
        }
    };

    ChartView.prototype._titleText = function(value) {
        try {
            if (this._chart) {
                if (!this.properties().title) {
                    return this;
                }
                if (arguments.length > 0) {
                    if (value != this.properties().title.text)
                        this._dispatchEvent(new ChartEvent(ChartEvent.TITLE_CHANGED, this, {
                            text : value
                        }));
                    return this;
                } else {
                    var titleText = this.properties().title.text;
                    return titleText;
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if(console) {
            //  	console.log("Failed to update chart data : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + error;
        }
    };

    ChartView._ZoneMap = {
        xAxis : {
            text : "VIZ_COMMON_XAXIS"
        },
        xAxis2 : {
            text : "VIZ_COMMON_XAXIS"
        },
        yAxis : {
            text : "VIZ_COMMON_YAXIS",
            rotate : true
        },
        yAxis2 : {
            text : "VIZ_COMMON_YAXIS",
            rotate : true
        }
    };
    ChartView._ZoneMap[FeedUtils.trillisFeeds.column.id] = {
        text : "VIZ_COMMON_COLUMNS"
    };
    ChartView._ZoneMap[FeedUtils.trillisFeeds.row.id] = {
        text : "VIZ_COMMON_ROWS",
        rotate : true
    };

    /**
     * Check whether zone is null or the bound size is empty
     * @param {Object} zone
     * @returns {Boolean}
     */
    ChartView.prototype._isEmptyZone = function(zone) {
        if (!zone || !zone.bound) {
            return true;
        }

        var area = zone.bound[0];
        if (!area) {
            return true;
        }

        var width = area[2][0] - area[0][0];
        var height = area[2][1] - area[0][1];
        if (width < 1 || height < 1) {
            return true;
        }
        return false;
    };
    /**
     * update text info
     * @param {Object} zone
     */
    ChartView.prototype._updateTextInfo = function(zone) {
        if (!zone) {
            return;
        }
        //update text and rotate
        for (var n = 0; n < zone.length; n++) {
            var item = ChartView._ZoneMap[zone[n].name];
            if (item) {
                zone[n].text = LangManager.get(item.text);
                zone[n].rotate = item.rotate;
            }
        }
    };

    /**
     * Get title zone for chart instance.
     * @returns {Array}
     */
    ChartView.prototype.getTitleZone = function() {
        if (!this._chart) {
            return [];
        }

        var thisChartId = this._chart.type;

        var zone;
        try {
            zone = this._chart.propertyZone();
        } catch(error) {
            return [];
        }
        var titleZone = [];
        for (var i = 0; i < zone.length; i++) {
            if (zone[i].name == 'title') {
                titleZone = zone[i].bound[0];
                break;
            }
        }
        return titleZone;
    };
    /**
     * Get feeding zone for chart instance. If multi does not exist, we will use chart padding to create them.
     * @returns {Array}
     */
    ChartView.prototype._getFeedingZone = function() {
        if (!this._chart) {
            return [];
        }

        var thisChartId = this._chart.type;

        var zone;
        try {
            zone = this._chart.feedingZone();
        } catch(error) {
            return [];
        }

        if (!ChartTypeUtil.supportMultiChart(thisChartId)) {
            this._updateTextInfo(zone);
            return zone;
        }

        var isMultiChart = ChartTypeUtil.isMultipleChart(thisChartId);
        var column = null;
        var row = null;

        if (isMultiChart) {
            for (var i = zone.length - 1; i >= 0; i--) {
                var zoneName = zone[i].name;
                if (zoneName === FeedUtils.MultiplierFeedingName) {
                    column = {
                        name : FeedUtils.ColumnsFeedingName,
                        bound : [zone[i].bound[0]],
                        feedDef : zone[i].feedDef
                    };
                    row = {
                        name : FeedUtils.RowsFeedingName,
                        bound : [zone[i].bound[1]],
                        feedDef : zone[i].feedDef
                    };
                    zone.splice(i, 1);
                } else if (zoneName !== "mainPlot" && zoneName !== "legend") {
                    if (TrellisUtils.providerName(thisChartId) === TrellisUtils.MULTIPLE) {
                        //For multi chart, we use mainPlot&legend
                        zone.splice(i, 1);
                    }
                }
            }
        }
        //remove row and column if disable trellis by uiconfig
        if (!this._enableTrellis) {
            this._updateTextInfo(zone);
            return zone;
        }

        //check multiXAxis&multiYAxis size
        if (this._isEmptyZone(column)) {
            column = null;
        }
        if (this._isEmptyZone(row)) {
            row = null;
        }

        var padding = this._padding;
        var feedDef = {
            "id" : FeedUtils.MultiplierFeedingName,
            "name" : "ChartView Multiplier",
            "type" : FeedItemType.DIMENSION,
            "min" : 1,
            "max" : 1,
            "aaIndex" : 1,
            "acceptMND" : 0
        };
        var bound;
        if (!column) {
            //add multiXAxis zone in chart top padding
            bound = [[[padding, 0], [this._size.width - padding, 0], [this._size.width - padding, padding], [0, padding]]];
            column = {
                "name" : FeedUtils.ColumnsFeedingName,
                "feedDef" : [feedDef],
                "bound" : bound
            };
        }
        if (!row) {
            //add multiYAxis zone in chart left padding
            bound = [[[0, padding], [padding, padding], [padding, this._size.height - padding], [0, this._size.height - padding]]];
            row = {
                "name" : FeedUtils.RowsFeedingName,
                "feedDef" : [feedDef],
                "bound" : bound
            };
        }

        zone.push(column, row);
        this._updateTextInfo(zone);
        return zone;
    };

    /**
     * update morphing to use current viz as base
     */
    ChartView.prototype._updateMorphingSnapshot = function() {
        if (this._canMorphing() && this._hasChartInstance && this._vizMorpher && !this._vizMorpher.isPlaying()) {
            this._vizMorpher.morphVizType(null, -1);
        }
    };
    /**
     * Set target.path.property to value if property is not specified.
     */
    ChartView.prototype._setDefaultValue = function(target, path, property, value) {
        var properties = path.split('.');
        var result = target;
        for (var i = 0; i < properties.length; i++) {
            result[properties[i]] = result[properties[i]] || {};
            result = result[properties[i]];
        }
        if (!result.hasOwnProperty(property)) {
            result[property] = value;
        }
    };
    /**
     * Apply default properties to options.properties.
     */
    ChartView.prototype._applyDefaultProperties = function(options) {
        options = options || {};
        options.properties = options.properties || {};
        this._setDefaultValue(options.properties, 'background.border.left', 'visible', false);
        this._setDefaultValue(options.properties, 'background.border.top', 'visible', false);
        this._setDefaultValue(options.properties, 'background.border.right', 'visible', false);
        this._setDefaultValue(options.properties, 'background.border.bottom', 'visible', false);

        return options;
    };
    function getDimCount(data, feedItemValues, mesuareValuesCount) {
        if (feedItemValues == null || feedItemValues.length == 0) {
            return 1;
        }

        var valueTag = [];
        var result = 1;
        var index = 0;
        var hasMND = false;
        for (var n = 0; n < feedItemValues.length; n++) {
            if (feedItemValues[n].type() === AnalyticalType.HIERARCHY) {
                var hierarchyLevels = feedItemValues[n].hierarchyLevels();
                for (var j = 0; j < hierarchyLevels.length; j++) {
                    if (hierarchyLevels[j].selected()) {
                        break;
                    }
                    index++;
                }
            } else if (feedItemValues[n].type() === AnalyticalType.MND) {
                hasMND = true;
                continue;
            }
            if (index < data.length) {
                var values = data[index].values;
                valueTag[n] = {};
                var itemCount = 0;
                for (var i = 0; i < values.length; i++) {
                    if (!valueTag[n].hasOwnProperty(values[i])) {
                        valueTag[n][values[i]] = true;
                        itemCount++;
                    }
                }
                result *= itemCount;
                index++;
            }
        }

        if (hasMND) {
            result *= mesuareValuesCount;
        }

        return result;
    };
    ChartView.prototype._getRowColumn = function(analysisAxis, mesuareValuesCount) {
        var result = {
            row : 1,
            column : 1
        };

        if (!analysisAxis || analysisAxis.length === 0) {
            return result;
        }

        var multiplierAxis = analysisAxis[0].data;
        if (!multiplierAxis || multiplierAxis.length === 0) {
            return result;
        }

        var rowCount = 0;
        var feedItemValuesRow = null;
        var feedItemsValuesColumn = null;
        var feedItems = this._chartModelProvider().feedingItems();
        for (var i = 0; i < feedItems.length; i++) {
            if (feedItems[i].id() === FeedUtils.RowsFeedingName) {
                feedItemValuesRow = feedItems[i].values();
                for (var j = 0; j < feedItemValuesRow.length; j++) {
                    if (feedItemValuesRow[j].type() === AnalyticalType.HIERARCHY) {
                        var hierarchyLevels = feedItemValuesRow[j].hierarchyLevels();
                        for (var k = 0; k < hierarchyLevels.length; k++) {
                            rowCount++;
                            if (hierarchyLevels[k].selected()) {
                                break;
                            }
                        }
                    } else if (feedItemValuesRow[j].type() !== AnalyticalType.MND) {
                        rowCount++;
                    }
                }
            } else if (feedItems[i].id() === FeedUtils.ColumnsFeedingName) {
                feedItemsValuesColumn = feedItems[i].values();
            }
        }

        result.row = getDimCount(multiplierAxis.slice(0, rowCount), feedItemValuesRow, mesuareValuesCount);
        result.column = getDimCount(multiplierAxis.slice(rowCount), feedItemsValuesColumn, mesuareValuesCount);

        return result;
    };

    ChartView.prototype._getMinSize = function() {
        var width = this._size.width;
        var height = this._size.height;
        var options = this._options;
        var result = {
            width : width,
            height : height
        };
        if (!this._useDefaultChartSizeForTrellis && ChartTypeUtil.isMultipleChart(options.type) && TrellisUtils.providerName(options.type) === TrellisUtils.MULTIPLE) {
            if (!options.data || !options.data.data()) {
                //Do not update size if we use default data
                return result;
            }

            var measureValuesGroup = options.data.data().measureValuesGroup;
            var mesuareValuesCount = 0;
            for (var i = 0; i < measureValuesGroup.length; i++) {
                mesuareValuesCount += measureValuesGroup[i].data.length;
            }

            var rowColumn = this._getRowColumn(options.data.data().analysisAxis, mesuareValuesCount);
            //For Multi-chart, min size for one cell is 200*200.
            var minWidth = rowColumn.column * 200;
            var minHeight = rowColumn.row * 200;
            if (width < minWidth) {
                width = minWidth;
                result['overflow-x'] = 'auto';
            }
            if (height < minHeight) {
                height = minHeight;
                result['overflow-y'] = 'auto';
            }
        }
        result.width = width;
        result.height = height;
        return result;
    };

    ChartView.prototype._updateChartSize = function(applyToChart) {
        //update chart size for trilles
        var minSize = ChartView.superclass._updateChartSize.apply(this, arguments);
        var width = minSize.width;
        var height = minSize.height;
        this._morphingLayer$.css({
            width : width + "px",
            height : height + "px",
            display : 'none'
        });

        this._updateUXScale();
        return minSize;
    };
    ChartView.prototype.updateDescription = function(description) {
        ChartView.superclass.updateDescription.apply(this, arguments);
        if (this._vizMorpher) {
            this._vizMorpher.showMorphing(false, true);
        }
    };

    ChartView.prototype._destroyChartInstance = function() {
        ChartView.superclass._destroyChartInstance.apply(this, arguments);
        this._axisSplitter.reset();
    };
    /**
     * create chart instance
     */
    ChartView.prototype._createChartInstance = function() {
        this._hasChartInstance = false;

        var options = this._options;
        options = this._applyDefaultProperties(options);
        if (this._useBuiltInPropertyZoneInteraction === true) {
            options.properties = options.properties || {};
            options.properties.interaction = options.properties.interaction || {};
            options.properties.interaction.selectability = options.properties.interaction.selectability || {};
            options.properties.interaction.selectability.plotLassoSelection = false;
            options.properties.interaction.selectability.mode = "none";

            options.properties.tooltip = options.properties.tooltip || {};
            options.properties.tooltip.visible = false;
        }

        var chartDiv$ = this._chartLayer$;
        var morphingDiv$ = this._morphingLayer$;
        var descriptionDiv$ = this._descriptionLayer$;
        var chartHolderDiv$ = this._chartHolder$;

        var vizType = options.type;

        if (vizType === ChartConst.TYPE_TREE || vizType === ChartConst.TYPE_NETWORK || vizType === ChartConst.TYPE_FUNNEL || vizType === ChartConst.TYPE_PC || ChartTypeUtil.supportAnimation(vizType)) {
            this._supportMorphing = false;
        } else if (!ChartTypeUtil.isBuildInType(vizType)) {
            this._supportMorphing = false;
        } else {
            this._supportMorphing = true;
        }
        if (ChartTypeUtil.isEmptyData(vizType, options.data)) {
            this._requestMorphing = false;
        }
        if (this._canMorphing() && !this._vizMorpher) {
            this._vizMorpher = new VizMorpher(chartDiv$.get(0), morphingDiv$.get(0));
        }
        // take current morphing snapshot
        this._updateMorphingSnapshot();

        this._destroyChartInstance();

        //TODO: make sure the data is valid.
        if (options.data === null || options.data === undefined) {
            //invalid data
            if (this._canMorphing() && this._vizMorpher) {
                this._vizMorpher.morphVizType(null, -1);
            }
            return;
        }

        var showNegativeValues = false;
        if (options.properties && options.properties.plotArea && options.properties.plotArea.showNegativeValues === true) {
            showNegativeValues = true;
        }
        if (!showNegativeValues && DatasetUtil.hasNegativeMeasureValue(options.data, vizType)) {
            this._showWarningDialog();
        }

        if (!options.properties) {
            options.properties = {};
        }
        // TODO change to jQuery.extend()
        if (this._canMorphing() === true) {
            if (!options.properties.plotArea) {
                options.properties.plotArea = {};
            }
            if (!options.properties.plotArea.animation) {
                options.properties.plotArea.animation = {};
            }
            options.properties.plotArea.animation.dataLoading = false;
            options.properties.plotArea.animation.dataUpdating = false;
            options.properties.plotArea.animation.resizing = false;
        }

        try {
            if (!this._enableTrellis && ChartTypeUtil.isMultipleChart(vizType)) {
                this._propertyZone.updateZone(false);
                return;
            }

            if (ChartTypeUtil.supportAnimation(vizType)) {
                if (!options.properties.plotArea) {
                    options.properties.plotArea = {};
                }
                if (!options.properties.plotArea.animation) {
                    options.properties.plotArea.animation = {};
                }
                options.properties.plotArea.animation.dataLoading = options.properties.plotArea.animation.dataLoading === false ? false:true;
                options.properties.plotArea.animation.dataUpdating = options.properties.plotArea.animation.dataUpdating === false ? false:true;
                options.properties.plotArea.animation.resizing = options.properties.plotArea.animation.resizing === false ? false:true;
                if (!options.properties.geoContainer) {
                    options.properties.geoContainer = {};
                }
            }
            // send chart changing event
            this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this, vizType));
            this._updateDescriptionByOptions(options);
            var properties = options.properties;

            this._chart = sap.viz.api.core.createViz({
                type : vizType,
                data : options.data,
                feeding : options.feeding,
                properties : properties,
                css : options.css,
                events : options.events,
                container : chartDiv$.get(0)
            });
            this._postVizProcess(options);
        } catch (error) {
            //if(console) {
            //  	console.log("Failed to create chart : " + error);
            //  }
            var errorMsg = LangManager.get('VIZ_CHART_CREATE_CHART_FAILED') + error;
            this._propertyZone.updateZone(false);
            if (!FeedUtils.getVizFeeds(vizType)) {
                this._updateDescription(utils.substitute(LangManager.get("VIZ_CHART_INVALID_VIZ_TYPE"), vizType));
            } else {
                this._updateDescription(errorMsg);
            }
            // clean up
            chartDiv$.html("");
            this._chart = null;
            this._hasChartInstance = false;
            throw errorMsg;
        }
    };
    /**
     * Post process after create viz instance.
     */
    ChartView.prototype._postVizProcess = function(options) {
        ChartView.superclass._postVizProcess.apply(this, arguments);

        var triggerCVOM = $.proxy(function(type, data) {
            this._dispatchEvent(new ChartEvent(ChartEvent.TRIGGER_CVOM_EVENT, this, {
                type : type,
                data : data
            }));
        }, this);

        if (this._canMorphing() && this._vizMorpher && this._requestMorphing) {
            this._vizMorpher.showMorphing(true, false);
        }
        this._chart.on("lassoStart.chartview", $.proxy(function() {
            this._axisSplitter.deactive();
        }, this));
        this._chart.on("lassoEnd.chartview", $.proxy(function() {
            this._axisSplitter.active();
        }, this));
        this._chart.on("initialized.chartview", $.proxy(function(data) {
            if (this._canMorphing() && this._requestMorphing && this._hasChartInstance && this._vizMorpher) {
                this._requestMorphing = false;
                sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:morphing');
                this._vizMorpher.morphVizType(options.type, 800, function() {
                    sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:morphing');
                });
            }
            if (this._isFeedsValid) {
                this._axisSplitter.init(options.type);
            }
            var enablePropertyZone = this._enablePropertyZone && this._isFeedsValid;
            this._propertyZone.updateZone(enablePropertyZone);

            triggerCVOM("initialized", data);
        }, this));

        var _this = this;
        this._chart.on("selectData.chartview", function(selectData) {
            //TODO CVOM's bug, wait for their fix, then delete if
            if (_this._options.type !== ChartConst.TYPE_NETWORK) {
                // return current complete selection.
                _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));

                triggerCVOM("selectData", selectData);
            }
        });

        this._chart.on("deselectData.chartview", function(deselectData) {
            //TODO CVOM's bug, wait for their fix, then delete if
            if (_this._options.type !== ChartConst.TYPE_NETWORK && _this._options.type !== ChartConst.TYPE_TREE) {
                // return current complete selection.
                _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));

                triggerCVOM("deselectData", deselectData);
            }
        });

        this._chart.on("showTooltip.chartview", function(data) {
            triggerCVOM("showTooltip", data);
        });

        this._chart.on("hideTooltip.chartview", function(data) {
            triggerCVOM("hideTooltip", data);
        });

        this._hasChartInstance = true;

        this._uxScaleIndex = null;
        this._updateUXScale();

        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGED, this, this._chart));
    };

    ChartView.prototype.getTemplateId = function(dataset) {
        var data = dataset || this.data();
        if (VizUtils.hasFakeData(data)) {
            return View.TEMPLATE_INCOMPLETE;
        } else {
            return this._templateId;
        }

    };

    ChartView.prototype.size = function(size) {
        if (arguments.length > 0) {
            ChartView.superclass.size.apply(this, arguments);

            if (this._dropZone) {
                this._dropZone.size(this._size);
            }

            this._propertyZone.size(this._size);

            // take current morphing snapshot,
            // this is workaround, may need to update snapshot in viz initialized.* event,
            // and check whether the sequence is after resize
            setTimeout($.proxy(this._updateMorphingSnapshot, this), 500);

            return this;
        } else {
            return ChartView.superclass.size.apply(this, arguments);
        }
    };

    /**
     * Update chart data.
     * @param {Object} data
     */
    ChartView.prototype.data = function(data, disableMorphing) {
        if (arguments.length > 0) {
            if (!disableMorphing) {
                this._requestMorphing = true;
            }
        }
        return ChartView.superclass.data.apply(this, arguments);
    };
    /**
     * Update chart feeding.
     * @param {Object} feeding
     */
    ChartView.prototype.feeding = function(feeding, disableMorphing) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    if (!disableMorphing) {
                        this._requestMorphing = true;
                    }
                    this._chart.feeding(feeding);
                    return this;
                } else {
                    return this._chart.feeding();
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if(console) {
            //  	console.log("Failed to update chart feeding : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + error;
        }
    };
    /**
     * Update chart css.
     * @param {Object} css
     */
    ChartView.prototype.css = function(css, disableMorphing) {
        try {
            if (arguments.length > 0) {
                if (!disableMorphing) {
                    this._requestMorphing = true;
                }
                // update css cache according to new css before apply new css
                this._updateCssCacheByNewCss(css);
                // update css by new css
                this._options.css = css;
                if (this._chart) {
                    this._chart.css(css);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                if (this._chart) {
                    return this._chart.css();
                } else {
                    return this._options.css;
                }
            }
        } catch (error) {
            //if(console) {
            //  	console.log("Failed to update chart css : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + error;
        }
    };
    /**
     * Update chart properties.
     * @param {Object} properties
     */
    ChartView.prototype.properties = function(properties, disableMorphing) {
        try {
            if (arguments.length > 0) {
                if (!disableMorphing) {
                    this._requestMorphing = true;
                }
                this._options.properties = properties;
                if (this._chart) {
                    this._chart.properties(properties);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                if (this._chart) {
                    return this._chart.properties();
                } else {
                    return this._options.properties;
                }
            }
        } catch (error) {
            //if(console) {
            //  	console.log("Failed to update chart properties : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + error;
        }
    };
    /**
     * Update chart with updated options.
     * @param {Object} updates
     */
    ChartView.prototype.update = function(updates, disableMorphing) {
        if (!disableMorphing) {
            this._requestMorphing = true;
        }

        return ChartView.superclass.update.apply(this, arguments);
    };
    /**
     * Get chart feeding zone.
     * @return {Object}
     */
    ChartView.prototype.feedingZone = function() {
        try {
            if (this._chart) {
                return this._chart.feedingZone();
            } else {
                throw LangManager.get('VIZ_CHART_FEEDINGZONE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if(console) {
            //  	console.log("Failed to feedingZone chart : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_FEEDINGZONE_FAILED') + error;
        }
    };

    /*
     * Determine whether the morphing is workable.
     */
    ChartView.prototype._canMorphing = function() {
        return this._enableMorphing && this._supportMorphing;
    };
    /*
     * Get current property zones of chart instance
     */
    ChartView.prototype._getPropertyZone = function() {
        if (!this._chart) {
            return [];
        }
        var zone;
        try {
            zone = this._chart.propertyZone();
        } catch(error) {
            return [];
        }
        return zone;
    };

    /**
     * Get/set enablePropertyZone
     */
    ChartView.prototype.enablePropertyZone = function(value) {
        if (arguments.length > 0) {
            if (this._enablePropertyZone !== value) {
                this._enablePropertyZone = (value === true);
                //Update property zone, enable property zone only if this flag is true and chart is not goast
                var enabled = this._enablePropertyZone && this._isFeedsValid;
                this._propertyZone.updateZone(enabled);
            }
            return this;
        } else {
            return this._enablePropertyZone;
        }
    };

    ChartView.prototype._getCategoryAxisScale = function(type){
        var result = null;
        var categoryAxis = VizUtils.getCategoryAxis(type);
        if(categoryAxis){
            result = [];
            for(var i=0; i<categoryAxis.length; i++){
                result.push(categoryAxis[i]+".maxSizeRatio");
            }
        }
        return result;
    };

    ChartView.prototype.resetProperties = function(properties, vizType){
        //remove axis scale properties
        if(this._options && this._options.type){
            var type = this._options.type;
            VizUtils.convertValueAxisScale(properties, type, vizType);
            var categoryAxis = this._getCategoryAxisScale(type);
            if(categoryAxis && categoryAxis.length>0){
                VizUtils.removeProperties(properties, categoryAxis);
            }
        }
        return properties;
    };

    ChartView.prototype.copyData = function(type, data) {
        var result = new sap.viz.api.data.CrosstableDataset();
        result.data(utils.clone(data.data()));
        result.info(utils.clone(data.info('additionalData')));

        return result;
    };

    ChartView.prototype.buildFeedings = function(type, data, feeds) {
        var feeding = null;
        if (!data || ChartTypeUtil.isEmptyData(type, data)) {
            return feeding;
        }
        if (!VizUtils.hasFakeData(data) && !ChartTypeUtil.isEmptyData(type, data) && !FeedUtils.isEmptyFeeds(feeds)) {
            feeding = FeedUtils.buildFeedings(type, feeds, data);
        } else {
            feeding = FeedUtils.buildFeedingsWithFakeData(type, feeds, data);
            feeding = FeedUtils.buildMNDFeedings(feeding, type);
        }
        return feeding;
    };

    ChartView.prototype.getDataPointsPosition = function(dataPoints){
        return DataPointFinder.findDataPointsPosition(dataPoints);
    };

    ChartView.prototype.getPropertyZones = function() {
        // Always show CHART_AREA currently, add an VizInteractionAdapter for all property zones
        return [new VizPropertyZone(VizPropertyZone.CHART_AREA)];
    };

    // Rows
    // 0: Chart width and height â¥ 360px (unchanged)!
    // 1: 260 â¤ Chart width or height < 360px!
    // 2: 160 â¤ Chart width or height < 260px!
    // 3: Chart width or height < 160px!
    // Columns
    // 0: Chart padding
    // 1: Chart title, donut chart center label
    // 2: Axis titles, legend titles
    // 3: Dimension / measure values in tooltip
    // 4: Axis labels,dimension / measure names and âx values selectedâ in tooltip, legend labels, data labels
    var _UX_SCALES = {
        'padding': ['24px', '16px', '9px', '2px'],
        'font_size_1': ['16px', '15px', '14px', '13px'],
        'font_size_2': ['14px', '13px', '12px', '11px'],
        'font_size_3': ['13px', '12px', '11px', '10px'],
        'font_size_4': ['12px', '11px', '10px', '9px'],
    };

    ChartView.prototype._updateUXScale = function() {
        var size = this.size();
        var width = size.width, height = size.height;
        // 0: Chart width and height â¥ 360px (unchanged)!
        // 1: 260 â¤ Chart width or height < 360px!
        // 2: 160 â¤ Chart width or height < 260px!
        // 3: Chart width or height < 160px!
        var uxScaleIndex = 0;
        if (width < 160 || height < 160) {
            uxScaleIndex = 3;
        } else if (width < 260 || height < 260) {
            uxScaleIndex = 2;
        } else if (width < 360 || height < 360) {
            uxScaleIndex = 1;
        }
        if (this._uxScaleIndex !== uxScaleIndex && this._chart) {
            var i = this._uxScaleIndex = uxScaleIndex;
            this._chart.update({
                'properties': {
                    'general': {
                        'layout': {
                            'padding': parseInt(_UX_SCALES.padding[i])
                        }
                    }
                },
                // @formatter:off
                'css': '.v-m-root .v-m-title .v-title {font-size:' + _UX_SCALES.font_size_1[i] + ';}'
                    + '.v-m-root .v-m-main .v-m-yAxis .v-title {font-size:' + _UX_SCALES.font_size_2[i] + ';}'
                    + '.v-m-root .v-m-main .v-m-xAxis .v-title {font-size:' + _UX_SCALES.font_size_2[i] + ';}'
                    + '.v-m-tooltip .v-body-dimension-value {font-size:' + _UX_SCALES.font_size_3[i] + '!important;}'
                    + '.v-m-tooltip .v-body-measure-value {font-size:' + _UX_SCALES.font_size_3[i] + '!important;}'
                    + '.v-m-tooltip .v-body-dimension-label {font-size:' + _UX_SCALES.font_size_4[i] + '!important;}'
                    + '.v-m-tooltip .v-body-measure-label {font-size:' + _UX_SCALES.font_size_4[i] + '!important;}'
                    + '.v-m-tooltip .v-footer-label {font-size:' + _UX_SCALES.font_size_4[i] + '!important;}'
                    + '.v-m-root .v-m-main .v-m-yAxis .v-label {font-size:' + _UX_SCALES.font_size_4[i] + ';}'
                    + '.v-m-root .v-m-main .v-m-xAxis .v-label {font-size:' + _UX_SCALES.font_size_4[i] + ';}'
                    + '.v-m-root .v-m-main .v-m-datalabel .v-datalabel {font-size:' + _UX_SCALES.font_size_4[i] + ';}'
                    + '.v-m-root .v-m-legends .v-m-legend .v-label {font-size:' + _UX_SCALES.font_size_4[i] + ';}'
                // @formatter:on
            });
        }
    };
    return ChartView;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/InteractionAdapter',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/chart/views/ChartEvent'
],
function(OOUtil, utils, EventDispatcher,
    VizPropertyZone,
    ChartEvent) {
// @formatter:on

    var InteractionAdapter = function(helper) {
        InteractionAdapter.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.chart.adapters.InteractionAdapter';

        this._helper = helper;
        var selectRequested = true;
        this._helper.vizOn('selectPropertyZone', $.proxy(function(event) {
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:interaction_select');

            selectRequested = true;
            this._selectPropertyZoneHandler(event);
        }, this));
        this._helper.vizOn('deselectPropertyZone', $.proxy(function(event) {
            selectRequested = false;
            // Defer to wait selectPropertyZone event
            utils.defer($.proxy(function() {
                // Trigger handler when no selectPropertyZone event dispatched
                if (!selectRequested) {
                    this._selectPropertyZoneHandler(event);
                }
            }, this));
        }, this));
        // selection change
        this._propertyZones = null;
    };
    OOUtil.extend(InteractionAdapter, EventDispatcher);

    var _translate = {
        'dataPoint' : VizPropertyZone.DATA_POINT,
        'title' : VizPropertyZone.CHART_TITLE,
        'plotArea' : VizPropertyZone.PLOT_AREA,
        'legend' : VizPropertyZone.LEGEND,
        'axis.x' : VizPropertyZone.X_AXIS,
        'axisTitle.x' : VizPropertyZone.X_AXIS_TITLE,
        'axis.y' : VizPropertyZone.Y_AXIS,
        'axisTitle.y' : VizPropertyZone.Y_AXIS_TITLE,
        'chart' : VizPropertyZone.CHART_AREA,
        'dataLabel' : VizPropertyZone.DATA_LABEL,
        'dataLine' : VizPropertyZone.LINE,
        'gridline' : VizPropertyZone.GRID_LINE
    };

    var _invertTranslate = utils.invert(_translate);

    InteractionAdapter.prototype._getPropertyZones = function() {
        var spz = this._helper.selectedPropertyZone();
        if (!spz) {
            return [];
        }

        var type = spz.type;
        if (type === 'axisItem') {
            type = 'axis';
        }
        // Map spz type to zone
        var propertyZoneType = null;
        var from = type + (spz.subType ? '.' + spz.subType : '');
        if (_translate[from]) {
            propertyZoneType = _translate[from];
        } else {
        }

        var zones = [];
        var measureNames = this._helper.vizData().measures();
        if (spz.data && spz.data.length > 0) {
            spz.data.forEach(function(ctx, index) {
                var zone = new VizPropertyZone(propertyZoneType, ctx, spz.extraData ? spz.extraData[index] : undefined, measureNames);
                var stackContext = spz.stackData ? spz.stackData[index] : null;
                if (stackContext) {
                    zone.stackContext(stackContext);
                }
                var seriesContext = spz.seriesData ? spz.seriesData : null;
                if (seriesContext) {
                    zone.seriesContext(seriesContext);
                }
                if (spz.selectAllData) {
                    zone.selectAllData(spz.selectAllData);
                }
                zones.push(zone);
            });
        } else {
            zones.push(new VizPropertyZone(propertyZoneType));
        }
        return zones;
    };

    InteractionAdapter.prototype._selectPropertyZoneHandler = function(event) {
        this._propertyZones = this._getPropertyZones();
        utils.defer( function() {
            this._dispatchEvent(new ChartEvent(ChartEvent.PROPERTY_ZONES_CHANGED, this, {
                'propertyZones' : this._propertyZones
            }));
        }.bind(this));
    };

    InteractionAdapter.prototype.propertyZones = function(value) {
        if (arguments.length > 0) {
            this._propertyZones = value;

            var to = null;
            value = value || [];
            value.forEach(function(zone) {
                var toType = _invertTranslate[zone.type()];
                if (!toType) {
                    return;
                }
                to = to || {};
                to.data = to.data || [];
                var array = toType.split('.');
                to.type = array[0];
                if (array.length > 1) {
                    to.subType = array[1];
                }
                if (zone.context()) {
                    to.data.push(zone.context());
                }
            });
            if (to) {
                this._helper.selectedPropertyZone(to);
            } else {
                this._helper.selectedPropertyZone(null);
            }
            return this;
        } else {
            if (this._helper.vizType() === 'info/donut' && this._propertyZones && this._propertyZones[0] && this._propertyZones[0].type() === VizPropertyZone.DATA_POINT) {
                // A workaround, we should move set first slice logic from DonutDataPointView init to SectionPicker
                return this._propertyZones;
            } else {
                var zones = this._getPropertyZones();
                if (!zones || zones.length === 0) {
                    return this._propertyZones;
                } else {
                    return zones;
                }
            }
        }
    };

    return InteractionAdapter;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/RendererInfoBase',[
    'require', 'sap/viz/controls/common/utils/Utils'
],
function(r, Utils) {
// @formatter:on
    var require = r || require;
    var RendererInfoBase = function(id, vizPath) {
        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/RendererInfoBase';

        this.id = id;
        this.vizPath = vizPath;

        this.generator = null;
        /**
         * parameters: [
         *         {
         *             ctx : {...},
         *             paras : {
         *                 'key1' : '...',
         *                 'key2' : '...',
         *                 ...
         *             }
         *         },
         *         ...
         *     ]
         */
        this._parameters = [];
        this._fallbackParas = null;
    };

    RendererInfoBase.prototype.parameters = function(value) {
        if (arguments.length > 0) {
            this._parameters = value;
            return this;
        } else {
            return this._parameters;
        }
    };

    RendererInfoBase.prototype.fallbackParas = function() {
        return this._fallbackParas;
    };

    RendererInfoBase.prototype.simplify = function() {
        var remain = [];
        var renderGeneral = false;
        this._iterate('general', $.proxy(function(parameter) {
            if (this._renderGeneral(parameter.paras)) {
                renderGeneral = true;
                remain.push(parameter);
            } else {
                this._fallbackParas = parameter.paras;
            }
        }, this));
        this._iterate('specified', $.proxy(function(parameter) {
            if (renderGeneral || this._renderSpecified(parameter.paras)) {
                remain.push(parameter);
            }
        }, this));

        return remain;
    };

    RendererInfoBase.prototype._updatePropsAll = function(context, key, value) {
        var paras = this._parameters, isUpdated;
        for (var i = 0; i < paras.length; i++) {
            if (Utils.deepEqual(paras[i].ctx, context)) {//[China], [China]. Set [China]'s input value to [China]'s value
                paras[i].paras[key] = value;
                isUpdated = true;
            } 
        }
        return isUpdated;
    };

    RendererInfoBase.prototype._updatePropsGeneral = function(context, key, value) {
        var addParas;
        if (context) {
            var paras = this._parameters, isUpdated, contextNum = -1, number = 0, paraNum;
            for (var i = 0; i < paras.length; i++) {
                if (!paras[i].ctx) {
                    paraNum = i;
                } else if (RendererInfoBase._compareCtx(paras[i].ctx, context)) {//input [China, 2001], existing [China]. Merge [China]'s value and input value, then set to [China, 2001]
                    for (var j in paras[i].ctx) {// count matched context key number
                        number++;
                    }
                    if (contextNum < number) {
                        contextNum = number;
                        paraNum = i;
                    }
                }// if many context matches, use the most detailed context, input [China, 2001, Trunk], existing [China] and [China, Trunk], get [China, Trunk]
            }
            if (paras[paraNum]) {
                addParas = Utils.clone(paras[paraNum]).paras;
            }
        }
        addParas = addParas || {};
        addParas[key] = value;
        this._parameters.push({
            'ctx' : context,
            'paras' : addParas
        });
        isUpdated = true;
    };

    RendererInfoBase.prototype._updatePropsSpecified = function(context, key, value) {
       var paras = this._parameters;
       for (var i = 0; i < paras.length; i++) {
            if (!Utils.deepEqual(paras[i].ctx, context) && RendererInfoBase._compareCtx(context, paras[i].ctx)) {
                //input [China], existing [China, 2001]. Set [China]'s input value to [China, 2001]'s value
                //set current paras value to input value, not set isUpdate to true to add context to paras
                paras[i].paras[key] = value;
            }
        }
        // Sync the specified paras when gerneral para set
        if (!context) {
            for (var i = 0; i < paras.length; i++) {
                paras[i].paras[key] = value;
            }
        }
    };

    // Set ['China', 'Profit'] to red by series, switch dimension feed in aa1 and aa2, then set ['Q1', 'Profit'] to blue, add ['China', 'Q1', 'Profit'] blue
    RendererInfoBase.prototype._mergeAndAddSeriesProps = function(context, key, value) {
        var paras = this._parameters, addContext, addParas;
        for (var i = 0; i < paras.length; i++) {// Two contexts do not match each other and they have at least one common key/value
            if (!RendererInfoBase._compareCtx(context, paras[i].ctx) && !RendererInfoBase._compareCtx(paras[i].ctx, context) && Utils.hasCommonKeyValue(context, paras[i].ctx)) {
                addContext = Utils.updateJSON(paras[i].ctx, context);// ['China', 'Profit'], ['2001', 'Profit'] merge to ['USA', '2001', 'Profit']
                var addContextLength = RendererInfoBase._contextLength(addContext);
                if (addContextLength > RendererInfoBase._contextLength(context) && addContextLength > RendererInfoBase._contextLength(paras[i].ctx)) {
                    // Add new context if it's context is more detailed
                    var obj = {};
                    obj[key] = value;
                    addParas = Utils.updateJSON(paras[i].paras, obj);// ['color'], ['shape'] merge to ['color', 'shape']
                    this._parameters.push({
                        'ctx' : addContext,
                        'paras' : addParas
                    });
                }
            }
        }
    }; 

    RendererInfoBase._contextLength = function(context) {
        var length = 0;
        if (context) {
            for (var i in context) {
                if (context.hasOwnProperty(i)) {
                    length++;
                }
            }
        }
        return length;
    };

    RendererInfoBase.prototype.setProperty = function(context, key, value) {
        var isUpdated = false;
        isUpdated = this._updatePropsAll(context, key, value);
        if (!isUpdated) {
            this._updatePropsGeneral(context, key, value);
        }
        this._updatePropsSpecified(context, key, value);
        this._mergeAndAddSeriesProps(context, key, value);
    };

    /**
     * Returns a value after match input context with existing context
     * 
     * @returns Return undefined if it is not set.
     *          Return null means mixed status for triCheckBox or if specified value is different from general value.
     *          Return value if it is specified.
     */
    RendererInfoBase.prototype.getProperty = function(context, key) {
        var value;
        var paras = this._parameters;
        for (var i = 0; i < paras.length; i++) {
            if (!paras[i].ctx) {
                value = paras[i].paras[key];
            } else if (Utils.deepEqual(context, paras[i].ctx)) {
                value = paras[i].paras[key];
                break;
            }
        }
        var contextNum = -1, number = 0, mostMatchedIndex = -1, genenalMatchNum = 0;
        for (var i = 0; i < paras.length; i++) {
            if ((RendererInfoBase._compareCtx(context, paras[i].ctx) || context === undefined) && !Utils.deepEqual(paras[i].paras[key], value)) {
                if (value !== null && value !== undefined) {
                    return null;
                } else {
                    value = paras[i].paras[key];
                }
                genenalMatchNum++;
            } else if (RendererInfoBase._compareCtx(paras[i].ctx, context)) {//input [China, 2001, Trunk], existing [China] and [China, Trunk], get [China, Trunk]
                number = 0;
                for (var j in paras[i].ctx) {// count matched context key number
                    number++;
                }
                if (contextNum < number) {
                    contextNum = number;
                    mostMatchedIndex = i;
                }
            }
        }
        if (genenalMatchNum === 1) {// input [China], only match [China, 2001]
            return null;
        }
        if (mostMatchedIndex > -1) {
            value = paras[mostMatchedIndex].paras[key];
        }
        return value;
    };

    RendererInfoBase.prototype.toJSON = function() {
        return {
            'id' : this.id,
            'vizPath' : this.vizPath,
            'generator' : this.generator,
            'parameters' : this._parameters,
            'implClassPath' : this.implClassPath
        };
    };
    RendererInfoBase.fromJSON = function(json) {
        var clazz = require(json.implClassPath);
        return new clazz(json.id, json.vizPath).parameters(json.parameters);
    };

    // Override by implementation
    RendererInfoBase.prototype._renderGeneral = function(paras) {
        return true;
    };

    // Override by implementation
    RendererInfoBase.prototype._renderSpecified = function(paras) {
        return true;
    };

    RendererInfoBase.prototype._iterate = function(type, callback, context) {
        this._parameters.forEach(function(parameter, i, parameters) {
            if (type === 'all') {
                callback(parameter);
            } else if (type === 'general') {
                if (!parameter.ctx || RendererInfoBase._compareCtx(parameter.ctx, context)) {
                    callback(parameter);
                }
            } else if (type === 'specified' && parameter.ctx) {
                callback(parameter);
            }
        });
    };
    RendererInfoBase._compareCtx = function(ctx1, ctx2) {
        if ( ctx1 instanceof Object && ctx2 instanceof Object) {
            var keys1 = Object.keys(ctx1);
            var keys2 = Object.keys(ctx2);

            return (keys2.length > 0) && keys1.every(function(key) {
                return RendererInfoBase._compareCtx(ctx1[key], ctx2[key]);
            });
        } else {
            return ctx1 === ctx2;
        }
    };

    RendererInfoBase.prototype.isConflict = function(props, paraKey, renderParaName) {
        var isConflict = false;

        var _this = this;
        this._iterate('all', function(parameter) {
            if (_this._ignoreKey(paraKey, parameter.paras, props)) {
                return;
            } else {
                if (parameter.paras[renderParaName] !== props[paraKey]) {
                    isConflict = true;
                }
            }
        });

        return isConflict;
    };

    // Override by implementation
    RendererInfoBase.prototype._ignoreKey = function(paraKey, paras, props) {
        return false;
    };

    return RendererInfoBase;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/DataLabelRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on

    var DataLabelRendererInfo = function(id, vizPath) {
        DataLabelRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/DataLabelRendererInfo';
        this.generator = 'dataLabelRenderer';
    };

    OOUtil.extend(DataLabelRendererInfo, RendererInfoBase);

    DataLabelRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.iconVisible === true || paras.textVisible === false) {
            return true;
        } else {
            return paras.fontFamily !== undefined || paras.fontSize !== undefined || paras.fontWeight !== undefined || paras.fontColor !== undefined || paras.fontStyle !== undefined;
        }
    };

    DataLabelRendererInfo.prototype._ignoreKey = function(paraKey, paras, props) {
        switch (paraKey) {
            case 'textVisible' :
                if (props.textVisible === undefined) {
                    if (paras.textVisible === props.dataLabelVisible) {
                        return true;
                    }
                }
                break;
            case 'iconVisible' :
                if (props.iconVisible === undefined) {
                    return true;
                }
                break;
            case 'fontFamily' :
                if (paras.fontFamily === undefined) {
                    return true;
                }
                break;
            case 'fontSize' :
                if (paras.fontSize === undefined) {
                    return true;
                }
                break;
            case 'fontWeight' :
                if (paras.fontWeight === undefined) {
                    return true;
                }
                break;
            case 'fontColor' :
                if (paras.fontColor === undefined) {
                    return true;
                }
                break;
            case 'fontStyle' :
                if (paras.fontStyle === undefined) {
                    return true;
                }
                break;
        }

        return false;
    };

    return DataLabelRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/DataLabelPropConfig',[
    'sap/viz/controls/chart/adapters/renderer/DataLabelRendererInfo'
],
function(DataLabelRendererInfo) {
// @formatter:on
    var DataLabelPropConfig = {};

    var _getCfgRenderer = function(paraName) {
        return {
            'id' : 'plotArea.dataLabel.renderer',
            'infoClass' : DataLabelRendererInfo,
            'vizPath' : 'plotArea.dataLabel.renderer',
            'paraName' : paraName
        };
    };

    DataLabelPropConfig.instance = function() {
        return {
            'dataLabelVisible' : {
                'vizPath' : 'plotArea.dataLabel.visible'
            },
            'textVisible' : {
                'renderer' : _getCfgRenderer('textVisible')
            },
            'fontFamily' : {
                'renderer' : _getCfgRenderer('fontFamily'),
                'vizPath' : 'plotArea.dataLabel.style.fontFamily'
            },
            'fontSize' : {
                'renderer' : _getCfgRenderer('fontSize'),
                'vizPath' : 'plotArea.dataLabel.style.fontSize'
            },
            'fontWeight' : {
                'renderer' : _getCfgRenderer('fontWeight'),
                'vizPath' : 'plotArea.dataLabel.style.fontWeight'
            },
            'fontColor' : {
                'renderer' : _getCfgRenderer('fontColor'),
                'vizPath' : 'plotArea.dataLabel.style.color'
            },
            'fontStyle' : {
                'renderer' : _getCfgRenderer('fontStyle'),
                'vizPath' : 'plotArea.dataLabel.style.fontStyle'
            },
            'iconVisible' : {
                'renderer' : _getCfgRenderer('iconVisible')
            },
            'iconSVG' : {
                'renderer' : _getCfgRenderer('iconSVG')
            },
            'iconColor' : {
                'renderer' : _getCfgRenderer('iconColor')
            },
            'iconSize' : {
                'renderer' : _getCfgRenderer('iconSize')
            }
        };
    };

    return DataLabelPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/StackDecoratorInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var StackDecoratorInfo = function(id, vizPath) {
        StackDecoratorInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/StackDecoratorInfo';
        this.generator = 'stackDecorator';
    };
    OOUtil.extend(StackDecoratorInfo, RendererInfoBase);

    StackDecoratorInfo.prototype._renderSpecified = function(paras) {
        if (paras.stackShape) {
            return true;
        } else {
            return false;
        }
    };

    return StackDecoratorInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/BarShapeRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var BarShapeRendererInfo = function(id, vizPath) {
        BarShapeRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/BarShapeRendererInfo';
        this.generator = 'barShapeRenderer';
    };
    OOUtil.extend(BarShapeRendererInfo, RendererInfoBase);

    BarShapeRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.dataPointShape || paras.dataPointShapeFill) {
            return true;
        } else {
            return false;
        }
    };

    BarShapeRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.dataPointShape || paras.dataPointShapeFill) {
            return true;
        } else {
            return false;
        }
    };

    return BarShapeRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/PieDataPointRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var PieDataPointRendererInfo = function(id, vizPath) {
        PieDataPointRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/PieDataPointRendererInfo';
        this.generator = 'pieSliceRenderer';
    };
    OOUtil.extend(PieDataPointRendererInfo, RendererInfoBase);

    PieDataPointRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.sliceShape) {
            return true;
        } else {
            return false;
        }
    };

    PieDataPointRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.sliceShape) {
            return true;
        } else {
            return false;
        }
    };

    return PieDataPointRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/LineDataPointRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var LineDataPointRendererInfo = function(id, vizPath) {
        LineDataPointRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/LineDataPointRendererInfo';
        this.generator = 'lineMarkerRenderer';
    };
    OOUtil.extend(LineDataPointRendererInfo, RendererInfoBase);

    LineDataPointRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    LineDataPointRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    return LineDataPointRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/DataPointPropConfig',[
    'sap/viz/controls/chart/adapters/renderer/StackDecoratorInfo',
    'sap/viz/controls/chart/adapters/renderer/BarShapeRendererInfo',
    'sap/viz/controls/chart/adapters/renderer/PieDataPointRendererInfo',
    'sap/viz/controls/chart/adapters/renderer/LineDataPointRendererInfo'
],
function(StackDecoratorInfo, BarShapeRendererInfo, PieDataPointRendererInfo, LineDataPointRendererInfo) {
// @formatter:on
    var DataPointPropConfig = {};

    var _getBarShapeRenderer = function(paraName) {
        return {
            'id' : 'plotArea.markerRenderer.barShapeRenderer',
            'infoClass' : BarShapeRendererInfo,
            'vizPath' : 'plotArea.markerRenderer',
            'paraName' : paraName
        };
    };
    var _getStackDecorator = function(paraName) {
        return {
            'id' : 'plotArea.stackDecorator.stackDecorator',
            'infoClass' : StackDecoratorInfo,
            'vizPath' : 'plotArea.stackDecorator',
            'useStackContext' : true,
            'paraName' : paraName
        };
    };
    // TODO Check does it deprecated?
    var _getDonutRenderer = function(paraName) {
        return {
            'id' : 'plotArea.sliceRenderer.pieSliceRenderer',
            'infoClass' : PieDataPointRendererInfo,
            'vizPath' : 'plotArea.sliceRenderer',
            'paraName' : paraName
        };
    };
    var _getLineMarkerRenderer = function(paraName) {
        return {
            'id' : 'plotArea.markerRenderer.lineMarkerRenderer',
            'infoClass' : LineDataPointRendererInfo,
            'vizPath' : 'plotArea.markerRenderer',
            'paraName' : paraName
        };
    };
    DataPointPropConfig.instance = function() {
        return {
            'line.iconSVG' : {
                'renderer' : _getLineMarkerRenderer('iconSVG')
            },
            'line.iconColor' : {
                'renderer' : _getLineMarkerRenderer('iconColor')
            },
            'line.iconSize' : {
                'renderer' : _getLineMarkerRenderer('iconSize')
            },
            'dataPointShape' : {
                'renderer' : _getBarShapeRenderer('dataPointShape')
            },
            'stackShape' : {
                'renderer' : _getStackDecorator('stackShape')
            },
            'dataPointShapeFill' : {
                'renderer' : _getBarShapeRenderer('dataPointShapeFill')
            },
            'sliceShape' : {
                'renderer' : _getDonutRenderer('sliceShape')
            },
            'sliceShapeFill' : {
                'renderer' : _getDonutRenderer('sliceShapeFill')
            },
            'centerName.fontFamily' : {
                'vizPath' : 'plotArea.highlight.centerName.style.fontFamily'
            },
            'centerName.fontSize' : {
                'vizPath' : 'plotArea.highlight.centerName.style.fontSize'
            },
            'centerName.fontWeight' : {
                'vizPath' : 'plotArea.highlight.centerName.style.fontWeight'
            },
            'centerName.fontColor' : {
                'vizPath' : 'plotArea.highlight.centerName.style.color'
            },
            'centerName.fontStyle' : {
                'vizPath' : 'plotArea.highlight.centerName.style.fontStyle'
            },
            'centerValue.fontFamily' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.fontFamily'
            },
            'centerValue.fontSize' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.fontSize'
            },
            'centerValue.fontWeight' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.fontWeight'
            },
            'centerValue.fontColor' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.color'
            },
            'centerValue.fontStyle' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.fontStyle'
            }
        };
    };

    return DataPointPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ValueAxisPropConfig',[
],
function() {
// @formatter:on
    var ValueAxisPropConfig = {};

    ValueAxisPropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'valueAxis.label.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'valueAxis.label.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'valueAxis.label.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'valueAxis.label.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'valueAxis.label.style.fontStyle'
            }
        };
    };

    return ValueAxisPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ChartTitlePropConfig',[
],
function() {
// @formatter:on
    var ChartTitlePropConfig = {};

    ChartTitlePropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'title.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'title.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'title.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'title.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'title.style.fontStyle'
            }
        };
    };

    return ChartTitlePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ChartAreaPropConfig',[
],
function() {
// @formatter:on
    var ChartAreaPropConfig = {};

    ChartAreaPropConfig.instance = function() {
        return {
            'fill' : {
                'vizPath' : 'general.background.color'
            }
        };
    };

    return ChartAreaPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/PlotAreaPropConfig',[
],
function() {
// @formatter:on
    var PlotAreaPropConfig = {};

    PlotAreaPropConfig.instance = function() {
        return {
            'fill' : {
                'vizPath' : 'plotArea.background.color'
            }
        };
    };

    return PlotAreaPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/CategoryAxisTitlePropConfig',[
],
function(CategoryAxisLabelRendererInfo) {
// @formatter:on
    var CategoryAxisTitlePropConfig = {};

    CategoryAxisTitlePropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'categoryAxis.title.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'categoryAxis.title.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'categoryAxis.title.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'categoryAxis.title.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'categoryAxis.title.style.fontStyle'
            }
        };
    };

    return CategoryAxisTitlePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ValueAxisTitlePropConfig',[
],
function(CategoryAxisLabelRendererInfo) {
// @formatter:on
    var ValueAxisTitlePropConfig = {};

    ValueAxisTitlePropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'valueAxis.title.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'valueAxis.title.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'valueAxis.title.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'valueAxis.title.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'valueAxis.title.style.fontStyle'
            }
        };
    };

    return ValueAxisTitlePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/LegendPropConfig',[
],
function() {
// @formatter:on
    var LegendPropConfig = {};

    LegendPropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'legend.label.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'legend.label.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'legend.label.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'legend.label.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'legend.label.style.fontStyle'
            },
            'title-fontFamily' : {
                'vizPath' : 'legend.title.style.fontFamily'
            },
            'title-fontSize' : {
                'vizPath' : 'legend.title.style.fontSize'
            },
            'title-fontWeight' : {
                'vizPath' : 'legend.title.style.fontWeight'
            },
            'title-fontColor' : {
                'vizPath' : 'legend.title.style.color'
            },
            'title-fontStyle' : {
                'vizPath' : 'legend.title.style.fontStyle'
            }
        };
    };

    return LegendPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/CategoryAxisLabelRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var CategoryAxisLabelRendererInfo = function(id, vizPath) {
        CategoryAxisLabelRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/CategoryAxisLabelRendererInfo';
        this.generator = 'categoryAxisLabelRenderer';
    };
    OOUtil.extend(CategoryAxisLabelRendererInfo, RendererInfoBase);

    CategoryAxisLabelRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.iconVisible === true || paras.textVisible === false) {
            return true;
        } else {
            return false;
        }
    };

    CategoryAxisLabelRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.iconVisible === true || paras.textVisible === false) {
            return true;
        } else {
            return paras.fontFamily !== undefined || paras.fontSize !== undefined || paras.fontWeight !== undefined || paras.fontColor !== undefined || paras.fontStyle !== undefined;
        }
    };

    CategoryAxisLabelRendererInfo.prototype._ignoreKey = function(paraKey, paras, props) {
        switch (paraKey) {
            case 'fontFamily' :
                if (paras.fontFamily === undefined) {
                    return true;
                }
                break;
            case 'fontSize' :
                if (paras.fontSize === undefined) {
                    return true;
                }
                break;
            case 'fontWeight' :
                if (paras.fontWeight === undefined) {
                    return true;
                }
                break;
            case 'fontColor' :
                if (paras.fontColor === undefined) {
                    return true;
                }
                break;
            case 'fontStyle' :
                if (paras.fontStyle === undefined) {
                    return true;
                }
                break;
        }

        return false;
    };

    return CategoryAxisLabelRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/CategoryAxisPropConfig',[
    'sap/viz/controls/chart/adapters/renderer/CategoryAxisLabelRendererInfo'
],
function(CategoryAxisLabelRendererInfo) {
// @formatter:on

    var CategoryAxisPropConfig = {};

    var _getCategoryAxisLabelRenderer = function(paraName) {
        return {
            'id' : 'categoryAxis.labelRenderer.categoryAxisLabelRenderer',
            'infoClass' : CategoryAxisLabelRendererInfo,
            'vizPath' : 'categoryAxis.labelRenderer',
            'paraName' : paraName
        };
    };

    CategoryAxisPropConfig.instance = function() {
        return {
            'textVisible' : {
                'renderer' : _getCategoryAxisLabelRenderer('textVisible')
            },
            'iconSVG' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconSVG')
            },
            'iconColor' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconColor')
            },
            'iconSize' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconSize')
            },
            'iconVisible' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconVisible')
            },
            'fontFamily' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontFamily'),
                'vizPath' : 'categoryAxis.label.style.fontFamily'
            },
            'fontSize' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontSize'),
                'vizPath' : 'categoryAxis.label.style.fontSize'
            },
            'fontWeight' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontWeight'),
                'vizPath' : 'categoryAxis.label.style.fontWeight'
            },
            'fontColor' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontColor'),
                'vizPath' : 'categoryAxis.label.style.color'
            },
            'fontStyle' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontStyle'),
                'vizPath' : 'categoryAxis.label.style.fontStyle'
            }
        };
    };

    return CategoryAxisPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/LineRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var LineRendererInfo = function(id, vizPath) {
        LineRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/LineRendererInfo';
        this.generator = 'lineRenderer';
    };
    OOUtil.extend(LineRendererInfo, RendererInfoBase);

    LineRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.dash || paras.color) {
            return true;
        } else {
            return false;
        }
    };

    LineRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.dash || paras.color || paras.width) {
            return true;
        } else {
            return false;
        }
    };

    return LineRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/LinePropConfig',[
    'sap/viz/controls/chart/adapters/renderer/LineRendererInfo'
],
function(LineRendererInfo) {
// @formatter:on
    var LinePropConfig = {};

    var _getLineRenderer = function(paraName) {
        return {
            'id' : 'plotArea.lineRenderer',
            'infoClass' : LineRendererInfo,
            'vizPath' : 'plotArea.lineRenderer',
            'paraName' : paraName
        };
    };
    LinePropConfig.instance = function() {
        return {
            'lineFill' : {
                'renderer' : _getLineRenderer('color')
            },
            'lineStyle' : {
                'renderer' : _getLineRenderer('dash')
            },
            'plotArea.width' : {
                'renderer' : _getLineRenderer('width'),
                'vizPath' : 'plotArea.width'
            }
        };
    };

    return LinePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/PropertyMap',[
    'sap/viz/controls/chart/adapters/config/DataLabelPropConfig',
    'sap/viz/controls/chart/adapters/config/DataPointPropConfig',
    'sap/viz/controls/chart/adapters/config/ValueAxisPropConfig',
    'sap/viz/controls/chart/adapters/config/ChartTitlePropConfig',
    'sap/viz/controls/chart/adapters/config/ChartAreaPropConfig',
    'sap/viz/controls/chart/adapters/config/PlotAreaPropConfig',
    'sap/viz/controls/chart/adapters/config/CategoryAxisTitlePropConfig',
    'sap/viz/controls/chart/adapters/config/ValueAxisTitlePropConfig',
    'sap/viz/controls/chart/adapters/config/LegendPropConfig',
    'sap/viz/controls/chart/adapters/config/CategoryAxisPropConfig',
    'sap/viz/controls/chart/adapters/config/LinePropConfig',
    'sap/viz/controls/common/property/VizPropertyZone'
],
function(DataLabelPropConfig, DataPointPropConfig, ValueAxisPropConfig, ChartTitlePropConfig, ChartAreaPropConfig, PlotAreaPropConfig,
    CategoryAxisTitlePropConfig, ValueAxisTitlePropConfig, LegendPropConfig, CategoryAxisPropConfig, LinePropConfig, VizPropertyZone) {
// @formatter:on

    var PropertyMap = {};

    PropertyMap.getPropConfig = function(zoneType, isHorizontal) {
        switch (zoneType) {
            case VizPropertyZone.DATA_LABEL :
                return DataLabelPropConfig.instance();
                break;
            case VizPropertyZone.DATA_POINT :
                return DataPointPropConfig.instance();
                break;
            case VizPropertyZone.X_AXIS :
                if (isHorizontal) {
                    return ValueAxisPropConfig.instance();
                } else {
                    return CategoryAxisPropConfig.instance();
                }
                break;
            case VizPropertyZone.CHART_TITLE :
                return ChartTitlePropConfig.instance();
                break;
            case VizPropertyZone.CHART_AREA :
                return ChartAreaPropConfig.instance();
                break;
            case VizPropertyZone.PLOT_AREA :
                return PlotAreaPropConfig.instance();
                break;
            case VizPropertyZone.X_AXIS_TITLE :
                if (isHorizontal) {
                    return ValueAxisTitlePropConfig.instance();
                } else {
                    return CategoryAxisTitlePropConfig.instance();
                }
                break;
            case VizPropertyZone.Y_AXIS_TITLE :
                if (isHorizontal) {
                    return CategoryAxisTitlePropConfig.instance();
                } else {
                    return ValueAxisTitlePropConfig.instance();
                }
                break;
            case VizPropertyZone.LEGEND :
                return LegendPropConfig.instance();
                break;
            case VizPropertyZone.Y_AXIS :
                if (isHorizontal) {
                    return CategoryAxisPropConfig.instance();
                } else {
                    return ValueAxisPropConfig.instance();
                }
                break;
            case VizPropertyZone.LINE :
                return LinePropConfig.instance();
                break;
        };
    };

    return PropertyMap;
});

define('sap/viz/controls/chart/adapters/PropFnGenerator',[],function() {
    var PropFnGenerator = function(name, fn) {
        this.__className = "sap.viz.controls.chart.adapters.PropFnGenerator";
        this._name = name;
        this._fn = fn;
    };

    prototype = PropFnGenerator.prototype;
    prototype.generateFn = function(paras) {
        return this._fn.apply(null, [paras]);
    };

    prototype.getName = function() {
        return this._name;
    };

    return PropFnGenerator;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/PropFnGeneratorRegistry',[
	'sap/viz/controls/chart/adapters/PropFnGenerator'
], function(PropFnGenerator) {
// @formatter:on
    var PropFnGeneratorRegistry = {};

    var _generators = {};

    PropFnGeneratorRegistry.register = function(name, fn) {
        var generators = _generators;
        if (generators.hasOwnProperty(name)) {
            throw "PropFnGenerator '" + name + "' exists.";
        }

        generators[name] = new PropFnGenerator(name, fn);
    };

    PropFnGeneratorRegistry.unregister = function(name) {
        delete _generators[name];
    };

    PropFnGeneratorRegistry.get = function(name) {
        return _generators[name];
    };

    return PropFnGeneratorRegistry;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/PropertyAdapter',[
    'require',
    'jquery',
    'sap/viz/controls/chart/adapters/PropertyMap',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/chart/adapters/PropFnGeneratorRegistry',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase',
    'sap/viz/controls/common/utils/ChartTypeUtil'
],
function(r, $, PropertyMap, EventDispatcher, VizPropertyZone, OOUtil, Utils, PropFnGeneratorRegistry, RendererInfoBase, ChartTypeUtil) {
// @formatter:on

    var require = r || require;
    var PropertyAdapter = function(helper, rendererInfoJSON) {
        PropertyAdapter.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.chart.adapters.PropertyAdapter';

        this._helper = helper;

        /*
         * {
         *     id1 : rendererInfo1,
         *     id2 : rendererInfo2,
         *  ...
         * }
         */
        this._rendererInfo = {};
        if (rendererInfoJSON) {
            this._loadRendererInfo(rendererInfoJSON);
        }
    };

    OOUtil.extend(PropertyAdapter, EventDispatcher);

    /*
     * options:
     * {
     *     propertyZones : [
     *         {...},
     *         ...
     *     ],
     *     propertyFields : {
     *         'propertyField1' : true | false,
     *         'propertyField2' : true | false,
     *         ...
     *     }
     * }
     *
     * returns: {
     *     'link1' : '...',
     *     'link2' : '...'
     * }
     */
    PropertyAdapter.prototype.query = function(options) {
        if (options && options.propertyZones) {
            var zones = options.propertyZones;
            var propFields = options.propertyFields;
            var chartType = options.chartType;

            var merged;
            for (var index in zones) {
                var props = {};
                for (var link in propFields) {
                    if (propFields[link] === true) {
                        var zone = zones[index];
                        var propertyConfigs = PropertyMap.getPropConfig(zone.type(), ChartTypeUtil.isHorizontal(chartType));
                        if (propertyConfigs && propertyConfigs[link]) {
                            var cfg = propertyConfigs[link];
                            cfg.vizPath = cfg.vizPath || link;
                            // Get from properties
                            if (cfg.vizPath) {
                                props[link] = this._getVizProp(cfg.vizPath);
                            }
                            // Get from renderer
                            if (cfg.renderer) {
                                cfg.renderer.paraName = cfg.renderer.paraName || link;
        
                                var info = this._rendererInfo[cfg.renderer.id];
                                if (info) {
                                    var context = zone.getDimensionContext();
                                    if (cfg.renderer.useStackContext) {
                                        context = zone.stackContext();
                                    }
                                    var rendererProp = info.getProperty(context, cfg.renderer.paraName);
                                    if (rendererProp !== undefined) {
                                        props[link] = rendererProp;
                                    }
                                }
                            }
                        } else {
                            // In viz property case, property name is the viz property path by default.
                            props[link] = this._getVizProp(link);
                        }
                    }
                }
                
                if (!merged) {
                    merged = props;
                } else {
                    for (var link in props) {
                        if (!Utils.deepEqual(merged[link], props[link])) {
                            merged[link] = null;
                        }
                    }
                }
            }

            return merged;
        }

        return null;
    };

    PropertyAdapter.prototype._getCfg = function(propertyConfigs, rProperty) {
        for (var link in propertyConfigs) {
            if (propertyConfigs && propertyConfigs[link] && propertyConfigs[link].renderer && propertyConfigs[link].renderer.paraName === rProperty) {
                return propertyConfigs[link];
            }
        }
        return null;
    };
    /*
     * options:
     * {
     *     propertyZones : [
     *         {...},
     *         ...
     *     ],
     *     properties : {
     *         'link1' : '...',
     *         'link2' : '...',
     *         ...
     *     }
     * }
     */
    PropertyAdapter.prototype.update = function(options) {
        if (!options || !options.propertyZones) {
            return;
        }

        var propertyZones = options.propertyZones;
        var properties = options.properties;
        var chartType = options.chartType;

        /**
         * link: Name between PropertyEditor & PropertyConfig
         * rProperty: para name in renderer
         * nPath: property path in viz instance
         */
        var rendererProperties = {};
        var nativeProperties = {};

        for (var i in propertyZones) {
            var propertyZone = propertyZones[i];
            // TODO: Should get config by section type, will refactor in next version
            var propConfig = PropertyMap.getPropConfig(propertyZone.type(), ChartTypeUtil.isHorizontal(chartType));

            var rendererInfos = {};
            // Store properties into rendererInfo or nativeProperties
            for (var propName in properties) {
                var propValue = properties[propName];

                if (propConfig && propConfig[propName]) {
                    var cfg = propConfig[propName];
                    if (cfg.renderer) {
                        /*
                         * Assign as renderer info:
                         * renderer : {
                         *     'id' : '...',
                         *     'infoClass' : {...},
                         *     'vizPath' : '...',
                         *     'paraName' : '...'
                         * }
                         */
                        var rendererCfg = cfg.renderer;
                        if (!this._rendererInfo[rendererCfg.id]) {
                            this._rendererInfo[rendererCfg.id] = new rendererCfg.infoClass(rendererCfg.id, rendererCfg.vizPath);
                        }
                        rendererInfos[rendererCfg.id] = this._rendererInfo[rendererCfg.id];
                        var context = propertyZone.getDimensionContext();
                        if (rendererCfg.useStackContext === true) {
                            context = propertyZone.stackContext();
                        }
                        this._rendererInfo[rendererCfg.id].setProperty(context, rendererCfg.paraName, propValue);
                    } else if (cfg.vizPath) {
                        /*
                         * Assign as property:
                         * vizPath : '...'
                         */
                        nativeProperties[cfg.vizPath] = propValue;
                    }
                } else {
                    // Assign as property by default
                    nativeProperties[propName] = propValue;
                }
            }

            // Filter rendererInfo to use rendererProperties or fall back to nativeProperties
            for (var id in rendererInfos) {
                var info = rendererInfos[id];

                // Filter rendererInfo for rendererProperties
                if (info.simplify().length > 0) {
                    rendererProperties[info.vizPath] = info;
                } else {
                    rendererProperties[info.vizPath] = undefined;
                }

                // Fall back filtered rendererInfo to nativeProperties
                if (info.fallbackParas()) {
                    var paras = info.fallbackParas();
                    for (var paraName in paras) {
                        var paraValue = paras[paraName];

                        var cfg = this._getCfg(propConfig, paraName);
                        if (cfg && cfg.vizPath) {
                            /*
                             * Assign as property:
                             * vizPath : '...'
                             */
                            nativeProperties[cfg.vizPath] = paraValue;
                        }
                    }
                }
            }
        }

        // Update properties from rendererProperties and nativeProperties
        var properties = {};
        for (var vizPath in rendererProperties) {
            var info = rendererProperties[vizPath];
            if (info) {
                PropertyAdapter._parseVizPath(vizPath, PropertyAdapter._getRenderer(info.generator, info.parameters()), properties);
            } else {
                PropertyAdapter._parseVizPath(vizPath, null, properties);
            }
        }
        for (var vizPath in nativeProperties) {
            PropertyAdapter._parseVizPath(vizPath, nativeProperties[vizPath], properties);
        }
        this._helper.vizProperties(properties);
    };

    /*
     * Get corresponding viz property value.
     */
    PropertyAdapter.prototype._getVizProp = function(propPath) {
        var vizProp = this._helper.vizProperties();

        try {
            var pathArray = propPath.split('.');
            for (var i in pathArray) {
                vizProp = vizProp[pathArray[i]];
            }
        } catch(e) {
            return undefined;
        }
        return vizProp;
    };

    PropertyAdapter.prototype.saveRendererInfo = function() {
        var json = {};
        for (var id in this._rendererInfo) {
            json[id] = this._rendererInfo[id].toJSON();
        }
        return json;
    };
    PropertyAdapter.parseRendererInfo = function(rendererInfo, properties) {
        properties = properties || {};

        for (var id in rendererInfo) {
            var infoJSON = rendererInfo[id];
            // Parse to properties
            PropertyAdapter._parseVizPath(infoJSON.vizPath, PropertyAdapter._getRenderer(infoJSON.generator, infoJSON.parameters), properties);
        }
        return properties;
    };
    PropertyAdapter.prototype._loadRendererInfo = function(rendererInfo) {
        var requires = [];
        for (var id in rendererInfo) {
            var infoJSON = rendererInfo[id];
            // Load impl classes
            requires.push(infoJSON.implClassPath);
        }
        // Update render info with instance
        for(var id in rendererInfo) {
            this._rendererInfo[id] = RendererInfoBase.fromJSON(rendererInfo[id]);
        }
    };

    /*
     * Choose renderer and update it to the corresponding property in viz instance.
     */
    PropertyAdapter._getRenderer = function(name, parameters) {
        var generator = PropFnGeneratorRegistry.get(name);

        return (generator) ? generator.generateFn(parameters) : null;
    };

    PropertyAdapter._parseVizPath = function(vizPath, value, properties) {
        var pathArray = vizPath.split('.');
        if (pathArray.length > 0) {
            var temp = properties;
            for (var i = 0; i < pathArray.length; i++) {
                if (i === pathArray.length - 1) {
                    temp[pathArray[i]] = value;
                    break;
                }
                temp[pathArray[i]] = temp[pathArray[i]] || {};
                temp = temp[pathArray[i]];
            }
        }
        return properties;
    };

    return PropertyAdapter;
});

// @formatter:off
define('sap/viz/controls/chart/views/InfoChartView',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/AutoFeedingUtils',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/chart/adapters/InteractionAdapter',
    'sap/viz/controls/chart/adapters/PropertyAdapter',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/View'
],
function($, OOUtil, CSSConst, ChartConst, LangManager, AnalysisObject, AnalyticalType, AutoFeedingUtils, FeedUtils,
    VizPropertyZone, InfoChartUtil, InteractionAdapter, PropertyAdapter, ChartEvent, View) {
// @formatter:on

    /**
     * InfoChartView View represent an info chart.
     */
    var InfoChartView = function(dom/*HTMLDivElement*/, options, libFolderPath, chartModelProvider) {
        InfoChartView.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.chart.views.InfoChartView';

        this._useBuiltInPropertyZoneInteraction = options.useBuiltInPropertyZoneInteraction;

        this._iAdapter = null;
        this._pAdapter = null;
        this._rendererInfo = null;

        this._createChildren();
    };

    OOUtil.extend(InfoChartView, View);

    InfoChartView.prototype._createChartInstance = function() {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-create');
        if (!this._options) {
            return;
        }

        var options = this._options;
        if (this._useBuiltInPropertyZoneInteraction === true) {
            options.properties = options.properties || {};
            options.properties.interaction = {
                behaviorType : 'DesignTimeBehavior'
            };
        }


        this._destroyChartInstance();
        //this._updateDescriptionByOptions(options);
        this._updateDescription();
        this._chart = sap.viz.api.core.createViz({
            type : options.type,
            data : options.data,
            feeding : options.feeding,
            properties : options.properties,
            css : options.css,
            events : options.events,
            container : this._chartLayer$.get(0)
        });
        this._postVizProcess(options);

        this._chart.on('initialized.create', $.proxy(function() {
            if (!this._chart) {
                return;
            }
            this._chart.off('initialized.create');

            if (!this._iAdapter) {
                this._iAdapter = new InteractionAdapter(this._helper);
                this._iAdapter.addEventListener(ChartEvent.PROPERTY_ZONES_CHANGED, function(event) {
                    this._dispatchEvent(new ChartEvent(ChartEvent.PROPERTY_ZONES_CHANGED, this, event.data));
                }, this);
            }
            if (!this._pAdapter) {
                this._pAdapter = new PropertyAdapter(this._helper, this._rendererInfo);
                // TODO Just a workaround
                this._pAdapter._ownerDom$ = this._dom$;
            }
            // Dispatch default property zone after chart is initialized.
            this._dispatchEvent(new ChartEvent(ChartEvent.PROPERTY_ZONES_CHANGED, this, {
                'propertyZones' : [new VizPropertyZone(VizPropertyZone.CHART_AREA)]
            }));
        }, this));

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_chartView-create');
    };

    InfoChartView.prototype.hasChartInstance = function() {
        return this._chart !== null;
    };

    InfoChartView.prototype.properties = function(value) {
        if (arguments.length > 0) {
            this._options.properties = value;
            if (this._chart) {
                this._chart.properties(value);
                return this;
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } else {
            if (this._chart) {
                return this._chart.properties();
            } else {
                return this._options.properties;
            }
        }
    };

    InfoChartView.prototype.copyData = function(type, data) {
        var rawData = data.data();
        var result = new sap.viz.api.data.FlatTableDataset(rawData);

        return result;
    };

    InfoChartView.prototype.buildFeedings = function(type, data, feeds) {
        var newFeeds = null;
        var adjustMND = false;
        if (FeedUtils.hasMND(feeds) || (FeedUtils.countAnalyses(feeds, AnalyticalType.MEASURE) === 0)) {
            newFeeds = feeds;
        } else {
            var vizType = InfoChartUtil.getVizType(type);
            newFeeds = AutoFeedingUtils.directFeeding(feeds, vizType, [AnalysisObject.genMND()]);
            adjustMND = true;
        }
        return InfoChartUtil.buildInfoFeeding(newFeeds, adjustMND);
    };

    /**
     * Update chart feeding.
     * @param {Object} feeding
     */
    InfoChartView.prototype.feeding = function(feeding) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    this._chart.feeding(feeding);
                    return this;
                } else {
                    return this._chart.feeding();
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + error;
        }
    };

    InfoChartView.prototype.getPropertyZones = function() {
        if (this._iAdapter) {
            return this._iAdapter.propertyZones();
        } else {
            return [];
        }
    };

    InfoChartView.prototype.setPropertyZones = function(propertyZones) {
        if (this._iAdapter) {
            this._iAdapter.propertyZones(propertyZones);
        }
    };

    InfoChartView.prototype.queryProperties = function(options) {
        return this._pAdapter ? this._pAdapter.query(options) : {};
    };

    InfoChartView.prototype.updateProperties = function(options) {
        if (this._pAdapter) {
            this._pAdapter.update(options);
        }
    };

    InfoChartView.prototype.save = function() {
    	if (this._pAdapter) {
	        return {
	            'pAdapter' : {
	                'rendererInfo' : this._pAdapter.saveRendererInfo()
	            }
	        };
	    } else {
    		return {};
    	}
    };

    /**
     * Migrate xAxis.labelRenderer or yAxis.labelRenderer to categoryAxis.labelRenderer.
     */
    InfoChartView._migrateRenderInfo = function(rendererInfo) {
        var categoryAxisRendererID = "categoryAxis.labelRenderer.categoryAxisLabelRenderer";
        if (!rendererInfo || rendererInfo[categoryAxisRendererID]) {
            return;
        }

        var categoryAxisLabelRenderer;
        var xAxisRendererID = "xAxis.labelRenderer.categoryAxisLabelRenderer";
        var yAxisRendererID = "yAxis.labelRenderer.categoryAxisLabelRenderer";
        if (rendererInfo[xAxisRendererID]) {
            categoryAxisLabelRenderer = rendererInfo[xAxisRendererID];
            delete rendererInfo[xAxisRendererID];
        } else if (rendererInfo[yAxisRendererID]) {
            categoryAxisLabelRenderer = rendererInfo[yAxisRendererID];
            delete rendererInfo[yAxisRendererID];
        }

        if (categoryAxisLabelRenderer) {
            rendererInfo[categoryAxisRendererID] = categoryAxisLabelRenderer;
            categoryAxisLabelRenderer.id = categoryAxisRendererID;
            categoryAxisLabelRenderer.vizPath = "categoryAxis.labelRenderer";
        }
    };

    InfoChartView.prototype.load = function(json, vizInstanceProps) {
    	if (json && json.pAdapter) {
	        InfoChartView._migrateRenderInfo(json.pAdapter.rendererInfo);
	        this._rendererInfo = json.pAdapter.rendererInfo;
	        PropertyAdapter.parseRendererInfo(json.pAdapter.rendererInfo, vizInstanceProps);
        }
    };

    /**
     * Update chart css.
     * @param {Object} css
     */
    InfoChartView.prototype.css = function(css) {
        try {
            if (arguments.length > 0) {
                // update css cache according to new css before apply new css
                this._updateCssCacheByNewCss(css);
                // update css by new css
                this._options.css = css;
                if (this._chart) {
                    this._chart.css(css);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                if (this._chart) {
                    return this._chart.css();
                } else {
                    return this._options.css;
                }
            }
        } catch (error) {
            throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + error;
        }
    };

    InfoChartView.prototype.data = function(data) {
        if (this._chart) {
            try {
                if (arguments.length > 0) {
                    this._chart.app.setDataset(data);
                } else {
                    return this._chart.app.getDataset();
                }
            } catch (error) {
                errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + error;
                this._updateDescription(errorMsg);
                throw errorMsg;
            }
        } else {
            return InfoChartView.superclass.data.apply(this, arguments);
        }
    };

    InfoChartView.prototype.exportViz = function(options) {
        if (this._chart) {
            var result = this._chart.toJSON(options);
            if (result) {
                result.properties = this._options.properties;
                delete result.css;
            }
            return result;
        } else {
            throw LangManager.get('VIZ_CHART_SERIALIZE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };


    return InfoChartView;
});

define('sap/viz/controls/chart/views/ESRIServicePanel',[
// @formatter:off
'jquery', 
'sap/viz/controls/common/constants/CSSConst', 
'sap/viz/controls/common/utils/OOUtil', 
'sap/viz/controls/common/VizControlBase',
'sap/viz/controls/common/managers/LangManager',
'sap/viz/controls/chart/views/ChartEvent'],
// @formatter:on
function($, CSSConst, OOUtil, VizControlBase, LangManager, ChartEvent) {

    var ESRIServicePanel = function(div, uiconfig) {
      
      ESRIServicePanel.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.ESRIServicePanel";
        this._uiconfig = uiconfig;
        this._div = div;
        this._serviceGallery$ = null;
        this.createChildren();
    };

    OOUtil.extend(ESRIServicePanel, VizControlBase);


    ESRIServicePanel.prototype.createChildren = function() {
               
        this._serviceGallery$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-gallery').appendTo(this._div);
        
    }    
            
    ESRIServicePanel.prototype.init = function(services, token, selectedServiceId){
      
        var self = this;
        var serviceClick = function(){
            $('.' + CSSConst.CHART_PREFIX + 'map-service-selector-services-item-icon').removeClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-item-icon-selected');
            $(this).addClass(CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected");
            
            self._dispatchEvent(new ChartEvent(ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED, this, {
              serviceId : $('.' + CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected").data("__serviceId"),
            }));
            
        };
        
        this._serviceGallery$.empty();
        if(services && services.length > 0 ){
           var item$, icon$, title$, thumbnailURL;
           //no service by default 
         
           for(var i = 0; i < services.length; i++){
              item$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-item').appendTo(this._serviceGallery$);
              icon$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-item-icon').appendTo(item$);
              icon$.attr("title", services[i].description);
              icon$.data("__serviceId", services[i].id);
              icon$.data("__serviceUrl", services[i].url);
              icon$.on("click", serviceClick);
              
              title$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-item-title').appendTo(item$);
              title$.html(services[i].title);
              
              thumbnailURL = "url(https://www.arcgis.com/sharing/rest/content/items/" + services[i].id + "/info/" + services[i].thumbnail + "?token=" + token + ")";
              icon$.css({"background-image": thumbnailURL});
              
              if(selectedServiceId && selectedServiceId === services[i].id){
                 icon$.addClass(CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected");
              }
           }
        }
        
    }
    
    ESRIServicePanel.prototype.getSelectedService = function(){
        return {
                 id: $('.' + CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected").data("__serviceId"),
                 url: $('.' + CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected").data("__serviceUrl")
        };
    };
    
    ESRIServicePanel.prototype.show = function(){
        this._serviceGallery$.show();
    };
    
    ESRIServicePanel.prototype.hide= function(){
        this._serviceGallery$.hide();
    };
   
    return ESRIServicePanel;
});
define('sap/viz/controls/chart/views/ESRIServiceColor',[
// @formatter:off
'jquery', 
'sap/viz/controls/common/constants/CSSConst', 
'sap/viz/controls/common/utils/OOUtil', 
'sap/viz/controls/common/VizControlBase',
'sap/viz/controls/common/managers/LangManager',
'sap/viz/controls/chart/views/ChartEvent'],
// @formatter:on
function($, CSSConst, OOUtil, VizControlBase, LangManager, ChartEvent) {

    var ESRIServiceColor = function(div, uiconfig) {
      
      ESRIServiceColor.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.ESRIServiceColor";
        this._uiconfig = uiconfig;
        this._div = div;
        this._serviceColor$ = null;
        this._fieldsSelector$ = null;
        
        this._startVal$ = null;
        this._startColor$ = null;
        this._endVal$ = null;
        this._endColor$ = null;
        
        this.createChildren();
    };

    OOUtil.extend(ESRIServiceColor, VizControlBase);

    ESRIServiceColor.prototype.createChildren = function() {
               
        this._serviceColor$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-panel').appendTo(this._div);
        $(document.createElement('div')).html(LangManager.get('VIZ_CHART_SELECT_DATASET'))
          .addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-title')
          .appendTo(this._serviceColor$);
        
        this._fieldsSelector$ = $(document.createElement('select')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-selector').appendTo(this._serviceColor$ );
        
        this.createGradient();
    }    
    
    ESRIServiceColor.prototype.createGradient = function(){
      
        var group$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-title-group').appendTo(this._serviceColor$);
        $(document.createElement('div')).html(LangManager.get('VIZ_CHART_SET_COLOR_LAYER')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-title-label').appendTo(group$);
        this._reset$ = $(document.createElement('div')).html(LangManager.get("VIZ_CHART_RESET")).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-reset') .on("click", function(){
          this._startVal$.val(this._startVal$.prop("defaultValue"));
          this._endVal$.val(this._endVal$.prop("defaultValue"));
       }.bind(this)).appendTo(group$);
        
               
        
        var gradient$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient')
         .appendTo(this._serviceColor$);
        
        $(document.createElement('div')).html(LangManager.get("VIZ_CHART_START"))
          .addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-start').appendTo(gradient$);
        var startGroup$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-value-group1').appendTo(gradient$);

        this._startVal$ = $(document.createElement('input')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-value')
        .attr("value", "0")
        .appendTo(startGroup$);
        
        this._startColor$ =$(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-colorpicker')
        .css("background-color", "#c2e3a9")
        .appendTo(startGroup$);
        
        $(document.createElement('div')).html(LangManager.get("VIZ_CHART_END"))
        .addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-end').appendTo(gradient$);
        
        startGroup$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-value-group2').appendTo(gradient$);
        this._endVal$ = $(document.createElement('input')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-value')
          .attr("value", "100")
          .appendTo(startGroup$);
       
        this._endColor$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-colorpicker')
          .css("background-color", "#35581C")
          .appendTo(startGroup$);
        
    }
    
    
    ESRIServiceColor.prototype.init = function(serviceUrl, color){
        $.ajax({
          url : serviceUrl,
          data : {
              f : "json"               
          },
          dataType : "json",
          type : "POST",
          success :
              function (response) {
                  this._fieldsSelector$.empty();
                  var validFields = response.fields.filter(function(field){
                                                            return  field.type === "esriFieldTypeSmallInteger" ||
                                                             field.type === "esriFieldTypeInteger" ||
                                                             field.type === "esriFieldTypeSingle" ||
                                                             field.type === "esriFieldTypeDouble" ;
                                                             
                                                        });
                  
                  for(var i = 0; i < validFields.length; i++){
                      $(document.createElement('option')).attr('value', validFields[i].name).html(validFields[i].name).appendTo(this._fieldsSelector$);
                  }
              }.bind(this)
         });
    };
    
    
    ESRIServiceColor.prototype.show = function(){
        this._serviceColor$.show();
    };
    
    ESRIServiceColor.prototype.hide= function(){
        this._serviceColor$.hide();
    };
    
    ESRIServiceColor.prototype.getColor = function(){
        return {
           type: "gradient",
           bindedField: this._fieldsSelector$.val(),
           start: {
              val:    this._startVal$.val(),
              color:  this._startColor$.css("background-color")
           },
           end :{
             val:   this._endVal$.val(),
             color: this._endColor$.css("background-color")
           }
        }
    }
   
    return ESRIServiceColor;
});
define('sap/viz/controls/chart/views/ESRIServiceSelector',[
// @formatter:off
'jquery', 
'sap/viz/controls/common/constants/CSSConst', 
'sap/viz/controls/common/utils/OOUtil', 
'sap/viz/controls/common/VizControlBase',
'sap/viz/controls/common/managers/LangManager',
'sap/viz/controls/chart/views/ChartEvent',
'sap/viz/controls/chart/views/ESRIServicePanel',
'sap/viz/controls/chart/views/ESRIServiceColor'],
// @formatter:on
function($, CSSConst, OOUtil, VizControlBase, LangManager, ChartEvent, ESRIServicePanel, ESRIServiceColor) {

    var ESRIMapServiceSelector = function(div, uiconfig) {
      
      ESRIMapServiceSelector.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.ESRIMapServiceSelector";
        this._uiconfig = uiconfig;
        this._div = div;
        this._titleDiv$ = null;
        this._footerDiv$ = null;
        this._servicesDiv$ = null;
        this._servicePanel = null;
        this._serviceColor = null;
        this._btnDone$ = null;
        this._btnLayer$ = null;
        this._btnConfirm$ = null;
        
        this.createChildren();
    };

    OOUtil.extend(ESRIMapServiceSelector, VizControlBase);


    ESRIMapServiceSelector.prototype.createChildren = function() {
        
        this._titleDiv$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-title').
        html(LangManager.get('VIZ_CHART_IMPORT_ESRI_CUSTOM_SERVICE')).appendTo($(this._div));
      
        this._servicesDiv$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-panel').appendTo($(this._div));
        
        this._servicePanel = new ESRIServicePanel(this._servicesDiv$);
       
        this._serviceColor = new ESRIServiceColor(this._servicesDiv$);
               
        $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-gallery-close').on("click", function(){
           this.hide();
        }.bind(this))
        .appendTo($(this._div));
        
        this._servicePanel.addEventListener(ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED, function(event){
            if(event.data.serviceId){
              this._btnConfirm$.show();
              this._btnDone$.hide();
            }else{
              this._btnConfirm$.hide();
              this._btnDone$.show();
            }
            
        }.bind(this));
        
        this._footerDiv$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-footer').appendTo($(this._div));
          
        this._btnDone$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-button-done')
          .html(LangManager.get('VIZ_CHART_CONFIRM'))
          .on("click", function(){
              this.hide();
              this._dispatchEvent(new ChartEvent(ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED, this, {
                   serviceId : this._servicePanel.getSelectedService().id,
                   color: this._serviceColor.getColor()
              }));
             
          }.bind(this))
          .appendTo(this._footerDiv$);
        
        this._btnConfirm$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-button-confirm')
        .html(LangManager.get('VIZ_CHART_NEXT'))
        .on("click", function(){
          this._btnConfirm$.hide();
          this._btnDone$.show();
          this._btnLayer$.show();
          this._servicePanel.hide();
          this._serviceColor.init(this._servicePanel.getSelectedService().url);
          this._serviceColor.show();
        }.bind(this))
        .appendTo(this._footerDiv$);
          
        this._btnLayer$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-button-layer')
           .html(LangManager.get('VIZ_CHART_BACK'))
           .on("click", function(){
             this._servicePanel.show();
             this._serviceColor.hide();
             this._btnConfirm$.show();
             this._btnLayer$.hide();
             this._btnDone$.hide();
          }.bind(this))
         .appendTo(this._footerDiv$);
      
        
        this._servicePanel.show();
        this._serviceColor.hide();
        this._btnConfirm$.show();
        this._btnLayer$.hide();
        this._btnDone$.hide();
    };
    
    ESRIMapServiceSelector.prototype.show = function(services, token, selectedServiceId){
      
        
        this._servicePanel.init(services, token, selectedServiceId);
        
        if(!selectedServiceId){
          this._btnConfirm$.hide();
          this._btnDone$.show();
        }else{
          this._btnLayer$.hide();
          this._btnDone$.hide();
          this._btnConfirm$.show();
        }
        
        this._servicePanel.show();
        this._serviceColor.hide();
        
        $(this._div).show();
    }
    
    ESRIMapServiceSelector.prototype.hide = function(){
      $(this._div).hide();
    }
    
    return ESRIMapServiceSelector;
});


define('sap/viz/controls/chart/views/EsriNoService',['jquery', 
        'sap/viz/controls/common/constants/CSSConst', 'sap/viz/controls/common/managers/LangManager' ], function setup($, CSSConst, langManager){
     var EsriNoService = function(div){
       this.__className = "sap.viz.controls.chart.views.EsriNoSerive";
         this._div = div;
         this._titleDiv$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-no-service-title').
         html(langManager.get('VIZ_CHART_IMPORT_ESRI_CUSTOM_SERVICE')).appendTo($(this._div));
         this._messageDiv$ =   $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-no-serive-message').
         html(langManager.get('VIZ_CHART_NO_ESRI_SERVICE')).appendTo($(this._div));
         $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-gallery-close').on("click", function(){
           this.hide();
        }.bind(this))
        .appendTo($(this._div));
         
     };
     
     EsriNoService.prototype.hide = function(){
       $(this._div).hide();
     };
     
     EsriNoService.prototype.show = function(){
       $(this._div).show();
     };
     
     return EsriNoService;
});
// @formatter:off
define('sap/viz/controls/chart/views/MapView',[
    'require',
    'jquery',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/constants/MapProviderConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/chart/views/ESRIServiceSelector',
    'sap/viz/controls/chart/views/EsriNoService'
],
function(r, $, GlobalConfig, ChartConst, DatasetTypeConst, MapProviderConst, Event, FeedEvent, FeedItemType, FeedUtils, LangManager,
    OOUtil, utils, ChartTypeUtil, TrellisUtils, VizUtils, CSSConst,
    ChartEvent, ChartConfig, View, IncompleteGhost, AnalyticalType, FeedItem, ESRIServiceSelector, EsriNoService) {
// @formatter:on
    var require = r || require;

    var reorderArray = function(array, from, to) {
      array.splice(to, 0, array.splice(from, 1)[0]);
    };

    /**
     * MapView View represent a CVOM chart.
     */
    var MapView = function(div/*HTMLDivElement*/, options, libFolderPath, chartModelProvider) {
        MapView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.MapView";
        this._mapselector$ = null;
        this._mapNoService$ = null;
        this._mapNoService = null;
        this._mapServiceSelector = null;
        //this._refresh$ = null;
        this._esriservices = null;
        this._selectedServiceId = undefined;
        this._loadedViz = null;
        this._mapInitialized = false;
        this._updateCache = null; //to cache update parameter before ESRI initialized
        this._createChildren();

        //sap.viz.extapi.env.Template.addListener($.proxy(this.changeTemplate, this)); why add this?
        //should remove this in map view, will cause recreate in some cases
        sap.viz.extapi.env.Template.removeListener(this._changeTemplateFunc);
    };

    OOUtil.extend(MapView, View);

    MapView.prototype._createChildren = function() {
       MapView.superclass._createChildren.apply(this, arguments);

       this._createESRIMapServiceSelector();

    };

    MapView.prototype._createESRIMapServiceSelector = function(){
       this._mapselector$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector').appendTo($(this._div));
       this._mapNoService$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX  + 'map-no-service').appendTo($(this._div));
       this._mapNoService = new EsriNoService(this._mapNoService$);
       this._mapNoService.hide();
       this._mapServiceSelector = new ESRIServiceSelector(this._mapselector$);
       this._mapServiceSelector.addEventListener(ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED, this._esriServiceChanged.bind(this));
       this._mapServiceSelector.hide();
    }

    MapView.prototype._esriServiceChanged = function(e){
       var serviceId = e.data.serviceId;
       this._selectedServiceColor = e.data.color;
       this._enableService = true;

       if(!this._selectedServiceId){
         this._chartModelProvider().extensionValues({
           mapBuilder : {
               mapservice : {
                   showRadio : true,
                   checked :  this._enableService
               }
           }
        });
       }

        this._selectedServiceId = serviceId;
        this._changeBaseMap({serviceId:serviceId, color: this._selectedServiceColor});

    };

    MapView.prototype._changeBaseMap = function (data){
      var id = data.serviceId;
      var color = data.color;
      var esriProvider;
      if(!id){
         esriProvider = new sap.viz.geo.basemap.esri.Provider({ basemap: this._chart.baseMap().toJSON().options.basemap});

      }else{

         var selectedService = this._esriservices.filter(function(service){
           return service.id === id;
        });

         var service = [{}];
         service[0].type = sap.viz.geo.basemap.esri.Provider.ARCGIS_SERVICE_TYPE_FEATURE;
         service[0].url =  selectedService[0].url;
         service[0].options = { outFields: ["*"]};
         service[0].color = color;
         esriProvider = new sap.viz.geo.basemap.esri.Provider({
                         extent : new esri.geometry.Extent(-115, -34, 115, 7),
                         basemap: this._chart.baseMap().toJSON().options.basemap},
                         service);
      }
      this._chart.baseMap(esriProvider);
    };

    MapView.prototype._showRefreshButton = function(){
       this._refresh$.css( { left : $(this._div).width()/2 - this._refresh$.width()/2 });
       this._refresh$.css( { top : $(this._div).height()/2 - this._refresh$.height()/2 + 40});
       this._refresh$.show();
    }

    MapView.prototype.modelChanged = function(model, options){
        if (options.vizTypeChanged) {
            this.showLoadingIcon();
        }

        if(options.feedingItemsChanged && options.feedsChangedInfo && options.feedsChangedInfo.items){
            var idx = options.feedsChangedInfo.items[0];
            var feeds = model.feedingItems()[idx];
            var data = new FeedEvent(FeedEvent.FEEDS_CHANGED, this, {
                'datasetType' : DatasetTypeConst.FlatTableDataset,
                'feeds' : feeds,
                'layerIdx' : idx
            });
            this._dispatchEvent(new Event(View.DISPATCH_PROPERTY_EVENT, this, data));
        }

        if (options.extensionValuesChanged) {
            var extensionValues = model.extensionValues();

            if (extensionValues.mapBuilder) {
                var values = extensionValues.mapBuilder;
                var map = this._chart;

                if (values && map) {

                    if (values.layer) {
                        var action = values.layer.action;
                        var idx = values.layer.idx;
                        var fromIdx = values.layer.from;
                        var toIdx = values.layer.to;

                        if (action === 'add') {
                            map.addLayer(new sap.viz.geo.dataviz.Layer({
                                viz : new sap.viz.geo.dataviz.Choropleth(),
                                legendVisible : true
                            }), true);

                            var feedingItems = model.feedingItems();
                            feedingItems.push(values.layer.feeds);
                            model.feedingItems(feedingItems, false);

                        } else if (action === 'delete' && idx >= 0) {
                            // TODO: The map might be not containing any layer at that time, so maybe we should use
                            // map.then() function in the future.
                            map.removeLayer(map.getLayer(idx));

                            //update viz model but no need to notify
                            var feedingItems = model.feedingItems();
                            feedingItems.splice(idx,1);
                            model.feedingItems(feedingItems, false);

                        } else if (action === 'reorder' && fromIdx >= 0 && toIdx >= 0) {

                            map.reorderLayer(map.getLayer(fromIdx), toIdx);

                            //update viz model but no need to notify
                            var feedingItem = model.feedingItems();
                            reorderArray(feedingItem, fromIdx, toIdx);
                            model.feedingItems(feedingItem, false);

                        } else if (action === 'show' && idx >= 0) {
                            var layer = map.getLayer(idx);
                            layer.visibility(true);

                        } else if (action === 'hide' && idx >= 0) {
                            var layer = map.getLayer(idx);
                            layer.visibility(false);

                        } else if (action === 'changeVizType' && idx >= 0) {
                            var layer = map.getLayer(idx);
                            var layerVizType = values.layer.vizType;
                            var feedItems = values.layer.feeding;
                            var feeding,feedItem,geoLocationFeed,geoFeatureColorFeed,colorAnalysisType,geoFeatureSizeFeed;
                            if(feedItems !== null) {
                            for(var i = 0; i < feedItems.length ; i++ ){
                                feedItem = feedItems[i];
                                if(feedItem) {
                                for(var j = 0; j < feedItem.values().length; j++){
                                    var id = feedItem.values()[j].id();
                                    if(feedItem.id() === "location"){
                                        geoLocationFeed = id;
                                    }else if(feedItem.id() === "color"){
                                        geoFeatureColorFeed = id;
                                        colorAnalysisType = feedItem.type();
                                    }else if(feedItem.id() === "size"){
                                        geoFeatureSizeFeed = id;
                                    }
                                }
                                }
                            }
                            layer.data(null);
                            }
                            if (layerVizType === 'choropleth') {
                                if(feedItems !== null) {
                                feeding = {};
                                if(geoLocationFeed){
                                    feeding.location = geoLocationFeed;
                                }
                                if(colorAnalysisType === FeedItemType.MEASURE && geoFeatureColorFeed){
                                    feeding.color = geoFeatureColorFeed;
                                }

                                layer.viz(new sap.viz.geo.dataviz.Choropleth(),feeding);
                                } else {
                                layer.viz(new sap.viz.geo.dataviz.Choropleth());
                                }
                            } else if (layerVizType === 'bubble') {
                                if(feedItems !== null) {
                                feeding = {};
                                if(geoLocationFeed){
                                    feeding.location = geoLocationFeed;
                                }
                                if(geoFeatureSizeFeed){
                                    feeding.size = geoFeatureSizeFeed;
                                }
                                if(colorAnalysisType === FeedItemType.DIMENSION && geoFeatureColorFeed){
                                    feeding.color = geoFeatureColorFeed;
                                }

                                layer.viz(new sap.viz.geo.dataviz.Bubble({
                                    cluster : {
                                        enabled : false
                                    }
                                }),feeding);
                                } else {
                                    layer.viz(new sap.viz.geo.dataviz.Bubble({
                                        cluster : {
                                            enabled : false
                                        }
                                    }));
                                }

                            } else if (layerVizType === 'marker') {
                                if(feedItems !== null) {
                                feeding = {};
                                if(geoLocationFeed){
                                    feeding.location = geoLocationFeed;
                                }
                                layer.viz(new sap.viz.geo.dataviz.Marker({
                                    width : 12,
                                    height : 20,
                                    xoffset : -6,
                                    yoffset : -20,
                                    cluster : {
                                        enabled : false
                                    }
                                }),feeding);
                                } else {
                                  layer.viz(new sap.viz.geo.dataviz.Marker({
                                        width : 12,
                                        height : 20,
                                        xoffset : -6,
                                        yoffset : -20,
                                        cluster : {
                                            enabled : false
                                        }
                                    }));
                                }

                            }

                        } else if (action === 'changeProperties' && idx >= 0) {
                            var layer = map.getLayer(idx);
                            var propKey = values.layer.propKey;
                            var propValue = values.layer.propValue;
                            if (propKey === 'markerCluster' || propKey === 'bubbleCluster') {
                                // TODO: Consolidate the duplicate code new Marker().
                                layer.viz().properties({
                                  cluster : {
                                    enabled : propValue
                                  }
                                });

                            }
                        }
                    }else if(values.mapservice){
                       if(values.mapservice.action === 'choose'){
                         this._chooseMapServiceAsBaseMap();
                       }else if(values.mapservice.action === 'enable'){
                       /* var topPos = $(this._div).height()/2 - this._mapselector$.height()/2;
                        var leftPos = $(this._div).width()/2 - this._mapselector$.width()/2;
                        this._mapselector$.css({top: topPos, left: leftPos});
                         */
                         this._enableService = true;
                         this._changeBaseMap({serviceId: this._selectedServiceId, color: this._selectedServiceColor});
                       } else if(  values.mapservice.action === 'disable' ){
                         this._mapServiceSelector.hide();
                         this._enableService = false;
                         this._changeBaseMap({});
                       }
                    }

                }
            }
        }

    };




      MapView.prototype.data = function(data) {
        try {
          if (arguments.length > 0) {
            if (this._chart) {
              if(! data.length ){
                return this;
              }
              var layers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
              var len = layers.length> data.length ? data.length : layers.length;
              for ( var i = 0; i < len; ++i) {
                if (data[i]) {
                  layers[i].data(data[i]);
                }
              }
              return this;
            } else {
              throw LangManager.get('VIZ_CHART_UPDATE_DATA_FAILED')
                  + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
          } else {
            var dataArr = [];
            // TODO Remove get method
            if (this._chart) {
              var layers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
              for ( var i = 0; i < layers.length; ++i) {
                dataArr.push(layers[i].data());
              }
            }
            return dataArr;
          }
        } catch (error) {
          //if (console) {
          //  console.log("Failed to update chart data : " + error);
          //}
          throw LangManager.get('VIZ_CHART_UPDATE_DATA_FAILED') + error;
        }
      };



    MapView.prototype.action = function(keyName, args) {
      if (this._chart) {
        if(this._chart.__instance){
          return this._chart.__instance.action(keyName, args);
        }else{
          return this._chart;
        }
      } else {
          throw LangManager.get('VIZ_CHART_TRIGGER_ACTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
      }
  };

    /**
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * Return the chart JSON String.
     */
    MapView.prototype.exportViz = function(options) {
      if(!this._isMapInitialized() && this._loadedViz){
         //something wrong, but need to return original definition after calling load viz
         return this._loadedViz;
      }

      if (this._chart) {
        var result = this._chart.toJSON(options);
        result.esriServices = [this._exportEsriService()];
        return result;
      } else {
          throw LangManager.get('VIZ_CHART_SERIALIZE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
      }

    };

    MapView.prototype._exportEsriService = function(){
     return {serivceId: this._selectedServiceId, color: this._selectedServiceColor, enableService: !!this._enableService};
    };

    MapView.prototype._loadEsriService = function(vizJSON){
      if(vizJSON.esriServices && vizJSON.esriServices.length > 0){
        this._selectedServiceId = vizJSON.esriServices[0].serivceId;
        this._selectedServiceColor = vizJSON.esriServices[0].color;
        this._enableService = vizJSON.esriServices[0].enableService;
      }
    };

    /**
     * Create ChartView with new options and templateId.
     * @param {JSON} options
     */


    MapView.prototype.loadViz = function(vizJSON) {

      this._destroyChartInstance();

      if(!vizJSON.baseMap){
         this._createChartInstance();
         return;
      }

      this._loadedViz = utils.clone(vizJSON);
      this._loadEsriService(this._loadedViz);

      this._hasChartInstance = true; //set to true for updating cases
      this._mapInitialized = false;
      this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this, vizJSON.type));
      this._updateDescription();
      this.showLoadingIcon();

      var properties = {
          //tooltip : this.properties().tooltip
      };

      if(vizJSON.properties && vizJSON.properties.tooltip){
         properties.tooltip = vizJSON.properties.tooltip;
      }

      var chartDiv$ = this._chartLayer$;
      var ins = sap.viz.api.core.createViz({
        type : vizJSON.type,
        container : chartDiv$.get(0),
        options: properties
      });

      this._chart = ins.action("getMap");
      this._chart.__instance = ins;

      /*
       * bind event listener registered by application by vizframe.vizOn
       */
      this._bindExternalEventListener();

      if(vizJSON.baseMap.id.indexOf("esri") !== -1){
        this._logonESRI(function(){
           sap.viz.geo.LocationRepository.useLocal({
            'resourcePath' : this._geoResourcePath
           });

           this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_LOADING'));
           this._chart.fromJSON(vizJSON);
           this._postVizProcess(this._options);
        }.bind(this), function(){

          //set to false
          this._hasChartInstance = false;

          this._chartModelProvider().extensionValues({
            map:{
              logOnFail: true
            }
          });

          //TODO refactor this to more reasonable way
          if(this._chart){
             this._chart._fireEvent("initialized");
          }

        }.bind(this));

      }else if(vizJSON.baseMap.id.indexOf("cvom") !== -1){

        sap.viz.geo.LocationRepository.useLocal({
          'resourcePath' : this._geoResourcePath
        });

        this._chart.fromJSON(vizJSON);
        this._postVizProcess(this._options);
      }else if(vizJSON.baseMap.id.indexOf("navtaq")){

        this._chart.fromJSON(vizJSON);
        this._postVizProcess(this._options);
      }

    };

    MapView.prototype._setChartSize = function(width, height){
        if(this._chart && this._chart.__instance){
             this._chart.__instance.size({
                width : width,
                height : height
            });
        }
    };

    /**
     * updata ghost description.
     */
    MapView.prototype._updateDescription = function(description) {
        if (description) {
            this._descriptionLayer$.show();
            this._descriptionLayer$.text(description);
            this._showDescription();
        } else {
            this._descriptionLayer$.hide();
            this._chartHolder$.css({
                'opacity' : ""
            });
        }
        this.hideLoadingIcon();
    };

    MapView.prototype.getTitleByFeeding = function(){
        return '';
    };

    MapView.prototype._logonESRI = function(onSuccess, onFail){
      var disabled = sap.viz.geo.basemap.esri.Authentication.credential().disabled;
      if(disabled){
         this._updateDescription(sap.viz.geo.basemap.esri.Authentication.credential().description);
         onFail.call(this);
         return;
      }


      var esriToken = sap.viz.geo.basemap.esri.Authentication.credential().accessToken;
      if(!esriToken){
          this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_LOG_ON'));
          sap.viz.geo.basemap.esri.Authentication.login({ credential : {} },
          function(){
               this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_LOADING'));
               onSuccess.call(this);
          }.bind(this),

          function(error){
              if(error === null|| error === undefined || error === ''){
                this._updateDescription(LangManager.get('VIZ_CHART_ESRI_SERVICES_UNACCESSIBLE'));
              }else{
                this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_AUTHENTICATION_FAIL') + ": " + error);
              }

              onFail.call(this);

          }.bind(this));
      }else{
         this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_LOG_ON'));
         sap.viz.geo.basemap.esri.Authentication.checkLoginStatus(esriToken,
             function(){
               onSuccess.call(this);
             }.bind(this),

            function(error){
               if(error === null|| error === undefined || error === ''){
                 this._updateDescription(LangManager.get('VIZ_CHART_ESRI_SERVICES_UNACCESSIBLE'));
               }else{
                 this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_AUTHENTICATION_FAIL') + ": " + error);
               }

               onFail.call(this);

             }.bind(this)
          )
      }
    };

    /**
     * create chart instance
     */
    MapView.prototype._createChartInstance = function() {

        var options = this._options;

        var chartDiv$ = this._chartLayer$;
        var descriptionDiv$ = this._descriptionLayer$;
        var chartHolderDiv$ = this._chartHolder$;
        var vizType = ChartConst.TYPE_GEO_MAP;

        this._destroyChartInstance();

        try {
            // send chart changing event
            this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this, vizType));

            //this._updateDescriptionByOptions(options);

            var ins = sap.viz.api.core.createViz({
              type : vizType,
              container : chartDiv$.get(0),
              options : {
                  tooltip : this.properties().tooltip
              }
            });

            this._chart = ins.action("getMap");
            this._chart.__instance = ins;

            /*
             * bind event listener registered by application by vizframe.vizOn
             */
            this._bindExternalEventListener();

            /*
             * set has instance now for updating case, esri is async log on if update is called immediately
             * want to go for update workflow
             */
            this._hasChartInstance = true;
            this._mapInitialized = false;

            //Hard code now. There has bugs that when switching between other chart, the default properties will lost
            //As a result, the exception will throw if could not access this._options.geomap.provider, check change history
            var provider = MapProviderConst.ESRI;

            if(provider === MapProviderConst.ESRI){
              this._logonESRI(function(){

                this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_LOADING'));

                var basemap =  this.createBaseMap(provider, {});

                this._chart.baseMap(basemap, this._afterMapInitialized.bind(this));

                this._postVizProcess(options);

              }.bind(this), function(){

                //set to false
                this._hasChartInstance = false;

                this._chartModelProvider().extensionValues({
                  map:{
                    logOnFail: true
                  }
                });

                //Refactor to more reason way
                if(this._chart){
                   this._chart._fireEvent("initialized");
                }

              }.bind(this));
            }else{
                var basemap =  this.createBaseMap(provider, {});
                this._chart.baseMap(basemap, this._afterMapInitialized.bind(this));
                this._postVizProcess(options);
            }


        } catch (error) {
            //if (console) {
            //    console.log("Failed to create chart : " + error);
            //}
            var errorMsg = LangManager.get('VIZ_CHART_CREATE_CHART_FAILED') + error;
            if (!FeedUtils.getVizFeeds(vizType)) {
                this._updateDescription(utils.substitute(LangManager.get("VIZ_CHART_INVALID_VIZ_TYPE"), vizType));
            } else {
                this._updateDescription(errorMsg);
            }
            // clean up
            chartDiv$.html("");
            this._chart = null;
            this._hasChartInstance = false;
            throw errorMsg;
        }

    };


    MapView.prototype._afterMapInitialized = function(data) {

      var triggerCVOM = $.proxy(function(type, data) {
        this._dispatchEvent(new ChartEvent(ChartEvent.TRIGGER_CVOM_EVENT, this, {
            type : type,
            data : data
        }));
      }, this);

      this.hideLoadingIcon();
      this._updateDescription();
      var vizModel = this._chartModelProvider();

      triggerCVOM("initialized", data);

      if(!this._loadedViz && this._isMapInitialized() === false){

        //not reload and initialize first time, when add map service, the initialized will thrown again, need to refine in map later
        this._chartModelProvider().extensionValues({
          map : {
              created : true
          }
        });
      }else if(this._loadedViz){
        this._restoreMapBuilder();
      }

      this._mapInitialized = true;

      if(this._updateCache){
         this.update(this._updateCache);
         this._updateCache = null;
      }


    };

    /**
     *  bind event listener registered by application
     */
    MapView.prototype._bindExternalEventListener = function(){

      if(this._chart){
        Object.keys(this._onEventMap).forEach($.proxy(function(key) {
          var callback = this._onEventMap[key];
          this._chart.on(key, callback);
        }, this));
      }
    };

    /**
     * Post process after create viz instance.
     */
    MapView.prototype._postVizProcess = function(options) {

        var triggerCVOM = $.proxy(function(type, data) {
          this._dispatchEvent(new ChartEvent(ChartEvent.TRIGGER_CVOM_EVENT, this, {
              type : type,
              data : data
          }));
        }, this);


        this._chart.on("initialized.chartview", this._afterMapInitialized.bind(this));


        this._chart.on("mapChanged.chartview", function(){this._chartModelProvider().extensionValues({})}.bind(this));

        var _this = this;
        this._chart.on("selectData.chartview", function(selectData) {
            _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
            triggerCVOM("selectData", selectData);
        });

        this._chart.on("deselectData.chartview", function(deselectData) {
            _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
            triggerCVOM("deselectData", deselectData);
        });

        this._chart.on("showTooltip.chartview", function(data) {
            triggerCVOM("showTooltip", data);
        });

        this._chart.on("hideTooltip.chartview", function(data) {
            triggerCVOM("hideTooltip", data);
        });

        this._hasChartInstance = true;

        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGED, this, this._chart));
    };

    MapView.prototype.getTemplateId = function(dataset){
        return this._templateId;
    };

    MapView.prototype._isMapInitialized = function(){
        return  this._mapInitialized;
    }
    /**
     * Update chart with updated options.
     * @param {Object} updates
     */
    MapView.prototype.update = function(updates) {
        if(this._isMapInitialized()){
          sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_mapView-update');
          var errorMsg;
          try {
              if (updates.data) {
                  this._options.data = updates.data;
              }
              var updateProps = updates.properties;
              if (updateProps) {
                  this._options.properties = updateProps;
              }
              if ( !this._chart) {
                  errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                  this._updateDescription(errorMsg);
                  sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_mapView-update');
                  throw errorMsg;
              }

              this._updateDescription();
              this._chartLayer$.css('opacity', '');
            //  this._updateChartSize(true);

              var map = this._chart;
              if (map) {
                  if(updates.data){
                    for(var i=0; i<updates.data.length; i++){
                        if(updates.data[i] || updates.data[i] === null){
                            var layer = map.getLayer(i);
                            var feeding = updates.feeding ? updates.feeding[i] : null;

                            if(layer){
                               layer.data(updates.data[i], feeding, true);
                            }

                        }
                    }
                  }

                  if (updateProps) {
                    var layersProps = updateProps.layers;
                    if (layersProps) {
                      layersProps.forEach(function(props, index) {
                        if (props) {
                          updateFormats(map.getLayer(index), props.formats);
                        }
                      });
                    }
                  }
              }

              sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_mapView-update');
              return this;
          } catch (error) {
              //if (console) {
              //    console.log("Failed to update chart : " + error);
              //}
              errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + error;
              this._updateDescription(errorMsg);
              sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_mapView-update');
              throw errorMsg;
          }
          sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_mapView-update');
        }else{
          this._updateCache = updates;
        }
    };

    var legendFeedMap = {
      bubble : {
        measureFeedId : "size",
        legendPropName : "sizeLegend"
      },
      choropleth : {
        measureFeedId : "color",
        legendPropName : "mbcLegend"
      }
    }

    function updateFormats(layer, formats) {
      if (layer && formats) {
        var viz = layer.viz();
        var vizType;
        if (viz instanceof sap.viz.geo.dataviz.Marker) {
          vizType = "marker";
        } else if (viz instanceof sap.viz.geo.dataviz.Bubble) {
          vizType = "bubble";
        } else if (viz instanceof sap.viz.geo.dataviz.Choropleth) {
          vizType = "choropleth";
        }

        if (vizType) {
          var legendFeed = legendFeedMap[vizType];
          if (legendFeed) {
            var feedId = legendFeed.measureFeedId;

            function getFormat(category) {
              var format = formats[category];
              if (format) {
                format = format[feedId];
                format = format && format[0];
              }

              return format;
            }

            var defaultFormat = getFormat("viz");

            if (defaultFormat) {
              var props = {};
              props[legendFeed.legendPropName] = {
                formatString : defaultFormat
              };
              viz.properties(props);
            }

            var tooltipFormat = getFormat("tooltip") || defaultFormat;
            if (tooltipFormat) {
              layer.tooltipFormat(tooltipFormat);
            }
          }
        }
      }
    };

    /**
     * Update chart feeding.
     * @param {Object} feeding
     */
      MapView.prototype.feeding = function(feeding, disableMorphing) {
        try {
          if (this._chart) {

            if (arguments.length > 0 && feeding.length > 0) {
              var layers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
              var length = layers.length > feeding.length ? feeding.length
                  : layers.length;
              for ( var i = 0; i < length; ++i) {
                if (feeding[i]) {
                  layers[i].feeding(feeding[i]);
                }
              }
              return this;
            } else {
              var feeds = [];
              var layers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
              for ( var i = 0; i < layers.length; ++i) {

                var feed = layers[i].feeding();
                feeds.push(feed);
              }
              return feeds;
            }
          } else {
            throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED')
                + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
          }
        } catch (error) {
          //if (console) {
          //  console.log("Failed to update chart feeding : " + error);
          //}
          throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + error;
        }
      };

      MapView.prototype.getValidProperties = function(properties, chartType) {
          if (chartType === ChartConst.TYPE_GEO_MAP) {
              return properties;
          }
          return VizUtils.getValidProperties(properties, chartType);
      };

        /**
         * Update chart properties.
         *
         * @param {Object} properties
         */
    MapView.prototype.properties = function(properties) {
        try {
            if (arguments.length > 0) {
                this._options.properties = properties;
                if (this._chart) {
                    var map = this._chart;
                    var mapLayers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
                    for (var i = 0; i < mapLayers.length; i++) {
                         var layer = mapLayers[i];
                         if (layer && properties.legend) {
                             layer.legendVisibility(properties.legend.visible);
                         }
                    }

                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                return this._options.properties;
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to update chart properties : " + error);
            //}
            throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + error;
        }
    };


    MapView.prototype.copyData = function(type, data) {
      if (data && data.length > 0) {
         var result = [];
          for ( var i = 0; i < data.length; i++) {
            if (data[i] && data[i].id
                && (data[i].id === "sap.viz.data.FlatTableDataset")) {
              var ftData = sap.viz.api.data.FlatTableDataset.fromJSON(data[i]);
              result.push(ftData);
            } else
              result.push(data[i]);
          }
          return result;
      } else {
        return data;
      }
    };

    MapView.prototype.buildFeedings = function(type, data, feeds){
        var result = [];
        for(var i=0; i<feeds.length; i++){
            result[i] = {};
            if(!feeds[i] || feeds[i].length ===0){
                continue;
            }
            feeds[i].forEach(function(f) {
                if (f._values && f._values.length) {
                   if(f._values[0].type() === AnalyticalType.HIERARCHY) {
                      for(var j = 0; j < f._values[0].hierarchyLevels().length; j++) {
                        var level = f._values[0].hierarchyLevels()[j];
                        // use hierarchy level object id, in case its
                        // analysis object is also used in another
                        // hierarchy level object, but with a
                        // different hierarchy level name.
                        if(level.selected()) {
                           result[i][f._id] = level._id;
                           break;
                        }
                      }
                    }else{
                      result[i][f._id] = f._values[0]._id;
                    }

                }
            });
        }

        return result;
    };
    /*
     * Create base map with different types for Geo Map.
     */
    MapView.prototype.createBaseMap = function(mapType, options) {
        var baseMap = null;

        if (mapType === MapProviderConst.ESRI) {

          //use offline content for ESRI
          sap.viz.geo.LocationRepository.useLocal({
              'resourcePath' : this._geoResourcePath
          });

          // Default base map type is 'topo'.
          var type = 'topo';
          if (options && options.type) {
              type = options.type;
          }

          return new sap.viz.geo.basemap.esri.Provider({
              //extent : new esri.geometry.Extent(-115, -34, 115, 76),
              basemap : type
          });

        } else if (mapType === MapProviderConst.NAVTEQ) {
            var option = {
                center : [40.72, -84],
                zoomLevel : 5
            };

            return new sap.viz.geo.basemap.navteq.Provider(option);

        } else {

            sap.viz.geo.LocationRepository.useLocal({
                'resourcePath' : this._geoResourcePath
            });

            var option = {
                center : [-84, 40.72],
                scale : 6000
            };

            return new sap.viz.geo.basemap.cvom.Provider(options);
        }
    };

    MapView.prototype.FeedsToJSON = function(feeds) {
        var feedingItemsJSON = [];
        for(var i = 0; i < feeds.length; i++) {
            feedingItemsJSON[i] = FeedItem.toJSON(feeds[i]);
        }
        return feedingItemsJSON;
    };

    MapView.prototype.FeedsFromJSON = function(valueJSON){
        var feeds = [];
        for(var i = 0; i < valueJSON.length; i++) {
            feeds[i] = FeedItem.fromJSON(valueJSON[i]);
        }
        return feeds;
    };

    MapView.prototype._queryEsriServices = function(callback){
      var credential = sap.viz.geo.basemap.esri.Authentication.credential();
      if(credential != null){
         var queryURL = "https://www.arcgis.com/sharing/rest/content/users/" + credential.username;

         $.ajax({
         url : queryURL,
         data : {
             token : credential.accessToken,
             f : "json"
         },
         dataType : "json",
         type : "POST",
         success :
             function (response) {
                 if(response.items){//For new account, the response.items.length === 0

                    this._esriservices = response.items.filter(function(item){
                                              return item.type === "Feature Service";// only support services now.
                                         });

                    callback();
                 }

             }.bind(this)
        });
      }


    };

    MapView.prototype._chooseMapServiceAsBaseMap = function(){

      this._queryEsriServices(function(){
        if(this._esriservices && this._esriservices.length > 0){
          var topPos = $(this._div).height()/2 - this._mapselector$.height()/2;
          var leftPos = $(this._div).width()/2 - this._mapselector$.width()/2;
          this._mapselector$.css({top: topPos, left: leftPos});
          this._mapServiceSelector.show(this._esriservices,
               sap.viz.geo.basemap.esri.Authentication.credential().accessToken,
               this._selectedServiceId);
        }else{
          var topPos = $(this._div).height()/2 - this._mapNoService$.height()/2;
          var leftPos = $(this._div).width()/2 - this._mapNoService$.width()/2;
          this._mapNoService$.css({top: topPos, left: leftPos});
          this._mapNoService.show();
        }


      }.bind(this));


    }

    MapView.prototype._getVizTypeByVizId = function(vizId){
        if(vizId === "sap.viz.geo.dataviz.Bubble"){
           return "bubble";
        }else if(vizId === "sap.viz.geo.dataviz.Marker"){
           return "marker";
        }else{
           return "choropleth";
        }

    };

    MapView.prototype._restoreMapBuilder = function(loadedViz){
         if(this._loadedViz && this._loadedViz.layers.length > 0){
            var builderstatus = [];
            var feedingItems = this._chartModelProvider().feedingItems();
            for(var i = 0; i < this._loadedViz.layers.length; i++){
                var vizType = this._getVizTypeByVizId(this._loadedViz.vizs[this._loadedViz.layers[i].vizIndex].id);
                var title = "";
                if(feedingItems[i].length > 0){
                   if(feedingItems[i][0].values().length > 0){
                      title = feedingItems[i][0].values()[0].name();
                   }
                }

                var clusterChecked = false;
                if(vizType === "bubble" || vizType === "marker"){
                  clusterChecked = this._loadedViz.vizs[this._loadedViz.layers[i].vizIndex].options.cluster.enabled;
                }
                var section = {
                    checked: this._loadedViz.layers[i].options.visible,
                    feeding: {
                      feeding: this.FeedsToJSON(feedingItems[i])
                    },
                    title : title,
                    titleText : vizType,
                    vizType: vizType,
                    sortable: true,
                    clusterChecked : clusterChecked
               };

               builderstatus.push(section);
            }

            this._chartModelProvider().extensionValues({
               mapBuilder:{
                 status: builderstatus
               }
            });

         }
         if(this._loadedViz && this._selectedServiceId)
         {
           this._queryEsriServices(function(){
             if(this._esriservices && this._esriservices.length > 0){
             this._chartModelProvider().extensionValues({
               mapBuilder : {
                 mapservice : {
                     showRadio : true,
                     checked : !!this._enableService
                 }
               }
             });
           }

         }.bind(this));
        }
         this._loadedViz = null;
    }

   MapView.prototype.exportable = function() {
      return this._chart != null;
   };

   MapView.prototype.exportToSVGString = function(option) {
       return "";
   };

   MapView.prototype.queryProperties = function(options) {
       return {};
   };

   MapView.prototype.updateProperties = function(options) {
   };

   // Currently map does not support property zone
   MapView.prototype.selectedPropertyZone = function() {
      if (arguments.length) {
        return this;
      }

      return null;
   };

    return MapView;
});

// @formatter:off
define('sap/viz/controls/chart/views/TableView',[
    'jquery',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/constants/MapProviderConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/common/utils/IncompleteGhost'
],
function($, GlobalConfig, ChartConst, DatasetTypeConst, MapProviderConst, Event, FeedEvent, FeedUtils, LangManager,
    OOUtil, utils, ChartTypeUtil, TrellisUtils, VizUtils, CSSConst,
    ChartEvent, ChartConfig, View, IncompleteGhost) {
// @formatter:on
    /**
     * TableView View represent a CVOM chart.
     */
    var TableView = function(div/*HTMLDivElement*/, options, libFolderPath, chartModelProvider) {
        TableView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.TableView";

        this._createChildren();
        sap.viz.extapi.env.Template.addListener($.proxy(this.changeTemplate, this));
    };

    OOUtil.extend(TableView, View);

    TableView.prototype._createChildren = function() {
        TableView.superclass._createChildren.apply(this, arguments);

        this._createDropZone();
    };

    /**
     * Copied from ChartView for supporting Title
     * Get title zone for chart instance.
     * @returns {Array}
     */
    TableView.prototype.getTitleZone = function() {
        if (!this._chart) {
            return [];
        }
        var thisChartId = this._chart.type;
        var zone;
        try {
            zone = this._chart.propertyZone();
        } catch(error) {
            return [];
        }
        var titleZone = [];
        for (var i = 0; i < zone.length; i++) {
            if (zone[i].name == 'title') {
                titleZone = zone[i].bound[0];
                break;
            }
        }
        return titleZone;
    };

    /**
     * Copied from ChartView for supporting Title
     * Update chart properties.
     * @param {Object} properties
     */
    TableView.prototype.properties = function(properties, disableMorphing) {
        try {
            if (!disableMorphing) {
                this._requestMorphing = true;
            }
            if (arguments.length > 0) {
                this._options.properties = properties;
                if (this._chart) {
                    this._chart.properties(properties);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                if (this._chart) {
                    return this._chart.properties();
                } else {
                    return this._options.properties;
                }
            }
        } catch (error) {
        	//if(console) {
          //  	console.log("Failed to update chart properties : " + error);
          //  }
            throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + error;
        }
    };
    
    /**
     * Update chart css.
     * @param {Object} css
     */
    TableView.prototype.css = function(css) {
        try {
            if (arguments.length > 0) {
                // update css cache according to new css
                this._updateCssCacheByNewCss(css);
                this._options.css = css;
                if (this._chart) {
                    this._chart.css(css);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                if (this._chart) {
                    return this._chart.css();
                } else {
                    return this._options.css;
                }
            }
        } catch (error) {
            throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + error;
        }
    };

    /**
     * create chart instance
     */
    TableView.prototype._createChartInstance = function() {
        this._hasChartInstance = false;
        var options = this._options;
        var chartDiv$ = this._chartLayer$;
        var descriptionDiv$ = this._descriptionLayer$;
        var chartHolderDiv$ = this._chartHolder$;
        var vizType = options.type;

        this._supportMorphing = false;
        this._destroyChartInstance();

        try {
            // send chart changing event
            this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this, vizType));
            this._updateDescriptionByOptions(options);

            this._chart = sap.viz.api.core.createViz({
                type : vizType,
                data : options.data,
                feeding : options.feeding,
                properties : options.properties,
                css : options.css,
                events : options.events,
                container : chartDiv$.get(0)
            });
            this._postVizProcess(options);
        } catch (error) {
            //if (console) {
            //    console.log("Failed to create chart : " + error);
            //}
            var errorMsg = LangManager.get('VIZ_CHART_CREATE_CHART_FAILED') + error;

            if (!FeedUtils.getVizFeeds(vizType)) {
                this._updateDescription(utils.substitute(LangManager.get("VIZ_CHART_INVALID_VIZ_TYPE"), vizType));
            } else {
                this._updateDescription(errorMsg);
            }
            // clean up
            chartDiv$.html("");
            this._chart = null;
            this._hasChartInstance = false;
            throw errorMsg;
        }
    };
    /**
     * Post process after create viz instance.
     */
    TableView.prototype._postVizProcess = function(options) {
        Object.keys(this._onEventMap).forEach($.proxy(function(key) {
            var callback = this._onEventMap[key];
            this._chart.on(key, callback);
        }, this));

        this._hasChartInstance = true;
        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGED, this, this._chart));
    };

    TableView.prototype.buildFeedings = function(type, data, feeds) {
        var feeding = null;
        if (!data || ChartTypeUtil.isEmptyData(type, data)) {
            return feeding;
        }
        if (!VizUtils.hasFakeData(data) && !ChartTypeUtil.isEmptyData(type, data) && !FeedUtils.isEmptyFeeds(feeds)) {
            feeding = [];
            feeds.forEach(function(feedItem) {
                var id = feedItem.id();
                feeding[id] = [];
                feedItem.values().forEach(function(analysisObj) {
                    var item = {
                        "id" : analysisObj.id(),
                        "name" : analysisObj.name(),
                        "type" : analysisObj.type()
                    }
                    feeding[id].push(item);
                });
            });
        }
        return feeding;
    };

    /**
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * Need to override the function in View class for keeping the properties 
     * that will be updated by Table itself
     * Return the chart JSON String.
     */
    TableView.prototype.exportViz = function(options) {
      if (this._chart) {
        var result = this._chart.toJSON(options);
        return result;
      } else {
          throw LangManager.get('VIZ_CHART_SERIALIZE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
      }

    };
    
    return TableView;
});

// @formatter:off
define('sap/viz/controls/chart/ViewManager',[
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/chart/views/ChartView',
    'sap/viz/controls/chart/views/InfoChartView',
    'sap/viz/controls/chart/views/MapView',
    'sap/viz/controls/chart/views/TableView'
],
function(ChartConst, ChartTypeUtil, ChartView, InfoChartView, MapView, TableView){
// @formatter:on

    var typeView = {};
    var ViewManager = {};
    
    ViewManager._register = function(type, viewClass){
        if(type && viewClass){
            typeView[type] = viewClass;
        }
    };
    
    ViewManager._getViewClass = function(type){
        if(typeView.hasOwnProperty(type)){
            return typeView[type];
        } else if(ChartTypeUtil.isInfoChart(type)){
            return InfoChartView;
        } else {
            return ChartView;
        }
    };
    
    ViewManager.getViewClass = function(type){
        return ViewManager._getViewClass(type);
    };
    
    ViewManager._register(ChartConst.TYPE_GEO_MAP, MapView);
    ViewManager._register(ChartConst.TYPE_TABLE, TableView);
    ViewManager._register(ChartConst.TYPE_CROSSTAB, TableView);

    return ViewManager;
}
);

define('sap/viz/controls/chart/VizProxyHandler',['sap/viz/controls/runtime/VizProxy', 'sap/viz/controls/chart/views/ChartEvent'], function(VizProxy, ChartEvent) {
    var VizProxyHandler = function(chart) {
        this.__className = "sap.viz.controls.chart.VizProxyHandler";
        this._chart = chart;
        this._init();
    };

    VizProxyHandler.prototype._init = function() {
        this._operationMap = {};
        this._operationMap[VizProxy.GetTitleZoneOperation] = this._getTitleZone;
        this._operationMap[VizProxy.GetTitleTextOperation] = this._getTitleText;
        this._operationMap[VizProxy.SetTitleTextOperation] = this._setTitleText;
        this._operationMap[VizProxy.GetTitleTextByFeedingOperation] = this._getTitleTextByFeeding;
        this._operationMap[VizProxy.RestoreTitleTextOperation] = this._restoreTitleText;
        this._operationMap[VizProxy.SetTitleModeOperation] = this._setTitleMode;
        this._operationMap[VizProxy.IsFakeChartOperation] = this._isFakeChart;
        this._operationMap[VizProxy.IsTitleCustomizedOperation] = this._isTitleCustomized;
        this._operationMap[VizProxy.GetPropertiesOperation] = this._getProperties;
        this._operationMap[VizProxy.SetPropertiesOperation] = this._setProperties;
        this._operationMap[VizProxy.GetSelectionOperation] = this._getSelection;
        this._operationMap[VizProxy.SetDatasetOperation] = this._setDataset;
        this._operationMap[VizProxy.GetPropertyZonesOperation] = this._getPropertyZones;
        this._operationMap[VizProxy.SetPropertyZonesOperation] = this._setPropertyZones;
        this._operationMap[VizProxy.QueryPropertiesOperation] = this._queryProperties;
        this._operationMap[VizProxy.UpdatePropertiesOperation] = this._updateProperties;
        this._operationMap[VizProxy.GetDatasetOperation] = this._getDataset;
        this._operationMap[VizProxy.AddEventListenerOperation] = this._addEventListener;
        this._operationMap[VizProxy.RemoveEventListenerOperation] = this._removeEventListener;
        this._operationMap[VizProxy.SetAxisScaleOperation] = this._setAxisScaleListener;
        this._operationMap[VizProxy.GetDataPointsPosition] = this._getDataPointsPosition;
        this._operationMap[VizProxy.GetTypeOperation] = this._getType;
        this._operationMap[VizProxy.OnOperation] = this._on;
        this._operationMap[VizProxy.OffOperation] = this._off;
        this._operationMap[VizProxy.GetSizeOperation] = this._getSize;
        this._operationMap[VizProxy.SetSizeOperation] = this._setSize;
        this._operationMap[VizProxy.GetVizFeedingOperation] = this._getVizFeeding;
    };

    VizProxyHandler.prototype.response = function(data) {
        var operation = data.operation;
        var args = data.args;
        data.result = this._operationMap[operation].apply(this, args);
    };
    VizProxyHandler.prototype._getTitleZone = function() {
        return this._chart.getTitleZone();
    };
    VizProxyHandler.prototype._getTitleText = function() {
        return this._chart.vizTitle();
    };
    VizProxyHandler.prototype._setTitleText = function(titleText) {
        this._chart.vizTitle(titleText);
    };
    VizProxyHandler.prototype._getTitleTextByFeeding = function() {
        return this._chart.getTitleTextByFeeding();
    };
    VizProxyHandler.prototype._restoreTitleText = function() {
        this._chart.restoreTitleText();
    };
    VizProxyHandler.prototype._setTitleMode = function(mode) {
        this._chart.vizTitleMode(mode);
    };
    VizProxyHandler.prototype._isFakeChart = function() {
        return this._chart.isFake();
    };
    VizProxyHandler.prototype._isTitleCustomized = function() {
        return this._chart.isTitleCustomized();
    };
    VizProxyHandler.prototype._getProperties = function() {
        return this._chart.vizProperties();
    };
    VizProxyHandler.prototype._setProperties = function(newProperties) {
        this._chart.vizProperties(newProperties);
    };

    VizProxyHandler.prototype._setDataset = function(options) {
        this._chart.vizUpdate({data:options});
    };

    VizProxyHandler.prototype._getSelection = function() {
        return this._chart.vizSelection();
    };
    VizProxyHandler.prototype._getType = function() {
        return this._chart.vizType();
    };

    VizProxyHandler.prototype._getPropertyZones = function() {
        return this._chart.getPropertyZones();
    };

    VizProxyHandler.prototype._setPropertyZones = function(value) {
        this._chart.setPropertyZones(value);
    };

    VizProxyHandler.prototype._queryProperties = function(options) {
        return this._chart.queryProperties(options);
    };

    VizProxyHandler.prototype._updateProperties = function(options) {
        this._chart.updateProperties(options);
    };

    VizProxyHandler.prototype._getDataset = function() {
        return this._chart.vizData();
    };

    VizProxyHandler.prototype._addEventListener = function(type, listener, scope, priority) {
        this._chart.addEventListener(type, listener, scope, priority);
    };

    VizProxyHandler.prototype._removeEventListener = function(type, listener, scope) {
        this._chart.removeEventListener(type, listener, scope);
    };

    VizProxyHandler.prototype._setAxisScaleListener = function(zone){
        return this._chart.setAxisScale.apply(this._chart, arguments);
    };

    VizProxyHandler.prototype._getDataPointsPosition = function(dataPoints){
        return this._chart.getDataPointsPosition.apply(this._chart, arguments);
    };

    VizProxyHandler.prototype._on = function(evtType, callback){
        return this._chart.vizOn.apply(this._chart, arguments);
    };

    VizProxyHandler.prototype._off = function(evtType){
        return this._chart.vizOff.apply(this._chart, arguments);
    };

    VizProxyHandler.prototype._getSize = function() {
        return this._chart.size();
    };
    VizProxyHandler.prototype._setSize = function(size) {
        if (size) {
            this._chart.size(size);
            this._chart._dom$.parent().width(size.width);
            this._chart._dom$.parent().height(size.height);
        }
    };

    VizProxyHandler.prototype._getVizFeeding = function() {
        return this._chart.getFeeding();
    }

    return VizProxyHandler;
});

/**
 * Class Chart control
 */
// @formatter:off
define('sap/viz/controls/chart/Chart',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/feeds/AutoFeedingUtils',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/chart/ChartPreHandler',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/chart/views/ChartView',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/chart/views/InfoChartView',
    'sap/viz/controls/chart/ViewManager',
    'sap/viz/controls/runtime/RuntimeManager',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/runtime/VizProxy',
    'sap/viz/controls/chart/VizProxyHandler'
    ],
function($, VizControlBase, GlobalConfig, ChartConst, DatasetTypeConst, EventTypeConst, Event,
    FeedEvent, AutoFeedingUtils, FeedItem, FeedItemType, FeedUtils, ChartTypeUtil,
    OOUtil, utils, VizUtils, LangManager,
    ChartConfig, ChartPreHandler, IncompleteGhost, ChartView, ChartEvent, View, InfoChartView, ViewManager, RuntimeManager, BVRService,
    VizProxy, VizProxyHandler) {
// @formatter:on

    /**
     * The Chart class is a control to wrap a viz instance.
     * @class sap.viz.controls.chart.Chart
     * @param {HTMLElement} div
     *                      The dom element to host the VizFrame.
     * @param {JSON} [uiConfig]
     *               UIConfig for Chart.
     * @extends sap.viz.controls.common.VizControlBase
     */
    var Chart = function Chart(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        Chart.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.Chart";
        /** container of Chart */
        this._div = div;
        /** default config */
        this._uiConfig = uiConfig ? uiConfig : ChartConfig.instance();
        this._uiConfig.libFolderPath = GlobalConfig.defaultAssetsRoot() + '/common/libs';

        /** layout of Chart */
        this._layout = null;
        /** chart */
        // TODO Rename to _chartView
        this._chartViewInstance = null;
        /** chart type */
        this._type = null;
        /** chart data */
        this._data = null;
        /*only store custmized properties of user input*/
        this._properties = null;
        this._categoryAxis = [];
        this._valueAxis = [];
        this._labelFormats = null;
        /** chart style */
        this._css = null;
        this._description = null;

        this._vizCreated = false;
        this._enableVizDefChangedEvent = true;
        this._loadingModel = false;
        this._loadingInstance = false;
        this._titleMode = Chart.VIZ_TITLE_MODE.auto;
        this._titleGeneratorFunc = null;

        this._enableTrellis = (this._uiConfig.enableTrellis !== false);
        this._enableMorphing = (this._uiConfig.enableMorphing !== false);

        //Chart does not have connect API, so we need to register model and set vizUid.
        RuntimeManager.getRuntime().registerModel(this._uid, this._vizModel());

        this._vizProxyHandler = new VizProxyHandler(this);
        this._vizModel().addEventListener(VizProxy.VizProxyEvent, function(event) {
            this._vizProxyHandler.response(event.data);
        }, this);

        this._chartPreHandler = new ChartPreHandler({
            "useInfoChart" : this._uiConfig.useInfoChart
        });
        //create Chart
        this._createChildren();

        // Store the events which are listened via vizOn().
        this._onEventMap = {};
    };
    // API document: events
    /**
     * Dispatches "vizTypeChanged" event when visualization type changes by UI operation.
     * <pre>
     * type: "vizTypeChanged"
     * handler: function({
     *                    type: "vizTypeChanged",
     *                    token: "<uuid>",
     *                    data: {
     *                      type : "<vizType>"
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.chart.Chart#vizTypeChanged
     * @param {String} evt.type "vizTypeChanged".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var vizTypeChangedHandler = function(event) {
     *     console.log("vizTypeChanged event from Chart( type: '" + e.data.type + "' ).");
     * };
     * chart.addEventListener('vizTypeChanged', vizTypeChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change feeding items on feeding panel,
     * drag and drop object onto Chart, or switch chart type by UI operation.<br/><br/>
     * Application should listen to "feedsChanged" event to get the corresponding data and set it back to Chart to
     * update the visualization with the new data.
     *
     * <pre>
     * type: "feedsChanged"
     * handler: function({
     *                    type: "feedsChanged",
     *                    data.feeds: [{feedId, binding}]
     * })
     * </pre>
     * @event sap.viz.controls.chart.Chart#feedsChanged
     * @param {String} evt.type "feedsChanged".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var feedsChangedHandler = function(event) {
     *     // an array of FeedItem objects
     *     var feedItems = event.data.feeds;
     *
     *     // Application could restore to initial value, if there is no feeding
     *     if (feedItems || feedItems.length === 0) {
     *         var dataSet = new sap.viz.api.data.CrosstableDataset();
     *         dataSet.data(null);
     *         chart.vizUpdate({
     *             data : null
     *         });
     *         return;
     *     }
     *
     *     // Application should handle some logic to get new data based on the feedItems
     *     var newFeedData; // You can get data from database, data service, local data, etc.
     *
     *     // update chart
     *     var updateChart = function(feedData) {
     *         var dataSet = new sap.viz.api.data.CrosstableDataset();
     *         dataSet.data(feedData);
     *
     *         chart.vizUpdate({
     *             'data' : dataSet
     *         });
     *     };
     *     upateChart(newFeedData);
     * };
     * chart.addEventListener('feedsChanged', feedsChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "vizDefinitionChanged" event when viz definition is changed by user interaction or API, for example,
     * <pre>
     * 1. Change chart type.
     * 2. Feed new data.
     * 3. Edit title.
     * 4. Edit property.
     * 5. etc.
     * </pre>
     *
     * Application may listen to this event to inform user to save the document.
     *
     * <pre>
     * type: "vizDefinitionChanged"
     * handler: function({
     *                    type: "vizDefinitionChanged",
     *                    data: {
     *                         vizTypeChanged,
     *                         vizPropertiesChanged,
     *                         vizCssChanged,
     *                         feedingItemsChanged
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.chart.Chart#vizDefinitionChanged
     * @param {String} evt.type "vizDefinitionChanged".
     * @param {Object} evt.data
     *          Identify the changed property.
     */

    /**
     * Dispatches "selectPropertyZone" event when the flag 'enablePropertyZone' is true and click to select the property
     * zone.
     * Please refer to enablePropertyZone() API for the flag 'enablePropertyZone' in details. <br/>
     * The application can change chart properties by listening this event, such as changing contents of title and axis
     * title
     * via vizProperties() API, setting styles of title, axis title, axis and background via vizCss() API.<br/>
     * Event data "propertyZoneName" is type of Object, showing which property zone of the chart was selected. All
     * propertyzone
     * names list as below:<br/>
     * <pre>
     * 'title': chart title.
     * 'xAxis': x axis lines and x axis labels.
     * 'xAxis title': x axis title.
     * 'yAxis': y axis lines and y axis labels
     * 'yAxis title': y axis title.
     * 'plot': plot area and background.
     * </pre>
     *
     * <pre>
     * type: "selectPropertyZone"
     * handler: function({
     *                    type: 'selectPropertyZone',
     *                    data: {propertyZoneName:'title'|'xAxis'|'xAxis title'|'yAxis'|'yAxis title'|'plot'}
     * })
     * </pre>
     * @event sap.viz.controls.chart.Chart#selectPropertyZone
     * @param {String} evt.type "selectPropertyZone".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart($('chart1'), uiconfig));
     * chart.enablePropertyZone(true);
     * // listen to 'selectPropertyZone' event and change properties
     * chart.addEventListener('selectPropertyZone', function(event) {
     *     var propertyZoneNameObj = event.data;
     *     var propertyZoneName = propertyZoneNameObj.propertyZoneName;
     *     // use xAxis title for example
     *     if (propertyZoneName === 'xAxis title'){
     *         // change x axis title content
     *         var newProperties = {xAxis: { title : {text :'Sample Edited xAxis title', visible : true}}};
     *         chart.vizProperties(newProperties);
     *     }
     * });
     * </pre>
     */

    OOUtil.extend(Chart, VizControlBase);

    Chart.VIZ_TITLE_MODE = {
        manual : "manual",
        auto : "auto"
    };

    /**
     * Get/Set vizType.
     * @method sap.viz.controls.chart.Chart.prototype.vizType
     * @param {String} vizType
     * @return {String}
     */
    Chart.prototype.vizType = function(type) {
        if (arguments.length > 0) {
            if (!utils.isString(type)) {
                return;
            }

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizType()_set');

            this._beginUpdateProperty();
            this._vizType = type;
            this._vizModel().type(this._vizType);
            this._endUpdateProperty();

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizType()_set');

            return this;
        } else {
            return this._vizModel().type();
        }
    };

    /**
     * Get/Set title properties.
     * @method sap.viz.controls.chart.Chart.prototype.vizTitle
     * @param {String} title
     * @return {String} title
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var oldTitle = chart.vizTitle();
     * var newTitle = 'new Title';
     * chart.vizTitle(newTitle);
     * </pre>
     */
    Chart.prototype.vizTitle = function(title) {
        if (arguments.length > 0) {
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizTitle()_set');

            if (VizUtils.hasFakeData(this._data)) {
                title = ' ';
            }
            var titleObj = this.vizProperties() ? this.vizProperties().title : null;
            // if there is no title property or title has a different value
            if (!titleObj || title !== titleObj.text) {
                if(!titleObj){
                  titleObj  = {};
                }

                titleObj.text = title;
                this.vizProperties({
                    'title' : titleObj
                });
            }

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizTitle()_set');

            return this;
        } else {
            var title = this.vizProperties() ? this.vizProperties().title : null;
            return title ? title.text : null;
        }
    };

    /**
     * Clear the selected property zone when 'useBuiltInPropertyZoneInteraction' is true in ui config.
     * @method sap.viz.controls.chart.Chart.prototype.clearSelectedPropertyZone
     * @return {undefined}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * chart.clearSelectedPropertyZone();
     * </pre>
     */
    Chart.prototype.clearSelectedPropertyZone = function() {
        this._chartViewInstance.selectedPropertyZone(null);
    };

    Chart.prototype.isFake = function() {
        return VizUtils.hasFakeData(this._data);
    };

    Chart.prototype.setTitleGeneratorFunc = function(value) {
        if (value !== null && value !== undefined && !utils.isFunction(value)) {
            return;
        }

        this._titleGeneratorFunc = value;
    };

    Chart.prototype.vizTitleMode = function(mode) {
        if (arguments.length > 0) {
            if (mode == Chart.VIZ_TITLE_MODE.auto || mode == Chart.VIZ_TITLE_MODE.manual) {
                this._titleMode = mode;
            }
        } else {
            return this._titleMode;
        }
    };

    Chart.prototype.isTitleCustomized = function() {
        return this._titleMode === Chart.VIZ_TITLE_MODE.manual;
    };

    Chart.prototype.getTitleZone = function() {
        if (this._chartView().getTitleZone) {
            return this._chartView().getTitleZone();
        } else {
            return [];
        }
    };

    Chart.prototype.getTitleTextByFeeding = function() {
        if (this._titleGeneratorFunc) {
            var args = [this.vizUid()];
            return this._titleGeneratorFunc.apply(null, args);
        }
        return this._chartView().getTitleByFeeding();
    };

    Chart.prototype.restoreTitleText = function() {
        this.vizTitle(this.getTitleTextByFeeding());
    };
    /**
     * handler for chart title properties changed
     */
    Chart.prototype._titleChangedHandler = function(e) {
        var title = e.data.text;
        this.vizTitle(title);
    };

    /**
     * @override
     */
    Chart.prototype.destroy = function() {
        this._destroyViz();
        Chart.superclass.destroy.apply(this, arguments);
    };
    /**
     * Update or add feed FeedItem.
     *
     * @method sap.viz.controls.feeding.Chart.prototype.feedAnalysisObjects
     *
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     * @param {Boolean} [append]
     *                      optional, default value is false.
     *                      If append is true, append new feeds.
     *                      If append is false, clean existing feeds.
     *
     * @return {Array<sap.viz.controls.common.feeds.FeedItem>} actually applied feeds by BVR
     */
    Chart.prototype.feedAnalysisObjects = function(analysisObjects, append) {
        this._beginUpdateProperty();
        var model = this._vizModel();
        var bvrResult;
        if (append === true) {
            bvrResult = BVRService.suggestFeeds(model.type(), model.explicitFeedingItems(), analysisObjects);
        } else {
            bvrResult = BVRService.suggestFeeds(model.type(), analysisObjects);
        }
        var feeds = model.explicitFeedingItems();
        if (bvrResult) {
            if (FeedUtils.equal(feeds, bvrResult.feeds)) {
                for (var index in analysisObjects) {
                    var feedDefs = FeedUtils.getVizFeeds(model.type());
                    for (var feedIndex in feedDefs) {
                        if (FeedUtils.canAddFeed(feeds, feedDefs[feedIndex], analysisObjects[index])) {
                            replaceFeed(this._vizModel().type(), feeds, analysisObjects[index]);
                        }
                    }
                }
            } else {
                feeds = bvrResult.feeds;
            }

            model.feedingItems(feeds);
        }
        this._endUpdateProperty();
        return feeds;
    };

    /**
     * Get default incomplete ghost options for createViz.
     * @method sap.viz.controls.chart.Chart.prototype.getDefaultIncompleteOptions
     * @param {String} vizType
     * @return {JSON}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var options = chart.getDefaultIncompleteOptions('viz/line');
     * chart.createViz(options);
     * </pre>
     */
    Chart.prototype.getDefaultIncompleteOptions = function(type) {
        if (!utils.isString(type)) {
            return;
        }
        var properties = this._getDefaultProperties(type);
        //Don't need to remove invalid properties in this point.
        //Invalid properties will be removed when pass to chart view.

        return {
            'type' : type,
            'properties' : properties,
            'data' : IncompleteGhost.getDataset(type)
        };
    };
    /**
     * Update numberOfDimensionsInColumn property base on column feeding items.
     */
    Chart.prototype._updateColumnDimCount = function() {
        if (ChartTypeUtil.isMultipleChart(this._vizModel().type())) {
            var count = FeedUtils.getNumberOfDimensionsInColumn(this._vizModel().feedingItems());
            this._properties = this._properties || {};
            this._properties.multiLayout = this._properties.multiLayout || {};
            this._properties.multiLayout.numberOfDimensionsInColumn = count;
        }
    };
    /**
     * Dispatch vizDefinitionChanged event
     */
    Chart.prototype._dispatchVizDefChangedEvent = function(changes) {
        var data = {
            vizTypeChanged : (changes.vizTypeChanged === true),
            vizPropertiesChanged : (changes.vizPropertiesChanged === true),
            vizCssChanged : (changes.vizCssChanged === true),
            feedingItemsChanged : (changes.feedingItemsChanged === true),
            filterChanged : (changes.filterChanged === true),
            vizTitleChanged : (changes.vizTitleChanged === true)
        };
        if (this._vizDefChangedData) {
            //merge
            for (var p in this._vizDefChangedData) {
                if (this._vizDefChangedData.hasOwnProperty(p)) {
                    data[p] = data[p] || this._vizDefChangedData[p];
                }
            }
            this._vizDefChangedData = null;
        }
        if (this._enableVizDefChangedEvent) {
            this._dispatchEvent(new Event(EventTypeConst.VIZ_DEFINITION_CHANGED, this, data));
        } else {
            this._vizDefChangedData = data;
        }
    };
    Chart.prototype._updateView = function(type) {
        var viewClass = ViewManager.getViewClass(type);
        if (this._chartViewInstance instanceof viewClass) {
            return;
        }

        if (this._chartViewInstance) {
            this._chartViewInstance.destroy();
            this._chartViewInstance = null;
            this._data = null;
        }
        this._createChartView(viewClass);

        // Update event map to new chart view.
        this._chartView().onEventMap(this._onEventMap);

        var size = {
            width : $(this._div).width(),
            height : $(this._div).height()
        };
        this._chartView().size(size);
        if (ChartTypeUtil.isTable(type)) {
            this._data = IncompleteGhost.getDataset(type);
        }
        var data = {
            type : type
        };
        this._dispatchEvent(new ChartEvent(ChartEvent.VIZ_VIEW_CHANGED, this, data));
    };
    /**
     * handler for chart model properties changed
     */
    Chart.prototype._onVizModelChanged = function(e) {
        this._dispatchVizDefChangedEvent(e.data);
        var vizType = this._vizModel().type();

        if (e.data.vizTypeChanged) {
            this._updateView(vizType);
        }
        if (this._loadingModel) {
            return;
        }

        if (e.data.vizTypeChanged) {
            //TODO: check if this logic can be replaced with VizUtils.convertProperties
            if (!this._inUpdatingProperty()) {
                // remove value axis scale
                this._properties = this._chartView().resetProperties(this._properties, vizType);
            }
            this._updateAxisProperties(vizType);
            this._updateLabelFormats(vizType);
            this._dispatchPropertyEvent(new ChartEvent(ChartEvent.VIZTYPE_CHANGED, this, {
                type : vizType
            }));
        }

        if (!this._chartView()) {
            return;
        }

        if (e.data.feedingItemsChanged && !ChartTypeUtil.isGeo(vizType)) {

            this._updateColumnDimCount();
            if (!this._inUpdatingProperty()) {
                //update the current title according to the current feedItems by joining each feed item's name
                this._updateTitle();
                this.showLoadingIcon();
                var datasetType = ChartTypeUtil.getDatasetType(vizType);
                this._dispatchPropertyEvent(new FeedEvent(FeedEvent.FEEDS_CHANGED, this, {
                    datasetType : datasetType,
                    feeds : this.feeds()
                }));
                return;
            }
        }

        this._chartView().modelChanged(this._vizModel(), e.data);
        if (e.data.extensionValuesChanged) {
            var extensionValues = this._vizModel().extensionValues();
            //feeding panel enable trellis flag changed
            if (extensionValues.feedingPanel && this._enableTrellis !== extensionValues.feedingPanel.enableTrellis) {
                this._enableTrellis = extensionValues.feedingPanel.enableTrellis;
                this._chartView().enableTrellis(this._enableTrellis);
            }
        }

        // if need to create viz.
        // if user switch type in switch bar, onVizModelChanged triggered by switchbar, we need to create viz here.
        if (this._needCreateViz(vizType, false) && (e.data.vizTypeChanged || e.data.feedingItemsChanged)) {
            this._createVizInstance();
        }
    };

    function applyAxis (properties, props, values) {
        if (props && values) {
            var i, prop, value;
            for (i=0; i<props.length; i++) {
                prop = props[i];
                if (values.length > i) {
                    value = values[i];
                    properties[prop] = utils.clone(values[i]);
                }
            }
        }
    };

    Chart.prototype._updateAxisProperties = function(type) {
        if (this._properties) {
            // category axis
            var categoryAxisProps = VizUtils.getCategoryAxis(type);
            applyAxis(this._properties, categoryAxisProps, this._categoryAxis);

            // value axis
            var valueAxisProps = VizUtils.getValueAxis(type);
            applyAxis(this._properties, valueAxisProps, this._valueAxis);
        }
    };
    /**
     * Update the current label formats according to current type and current properties and history properties,
     * called when vizType changed.
     */
    Chart.prototype._updateLabelFormats = function(newType) {
        //convert properties names between vertical and horizontal
        var axisPros = ['xAxis', 'xAxis2', 'yAxis', 'yAxis2', 'valueAxis'];
        var proNamesMap = {
            'xAxis' : 'yAxis',
            'xAxis2' : 'yAxis2',
            'yAxis' : 'xAxis',
            'yAxis2' : 'xAxis2'
        };
        var i, pro;
        //this._labelFormats was null after calling vizProperties() or at initialized time
        if (!this._labelFormats && this._properties) {
            for ( i = 0; i < axisPros.length; i++) {
                pro = axisPros[i];
                var proValue;
                if (pro === 'valueAxis') {
                    proValue = this._properties.plotArea ? this._properties.plotArea.valueAxis : null;
                } else {
                    proValue = this._properties[pro];
                }
                var hasLabelFormat = (proValue && proValue.label && proValue.label.hasOwnProperty('formatString')) ? true : false;
                if (hasLabelFormat) {
                    this._labelFormats = this._labelFormats || {};
                    this._labelFormats[pro] = proValue.label.formatString;
                }
            }
        }
        //get all support properties according to cvom
        var newProsDef = sap.viz.api.manifest.Viz.get(newType)[0].allProperties();
        if (!newProsDef) {
            return;
        }
        //the properties set which is unsupported for label formats
        var unsupported;
        for ( i = 0; i < axisPros.length; i++) {
            pro = axisPros[i];
            var proDef;
            if (pro === 'valueAxis') {
                if (newProsDef.plotArea && newProsDef.plotArea.valueAxis) {
                    proDef = newProsDef.plotArea.valueAxis.supportedValues;
                }
            } else {
                proDef = newProsDef[pro];
            }
            //whether this property supports label format
            var supportLabelFormat = (proDef && proDef.label && proDef.label.supportedValues && proDef.label.supportedValues.hasOwnProperty('formatString')) ? true : false;
            if (supportLabelFormat) {
                var formatString;
                //step1 : get format string from the last properties
                if (this._properties) {
                    var curProValue;
                    if (pro === 'valueAxis') {
                        if (this._properties.plotArea && this._properties.plotArea.valueAxis) {
                            curProValue = this._properties.plotArea.valueAxis;
                            if (curProValue && curProValue.label && curProValue.label.hasOwnProperty('formatString')) {
                                formatString = curProValue.label.formatString;
                            }
                        }
                    } else {
                        curProValue = utils.clone(this._properties[pro]);
                        if (curProValue && curProValue.label && curProValue.label.hasOwnProperty('formatString')) {
                            formatString = curProValue.label.formatString;
                        }
                    }
                }

                //step2 : get format string from properties history if not get it from step1
                if (formatString === undefined && this._labelFormats) {
                    formatString = this._labelFormats[pro];
                    if (formatString === undefined && pro !== 'valueAxis') {
                        var originalPro = proNamesMap[pro];
                        if (originalPro) {
                            formatString = this._labelFormats[originalPro];
                        }
                    }
                }

                //step3 : get format string from uiconfig if not get it from step2
                if (formatString === undefined) {
                    formatString = this._uiConfig.defaultLabelFormatString;
                }
                if (formatString !== undefined) {
                    this._properties = this._properties || {};
                    if (pro === 'valueAxis') {
                        this._properties.plotArea = this._properties.plotArea || {};
                        this._properties.plotArea.valueAxis = this._properties.plotArea.valueAxis || {};
                        this._properties.plotArea.valueAxis.label = {
                            formatString : formatString
                        };
                    } else {
                        this._properties[pro] = this._properties[pro] || {};
                        this._properties[pro].label = {
                            formatString : formatString
                        };
                    }
                }
            } else {
                unsupported = unsupported || [];
                unsupported.push(pro);
            }
        }
        //remove formatString property from this._properties according to the current properties;
        if (unsupported && this._properties) {
            for ( i = 0; i < unsupported.length; i++) {
                pro = unsupported[i];
                if (pro === 'valueAxis') {
                    if (this._properties.plotArea && this._properties.plotArea.valueAxis && this._properties.plotArea.valueAxis.label) {
                        delete this._properties.plotArea.valueAxis.label.formatString;
                    }
                } else {
                    if (this._properties[pro] && this._properties[pro].label) {
                        delete this._properties[pro].label.formatString;
                    }
                }
            }
        }
    };
    /**
     * Create chart
     */
    Chart.prototype._createChartView = function(viewClass) {
        var view = this._chartViewInstance = new viewClass($(this._div), {
            'type' : this._vizModel().type(),
            'useBuiltInPropertyZoneInteraction' : this._uiConfig.useBuiltInPropertyZoneInteraction,
            'useDefaultChartSizeForTrellis' : this._uiConfig.useDefaultChartSizeForTrellis
        }, this._uiConfig.libFolderPath, $.proxy(this._vizModel, this), {
            'vizProperties' : $.proxy(this.vizProperties, this),
            'vizCss' : $.proxy(this.vizCss, this),
            'vizCssProperty' : $.proxy(this.vizCssProperty, this),
            'vizOn' : $.proxy(this.vizOn, this),
            'vizType' : $.proxy(this.vizType, this),
            'selectedPropertyZone' : $.proxy(this.selectedPropertyZone, this),
            'vizData' : $.proxy(this.vizData, this)
        });

        view.enableTrellis(this._enableTrellis);
        view.enableMorphing(this._enableMorphing);
        view.addEventListener(ChartEvent.TITLE_CHANGED, this._titleChangedHandler, this);
        view.addEventListener(ChartEvent.ANALYSIS_DROPPED, this._analysisDroppedHandler, this);

        view.addEventListener(ChartEvent.CHART_CHANGED, function(e) {
            this._dispatchEvent(e);
        }, this);

        view.addEventListener(ChartEvent.CHART_CHANGING, function(e) {
            this._dispatchEvent(e);
        }, this);

        view.addEventListener(ChartEvent.CHANGED_SELECTED_DATA, function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this, e.data));
        }, this);

        view.addEventListener(ChartEvent.SELECT_PROPERTY_ZONE, function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.SELECT_PROPERTY_ZONE, this, e.data));
        }, this);

        view.addEventListener(View.DISPATCH_PROPERTY_EVENT, function(e) {
            var evt = e.data;
            this._dispatchPropertyEvent(evt);
        }, this);

        view.addEventListener(ChartEvent.PROPERTY_ZONES_CHANGED, function(event) {
            this._dispatchEvent(new ChartEvent(ChartEvent.PROPERTY_ZONES_CHANGED, this, event.data));
        }, this);
    };

    /**
     * Create all the children of Chart
     */
    Chart.prototype._createChildren = function() {
        this._validateSize();


        //create Chart
        this._createChartView(ChartView);
    };
    /**
     * Handler for chart feed changed
     * @param {Event} e
     */
    Chart.prototype._analysisDroppedHandler = function(e) {
        var i;
        var model = this._vizModel();
        var feeds = model.explicitFeedingItems();
        var feedItem;
        //update feedItems;
        var zone = e.data.zone;
        var analysisObject = e.data.analysisObject;
        if (zone.feedDef.length === 1) {
            var feedDef = zone.feedDef[0];
            var id = feedDef.id;
            if (zone.name === FeedUtils.RowsFeedingName || zone.name === FeedUtils.ColumnsFeedingName) {
                id = zone.name;
            }
            feedItem = FeedUtils.getFeed(feeds, id);
            if (!feedItem) {
                feedItem = new FeedItem(id, feedDef.type, []);
                feeds.push(feedItem);
            }
            // Remove current when feed fail
            var max = feedDef.type === FeedItemType.MEASURE ? feedDef.max : feedDef.maxStackedDims;
            if (max === null || max === undefined) {
                max = Number.MAX_VALUE;
            }
            if (feedItem.values().length === max) {
                feedItem.values().splice(0, 1);
            }
            feedItem.values().push(analysisObject);
        } else {
            var feedingScope = [];
            for (i = 0; i < zone.feedDef.length; i++) {
                if (zone.feedDef[i].id === FeedUtils.MultiplierFeedingName) {
                    feedingScope.push(FeedUtils.RowsFeedingName);
                    feedingScope.push(FeedUtils.ColumnsFeedingName);
                } else {
                    feedingScope.push(zone.feedDef[i].id);
                }
            }
            var bvrResult = BVRService.suggestFeeds(model.type(), feeds, [analysisObject], feedingScope);
            if (bvrResult) {
                if (FeedUtils.equal(feeds, bvrResult.feeds)) {
                    replaceFeed(this._vizModel().type(), feeds, analysisObject);
                } else {
                    feeds = bvrResult.feeds;
                }
            }
        }
        model.feedingItems(feeds, this._enableTrellis);
    };

    /**
     * Remove current when feed fail, Replace one current analysisObject.
     */
    function replaceFeed (type, feeds, analysisObject) {
        // var type = this._vizModel().type();
        var bvrResult = BVRService.suggestFeeds(type, [analysisObject]);
        var feedItemID, i, feedItem;
        for ( i = 0; i < bvrResult.feeds.length; i++) {
            feedItem = bvrResult.feeds[i];
            if (feedItem.values().length === 1) {
                feedItemID = feedItem.id();
                break;
            }
        }
        for ( i = 0; i < feeds.length; i++) {
            feedItem = feeds[i];
            if (feedItem.id() === feedItemID) {
                var isExisted = false;
                var analysisObjects = feedItem.values();
                for (var index in analysisObjects) {
                    if (analysisObjects[index].id() === analysisObject.id()) {
                        isExisted = true;
                        break;
                    }
                }
                // if AnalysisObject already exists, don't do replacing
                if (!isExisted && feedItem.values().length > 0) {
                    feedItem.values().splice(0, 1);
                    feedItem.values().push(analysisObject);
                }
            }
        }
    };
    /**
     * measure the size
     * @Override
     */
    Chart.prototype._validateSize = function() {
        var w = $(this._div).width();
        var h = $(this._div).height();
        $(this._layout).css({
            width : w + "px",
            height : h + "px",
            visibility : "visible",
            display : ''
        });
        if (this._chartView()) {
            this._chartView().size({
                width : w,
                height : h
            });
        }
    };
    // Save data to local instance
    Chart.prototype._updateData = function(type, data) {
        this._data = this._chartViewInstance.copyData(type, data);
    };
    /**
     * Get the chart
     * @return {Chart}
     */
    Chart.prototype._chartView = function() {
        return this._chartViewInstance;
    };
    /**
     * If need to create viz instance when update viz.
     */
    Chart.prototype._needCreateViz = function(type, needChangeTemplate) {
        // need to create viz if templateChanged.
        if (needChangeTemplate === true) {
            return true;
        }
        var needCreateViz = false;
        if (ChartTypeUtil.isTable(type)) {
            // if type is table, always need to create viz.
            needCreateViz = true;
        } else {
            // if type changed, need to create viz.
            if (type !== this._type) {
                needCreateViz = true;
            }
        }
        // if viz instance not created, we need to create viz?
        if (!this._chartView().hasChartInstance()) {
            needCreateViz = true;
        }

        return needCreateViz;
    };
    /**
     * If hasFakeData changed.
     */
    Chart.prototype._needChangeTemplate = function(type, data) {
        var currentTemplate = this._chartViewInstance.getTemplateId();
        var newTemplate = this._chartViewInstance.getTemplateId(data);
        return (currentTemplate !== newTemplate);
    };
    /**
     *  TODO: remove loading icon?
     * need to request data from server, show loading icon.
     */
    Chart.prototype.showLoadingIcon = function() {
        this._chartView().showLoadingIcon();
    };
    /**
     * Override this method and throw exception to prevent application from calling it directly.
     * @ignore
     * @method sap.viz.controls.chart.Chart.prototype.connect
     * @param {String} vizUid
     *                 The uid of the viz instance.
     */
    Chart.prototype.connect = function(vizUid) {
        //if (console) {
        //    console.log("Error: Chart instance does not support connect function!");
        //}
    };
    /**
     * Override this method and throw exception to prevent application from calling it directly.
     * @ignore
     * @method sap.viz.controls.chart.Chart.prototype.disconnect
     */
    Chart.prototype.disconnect = function() {
        //if (console) {
        //    console.log("Info: Chart instance does not support disconnect function!");
        //}
    };
    /**
     * Get the chart model
     * @return {Chart}
     */
    Chart.prototype.chartModel = function() {
        return this._vizModel();
    };
    /**
     * Get the uid of Chart.
     * @method sap.viz.controls.chart.Chart.prototype.vizUid
     * @return {String}
     */
    Chart.prototype.vizUid = function() {
        return this._uid;
    };
    /**
     * Get/Set Chart data. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.data() to get/set data.
     * @method sap.viz.controls.chart.Chart.prototype.vizData
     * @param {sap.viz.api.data.CrosstableDataset} [data] optional
     * @return {sap.viz.api.data.CrosstableDataset}
     */
    Chart.prototype.vizData = function(data) {
        if (arguments.length > 0) {
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizData_set');

            // Save to local variable
            var type = this._vizModel().type();
            this._updateData(type, data);
            if (this._vizCreated) {
                // Apply to chartView
                var needChangeTemplate = this._needChangeTemplate(type, data);
                if (needChangeTemplate || ChartTypeUtil.isTable(type)) {
                    // change template
                    this._createVizInstance();
                } else {
                    this._chartView().data(this._data);
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_DATA_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizData_set');

            return this;
        } else {
            if (this._chartView()) {
                return this._chartView().data();
            }
            return null;
        }
    };
    /**
     * Get/Set Chart css. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.css() to get/set css.
     * @method sap.viz.controls.chart.Chart.prototype.vizCss
     * @param {CSS} css
     * @return {CSS}
     */
    Chart.prototype.vizCss = function(css) {
        if (arguments.length > 0) {
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizCss_set');

            // Save to local variable
            this._css = css;
            if (this._vizCreated) {
                // Apply to chartView
                this._chartView().css(this._css);
                this._css = this._chartView().css();
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
            this._dispatchVizDefChangedEvent({
                'vizCssChanged' : true
            });

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizCss_set');

            return this;
        } else {
            return this._chartView().css();
        }
    };
    /**
     * Get/Set Chart properties.
     * @method sap.viz.controls.chart.Chart.prototype.vizProperties
     * @param {JSON} [properties] optional
     * @return {JSON}
     */
    Chart.prototype.vizProperties = function(properties) {
        if (arguments.length > 0) {
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizProperties_set');

            this._enableVizDefChangedEvent = false;
            var type = this._vizModel().type();
            var chartType = this._initOptions({
                properties : properties
            });

            this._labelFormats = null;
            if (chartType !== type) {
                this._vizModel().type(chartType);
                // Apply to chartView
                if (this._vizCreated) {
                    this._createVizInstance();
                } else {
                    this._enableVizDefChangedEvent = true;
                    sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizProperties_set');
                    throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                // Apply to chartView
                if (this._vizCreated) {
                    if(this._chartView().hasChartInstance()) {
                        var properties = this._chartView().getValidProperties(this._properties, chartType);
                        this._chartView().properties(properties);
                    }
                } else {
                    this._enableVizDefChangedEvent = true;
                    sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizProperties_set');
                    throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            }

            var event = {
                vizPropertiesChanged : true
            };
            if (properties.hasOwnProperty("title")) {
                event.vizTitleChanged = true;
            }
            this._enableVizDefChangedEvent = true;
            this._dispatchVizDefChangedEvent(event);

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizProperties_set');

            return this;
        } else {
            return this._chartView().properties();
        }
    };
    /**
     * Get viz instance description.
     * @return {Object}
     */
    Chart.prototype.vizDescription = function() {
        return this._chartView().description();
    };
    /**
     * Update viz instance by passing options in single function.
     * @method sap.viz.controls.chart.Chart.prototype.vizUpdate
     * @param {JSON} updates
     *               The update options with below data structure:
     * <pre>
     * {
     *     'data' : dataset,
     *     'css' : cssString,
     *     'properties' : {},
     *     'feeds' : [], // Array of FeedItem object
     *     'filters' : [] // Array of ValueFilter|NumericRangeFilter|DateRangeFilter object
     * }
     * All the options (data, css, properties, feeds and filters) are optional and you can pass partial options.
     * </pre>
     * @return {sap.viz.controls.chart.Chart} Chart itself.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var dataset = new sap.viz.api.data.CrosstableDataset();
     * //dataset.data(your data);
     * var cssString = '';
     * chart.vizUpdate({
     *     'properties' : {},
     *     'feeds' : [] // Array of FeedItem object
     * });
     * </pre>
     */
    Chart.prototype.vizUpdate = function(updates) {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizUpdate');

        if (!updates) {
            return;
        }

        updates = this._chartPreHandler.preVizUpdate(updates);
        this._beginUpdateProperty();
        var needChangeTemplate = false;
        var type = updates.type || this._vizModel().type();

        if (updates.hasOwnProperty("type")) {
            this._updateView(updates.type);
        }
        if (updates.hasOwnProperty('data')) {
            needChangeTemplate = this._needChangeTemplate(type, updates.data);
        }

        type = this._initOptions(updates);
        var isTypeChanged = (type !== this._vizModel().type());

        //handle data is null
        if (!ChartTypeUtil.isGeo(type) && updates.data === null) {
            needChangeTemplate = true;
            this._updateData(type, IncompleteGhost.getDataset(type));
        }

        //handle feeds change
        var feedingItems = null;
        var feedsOption = updates.feeds;
        if (feedsOption) {
            // for backward compatibility, we expose feeds option using {'feeds' : {'value' : [feedItems]}}
            feedingItems = feedsOption.value ? feedsOption.value : feedsOption;
        } else if (feedsOption === null) {
            feedingItems = [];
        }

        // TODO: handle new GEO
        // type and feedingItems changed in vizModel.
        var modelOption;
        if (isTypeChanged) {
            modelOption = {
                'type' : type
            };
            if (feedingItems) {
                modelOption['feedingItems'] = feedingItems;
            }
            this._vizModel().vizModelChanged(modelOption);
        } else {
            // only feedingItems changed in vizModel. call vizModelChanged and update viz.
            if (feedingItems) {
                modelOption = {
                    'feedingItems' : feedingItems
                };
                this._vizModel().vizModelChanged(modelOption);
            }

            // TODO: Refine the special case of Geo.
            if (this._vizCreated) {
                // if need create viz, call _createVizInstance
                // if not, call chartView.update()
                try {
                    if (this._needCreateViz(type, needChangeTemplate) || !this._chartView().supportUpdate(type)) {
                        this._createVizInstance();
                    } else {
                        this._updateVizInstance();
                    }
                } catch (error) {
                    this._endUpdateProperty();
                    sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizUpdate');
                    throw error;
                }
            } else {
                //TODO: Maybe we need to create viz.
                //this._endUpdateProperty();
                //throw LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') +
                // LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        }

        this._endUpdateProperty();

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_vizUpdate');

        return this;
    };
    /**
     * Add event listener on viz instance. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.on() to add event listener.
     * @method sap.viz.controls.chart.Chart.prototype.vizOn
     * @param {String} evtType
     * @param {Function} callback
     * @return {sap.viz.controls.chart.Chart} Chart itself.
     */
    Chart.prototype.vizOn = function(evtType, callback) {
        if (arguments.length > 0) {
            if (!utils.isString(evtType) || !utils.isFunction(callback)) {
                return;
            }

            this._chartView().on(evtType, callback);
            this._onEventMap[evtType] = callback;

            return this;
        }
    };
    /**
     * Remove event listener on viz instance. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.off() to remove event listener.
     * @method sap.viz.controls.chart.Chart.prototype.vizOff
     * @param {String} evtType
     * @return {sap.viz.controls.chart.Chart} Chart itself.
     */
    Chart.prototype.vizOff = function(evtType) {
        if (arguments.length > 0) {
            if (!utils.isString(evtType)) {
                return;
            }

            this._chartView().off(evtType);
            delete this._onEventMap[evtType];

            return this;
        }
    };
    /**
     * Trigger viz instance action.
     * @param {String} name
     * @param {Object} [args]
     *                 optional, the action arguments in JSON format
     * @return {sap.viz.controls.chart.Chart} Chart itself.
     */
    Chart.prototype.vizAction = function(keyName, args) {
        if (arguments.length > 0) {
            if (this._vizCreated) {
                return this._chartView().action(keyName, args);
            } else {
                throw LangManager.get('VIZ_CHART_TRIGGER_ACTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }

            return this;
        }
    };
    /**
     * Get/Set selected data points. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.selection() to get/set selected data points.
     * @method sap.viz.controls.chart.Chart.prototype.vizSelection
     * @param {Array<JSON>} [items]
     *                          optional, viz instance will hold the passed-in description,
     *                          but if the properties are changed, it must be re-pass to viz instance to take effect.
     *                          point:
     *                          {
     *                              data: {key: "value", ...},
     *                              ctx:  [{mi: 0, ...}, {...}, ...], // !important
     *                              info: [{obj}, null, ... } // optional
     *                          }
     * @param {Boolean} [clearFlag]
     *                          optional, whether to clear previous selection.
     *                          Default value is true.
     *                          If clearFlag is true, the selection will be incremental selection.
     *                          If clearFlag is false, the selection will not be incremental selection.
     */
    Chart.prototype.vizSelection = function(points, options) {
        if (this._vizCreated) {
            var selection = this._chartView().selection.apply(this._chartView(), arguments);
            return selection;
        } else {
            throw LangManager.get('VIZ_CHART_SELECTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };
    /**
     * Get viz instance feeding zone.
     * @return {Object}
     */
    Chart.prototype.vizFeedingZone = function() {
        if (this._vizCreated) {
            try {
                return this._chartView().feedingZone();
            } catch(error) {
                return [];
            }
        } else {
            throw LangManager.get('VIZ_CHART_FEEDINGZONE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };
    /**
     * change template if we detect templateChanged event.
     */
    Chart.prototype.changeTemplate = function() {
        return this._chartView().changeTemplate.apply(this._chartView());
    };

    Chart.prototype._initOptions = function(options) {
        if (!options) {
            return;
        }
        var type = options.type || this._vizModel().type();
        if (options.hasOwnProperty('css')) {
            this._css = options.css;
        }

        if (options.properties) {
            var properties = utils.clone(options.properties);
            type = ChartTypeUtil.updateType(type, properties);
            // update axis cache for switching type
            this._updateAxisCache(type, properties);
            this._properties = this._properties || {};
            if (properties.title && properties.title.text) {
                properties.title.text = properties.title.text.trim();
            }
            this._properties = utils.updateJSON(this._properties, properties);
        }
        if (options.data) {
            // BITVDC5-113: Fix a bug to show CVOM table in case of vizImgExporter and CEF. Error happened when vizType
            // was 'viz/ext/table'.
            // Before this fix _updateView() was not called and _chartViewInstance referred to a ChartView instead of a
            // TableView.
            this._updateView(type);
            this._updateData(type, options.data);
        }

        return type;
    };

    Chart.prototype._updateAxis = function(props, axis, newProperties) {
        var i, prop, value, newValue;
        if (props) {
            for (i=0; i<props.length; i++) {
                prop = props[i];
                if (newProperties.hasOwnProperty(prop)) {
                    newValue = utils.clone(newProperties[prop]);
                    if (axis.length > i) {
                        value = axis[i];
                        //merge src value and new value
                        axis[i] = utils.updateJSON(value, newValue);
                    } else {
                        if (this._properties.hasOwnProperty(prop)) {
                            axis.push(utils.updateJSON(this._properties[prop], newValue));
                        } else {
                            axis.push(newValue);
                        }
                    }
                }
            }
        }
    };

    /**
     * update axis cache according to user properties
     */
    Chart.prototype._updateAxisCache = function(type, newProperties) {
        if (newProperties) {
            // category axis
            var categoryAxisProps = VizUtils.getCategoryAxis(type);
            this._updateAxis(categoryAxisProps, this._categoryAxis, newProperties);

            // value axis
            var valueAxisProps = VizUtils.getValueAxis(type);
            this._updateAxis(valueAxisProps, this._valueAxis, newProperties);
        }
    };
    /**
     * clear axis cache when load viz
     */
    Chart.prototype._clearAxisCache = function() {
        if (this._categoryAxis) {
            this._categoryAxis.length = 0;
        }
        if (this._valueAxis) {
            this._valueAxis.length = 0;
        }
    };
    /**
     * save axis cache
     */
    Chart.prototype._saveAxisCache = function() {
        var axisCache = {};
        axisCache['categoryAxis'] = this._categoryAxis;
        axisCache['valueAxis'] = this._valueAxis;
        return axisCache;
    };
    /**
     * load axis cache
     */
    Chart.prototype._loadAxisCache = function(axis) {
        if (axis['categoryAxis']) {
            this._categoryAxis = axis['categoryAxis'];
        }
        if (axis['valueAxis']) {
            this._valueAxis = axis['valueAxis'];
        }
    };
    /**
     * @param {JSON} options
     *                          {
     *                              type: String, // refer to propDoc.html for all supported viz chart TypeUtils
     *                              data: sap.viz.api.data.CrosstableDataset,
     *                              feeds: Array of FeedItem,
     *                              properties: Object, // refer to propDoc.html for all supported options for each viz
     * type
     *                              css: String, // refer to propDoc.html for all supported css items for each viz type
     *                              description: Object,
     *                              events: Object // events is an object with key and value pair. Key is the event name,
     * and the value is the listener function
     *                          }
     */
    Chart.prototype.createViz = function(options) {
        if (arguments.length > 0) {
            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_createViz');

            options = this._chartPreHandler.preCreateViz(options);
            this._beginUpdateProperty();
            this._type = null;
            this._vizModel().type(null);
            this._data = null;
            this._css = null;

            this._properties = {};
            if (options.hasOwnProperty("type")) {
                this._updateView(options.type);
            }
            var type = this._initOptions(options);

            var feedingItems = null;
            var feedsOption = options.feeds;
            if (feedsOption) {
                // for backward compatibility, we expose feeds option using {'feeds' : {'value' : [feedItems]}}
                feedingItems = feedsOption.value ? feedsOption.value : feedsOption;
            } else if (feedsOption === null) {
                feedingItems = [];
            }

            this._vizCreated = true;

            // if feedingItems = null, we will not update feedingItems in
            // vizModel
            try {
                this._vizModel().vizModelChanged({
                    'type' : type,
                    'feedingItems' : feedingItems
                });
            } finally {
                this._endUpdateProperty();
            }

            sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_createViz');
        }
    };
    /**
     * Destroy viz instance and its configuration.
     */
    Chart.prototype._destroyViz = function() {
        this._data = null;
        this._vizModel().type(null);
        this._properties = null;
        this._css = null;
        this._onEventMap = {};

        this._chartView().destroy();

        this._vizCreated = false;
    };
    /**
     * To achieve interoperability with prior CVOM based application. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.toJSON(), which exports CVOM viz instance into a JSON object which contains
     * all information of the CVOM visualization including type, data, properties, css, feeding and size.<br/>
     *
     * @method sap.viz.controls.chart.Chart.prototype.exportViz
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * @return {JSON}
     */
    Chart.prototype.exportViz = function(options) {
        return (this._chartView().hasChartInstance() || this._chartView().exportable()) ? this._chartView().exportViz(options) : null;
    };
    /**
     * Create viz instance from JSON object which contains all information of the CVOM visualization including
     * type, data, properties, css, feeding and size.
     * @method sap.viz.controls.chart.Chart.prototype.loadViz
     * @param {JSON} vizJSON
     */
    Chart.prototype.loadViz = function(vizJSON) {
        if (arguments.length === 1) {
            vizJSON = sap.viz.api.serialization.migrate(vizJSON);
            var vizType = vizJSON.type;
            if (vizJSON.data && vizJSON.data.type) {
                if (vizJSON.data.type === 'Crosstable') {
                    var data = new sap.viz.api.data.CrosstableDataset();
                    data.data(vizJSON.data.val);
                    if (vizJSON.data.val.infos) {
                        data.info([{
                            'type' : 'additionalData',
                            'info' : vizJSON.data.val.infos
                        }]);
                    }
                    vizJSON.data = data;
                } else if (vizJSON.data.type === 'FlatTable') {
                    vizJSON.data = new sap.viz.api.data.FlatTableDataset(vizJSON.data.val);
                } else {
                    vizJSON.data = vizJSON.data.val;
                }
            }
            if (vizType !== this._vizModel().type()) {
                this._loadingModel = true;
                this._vizModel().vizModelChanged({
                    'type' : vizType
                });
                this._loadingModel = false;
            }

            this._properties = {};
            vizJSON.properties = vizJSON.properties || {};
            this._applyLeanLayout(vizJSON);
            //In _initOption method, this._properties will be filled with new properties which is entered by user for new chart.
            this._initOptions(vizJSON);

            var defaultProperties = this._getDefaultProperties(vizType);
            //Use user input to override default properties
            vizJSON.properties = utils.updateJSON(defaultProperties, vizJSON.properties);
            vizJSON.properties = this._chartView().getValidProperties(vizJSON.properties, vizType);

            this._clearAxisCache();

            this._type = vizType;
            this._vizCreated = true;

            this._updateFeeding(vizJSON, vizType);
            this._chartViewInstance.loadViz(vizJSON);
        }
    };

    Chart.prototype._applyLeanLayout = function(vizJSON) {
        if (this._chartViewInstance instanceof InfoChartView && this._uiConfig.forceLeanLayout === true) {
            this._properties.title = this._properties.title || {};
            this._properties.title.visible = false;
            this._properties.legend = this._properties.legend || {};
            this._properties.legend.visible = false;

            this._properties.categoryAxis = this._properties.categoryAxis || {};
            this._properties.categoryAxis.title = this._properties.categoryAxis.title || {};
            this._properties.categoryAxis.title.visible = false;
            this._properties.categoryAxis2 = this._properties.categoryAxis2 || {};
            this._properties.categoryAxis2.title = this._properties.categoryAxis2.title || {};
            this._properties.categoryAxis2.title.visible = false;
            this._properties.valueAxis = this._properties.valueAxis || {};
            this._properties.valueAxis.title = this._properties.valueAxis.title || {};
            this._properties.valueAxis.title.visible = false;
            this._properties.valueAxis2 = this._properties.valueAxis2 || {};
            this._properties.valueAxis2.title = this._properties.valueAxis2.title || {};
            this._properties.valueAxis2.title.visible = false;

            vizJSON.properties = vizJSON.properties || {};
            vizJSON.properties = utils.updateJSON(vizJSON.properties, this._properties);
        }
    };

    Chart.prototype._updateVizInstance = function() {
        var type = this._vizModel().type();
        var feeds = this.feeds({
            'withMND' : true
        });

        var properties = this._chartView().getValidProperties(this._properties, type);

        var options = {
             'properties' : properties,
             'css' : this._css,
             'data' : this._data
        };

        this._updateFeeding(options, type);
        this._data = options.data;

        this._chartView().update(options);
    };

    /**
     * Create viz instance
     * @param {Boolean} fromAPI
     */
    Chart.prototype._createVizInstance = function(fromAPI) {
        if (!this._vizCreated) {
            return;
        }
        try {
            var type = this._vizModel().type();
            var defaultProperties = this._getDefaultProperties(type);
            var properties = utils.updateJSON(defaultProperties, this._properties);
            properties = this._chartView().getValidProperties(properties, type);
            var options = {
                'type' : type,
                'data' : this._data,
                'css' : this._css,
                'properties' : properties
            };
            this._updateFeeding(options, type);
            this._data = options.data;
            // update the cached type when create viz instance.
            this._type = options.type;
            // console.log(options.data, options.feeding);

            //do not hide loading icon for new geo map
            if (!ChartTypeUtil.isGeo(this._type)) {
                this._chartView().hideLoadingIcon();
            }

            this._chartView().create(options);
        } catch (error) {
            //TODO when throw error???
            if (RuntimeManager.getRuntime()._modelRefs[this._uid] === 1) {
                throw error;
            }
        }
    };

    Chart.prototype._updateFeeding = function(options, type) {
        var feeds = this.feeds({
            'withMND' : true
        });
        if(!ChartTypeUtil.isTable(type)) {
            if(!ChartTypeUtil.isGeo(type) && FeedUtils.isEmptyFeeds(feeds)) {
                if(VizUtils.getDatasetType(options.data) !== DatasetTypeConst.CrosstableDataset || VizUtils.hasFakeData(options.data)) {
                    options.data = IncompleteGhost.getDataset(type);
                }
            } else {
                options.feeding = this._chartViewInstance.buildFeedings(type, options.data, feeds);
            }
        } else {
            if(!options.data || VizUtils.hasFakeData(options.data)) {
                options.data = IncompleteGhost.getDataset(type);
            }
            options.feeding = this._chartViewInstance.buildFeedings(type, options.data, feeds);
        }
    };

    /**
     * Save chart control into a JSON object which contains 2 kinds of information:
     * 1. information of viz instance, including type, data, properties, css, feeding and size.
     * 2. information of chart control, including title mode, chart type, feedingItems.
     * @method sap.viz.controls.chart.Chart.prototype.save
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * @return {JSON}
     */
    Chart.prototype.save = function(options) {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_save');

        var jsonValue = {};
        //viz instance
        jsonValue["vizInstance"] = this.exportViz(options);
        var feedingItems = this.feeds();
        var feedsJSON = this._chartViewInstance.FeedsToJSON(feedingItems);
        jsonValue["feedingItems"] = feedsJSON;
        jsonValue["type"] = this._vizModel().type();
        jsonValue["vizTitleMode"] = this._titleMode;
        jsonValue["vizView"] = this._chartViewInstance.save();
        jsonValue["axis"] = this._saveAxisCache();
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_save');

        return jsonValue;
    };
    /**
     * Load chart control from JSON object which contains 2 kinds of information:
     * 1. load information of chart control, including title mode, chart type, feedingItems.
     * 2. create viz instance from JSON object which including type, data, properties,
     * css, feeding and size.
     * @method sap.viz.controls.chart.Chart.prototype.load
     * @param {JSON} valueJSON
     */
    Chart.prototype.load = function(valueJSON) {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_load');

        valueJSON = this._chartPreHandler.preLoadChart(valueJSON);
        this._beginUpdateProperty();

        var titleMode = valueJSON["vizTitleMode"];
        if (titleMode) {
            this.vizTitleMode(titleMode);
        }
        this._loadingModel = true;
        var type = valueJSON["type"];

        this._updateView(type);
        var feeds = null;
        var feedsJSON = valueJSON['feedingItems'];
        if (feedsJSON) {
            feeds = this._chartViewInstance.FeedsFromJSON(feedsJSON);
        }
        this._vizModel().load({
            "type" : type,
            "feedingItems" : feeds
        });
        this._loadingModel = false;

        var vizInstance = valueJSON["vizInstance"];
        if (vizInstance) {
            this._loadingInstance = true;
            if (valueJSON["vizView"]) {
                this._chartViewInstance.load(valueJSON["vizView"], vizInstance.properties);
            }
            this.loadViz(vizInstance);
            this._loadingInstance = false;
        }

        var axisCache = valueJSON["axis"];
        if (axisCache) {
            this._loadAxisCache(axisCache);
        }
        this._endUpdateProperty();

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_load');
    };

    /**
     * Get/Set all feeds data.
     * To get feeds, please use feeds() or feeds({withMND: true/false}). The feeds order is always same with the feeding
     * definition of chart.
     * If the user shows MND in UI,
     * with option {withMND : true}, return current feeds with MND;
     * with option {withMND : false}, return current feeds without MND;
     * with no option, return current feeds.
     * If the user doesn't show MND in UI, get feeds always return current feeds, the option value will be ignored.
     * To set feeds, please use feeds(feedItems).
     * @method sap.viz.controls.chart.Chart.prototype.feeds
     * @param {Array<sap.viz.controls.common.feeds.FeedItem>|JSON} value
     * @return {Array<sap.viz.controls.common.feeds.FeedItem>} Current feed items.
     *     An array of {@link sap.viz.controls.common.feeds.FeedItem}.
     */
    Chart.prototype.feeds = function(value) {
        if (arguments.length > 0 && utils.isArray(value)) {
            if (value !== null && value !== undefined && !VizUtils.isArrayOfFeedItem(value)) {
                return;
            }

            this._beginUpdateProperty();

            var newValue = value.slice(0);
            this._vizModel().feedingItems(newValue, this._enableTrellis);

            try {
                var type = this._vizModel().type();
                if (this._needCreateViz(type, false)) {
                    this._createVizInstance();
                } else {
                    this._updateVizInstance();
                }
            } catch (error) {
                this._endUpdateProperty();
                throw error;
            }

            this._endUpdateProperty();
            return this;
        } else {
            return this._vizModel().explicitFeedingItems(value);
        }
    };

    /**
     * Enable or disable morphing.
     * Note: The following viz types are not supporting morphing:
     * - viz/geobubble
     * - viz/choropleth
     * - viz/geopie
     * - viz/geomap
     * - viz/ext/table
     * - viz/ext/crosstab
     * @method sap.viz.controls.chart.Chart.prototype.enableMorphing
     * @param {Boolean} value
     *                  Default value is true.
     *                  If value is true, enable morphing.
     *                  If value is false, disable morphing.
     */
    Chart.prototype.enableMorphing = function(value) {
        // TODO: There is no determined behavior definition for the situation if chart view is not existing. The if
        // (this._chartView) needs to be refined in Chart control.
        if (arguments.length > 0) {
            if (this._chartView()) {
                return this._chartView().enableMorphing(!!value);
            }
        } else {
            if (this._chartView()) {
                return this._chartView().enableMorphing();
            }
        }

        return this;
    };
    /**
     * Get/set enablePropertyZone.
     * Note: This flag is referred to whether property zones of chart can be selected,
     * and it means properties of these zones can be edited.
     * @method sap.viz.controls.chart.Chart.prototype.enablePropertyZone
     * @param {Boolean} value
     *                  Default value is false.
     *                  If value is false, disable selecting property zone.
     *                  If value is true, enable selecting property zone.
     * @returns {Boolean} Current value of enablePropertyZone
     */
    Chart.prototype.enablePropertyZone = function(value) {
        if (arguments.length > 0) {
            if (this._chartView()) {
                return this._chartView().enablePropertyZone(!!value);
            }
        } else {
            if (this._chartView()) {
                return this._chartView().enablePropertyZone();
            }
        }
        return this;
    };
    /**
     * Update title according to the current feedItems and set this title back for chart instance.
     */
    Chart.prototype._updateTitle = function() {
        if (this.isTitleCustomized()) {
            return;
        }
        var newTitle = this.getTitleTextByFeeding();
        this._properties.title = this._properties.title || {};
        newTitle = newTitle.trim();
        if (this._properties.title.text != newTitle) {
            this._properties.title.text = newTitle;
        }
    };

    Chart.prototype.feeding = function() {
        if (this._chartViewInstance) {
            return this._chartViewInstance.feeding();
        } else {
            return [];
        }
    };

    /**
     * Show customized message and destory the viz instance.
     * @method sap.viz.controls.chart.Chart.prototype.showMessage
     * @param {String} message
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * ...
     * case 1:
     * if (errorHappened) {
     *     chart.showMessage("your error message");
     * } else {
     *     chart.vizUpdate(); // or chart.vizXXX();
     * }

     * case 2:
     * try {
     *     chart.vizUpdate(); // or chart.vizXXX();
     * } catch (error) {
     *     chart.showMessage(error);
     * }
     * </pre>
     */
    Chart.prototype.showMessage = function(message) {
        if (arguments.length == 1) {
            if (this._chartView()) {
                return this._chartView().updateDescription(message);
            }
        }
    };

    Chart.prototype.exportToSVGString = function(option) {
        return this._chartView().exportToSVGString(option);
    };

    Chart.prototype.supportExportToSVG = function() {
        return this._chartView().supportExportToSVG();
    };

    Chart.prototype.getPropertyZones = function() {
        return this._chartView().getPropertyZones();
    };

    Chart.prototype.setPropertyZones = function(propertyZones) {
        this._chartView().setPropertyZones(propertyZones);
    };

    Chart.prototype.queryProperties = function(options) {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_queryProperties');
        var ret = this._chartView().queryProperties(options);
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:chart_control_api_queryProperties');
        return ret;
    };

    Chart.prototype.updateProperties = function(options) {
        this._chartView().updateProperties(options);
    };

    Chart.prototype.selectedPropertyZone = function(selection) {
        var cv = this._chartView();
        return cv.selectedPropertyZone.apply(cv, arguments);
    };

    Chart.prototype.getZoneName = function(point) {
        return this._chartView().getZoneName.apply(this._chartView(), arguments);
    };

    Chart.prototype.getDataPointsPosition = function(dataPoints){
        return this._chartView().getDataPointsPosition.apply(this._chartView(), arguments);
    };

    Chart.prototype.setAxisScale = function(axis) {
        return this._chartView().setAxisScale.apply(this._chartView(), arguments);
    };

    Chart.prototype.vizCssProperty = function(selector, propName, propValue) {
        return this._chartView().cssProperty.apply(this._chartView(), arguments);
    };

    Chart.prototype.getFeeding = function() {
        return this._chartView().feeding();
    };

    Chart.prototype._getDefaultProperties = function(type) {
        if (!type) {
            return {};
        }
        var properties;
        var chartId = ChartTypeUtil.getChartId(type);
        if (this._uiConfig && this._uiConfig.hasOwnProperty('specificProperties')) {
            properties = utils.updateJSON(this._uiConfig.defaultProperties, this._uiConfig.specificProperties[chartId]);
        } else {
            properties = this._uiConfig ? this._uiConfig.defaultProperties : null;
        }
        properties = VizUtils.convertProperties(properties, ChartTypeUtil.getVizType(type), type);
        return properties;
    }

    return Chart;
});


define('sap/viz/controls/plugins/infochart/getPropertiesByCtx',['sap/viz/controls/common/utils/Utils'], function(Utils) {
    function equalCtx(ctx1, ctx2) {
        var keys1 = Object.keys(ctx1), keys2 = Object.keys(ctx2);
        return (keys1.length > 0) && keys1.every(function(key) {
            return ctx1[key] === ctx2[key];
        });
    }

    function match(configCtx, dpCtx) {
        if (!configCtx) {
            return false;
        }
        if (!Array.isArray(configCtx)) {
            configCtx = [configCtx];
        }

        return configCtx.some(function(ctx) {
            if (!ctx) {
                return true;
            }

            return equalCtx(ctx, dpCtx);
        });
    }

    function filterDimensionContext(context, measureIds) {
        var ret;
        for (var key in context) {
            if (!ret) {
                ret = {};
            }
            var isDimension = true;
            for (var i = 0; i < measureIds.length; i++) {
                if (key === measureIds[i]) {
                    measureIds.splice(i, 1);
                    isDimension = false;
                    break;
                }
            }
            if (!isDimension) {
                continue;
            }
            ret[key] = context[key];
        }
        return ret;
    };

    return function(context, configs) {
        var ctx = context.ctx;

        if (!Array.isArray(configs)) {
            configs = [configs];
        }

        var defaultResult;
        for (var i = 0, len = configs.length; i < len; i++) {
            var config = configs[i], configCtx = config.ctx, paras = config.paras;
            if (!configCtx) {
                defaultResult = paras;
            }
        }

        var paras = this._parameters, isUpdated, contextNum = -1, number, paraNum;
        for (var i = 0, len = configs.length; i < len; i++) {
            var config = configs[i], configCtx = config.ctx, paras = config.paras;
            if (match(configCtx, ctx)) {
                number = 0;
                for (var j in configCtx) {// Get context key number
                    number++;
                }
                if (contextNum < number) {// Get most detailed context
                    contextNum = number;
                    paraNum = i;
                }
            }
        }
        if (configs[paraNum]) {
            return configs[paraNum].paras;
        }
        return defaultResult;
    };
}); 
define('sap/viz/controls/plugins/infochart/SVG',[],function() {
  var svgNS = 'http://www.w3.org/2000/svg';

  var ELLIPSIS_SUFFIX = "...";

  var textMeasureNode;

  function create(tagName, refNode, insert) {
    var doc = refNode ? refNode.ownerDocument : window.document;
    var ns = tagName.toLowerCase() === "svg" ? svgNS
        : (refNode ? refNode.namespaceURI : svgNS);
    var node = doc.createElementNS(ns, tagName);
    return refNode ? (insert ? refNode.parentNode.insertBefore(node, refNode)
        : refNode.appendChild(node)) : node;
  }

  function getTextMeasureNode(text, style) {
    if (!textMeasureNode) {
      var svg = create("svg", document.body);
      svg.style.cssText = "position:absolute;left:-1000px;top:-1000px;z-index:-9000;width:1px;height:1px";
      textMeasureNode = create("text", svg);
    }
    textMeasureNode.style.cssText = toCSSText(style);
    textMeasureNode.textContent = text;
    return textMeasureNode;
  }

  function toCSSText(style) {
    var cssText = "";
    if (Object.prototype.toString.call(style) === '[object String]') {
      cssText = style;
    } else {
      for ( var i in style) {
        if (style.hasOwnProperty(i)) {
          var value = style[i];
          if (value !== null && value !== undefined && value !== "") {
            cssText += i + ":" + value + ";";
          }
        }
      }
    }

    return cssText;
  }

  return {
    create : create,
    measureText : function(text, style) {
      if (!text) {
        return {
          width : 0,
          height : 0,
          x : 0,
          y : 0
        };
      }

      return getTextMeasureNode(text, style).getBBox();
    },
    toCSSText : toCSSText,
    createTextNode : function(text, style, measure, maxWidth, maxHeight) {
      style = toCSSText(style);

      var hasMaxWidth = maxWidth !== undefined, hasMaxHeight = maxHeight !== undefined;

      var title;
      if (measure || hasMaxWidth || hasMaxHeight) {
        var measureNode = getTextMeasureNode(text, style);

        var change = false;
        if (hasMaxWidth) {
          var length = measureNode.getComputedTextLength();

          if (length > maxWidth) {
            measureNode.textContent = ELLIPSIS_SUFFIX;
            length = measureNode.getComputedTextLength();
            maxWidth -= length;
            if (maxWidth <= 0) {
              return;
            }

            measureNode.textContent = text;
            var num = text.length - 1;
            while (num > 0 &&
                (measureNode.getSubStringLength(0, num) > maxWidth)) {
              num--;
            }

            if (num > 0) {
              title = text;
              text = text.substr(0, num) + ELLIPSIS_SUFFIX;
              change = true;
            } else {
              return;
            }
          }
        }

        if (measure || hasMaxHeight) {
          if (change) {
            measureNode.textContent = text;
          }

          if (measure) {
            measure = measureNode.getBBox();
          }

          if (hasMaxHeight && measure.height > maxHeight) {
            return;
          }
        }
      }

      var ret = create("text");
      ret.setAttribute("style", style);
      ret.textContent = text;

      if (title) {
        var titleNode = create("title", ret);
        titleNode.textContent = title;
      }

      return measure ? {
        measure : measure,
        node : ret
      } : ret;
    }
  };
});
define('sap/viz/controls/plugins/infochart/Icon',[ "./SVG" ], function(SVG) {

  var _cache = {};
  var Icon = function(content) {
    var container = document.createElement("div");
    container.innerHTML = content;
    var svgNode = this._svgNode = container.firstChild;
    if(!_cache[content]){
        document.body.appendChild(container);
        _cache[content] = svgNode.getBBox();
    }
    var bbox = _cache[content];
    this._width = bbox.width;
    this._height = bbox.height;
    this._x = bbox.x;
    this._y = bbox.y;
  };

  var prototype = Icon.prototype;

  prototype.render = function(parent, scale, fill) {
    var group = SVG.create("g", parent);

    var svgNode = this._svgNode;
    var node = this._svgNode.firstChild;
    while (node) {
      var sibling = node.nextSibling;
      group.appendChild(node);
      node = sibling;
    }
    if (scale) {
    	
      if (Array.isArray(scale)) {
        scale = scale.join(" ");
      }
      group.setAttribute("transform", "scale(" + scale + ")");
    }
    if (fill) {
      group.setAttribute("fill", fill);
    }

    return group;
  };
  prototype.clipPath = function(parent){
    var svgNode = this._svgNode;
    var node = this._svgNode.firstChild;
    while (node) {
      var sibling = node.nextSibling;
      parent.appendChild(node);
      node = sibling;
    }
  };

  prototype.destroy = function() {
    var container = this._svgNode.parentNode;
    if(container && container.parentNode){
        container.parentNode.removeChild(container);
    }
    delete this._svgNode;
  };
  prototype.getWidth = function() {
    return this._width;
  };
  prototype.getHeight = function() {
    return this._height;
  };
  prototype.getX = function() {
    return this._x;
  };
  prototype.getY = function() {
    return this._y;
  };
  return Icon;

});
define('sap/viz/controls/plugins/infochart/StackDecoratorGenerator',
    [ "./getPropertiesByCtx", "./SVG", "./Icon" ],
    function(getPropertiesByCtx, SVG, Icon) {

      var ARROW_LENGTH = 50;
      var _ID =0;

      function triangle(width, height, isHorizontal, negative) {
        var points;
        if (negative) {
          points = [ [ width, 0 ] ];
          if (isHorizontal) {
            points.push([ 0, height / 2 ], [ width, height ]);
          } else {
            points.push([ 0, 0 ], [ width / 2, height ]);
          }
        } else {
          points = [ [ 0, height ] ];
          if (isHorizontal) {
            points.push([ 0, 0 ], [ width, height / 2 ]);
          } else {
            points.push([ width / 2, 0 ], [ width, height ]);
          }
        }
        return points;
      }

      var pathGens = {
        "pike" : function(width, height, isHorizontal, negative) {
          var points = triangle(width, height, isHorizontal, negative);
          if (negative) {
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.splice(1, 0, [ ARROW_LENGTH, 0 ]);
                points.splice(3, 0, [ ARROW_LENGTH, height ]);
              }
            } else {
              if (height > ARROW_LENGTH) {
                points.splice(2, 0, [ 0, height - ARROW_LENGTH ]);
                points.splice(4, 0, [ width, height - ARROW_LENGTH ]);
              }
            }
          } else {
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.splice(2, 0, [ width - ARROW_LENGTH, 0 ]);
                points.splice(4, 0, [ width - ARROW_LENGTH, height ]);
              }
            } else {
              if (height > ARROW_LENGTH) {
                points.splice(1, 0, [ 0, ARROW_LENGTH ]);
                points.splice(3, 0, [ width, ARROW_LENGTH ]);
              }
            }
          }

          return points;
        },
        "triangle" : triangle,
        "trapezoid" : function(width, height, isHorizontal, negative) {
          var points;
          if (negative) {
            points = [ [ width, 0 ] ];
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.push([ ARROW_LENGTH, 0 ]);
              }
              points.push([ 0, height ]);
            } else {
              points.push([ 0, 0 ]);
              if (height > ARROW_LENGTH) {
                points.push([ 0, height - ARROW_LENGTH ]);
              }
            }
          } else {
            points = [ [ 0, height ] ];
            if (isHorizontal) {
              points.push([ 0, 0 ]);
              if (width > ARROW_LENGTH) {
                points.push([ width - ARROW_LENGTH, 0 ]);
              }
              points.push([ width, height ]);
            } else {
              if (height > ARROW_LENGTH) {
                points.push([ 0, ARROW_LENGTH ]);
              }
              points.push([ width, 0 ]);
            }
          }
          points.push([ width, height ]);
          return points;
        }
      };

      return {
        name : "stackDecorator",
        fn : function(configs) {
          return function(context) {
            var props = getPropertiesByCtx(context, configs);

            if (!props) {
                return;
            }
            
            var graphic = context.graphic, node, width = graphic.width, height = graphic.height;
            var stackShape = props.stackShape || {};
            var stackShapeValue = stackShape.value;
            var node = context.g;
            var clipPath = SVG.create("clipPath", node);
            var id = "clipPath_" + (_ID++);
            clipPath.setAttribute("id", id);
            node.setAttribute("clip-path", "url(#"+id+")");
            if (stackShape.type === "svg") {
                  var iconSVG = new Icon(stackShapeValue);
                  var imageWidth = iconSVG.getWidth();
                  var imageHeight = iconSVG.getHeight();
                  var wScale = width / imageWidth;
                  var hScale = height / imageHeight;
                  iconSVG.clipPath(clipPath);
                  clipPath.setAttribute("transform", "translate( "+ graphic.x +","+ graphic.y+") scale(" + wScale +" "+ hScale+ ")");
                  iconSVG.destroy();
              } else {
                  if (!stackShapeValue || stackShapeValue === "rectangle") {
                      var rect = SVG.create("rect", clipPath);
                      rect.setAttribute("width", width);
                      rect.setAttribute("height", height);
                  } else {
                      var path = SVG.create("path", clipPath);
                      var d = "";
                      pathGens[stackShapeValue](width, height,
                          context.horizontal, context.negative).forEach(
                          function(point, index) {
                            d += (index === 0 ? "M" : "L") + point[0] + " " +
                                point[1];
                          });
                      d += "Z";
    
                      path.setAttribute("d", d);
                    }
                    clipPath.setAttribute("transform", "translate( "+ graphic.x +","+ graphic.y+")");
              }

          };
        }
      };
    });

define('sap/viz/controls/plugins/infochart/BarShapeRendererGenerator',
    [ "./getPropertiesByCtx", "./SVG", "./Icon" ],
    function(getPropertiesByCtx, SVG, Icon) {

      var ARROW_LENGTH = 50;

      function triangle(width, height, isHorizontal, negative) {
        var points;
        if (negative) {
          points = [ [ width, 0 ] ];
          if (isHorizontal) {
            points.push([ 0, height / 2 ], [ width, height ]);
          } else {
            points.push([ 0, 0 ], [ width / 2, height ]);
          }
        } else {
          points = [ [ 0, height ] ];
          if (isHorizontal) {
            points.push([ 0, 0 ], [ width, height / 2 ]);
          } else {
            points.push([ width / 2, 0 ], [ width, height ]);
          }
        }
        return points;
      }

      var pathGens = {
        "pike" : function(width, height, isHorizontal, negative) {
          var points = triangle(width, height, isHorizontal, negative);
          if (negative) {
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.splice(1, 0, [ ARROW_LENGTH, 0 ]);
                points.splice(3, 0, [ ARROW_LENGTH, height ]);
              }
            } else {
              if (height > ARROW_LENGTH) {
                points.splice(2, 0, [ 0, height - ARROW_LENGTH ]);
                points.splice(4, 0, [ width, height - ARROW_LENGTH ]);
              }
            }
          } else {
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.splice(2, 0, [ width - ARROW_LENGTH, 0 ]);
                points.splice(4, 0, [ width - ARROW_LENGTH, height ]);
              }
            } else {
              if (height > ARROW_LENGTH) {
                points.splice(1, 0, [ 0, ARROW_LENGTH ]);
                points.splice(3, 0, [ width, ARROW_LENGTH ]);
              }
            }
          }

          return points;
        },
        "triangle" : triangle,
        "trapezoid" : function(width, height, isHorizontal, negative) {
          var points;
          if (negative) {
            points = [ [ width, 0 ] ];
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.push([ ARROW_LENGTH, 0 ]);
              }
              points.push([ 0, height ]);
            } else {
              points.push([ 0, 0 ]);
              if (height > ARROW_LENGTH) {
                points.push([ 0, height - ARROW_LENGTH ]);
              }
            }
          } else {
            points = [ [ 0, height ] ];
            if (isHorizontal) {
              points.push([ 0, 0 ]);
              if (width > ARROW_LENGTH) {
                points.push([ width - ARROW_LENGTH, 0 ]);
              }
              points.push([ width, height ]);
            } else {
              if (height > ARROW_LENGTH) {
                points.push([ 0, ARROW_LENGTH ]);
              }
              points.push([ width, 0 ]);
            }
          }
          points.push([ width, height ]);
          return points;
        }
      };

      return {
        name : "barShapeRenderer",
        fn : function(configs) {
          return function(context) {
            var props = getPropertiesByCtx(context, configs);

            if (props) {
              var graphic = context.graphic, node, width = graphic.width, height = graphic.height, dataPointShapeFill = props.dataPointShapeFill, color = dataPointShapeFill ||
                  graphic.fill, dataPointShape = props.dataPointShape || {}, dataPointShapeType = dataPointShape.type, dataPointShapeValue = dataPointShape.value;

              if (dataPointShapeType === "svg") {
                var iconSVG = new Icon(dataPointShapeValue);
                node = SVG.create("g");
                var imageWidth = iconSVG.getWidth();
                var imageHeight = iconSVG.getHeight();
                var wScale = width / imageWidth;
                var hScale = height / imageHeight;
                iconSVG.render(node, [ wScale, hScale ], color);
                if (dataPointShapeFill) {
                  context.data.color = dataPointShapeFill;
                }
                node.setAttribute("transform", "translate(" +
                    (width / 2 - imageWidth * wScale / 2 - iconSVG.getX() *
                        wScale) +
                    "," +
                    (height / 2 - imageHeight * hScale / 2 - iconSVG.getY() *
                        hScale) + ")");
                iconSVG.destroy();
              } else {
                if (!dataPointShapeValue || dataPointShapeValue === "rectangle") {
                  node = SVG.create("rect");
                  node.setAttribute("width", width);
                  node.setAttribute("height", height);
                } else {
                  node = SVG.create("path");
                  var d = "";
                  pathGens[dataPointShapeValue](width, height,
                      context.horizontal, context.negative).forEach(
                      function(point, index) {
                        d += (index === 0 ? "M" : "L") + point[0] + " " +
                            point[1];
                      });
                  d += "Z";

                  node.setAttribute("d", d);
                }

                if (dataPointShapeFill) {
                  context.data.color = dataPointShapeFill;
                }
                node.setAttribute("fill", color);
              }

              return node;
            }

          };
        }
      };
    });

// @formatter:off
define('sap/viz/controls/plugins/infochart/CategoryAxisLabelRendererGenerator',[
    './getPropertiesByCtx',
    './SVG',
    './Icon'
], function(getPropertiesByCtx, SVG, Icon) {
// @formatter:on

    var PADDING = 5;
    var IMAGE_TEXT_GAP = 3;
    var DEFAULT_IMAGE_RATIO = 0.5;

    return {
        name : "categoryAxisLabelRenderer",
        fn : function(configs) {
            var categoryAxisLabelRenderer = function(context) {
                var props = getPropertiesByCtx(context, configs);

                if (props) {
                    var position = context.position;
                    var isLeft = position === "left";

                    var cellWidth = context.size.width;
                    var cellHeight = context.size.height;

                    var restWidth = cellWidth, restHeight = cellHeight;
                    if (isLeft) {
                        restWidth -= PADDING;
                    } else {
                        restHeight -= PADDING;
                    }

                    if (restWidth <= 0 || restHeight <= 0) {
                        return null;
                    }

                    var group = SVG.create("g");

                    var translateX, translateY;

                    // Store image prefer height value for text rotation usage.
                    var imageHeightOffset = 0;

                    if (props.iconVisible === true && props.iconSVG) {
                        var ratio = props.iconSize;
                        if (ratio === undefined) {
                            ratio = DEFAULT_IMAGE_RATIO;
                        }

                        if (ratio > 0) {
                            var iconSVG = new Icon(props.iconSVG);
                            var imageWidth = iconSVG.getWidth();
                            var imageHeight = iconSVG.getHeight();
                            var preferImageWidth, preferImageHeight;
                            if (isLeft) {
                                preferImageWidth = preferImageHeight = Math.min(cellHeight * ratio, restWidth);
                            } else {
                                preferImageWidth = preferImageHeight = Math.min(cellWidth * ratio, restHeight);
                            }
                            var scale = Math.min(preferImageWidth / imageWidth, preferImageHeight / imageHeight);
                            var imageGroup = SVG.create("g", group);

                            iconSVG.render(imageGroup, scale, props.iconColor);
                            iconSVG.destroy();

                            var imageX = iconSVG.getX() * scale;
                            var imageY = iconSVG.getY() * scale;

                            if (isLeft) {
                                translateX = restWidth - preferImageWidth - imageX;
                                translateY = restHeight / 2 - preferImageHeight / 2 - imageY;
                                restWidth -= preferImageWidth + IMAGE_TEXT_GAP;
                            } else {
                                translateX = restWidth / 2 - preferImageWidth / 2 - imageX;
                                translateY = PADDING - imageY;
                                restHeight -= preferImageHeight + IMAGE_TEXT_GAP;
                                // For text rotation usage.
                                imageHeightOffset = preferImageHeight + IMAGE_TEXT_GAP;
                            }

                            imageGroup.setAttribute("transform", "translate(" + translateX + " " + translateY + ")");
                        }
                    }

                    if (restWidth > 0 && restHeight > 0) {
                        if (props.textVisible !== false) {
                            // Note: The case to be rotated: horizontal axis.
                            var isRotated = !isLeft && context.rotated === true;

                            var textMaxWidth, textMaxHeight;
                            if (isRotated) {
                                textMaxWidth = isLeft ? undefined : restHeight;
                                textMaxHeight = restWidth;
                            } else {
                                textMaxWidth = restWidth;
                                textMaxHeight = isLeft ? undefined : restHeight;
                            }

                            var styles = context.styles;
                            var textNodeRet = SVG.createTextNode(context.text, {
                                "font-family" : props.fontFamily || styles["font-family"],
                                "font-size" : props.fontSize || styles["font-size"],
                                "font-weight" : props.fontWeight || styles["font-weight"],
                                "font-style" : props.fontStyle || styles["font-style"],
                                "fill" : props.fontColor || styles["fill"]
                            }, true, textMaxWidth, textMaxHeight);

                            if (textNodeRet) {
                                var measure = textNodeRet.measure;
                                if (isRotated) {
                                    // Set some static values according to CVOM default renderer implementation.
                                    var fontSize = props.fontSize || styles['font-size'];
                                    var labelHeight = parseFloat(fontSize) * 1.2;
                                    var offset = 3;
                                    var labelOffset = 6;
                                    translateX = restWidth / 2 + labelHeight / 2 - offset;
                                    translateY = labelOffset;
                                } else {
                                    if (isLeft) {
                                        translateX = restWidth - measure.width - measure.x;
                                        translateY = restHeight / 2 - measure.height / 2 - measure.y;
                                        if (context.childCells && context.childCells.length) {
                                            translateY -= context.childCells[0].cellHeight / 2;
                                        }
                                    } else {
                                        translateX = restWidth / 2 - measure.width / 2 - measure.x;
                                        translateY = cellHeight - restHeight - measure.y;
                                    }
                                }

                                var textNode = textNodeRet.node;
                                if (isRotated) {
                                    translateY += imageHeightOffset;
                                    textNode.setAttribute('x', translateX);
                                    textNode.setAttribute('y', translateY);
                                    textNode.setAttribute('text-anchor', 'end');
                                    textNode.setAttribute('transform', 'rotate(-90,' + translateX + ',' + translateY + ')');
                                } else {
                                    textNode.setAttribute("transform", "translate(" + translateX + " " + translateY + ")");
                                }

                                group.appendChild(textNode);
                            }
                        }
                    }

                    return group;
                }

            };

            categoryAxisLabelRenderer.getPreferredSize = function(context) {
                var props = getPropertiesByCtx(context, configs);
                if (!props) {
                    return;
                }

                var cssString = categoryAxisLabelRenderer._buildCssString(context.styles, props);

                var isRotated = context.rotated;

                if (props.iconVisible === true) {
                    if (!props.iconSVG) {
                        return;
                    }
                } else {
                    if (props.textVisible === false) {
                        return {
                            cellWidth : 0,
                            cellHeight : 0,
                        };
                    } else {
                        var textSize = SVG.measureText(context.text, cssString);
                        if (context.position === 'left') {
                            return {
                                cellWidth : textSize.width + PADDING,
                                cellHeight : textSize.height
                            };
                        } else {
                            if (textSize.width > context.size) {
                                isRotated = true;
                                return {
                                    cellWidth : textSize.height + PADDING,
                                    cellHeight : textSize.width,
                                    rotated : true
                                };
                            } else {
                                return {
                                    cellWidth : textSize.width,
                                    cellHeight : textSize.height + PADDING
                                };
                            }
                        }
                    }
                }

                var cellWidth = PADDING;
                var cellHeight = PADDING;
                var ratio = props.iconSize;
                if (ratio === undefined) {
                    ratio = DEFAULT_IMAGE_RATIO;
                }

                if (ratio <= 0) {
                    return;
                }

                if (context.position === "top" || context.position === "bottom") {
                    cellWidth = context.size;
                    cellHeight += context.size * ratio;
                    if (props.textVisible !== false) {
                        var textSize = SVG.measureText(context.text, cssString);
                        if (textSize.width > context.size) {
                            isRotated = true;
                            cellHeight += IMAGE_TEXT_GAP + textSize.width;
                        } else {
                            cellHeight += IMAGE_TEXT_GAP + textSize.height;
                        }
                    }
                } else {
                    cellHeight = context.size;
                    cellWidth += context.size * ratio;
                    if (props.textVisible !== false) {
                        var textSize = SVG.measureText(context.text, cssString);
                        cellWidth += IMAGE_TEXT_GAP + textSize.width;
                    }
                }

                return {
                    cellWidth : cellWidth,
                    cellHeight : cellHeight,
                    rotated : isRotated
                };
            };

            categoryAxisLabelRenderer._buildCssString = function(styles, props) {
                var cssString = '';
                cssString += 'fill:' + (props.fontColor || styles['fill']) + ';';
                cssString += 'font-family:' + (props.fontFamily || styles['font-family']) + ';';
                cssString += 'font-size:' + (props.fontSize || styles['font-size']) + ';';
                cssString += 'font-style:' + (props.fontStyle || styles['font-style']) + ';';
                cssString += 'font-weight:' + (props.fontWeight || styles['font-weight']) + ';';

                return cssString;
            };

            categoryAxisLabelRenderer.autoHide = function() {
                return true;
            };

            return categoryAxisLabelRenderer;
        }
    };
});

define('sap/viz/controls/plugins/infochart/PieSliceRendererGenerator',["./getPropertiesByCtx", "./SVG"],
  function(getPropertiesByCtx, SVG) {
    return {
      name: "pieSliceRenderer",
      fn: function(configs) {
        return function(context, defaultRenderer) {
          var props = getPropertiesByCtx(context, configs);
          if (props && props.sliceShapeFill){
            context.graphic.color = props.sliceShapeFill;
          }
          return defaultRenderer(context);
        };
      }
    };
  });
define('sap/viz/controls/plugins/infochart/DataLabelRendererGenerator',[ "./getPropertiesByCtx", "./SVG", "./Icon" ], function(
    getPropertiesByCtx, SVG, Icon) {
  var IMAGE_TEXT_GAP = 5, IMAGE_RATIO = 0.8;

  return {
    name : "dataLabelRenderer",
    fn : function(configs) {
      return function(context) {
        var props = getPropertiesByCtx(context, configs);

        if (props) {

          var group = SVG.create("g");

          var textNode, textContent;

          if (props.textVisible !== false) {

            textContent = context.text;

            textNode = SVG.create("text", group);
            textNode.textContent = textContent;

            var style = "", styleValue;
            if ((styleValue = props.fontColor)) {
              style += "fill:" + styleValue + ";";
            }
            if ((styleValue = props.fontFamily)) {
              style += "font-family:" + styleValue + ";";
            }
            if ((styleValue = props.fontSize)) {
              style += "font-size:" + styleValue + ";";
            }
            if ((styleValue = props.fontWeight)) {
              style += "font-weight:" + styleValue + ";";
            }
            if ((styleValue = props.fontStyle)) {
              style += "font-style:" + styleValue + ";";
            }
            if (style) {
              textNode.setAttribute("style", style);
            }
          }

          if (props.iconVisible === true && props.iconSVG) {
            var iconSize = props.iconSize;
            if (iconSize !== 0) {
              iconSize = iconSize || IMAGE_RATIO;

              var iconSVG = new Icon(props.iconSVG);
              var imageGroup = SVG.create("g", group);

              var imageWidth = iconSVG.getWidth();
              var imageHeight = iconSVG.getHeight();

              var horizontal = context.horizontal;

              var originalSize = horizontal ? imageHeight : imageWidth;
              var dataPointSize = context[horizontal ? "dataPointHeight"
                  : "dataPointWidth"];

              if (dataPointSize === 0) {
                  iconSVG.destroy();
                  return group;
              }

              var scale = dataPointSize * iconSize / originalSize;
              iconSVG.render(imageGroup, scale, props.iconColor);
              iconSVG.destroy();

              if (textNode) {
                var styles = context.styles;
                var measure = SVG.measureText(textContent, {
                  "font-family" : props.fontFamily || styles["font-family"],
                  "font-size" : props.fontSize || styles["font-size"],
                  "font-weight" : props.fontWeight || styles["font-weight"],
                  "font-style" : props.fontStyle || styles["font-style"]
                });

                imageWidth *= scale;
                imageHeight *= scale;

                var imageX = iconSVG.getX() * scale;
                var imageY = iconSVG.getY() * scale;

                var translateX, translateY;
                if (horizontal) {
                  translateX = measure.x + measure.width + IMAGE_TEXT_GAP -
                      imageX;
                  translateY = measure.y + measure.height / 2 - imageY -
                      imageHeight / 2;
                } else {
                  translateX = measure.x + measure.width / 2 - imageX -
                      imageWidth / 2;
                  translateY = measure.y - IMAGE_TEXT_GAP - imageY -
                      imageHeight;
                }

                imageGroup.setAttribute("transform", "translate(" + translateX +
                    "," + translateY + ")");
              }
            }
          }

          return group;
        }

      };
    }
  };
});

define('sap/viz/controls/plugins/infochart/LineMarkerRendererGenerator',[ "./getPropertiesByCtx", "./SVG", "./Icon" ], function(
    getPropertiesByCtx, SVG, Icon) {
  return {
    name : "lineMarkerRenderer",
    fn : function(configs) {
      return function(context) {
        var props = getPropertiesByCtx(context, configs);

        if (props) {
          var graphic = context.graphic, iconSVG = props.iconSVG;
          if (iconSVG) {
            var iconSize = props.iconSize;
            if (iconSize === 0) {
              return null;
            }
            iconSize = Math.min(props.iconSize, context.bandLength,
                context.plotSize[context.horizontal ? 0 : 1]);

            iconSVG = new Icon(iconSVG);
            var imageGroup = SVG.create("g");

            var imageWidth = iconSVG.getWidth();
            var imageHeight = iconSVG.getHeight();
            var xScale = iconSize / imageWidth;
            var yScale = iconSize / imageHeight;
            iconSVG.render(imageGroup, [ xScale, yScale ], props.iconColor|| graphic.fill);
            iconSVG.destroy();

            imageGroup.setAttribute("transform", "translate(" +
                (-iconSVG.getX() * xScale - iconSize / 2) + "," +
                (-iconSVG.getY() * yScale - iconSize / 2) + ")");

            return imageGroup;
          }
        }
      };
    }
  };
});

define('sap/viz/controls/plugins/infochart/LineRendererGenerator',[ "./getPropertiesByCtx" ], function(getPropertiesByCtx) {

  return {
    name : "lineRenderer",
    fn : function(configs) {
      return function(context) {
        var props = getPropertiesByCtx(context, configs);

        if (props) {
          var graphic = context.graphic;
          graphic.color = props.color || graphic.color;
          graphic.width = props.width || graphic.width;
          graphic.dash = props.dash || graphic.dash;
        }
      };
    }
  };
});

// @formatter:off
// TODO Check if it could be moved to build script
define('sap/viz/controls/plugins/infochart/setup',[
	'sap/viz/controls/chart/adapters/PropFnGeneratorRegistry',
	'./StackDecoratorGenerator', 
	'./BarShapeRendererGenerator', 
	'./CategoryAxisLabelRendererGenerator',
	'./PieSliceRendererGenerator',
	'./DataLabelRendererGenerator',
	'./LineMarkerRendererGenerator',
	'./LineRendererGenerator'
  ],
    function(PropFnGeneratorRegistry, StackDecoratorGenerator, BarShapeRendererGenerator,
        CategoryAxisLabelRendererGenerator, PieSliceRendererGenerator,
        DataLabelRendererGenerator, LineMarkerRendererGenerator, LineRendererGenerator) {
// @formatter:on

    function register(generator) {
        PropFnGeneratorRegistry.register(generator.name, generator.fn);
    }

    var generators = [StackDecoratorGenerator, BarShapeRendererGenerator, CategoryAxisLabelRendererGenerator, PieSliceRendererGenerator, DataLabelRendererGenerator, LineMarkerRendererGenerator, LineRendererGenerator];
    generators.forEach(register);
});
define('sap/viz/controls/common/utils/OSUtil',[],function() {
    

    /**
     * Helper functions that use feature detection or object support to determine which browser is in use.
     * This is not great, as we should not care about the browser, but it is at least more reliable than
     * user agent string parsing/browser sniffing.
     */
    function _isWebkit() {
        return undefined !== document.documentElement.style.webkitBoxAlign;
    }

    function _isIE() {
        // Only IE will have this object
        return !!window.XDomainRequest;
    }

    function _isChrome() {
        // Only Chrome will have this object
        return !!window.chrome;
    }

    function _isFirefox() {
        // Only firefox will have Moz* style elements AND the Gecko product tag, even
        // thought other vendors (IE) like to copy the user agent and product tag of
        // Firefox.
        return (undefined !== document.documentElement.style.MozBoxAlign) && ("Gecko" === navigator.product);
    }

    function _isJavaFx() {
        // Exception to the rule, as no obvious feature to detect or object support to distinguish JavaFX
        return (/javafx\//i).test(window.navigator.userAgent);
    }

    function _isSafari() {
        // Chrome and Safari are quite similar in the use of Webkit, but only Chrome has the Chrome object
        return _isWebkit() && !_isChrome();
    }

    function _isSafariMobile() {
        // Mobile Safari is similar to Safari and Chrome, but only Mobile Safari has the standalone
        // property indicating that Webkit is being used in standalone mode
        return (undefined !== window.navigator.standalone) && _isWebkit() && !_isChrome();
    }

    return {
        isIE: _isIE,
        isChrome: _isChrome,
        isFirefox: _isFirefox,
        isJavaFx: _isJavaFx,
        isSafari: _isSafari,
        isSafariMobile: _isSafariMobile,
        isWebkit: _isWebkit
    };
});
// @formatter:off
define('sap/viz/controls/contextmenu/constants/MenuItemConst',[
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/managers/LangManager'
],
function(ChartConst, LangManager) {
// @formatter:on
    var MenuItemConst = {};

    MenuItemConst.getText = function(text) {
        return LangManager.get(text);
    };

    MenuItemConst.DEFAULT = {
        "icon" : "/contextmenu/uncheck.png"
    };

    MenuItemConst.LEGEND = {
        "name" : "legend",
        "text" : "VIZ_CONTEXTMENU_SHOW_LEGEND",
        "supportType" : {
            "viz/bar" : true,
            "viz/column" : true,
            "viz/stacked_bar" : true,
            "viz/stacked_column" : true,
            "viz/dual_bar" : true,
            "viz/dual_column" : true,
            "viz/3d_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_combination" : true,
            "viz/pie" : true,
            "viz/donut" : true,
            "viz/pie_with_depth" : true,
            "viz/geobubble" : true,
            "viz/choropleth" : true,
            "viz/geopie" : true,
            "viz/geomap" : true,
            "viz/scatter" : true,
            "viz/bubble" : true,
            "viz/scatter_matrix" : true,
            "viz/treemap" : true,
            "viz/heatmap" : true,
            "viz/radar" : true,
            "viz/boxplot" : true,
            "viz/tagcloud" : true,
            "viz/ext/pa/funnel" : true,
            "viz/ext/pa/pc" : true
        }
    };

    MenuItemConst.DATALABELS = {
        "name" : "datalabels",
        "text" : "VIZ_CONTEXTMENU_SHOW_DATALABELS",
        "supportType" : {
            "viz/bar" : true,
            "viz/column" : true,
            "viz/stacked_bar" : true,
            "viz/stacked_column" : true,
            "viz/dual_bar" : true,
            "viz/dual_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_combination" : true,
            "viz/pie" : true,
            "viz/donut" : true,
            "viz/geobubble" : true,
            "viz/choropleth" : true,
            "viz/geopie" : true,
            "viz/scatter" : true,
            "viz/bubble" : true,
            "viz/scatter_matrix" : true,
            "viz/heatmap" : true,
            "viz/treemap" : true,
            "viz/radar" : true,
            "viz/waterfall" : true
        }
    };

    MenuItemConst.DIRECTION = {
        "name" : "direction",
        "text" : {
            "horizontal" : "VIZ_CONTEXTMENU_VERTICAL",
            "vertical" : "VIZ_CONTEXTMENU_HORIZONTAL"
        },
        "supportType" : {
            "viz/3d_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_combination" : true,
            "viz/boxplot" : true,
            "viz/waterfall" : true
        }
    };

    MenuItemConst.STACKING = {
        "name" : "stacking",
        "text" : {
            "full" : "VIZ_CONTEXTMENU_NORMAL_STACKING",
            "normal" : "VIZ_CONTEXTMENU_FULL_STACKING"
        },
        "supportType" : {
            "viz/stacked_bar" : true,
            "viz/stacked_column" : true,
            "viz/area" : true
        }
    };
    
    MenuItemConst.COMMENT = {
        "name" : "comment",
        "text" : "VIZ_CONTEXTMENU_INSERT_COMMENT",
        "supportType" : {
            "viz/bar" : true,
            "viz/column" : true,
            "viz/stacked_bar" : true,
            "viz/stacked_column" : true,
            "viz/dual_bar" : true,
            "viz/dual_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_combination" : true,
            "viz/pie" : true,
            "viz/donut" : true,
            "viz/geobubble" : true,
            "viz/choropleth" : true,
            "viz/geopie" : true,
            "viz/scatter" : true,
            "viz/bubble" : true,
            "viz/scatter_matrix" : true,
            "viz/treemap" : true,
            "viz/heatmap" : true,
            "viz/radar" : true,
            "viz/boxplot" : true
        }
    };

    MenuItemConst.CHARTEDITOR = {
        "name" : "charteditor",
        "text" : "VIZ_CONTEXTMENU_MENU_CHART_EDITOR",
        "supportType" : {
            "viz/bar" : true,
            "viz/column" : true,
            "viz/stacked_bar" : true,
            "viz/stacked_column" : true,
            "viz/dual_bar" : true,
            "viz/dual_column" : true,
            "viz/3d_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_combination" : true,
            "viz/pie" : true,
            "viz/donut" : true,
            "viz/pie_with_depth" : true,
            "viz/geobubble" : true,
            "viz/choropleth" : true,
            "viz/geopie" : true,
            "viz/scatter" : true,
            "viz/bubble" : true,
            "viz/scatter_matrix" : true,
            "viz/treemap" : true,
            "viz/heatmap" : true,
            "viz/radar" : true,
            "viz/boxplot" : true,
            "viz/tagcloud" : true,
            "viz/tree" : true,
            "viz/network" : true,
            "viz/ext/pa/funnel" : true,
            "viz/ext/pa/pc" : true
        }
    };

    MenuItemConst.MBCLEGEND = {
        "name" : "mbclegend",
        "text" : "VIZ_CONTEXTMENU_CHANGE_MBCLEGEND_COLOR",
        "supportType" : {
            "viz/choropleth" : true,
            "viz/treemap" : true,
            "viz/heatmap" : true,
            "viz/tagcloud" : true
        }
    };

    MenuItemConst.MND = {
        "name" : "mnd",
        "text" : "VIZ_CONTEXTMENU_SHOW_MND",
        "tooltip" : "VIZ_CONTEXTMENU_SHOW_MND_TOOLTIP",
        "supportType" : {
            "viz/bar" : true,
            "viz/column" : true,
            "viz/stacked_bar" : true,
            "viz/stacked_column" : true,
            "viz/dual_bar" : true,
            "viz/dual_column" : true,
            "viz/3d_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_combination" : true,
            "viz/pie" : true,
            "viz/donut" : true,
            "viz/pie_with_depth" : true,
            "viz/geobubble" : true,
            "viz/choropleth" : true,
            "viz/geopie" : true,
            "viz/scatter" : true,
            "viz/bubble" : true,
            "viz/scatter_matrix" : true,
            "viz/treemap" : true,
            "viz/heatmap" : true,
            "viz/radar" : true,
            "viz/boxplot" : true,
            "viz/tagcloud" : false,
            "viz/tree" : true,
            "viz/network" : true,
            "viz/ext/pa/funnel" : true,
            "viz/ext/pa/pc" : true
        }
    };
    
    MenuItemConst.TITLE = {
        "name" : "title",
        "text" : "VIZ_CONTEXTMENU_SHOW_TITLE",
        "notSupportType" : {
            "viz/geomap" : true,
        }
    };
    
    MenuItemConst.SETAXISSCALE = {
        "name" : "setAxisScale",
        "text" : "VIZ_CONTEXTMENU_SET_AXIS_SCALE",
        "supportType" : {
            "viz/bar" : true,
            "viz/column" : true,
            "viz/stacked_bar" : true,
            "viz/stacked_column" : true,
            "viz/dual_bar" : true,
            "viz/dual_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_combination" : true,
            "viz/scatter" : true,
            "viz/bubble" : true,
            "viz/scatter_matrix" : true,
            "viz/boxplot" : true,
            "viz/waterfall" : true
        }
    };

    MenuItemConst.NEGATIVE = {
        "name" : "negative",
        "text" : "VIZ_CONTEXTMENU_SHOW_NEGATIVE_VALUES",
        "supportType" : {
            "viz/bubble" : true,
            "viz/geobubble" : true
        }
    };
    return MenuItemConst;
});

// @formatter:off
define('sap/viz/controls/contextmenu/ContextMenuConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var ContextMenuConfig = {};

    /**
     * Config built-in menus and customized menu <br/>
     * Built-in menu (key name is "menu"): array of sections, each section is an array of menu names <br/>
     * customized menu (key name is "customizedMenu"): array of menu configurations, <br/>
     * Each customized menu item configuration follows the following nested format:
     * <pre>
     *      {
     *          name: 'unique-name-of-menu-item',
     *          text: 'text to show in the menu item',
     *          isVisible: function(vizType){
     *              // determine whether to show this menu item
     *              return true;
     *          },
     *          submenu: [
     *              // arrary of submenu configurations
     *          ]
     *      }
     * </pre>
     * To add a separator line, just add an item like this:
     * <pre>
     *      {
     *          name: 'blank'
     *      }
     * </pre>
     * Note that adjacent separators will be merged into one.<br/>
     * And if a separator appears as the first (or last) item in a menu, it'll be omitted.<br/>
     *
     * Once a customized menu item is clicked, an event will be fired, so just listen on the following event:
     * <pre>
     *          vizFrame.addEventListener(itemMenuName + 'Clicked', function(){
     *              // click event handler here.
     *          });
     * </pre>
     */
    ContextMenuConfig.instance = function() {
        return {
            'menu' : [["direction", "stacking"], ["title", "legend", "mbclegend", "datalabels", "negative" ,"mnd", "setAxisScale"], ["comment", "charteditor"]]
            /*,customizedMenu: [
                {
                    name: 'menu1',
                    text: 'Menu One',
                    isVisible: function(vizType){
                        return true;
                    }
                },
                {
                    name: 'menu2',
                    text: 'Menu Two',
                    submenu: [
                        {
                            name: 'menu3',
                            text: 'Menu Three'
                        },
                        {
                            name: 'blank'
                        },
                        {
                            name: 'menu4',
                            text: 'Menu Four',
                            submenu: [
                                {
                                    name: 'menu5',
                                    text: 'Menu Five',
                                    submenu: [
                                        {
                                            name: 'menu10',
                                            text: 'Menu Ten'
                                        },
                                        {
                                            name: 'menu11',
                                            text: 'Menu Eleven'
                                        },
                                        {
                                            name: 'menu12',
                                            text: 'Menu Twelve',
                                            submenu: [
                                                {
                                                    name: 'menu13',
                                                    text: 'Menu Thirteen'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    name: 'blank'
                                },
                                {
                                    name: 'blank' // this separator will be omitted
                                },
                                {
                                    name: 'after blank',
                                    text: 'Menu After Blank'
                                },
                                {
                                    name: 'blank'   // this separator will be omitted
                                }
                            ]
                        }
                    ]
                },
                {
                    name: 'menu6',
                    text: 'Menu Six',
                    submenu: [
                        {
                            name: 'menu7',
                            text: 'Menu Seven'
                        },
                        {
                            name: 'menu8',
                            text: 'Menu Eight',
                            submenu: [
                                {
                                    name: 'menu9',
                                    text: 'Menu Nine'
                                }
                            ]
                        }
                    ]
                }
            ]*/
        };
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_CONTEXTMENU, ContextMenuConfig);
    return ContextMenuConfig;
});

define('sap/viz/controls/contextmenu/ContextMenuEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var ContextMenuEvent = function(type, target, data) {
        ContextMenuEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.contextmenu.ContextMenuEvent";
    };

    OOUtil.extend(ContextMenuEvent, Event);

    ContextMenuEvent.CONTEXT_MENU_CHANGED = "contextMenuChanged";
    ContextMenuEvent.POPUP_CONTEXT_MENU = "popupContextMenu";
    
    ContextMenuEvent.REQUEST_LEGEND_COLOR = "chooseLegendColors";    
    ContextMenuEvent.POPUP_CHART_EDITOR = 'popupChartEditor';

    return ContextMenuEvent;
});

define('sap/viz/controls/contextmenu/models/MenuItem',[],function() {
    /**
     * Menu Item class
     */
    var MenuItem = function(name, text, iconFunc, isVisibleFunc, clickHandler, tooltip) {
        this._name = name;
        this._text = text;
        this._isVisibleFunc = isVisibleFunc;
        this._iconFunc = iconFunc;
        this._clickHandler = clickHandler;
        this._scope = this;
        this._isCheckable = false;
        this._tooltip = tooltip;
    };
    /**
     * name property, ready only.
     */
    MenuItem.prototype.name = function(value) {
        return this._name;
    };
    /**
     * get/set scope property.
     */
    MenuItem.prototype.scope = function(value) {
        if(arguments.length > 0) {
            this._scope = value;

            return this;
        } else {
            return this._scope;
        }
    };
    /**
     * get text property. If textFunc is set, it will be used to get text.
     */
    MenuItem.prototype.text = function(value) {
        if(this._textFunc) {
            return this._textFunc();
        } else {
            return this._text;
        }
    };
    /**
     * set textFunc property
     */
    MenuItem.prototype.textFunc = function(value) {
        this._textFunc = value;
    };
    /**
     * get/set clickHandler property
     */
    MenuItem.prototype.clickHandler = function(value) {
        if(arguments.length > 0) {
            this._clickHandler = value;

            return this;
        } else {
            return this._clickHandler;
        }
    };
    /**
     * get icon property
     */
    MenuItem.prototype.icon = function(vizType) {
        if(!this._iconFunc) {
            return null;
        }
        return this._iconFunc.apply(this._scope, arguments);
    };
    
    MenuItem.prototype.supportPropertyZone = function(vizType, propertyZone) {
        if(propertyZone == null){
            return true;
        } else {
            return false;
        }
    };
    /**
     * get isVisible property.
     */
    MenuItem.prototype.isVisible = function(vizType) {
        if(!this._isVisibleFunc) {
            return true;
        }
        return this._isVisibleFunc.apply(this._scope, arguments);
    };
    /**
     * isCheckable property, ready only.
     */
    MenuItem.prototype.isCheckable = function(value) {
        return this._isCheckable;
    };

    /**
    * get/set tooltip property
    */
    MenuItem.prototype.tooltip = function(value) {
        if(arguments.length > 0) {
            this._tooltip = value;
            return this;
        } else {
            return this._tooltip;
        }
    }
    return MenuItem;
});

define('sap/viz/controls/contextmenu/models/DataLabelMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, MenuItemConst, MenuItem){
// @formatter:on
    var DataLabelMenuItem = function(chartModelProvider, chartProxyProvider) {
        DataLabelMenuItem.superclass.constructor.apply(this, [MenuItemConst.DATALABELS.name, MenuItemConst.getText(MenuItemConst.DATALABELS.text), this._iconFunc, null, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.DataLabelMenuItem";
        this._chartModelProvider = chartModelProvider;
        this._chartProxyProvider = chartProxyProvider;
        this._isCheckable = true;
    };

    OOUtil.extend(DataLabelMenuItem, MenuItem);

    DataLabelMenuItem.prototype.isChecked = function(vizType) {
        if(MenuItemConst.DATALABELS.supportType[vizType]) {
            var properties = this._chartProxyProvider().getProperties();;
            properties = properties || {};
            properties.dataLabel = properties.dataLabel || {
                visible : false
            };
            var checkVisible = properties.dataLabel.visible;
            return checkVisible;
        }
        return null;
    };

    DataLabelMenuItem.prototype._clickHandler = function() {
        var curProperties = this._chartProxyProvider().getProperties();;
        var visible = !curProperties.dataLabel.visible;
        
        var newProperties = {};
        newProperties.dataLabel = {};
        newProperties.dataLabel.visible = visible;

        this._chartProxyProvider().setProperties(newProperties);
    };
    return DataLabelMenuItem;
});

define('sap/viz/controls/contextmenu/models/DirectionMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/common/utils/ChartTypeUtil',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, ChartTypeUtil, MenuItemConst, MenuItem){
// @formatter:on
    var DirectionMenuItem = function(chartModelProvider) {
        DirectionMenuItem.superclass.constructor.apply(this, [MenuItemConst.DIRECTION.name, '', this._iconFunc, null, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.DirectionMenuItem";
        this._chartModelProvider = chartModelProvider;
    };

    OOUtil.extend(DirectionMenuItem, MenuItem);

    DirectionMenuItem.prototype._textFunc = function() {
        var direction = ChartTypeUtil.getDirection(this._getType());
        return MenuItemConst.getText(MenuItemConst.DIRECTION.text[direction]);
    };

    // DirectionMenuItem.prototype._iconFunc = function(vizType) {
        // if (MenuItemConst.DIRECTION.supportType[vizType]) {
            // var type = this._getType();
            // var direction = ChartTypeUtil.getDirection(type);
            // var stacking = ChartTypeUtil.getStacking(type);
            // var icon = MenuItemConst.DIRECTION.icon[vizType][direction];
            // if (icon[stacking]) {
                // icon = icon[stacking];
            // }
            // return icon;
        // }
        // return null;
    // };

    DirectionMenuItem.prototype._clickHandler = function() {
        var direction = this.getDirection();
        if (direction == ChartConst.DIRECTION_VERTICAL) {
            direction = ChartConst.DIRECTION_HORIZONTAL;
        } else {
            direction = ChartConst.DIRECTION_VERTICAL;
        }
        
        //change chart type according to the current chartType and direction
        var curChartType = this._getType(); 
        var newChartType = ChartTypeUtil.changeDirection(curChartType, direction);
        this._chartModelProvider().type(newChartType);
    };

    DirectionMenuItem.prototype._getType = function() {
        return this._chartModelProvider().type();
    };

    DirectionMenuItem.prototype.getDirection = function() {
        return ChartTypeUtil.getDirection(this._getType());
    };

    return DirectionMenuItem;
});

define('sap/viz/controls/contextmenu/models/LegendMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, MenuItemConst, MenuItem){
// @formatter:on
    var LegendMenuItem = function(chartModelProvider, chartProxyProvider) {
        LegendMenuItem.superclass.constructor.apply(this, [MenuItemConst.LEGEND.name, MenuItemConst.getText(MenuItemConst.LEGEND.text), this._iconFunc, null, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.LegendMenuItem";
        this._chartModelProvider = chartModelProvider;
        this._chartProxyProvider = chartProxyProvider;
        this._isCheckable = true;
    };

    OOUtil.extend(LegendMenuItem, MenuItem);

    LegendMenuItem.prototype.supportPropertyZone = function(vizType, propertyZone) {
        if(propertyZone === "legend" || propertyZone === "sizeLegend"){
            return true;
        }
        return LegendMenuItem.superclass.supportPropertyZone.apply(this, arguments);
    };

    LegendMenuItem.prototype.isChecked = function(vizType) {
        if (MenuItemConst.LEGEND.supportType[vizType]) {
            var properties = this._chartProxyProvider().getProperties();
            properties = properties || {};
            properties.legend = properties.legend || {
                visible : true
            };
            var checkVisible = properties.legend.visible;
            if (vizType.search('geo') > -1) {
                var sizeLegend = properties.sizeLegend;
                checkVisible = checkVisible && (sizeLegend ? sizeLegend.visible : true);
            }
            return checkVisible;
        }
        return null;
    };

    LegendMenuItem.prototype._clickHandler = function() {
        var curProperties = this._chartProxyProvider().getProperties();
        //get current visible flag according to current properties
        var visible = false;
        if (curProperties && curProperties.legend) {
            visible = !curProperties.legend.visible;
        } else if (curProperties && curProperties.sizeLegend) {
            visible = !curProperties.sizeLegend.visible;
        } else if (curProperties && curProperties.geomap) {
            // Handle Geo map case, always use the first layer's visiblity setting.
            var layers = curProperties.geomap.layers;
            visible = !layers[0].options.legendVisible;
        }

        //set visible flag back
        var newProperties = {};
        newProperties.legend = {};
        newProperties.legend.visible = visible;
        if (this._chartModelProvider().type().search('geo') > -1 || this._chartModelProvider().type().search('bubble') > -1) {
            newProperties.sizeLegend = {};
            newProperties.sizeLegend.visible = visible;
        }
        this._chartProxyProvider().setProperties(newProperties);
    };
    return LegendMenuItem;
});

define('sap/viz/controls/contextmenu/models/StackingMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/common/utils/ChartTypeUtil',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, ChartTypeUtil, MenuItemConst, MenuItem){
// @formatter:on
    var StackingMenuItem = function(chartModelProvider) {
        StackingMenuItem.superclass.constructor.apply(this, [MenuItemConst.STACKING.name, '', this._iconFunc, null, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.StackingMenuItem";
        this._chartModelProvider = chartModelProvider;
    };

    OOUtil.extend(StackingMenuItem, MenuItem);

    StackingMenuItem.prototype._textFunc = function() {
        var stacking = ChartTypeUtil.getStacking(this._getType());
        return MenuItemConst.getText(MenuItemConst.STACKING.text[stacking]);
    };

    // StackingMenuItem.prototype._iconFunc = function(vizType) {
        // var type = this._getType();
        // var direction = ChartTypeUtil.getDirection(type);
        // var stacking = ChartTypeUtil.getStacking(type);
        // if (MenuItemConst.STACKING.supportType[vizType]) {
            // var icon = MenuItemConst.STACKING.icon[vizType][stacking];
            // if (icon[direction]) {
                // icon = icon[direction];
            // }
            // return icon;
        // }
        // return null;
    // };

    StackingMenuItem.prototype._clickHandler = function() {
        var stacking = this.getStacking();
        if (stacking == ChartConst.STACKING_NORMAL) {
            stacking = ChartConst.STACKING_FULL;
        } else {
            stacking = ChartConst.STACKING_NORMAL;
        }
        
        //change chart type according to the current chartType and stacking
        var curChartType = this._getType(); 
        var newChartType = ChartTypeUtil.changeStacking(curChartType, stacking);
        this._chartModelProvider().type(newChartType);
    };

    StackingMenuItem.prototype._getType = function() {
        return this._chartModelProvider().type();
    };

    StackingMenuItem.prototype.getStacking = function() {
        return ChartTypeUtil.getStacking(this._getType());
    };

    return StackingMenuItem;
});

define('sap/viz/controls/contextmenu/models/MBCLegendMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, MenuItemConst, MenuItem){
// @formatter:on
    var MBCLegendMenuItem = function(chartModelProvider, chartProxyProvider) {
        MBCLegendMenuItem.superclass.constructor.apply(this, [MenuItemConst.MBCLEGEND.name, MenuItemConst.getText(MenuItemConst.MBCLEGEND.text), this._iconFunc, this._isVisibleFunc, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.MBCLegendMenuItem";
        this._chartModelProvider = chartModelProvider;
        this._chartProxyProvider = chartProxyProvider;
    };

    OOUtil.extend(MBCLegendMenuItem, MenuItem);

    MBCLegendMenuItem.prototype.supportPropertyZone = function(vizType, propertyZone) {
        if(propertyZone === "legend" || propertyZone === "sizeLegend"){
            return true;
        }
        return MBCLegendMenuItem.superclass.supportPropertyZone.apply(this, arguments);
    };

    MBCLegendMenuItem.prototype._isVisibleFunc = function(vizType) {
        // ghost chart don't show mbc legend
        if(this._chartProxyProvider().isFakeChart()){
            return false;
        }
        // only chart have color measure will show mbc legend
        var feedItems = this._chartModelProvider().feedingItems();
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem/*FeedItem*/ = feedItems[i];
            // for tag cloud chart
            if(vizType === ChartConst.TYPE_TAG_CLOUD && feedItem.id() === "tagFamily" && feedItem.values().length === 0) {
                    return false;
            }
            //for tree map chart
            if(vizType === ChartConst.TYPE_TREEMAP && feedItem.id() === "rectangleColor" && feedItem.values().length === 0) {
                    return false;
            }
        }

        return true;
    }

    return MBCLegendMenuItem;
});

define('sap/viz/controls/contextmenu/models/MNDMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/common/utils/ChartTypeUtil',
'sap/viz/controls/common/feeds/FeedItemType',
'sap/viz/controls/common/feeds/FeedUtils',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, ChartTypeUtil, FeedItemType, FeedUtils, MenuItemConst, MenuItem){
// @formatter:on
    var MNDMenuItem = function(chartModelProvider) {
        MNDMenuItem.superclass.constructor.apply(this, [MenuItemConst.MND.name, MenuItemConst.getText(MenuItemConst.MND.text), this._iconFunc, this._isVisibleFunc, this._clickHandler, MenuItemConst.getText(MenuItemConst.MND.tooltip)]);
        this.__className = "sap.viz.controls.contextmenu.models.MNDMenuItem";
        this._chartModelProvider = chartModelProvider;
        this._isCheckable = true;
    };

    OOUtil.extend(MNDMenuItem, MenuItem);

    MNDMenuItem.prototype.isChecked = function() {
        return this._chartModelProvider().isMNDVisible();
    };

    MNDMenuItem.prototype._isVisibleFunc = function(vizType) {
        var supportMND = false;
        var feeds;
        var k = -1;
        var viz = sap.viz.api.manifest.Viz.get(vizType)[0];
        if (viz) {
            feeds = viz.allFeeds();
            for(k = 0; k < feeds.length; k++) {
                if (FeedUtils.canAcceptMND(feeds[k].acceptMND)) {
                    supportMND = true;
                    break;
                }
            }
        }
        if (!supportMND && !ChartTypeUtil.isMultipleChart(vizType) && ChartTypeUtil.supportMultiChart(vizType)) {
            var multiType = ChartTypeUtil.toMultiChartType(vizType);
            viz = sap.viz.api.manifest.Viz.get(multiType)[0];
            feeds = viz.allFeeds();
            for(k = 0; k < feeds.length; k++) {
                if (FeedUtils.canAcceptMND(feeds[k].acceptMND)) {
                    supportMND = true;
                    break;
                }
            }
        }

        if (!supportMND)
            return false;

        var feedItems = this._chartModelProvider().feedingItems();
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem/*FeedItem*/ = feedItems[i];
            if (feedItem.type() === FeedItemType.MEASURE && feedItem.values().length > 0) {
                return true;
            }
        }
        return false;
    };

    MNDMenuItem.prototype._clickHandler = function() {
        var visible = this._chartModelProvider().isMNDVisible();
        this._chartModelProvider().isMNDVisible(!visible);
    };
    return MNDMenuItem;
});

define('sap/viz/controls/contextmenu/models/SetAxisScaleMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/utils/VizUtils',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, VizUtils, ChartConst, MenuItemConst, MenuItem){
// @formatter:on
    var SetAxisScaleMenuItem = function(chartModelProvider, chartProxyProvider) {
        SetAxisScaleMenuItem.superclass.constructor.apply(this, [MenuItemConst.SETAXISSCALE.name, MenuItemConst.getText(MenuItemConst.SETAXISSCALE.text), this._iconFunc, this._isVisibleFunc, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.SetAxisScaleMenuItem";
        this._chartModelProvider = chartModelProvider;
        this._chartProxyProvider = chartProxyProvider;
        this._isCheckable = false;
    };

    OOUtil.extend(SetAxisScaleMenuItem, MenuItem);

    SetAxisScaleMenuItem.prototype.isChecked = function() {
        return false;
    };
    
    SetAxisScaleMenuItem.prototype.supportPropertyZone = function(vizType, propertyZone) {
        var model = this._chartModelProvider();
        if(VizUtils.isValueAxis(model.type(), propertyZone)){
            return true;
        }
        return SetAxisScaleMenuItem.superclass.supportPropertyZone.apply(this, arguments);
    };
    
    SetAxisScaleMenuItem.prototype._isVisibleFunc = function() {
        var model = this._chartModelProvider();
        var valueAxis = VizUtils.getValueAxis(model.type());
        if(valueAxis && valueAxis.length>0){
            return true;
        } else {
            return false;
        }
    };

    SetAxisScaleMenuItem.prototype._clickHandler = function(vizType, propertyZone) {
        this._chartProxyProvider().setAxisScale(propertyZone);
    };
    return SetAxisScaleMenuItem;
});

define('sap/viz/controls/contextmenu/models/ChartEditorMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, MenuItemConst, MenuItem){
// @formatter:on
    /**
     * ChartEditorMenuItem class.
     */
    var ChartEditorMenuItem = function(chartProxyProvider) {
        ChartEditorMenuItem.superclass.constructor.apply(this, [MenuItemConst.CHARTEDITOR.name, MenuItemConst.getText(MenuItemConst.CHARTEDITOR.text), this._iconFunc, null, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.ChartEditorMenuItem";
        this._chartProxyProvider = chartProxyProvider;
    };

    OOUtil.extend(ChartEditorMenuItem, MenuItem);

    // ChartEditorMenuItem.prototype._iconFunc = function(vizType) {
        // return MenuItemConst.DEFAULT.icon;
    // };
    return ChartEditorMenuItem;
});

define('sap/viz/controls/contextmenu/models/ShowHideTitleMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/common/utils/ChartTypeUtil',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, ChartTypeUtil, MenuItemConst, MenuItem){
// @formatter:on
    var ShowHideTitleMenuItem = function(chartModelProvider, chartProxyProvider) {
        ShowHideTitleMenuItem.superclass.constructor.apply(this, [MenuItemConst.TITLE.name, MenuItemConst.getText(MenuItemConst.TITLE.text), this._iconFunc, null, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.ShowHideTitleMenuItem";
        this._chartModelProvider = chartModelProvider;
        this._chartProxyProvider = chartProxyProvider;
        this._isCheckable = true;
    };

    OOUtil.extend(ShowHideTitleMenuItem, MenuItem);
    ShowHideTitleMenuItem.prototype.isChecked = function(vizType) {
        if (!MenuItemConst.TITLE.notSupportType[vizType]) {
            var properties = this._chartProxyProvider().getProperties();
            properties = properties || {};
            properties.title = properties.title || {
                visible : true
            };
            var checkVisible = properties.title.visible;
            return checkVisible;
        }
        return null;
    };

    ShowHideTitleMenuItem.prototype._clickHandler = function() {
        var curProperties = this._chartProxyProvider().getProperties();
        //get current visible flag according to current properties
        var visible = false;
        if (curProperties.title) {
            visible = !curProperties.title.visible;
        }
        
        //set visible flag back
        var newProperties = {};
        newProperties.title = {};
        newProperties.title.visible = visible;
        this._chartProxyProvider().setProperties(newProperties);
    };
    return ShowHideTitleMenuItem;
});

define('sap/viz/controls/contextmenu/models/ShowHideNegativeMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/common/utils/ChartTypeUtil',
'sap/viz/controls/common/utils/DatasetUtil',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, ChartTypeUtil, DatasetUtil, MenuItemConst, MenuItem){
// @formatter:on
    var ShowHideNegativeMenuItem = function(chartModelProvider, chartProxyProvider) {
        ShowHideNegativeMenuItem.superclass.constructor.apply(this, [MenuItemConst.NEGATIVE.name, MenuItemConst.getText(MenuItemConst.NEGATIVE.text), this._iconFunc, this._isVisibleFunc, this._clickHandler]);
        this.__className = "sap.viz.controls.contextmenu.models.ShowHideNegativeMenuItem";
        this._chartModelProvider = chartModelProvider;
        this._chartProxyProvider = chartProxyProvider;
        this._isCheckable = true;
    };

    OOUtil.extend(ShowHideNegativeMenuItem, MenuItem);
    ShowHideNegativeMenuItem.prototype.isChecked = function(vizType) {
        if(MenuItemConst.NEGATIVE.supportType[vizType]) {
            var properties = this._chartProxyProvider().getProperties();;
            properties = properties || {};
            properties.plotArea = properties.plotArea || {
                showNagativeValues : false
            };
            var checkVisible = properties.plotArea.showNegativeValues;
            return checkVisible;
        }
        return null;
    };

    ShowHideNegativeMenuItem.prototype._isVisibleFunc = function(vizType) {
        var data = this._chartProxyProvider().getDataset();
        if (DatasetUtil.hasNegativeMeasureValue(data, this._chartModelProvider().type())) {
            return true;
        }
        return false;
    };

    ShowHideNegativeMenuItem.prototype._clickHandler = function() {
        var curProperties = this._chartProxyProvider().getProperties();
        curProperties = curProperties || {};
        curProperties.plotArea = curProperties.plotArea || {};
        var showNegativeValues = !curProperties.plotArea.showNegativeValues;

        var newProperties = {};
        newProperties.plotArea = {};
        newProperties.plotArea.showNegativeValues = showNegativeValues;

        this._chartProxyProvider().setProperties(newProperties);
    };
    return ShowHideNegativeMenuItem;
});

define('sap/viz/controls/contextmenu/views/MenuItem',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst'
], function($, CSSConst) {

    var cssPrefix = CSSConst.CONTEXTMENU_PREFIX;
    var cssMenuItem = cssPrefix + "MnuItm";
    var cssMenuItemIcon = cssPrefix + "MnuItmIco";
    var cssMenuItemText = cssPrefix + "MnuItmTxt";
    var cssMenuItemShow = cssPrefix + "MnuItm-Show";
    var cssMenuItemHide = cssPrefix + "MnuItm-Hide";
    var cssMenuItemIconShow = cssPrefix + "MnuItmIco-Show";
    var cssMenuItemIconHide = cssPrefix + "MnuItmIco-Hide";
    var cssMenuItemOpen = cssPrefix + "MnuItmOpen";
    var cssMenuItemSubmenu = CSSConst.COMMON_PREFIX + 'menu-list-suffix-icon-submenu';
    var cssMenuItemArrow = CSSConst.COMMON_PREFIX + 'havanaSharedSprite16';

    /**
     * Menu item UI
     * @constructor
     * @param {Object} config - Menu item configuration
     * <pre>
     *      MenuItemConfig = {
     *          name: "unique menu name",
     *          text: "displayed menu content"
     *          icon: "icon image path",
     *          tooltip: "tooltip text",
     *          click: function(){},
     *          submenu: Array<MenuItemConfig>
     *      }
     * </pre>
     * @param {sap.viz.controls.contextmenu.views.Menu} parentMenu - The menu this item belongs to
     */
    function MenuItem(config, menu) {
        this.__className = "sap.viz.controls.contextmenu.views.MenuItem";
        config = config || {};
        var dom = this.dom = document.createElement('li');
        dom.className = cssMenuItem;
        dom.innerHTML = '<div id="' + config.name + '" class="' + cssMenuItem +
            '"><div class="' + cssMenuItemIcon +
            '"></div><div class="' + cssMenuItemText + '">' +
            (config.text === undefined ? '' : config.text) +
            '</div><div class="' + cssMenuItemSubmenu + ' ' + cssMenuItemArrow + '"></div></div>';
        this._menuItemNode = dom.firstChild;
        this._iconNode = this._menuItemNode.firstChild;
        this._textNode = this._iconNode.nextSibling;
        this._arrowNode = this._menuItemNode.lastChild;
        this._arrowNode.style.visibility = 'hidden';

        this.name = config.name;
        this.menu = menu;

        if (config.icon) {
            this.setIcon(config.icon);
        }

        if (config.tooltip) {
            this.setTooltip(config.tooltip);
        }

        if ($.isArray(config.submenu) && config.submenu.length) {
            var Menu = require('sap/viz/controls/contextmenu/views/Menu');
            this.setSubmenu(new Menu(config.submenu, menu));
        }

        /**
         * Customiable execution logic when user clicks the menu item
         * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.onExecute
         */
        this.onExecute = config.click;

        this._setupEvents();
    }

    /**
     * Setup event handlers
     * @private
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype._setupEvents
     */
    MenuItem.prototype._setupEvents = function() {
        var self = this;
        var dom$ = $(this.dom);
        function onMouseOver() {
            self.showSubmenu();
        }
        function onClick() {
            if (!self._submenu) {
                self._onExecute();
            }
        }
        dom$.on('mouseenter', onMouseOver).
            on('click', onClick);

        self._cleanupEvents = function() {
            dom$.off('mouseenter', onMouseOver).
                off('click', onClick);
        };
    };

    /**
     * Completely destroy this widget
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.destroy
     */
    MenuItem.prototype.destroy = function() {
        if (this._submenu) {
            this._submenu.destroy();
        }
        this._cleanupEvents();
        $(this.dom).remove();
    };

    /**
     * Get the text shown on this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.text
     * @returns {string}
     */
    MenuItem.prototype.text = function() {
        return this._textNode.innerHTML;
    };

    /**
     * Set the text to show on this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.setText
     * @param {string} text
     */
    MenuItem.prototype.setText = function(text) {
        this._textNode.innerHTML = text;
    };

    /**
     * Set the icon of this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.setIcon
     * @param {string} iconImgPath
     */
    MenuItem.prototype.setIcon = function(iconImgPath) {
        this._iconNode.innerHTML = '<img src="' + iconImgPath + '" />';
    };

    /**
     * Set the tooltip of this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.setTooltip
     * @param {string} tooltip
     */
    MenuItem.prototype.setTooltip = function(tooltip) {
        // FIXME: tooltip does not hide when menu is closed.
        _bindTooltip(this.dom, tooltip, this.menu.container());
    };

    /**
     * Get the submenu of this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.submenu
     * @returns {sap.viz.controls.contextmenu.views.Menu}
     */
    MenuItem.prototype.submenu = function() {
        return this._submenu;
    };

    /**
     * Set or remove the submenu of this menu item.
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.setSubmenu
     * @param {sap.viz.controls.contextmenu.views.Menu} menu
     */
    MenuItem.prototype.setSubmenu = function(menu) {
        this._submenu = menu;
        this._arrowNode.style.visibility = menu ? '' : 'hidden';
    };

    /**
     * Show submenu
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.showSubmenu
     */
    MenuItem.prototype.showSubmenu = function() {
        this.menu.hideSubmenus();
        if (this._submenu) {
            $(this.dom).addClass(cssMenuItemOpen);
            this._submenu.show({
                dock: this.dom
            }, this.menu._hDir + '-down'); // Inherite parent menu's horizontal direction only
        }
    };

    /**
     * Hide submenu
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.hideSubmenu
     */
    MenuItem.prototype.hideSubmenu = function() {
        if (this._submenu) {
            $(this.dom).removeClass(cssMenuItemOpen);
            this._submenu.hideSubmenus();
            this._submenu.hide();
        }
    };

    /**
     * Call custom execution logic and hide the menu when user clicks this menu item
     * @private
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype._onExecute
     */
    MenuItem.prototype._onExecute = function() {
        if (this.onExecute) {
            this.onExecute();
        }
        this.menu.hideAll();
    };

    // Tooltip Related (moved here from ContextMenu.js)------------------------------------------------------------

    // Tooltip offset relative to mouse event point
    var TOOLTIP_OFFSET = {
        top: 15,
        left: 20
    };

    var cssMenuItemTooltip = CSSConst.CONTEXTMENU_PREFIX  + "MnuItmTooltip";

    /**
    * Bind tooltip to a specified element.
    */
    function _bindTooltip(element, text, container) {
        var setTimeoutConst;
        var element$ = $(element);
        var container$ = $(container);
        element$.on('mouseover', function(event) {
            var tooltip$ = $(document.createElement('div')).addClass(cssMenuItemTooltip).appendTo($("body"));
            tooltip$.text(text);

            _fixedPosition(container$,tooltip$, _toRelativePosition(container$, _getCenterPosition(element$)),
                TOOLTIP_OFFSET);

            setTimeoutConst = setTimeout(function() {
                // fade in effect
                $("." + cssMenuItemTooltip).animate({
                    opacity: 1
                }, 500); // the effect lasts 500ms
            }, 1000); // the tooltip shows afet 1 second
        });
        element$.on("mouseout mousedown", function() {
            $("." + cssMenuItemTooltip).remove();
            clearTimeout(setTimeoutConst);
        });
    }

    /**
    * Get the center position of the element
    */
    function _getCenterPosition(element$) {
        var pos = element$.offset(),
            width = element$.innerWidth(),
            height = element$.innerHeight();
        return {
            pageX : pos.left + width/2,
            pageY : pos.top + height/2
        };
    }

    /**
    * Converts the position relative to the container
    */
    function _toRelativePosition(container$, position) {
        return {
            pageX: position.pageX - container$.offset().left,
            pageY: position.pageY - container$.offset().top
        };
    }

    /**
    * Put a new element to a position relative to the container, plus an additional offset (optional).
    * The position will be converted to fixed position.
    * The container's right and bottom border are tested, the offset direction may be reverted to prevent overflow.
    */
    function _fixedPosition(container$, newElement$, position, offset) {
        if(!offset) {
            offset = {
                top : 0,
                left : 0
            };
        }
        if (position) {
            var containerWidth = container$.innerWidth();
            var newElementWidth = newElement$.outerWidth();
            var left = position.pageX + offset.left;
            if (containerWidth < newElementWidth + left) {
                left = position.pageX - newElementWidth - offset.left;
            }
            var top = position.pageY + offset.top;
            var containerHeight = container$.innerHeight();
            var newElementHeight = newElement$.outerHeight();
            if (containerHeight < newElementHeight + top) {
                top = position.pageY - newElementHeight - offset.top;
            }
            newElement$.css({
                position : "fixed",
                left : container$.offset().left + left + "px",
                top : container$.offset().top + top + "px"
            });
        }
    }


    return MenuItem;
});


define('sap/viz/controls/contextmenu/views/CheckedMenuItem',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/contextmenu/views/MenuItem'
], function($, OOUtil, CSSConst, MenuItem) {

    var cssCheckedMenuItemShow = CSSConst.CONTEXTMENU_PREFIX  + "MnuItm-Show";
    var cssCheckedMenuItemHide = CSSConst.CONTEXTMENU_PREFIX  + "MnuItm-Hide";
    var cssCheckedMenuItemIconShow = CSSConst.CONTEXTMENU_PREFIX  + "MnuItmIco-Show";
    var cssCheckedMenuItemIconHide = CSSConst.CONTEXTMENU_PREFIX  + "MnuItmIco-Hide";

    /**
     * Blank Menu Item UI
     * @constructor
     * @extends sap.viz.controls.contextmenu.views.MenuItem
     */
    function CheckedMenuItem(config) {
        CheckedMenuItem.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.contextmenu.views.CheckedMenuItem";
        this._iconNode.style.display = 'none';
        this.setChecked(config.checked);
    }

    OOUtil.extend(CheckedMenuItem, MenuItem);

    /**
     * Set the checked status of this menu item
     * @method sap.viz.controls.contextmenu.views.CheckedMenuItem.prototype.setChecked
     * @param {Boolean} checked
     */
    CheckedMenuItem.prototype.setChecked = function(checked) {
        $(this.dom).toggleClass(cssCheckedMenuItemIconShow, !!checked).
            toggleClass(cssCheckedMenuItemIconHide, !checked);

        $(this._menuItemNode).toggleClass(cssCheckedMenuItemShow, !!checked).
            toggleClass(cssCheckedMenuItemHide, !checked);
    };

    /**
     * Get the checked status of this menu item
     * @method sap.viz.controls.contextmenu.views.CheckedMenuItem.prototype.checked
     * @returns {Boolean}
     */
    CheckedMenuItem.prototype.checked = function() {
        return $(this.dom).hasClass(cssCheckedMenuItemIconShow);
    };

    CheckedMenuItem.prototype._onExecute = function() {
        this.setChecked(!this.checked());
        CheckedMenuItem.superclass._onExecute.apply(this, arguments);
    };

    return CheckedMenuItem;

});




define('sap/viz/controls/contextmenu/views/BlankMenuItem',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/contextmenu/views/MenuItem'
], function($, OOUtil, CSSConst, LangManager, MenuItem) {

    var cssBlankMenuItem = CSSConst.CONTEXTMENU_PREFIX  + "blank-MnuItem";
    var cssBlankMenuItemText = CSSConst.CONTEXTMENU_PREFIX  + 'blank-MnuItmTxt';

    /**
     * Blank Menu Item UI
     * @constructor
     * @extends sap.viz.controls.contextmenu.views.MenuItem
     */
    function BlankMenuItem() {
        BlankMenuItem.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.contextmenu.views.BlankMenuItem";

        $(this.dom).addClass(cssBlankMenuItem);
        $(this._textNode).addClass(cssBlankMenuItemText).
            text(LangManager.get('VIZ_CONTEXTMENU_NO_MENU_ITEMS'));
    }

    OOUtil.extend(BlankMenuItem, MenuItem);

    return BlankMenuItem;

});




define('sap/viz/controls/contextmenu/views/MenuSeparator',[
    'sap/viz/controls/common/constants/CSSConst'
], function(CSSConst) {

    /**
     * Draw a horizontal line to separate menu items
     * @constructor
     */
    function MenuSeparator() {
        this.__className = "sap.viz.controls.contextmenu.views.MenuSeparator";
        var dom = this.dom = document.createElement('div');
        dom.className = CSSConst.CONTEXTMENU_PREFIX + "MnuItem-separator";
    }

    return MenuSeparator;

});



define('sap/viz/controls/contextmenu/views/Menu',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/contextmenu/views/MenuItem',
    'sap/viz/controls/contextmenu/views/CheckedMenuItem',
    'sap/viz/controls/contextmenu/views/BlankMenuItem',
    'sap/viz/controls/contextmenu/views/MenuSeparator'
], function($, CSSConst, MenuItem, CheckedMenuItem, BlankMenuItem, MenuSeparator) {

    var cssMenu = CSSConst.PREFIX + 'contextmenu';
    var cssMenuList = CSSConst.CONTEXTMENU_PREFIX + 'list';
    var cssMenuListHovered = CSSConst.CONTEXTMENU_PREFIX + 'list-hovered';

    var doc = document;
    var win = window;

    /**
     * Menu UI, configurable and dynamically extensible, support multi-level menus
     * @constructor
     * @param {Object[]} [itemsConfig] - An array of menu item configurations
     * @param {sap.viz.controls.contextmenu.views.Menu} [parentMenu] - If given, this is a submenu, 
     * if not, this is a root menu
     * @param {DOMElment} [container] - The UI boundary that this menu should not exceed
     */
    function Menu(itemsConfig, parentMenu, container) {
        this.__className = "sap.viz.controls.contextmenu.views.Menu";

        var dom = this.dom = doc.createElement('div');
        dom.className = cssMenu;
        dom.innerHTML = '<ul class="' + cssMenuList + '"></ul>';

        this._listNode = dom.firstChild;
        this._items = [];
        this._parentMenu = parentMenu;
        this.setContainer(container);
        this._opennedSubmenuCount = 0;
        this._shown = 0;

        this._setupEvents();
        this.create(itemsConfig);
    }

    /**
     * The vertical margin offset of the menu (in px). Used to better align the submenu with the menu item.
     * @type {Number}
     */
    Menu.prototype.marginOffset = 6;

    /**
     * Setup event handlers
     * @private
     * @method sap.viz.controls.contextmenu.views.Menu.prototype._setupEvents
     */
    Menu.prototype._setupEvents = function() {
        var self = this;
        function nodeIsInMenuTree(menu, node){
            var result = false;
            for(var m = menu; m && !result; m = m._parentMenu){
                result = $.contains(m.dom, node);
            }
            return result;
        }
        function onDocMouseDown(evt) {
            if (self._shown && self._opennedSubmenuCount === 0 && !nodeIsInMenuTree(self, evt.target)) {
                self.hideAll();
            }
        }
        function onWindowBlur() {
            self.hide();
        }
        $(doc).on('mousedown', onDocMouseDown);
        $(win).on('blur', onWindowBlur);

        this._cleanupEvents = function() {
            $(doc).off('mousedown', onDocMouseDown);
            $(win).off('blur', onWindowBlur);
        };
    };

    /**
     * Create menu item according to different menu item types.
     * @private
     * @method sap.viz.controls.contextmenu.views.Menu.prototype._createMenuItem
     * @param {Object} config - menu item configuration
     */
    Menu.prototype._createMenuItem = function(config) {
        config = config || {};

        var menuItemType = {
            checked: CheckedMenuItem,
            blank: BlankMenuItem,
            separator: MenuSeparator
        }[config.menuItemType] || MenuItem;

        return new menuItemType(config, this);
    };

    /**
     * Re-create menu items according to given configurations.
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.create
     * @param {Object[]} [itemsConfig] - An array of menu item configurations
     */
    Menu.prototype.create = function(items) {
        items = $.isArray(items) ? items : [];
        this._destroyChildren();
        $(this._listNode).toggleClass(cssMenuListHovered, !!items.length);

        if (!items.length) {
            items.push({
                menuItemType: 'blank'
            });
        }

        for (var i = 0; i < items.length; ++i) {
            var item = this._createMenuItem(items[i]);
            if (item) {
                this.addChild(item);
            }
        }
    };

    /**
     * Destroy child menu items
     * @private
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.create
     */
    Menu.prototype._destroyChildren = function() {
        for (var i = 0; i < this._items.length; ++i) {
            var item = this._items[i];
            if (item.destroy) {
                item.destroy();
            }
        }
        this._listNode.innerHTML = '';
        this._items = [];
    };

    /**
     * Completely destroy this widget
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.destroy
     */
    Menu.prototype.destroy = function() {
        this._destroyChildren();
        this._cleanupEvents();
        $(this.dom).remove();
    };

    /**
     * Set a container DOM node to constrain this menu UI
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.setContainer
     * @param {DOMElement} container
     */
    Menu.prototype.setContainer = function(container) {
        this._container = container || (this._parentMenu && this._parentMenu.container()) || doc.body;
    };

    /**
     * Get the container DOM node
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.setContainer
     * @returns {DOMElement}
     */
    Menu.prototype.container = function() {
        return this._container;
    };

    /**
     * Check whether the menu is shown
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.isShown
     * @returns {Boolean}
     */
    Menu.prototype.isShown = function() {
        return !!this._shown;
    };

    /**
     * Limit the popup position within the constraining container
     * @private
     * @method sap.viz.controls.contextmenu.views.Menu.prototype._calcPopupPosition
     * @param {Object} position - An object with 3 posible properties: left, top and dock
     * @param {string} [preferredDirection='right-down'] - the preferred popup direction for this menu
     * @returns {Object}
     */
    Menu.prototype._calcPopupPosition = function(position, preferredDirection) {
        var dom = this.dom;
        var container = this._container;
        var left = 0;
        var top = 0;
        var dock;
        if (position) {
            left = position.left || 0;
            top = position.top || 0;
            dock = position.dock;
        }

        preferredDirection = String(preferredDirection).toLowerCase().split('-');
        var horizontalPreferredDir = preferredDirection[0];
        var verticalPreferredDir = preferredDirection[1];

        // default direction is right-down
        this._hDir = 'right';
        this._vDir = 'down';

        if (container) {
            // try to constrain the menu within the container
            var containerHeight = container.clientHeight;
            var containerWidth = container.clientWidth;
            var menuWidth = dom.offsetWidth;
            var menuHeight = dom.offsetHeight;
            var containerPos = $(container).offset();
            var containerLeft = containerPos.left;
            var containerTop = containerPos.top;

            if (dock) {
                // this is a submenu
                var dockPos = $(dock).offset();
                var dockLeft = dockPos.left;
                var dockTop = dockPos.top;
                var dockWidth = dock.offsetWidth;
                var dockHeight = dock.offsetHeight;
                var marginOffset = this.marginOffset;

                if ((horizontalPreferredDir === 'left' &&
                        containerLeft <= dockLeft - menuWidth) ||
                    (horizontalPreferredDir !== 'left' &&
                        containerLeft + containerWidth < dockLeft + dockWidth + menuWidth)) {
                    // need to popup to left
                    left = dockLeft - menuWidth;
                    this._hDir = 'left';
                } else {
                    // need to popup to right
                    left = dockLeft + dockWidth;
                }

                if ((verticalPreferredDir === 'up' &&
                    containerTop <= dockTop + dockHeight - menuHeight) ||
                    (verticalPreferredDir !== 'up' &&
                    containerTop + containerHeight < dockTop + menuHeight)) {
                    // need to popup upward
                    top = dockTop + dockHeight - menuHeight + marginOffset;
                    this._vDir = 'up';
                } else {
                    // need to popup downward
                    top = dockTop - marginOffset;
                }
            } else {
                // this is a root menu
                // NOTE: the given position is relative to the container
                if ((horizontalPreferredDir === 'left' && left >= menuWidth) ||
                    (horizontalPreferredDir !== 'left' && containerWidth < left + menuWidth)) {
                    // need to popup to left
                    left -= menuWidth;
                    this._hDir = 'left';
                }

                if ((verticalPreferredDir === 'up' && up >= menuHeight) ||
                    (verticalPreferredDir !== 'up' && containerHeight < top + menuHeight)) {
                    // need to popup upward
                    top -= menuHeight;
                    this._vDir = 'up';
                }

                left += containerLeft;
                top += containerTop;
            }

            left -= doc.body.scrollLeft;
            top -= doc.body.scrollTop;
        }

        return {
            left: left,
            top: top
        };
    };

    /**
     * Show this menu
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.show
     * @param {Object} [position] - the position that this menu should show
     * @param {string} [preferredDirection='right-down'] - the preferred popup direction for this menu
     */
    Menu.prototype.show = function(position, preferredDirection) {
        if (!this._shown) {
            if (this._parentMenu) {
                this._parentMenu._opennedSubmenuCount++;
            }
            this._shown = 1;

            // display the dom in the dom tree first
            // so we can calculate it's position correctly
            doc.body.appendChild(this.dom);
            var domStyle = this.dom.style;
            domStyle.display = 'block';

            var pos = this._calcPopupPosition(position, preferredDirection);

            domStyle.left = pos.left + 'px';
            domStyle.top = pos.top + 'px';
        }
    };

    /**
     * Hide this menu
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.hide
     */
    Menu.prototype.hide = function() {
        if (this._shown) {
            if (this._parentMenu) {
                this._parentMenu._opennedSubmenuCount--;
            }
            this._shown = 0;
            var dom = this.dom;
            dom.style.display = 'none';
            if (dom.parentNode) {
                dom.parentNode.removeChild(this.dom);
            }
        }
    };

    /**
     * Hide all the submenus and parent menus as well as this menu itself.
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.hideAll
     */
    Menu.prototype.hideAll = function() {
        if (this._parentMenu) {
            this._parentMenu.hideAll();
        } else {
            this.hideSubmenus();
            this.hide();
        }
    };

    /**
     * Get all menu items in this menu
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.children
     */
    Menu.prototype.children = function() {
        return this._items;
    };

    /**
     * Add a menu item to this menu
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.addChild
     */
    Menu.prototype.addChild = function(menuItem) {
        var idx = this._items.indexOf(menuItem);
        if (idx < 0) {
            this._items.push(menuItem);
            this._listNode.appendChild(menuItem.dom);
        }
    };

    /**
     * Remove a menu item from this menu. Note the removed menu item is not destroyed.
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.removeChild
     */
    Menu.prototype.removeChild = function(menuItem) {
        var idx = this._items.indexOf(menuItem);
        if (idx >= 0) {
            this._items.splice(idx, 1);
            this._listNode.removeChild(menuItem.dom);
        }
    };

    /**
     * Hide all submenus of this menu.
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.hideSubmenus
     */
    Menu.prototype.hideSubmenus = function() {
        this._items.forEach(function(item) {
            if (item.hideSubmenu) {
                item.hideSubmenu();
            }
        });
    };

    return Menu;
});

// @formatter:off
define('sap/viz/controls/contextmenu/ContextMenu',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/OSUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/contextmenu/constants/MenuItemConst',
    'sap/viz/controls/contextmenu/ContextMenuConfig',
    'sap/viz/controls/contextmenu/ContextMenuEvent',
    'sap/viz/controls/contextmenu/models/MenuItem',
    'sap/viz/controls/contextmenu/models/DataLabelMenuItem',
    'sap/viz/controls/contextmenu/models/DirectionMenuItem',
    'sap/viz/controls/contextmenu/models/LegendMenuItem',
    'sap/viz/controls/contextmenu/models/StackingMenuItem',
    'sap/viz/controls/contextmenu/models/MBCLegendMenuItem',
    'sap/viz/controls/contextmenu/models/MNDMenuItem',
    'sap/viz/controls/contextmenu/models/SetAxisScaleMenuItem',
    'sap/viz/controls/contextmenu/models/ChartEditorMenuItem',
    'sap/viz/controls/contextmenu/models/ShowHideTitleMenuItem',
    'sap/viz/controls/contextmenu/models/ShowHideNegativeMenuItem',
    'sap/viz/controls/contextmenu/views/Menu'
    ],
function($, OOUtil, OSUtil, Utils, FeedUtils, VizControlBase, GlobalConfig, ChartConst, EventTypeConst, CSSConst,
    LangManager, ChartTypeUtil, MenuItemConst, ContextMenuConfig, ContextMenuEvent, MenuItem, DataLabelMenuItem, DirectionMenuItem,
    LegendMenuItem, StackingMenuItem, MBCLegendMenuItem, MNDMenuItem, SetAxisScaleMenuItem, ChartEditorMenuItem,
    ShowHideTitleMenuItem, ShowHideNegativeMenuItem, Menu) {
// @formatter:on

    var ContextMenu = function(div/*HTMLDivElement*/, uiConfig) {
        ContextMenu.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.contextmenu.ContextMenu";

        //container
        this._div$ = $(div);
        this._uiConfig = uiConfig ? uiConfig : ContextMenuConfig.instance();
        this._uiConfig.contextMenuAssetFolderPath = GlobalConfig.defaultAssetsRoot() + '/common/assets';
        this._customizedUiConfig = {};
        this._cusMenuItems = null;
        this._vizModelProvider = $.proxy(this._vizModel, this);
        this._vizProxyProvider = $.proxy(this._vizProxy, this);
        this._menu = new Menu();
        this._initMenuItemsModel();
    };

    OOUtil.extend(ContextMenu, VizControlBase);

    var EVENTTYPE = {
        CLICK: 'Clicked'
    };

    //var EventType = {};
    //EventType[MenuItemConst.LEGEND.name] = EventTypeConst.SELECT_SHOW_LEGEND;
    //EventType[MenuItemConst.DATALABELS.name] = EventTypeConst.SELECT_SHOW_DATALABELS;
    //EventType[MenuItemConst.DIRECTION.name] = EventTypeConst.SELECT_CHANGE_DIRECTION;
    //EventType[MenuItemConst.STACKING.name] = EventTypeConst.SELECT_CHANGE_STACKING;
    //EventType[MenuItemConst.CHARTEDITOR.name] = EventTypeConst.SELECT_CHART_EDITOR;

    /**
     * handler for chart model properties changed
     */
    ContextMenu.prototype._onVizModelChanged = function(e) {
    };

    /**
     * update menu items model according to the current vizmodel
     */
    ContextMenu.prototype._initMenuItemsModel = function() {
        this._cusMenuItems = {};
        // legend menu item
        var legendItem = new LegendMenuItem(this._vizModelProvider, this._vizProxyProvider);
        this._cusMenuItems[legendItem.name()] = legendItem;
        // dataLabel menu item
        var dataLabelItem = new DataLabelMenuItem(this._vizModelProvider, this._vizProxyProvider);
        this._cusMenuItems[dataLabelItem.name()] = dataLabelItem;
        // direction menu item
        var directionItem = new DirectionMenuItem(this._vizModelProvider);
        this._cusMenuItems[directionItem.name()] = directionItem;
        // stacking menu item
        var stackingItem = new StackingMenuItem(this._vizModelProvider);
        this._cusMenuItems[stackingItem.name()] = stackingItem;

        // chart editor menu item
        // var chartEditorItem = new ChartEditorMenuItem(this._vizProxyProvider);
        // chartEditorItem.clickHandler($.proxy(function() {
            // this._dispatchEvent(new ContextMenuEvent(ContextMenuEvent.POPUP_CHART_EDITOR, this));
        // }, this));
        // this._cusMenuItems[chartEditorItem.name()] = chartEditorItem;

        // mbc legend menu
        var mbcLegendItem = new MBCLegendMenuItem(this._vizModelProvider, this._vizProxyProvider);
        mbcLegendItem.clickHandler($.proxy(function() {
            this._dispatchEvent(new ContextMenuEvent(ContextMenuEvent.REQUEST_LEGEND_COLOR, this));
        }, this));
        this._cusMenuItems[mbcLegendItem.name()] = mbcLegendItem;

        // mnd menu
        var mndItem = new MNDMenuItem($.proxy(this._vizModelProvider, this));
        this._cusMenuItems[mndItem.name()] = mndItem;

        var titleItem = new ShowHideTitleMenuItem(this._vizModelProvider, this._vizProxyProvider);
        this._cusMenuItems[titleItem.name()] = titleItem;

        var setAxisScaleMenuItem = new SetAxisScaleMenuItem(this._vizModelProvider, this._vizProxyProvider);
        this._cusMenuItems[setAxisScaleMenuItem.name()] = setAxisScaleMenuItem;

        var negativeItem = new ShowHideNegativeMenuItem(this._vizModelProvider, this._vizProxyProvider);
        this._cusMenuItems[negativeItem.name()] = negativeItem;
        // set customized menu items
        this._setCustomizedMenuItems(this._uiConfig.customizedMenu);
    };

    /**
     * Create menu item ui according to the current menuitem models.
     */
    ContextMenu.prototype._redrawMenuItems = function(propertyZone) {
        var vizType = ChartTypeUtil.getVizType(this._vizModel().type());
        var hasFeeds = FeedUtils.getVizFeeds(vizType);
        if(hasFeeds){
            var menuConfig = this._getMenuConfig(vizType, propertyZone);
            this._menu.create(menuConfig);
        }
        return !!hasFeeds;
    };

    /**
     * Construct menu configurations
     */
    ContextMenu.prototype._getMenuConfig = function(vizType, propertyZone) {
        var self = this;
        var cusMenuItems = this._cusMenuItems;
        var assetFolderPath = this._uiConfig.contextMenuAssetFolderPath ?
            this._uiConfig.contextMenuAssetFolderPath :
            "../src/common/assets";

        function getConfigByNames(names){
            return names.filter(function(itemName) {
                // Rule-out unneeded menu items
                if(!Utils.isString(itemName)) {
                    itemName = itemName.name;
                }
                var item = cusMenuItems[itemName];

                return itemName === 'blank' || (item && // item must exist or be separator
                    item.isVisible(vizType, propertyZone) && // must be visible
                    item.supportPropertyZone(vizType, propertyZone)); // must support the current zone

            }).filter(function(itemName, i, list) {
                // Remove unneeded separators
                return !(itemName === 'blank' &&
                    (i === 0 || // separator in the first position
                     i === list.length - 1 || // separator in the last position
                     list[i - 1] === 'blank')); // back-to-back separators

            }).map(function(itemName) {
                // Create menu config
                if (itemName === 'blank') {
                    return {
                        menuItemType: 'separator'
                    };
                }
                var submenu;
                if (!Utils.isString(itemName)) {
                    submenu = itemName.submenu;
                    itemName = itemName.name;
                }
                var item = cusMenuItems[itemName];
                var icon = item.icon(vizType, propertyZone);

                // return the menu item configuration to feed the MenuItem constructor
                return {
                    menuItemType: item.isCheckable() && 'checked',
                    name: item.name(),
                    text: item.text(),
                    tooltip: item.tooltip(),
                    icon: icon && (assetFolderPath + '/' + icon),
                    checked: item.isChecked && item.isChecked(vizType),
                    click: self._getMenuItemHandler(item, vizType, propertyZone),
                    submenu: submenu && getConfigByNames(submenu)
                };
            });
        }

        var names = ContextMenu.typeHelp(vizType, {
            menu: this._uiConfig.menu,
            customizedMenu: this._customizedUiConfig.customizedMenu
        });
        return getConfigByNames(names);
    };

    /**
     * Get menu item click handler for current vizType and propertyZone
     * @private
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype._getMenuItemHandler
     */
    ContextMenu.prototype._getMenuItemHandler = function(item, vizType, propertyZone) {
        var self = this;
        return function(evt) {
            //eventData.eventType = EventType[event.target.id];
            var clickHandler = item.clickHandler();
            if (clickHandler) {
                clickHandler.apply(item.scope(), [vizType, propertyZone]);
            }

            var data = {};
            var dispatchEvent = true;
            switch (item.name()) {
                case MenuItemConst.LEGEND.name :
                    data.legend = item.isChecked(vizType);
                    break;
                case MenuItemConst.DATALABELS.name :
                    data.datalabels = item.isChecked(vizType);
                    break;
                case MenuItemConst.DIRECTION.name :
                    data.direction = item.getDirection();
                    break;
                case MenuItemConst.STACKING.name :
                    data.stacking = item.getStacking();
                    break;
                case MenuItemConst.TITLE.name :
                    data.title = item.isChecked(vizType);
                    break;
                case MenuItemConst.NEGATIVE.name :
                    data.negative = item.isChecked(vizType);
                    break;
                default :
                    dispatchEvent = false;
                    break;
            }

            if (dispatchEvent) {
                self._dispatchEvent(new ContextMenuEvent(ContextMenuEvent.CONTEXT_MENU_CHANGED, self, data));
            }
        };
    };

    /**
     * Show context menu at some position.
     * @param {Object} position
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.show
     */
    ContextMenu.prototype.show = function(position, propertyZone) {
        // Now the container should exist
        this._menu.setContainer(this._div$.parent().get(0));

        if (this._redrawMenuItems(propertyZone)) {
            this._menu.show(position && {
                left: position.pageX,
                top: position.pageY
            });
        }
    };

    /**
     * Hide context menu.
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.hide
     */
    ContextMenu.prototype.hide = function() {
        // this._menu$.find('*').removeData().off();
        this._menu.hide();
    };

    /**
     * Serialize ContextMenu to a JSON object.<br/>
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.save
     * @return {JSON}
     */
    ContextMenu.prototype.save = function() {
        //mndvisible
        var retJson = {};
        return retJson;
    };

    /**
     * Deserialize ContextMenu from JSON object.<br/>
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.load
     * @param {JSON} valueJSON
     */
    ContextMenu.prototype.load = function(valueJSON) {
        //mndvisible, default value : false
        // var isMNDVisible = (valueJSON['isMNDVisible'] === true);
        // if (isMNDVisible && this._vizModel()) {
            // this._vizModel().isMNDVisible(isMNDVisible);
        // }
    };

    /**
     * Add a menuItem<br/>
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.addMenuItem
     * @param {Object}
     */
    ContextMenu.prototype.addMenuItem = function(menuItem) {
        this._cusMenuItems[menuItem.name()] = menuItem;
    };

    /**
     * Add a customized menu item
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype._setCustomizedMenuItems
     * @param {Array}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var ContextMenu = new ContextMenu(...);
     * ...
     * ContextMenu._setCustomizedMenuItems([{
     *       "name" : "reconciliation", // name of the menu item
     *       "text" : "Edit Reconciliation", // text to display on the menu item
     *       "isVisible" : function () {}, // control visibility of the menu item
     *       "click" : function () {} // callback while clicking the menu item
     *   }]);
     * </pre>
     */
    ContextMenu.prototype._setCustomizedMenuItems = function (itemDefs) {
        var self = this;
        function createMenuItems(defs, menuNameList){
            defs.forEach(function(def){
                if (def.name === 'blank') {
                    // allow user to decide where to put a separator
                    menuNameList.push('blank');
                } else {
                    var menuItem = new MenuItem(def.name, def.text, null, def.isVisible);
                    menuItem.clickHandler(function() {
                        if (def.click) {
                            def.click.apply(menuItem.scope(), arguments);
                        }
                        var evt = new ContextMenuEvent(self._getEventName(def.name, EVENTTYPE.CLICK));
                        self._dispatchEvent(evt, self);
                    });
                    self.addMenuItem(menuItem);

                    if (Utils.isArray(def.submenu)) {
                        var list = [];
                        createMenuItems(def.submenu, list);
                        menuNameList.push({
                            name: def.name,
                            submenu: list
                        });
                    } else {
                        menuNameList.push(def.name);
                    }
                }
            });
        }

        if (Utils.isArray(itemDefs)) {
            var menuNames = this._customizedUiConfig.customizedMenu = [];
            createMenuItems(itemDefs, menuNames);
        }
    };

    ContextMenu.prototype._getEventName = function (itemName, eventType) {
        return itemName + eventType;
    };

    ContextMenu.prototype.getEventNames = function () {
        var ret = [ContextMenuEvent.CONTEXT_MENU_CHANGED, ContextMenuEvent.REQUEST_LEGEND_COLOR];
        if (Utils.isArray(this._customizedUiConfig.customizedMenu)) {
            var q = this._customizedUiConfig.customizedMenu.slice();
            while (q.length) {
                var item = q.shift();
                if (Utils.isString(item)) {
                    ret.push(this._getEventName(item, EVENTTYPE.CLICK));
                } else {
                    ret.push(this._getEventName(item.name, EVENTTYPE.CLICK));
                    q = q.concat(item.submenu);
                }
            }
        }
        return ret;
    };

    ContextMenu.typeHelp = function(vizType, configuration) {
        var items = [];
        var menu = configuration.menu || [];
        for (var i = 0; i < menu.length; i++) {
            for (var j = 0; j < menu[i].length; j++) {
                var configurationItem = menu[i][j].toUpperCase();
                if (configurationItem === 'TITLE') {
                    if (!MenuItemConst[configurationItem].notSupportType[vizType]) {
                        items.push(menu[i][j]);
                    }
                } else if (MenuItemConst[configurationItem].supportType[vizType]) {
                    items.push(menu[i][j]);
                }
            }
            if (i !== menu.length - 1) {
                items.push("blank");
            }
        }
        // handle customized context menu items
        return items.concat(configuration.customizedMenu || []);
    };

    return ContextMenu;
});

// @formatter:off
define('sap/viz/controls/custombutton/CustomButtonConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var CustomButtonConfig = {};

    CustomButtonConfig.instance = function() {
        return {
            "visible" : true,
            "title" : "Button"//label of tooltip, please using a string after translation
        };
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_CUSTOMBUTTON, CustomButtonConfig);
    return CustomButtonConfig;
});

define('sap/viz/controls/custombutton/CustomButtonEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function( OOUtil, Event) {
    var CustomButtonEvent = function(type, target, data) {
        CustomButtonEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.custombutton.CustomButtonEvent";
    };
    OOUtil.extend(CustomButtonEvent, Event);

    CustomButtonEvent.CLICK_CUSTOM_BUTTON = "clickCustomButton";
    return CustomButtonEvent;
});

define('sap/viz/controls/custombutton/CustomButton',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/custombutton/CustomButtonConfig',
    'sap/viz/controls/custombutton/CustomButtonEvent'],
// @formatter:on
function($, OOUtil, Utils, VizControlBase, CSSConst, CustomButtonConfig, CustomButtonEvent) {
    /**
     *  Filter Menu View
     */
    var CustomButton = function(div/*HTMLDivElement*/, uiConfig) {
        CustomButton.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.custombutton.CustomButton";

        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : CustomButtonConfig.instance();
        this._button$ = null;
        this._icon$ = null;
        this._createChildren();
    };

    OOUtil.extend(CustomButton, VizControlBase);

    /**
     * Create CustomButton content.
     */
    CustomButton.prototype._createChildren = function() {
        if(!(this._uiConfig.visible === false)) {
            this._button$ = $(document.createElement("div")).appendTo(this._div);
            this._button$.addClass(CSSConst.CUSTOMBUTTON_PREFIX + "button");
            this._icon$ = $(document.createElement("div")).appendTo(this._button$);
            if (this._uiConfig.title) {
                this.setTitle(this._uiConfig.title);
            }
            var _this = this;
            this._button$.click(function(event) {
                var eventData = _this._button$.offset();
                _this._dispatchEvent(new CustomButtonEvent(CustomButtonEvent.CLICK_CUSTOM_BUTTON, _this, eventData));
            });
        }
    };
    /**
     * Set icon
     * @param {Object} iconCss
     */
    CustomButton.prototype.setIcon = function(iconCss) {
        if(arguments.length > 0) {
            this._icon$.removeAttr('class');
            this._icon$.addClass(iconCss);
            return this;
        }
    };
    /**
     * Set tooltip
     * @param {Object} iconCss
     */
    CustomButton.prototype.setTitle = function(title) {
        if(arguments.length > 0) {
            this._icon$.attr("title", title);
            return this;
        }
    };
    return CustomButton;
});

// @formatter:off
define('sap/viz/controls/filterbar0/FilterBarConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var FilterBarConfig = {};

    FilterBarConfig.instance = function() {
        return {
            "module" : {
                "visible" : true
            }
        };
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_FILTERBAR0, FilterBarConfig);
    return FilterBarConfig;
});

// @formatter:off
define('sap/viz/controls/frame/VizFrameConfig',[
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/annotation/AnnotationConfig',
    'sap/viz/controls/annotationcontrol/AnnotationControlConfig',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/filterbar0/FilterBarConfig',
    'sap/viz/controls/contextmenu/ContextMenuConfig',
    'sap/viz/controls/custombutton/CustomButtonConfig',
    'sap/viz/controls/common/constants/ChartConst'
],
function(GlobalConfig, AnnotationConfig, AnnotationControlConfig, ChartConfig, FilterBarConfig, ContextMenuConfig, CustomButtonConfig, ChartConst) {
// @formatter:on
    var VizFrameConfig = {};

    VizFrameConfig.instance = function() {
        var result = {
            "enableAnnotation" : false,
            "enableAnnotationControl" : false,
            "enableContextMenu": true,
            "enableFilterMenu" : true,
            "enableFilterBar" : true,
            "enableTitleEditor": true,
            "enableSettingButton" : true,
            "enableFullScreenButton" : true,
            "enablePlayControl": true,
            "useInfoChart" : false,
            "controls" : {
                "chart" : ChartConfig.instance(),
                "filterBar" : FilterBarConfig.instance(),
                "contextMenu" : ContextMenuConfig.instance(),
                "annotation" : AnnotationConfig.instance(),
                "annotationControl" : AnnotationControlConfig.instance(),
                "settingButton" : CustomButtonConfig.instance(),
                "fullScreenButton" : CustomButtonConfig.instance()
            }
        };

        return result;
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_FRAME, VizFrameConfig);
    return VizFrameConfig;
});

define('sap/viz/controls/frame/VizFrameEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var VizFrameEvent = function(type, target, data) {
        VizFrameEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.VizFrameEvent";
    };
    OOUtil.extend(VizFrameEvent, Event);

    /**
     * type: 'filtersChanged',
     * data: 'filters',
     */
    VizFrameEvent.FILTERS_CHANGED = "filtersChanged";

    /**
     * type: 'contextMenuChanged',
     */
    VizFrameEvent.CONTEXT_MENU_CHANGED = 'contextMenuChanged';

    /**
     * type: 'enterFullScreen',
     */
    VizFrameEvent.ENTER_FULL_SCREEN = "enterFullScreen";
    /**
     * type: 'exitFullScreen',
     */
    VizFrameEvent.EXIT_FULL_SCREEN = "exitFullScreen";
    /**
     * type: 'addComment' 
     */
    VizFrameEvent.ADD_COMMENT = 'addComment';
    /**
     * type: 'addFilter' 
     */
    VizFrameEvent.ADD_FILTER = 'addFilter';
    /**
     * type: 'chooseLegendColors' 
     */
    VizFrameEvent.REQUEST_LEGEND_COLOR = 'chooseLegendColors'; 
    /**
     * type: 'popupChartEditor' 
     */   
    VizFrameEvent.POPUP_CHART_EDITOR = 'popupChartEditor';
    
    VizFrameEvent.SLICE_DIMENSION_CHANGED = "sliceDimensionChanged";
    
    return VizFrameEvent;
});

define('sap/viz/controls/frame/chartEditor/ChartEditorEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var FilterMenuEvent = function(type, target, data) {
        FilterMenuEvent.superclass.constructor.apply(this, arguments);
    };
    OOUtil.extend(FilterMenuEvent, Event);

    FilterMenuEvent.FILTER_CLICKED = "filterClicked";
    FilterMenuEvent.EXCLUDE_CLICKED = "excludeClicked";

    return FilterMenuEvent;
});

define('sap/viz/controls/frame/chartEditor/ChartEditor',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/frame/chartEditor/ChartEditorEvent'],
// @formatter:on
function($, CSSConst, LangManager, OOUtil, UIControl, ChartEditorEvent) {
    var ChartEditor = function(dom, assetFolder) {
        ChartEditor.superclass.constructor.apply(this, arguments);

        this._dom$ = $(dom);

        this._createChildren(assetFolder);
    };
    OOUtil.extend(ChartEditor, UIControl);

    ChartEditor.prototype._createChildren = function(assetFolder) {
        var _this = this;
        this._dom$.addClass(CSSConst.FRAME_PREFIX + 'editor');

        var $main = $('<div/>').appendTo(this._dom$);
        $main.addClass(CSSConst.FRAME_PREFIX + 'editor-main');
        $main.addClass(CSSConst.COMMON_PREFIX + 'popUp');

        var $header = $('<div/>').appendTo($main).addClass(CSSConst.FRAME_PREFIX + 'editor-header');
        var $headerText = $('<h3/>').appendTo($header).text(LangManager.get("VIZ_FRAME_CHART_EDITOR"));

        var $content = $('<div/>').appendTo($main).addClass(CSSConst.FRAME_PREFIX + 'editor-content');
        var $ph = $('<img/>').appendTo($content).addClass(CSSConst.FRAME_PREFIX + 'editor-content-img');
        $ph.attr('src', assetFolder + '/chartEditorPH.png');

        var $footer = $('<div/>').appendTo($main).addClass(CSSConst.FRAME_PREFIX + 'editor-footer');
        var $btnOK = $('<button/>').appendTo($footer).text(LangManager.get("VIZ_COMMON_OK"));
        $btnOK.addClass(CSSConst.FRAME_PREFIX + 'editor-footer-button');
        $btnOK.addClass(CSSConst.COMMON_PREFIX + 'button');
        var $btnCancel = $('<button/>').appendTo($footer).text(LangManager.get("VIZ_COMMON_CANCEL"));
        $btnCancel.addClass(CSSConst.FRAME_PREFIX + 'editor-footer-button');
        $btnCancel.addClass(CSSConst.COMMON_PREFIX + 'button');

        var $btnClose = $('<div/>').appendTo($main);
        $btnClose.addClass(CSSConst.COMMON_PREFIX + 'havanaSharedSprite16');
        $btnClose.addClass(CSSConst.FRAME_PREFIX + 'editor-close');
        var cancelFn = function() {
            _this._dispatchEvent(new ChartEditorEvent(ChartEditorEvent.EDIT_CANCELED, this));
            _this._dispatchEvent(new ChartEditorEvent(ChartEditorEvent.EDITOR_CLOSED, this));

            _this._dom$.detach();
        };

        var confirmFn = function() {
            _this._dispatchEvent(new ChartEditorEvent(ChartEditorEvent.EDIT_CONFIRMED, this, {
                // TODO Set edited properties
            }));
            _this._dispatchEvent(new ChartEditorEvent(ChartEditorEvent.EDITOR_CLOSED, this));

            _this._dom$.detach();
        };

        $btnOK.click(confirmFn);
        $btnCancel.click(cancelFn);
        $btnClose.click(cancelFn);
    };

    return ChartEditor;
});

// @formatter:off
define('sap/viz/controls/frame/chartEditor/ChartEditorPlugin',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/frame/chartEditor/ChartEditor',
    'sap/viz/controls/frame/chartEditor/ChartEditorEvent'
    ],
function($, CSSConst, ChartEditor, ChartEditorEvent){
// @formatter:on
    /**
     * Chart Editor plugin class.
     */
    var ChartEditorPlugin = function(div, vizFrame, uiConfig) {
        this.__className = "sap.viz.controls.frame.chartEditor.ChartEditorPlugin";
        this._vizFrame = vizFrame;
        this._uiConfig = uiConfig;
        this._div = div;
        this._chartEditor = null;
    };
    ChartEditorPlugin.prototype.validateSize = function(w, h) {
        this._locateChartEditor();
    };
    /**
     * Destroy itself.
     */
    ChartEditorPlugin.prototype.destroy = function() {
        if(this._chartEditor){
            this._chartEditor.removeAllEventListeners();
            this._chartEditor.destroy();
            this._chartEditor = null;
        }
        $(this._div).remove();
    };
    /**
     * Popup editor
     */
    ChartEditorPlugin.prototype._popUpEditor = function() {
        var container$ = $(this._div);
        var assetFolder = this._uiConfig.chartEditorAssetFolderPath ? this._uiConfig.chartEditorAssetFolderPath : '../src/controls/frame/assets';
        container$.children().addClass(CSSConst.COMMON_PREFIX + 'blur');

        var dom$ = $(document.createElement('div')).appendTo(container$);

        this._chartEditor = new ChartEditor(dom$[0], assetFolder);
        this._locateChartEditor();

        this._chartEditor.addEventListener(ChartEditorEvent.EDITOR_CLOSED, function(event) {
            container$.children().removeClass(CSSConst.COMMON_PREFIX + 'blur');
        });
    };
    /**
     * set editor position
     */
    ChartEditorPlugin.prototype._locateChartEditor = function() {
        if (this._chartEditor) {
            var container$ = $(this._div);
            var dom$ = $(this._chartEditor._dom);

            dom$.css({
                'left' : (container$.width() - dom$.width()) / 2,
                'top' : Math.min(120, (container$.height() - dom$.height()) / 2)
            });
        }
    };
    return ChartEditorPlugin;
});

define('sap/viz/controls/frame/menu/CommentMenuItem',
// @formatter:off
[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/constants/ChartConst',
'sap/viz/controls/common/utils/ChartTypeUtil',
'sap/viz/controls/contextmenu/constants/MenuItemConst',
'sap/viz/controls/contextmenu/models/MenuItem'
],
function(OOUtil, ChartConst, ChartTypeUtil, MenuItemConst, MenuItem){
// @formatter:on
    var CommentMenuItem = function(chartModelProvider, chartProxyProvider) {
        CommentMenuItem.superclass.constructor.apply(this, [MenuItemConst.COMMENT.name,  MenuItemConst.getText(MenuItemConst.COMMENT.text), this._iconFunc, this._isVisibleFunc, this._clickHandler]);
        this.__className = "sap.viz.controls.frame.menu.CommentMenuItem";
        this._chartModelProvider = chartModelProvider;
        this._chartProxyProvider = chartProxyProvider;
    };

    OOUtil.extend(CommentMenuItem, MenuItem);

    /*
    CommentMenuItem.prototype._iconFunc = function() {
            return MenuItemConst.COMMENT.icon["show"];
        };*/

    CommentMenuItem.prototype._isVisibleFunc = function() {
        var curChartType = ChartTypeUtil.getVizType(this._getType()); 
        var selection = this._chartProxyProvider.getSelection();
        var hasSelection = (selection && selection.length > 0);
        return (hasSelection && MenuItemConst.COMMENT.supportType[curChartType]);
    };

    CommentMenuItem.prototype._getType = function() {
        return this._chartModelProvider().type();
    };

    CommentMenuItem.prototype.getDirection = function() {
        return ChartTypeUtil.getDirection(this._getType());
    };

    return CommentMenuItem;
});

define('sap/viz/controls/filterbar0/Tooltip',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/managers/LangManager'
   ],
// @formatter:on
function($, CSSConst, AbstractFilter, LangManager) {
    var delay = 1000;
    var offset = {
        x : 8,
        y : 16
    };
    var Tooltip = function(div) {
        this._div = div;
        this._showing = false;
        this._tooltip$ = null;
    };

    Tooltip.prototype._getTitle = function(filter) {
        if(filter.getType() !== AbstractFilter.VALUE_TYPE) {
            return filter.filterTitle();
        }

        var count = filter.values().length;
        var title = filter.filterName() + ' (' + count + ' ';
        if(filter.isExcluded()) {
            title += LangManager.get('VIZ_FILTERBAR_ITEMS_EXCLUDED');
        } else {
            title += LangManager.get('VIZ_FILTERBAR_ITEMS_INCLUDED');
        }
        title += ')';

        return title;
    };

    Tooltip.prototype._showTooltip = function(filter) {
        if(!this._showing) {
            return;
        }
        if(!this._tooltip$) {
            this._tooltip$ = $(document.createElement('div')).appendTo(this._div);
        } else {
            this._tooltip$.empty();
        }

        var tooltip$ = this._tooltip$;
        tooltip$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-tooltip');
        if(filter.isGlobalFilter()) {
            var globalFilterText = LangManager.get('VIZ_FILTERBAR_GLOBAL_FILTER');
            var tooltipGlobalFilter$ = $(document.createElement('span')).appendTo(tooltip$).text(globalFilterText);
            tooltipGlobalFilter$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-tooltip-globalfilter');
        }
        var tooltipTitle$ = $(document.createElement('span')).appendTo(tooltip$).text(this._getTitle(filter));
        tooltipTitle$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-tooltip-title');

        var tooltipText$ = $(document.createElement('span')).appendTo(tooltip$);
        tooltipText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-tooltip-value');
        if(filter.isExcluded()) {
            tooltipText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-exclude');
        }
        tooltipText$.text(filter.filterContent());
        
        //if the length of text over the line of 15, it will display '...'
        //only for browser which doesn't recognize '-webkit-line-clamp' in css
        var maxHeight = 15*15;
        while (tooltipText$.height() > maxHeight) {
            tooltipText$.text(tooltipText$.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
        }

        var left = this._position.left + offset.x;
        var rightBorder = this._div.offset().left + this._div.outerWidth();
        left = Math.min(left, rightBorder - tooltip$.outerWidth());
        tooltip$.offset({
            "left" : left,
            "top" : this._position.top + offset.y
        });
    };

    Tooltip.prototype.show = function(filter, position) {
        this._position = position;
        if(this._showing) {
            return;
        }
        this._showing = true;
        var _this = this;
        setTimeout(function() {
            _this._showTooltip(filter);
        }, delay);
    };

    Tooltip.prototype.position = function(position) {
        this._position = position;
    };

    Tooltip.prototype.hide = function() {
        this._showing = false;
        if(this._tooltip$) {
            this._tooltip$.remove();
            this._tooltip$ = null;
        }
    };
    return Tooltip;
});

define('sap/viz/controls/filterbar0/FilterBarEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var FilterBarEvent = function(type, target, data) {
        FilterBarEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.filterbar0.FilterBarEvent";
    };

    OOUtil.extend(FilterBarEvent, Event);

    FilterBarEvent.DELETE_FILTER = "deleteFilter";
    FilterBarEvent.HEIGHT_CHANGED = "heightExtend";

    return FilterBarEvent;
});

// @formatter:off
define('sap/viz/controls/filterbar0/FilterBar',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/managers/DragManager',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/views/feed/FeedList',
    'sap/viz/controls/common/views/feed/FeedListEvent',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/helpers/Rectangle',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/filter/DateRangeFilter',
    'sap/viz/controls/common/filter/NumericRangeFilter',
    'sap/viz/controls/common/filter/ValueFilter',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/filterbar0/Tooltip',
    'sap/viz/controls/filterbar0/FilterBarConfig',
    'sap/viz/controls/filterbar0/FilterBarEvent'],
function($, VizControlBase, CSSConst, EventTypeConst, Event, DragManager, LangManager, OOUtil, UIControl,
    DropAction, FeedList, FeedListEvent, AnalyticalType, FeedItemType, Rectangle, AbstractFilter, DateRangeFilter,
    NumericRangeFilter, ValueFilter, FilterHelper, Tooltip, FilterBarConfig, FilterBarEvent) {
// @formatter:on
    /**
     *  this._arrowWidth
     */
    var FilterBar = function(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        FilterBar.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.filterbar0.FilterBar";

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_filterbar_control');

        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : FilterBarConfig.instance();
        this._containerCurrentPosition = 0;
        // Feeding
        this._allAnalyses = null;
        this._settings = null;
        this._visualLines = 2;
        this._description$ = null;
        this._layout$ = null;
        this._headerVisible = false;
        this._isFullScreen = false;
        this._tooltip = new Tooltip(this._div);
        this._createChildren();
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_filterbar_control');
    };
    // API document: events
    /**
     * Event:requestFilterValues.
     * <pre>
     * type: "requestFilterValues"
     * handler: function({
     *                    type: "requestFilterValues",
     *                    data: {
     *                        bounds, // an object contains left, top, width, height
     *                        filterName,
     *                        analysisObjectId,
     *                        filterItem, // an object of ValueFilter, DateRangeFilter or NumericRangeFilter
     *                        validate // function to validate filter item.
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.filterbar0.FilterBar#requestFilterValues
     * @param {String} evt.type "requestFilterValues".
     * @param {Object} evt.data
     *      It contains filterName, analysisObjectId and filterItem properties. User need to call validate(true) method
     * if changed filterItem or call validate(false) if no change happens.
     */
    var filterItemShrinks = 0.8;
    var filterItemHeightDefault = 40;
    var filterItemWidthDefault = 190;
    OOUtil.extend(FilterBar, VizControlBase);

    // const of data types
    FilterBar.TYPE_STRING = 'string';
    FilterBar.TYPE_INTEGER = 'integer';
    FilterBar.TYPE_NUMBER = 'number';
    FilterBar.TYPE_DATE = 'date';

    var ImageWidth = 16;
    /**
     * Get/Set filterBar filterItems.
     * @method sap.viz.controls.filterBar0.FilterBar.prototype.filterItems
     * @param {Array<sap.viz.controls.filterbar0.FilterItem>} filterItems
     * @return {Array<sap.viz.controls.filterbar0.FilterItem>}
     */
    FilterBar.prototype.filterItems = function(filterItems) {
        if(arguments.length > 0) {
            this._vizModel().filterItems(filterItems);
            return this;
        } else {
            return this._vizModel().filterItems();
        }
    };

    FilterBar.prototype.save = function() {
        var jsonValue = {};
        jsonValue['filterItems'] = FilterHelper.toJSON(this._vizModel().filterItems());
        return jsonValue;
    };

    FilterBar.prototype.load = function(valueJSON) {
        var filters = null;
        if(valueJSON && valueJSON.filterItems){
            filters = FilterHelper.fromJSON(valueJSON.filterItems);
        }
        filters = filters || [];
        this._vizModel().filterItems(filters );
    };

    /**
     * handler for chart model properties changed
     */
    FilterBar.prototype._onVizModelChanged = function(e) {
        if(e.data.filterChanged) {
            this._filtersChanged();
        }
    };
    /**
     * TODO: Add comments.
     */
    FilterBar.prototype._createChildren = function() {
        var _this = this;
        var filterBarModel = this._uiConfig.module;
        if(filterBarModel && !(filterBarModel.visible === false)) {
            this._headerVisible = true;
            this._plus$ = $(document.createElement("div")).appendTo(this._div);
            this._plus$.addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16');
            this._plus$.addClass(CSSConst.FILTERBAR0_PREFIX + 'header-plus');
            this._plus$.click(function(e) {
                _this._plusClickHandler(e);
            });
            var label = filterBarModel.label ? filterBarModel.label : LangManager.get('VIZ_FILTERBAR_DESCRIPTION');
            this._description$ = $(document.createElement("span")).text(label).appendTo(this._div);
            this._description$.addClass(CSSConst.FILTERBAR0_PREFIX + "description");
        }

        this._layout$ = $(document.createElement('div')).appendTo(this._div);
        this._layout$.addClass(CSSConst.FILTERBAR0_PREFIX + 'layout');
        this._layout$.addClass(CSSConst.COMMON_PREFIX + 'scrollable');
        this._layout$.addClass(CSSConst.COMMON_PREFIX + 'scrollable-y');
        this._layout$.css({
            'max-height' : this._visualLines * filterItemHeightDefault
        });
        this._filterItemsContainer$ = $(document.createElement('div')).appendTo(this._layout$);
        this._filterItemsContainer$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filterItems-container');
        if(this._headerVisible === true) {
            this._layout$.hide();
        } else {
            this._layout$.css({'left' : '0px'});
        }

        //support drop filter
        $(this._div).droppable({
            tolerance : 'pointer',
            accept : '.' + DragManager.DRAGGABLE_CLASS_ANALYSIS,
            over : $.proxy(this._dragOver, this),
            out : $.proxy(this._dragOut, this),
            drop : $.proxy(this._drop, this)
        });
    };
    /**
     * Get/Set available AnalysisObjects for object picker popup UI
     *
     * @method sap.viz.controls.filterbar0.FilterBar.prototype.analysisObjectsForPicker
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     * @returns {Array<sap.viz.controls.common.feeds.AnalysisObject>}
     */
    FilterBar.prototype.analysisObjectsForPicker = function(analysisObjects) {
        if(arguments.length > 0) {
            this._allAnalyses = analysisObjects;
        } else {
            return this._allAnalyses;
        }
    };

    FilterBar.prototype._plusClickHandler = function(e) {
        var dom = document.createElement('div');
        var newFilterItems = this._getExcludeGlobalFilter(this._vizModel().filterItems());
        var feedList = new FeedList(dom, this._allAnalyses, FeedItemType.DIMENSION, newFilterItems);
        feedList.addEventListener(FeedListEvent.ITEM_SELECTED, function(event) {
            var analysisObject = event.data.selectedItem;
            if(analysisObject) {
                this._addFilterItem(analysisObject);
            }
        }, this);
        var offset = this._plus$.offset();
        feedList.open({
            x : offset.left,
            y : offset.top,
            shelfWidth : this._plus$.width()
        });
    };
	
	//this just for the fiterbar0
	FilterBar.prototype._getExcludeGlobalFilter = function(filterItems) {
		var newFilterItems = [];
		if(filterItems) {
			for(i = 0;i < filterItems.length; i++) {
				if(filterItems[i].isGlobalFilter() == false) {
					newFilterItems.push(filterItems[i]);
				}
			}
		}
		return newFilterItems;
	}

    FilterBar.prototype._getDroppableAnalysisObject = function(token) {
        if(!token || !token.analysisObject) {
            return null;
        }

        var analysisObject = token.analysisObject;
        var tokenAnalyticalType = analysisObject.type();
        var info = FilterHelper.getFilterInfo(analysisObject);
        if(AnalyticalType.compatible(AnalyticalType.DIMENSION, tokenAnalyticalType)
            && !FilterHelper.isFilterItemExisted(this._vizModel(), info.id, info.hierarchyLevelId)
            && tokenAnalyticalType !== AnalyticalType.MND) {
            return analysisObject;
        } else {
            return null;
        }
    };
    /**
     * Hanlder for drag over.
     */
    FilterBar.prototype._dragOver = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(!token) {
            return;
        }

        var analysisObject = this._getDroppableAnalysisObject(token);
        if(analysisObject) {
            token.currentAction(DropAction.ACCEPT_AS_COPY);
        } else {
            token.currentAction(DropAction.DENY);
        }
    };
    /**
     * Hanlder for drag out.
     */
    FilterBar.prototype._dragOut = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(token) {
            token.currentAction(DropAction.DENY);
        }
    };
    /**
     * Handler for drag drop.
     */
    FilterBar.prototype._drop = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(!token) {
            return;
        }

        var analysisObject = this._getDroppableAnalysisObject(token);
        if(analysisObject) {
            token.currentAction(DropAction.ACCEPT_AS_COPY);
            this._addFilterItem(analysisObject);
        } else {
            token.currentAction(DropAction.DENY);
        }

        token.dropTarget(this._dom);
    };
    /**
     * add filter item to vizModel.
     * @param {sap.viz.controls.common.feeds.AnalysisObject} analysisObject
     */

    FilterBar.prototype._addFilterItem = function(analysisObject) {
        var filterInfo = FilterHelper.getFilterInfo(analysisObject);
        var name = filterInfo.name;
        var analysisObjectId = filterInfo.id;
        var dataType = analysisObject.dataType();
        var filterItem;
        // create different filter based on the data type of analysis object
        switch(dataType) {
            case FilterBar.TYPE_INTEGER:
            case FilterBar.TYPE_NUMBER:
                filterItem = new NumericRangeFilter(analysisObjectId, name);
                break;
            case FilterBar.TYPE_DATE:
                filterItem = new DateRangeFilter(analysisObjectId, name);
                break;
            case FilterBar.TYPE_STRING:
            default:
                filterItem = new ValueFilter(analysisObjectId, name);
                if (filterInfo.hierarchyLevelId) {
                    filterItem.hierarchyLevelId = filterInfo.hierarchyLevelId;
                }
                break;
        }
        var filterItems = this._vizModel().filterItems();
        filterItems.push(filterItem);
        this._vizModel().filterItems(filterItems);

        this._dispatchRequestFilterEvent(filterItem);
    };
    /**
     * update Filter
     */
    FilterBar.prototype._filtersChanged = function() {
        if(this._filterItemsContainer$) {
            this._filterItemsContainer$.empty();
        }
        var filterItems = this._vizModel().filterItems();
        if(!filterItems || filterItems.length == 0) {
            this._updateDescription();
            return this;
        }
        if(this._headerVisible === true) {
            this._description$.hide();
            this._layout$.show();
        }
        this._updateFilterItemContainer();
    };
    FilterBar.prototype._dispatchRequestFilterEvent = function(filterItem) {
        //        console.log('edito filter...');
        var _this = this;
        var validateFilterItem = function(changed) {
            var filterItems = _this._vizModel().filterItems();
            if(filterItem.isEmpty()) {
                //remove filter item with empty values.
                var index = filterItems.indexOf(filterItem);
                if(index >= 0) {
                    filterItems.splice(index, 1);
                    _this._vizModel().filterItems(filterItems);
                    _this._tooltip.hide();
                }
                return;
            }

            if(changed) {
                //Dispatch filterChanged event.
                _this._vizModel().filterItems(filterItems);
            }
        };
        var filterItem$ = $('#' + filterItem.id(), this._filterItemsContainer$);
        var data = {
            bounds : Rectangle.toJSON(Rectangle.parseDOM(filterItem$)),
            filterName : filterItem.filterName(),
            analysisObjectId : filterItem.analysisObjectId(),
            filterItem : filterItem,
            validate : validateFilterItem
        };
        this._dispatchEvent(new Event(EventTypeConst.REQUEST_FILTER_VALUES, this, data));
    };
    FilterBar.prototype._createFilterTitle = function(filterItem, filterItem$) {
        if(filterItem.getType() !== AbstractFilter.VALUE_TYPE) {
            var filterText$ = $(document.createElement('span')).appendTo(filterItem$).text(filterItem.filterTitle());
            filterText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-text');
            filterText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'range-filter-item-text');
            return;
        }

        var title$ = $(document.createElement('div')).appendTo(filterItem$);
        var name$ = $(document.createElement('div')).appendTo(title$).text(filterItem.filterName()).css("display", 'inline');
        name$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-text').attr('id', 'filterName');
        var countInfo$ = $(document.createElement('div')).appendTo(title$).css("display", 'inline').attr('id', 'countInfo');
        countInfo$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-info');
        $(document.createElement('span')).appendTo(countInfo$).text('(');
        var count$ = $(document.createElement('span')).appendTo(countInfo$).text(filterItem.values().length);
        if(filterItem.isExcluded()) {
            count$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-exclude');
        }
        $(document.createElement('span')).appendTo(countInfo$).text(')');
    };
    /**
     * create Filter item
     * @param {sap.viz.controls.filterbar0.FilterItem} filterItem
     */
    FilterBar.prototype._createFilterItem = function(filterItem) {
        var filterName = filterItem.filterName();
        var _this = this;

        var dom = document.createElement('div');
        var filterItem$ = $(dom).appendTo(this._filterItemsContainer$);

        this._createFilterTitle(filterItem, filterItem$);
        if(filterItem.isGlobalFilter()) {
        	filterItem$.attr({
            	'id' : 'GLOBAL-'+filterItem.id()
        	});
            filterItem$.addClass(CSSConst.FILTERBAR0_PREFIX + 'global-filter-item');
            
        } else {
        	filterItem$.attr({
            	'id' : filterItem.id()
        	});
            filterItem$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item');
            filterItem$.click(function() {
                _this._dispatchRequestFilterEvent(filterItem);
            });
            var deleteIcon$ = $(document.createElement('div')).appendTo(filterItem$);
            deleteIcon$.addClass(CSSConst.FILTERBAR0_PREFIX + 'delete-icon');
            deleteIcon$.addClass(CSSConst.COMMON_PREFIX + 'UVBSharedSprite');
            deleteIcon$.click(function(e) {
                _this._removeFilterItem(filterItem);
                _this._dispatchEvent(new FilterBarEvent(FilterBarEvent.DELETE_FILTER, _this));
                _this._tooltip.hide();
                e.stopPropagation();
            });
        }
        return filterItem$;
    };
    /**
     * change properties value to number
     * @param {String} string
     */
    FilterBar.prototype._stringToNumber = function(value) {
        if(!value) {
            return 0;
        }
        return parseInt(value.replace('px', ''));
    };
    /**
     * update size
     */
    FilterBar.prototype.validateSize = function() {
        var filterItem$ = this._filterItemsContainer$.children();
        if(filterItem$.length == 0) {
            return this;
        }
        filterItem$.css({
            'width' : filterItemWidthDefault
        });
        this._updateFilterItemsWidth();
    };
    /**
     * judge there is enough space nor not
     */
    FilterBar.prototype._needAdjust = function() {
        var height = this._filterItemsContainer$.innerHeight();
        var needChanged = height > filterItemHeightDefault;
        if(needChanged) {
            return true;
        } else {
            return false;
        }
    };
    /**
     * update the filterItemContainer
     *
     */
    FilterBar.prototype._updateFilterItemContainer = function() {
        var filterItems = this._vizModel().filterItems();
        var i;
        for( i = 0;i < filterItems.length;i++) {
            this._createFilterUI(filterItems[i]);
        }
        this._updateFilterItemsWidth();
        return this;
    };

    FilterBar.prototype._createFilterUI = function(filter) {
        var filterName = filter.filterName();
        var filterItem$;
        var _this = this;
        filterItem$ = this._createFilterItem(filter);
        filterItem$.mouseover(function(event) {
            _this._tooltip.show(filter, {
                left : event.clientX,
                top : event.clientY
            });
            $('.' + CSSConst.FILTERBAR0_PREFIX + 'filter-values', event.currentTarget).addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-values-active');
        });
        filterItem$.mousemove(function(event) {
            _this._tooltip.position({
                left : event.clientX,
                top : event.clientY
            });
        });
        filterItem$.mouseout(function(event) {
            _this._tooltip.hide();
            $('.' + CSSConst.FILTERBAR0_PREFIX + 'filter-values', event.currentTarget).removeClass(CSSConst.FILTERBAR0_PREFIX + 'filter-values-active');
        });
        this._addFilterValues(filter, filterItem$);
    };
    FilterBar.prototype._updateFiltersTitle = function() {
        var updataFunc = function(index, filter$) {
            var name$ = $('#filterName', filter$);
            if(name$.length === 0) {
                return;
            }
            name$.css({
                'width' : 'auto'
            });
            var title$ = name$.parent();
            var countInfo$ = $('#countInfo', filter$);
            var namePosition = name$.position();
            var nameWidth = name$.width() + namePosition.left + 2;
            var titleWidth = title$.width() - ImageWidth;
            var countWidth = countInfo$.width();
            var width = Math.min(nameWidth, titleWidth - countWidth);
            name$.css({
                'width' : width - namePosition.left
            });
            countInfo$.css({
                'left' : width
            });
        };
        $('.' + CSSConst.FILTERBAR0_PREFIX + 'filter-item',this._div).each(updataFunc);
        $('.' + CSSConst.FILTERBAR0_PREFIX + 'global-filter-item',this._div).each(updataFunc);
    };
    /**
     * change filter items width
     */
    FilterBar.prototype._updateFilterItemsWidth = function() {
        var data;
        if(this._filterItemsContainer$.children().length === 0) {
            this._updateDescription();
            return this;
        }
        if(!this._needAdjust()) {
            data = {
                'height' : filterItemHeightDefault
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.HEIGHT_CHANGED, this, data));
            this._updateFiltersTitle();
            return this;
        }
        //adjust the filterItems width
        var changeCount = 0;
        while(this._needAdjust() && changeCount < 2) {
            changeCount++;
            var filterItem$ = $('.' + CSSConst.FILTERBAR0_PREFIX + 'filter-item');
            var width = $($('.'+CSSConst.FILTERBAR0_PREFIX + 'filter-item')[0]).outerWidth() * filterItemShrinks;
            filterItem$.css({
                'width' : width
            });
        }
        //adjust vizframe header height
        if(this._needAdjust()) {
            data = {
                'height' : this._avaliableHeightForHeader()
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.HEIGHT_CHANGED, this, data));
            if(data.height < this._filterItemsContainer$.outerHeight()) {
                $(this._layout$).scrollTop(this._filterItemsContainer$.outerHeight());
            }
        }
        //filterItemsContainer height may change automatic when header height was changed ,so we need judgment again
        if(!this._needAdjust()) {
            data = {
                'height' : filterItemHeightDefault
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.HEIGHT_CHANGED, this, data));
        };
        this._updateFiltersTitle();
        return this;
    };

    FilterBar.prototype._avaliableHeightForHeader = function() {
        var containerHeight = this._filterItemsContainer$.outerHeight();
        var minHeight = filterItemHeightDefault - 2;
        var maxHeight = filterItemHeightDefault;
        var num = this._visualLines - 1;
        for(var i = 2;i <= this._visualLines;i++) {
            if(minHeight * i <= containerHeight && containerHeight <= maxHeight * i) {
                num = i - 1;
                break;
            }
        }
        var marginBottom = 2;
        return num * minHeight + maxHeight + marginBottom;
    };
    /**
     * add filter values into filteritem dom.
     */
    FilterBar.prototype._addFilterValues = function(filterItem, filterItem$) {
        var valuesString = filterItem.filterContent();
        var filterText$ = filterItem$.find("span[id='values']");
        if(filterText$.length === 0) {
            filterText$ = $(document.createElement('span')).appendTo(filterItem$);
            filterText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-values');
            filterText$.attr({
                id : 'values'
            });
        }

        filterText$.text(valuesString);

        var excludeClass = CSSConst.FILTERBAR0_PREFIX + 'filter-exclude';
        if(filterItem.isExcluded()) {
            filterText$.addClass(excludeClass);
        } else {
            filterText$.removeClass(excludeClass);
        }
    };
    /**
     * remove the filter in vizModel.filters.
     * @param {sap.viz.controls.filterbar0.FilterItem} filter
     */
    FilterBar.prototype._removeFilterItem = function(filter) {
        var filterItems = this._vizModel().filterItems().slice(0);
        var index = filterItems.indexOf(filter);
        filterItems.splice(index, 1);
        this._vizModel().filterItems(filterItems);
        return filterItems;
    };
    /**
     * update filter bar description
     */
    FilterBar.prototype._updateDescription = function() {
        var filterItems = this._vizModel().filterItems();
        if(filterItems.length === 0 && this._headerVisible === true) {
            this._description$.show();
            this._layout$.hide();
        }
    };
    return FilterBar;
});

define('sap/viz/controls/frame/views/FilterMenuEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var FilterMenuEvent = function(type, target, data) {
        FilterMenuEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.views.FilterMenuEvent";
    };
    OOUtil.extend(FilterMenuEvent, Event);

    FilterMenuEvent.FILTER_CLICKED = "filterClicked";
    FilterMenuEvent.EXCLUDE_CLICKED = "excludeClicked";

       return FilterMenuEvent;
});

define('sap/viz/controls/frame/views/FilterMenu',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/frame/views/FilterMenuEvent'],
// @formatter:on
function($, OOUtil, UIControl, CSSConst, LangManager, FilterMenuEvent) {
    /**
     *  Filter Menu View
     */
    var FilterMenu = function(div/*HTMLDivElement*/, uiConfig) {
        FilterMenu.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.views.FilterMenu";

        this._div = div;
        this._uiConfig = uiConfig;
        this._container = null;

        this._createChildren();
    };

    OOUtil.extend(FilterMenu, UIControl);

    /**
     * Create FilterMenu content, add Filter and Exclude button.
     */
    FilterMenu.prototype._createChildren = function() {
        this._container = $(document.createElement('div')).appendTo(this._div);
        $(this._container).addClass(CSSConst.FRAME_PREFIX + "filtermenu");

        var btnFilter$ = $(document.createElement('div')).appendTo(this._container);
        var filterIcon$ = $(document.createElement('div')).appendTo(btnFilter$);
        filterIcon$.addClass(CSSConst.COMMON_PREFIX + 'havanaSharedSprite16');
        filterIcon$.addClass(CSSConst.FRAME_PREFIX + 'filtermenu-filter-icon');
        var filterText$ = $(document.createElement('div')).appendTo(btnFilter$);
        filterText$.text(LangManager.get('VIZ_FRAME_FILTERMENU_FILTER'));
        btnFilter$.click($.proxy(function() {
            this._dispatchEvent(new FilterMenuEvent(FilterMenuEvent.FILTER_CLICKED), this);
        }, this));

        var btnExclude$ = $(document.createElement('div')).appendTo(this._container);
        var excludeIcon$ = $(document.createElement('div')).appendTo(btnExclude$);
        excludeIcon$.addClass(CSSConst.COMMON_PREFIX + 'havanaSharedSprite16');
        excludeIcon$.addClass(CSSConst.FRAME_PREFIX + 'filtermenu-exclude-icon');
        var excludeText$ = $(document.createElement('div')).appendTo(btnExclude$);
        excludeText$.text(LangManager.get('VIZ_FRAME_FILTERMENU_EXCLUDE'));
        $(btnExclude$).click($.proxy(function() {
            this._dispatchEvent(new FilterMenuEvent(FilterMenuEvent.EXCLUDE_CLICKED), this);
        }, this));

    };

    /**
     * Show FilterMenu.
     * @param {Boolean} showFilter
     * @param {Boolean} showExclude
     */
    FilterMenu.prototype.show = function(showFilter, showExclude) {
        if (showFilter || showExclude) {
            $(this._container).css({
                bottom : 2 + 'px',
                'visibility' : 'visible',
                'display' : 'block'
            });
            $(this._container).show();
        } else {
            $(this._container).hide();
        }
    };

    /**
     * Hide FilterMenu.
     */
    FilterMenu.prototype.hide = function() {
        $(this._container).hide();
    };

    /**
     * Update size.
     * @param {Object} size
     */
    FilterMenu.prototype.size = function(size) {
        $(this._container).css({
            left : (size.width - $(this._container).outerWidth()) / 2 + 'px'
        });
    };
    return FilterMenu;
});

define('sap/viz/controls/chart/views/TitleContextMenu',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/OSUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/CSSConst',
    'jquery'
    ],
// @formatter:on
function(OOUtil, OSUtil, UIControl, CSSConst, $) {
    /**
     *  Context Menu View
     */
    var ContextMenu = function(div/*HTMLDivElement*/, items) {
        ContextMenu.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.TitleContextMenu";

        //container
        this._div = div;
        this._menu = null;

        this._visible = true;
        this._shown = false;

        this._cusMenuItems = items;
        this._createContextMenu();

        this._mousedownHandler = $.proxy(this._handleMousedownEvent, this);
    };

    OOUtil.extend(ContextMenu, UIControl);

    /**
     * TODO: Add comments.
     */
    ContextMenu.prototype._createContextMenu = function() {
        var _this = this;

        this._menu = document.createElement('div');
        $(this._menu).addClass(CSSConst.PREFIX + 'contextmenu');
        $(this._div).append(this._menu);

        this.hide();

        this._ul = document.createElement('ul');
        $(this._ul).addClass([CSSConst.CONTEXTMENU_PREFIX + 'list', CSSConst.CONTEXTMENU_PREFIX + 'list-hovered'].join(' '));
        $(this._ul).appendTo(this._menu);
    };
    var EventType = [];

    ContextMenu.prototype._getCusMenuItem = function(name) {
        if (this._cusMenuItems && this._cusMenuItems.length > 0) {
            for (var i = 0; i < this._cusMenuItems.length; i++) {
                var menuItem = this._cusMenuItems[i];
                if (menuItem.name === name) {
                    return menuItem;
                }
            }
        }
        return null;
    };
    /**
     * TODO: Add comments.
     */

    ContextMenu.prototype.updateMenu = function() {
        var visiArray = [];

        $(this._ul).empty();

        for (var i = 0; i < this._cusMenuItems.length; i++) {
            var cusMenuItem = this._cusMenuItems[i];
            this._createMenuItemUI(cusMenuItem);
        }
    };

    ContextMenu.prototype._createMenuItemUI = function(cusMenuItem) {
        var text = cusMenuItem.text;
        var eventData = {};
        eventData.clickHandler = cusMenuItem.clickHandler;
        eventData.scope = cusMenuItem.scope;
        var enabled = cusMenuItem.enableValidator.apply(cusMenuItem.scope);
        var id = cusMenuItem.name;

        var li = document.createElement('li');
        var menuItem = document.createElement('div');

        $(li).addClass(CSSConst.CONTEXTMENU_PREFIX + "MnuItm");
        $(menuItem).addClass(CSSConst.CONTEXTMENU_PREFIX + "MnuItm");
        $(li).appendTo(this._ul);
        $(menuItem).appendTo(li);

        var Text = $("<div>", {
            "class" : CSSConst.CONTEXTMENU_PREFIX + "MnuItmTxt"
        });
        $(Text).appendTo(menuItem);
        $(Text).text(text);
        if (enabled) {
            $(Text).css("color", "black");
        } else {
            $(Text).css("color", "grey");
        }

        menuItem.id = id;
        var _this = this;

        if (enabled) {
            $(menuItem).click(function(event) {
                if (eventData.clickHandler) {
                    eventData.clickHandler.apply(eventData.scope);
                }

                _this.hide();
            });
        } else {
            $(menuItem).click(function(event) {
                _this.hide();
            });
        }
    };

    ContextMenu.prototype.isShown = function() {
        return this._shown;
    };
    /**
     * TODO: Add comments.
     */
    ContextMenu.prototype.show = function(options) {
        //create menu items ui according to current viz type
        this.updateMenu();
        //update position after update ui
        if (options && options.position) {
            var parentWidth = $(this._div).innerWidth();
            var menuWidth = $(this._menu).outerWidth();
            var left = options.position.pageX;
            if (parentWidth < menuWidth + left) {
                left = parentWidth - menuWidth;
            }
            var top = options.position.pageY;
            var parentHeight = $(this._div).parent().innerHeight();
            var menuHeight = $(this._menu).outerHeight();
            if (parentHeight < menuHeight + top) {
                top = parentHeight - menuHeight;
            }

            top += $(this._div).parent().offset().top;
            if(left < 0){
                left = $(this._div).parent().offset().left;
            }else{
                left += $(this._div).parent().offset().left;
            }
            $(this._menu).css({
                position : "fixed",
                left : left + "px",
                top : top + "px"
            });
        }

        $(this._menu).css('visibility', 'visible');
        this._shown = true;
        document.removeEventListener("mousedown", this._mousedownHandler, true);
        $(window).off('blur', this._mousedownHandler);
        document.addEventListener("mousedown", this._mousedownHandler, true);
        $(window).on('blur', this._mousedownHandler);
    };

    /**
     * handle Mousedown Event
     */
    ContextMenu.prototype._handleMousedownEvent = function(event) {
        var id = event.target.id;

        //Click on text of context menu item, re-try parent id since pointer-events is not supported by IE9,IE10
        if (OSUtil.isIE() && id == "") {
            id = event.target.parentNode.id;
        }
        var cusMenuItem = this._getCusMenuItem(id);
        if (cusMenuItem) {
            return;
        }

        this.hide();
    };

    /**
     * TODO: Add comments.
     */
    ContextMenu.prototype.hide = function() {
        $(this._menu).find('*').removeData().off();
        $(this._menu).css('visibility', 'hidden');
        this._shown = false;
    };

    return ContextMenu;
});

define('sap/viz/controls/chart/views/TitleEditor',[
// @formatter:off
'jquery', 'sap/viz/controls/common/constants/CSSConst', 'sap/viz/controls/common/utils/OOUtil', 'sap/viz/controls/common/utils/OSUtil', 'sap/viz/controls/common/events/Event', 'sap/viz/controls/common/VizControlBase', 'sap/viz/controls/common/helpers/Rectangle',
'sap/viz/controls/chart/views/TitleContextMenu','sap/viz/controls/common/managers/LangManager', 'sap/viz/controls/common/utils/ChartTypeUtil', 'sap/viz/controls/chart/Chart'],
// @formatter:on
function($, CSSConst, OOUtil, OSUtil, Event, VizControlBase, Rectangle, TitleContextMenu, LangManager, ChartTypeUtil, Chart) {

    var TitleEditor = function(div, uiconfig) {
        TitleEditor.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.TitleEditor";
        this._targetDiv = div;
        this._uiconfig = uiconfig;
        this._editing = false;

        this.createChildren();
    };

    OOUtil.extend(TitleEditor, VizControlBase);

    /**
     * TODO: Add comments.
     */
    TitleEditor.prototype.createChildren = function() {
        //create sub div

        var parent = this._targetDiv;

        this._div = $(document.createElement("DIV"));
        this._textInput = $('<input type="text" spellcheck="false"/>');
        this._textInput.addClass(CSSConst.CHART_PREFIX + 'title-text');
        this._textInput.attr('value', this._vizProxy().getTitleText());

        this._settingBtn = $(document.createElement("div"));
        this._settingBtn.addClass(CSSConst.CHART_PREFIX + 'title-button');
        var settingIcon$ = $(document.createElement("div")).appendTo(this._settingBtn);
        settingIcon$.addClass(CSSConst.COMMON_PREFIX + "UVBSharedSprite");
        settingIcon$.addClass(CSSConst.CHART_PREFIX + "setting-icon");
        this._settingBtn.hide();

        var menuItems = [{
            text : LangManager.get('VIZ_CHART_TITLE_CONTEXT_MENU_EDIT'),
            name : 'edit',
            clickHandler : this.enterEditMode,
            enableValidator : function() {
                return true;
            },
            scope : this
        }, {
            text : LangManager.get('VIZ_CHART_TITLE_CONTEXT_MENU_RESTORE'),
            name : 'restore',
            clickHandler : this.restore,
            enableValidator : function() {
                return this.edited();
            },
            scope : this
        }];
        this._contextMenu = new TitleContextMenu(parent, menuItems);

        this._div.append(this._textInput).append(this._settingBtn).appendTo(parent);

        var _this = this;

        document.addEventListener("mousedown", function(event) {
            _this._documentMouseDownHandler(event);
        }, true);

        this._settingBtn.click(function(event) {
            _this._popupContextMenu();
        });

        this._div.bind("mouseover", function() {
            _this.mouseOver();
        }).bind("mouseout", function() {
            _this.mouseOut();
        }).bind("dblclick", function() {
            _this.dblClick();
        }).bind('keypress', function(event) {
            // Response to 'Enter' key press.
            if (event.keyCode == 13) {
                _this._documentKeyPressHandler(event);
                event.preventDefault();
            }
        });
    };

    TitleEditor.prototype.editable = function() {
        return !this._vizProxy().isFakeChart();
    };

    TitleEditor.prototype.edited = function() {
        return this._vizProxy().isTitleCustomized();
    };

    TitleEditor.prototype.restore = function() {
        this._editing = false;
        this._vizProxy().setTitleMode(Chart.VIZ_TITLE_MODE.auto);
        this._vizProxy().restoreTitleText();
    };

    TitleEditor.prototype.enterEditMode = function() {
        if (this.editable()) {
            this._settingBtn.hide();
            this._editing = true;
            this._layoutTitleDiv();

            this._textInput.css({
                'display' : 'block'
            });
            this._textInput.val(this._vizProxy().getTitleText());
            this._textInput.focus().select();
        };
    };

    TitleEditor.prototype._layoutTitleDiv = function() {
        var area = this._vizProxy().getTitleZone();
        if (area && area.length > 0) {
            var scrollLeft = this._targetDiv.scrollLeft();
            var left = area[0][0], top = area[0][1], width = area[2][0] - area[0][0], height = area[2][1] - area[0][1];
            var style = "position:absolute;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;";
            if (this._editing) {
                var padding = 8;
                style += "left:" + scrollLeft + "px;top:" + (top - padding) + "px;width:100%;" + "height:" + (height + padding * 2) + "px;";
                this._div.addClass(CSSConst.CHART_PREFIX + 'title-edit');
            } else {
                style += "left:" + left + "px;top:" + top + "px;width:" + (width + 16) + "px;height:" + height + "px;";
                if (OSUtil.isIE()) {
                    style += "background-color:rgba(0,0,0,0)";
                }
                this._div.removeClass(CSSConst.CHART_PREFIX + 'title-edit');
            };
            this._div.attr('style', style);
        };
    };

    TitleEditor.prototype.init = function() {
        if(ChartTypeUtil.supportTitle(this._vizModel().type())) {
            this.size();
            this._show();
        } else {
            this._hide();
        }
    };

    TitleEditor.prototype._show = function() {
        this.show();
    };

    TitleEditor.prototype._hide = function() {
        this.hide();
    };

    TitleEditor.prototype.dblClick = function() {
        if (this.editable() && !this._editing) {
            this.enterEditMode();
        };
    };

    TitleEditor.prototype._popupContextMenu = function() {

        var area = this._vizProxy().getTitleZone();
        var left = area[0][0], top = area[0][1], width = area[2][0] - area[0][0], height = area[2][1] - area[0][1];
        var offset = 95;

        var pos = {
            pageX : left + width - offset - this._targetDiv.scrollLeft(),
            pageY : top + height - this._targetDiv.scrollTop()
        };

        this._contextMenu.show({
            position : pos
        });
    };

    TitleEditor.prototype.mouseOver = function() {
        var titleObj = this._vizProxy().getProperties().title||{visible:true};
        if (this.editable() && !this._editing && titleObj.visible) {
            this._layoutTitleDiv();
            this._settingBtn.show();
        };
    };

    TitleEditor.prototype.mouseOut = function() {
        if (this.editable() && !this._editing) {
            this._layoutTitleDiv();
            //to support IE9, use rgba(0,0,0,0) instead of transparent
            if (OSUtil.isIE()) {
                this._div.css({
                    'border-width' : '0px',
                    'background-color' : 'rgba(0,0,0,0)'
                });
            } else {
                this._div.css({
                    'border-width' : '0px',
                    'background-color' : 'transparent'
                });
            }
            this._textInput.css({
                'display' : 'none'
            });
            this._textInput.blur();
            if (!this._contextMenu.isShown()) {
                this._settingBtn.hide();
            }
        };
    };

    TitleEditor.prototype._documentMouseDownHandler = function(event) {
        if (this._editing && event.target !== this._textInput[0]) {
            this._commitTitleEdit();
            event.stopPropagation();
        }
        if (this._contextMenu.isShown() && event.target != this._settingBtn[0] && event.target.parentElement != this._settingBtn[0]) {
            this._settingBtn.hide();
        }
    };

    TitleEditor.prototype._documentKeyPressHandler = function(event) {
        if (this._editing && event.target === this._textInput[0]) {
            this._commitTitleEdit();
            event.stopPropagation();
        }
    };

    TitleEditor.prototype._onVizModelChanged = function(){
        this.init();
    };

    TitleEditor.prototype._commitTitleEdit = function() {
        this._editing = false;
        var titleText = this._textInput[0].value;
        if (titleText != this._vizProxy().getTitleText()) {
            this._vizProxy().setTitleMode(Chart.VIZ_TITLE_MODE.manual);
            this._vizProxy().setTitleText(titleText);
        }
        this.mouseOut();
    };

    TitleEditor.prototype.size = function() {
        this._layoutTitleDiv();
        if (this._contextMenu.isShown()) {
            this._popupContextMenu();
        }
    };
    
    TitleEditor.prototype.load = function(){
        this.init();
    };
    
    return TitleEditor;
});


define('sap/viz/controls/playcontrol/PlayControlEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var PlayControlEvent = function(type, target, data) {
        PlayControlEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.playcontrol.PlayControlEvent";
    };
    OOUtil.extend(PlayControlEvent, Event);

    /**
     * type: 'valueChanged',
     * data: 'value',
     */
    PlayControlEvent.SLICE_DIMENSION_CHANGED = "sliceDimensionChanged";
    
    PlayControlEvent.UPDATE_CHART_COMPLETE = "updateChartComplete";
    
    return PlayControlEvent;
});

define('sap/viz/controls/playcontrol/PlayControl',
        [ "jquery", "sap/viz/controls/common/VizControlBase", "sap/viz/controls/common/config/GlobalConfig",
                "sap/viz/controls/common/constants/CSSConst", "sap/viz/controls/common/utils/OOUtil",
                "sap/viz/controls/playcontrol/PlayControlEvent", 'sap/viz/controls/common/feeds/AnalysisObject',
                "sap/viz/controls/common/utils/Utils", "sap/viz/controls/common/feeds/FeedItemType", "sap/viz/controls/common/constants/ChartConst" ],
        function($, VizControlBase, GlobalConfig, CSSConst, OOUtil, PlayControlEvent, AnalysisObject, Utils,
                FeedItemType, ChartConst) {

            var PLAY_STATE_STOP = 0, PLAY_STATE_INPROGRESS = 1, PLAY_STATE_PAUSED = 2, DEFAULT_STEP = 1, PLAY_TIMER_INTERVAL = 1000, PAUSED_ICON = "/controls/playcontrol/assets/paused.svg", PROGRESS_ICON = "/controls/playcontrol/assets/inprogress.svg", LABEL_DEFAULT_HEIGHT = 48;

            var PlayTimer = function(player) {
                this._player = player;
                this._t = null;
                this._lastUpdateTstmp = 0;
            };
            
            PlayTimer.prototype._playerUpdateHandler = function() {
                if(this._player ) {
                    var tstmp = (new Date()).getTime();
                    if (tstmp - this._lastUpdateTstmp >= PLAY_TIMER_INTERVAL) {
                        this._player._progressing();
                        this._lastUpdateTstmp = tstmp;
                    } else {
                        if (!this._t) {
                            this._t = setTimeout($.proxy(function(){
                                clearTimeout(this._t);
                                this._t = null;
                                this._playerUpdateHandler();
                            }, this), tstmp - this._lastUpdateTstmp);
                        }
                    }
                }
            };

            PlayTimer.prototype.start = function() {
                this._player._start();
                if (!this._player.hasEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this)) {
                    this._player.addEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this);
                }
                this._playerUpdateHandler();
            };

            PlayTimer.prototype.pause = function() {
                if (this._t) {
                    clearTimeout(this._t);
                    this._t = null;
                }
                if (this._player.hasEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this)) {
                    this._player.removeEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this);
                }
                this._player._pause();
            };

            PlayTimer.prototype.stop = function() {
                if (this._t) {
                    clearTimeout(this._t);
                    this._t = null;
                }
                if(this._player.hasEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this)) {
                    this._player.removeEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this);
                }
                this._player._stop();
            };

            /**
             * 
             * UI5 dependencies: sap.ui.commons
             */
            var PlayControl = function(div/* HTMLDivElement */, uiConfig/* JSON */) {
                PlayControl.superclass.constructor.apply(this, arguments);
                this.__className = "sap.viz.controls.playcontrol.PlayControl";
                sap.viz.base.utils.log.Analyzer.pnrProfiling("VizControls:create_playcontrol");

                this._div = div;
                this._body = null;
                this._slider = null;
                this._playBtn = null;
                this._slicedData = [];
                this._labelDiv = null;
                this._timer = new PlayTimer(this);
                this._state = PLAY_STATE_STOP;
                this._currentVal = 0;
                this._step = DEFAULT_STEP;
                this._visible = false;

                this._chartFeedings = [];
                this._createChildren();
                
                this._chartUpdateCompleteHandler = $.proxy(function() {
                    this._dispatchEvent(new PlayControlEvent(PlayControlEvent.UPDATE_CHART_COMPLETE, this));
                }, this);
                sap.viz.base.utils.log.Analyzer.pnrProfiling("VizControls:create_playcontrol");
            };

            OOUtil.extend(PlayControl, VizControlBase);

            PlayControl.prototype.sliceDimension = function(analysisObject) {
                
                if(arguments.length > 0) {
                    this._vizModel().playerField(analysisObject);
                    return this;
                } else {
                    return this._vizModel().playerField();
                }
            };

            PlayControl.prototype.slicedData = function(slicedData) {
                if (arguments.length > 0) {
                    this._slicedData = slicedData;
                    this._resetControls();
                    this._resetChartFrameDataScale();
                    this._timer.stop();
                } else {
                    return this._slicedData;
                }
            };

            PlayControl.prototype._createChildren = function() {
                var _this = this;
                var config = this._uiConfig;
                if (!this._body) {
                    this._body = $(document.createElement("div")).appendTo(this._div);
                    this._body.addClass(CSSConst.PLAYCTRL_PREFIX + "body");
                }

                if (!this._playBtnDiv) {
                    this._playBtnDiv = $(document.createElement("div")).appendTo(this._body);
                    this._playBtnDiv.addClass(CSSConst.PLAYCTRL_PREFIX + "playbtn");
                    this._playBtn = new sap.ui.commons.Button( {
                        icon : GlobalConfig.defaultAssetsRoot() + PAUSED_ICON,
                        iconDesityAware : true,
                        press : $.proxy(_this._btnPress, this)
                    });

                    this._playBtn.addStyleClass(CSSConst.PLAYCTRL_PREFIX + "playbtn");
                    this._playBtn.placeAt(this._playBtnDiv);
                }

                if (!this._sliderDiv) {
                    this._sliderDiv = $(document.createElement("div")).appendTo(this._body);
                    this._sliderDiv.addClass(CSSConst.PLAYCTRL_PREFIX + "slider");
                    this._slider = new sap.ui.commons.Slider( {
                        editable : false,
                        min : 0,
                        max : 1,
                        smallStepWidth : 1,
                        liveChange : $.proxy(this._sliderValueChange, this)
                    });

                    this._slider.placeAt(this._sliderDiv);
                }

                if (!this._labelDiv) {
                    this._labelDiv = $(document.createElement("div")).appendTo(this._body);
                    this._labelDiv.addClass(CSSConst.PLAYCTRL_PREFIX + "label").text("text");
                }

                this._resetControls();

                // //support drop filter
                // $(this._div).droppable({
                // tolerance : "pointer",
                // accept : "." + DragManager.DRAGGABLE_CLASS_ANALYSIS,
                // over : $.proxy(this._dragOver, this),
                // out : $.proxy(this._dragOut, this),
                // drop : $.proxy(this._drop, this)
                // });
            };

            PlayControl.prototype._progressing = function() {
                this._currentVal += this._step;
                if (this._currentVal > this._slider.getMax()) {
                    this._timer.stop();
                    return;
                }
                this._updateControls();
                this._updateChartData();
            };

            PlayControl.prototype._start = function() {
                this._state = PLAY_STATE_INPROGRESS;
                this._updateControls();
                // disable interaction for geobubble if playing
                this._updateChartScale();
                this._enableChartInteraction(false);
            };

            PlayControl.prototype._stop = function() {
                this._state = PLAY_STATE_STOP;
                this._currentVal = 0;
                this._updateControls();
                this._updateChartData();
                // re-enable interaction for geobubble if playing
                this._enableChartInteraction(true);
            };

            PlayControl.prototype._pause = function() {
                this._state = PLAY_STATE_PAUSED;
                this._updateControls();
                // re-enable interaction for geobubble if playing
                this._enableChartInteraction(true);
            };

            PlayControl.prototype._updateChartData = function() {
                if (this._slicedData && this._slicedData.slices
                        && this._slicedData.slices[this._currentVal] !== undefined) {
                    this._vizProxy().SetDataset(this._slicedData.slices[this._currentVal].data);
                }
            };

            PlayControl.prototype._updateChartScale = function() {
                // set the scale for geobubble because it could not remember
                // the current scale
                if (this._vizModel().type() === ChartConst.TYPE_GEO_BUBBLE) {
                    var props = this._vizProxy().getProperties();
                    if (props && props.geoContainer) {
                        this._vizProxy().updateProperties( {
                            properties : {
                                geoContainer : {
                                    scale : props.geoContainer.scale,
                                    center : props.geoContainer.center
                                }
                            }
                        });
                    }
                }
            };

            PlayControl.prototype._resetChartFixScale = function() {
                // reset geobubble fixscale settings
                if (this._vizModel().type() === ChartConst.TYPE_GEO_BUBBLE) {
                    this._vizProxy().updateProperties( {
                        properties : {
                            geoContainer : {
                                isFixedScale : this.sliceDimension() != null,
                                scale : null,
                                center : []
                            }
                        }
                    });
                }
            };

            PlayControl.prototype._resetChartFrameDataScale = function() {
                // util function to calculate the value range for specific feed
                // definition
                function calcFeedsValueRange(feedingItems, measuresRange) {
                    var i, measureId, min = Number.MAX_VALUE, max = Number.MIN_VALUE, rangeCalced = false;
                    if (feedingItems && measuresRange) {
                        for (i = 0; i < feedingItems.length; i++) {
                            measureId = feedingItems[i].name();
                            if (measuresRange[measureId]) {
                                min = Math.min(measuresRange[measureId][0], min);
                                max = Math.max(measuresRange[measureId][1], max);
                                rangeCalced = true;
                            }
                        }
                    }
                    // use [0,0] to reset the value range
                    return rangeCalced ? [min, max] : [0, 0];
                }

                // util function to update value to property indicated by the
                // string path (e.g. "a.b.c") of specific object
                function updatePropValue(obj, path, value) {
                    var arr = path.split("."), j, level;
                    for (j = 0, level = obj; j < arr.length; j++) {
                        if (j == arr.length - 1) {
                            level[arr[j]] = value;
                        } else {
                            level[arr[j]] = level[arr[j]] || {};
                            level = level[arr[j]];
                        }
                    }
                }

                var updateObj = {}, measureFeeds = [], chartType = this._vizModel().type(), manifest = sap.viz.api.manifest.Viz
                        .get(chartType), measuresInfo = {}, feedId, feedings, feedRange, feedsValueRange = {},
                        dataScale = manifest && manifest[0] ? manifest[0].dataScale : null;

                if (!dataScale) {
                    // return if there's no datascale settings
                    return;
                }

                if (this._slicedData && Utils.isArray(this._slicedData.measuresInfo)) {
                    this._slicedData.measuresInfo.forEach(function(item) {
                        measuresInfo[item.name] = item.range;
                    });
                }
                if (this._chartFeedings) {
                    // filter out the dimension
                    measureFeeds = this._chartFeedings.filter(function(item) {
                        return item && item.type() === FeedItemType.MEASURE;
                    });
                    // calculating min and max value for all the feeds that has
                    // feeding
                    if (measureFeeds.length > 0) {
                        measureFeeds.forEach(function(item) {
                            feedsValueRange[item.id()] = calcFeedsValueRange(item.values(), measuresInfo)
                        });
                    }
                }

                for (feedId in feedsValueRange) {
                    if (feedsValueRange.hasOwnProperty(feedId)) {
                        feedRange = feedsValueRange[feedId];
                    }
                    if (dataScale[feedId] && Utils.isArray(dataScale[feedId].minValue)) {
                        dataScale[feedId].minValue.forEach(function(propPath) {
                            updatePropValue(updateObj, propPath, feedRange[0]);
                        });
                    }
                    if (dataScale[feedId] && Utils.isArray(dataScale[feedId].maxValue)) {
                        dataScale[feedId].maxValue.forEach(function(propPath) {
                            updatePropValue(updateObj, propPath, feedRange[1]);
                        });
                    }
                }
                // update the properties
                this._vizProxy().updateProperties( {
                    properties : updateObj
                });
            };

            PlayControl.prototype._enableChartInteraction = function(enable) {
                if (this._vizModel().type() === ChartConst.TYPE_GEO_BUBBLE) {
                    this._vizProxy().updateProperties( {
                        properties : {
                            geoController : {
                                disableInteraction : !enable
                            }
                        }
                    });
                }
            };

            PlayControl.prototype._updateControls = function() {
                switch (this._state) {
                case PLAY_STATE_STOP:
                    this._playBtn.setIcon(GlobalConfig.defaultAssetsRoot() + PAUSED_ICON);
                    break;
                case PLAY_STATE_INPROGRESS:
                    this._playBtn.setIcon(GlobalConfig.defaultAssetsRoot() + PROGRESS_ICON);
                    break;
                case PLAY_STATE_PAUSED:
                    this._playBtn.setIcon(GlobalConfig.defaultAssetsRoot() + PAUSED_ICON);
                    break;
                }
                this._slider.setValue(this._currentVal);
                if (this._slicedData && this._slicedData.slices
                        && this._slicedData.slices[this._currentVal] !== undefined) {
                    this._labelDiv.text(this._slicedData.slices[this._currentVal].dimensionMember);
                    this._alignLabelWithSliderThumb();
                }
            };

            PlayControl.prototype._alignLabelWithSliderThumb = function() {
                // remove the explicit width first to let the browser calc the width according to the text
                this._labelDiv.width("auto");
                // layout position of label
                var sliderLeft = this._sliderDiv.offset().left, sliderWidth = this._sliderDiv.width(), labelWidth = Math.min(sliderWidth, this._labelDiv.width()),
                    thumbLeft = $(".sapUiSliGrip", this._sliderDiv).offset() ? $(".sapUiSliGrip", this._sliderDiv).offset().left : 0;

                this._labelDiv.width(labelWidth + 1);//add 1 pixel for ie ellipsis
                this._labelDiv.offset( {
                    left : labelWidth + thumbLeft < sliderLeft + sliderWidth ? thumbLeft : sliderLeft + sliderWidth
                            - labelWidth
                });
            };

            PlayControl.prototype._resetControls = function() {
                var hasData = !!(this._slicedData && this._slicedData.slices && this._slicedData.slices.length > 0);
                this._playBtn.setEnabled(hasData);
                this._slider.setEditable(hasData);
                this._slider.setEnabled(hasData);
                this._slider.setMin(0);
                this._slider.setMax(hasData ? this._slicedData.slices.length - 1 : 1);
                this._updateControls();
                this._updateLabelVisiblity();
            };

            PlayControl.prototype._btnPress = function() {
                // button press
                switch (this._state) {
                case PLAY_STATE_STOP:
                case PLAY_STATE_PAUSED:
                    this._timer.start();
                    break;
                case PLAY_STATE_INPROGRESS:
                    this._timer.pause();
                    break;
                }
            };

            PlayControl.prototype._onConnect = function(e) {
                PlayControl.superclass._onConnect.apply(this, arguments);
                // get feedingItems and sliceDimension when connect
                this._chartFeedings = this._vizModel().feedingItems();
                this._sliceDimensionChanged();
                this._vizProxy().on("initialized.playcontrol", this._chartUpdateCompleteHandler);
            };

            PlayControl.prototype._onVizModelChanged = function(e) {
                if (e.data.feedingItemsChanged) {
                    this._chartFeedings = this._vizModel().feedingItems();
                    this.slicedData( []);
                }
                if (e.data.sliceDimensionChanged) {
                   this._sliceDimensionChanged();
                }
            };

            PlayControl.prototype._sliderValueChange = function() {
                // button press
                this._currentVal = this._slider.getValue();
                this._updateControls();
                this._updateChartScale();
                this._updateChartData();
            };

            PlayControl.prototype._sliceDimensionChanged = function() {
                // reset sliceData
                this.slicedData( []);
                this._resetChartFixScale();
                // dispatch event
                var args = {
                    "sliceDimension" : this.sliceDimension()
                };
                this._dispatchEvent(new PlayControlEvent(PlayControlEvent.SLICE_DIMENSION_CHANGED, this, args));
            };

            PlayControl.prototype.validateSize = function(w, h) {
                var btnWidth = 0, btnHeight = 0, sliderWidth, bodyheight = $(this._body).height();
                $(this._body).css( {
                    width : w
                });
                if (this._playBtnDiv) {
                    btnWidth = this._playBtnDiv.outerWidth();
                    btnHeight = this._playBtnDiv.outerHeight();
                    this._playBtnDiv.css( {
                        top : bodyheight / 2 - btnHeight / 2 + "px",
                        left : 0 + "px",
                        position : "absolute"
                    })
                }
                if (this._sliderDiv) {
                    sliderWidth = w - btnWidth;
                    this._slider.setWidth(sliderWidth + "px");
                    sliderHeight = this._slider.getHeight();
                    this._sliderDiv.css( {
                        top : bodyheight / 2 + "px",
                        left : btnWidth + "px",
                        position : "absolute"
                    })
                }
                if (this._labelDiv) {
                    // use timeout ot layout the label after the slider thumb
                    // actually updated
                    setTimeout($.proxy(function(){
                        this._alignLabelWithSliderThumb();
                    }, this), 0)
                }
                if(this._slider.oGrip && this._slider.oGrip.title){
                    //currently,as the mouseover events is UI5 internal 
                    //to make the animation slider work properly,the slider title value is forbidden when mouseover
                    //so use the follow workaround to make it
                    //details:BITSDC4-1311
                    $(".viz-controls-playcontrol-slider #__slider0-grip").mouseover(function(event){
                        $('#__slider0-grip').attr('title'," ");
                    });
                }
            };

            PlayControl.prototype.visible = function(visible) {
                PlayControl.superclass.visible.apply(this, arguments);
                this._visible = visible;
                this._updateLabelVisiblity();
            };

            PlayControl.prototype._updateLabelVisiblity = function() {
                var hasData = !!(this._slicedData && this._slicedData.slices && this._slicedData.slices.length > 0);
                this._labelDiv.css("visibility", hasData && this._visible ? "visible" : "hidden");
            };

            /** @param {JSON} options
            *      optional
            *      supported options: {emptyDataset : false}
            *
            */
            PlayControl.prototype.save = function(options) {
                var slicedData = {}, i = 0;
                if (options && options.emptyDataset === true) {
                    slicedData.measuresInfo = [];
                    slicedData.slices = [];
                } else if (this._slicedData) {
                    slicedData.measuresInfo = this._slicedData.measuresInfo;
                    if (Utils.isArray(this._slicedData.slices)) {
                        slicedData.slices = [];
                        for (; i < this._slicedData.slices.length; i++) {
                            slicedData.slices.push( {
                                data : this._slicedData.slices[i].data.toJSON(),
                                dimensionMember : this._slicedData.slices[i].dimensionMember
                            });
                        }
                    }
                }
                return {
                    sliceDimension : AnalysisObject.toJSON(this.sliceDimension()),
                    slicedData : slicedData,
                    value : this._currentVal
                };
            };

            PlayControl.prototype.load = function(valueJSON) {
                var slicedData = valueJSON.slicedData, hasData = slicedData && Utils.isArray(slicedData.slices)
                        && slicedData.slices.length > 0;
                this.sliceDimension(AnalysisObject.fromJSON(valueJSON.sliceDimension));
                if (hasData) {
                    slicedData.slices = slicedData.slices.map(function(item) {
                        return {
                            dimensionMember : item.dimensionMember,
                            data : sap.viz.api.data.CrosstableDataset.fromJSON(item.data)
                        }
                    });
                }
                this._slicedData = slicedData;
                this._currentVal = hasData ? Math.min(valueJSON.value, slicedData.slices.length) : 0;
                this._resetControls();
                this._resetChartFrameDataScale();
                this._resetChartFixScale();
            };

            PlayControl.prototype.destroy = function() {
                // console.log('playcontrol destroyed ' + this._logId);
                this._vizProxy().off("initialized.playcontrol", this._chartUpdateCompleteHandler);
                PlayControl.superclass.destroy.apply(this, arguments);
                if (this._playBtn) {
                    this._playBtn.destroy(true);
                }
                if (this._slider) {
                    this._slider.destroy(true);
                }
                // unbind the mouseover event
                $(".viz-controls-playcontrol-slider #__slider0-grip").unbind('mouseover');                     
            };

            return PlayControl;
        });

/**
 * Class VizFrame control
 */
// @formatter:off
define('sap/viz/controls/frame/VizFrame',[
    'jquery',
    'sap/viz/controls/common/VizControlHost',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/frame/VizFrameConfig',
    'sap/viz/controls/frame/VizFrameEvent',
    'sap/viz/controls/annotation/Annotation',
    'sap/viz/controls/annotation/AnnotationEvent',
    'sap/viz/controls/annotationcontrol/AnnotationControl',
    'sap/viz/controls/annotationcontrol/AnnotationControlConfig',
    'sap/viz/controls/annotationcontrol/AnnotationControlEvent',
    'sap/viz/controls/frame/chartEditor/ChartEditorPlugin',
    'sap/viz/controls/chart/Chart',
    'sap/viz/controls/contextmenu/ContextMenu',
    'sap/viz/controls/contextmenu/ContextMenuEvent',
    'sap/viz/controls/frame/menu/CommentMenuItem',
    'sap/viz/controls/custombutton/CustomButton',
    'sap/viz/controls/custombutton/CustomButtonEvent',
    'sap/viz/controls/filterbar0/FilterBar',
    'sap/viz/controls/filterbar0/FilterBarEvent',
    'sap/viz/controls/frame/views/FilterMenu',
    'sap/viz/controls/frame/views/FilterMenuEvent',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/TitleEditor',
    'sap/viz/controls/playcontrol/PlayControl',
    'sap/viz/controls/playcontrol/PlayControlEvent',
    'sap/viz/controls/runtime/RuntimeManager',
    'sap/viz/controls/runtime/VizModel',
    'sap/viz/controls/Version',
    'sap/viz/controls/annotation/AnnotationConfig',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/filterbar0/FilterBarConfig',
    'sap/viz/controls/contextmenu/ContextMenuConfig',
    'sap/viz/controls/custombutton/CustomButtonConfig',
    'sap/viz/controls/common/utils/Serialization'
    ],
function($, VizControlHost, CSSConst, ChartConst, EventTypeConst, Event, FeedEvent, FeedItem, FeedUtils,
    ChartTypeUtil, OOUtil, Utils,AbstractFilter, FilterHelper, LangManager, VizFrameConfig, VizFrameEvent, Annotation,
    AnnotationEvent, AnnotationControl, AnnotationControlConfig, AnnotationControlEvent, ChartEditorPlugin, Chart, ContextMenu, ContextMenuEvent, CommentMenuItem, CustomButton,
    CustomButtonEvent, FilterBar,FilterBarEvent, FilterMenu, FilterMenuEvent, ChartEvent, TitleEditor, PlayControl,
    PlayControlEvent, RuntimeManager, VizModel, Version, AnnotationConfig, ChartConfig, FilterBarConfig, ContextMenuConfig, CustomButtonConfig, Serialization) {
// @formatter:on

    /**
     * The VizFrame class is a composite control of following sub controls of Viz Container.<br/>
     * 1. Chart control: Host a CVOM visualization(i.e. Line Chart, Column Chart, Area Chart, Map) and visualization
     * extension.<br/><br/>
     *
     * 2. FilterBar control: User can add filter to the FilterBar by dragging and dropping a object into the FilterBar
     * area or clicking filter menu on selected visualization shapes.<br/><br/>
     *
     * 3. Context menu control: User can right click on the visualization or click the setting menu to display the
     * context menu.<br/><br/>
     *
     * 4. Fullscreen button/toggle fullscreen button: Click the fullscreen button/toggle fullscreen button to switch the
     * VizFrame between fullscreen and not fullscreen. Application should handle the resize logic when get the
     * "enterFullScreen"/"exitFullScreen" event.<br/><br/>
     *
     * 5. Morphing effect: It is a special effect in motion shapes and animations that changes (or morphs) one shape into
     * another through a seamless transition. User can enable/disable the morphing via API
     * VizFrame.enableMorphing(true/false), and the morphing is enabled by default.<br/><br/>
     *
     * To achieve interoperability with prior CVOM based application, Viz Container provides a set of CVOM API wrapper.
     * Please refer to the CVOM API for detail.<br/>
     * <pre>
     * -vizData();
     * -vizCss();
     * -vizProperties();
     * -vizOn();
     * -vizOff();
     * -vizSelection();
     * -vizFeedingZone();
     * </pre>
     *
     * UI5 dependencies: sap.ui.commons (when enablePlayControl is true)
     * 
     * @class sap.viz.controls.frame.VizFrame
     * @param {HTMLElement} div
     *                      The dom element to host the VizFrame.
     * @param {JSON} [uiConfig]
     *               UIConfig for VizFrame.
     * @extends sap.viz.controls.common.VizControlHost
     */
    var VizFrame = function VizFrame(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        VizFrame.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.VizFrame";

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_vizframe_control');

        /** container of vizFrame */
        this._div = div;
        /** default config */
        this._uiConfig = uiConfig ? uiConfig : VizFrameConfig.instance();

        if (this._uiConfig.enablePlayControl) {
            try {
                jQuery.sap.require('sap.ui.commons.Button');
                jQuery.sap.require('sap.ui.commons.Slider');
            } catch(e) {
                throw Utils.substitute(LangManager.get('VIZ_COMMON_DEPENDENCY_ERROR_WITH_UI_CONFIG'), 'sap.ui.commons', 'VizFrame', '{enablePlayControl: true}');
            }
        }
        /** layout of vizFrame */
        this._layout = null;
        /** filterBar */
        this._filterBar = null;
        /** chart */
        this._chart = null;
        /** Chart Editor */
        this._chartEditorPlugin = new ChartEditorPlugin(this._div, this, this._uiConfig);
        /** context menu */
        this._contextMenu = null;
        /** popupLayout */
        this._popupLayout = null;
        /** annotation */
        this._annotation = null;
        /** setting button */
        this._settingBtn = null;
        /** fullscreen button */
        this._fullScreenBtn = null;

        this._titleEditor = null;

        this._playControl = null;
        //create Chart,Popup Layer,Context Menu,Annotation
        this._createChildren();
        // @formatter:off
        this._addChild(this._chart, ['enableMorphing',
                                     'feedAnalysisObjects'],
                                    [ChartEvent.CHART_CHANGED,
                                     ChartEvent.CHART_CHANGING,
                                     ChartEvent.VIZTYPE_CHANGED,
                                     FeedEvent.FEEDS_CHANGED]);
        // @formatter:on
        // call this._addChild to expose child's function and events
        if(this._filterBar){
            this._addChild(this._filterBar, ['analysisObjectsForPicker'], [EventTypeConst.REQUEST_FILTER_VALUES]);
        }
        if(this._annotationControl){
            this._addChild(this._annotationControl, [AnnotationControlEvent.ANNOTATION_SELECTED_EVENT, AnnotationControlEvent.ANNOTATION_LAYOUTED_EVENT]);
        }
        this._addChild(this._annotation, [], []);
        if (this._contextMenu && Utils.isFunction(this._contextMenu.getEventNames)) {
            this._addChild(this._contextMenu, [], this._contextMenu.getEventNames());
        }
        this._addChild(this._fullScreenBtn, [], [VizFrameEvent.ENTER_FULL_SCREEN,
                                                 VizFrameEvent.EXIT_FULL_SCREEN]);
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_vizframe_control');
    };
    // API document: events
    /**
     * Dispatches "vizTypeChanged" event when visualization type changes by UI operation.
     * <pre>
     * type: "vizTypeChanged"
     * handler: function({
     *                    type: "vizTypeChanged",
     *                    token: "<uuid>",
     *                    data: {
     *                      type : "<vizType>"
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#vizTypeChanged
     * @param {String} evt.type "vizTypeChanged".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * var vizTypeChangedHandler = function(event) {
     *     console.log("vizTypeChanged event from vizFrame( type: '" + e.data.type + "' ).");
     * };
     * vizFrame.addEventListener('vizTypeChanged', vizTypeChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change FeedItems on feeding panel<br/>
     * Application should listen to "feedsChanged" event to get the corresponding data and set it back to VizFrame to
     * to update the visualization with the new data.
     *
     * <pre>
     * type: "feedsChanged"
     * handler: function({
     *                    type: "feedsChanged",
     *                    feeds: [{feedId, binding}]
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#feedsChanged
     * @param {String} evt.type "feedsChanged".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * var feedsChangedHandler = function(event) {
     *     // an array of FeedItem objects
     *     var feedItems = event.data.feeds;
     *
     *     // Application could restore to initial value, if there is no feeding
     *     if (feedItems || feedItems.length === 0) {
     *         var dataSet = new sap.viz.api.data.CrosstableDataset();
     *         dataSet.data(null);
     *         vizFrame.vizUpdate({
     *             data : null
     *         });
     *         return;
     *     }
     *     // Get filters if the application support it
     *     var filterItems = vizFrame.filterItems();
     *
     *     // Application should handle some logic to get new data based on the feedItems and filterItems
     *     var newFeedData; // You can get data from database, data service, local data, etc.
     *
     *     // update vizFrame
     *     var updateVizFrame = function(feedData) {
     *         var dataSet = new sap.viz.api.data.CrosstableDataset();
     *         dataSet.data(feedData);
     *
     *         vizFrame.vizUpdate({
     *             'data' : dataSet
     *         });
     *     };
     *     upateVizFrame(newFeedData);
     * };
     * vizFrame.addEventListener('feedsChanged', feedsChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "filtersChanged" event when user clicks the Filter menu if user enable the built-in FilterBar in VizFrame.
     * Application could listen to this event to handle the data filter logic and set the new data back to VizFrame to
     * update the visualization.
     * <pre>
     * type: "filtersChanged"
     * handler: function({
     *                    type: "filtersChanged",
     *                    data: [filterItems]
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#filtersChanged
     * @param {String} evt.type    "filtersChanged".
     * @param {Array} evt.data
     *                An array of filter items.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * // update vizFrame
     * var updateVizFrame = function(feedData) {
     *     var dataSet = new sap.viz.api.data.CrosstableDataset();
     *     dataSet.data(feedData);
     *     appView.vizFrame().vizUpdate({
     *         data : dataSet
     *     });
     * };
     * // Handle filter menu event and update vizframe with new data
     * var filterHandler = function(event) {
     *     var filters = event.data;
     *     var feeds = vizFrame().feeds();
     *     // Some logic to get new data based on the feedItems and filterItems
     *     var newFeedData;
     *
     *     updateVizFrame(newFeedData);
     * };
     *
     * // listen to 'filtersChanged' event
     * vizFrame.addEventListener('filtersChanged', filterHandler);
     * </pre>
     */

    /**
     * Dispatches "enterFullScreen" event when click the full screen button. The application should handle the
     * VizFrame resize logic via VizFrame.size() API.
     *
     * <pre>
     * type: "enterFullScreen"
     * handler: function({
     *                    type: "enterFullScreen",
     *                    data: null
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#enterFullScreen
     * @param {String} evt.type "enterFullScreen".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var originalSize = vizFrame.size();
     * var fullScreenSize = {
     *     'height' : $(window).height(),
     *     'width' : $(window).width()
     * };
     *
     * // listen to 'enterFullScreen' event and resize the VizFrame
     * vizFrame.addEventListener('enterFullScreen', function(event) {
     *     vizFrame.size(fullScreenSize);
     * });
     * </pre>
     */

    /**
     * Dispatches "exitFullScreen" event when click the toggle full screen button. The application should handle the
     * VizFrame resize logic via VizFrame.size() API.
     *
     * <pre>
     * type: "exitFullScreen"
     * handler: function({
     *                    type: "exitFullScreen",
     *                    data: null
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#exitFullScreen
     * @param {String} evt.type "exitFullScreen".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var originalSize = vizFrame.size();
     * var fullScreenSize = {
     *     'height' : $(window).height(),
     *     'width' : $(window).width()
     * };
     *
     * // listen to 'exitFullScreen' event and resize the VizFrame
     * vizFrame.addEventListener('exitFullScreen', function(event) {
     *     vizFrame.size(originalSize);
     * });
     * </pre>
     */

    /**
     * Dispatches the "requestFilterValues" event when double click the Filter object in FilterBar. The application
     * may need to pop up a dialog to choose the filter values and call event.data.validate(true) after change.
     *
     * <pre>
     * type: "requestFilterValues"
     * handler: function({
     *                    type: "requestFilterValues",
     *                    data: {
     *                         bounds, // an object contains left, top, width, height
     *                         filterName,
     *                         analysisObjectId,
     *                         filterItem, // an object of ValueFilter, DateRangeFilter or NumericRangeFilter
     *                         validate // function to validate filter item.
     *                     }
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#requestFilterValues
     * @param {String} evt.type "requestFilterValues".
     * @param {Object} evt.data
     *      It contains filterName, analysisObjectId and filterItem properties. User need to call validate(true) method
     * if changed filterItem or call validate(false) if no change happens.
     *
     * @example <caption>Sample Code:</caption>
     * <pre>
     * // listen to 'requestFilterValues' event
     * vizFrame.addEventListener('requestFilterValues', function(event) {
     *     var data = event.data;
     *     // Get current filter information
     *     var filterName = data.filterName;
     *     var analysisObjectId = data.analysisObjectId;
     *     var filterItem = data.filterItem;
     *
     *     // 1. Application may pop up some filter value choose dialog.
     *     // 2. User input some new filter values.
     *     var values = 'USA,China';
     *     switch(filterItem.getType()) {
     *         case AbstractFilter.VALUE_TYPE:// display as 'USA,China'
     *             values = values.length>0 ? values.split(',') : [];
     *             var filterValues = [];
     *             for(var i = 0, length = values.length; i < length; i++) {
     *                 filterValues.push({'value':values[i]}); // may contain more information. {'value': 'USA',
     * 'key':'001'}
     *             }
     *             filterItem.updateValues(filterValues);
     *             break;
     *         case AbstractFilter.NUMERIC_RANGE_TYPE:// display as '10 - 20'
     *         case AbstractFilter.DATE_RANGE_TYPE:// display as '2000-12-1 - 2013-12-1'
     *             values = values.length>0 ? values.split(' - ') : [];
     *             if(values.length == 2) {
     *                 filterItem.setMin(values[0]);
     *                 filterItem.setMax(values[1]);
     *             }
     *             break;
     *     }
     *
     *     // 3. Validate the filter item
     *     data.validate(true);
     * });
     * </pre>
     */

    /**
     * Dispatches "vizDefinitionChanged" event when viz definition is changed by user interaction or API, for example,
     * <pre>
     * 1. Change chart type.
     * 2. Feed new data.
     * 3. Edit title.
     * 4. Show/hide visualization legend.
     * 5. Change direction(switch between horizontal and vertical) for some chart.
     * 6. Add/remove/update filter.
     * 7. Edit property.
     * 8. etc.
     * </pre>
     *
     * Application may listen to this event to inform user to save the document.
     *
     * <pre>
     * type: "vizDefinitionChanged"
     * handler: function({
     *                    type: "vizDefinitionChanged",
     *                    data: {
     *                         commentChanged,
     *                         vizTypeChanged,
     *                         vizPropertiesChanged,
     *                         vizCssChanged,
     *                         feedingItemsChanged,
     *                         filterChanged
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#vizDefinitionChanged
     * @param {String} evt.type "vizDefinitionChanged".
     * @param {Object} evt.data
     *                 Identify the changed perperty.
     */

    OOUtil.extend(VizFrame, VizControlHost);

    /**
     * Get/Set available AnalysisObjects for object picker popup UI,
     * VizFrame cannot call this function if the flag "enableFilterBar" is false.
     * @deprecated
     * @method sap.viz.controls.frame.VizFrame.prototype.analysisObjectsForPicker
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     * @return {Array<sap.viz.controls.common.feeds.AnalysisObject>}
     * @example <caption>Sample code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * //Set analysisObjects, please refer to FeedItem for details.
     * var newAnalysisObjects = [
     *     new AnalysisObject("M1", "M1", "measure", "number"),
     *     new AnalysisObject("D1", "D1", "dimension", "string"),
     *     new AnalysisObject("D2", "D2", "dimension", "string")
     * ];
     * vizFrame.analysisObjectsForPicker(newAnalysisObjects);
     * //Get analysisObjects
     * var currentAnalysisObjects = vizFrame.analysisObjectsForPicker();
     * </pre>
     */

    VizFrame.HEADER_HEIGHT = 40;

    /**
     * Set/Get vizType.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizType
     * @param {String} vizType
     * @return {String}
     */
    VizFrame.prototype.vizType = function(type) {
        return this._chart.vizType.apply(this._chart, arguments);
    };
    /**
     * Get/Set vizFrame filterItems.
     * @deprecated
     * @method sap.viz.controls.frame.VizFrame.prototype.filterItems
     * @param {Array<sap.viz.controls.common.filter.AbstractFilter>} filterItems
     * @return {Array<sap.viz.controls.common.filter.AbstractFilter>}
     */
    VizFrame.prototype.filterItems = function(filterItems) {
        if (arguments.length > 0) {
            this._beginUpdateProperty();
            if(this._filterBar){
                this._filterBar.filterItems(filterItems);
            }
            this._endUpdateProperty();
            return this;
        } else {
            if(this._filterBar){
                return this._filterBar.filterItems();
            }
            return [];
        }
    };

    /**
     * Clear the selected property zone when 'useBuiltInPropertyZoneInteraction' is true in ui config.
     * @method sap.viz.controls.frame.VizFrame.prototype.clearSelectedPropertyZone
     * @return {undefined}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var frame = new VizFrame(...);
     * frame.clearSelectedPropertyZone();
     * </pre>
     */
    VizFrame.prototype.clearSelectedPropertyZone = function() {
    	this._chart.clearSelectedPropertyZone();
    };

    VizFrame.prototype._onVizModelChanged = function(e) {
        if (e.data.filterChanged) {
            var filters = this._vizModel().filterItems();
            if (!this._inUpdatingProperty()) {
                this._chart.showLoadingIcon();
            }
            this._dispatchPropertyEvent(new VizFrameEvent(VizFrameEvent.FILTERS_CHANGED, this, filters));
        }
        if(e.data.sliceDimensionChanged) {
            if(!this._playControl)
            {
                var enablePlayControl = this._uiConfig.enablePlayControl === false ? false : true;
                if(enablePlayControl) {
                    this._createPlayControl();
                }
            }
        }
    };
    /**
     * Comment changed event handler.
     */
    VizFrame.prototype._commentChangedHandler = function(e) {
        var data = {
            commentChanged : true
        };
        this._dispatchEvent(new Event(EventTypeConst.VIZ_DEFINITION_CHANGED, this, data));
    };
    VizFrame.prototype._vizDefinitionChanged = function(e) {
        this._dispatchEvent(new Event(EventTypeConst.VIZ_DEFINITION_CHANGED, this, e.data));
    };
    VizFrame.prototype._vizViewChanged = function(e) {
        var enableTitleEditor = this._uiConfig.enableTitleEditor === false ? false : true;
        if(enableTitleEditor){
            if(this._titleEditor)
            {
                this._titleEditor.destroy();
                this._titleEditor = null;
            }
            var type = e.data.type;
            if(ChartTypeUtil.supportTitle(type))
            {
                this._createTitleEditor();
                this._titleEditor.connect(this.vizUid());
            }
        }
    };

    /**
     * Create chart
     */
    VizFrame.prototype._createChart = function() {
        this._layout = document.createElement('div');
        $(this._div).append(this._layout);

        var chartConfig = ChartConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.chart) {
            chartConfig = this._uiConfig.controls.chart;
        }
        chartConfig = $.extend({},chartConfig);
        chartConfig.useInfoChart = (this._uiConfig.useInfoChart===true);
        this._chart = new Chart(this._layout, chartConfig);
        this._chart.addEventListener(EventTypeConst.VIZ_DEFINITION_CHANGED, this._vizDefinitionChanged, this);
        this._chart.addEventListener(ChartEvent.SELECT_PROPERTY_ZONE, $.proxy(function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.SELECT_PROPERTY_ZONE, this, e.data));
            //if (console) {
            //    console.log("Info: edit property: " + e.data.propertyZoneName);
            //}
        }, this));
        this._chart.addEventListener(ChartEvent.VIZ_VIEW_CHANGED, this._vizViewChanged, this);
        this._chart.addEventListener(ChartEvent.CHART_CHANGED, this._chartChangedHandler, this);
        this._validateSize();
        this.__vizModel = this._chart.chartModel();
        this.__vizModel.addEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
    };
    VizFrame.prototype._chartChangedHandler = function()
    {
        if(this._titleEditor)
        {
            this._titleEditor.init();
        }
    };
    /**
     * Get popupLayer for frame
     * @return {DIV}
     */
    VizFrame.prototype.popupLayer = function() {
        return this._popupLayout;
    };
    /**
     * Create popup layer
     */
    VizFrame.prototype._createPopupLayer = function() {
        this._popupLayout = document.createElement('div');
        this._popupLayout.id = "popupLayout";
        $(this._div).append(this._popupLayout);
    };
    //Create header
    VizFrame.prototype._createHeader = function() {
        if (!this._header$) {
            this._header$ = $(document.createElement('div')).appendTo(this._div);
            this._header$.addClass(CSSConst.FRAME_PREFIX + "header");
        }
    };
    /**
     * Create fullscreen button
     */
    VizFrame.prototype._createFullScreenButton = function() {
        var fullScreenConfig = CustomButtonConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.fullScreenButton) {
            fullScreenConfig = this._uiConfig.controls.fullScreenButton;
        }
        this._fullScreenBtn = new CustomButton(this._header$, fullScreenConfig);
        this._fullScreenBtn.setIcon([CSSConst.COMMON_PREFIX + "UVBSharedSprite", CSSConst.FRAME_PREFIX + 'header-fullscreen-enter-icon'].join(' '));
        this._fullScreenBtn.setTitle(LangManager.get('VIZ_CUSTOMBUTTON_MAXIMIZE'));
        this._fullScreenBtn.addEventListener(CustomButtonEvent.CLICK_CUSTOM_BUTTON, $.proxy(function(event) {
            this._isFullScreen = !this._isFullScreen;
            if(this._isFullScreen) {
                this._fullScreenBtn.setIcon([CSSConst.COMMON_PREFIX + "UVBSharedSprite", CSSConst.FRAME_PREFIX + 'header-fullscreen-exit-icon'].join(' '));
                this._fullScreenBtn.setTitle(LangManager.get('VIZ_CUSTOMBUTTON_RESTORE_DOWN'));
                this._dispatchEvent(new VizFrameEvent(VizFrameEvent.ENTER_FULL_SCREEN, this, this._isFullScreen));
            } else {
                this._fullScreenBtn.setIcon([CSSConst.COMMON_PREFIX + "UVBSharedSprite", CSSConst.FRAME_PREFIX + 'header-fullscreen-enter-icon'].join(' '));
                this._fullScreenBtn.setTitle(LangManager.get('VIZ_CUSTOMBUTTON_MAXIMIZE'));
                this._dispatchEvent(new VizFrameEvent(VizFrameEvent.EXIT_FULL_SCREEN, this, this._isFullScreen));
            }
        }, this), this);
    };
    /**
     * Create setting button
     */
    VizFrame.prototype._createSettingButton = function() {
        var settingConfig = CustomButtonConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.settingButton) {
            settingConfig = this._uiConfig.controls.settingButton;
        }
        this._settingBtn = new CustomButton(this._header$, settingConfig);
        this._settingBtn.setIcon([CSSConst.COMMON_PREFIX + "UVBSharedSprite", CSSConst.FRAME_PREFIX + 'header-setting-icon'].join(' '));
        this._settingBtn.setTitle(LangManager.get('VIZ_CUSTOMBUTTON_SETTINGS'));
        this._settingBtn.addEventListener(CustomButtonEvent.CLICK_CUSTOM_BUTTON, $.proxy(function(event) {
            var verticalOffset = 34;
            var relativeToDomPos = {
                // show context menu to the right border of the container
                pageX : $(this._div).width(),
                pageY : verticalOffset
            };
            this._contextMenu.show(relativeToDomPos, null);
        }, this), this);
    };
    /**
     * Create filter bar
     */
    VizFrame.prototype._createFilterBar = function() {
        this._filterBarContainer$ = $(document.createElement('div')).appendTo(this._header$);
        this._filterBarContainer$.addClass(CSSConst.FRAME_PREFIX + 'header-filterbar-container');
        var filterBarConfig = FilterBarConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.filterBar) {
            filterBarConfig = this._uiConfig.controls.filterBar;
        }
        this._filterBar = new FilterBar(this._filterBarContainer$, filterBarConfig);
        this._filterBar.addEventListener(FilterBarEvent.HEIGHT_CHANGED, function(event) {
            if (!this._header$) {
                return this;
            }
            this._header$.css({
                'height' : event.data.height
            });
            this._validateSize(true);
        }, this);
    };
    /**
     * Create context menu
     */
    VizFrame.prototype._createContextMenu = function() {
        var cmConfig = ContextMenuConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.contextMenu) {
            cmConfig = this._uiConfig.controls.contextMenu;
        }
        this._contextMenu = new ContextMenu($(this._popupLayout), cmConfig);
        //bind this event in chart area
        $(this._layout).bind('contextmenu', $.proxy(function(e) {
            var pos = Utils.getEventPosition(e);
            var relativeToDomPos = {
                pageX : pos.pageX - $(this._div).offset().left,
                pageY : pos.pageY - $(this._div).offset().top
            };
            var layoutOffset = $(this._layout).offset();
            var propertyZone = this._chart.getZoneName({
                x : pos.pageX - layoutOffset.left,
                y : pos.pageY - layoutOffset.top,
            });
            this._contextMenu.show(relativeToDomPos, propertyZone);
            return false;
        }, this));
    };

    VizFrame.prototype._createFilterMenu = function() {
        this._filterMenu = new FilterMenu($(this._popupLayout), this._uiConfig);

        this._filterMenu.addEventListener(FilterMenuEvent.FILTER_CLICKED, function(e) {
            this._filterMenu.hide();
            this._addFilter(false);
        }, this);

        this._filterMenu.addEventListener(FilterMenuEvent.EXCLUDE_CLICKED, function(e) {
             this._filterMenu.hide();
            this._addFilter(true);
        }, this);

        this._chart.addEventListener(ChartEvent.CHANGED_SELECTED_DATA, function(e) {
            var selection = this.vizSelection();
            var selectionNum = selection ? selection.length : 0;
            var showFilter = selectionNum > 0;
            var showExclude = selectionNum > 0;
            this._filterMenu.show(showFilter, showExclude);
        }, this);
        this.vizOn("initialized.filterMenu", $.proxy(function(e) {
            if (this._filterMenu) {
                var selection = this.vizSelection();
                var selectionNum = selection ? selection.length : 0;
                if(selectionNum >0 ){
                    this._filterMenu.show(true, true);
                } else {
                    this._filterMenu.hide();
                }
            }
        }, this));
    };

    VizFrame.prototype._createPlayControl = function() {
        var playControlContainer = document.createElement('div');
        this._playControlContainer$ = $(playControlContainer);
        $(playControlContainer).css({
            "position" : "relative"
        });
        $(this._div).append(playControlContainer);

        this._playControl = new PlayControl($(playControlContainer));
        this._validateSize();

        this._playControl.addEventListener(PlayControlEvent.SLICE_DIMENSION_CHANGED, $.proxy(function(e){
            var playerField = this._playControl.sliceDimension();
            this._playControl.visible(!!playerField);
            this._validateSize();
            this._dispatchPropertyEvent(new VizFrameEvent(VizFrameEvent.SLICE_DIMENSION_CHANGED, this, playerField));
        },this));

        this.vizOn("initialized.playControl", $.proxy(function(e) {
            this._validatePlayControlSize();
        }, this));
        this._playControl.connect(this.vizUid());
    };

    VizFrame.prototype._validatePlayControlSize = function()
    {
        var zones = this.vizFeedingZone();
        var bound;
        for(var i = 0; i < zones.length; i++) {
            var zone = zones[i];
            if(zone.name === 'plot') {
                bound = zone.bound[0];
                break;
            }
        }
        if(bound && bound.length > 0)
        {
            var width = bound[1][0] - bound[0][0];
            var left = bound[0][0];

            $(this._playControlContainer$).css({
                "width" : width,
                'left' : left
            });
            this._playControl.validateSize(width);
        }
    }

    VizFrame.prototype._addFilter = function(isExclude){
        if(this._filterBar){
            var selection = this.vizSelection({
                'withDataCtx' : true
            });
            this._vizModel().updateFilterItems(selection, isExclude, this.vizData(), this._chart.feeding());
        } else {
            var data = {
                "isExclude" : isExclude,
                "feeding" : this._chart.feeding()
            };
            this._dispatchEvent(new VizFrameEvent(VizFrameEvent.ADD_FILTER, this, data));
        }
    };

    VizFrame.prototype._createTitleEditor = function() {
        this._titleEditorContainer$ =  $(this._layout).find("." + CSSConst.CHART_PREFIX + "holder");
        $(this._titleEditorContainer$).css({
            position : 'absolute',
            width : '100%'
        });

        this._titleEditor = new TitleEditor(this._titleEditorContainer$);

        this.vizOn("initialized.titleEditor", $.proxy(function(e) {
            if(this._titleEditor) {
                this._titleEditor.init();
            }
        }, this));
    };
    /**
     * Create Annotation.
     */
    VizFrame.prototype._createAnnotation = function() {
        var annotationConfig = AnnotationConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.annotation) {
            annotationConfig = this._uiConfig.controls.annotation;
        }
        this._annotation = new Annotation(this._div, annotationConfig);
        this._annotation.popupLayer(this._popupLayout);
        // TODO: sync vizProxy
        if (this._contextMenu) {
            var commentMenuItem = new CommentMenuItem($.proxy(this._vizModel, this), this._chart.__vizProxy);
            commentMenuItem.clickHandler($.proxy(function() {
                this._dispatchEvent(new VizFrameEvent(VizFrameEvent.ADD_COMMENT, this));
            }, this));
            this._contextMenu.addMenuItem(commentMenuItem);
        }

        this.addEventListener(ChartEvent.CHART_CHANGED, $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.setChartInfo({
                    'vizType' : this._chart.vizType(),
                    'vizData' : this._chart.vizData()
                });
                var chartSize = this._chart.size();
                this._annotation.validateSize(chartSize.width, chartSize.height);
            }
        }, this));
        this.addEventListener(ChartEvent.CHART_CHANGING, $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.clean();
            }
        }, this));
        this.addEventListener(FeedEvent.FEEDS_CHANGED, $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.feedsChanged();
            }
        }, this));
        this.addEventListener(VizFrameEvent.ADD_COMMENT, $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.addComment(this.vizSelection({
                    'withDataCtx' : true
                }));
            }
        }, this));
        this.vizOn("initialized.annotation", $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.redraw();
            }
        }, this));
    };
    
    VizFrame.prototype._createAnnotationControl = function() {
        var annotationControlConfig = null;
        if (this._uiConfig.controls && this._uiConfig.controls.annotationControl) {
            annotationControlConfig = this._uiConfig.controls.annotationControl;
        } else {
            annotationControlConfig = AnnotationControlConfig.instance();
        }
        var annotationContainer$ = $(document.createElement('div')).insertBefore(this._popupLayout);
        this._annotationControl = new AnnotationControl(annotationContainer$[0], annotationControlConfig);
        if (this._contextMenu) {
            var commentMenuItem = new CommentMenuItem($.proxy(this._vizModel, this), this._chart.__vizProxy);
            commentMenuItem.clickHandler($.proxy(function() {
                var selection = this.vizSelection({
                    'withDataCtx' : true
                });
                this._dispatchEvent(new VizFrameEvent(VizFrameEvent.ADD_COMMENT, this, {context: selection[0]}));
            }, this));
            this._contextMenu.addMenuItem(commentMenuItem);
        }
    };
    /**
     * Create all the children of vizFrame
     */
    VizFrame.prototype._createChildren = function() {
        var enableFilterBar = this._uiConfig.enableFilterBar === false ? false : true;
        var enableFullScreenButton = this._uiConfig.enableFullScreenButton === false ? false : true;
        var enableSettingButton = this._uiConfig.enableSettingButton === false ? false : true;
        //create header
        if (enableFilterBar || enableFullScreenButton || enableSettingButton) {
            this._createHeader();
        }
        //create filterBar
        if (enableFilterBar) {
            this._createFilterBar();
        }
        //create fullscreen button
        if (enableFullScreenButton) {
            this._createFullScreenButton();
        }
        //create setting button
        if (enableSettingButton) {
            this._createSettingButton();
        }
        //create Chart
        this._createChart();
        
        this._createPopupLayer();

        //create Context Menu
        var enableContextMenu = this._uiConfig.enableContextMenu === false ? false : true;
        if (enableContextMenu) {
            this._createContextMenu();
        }

        //comments
        var enableAnnotation = this._uiConfig.enableAnnotation === false ? false : true;
        if (enableAnnotation) {
            this._createAnnotation();
        }
        if (this._uiConfig.enableAnnotationControl === true) {
            this._createAnnotationControl();
        }

        // enable Filter Menu by default
        var enableFilterMenu = this._uiConfig.enableFilterMenu === false ? false : true;
        if (enableFilterMenu) {
            //create Filter Menu
            this._createFilterMenu();
        }
        var enableTitleEditor = this._uiConfig.enableTitleEditor === false ? false : true;
        if(enableTitleEditor){
            this._createTitleEditor();
        }

        //connect control to model after chart is created.
        if (this._filterBar) {
            this._filterBar.connect(this.vizUid());
        }
        if (this._contextMenu) {
            this._contextMenu.connect(this.vizUid());
        }
        if (this._titleEditor) {
            this._titleEditor.connect(this.vizUid());
        }
        if (this._annotation) {
            this._annotation.connect(this.vizUid());
        }
        if (this._annotationControl) {
            this._annotationControl.connect(this.vizUid());
        }
    };
    /**
     * measure the size
     */
    VizFrame.prototype._validateSize = function(isFilterBarHeightChanged) {
        var w = $(this._div).width();
        var h = $(this._div).height();
        if (this._header$ && this._header$.css('display') != 'none' && !isNaN(this._header$.outerHeight())) {
            if (this._filterBar && !(isFilterBarHeightChanged === true)) {
                this._filterBar.validateSize();
            }
            h -= this._header$.outerHeight();
        }
        if(this._playControl && this._playControlContainer$.css('visibility')=== 'visible' && !isNaN(this._playControlContainer$.outerHeight()))
        {
            h -= this._playControlContainer$.outerHeight();
        }
        $(this._layout).css({
            width : w + "px",
            height : h + "px",
            visibility : "visible",
            display : ''
        });
        if (this._chart) {
            this._chart.size({
                width : w,
                height : h
            });
        }
        if (this._annotation) {
            this._annotation.validateSize(w, h);
        }
        if (this._chartEditorPlugin) {
            this._chartEditorPlugin.validateSize(w, h);
        }

        if (this._filterMenu) {
            this._filterMenu.size({
                width : w
            });
        }

        if (this._playControl) {
            this._validatePlayControlSize();
        }

        if (this._titleEditor) {
            this._titleEditor.size();
        }
    };
    /**
     * Get the chart
     * @return {Chart}
     */
    VizFrame.prototype._chartControl = function() {
        return this._chart;
    };
    /**
     * Override this method and throw exception to prevent application from calling it directly.
     * @ignore
     * @method sap.viz.controls.frame.VizFrame.prototype.connect
     * @param {String} vizUid
     *                 The uid of the viz instance.
     */
    VizFrame.prototype.connect = function(vizUid) {
        //if (console) {
        //    console.log("Info: VizFrame instance does not support connect function!");
        //}
    };
    /**
     * Override this method and throw exception to prevent application from calling it directly.
     * @ignore
     * @method sap.viz.controls.frame.VizFrame.prototype.disconnect
     */
    VizFrame.prototype.disconnect = function() {
        //if (console) {
        //    console.log("Info: VizFrame instance does not support disconnect function!");
        //}
    };
    /**
     * Destroy VizFrame.
     * @override
     */
    VizFrame.prototype.destroy = function() {
        // clean children
        if (this._contextMenu) {
            this._contextMenu.removeAllEventListeners();
            this._contextMenu.destroy();
            this._contextMenu = null;
        }
        if (this._filterMenu) {
            this._filterMenu.removeAllEventListeners();
            this._filterMenu.destroy();
            this._filterMenu = null;
        }
        if (this._chartEditorPlugin) {
            // Notes: No events registered on ChartEditorPlugin.
            this._chartEditorPlugin.destroy();
            this._chartEditorPlugin = null;
        }
        if (this._annotation) {
            // Notes: No events registered on Annotation.
            this._annotation.destroy();
            this._annotation = null;
        }

        if (this._playControl) {
           this._playControl.destroy();
           this._playControl = null;
        }

        // call super
        VizFrame.superclass.destroy.apply(this, arguments);
        //Children control will be destroyed in super class.
        this._chart = null;
        this._filterBar = null;
    };
    /**
     * Get the uid of vizFrame.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizUid
     * @return {String}
     */
    VizFrame.prototype.vizUid = function() {
        return this._chart.vizUid();
    };
    /**
     * Enable or disable morphing.
     * Note: The following viz types are not supporting morphing:
     * - viz/geobubble
     * - viz/choropleth
     * - viz/geopie
     * - viz/geomap
     * - sap.viz.ext.table
     * @method sap.viz.controls.frame.VizFrame.prototype.enableMorphing
     * @param {Boolean} value
     *                  Default value is true.
     *                  If value is true, enable morphing.
     *                  If value is false, disable morphing.
     */
    /**
     * Get/Set vizFrame dataset. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.data() to get/set data.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizData
     * @param {sap.viz.api.data.CrosstableDataset} data
     *                                             The new dataset
     * @return {sap.viz.api.data.CrosstableDataset}
     */
    VizFrame.prototype.vizData = function(data) {
        return this._chart.vizData.apply(this._chart, arguments);
    };
    /**
     * Get/Set vizFrame css. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.css() to get/set css.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizCss
     * @param {CSS} css
     * @return {CSS}
     */
    VizFrame.prototype.vizCss = function(css) {
        return this._chart.vizCss.apply(this._chart, arguments);
    };
    /**
     * Get/Set vizFrame properties.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizProperties
     * @param {JSON} properties
     *               The new properties.
     * @return {JSON}
     */
    VizFrame.prototype.vizProperties = function(properties) {
        return this._chart.vizProperties.apply(this._chart, arguments);
    };
    /**
     * Get viz instance description.
     * @return {Object}
     */
    VizFrame.prototype.vizDescription = function() {
        return this._chart.vizDescription.apply(this._chart, arguments);
    };
    /**
     * Update viz instance by passing options in single function.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizUpdate
     * @param {JSON} updates
     *               The update options with below data structure:
     * <pre>
     * {
     *     'data' : dataset,
     *     'css' : cssString,
     *     'properties' : {},
     *     'feeds' : [], // Array of FeedItem object
     *     'filters' : [] // Array of ValueFilter|NumericRangeFilter|DateRangeFilter object
     * }
     * All the options (data, css, properties, feeds and filters) are optional and you can pass partial options.
     * </pre>
     * @return {sap.viz.controls.frame.VizFrame} VizFrame itself.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * var dataset = new sap.viz.api.data.CrosstableDataset();
     * //dataset.data(your data);
     * var cssString = '';
     * vizFrame.vizUpdate({
     *     'properties' : {},
     *     'feeds' : [], //FeedItem object
     *     'filters' : [] //ValueFilter|NumericRangeFilter|DateRangeFilter object
     * });
     * </pre>
     */
    VizFrame.prototype.vizUpdate = function(updates) {
        if (!updates) {
            return;
        }

        this._beginUpdateProperty();

        try {
            //handle filters change
            if (updates.filters && this._filterBar) {
                // for backward compatibility, we expose filter option using {'filters' : {'value' : [filterItems]}}
                var filters = updates.filters.value ? updates.filters.value : updates.filters;
                this._filterBar.filterItems(filters);
            }

            var result = this._chart.vizUpdate.apply(this._chart, arguments);
        } catch (error) {
            this._endUpdateProperty();
            throw error;
        }

        this._endUpdateProperty();
        return result;
    };
    /**
     * Add event listener on viz instance. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.on() to add event listener.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizOn
     * @param {String} evtType
     * @param {Function} callback
     * @return {sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.vizOn = function(evtType, callback) {
        this._chart.vizOn.apply(this._chart, arguments);
        return this;
    };
    /**
     * Remove event listener on viz instance. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.on() to remove event listener.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizOff
     * @param {String} evtType
     * @return {sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.vizOff = function(evtType) {
        this._chart.vizOff.apply(this._chart, arguments);
        return this;
    };
    /**
     * Trigger viz instance action.
     * @param {String} name
     * @param {JSON} [args]
     *               optional, the action arguments in JSON format
     * @return {sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.vizAction = function(keyName, args) {
        this._chart.vizAction.apply(this._chart, arguments);
        return this;
    };
    /**
     * Get/Set selected data points. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.selection() to get/set selected data points.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizSelection
     * @param {Array<JSON>} [items]
     *                          optional, viz instance will hold the passed-in description,
     *                          but if the properties are changed, it must be re-pass to viz instance to take effect.
     *                          point:
     *                          {
     *                              data: {key: "value", ...},
     *                              ctx:  [{mi: 0, ...}, {...}, ...], // !important
     *                              info: [{obj}, null, ... } // optional
     *                          }
     * @param {Boolean} [clearFlag]
     *                          optional, whether to clear previous selection.
     *                          Default value is true.
     *                          If clearFlag is true, the selection will be incremental selection.
     *                          If clearFlag is false, the selection will not be incremental selection.
     */
    VizFrame.prototype.vizSelection = function(points, options) {
        return this._chart.vizSelection.apply(this._chart, arguments);
    };
    /**
     * Get viz instance feeding zone. The feeding zone is used to drag-and-drop an object onto different feeding zone to
     * feed data. Application can get this functionality by free if use VizFrame control.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizFeedingZone
     * @return {Object} All the feeding zones of the CVOM chart.
     */
    VizFrame.prototype.vizFeedingZone = function() {
        return this._chart.vizFeedingZone.apply(this._chart, arguments);
    };
    /**
     * Get/Set title properties.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizTitle
     * @param {String} title
     * @return {String} title
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var frame = new VizFrame(...);
     * var oldTitle = frame.vizTitle();
     * var newTitle = 'new Title';
     * frame.vizTitle(newTitle);
     * </pre>
     */
    VizFrame.prototype.vizTitle = function(title) {
        return this._chart.vizTitle.apply(this._chart, arguments);
    };
    /**
     * To achieve interoperability with prior CVOM based application, Viz Container provides a wrapper of CVOM
     * sap.viz.api.core.createViz(options), which creates a viz instance by passing options.
     *
     * @method sap.viz.controls.frame.VizFrame.prototype.createViz
     * @param {JSON} options
     *                          {
     *                              type: String, // refer to propDoc.html for all supported viz chart TypeUtils
     *                              data: sap.viz.api.data.CrosstableDataset,
     *                              feeds: Array of FeedItem,
     *                              properties: JSON, // refer to propDoc.html for all supported options for each viz
     * type
     *                              css: String, // refer to propDoc.html for all supported css items for each viz type
     *                              description: JSON,
     *                              events: Object // events is an object with key and value pair. Key is the event name,
     * and the value is the listener function
     *                          }
     * @return {sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.createViz = function(options) {
        if (arguments.length > 0) {
            this._chart.createViz(options);
            return this;
        }
    };
    /**
     * Change template if we detect templateChanged event.
     * @return {sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.changeTemplate = function() {
        return this._chart.changeTemplate.apply(this._chart);
    };
    /**
     * To achieve interoperability with prior CVOM based application. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.toJSON(), which exports CVOM viz instance into a JSON object which contains
     * all information of the CVOM visualization including type, data, properties, css, feeding and size.<br/>
     *
     * @method sap.viz.controls.frame.VizFrame.prototype.exportViz
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * @return {JSON}
     */
    VizFrame.prototype.exportViz = function(options) {
        return this._chart.exportViz(options);
    };
    /**
     * Create CVOM viz instance from JSON object which contains all information of the CVOM visualization including
     * type, data, properties, css, feeding and size.
     * @method sap.viz.controls.frame.VizFrame.prototype.loadViz
     * @param {JSON} vizJSON
     */
    VizFrame.prototype.loadViz = function(vizJSON) {
        this._chart.loadViz(vizJSON);
    };
    /**
     * Serialize VizFrame to a JSON object. The serialization includes:<br/>
     * 1. Viz instance(including type, data, properties, css, feeding and size).<br/>
     * 2. Internal data model(including feeds, filters).<br/>
     * @method sap.viz.controls.frame.VizFrame.prototype.save
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * @return {JSON}
     */
    VizFrame.prototype.save = function(options) {
        var jsonValue = {};
        //version
        jsonValue['version'] = Version.VERSION;
        //chart
        jsonValue["chart"] = this._chart.save(options);
        //filterbar
        if(this._filterBar) {
            jsonValue["filterBar"] = this._filterBar.save();
        }
        //contextmenu
        if (this._contextMenu) {
            jsonValue["contextMenu"] = this._contextMenu.save();
        }
        //annotation
        if (this._annotation) {
            jsonValue["annotation"] = this._annotation.save();
        }
        //titleEditor
        if (this._titleEditor) {
            jsonValue['titleEditor'] = this._titleEditor.save();
        }
        if (this._playControl) {
            jsonValue['playControl'] = this._playControl.save(options);
        }
        return jsonValue;
    };
    /**
     * Deserialize VizFrame from JSON object.<br/>
     * 1. Create viz instance from JSON object which including type, data, properties,
     * css, feeding and size.<br/>
     * 2. Restore VizFrame, including internal data model<br/>
     * 3. Handle backward compatibility.
     * @method sap.viz.controls.frame.VizFrame.prototype.load
     * @param {JSON} valueJSON
     */
    VizFrame.prototype.load = function(valueJSON) {
        this._beginUpdateProperty();
        //migrate to latest version of serialization package
        var migratedValueJSON = Serialization.migrateVizFrame(valueJSON);
        //reset playControl when load
        this._vizModel().playerField(null);
        //version
        var module = migratedValueJSON['version'];
        //filterBar
        module = migratedValueJSON["filterBar"];
        if(module && this._filterBar) {
            this._filterBar.load(module);
        }
        //contextmenu
        module = migratedValueJSON["contextMenu"];
        if (module && this._contextMenu) {
            this._contextMenu.load(module);
        }
        //chart
        module = migratedValueJSON["chart"];
        if (module) {
            this._chart.load(module);
        }
        //annotation
        module = migratedValueJSON["annotation"];
        if (module && this._annotation) {
            this._annotation.load(module);
        }
        module = migratedValueJSON["titleEditor"];
        if (module && this._titleEditor) {
            this._titleEditor.load(module);
        }
        module = migratedValueJSON["playControl"];
        if (module) {
            if(!this._playControl) {
                var enablePlayControl = this._uiConfig.enablePlayControl === false ? false : true;
                if(enablePlayControl) {
                    this._createPlayControl();
                }
            }
            if(this._playControl)
            {
                this._playControl.load(module);
            }
        }
        this._endUpdateProperty();
    };
    /**
     * Get/Set all feeds data.
     * To get feeds, please use feeds() or feeds({withMND: true/false}). The feeds order is always same with the feeding
     * definition of chart.
     * If the user shows MND in UI,
     * with option {withMND : true}, return current feeds with MND;
     * with option {withMND : false}, return current feeds without MND;
     * with no option, return current feeds.
     * If the user doesn't show MND in UI, get feeds always return current feeds, the option value will be ignored.
     * To set feeds, please use feeds(feedItems).
     * @method sap.viz.controls.frame.VizFrame.prototype.feeds
     * @param {Array<sap.viz.controls.common.feeds.FeedItem>|JSON} value
     * @return {Array<sap.viz.controls.common.feeds.FeedItem>} Current feed items.
     *     An array of {@link sap.viz.controls.common.feeds.FeedItem}.
     */
    VizFrame.prototype.feeds = function(value) {
        return this._chart.feeds.apply(this._chart, arguments);
    };
    /**
     * Get default incomplete ghost options for createViz.
     * @method sap.viz.controls.frame.VizFrame.prototype.getDefaultIncompleteOptions
     * @param {String} vizType
     * @return {JSON}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * var options = vizFrame.getDefaultIncompleteOptions('viz/line');
     * vizFrame.createViz(options);
     * </pre>
     */
    VizFrame.prototype.getDefaultIncompleteOptions = function(type) {
        return this._chart.getDefaultIncompleteOptions.apply(this._chart, arguments);
    };

    /**
     * show customized message and destory the viz instance.
     * @method sap.viz.controls.frame.VizFrame.prototype.showMessage
     * @param {String} message
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * ...
     * case 1:
     * if (errorHappened) {
     *     vizFrame.showMessage("your error message");
     * } else {
     *     vizFrame.vizUpdate(); // or vizFrame.vizXXX();
     * }

     * case 2:
     * try {
     *     vizFrame.vizUpdate(); // or vizFrame.vizXXX();
     * } catch (error) {
     *     vizFrame.showMessage(error);
     * }
     * </pre>
     */
    VizFrame.prototype.showMessage = function(message) {
        if (arguments.length == 1) {
        	this._chart.showMessage(message);
        }
    };

    /**
     * Set callback func for title generator.
     * @method sap.viz.controls.frame.VizFrame.prototype.setTitleGeneratorFunc
     * @param {Object} callback
     *                 Function
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * ...
     * var callback = function(vizUid){
     *    var runtime = RuntimeManager.getRuntime();
     *    var model = runtime.getModel(vizUid);
     *    var titleText = "";
     *    ...
     *    return titleText;
     * };
     * vizFrame.setTitleGeneratorFunc(callback);
     * </pre>
     */
    VizFrame.prototype.setTitleGeneratorFunc = function(value) {
        this._chart.setTitleGeneratorFunc(value);
    };

    /**
     * getter/setter for viz title mode.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizTitleMode
     * @param {string} viz title mode("manual" or "auto")
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * ...
     * vizFrame.vizTitleMode('manual');
     * ...
     * var titleMode = vizFrame.vizTitleMode();
     * </pre>
     */
    VizFrame.prototype.vizTitleMode = function(mode) {
        if(arguments.length > 0){
            this._chart.vizTitleMode(mode);
        }
        else{
            return this._chart.vizTitleMode();
        }
    };

    /**
     * get annotationControl.
     * @method sap.viz.controls.frame.VizFrame.prototype.annotationControl
     * @return {sap.viz.controls.annotationcontrol.AnnotationControl}
     */
    VizFrame.prototype.annotationControl = function() {
        return this._annotationControl;
    };
    
    VizFrame.prototype.chart = function() {
        return this._chart;
    };

    VizFrame.prototype.filterBar = function() {
        return this._filterBar;
    };

    VizFrame.prototype.contextMenu = function() {
        return this._contextMenu;
    };

    VizFrame.prototype.titleEditor = function() {
        return this._titleEditor;
    };

    VizFrame.prototype.playControl = function() {
        return this._playControl;
    };

    /**
     * Export the current viz as SVG String.
     * The viz is ready to be exported to svg ONLY after the initialization is finished.
     * Any attempt to export to svg before that will result in an empty svg string.
     * @method sap.viz.controls.frame.VizFrame.prototype.exportToSVGString
     * @param {Object} [option]  {
     *                              width: Number - the exported svg will be scaled to the specific width. 
     *                              height: Number - the exported svg will be scaled to the specific height.
     *                              hideTitleLegend: Boolean - flag to indicate if the exported svg includes the original title and legend.
     *                              hideAxis: Boolean - flag to indicate if the exported svg includes the original axis.
     *                           }
     * @return {String} the SVG string of the current viz or empty svg if error occurs.
     */
    VizFrame.prototype.exportToSVGString = function(option) {
        return this._chart.exportToSVGString(option);
    };

    /**
     * Check whether the chart type supports API exportToSVGString
     * @method sap.viz.controls.frame.VizFrame.prototype.supportExportToSVG
     * @return {Boolean}
     */
    VizFrame.prototype.supportExportToSVG = function() {
        var ret = false;
        // by now we can make sure to support all built in chart types
        if (this.vizType()) {
            ret = ChartTypeUtil.isBuildInType(this.vizType()) || ret;
        }
        return ret;
    };

    VizFrame.prototype.selectedPropertyZone = function (selection) {
        return this._chart.selectedPropertyZone.apply(this._chart, arguments);
    };

    return VizFrame;
});

// @formatter:off
define('sap/viz/controls/filterbar/FilterBarConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var FilterBarConfig = {};

    FilterBarConfig.instance = function() {
        return {
            "maxLines" : 2,
            "enableDrop" : true,
            "showInformationIcon" : false,
            "showClearIcon" : false,
            "addButtonVisible" : true,
            "informationIconTooltip" : ''
        };
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_FILTERBAR, FilterBarConfig);
    return FilterBarConfig;
});

define('sap/viz/controls/filterbar/FilterBarEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var FilterBarEvent = function(type, target, data) {
        FilterBarEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.filterbar.FilterBarEvent";
    };

    OOUtil.extend(FilterBarEvent, Event);

    FilterBarEvent.REQUEST_ADD_FILTER = "requestAddFilter";
    FilterBarEvent.REQUEST_REMOVE_FILTER = "requestRemoveFilter";
    FilterBarEvent.REQUEST_EDIT_FILTER = "requestEditFilter";
    FilterBarEvent.SIZE_CHANGED = "sizeChanged";
    FilterBarEvent.CLEAR_FILTERS = "clearFilters";

    return FilterBarEvent;
});

define('sap/viz/controls/filterbar/FilterItem',[
// @formatter:off
    'sap/viz/controls/common/utils/Utils'
],
function(Utils) {
// @formatter:on
    /**
     * The FilterItem class is the UI abstraction of a visual Filter.
     * @class sap.viz.controls.filterbar.FilterItem
     * @param {String} id filter item id
     * @param {String} displayName filter item display name
     * @param {String} displayValue filter item display value
     * @param {Object} [customData]
     *                 optional, custom data for this filter item
     * @param {String} [cssClass]
     *                 optional, css class name of the FilterRenderer's base DIV to support different styles like background color
     * @param {String} [valueCssClass]
     *                 optional, css class name of the display value
     * @param {Boolean} [disableRemoval]
     *                  optional, disable removal icon, default value is false
     * @param {Number} [valueCount]
     *                 optional, value count in filter, default value is 0
     */
    var FilterItem = function(id, displayName, displayValue, customData, cssClass, valueCssClass, disableRemoval, valueCount) {
        this.__className = "sap.viz.controls.filterbar.FilterItem";

        this._id = id;
        this._displayName = displayName;
        this._displayValue = displayValue;
        this._customData = customData;
        this._cssClass = cssClass;
        this._valueCssClass = valueCssClass;
        this._disableRemoval = Utils.isBoolean(disableRemoval) ? disableRemoval : false;
        this._valueCount = Utils.isNumber(valueCount) ? valueCount : 0;
    };

    Utils.genGetterSetters(FilterItem.prototype,
        ["_id", "_displayName", "_valueCount", "_disableRemoval", "_cssClass", "_customData", "_valueCssClass", "_displayValue"]
    );

    /**
     * Get/Set FilterItem id.
     * @method sap.viz.controls.filterbar.FilterItem.prototype.id
     * @param {string} value
     * @return {string}
     */
    /*FilterItem.prototype.id = function(value){
        if (arguments.length > 0) {
            this._id = value;
        } else {
            return this._id;
        }
    };*/
    /**
     * Get/Set FilterItem displayName.
     * @method sap.viz.controls.filterbar.FilterItem.prototype.displayName
     * @param {string} value
     * @return {string}
     */
    /*FilterItem.prototype.displayName = function(value){
        if (arguments.length > 0) {
            this._displayName = value;
        } else {
            return this._displayName;
        }
    };*/
    /**
     * Get/Set FilterItem displayValue.
     * @method sap.viz.controls.filterbar.FilterItem.prototype.displayValue
     * @param {string} value
     * @return {string}
     */
    /*FilterItem.prototype.displayValue = function(value){
        if (arguments.length > 0) {
            this._displayValue = value;
        } else {
            return this._displayValue;
        }
    };*/
    /**
     * Get/Set FilterItem disableRemoval.
     * @method sap.viz.controls.filterbar.FilterItem.prototype.disableRemoval
     * @param {Boolean} value
     * @return {Boolean}
     */
    /*FilterItem.prototype.disableRemoval = function(value){
        if (arguments.length > 0) {
            this._disableRemoval = value;
        } else {
            return this._disableRemoval;
        }
    };*/
    /**
     * Get/Set FilterItem valueCount.
     * @method sap.viz.controls.filterbar.FilterItem.prototype.valueCount
     * @param {Number} value
     * @return {Number}
     */
    /*FilterItem.prototype.valueCount = function(value){
        if (arguments.length > 0) {
            this._valueCount = value;
        } else {
            return this._valueCount;
        }
    };*/
    /**
     * Get/Set FilterItem customData.
     * @method sap.viz.controls.filterbar.FilterItem.prototype.customData
     * @param {Object} value
     * @return {Object}
     */
    /*FilterItem.prototype.customData = function(value){
        if (arguments.length > 0) {
            this._customData = value;
        } else {
            return this._customData;
        }
    };*/
    /**
     * Get/Set FilterItem cssClass.
     * @method sap.viz.controls.filterbar.FilterItem.prototype.cssClass
     * @param {string} value
     * @return {string}
     */
    /*FilterItem.prototype.cssClass = function(value){
        if (arguments.length > 0) {
            this._cssClass = value;
        } else {
            return this._cssClass;
        }
    };*/
    /**
     * Get/Set FilterItem valueCssClass.
     * @method sap.viz.controls.filterbar.FilterItem.prototype.valueCssClass
     * @param {string} value
     * @return {string}
     */
    /*FilterItem.prototype.valueCssClass = function(value){
        if (arguments.length > 0) {
            this._valueCssClass = value;
        } else {
            return this._valueCssClass;
        }
    };*/

    return FilterItem;
});

define('sap/viz/controls/filterbar/FilterRenderer',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/filterbar/FilterBarEvent'
],
// @formatter:on
function($, OOUtil, EventDispatcher, CSSConst, LangManager, FilterBarEvent) {

    var FilterRenderer = function(filterItem, div, showInformationIcon, informationIconTooltip) {
        FilterRenderer.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.filterbar.FilterRenderer";

        this._filterItem = filterItem;
        this._showInformationIcon = showInformationIcon;
        this._informationIconTooltip = informationIconTooltip;
        this._div$ = $(div);
        this._draw();
    };

    OOUtil.extend(FilterRenderer, EventDispatcher);

    FilterRenderer.prototype.filterItem = function(value){
        if (arguments.length > 0) {
            this._filterItem = value;
            this._reset();
            this._draw();
        } else {
            return this._filterItem;
        }
    };
    FilterRenderer.prototype.destroy = function(){
        this._div$.empty();
    };
    
    FilterRenderer.prototype._draw = function(){
        var filterItem = this._filterItem;
        var _this = this;
        this._createFilterTitle(filterItem, this._div$);
        this._addFilterValues(filterItem, this._div$);
        
        this._div$.attr({
            'id' : filterItem.id()
        });
        this._div$.mouseover(function(event) {
            $('.' + CSSConst.FILTERBAR_PREFIX + 'filter-values', event.currentTarget).addClass(CSSConst.FILTERBAR_PREFIX + 'filter-values-active');
        });
        this._div$.mouseout(function(event) {
            $('.' + CSSConst.FILTERBAR_PREFIX + 'filter-values', event.currentTarget).removeClass(CSSConst.FILTERBAR_PREFIX + 'filter-values-active');
        });

        if(filterItem.cssClass()){
            this._div$.addClass(filterItem.cssClass());
        }
        this._div$.addClass(CSSConst.FILTERBAR_PREFIX + 'filter-item');
        if(filterItem.disableRemoval()) {
            this._div$.addClass(CSSConst.FILTERBAR_PREFIX + 'filter-item-readonly');
            if(this._showInformationIcon){
                var infoIcon$ = $(document.createElement('div')).appendTo(this._div$);
                infoIcon$.attr("title", this._informationIconTooltip || LangManager.get("VIZ_FILTERBAR_READONLY_FILTER"));
                infoIcon$.addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16');
                infoIcon$.addClass(CSSConst.FILTERBAR_PREFIX + 'info-icon');
            }
        } else {
            this._div$.click(function() {
                _this._dispatchEvent(new FilterBarEvent(FilterBarEvent.REQUEST_EDIT_FILTER, _this, { "filterItem" : _this._filterItem}));
            });
            var deleteIcon$ = $(document.createElement('div')).appendTo(this._div$);
            deleteIcon$.addClass(CSSConst.FILTERBAR_PREFIX + 'delete-icon');
            deleteIcon$.addClass(CSSConst.COMMON_PREFIX + 'UVBSharedSprite');
            deleteIcon$.click(function(e) {
                _this._dispatchEvent(new FilterBarEvent(FilterBarEvent.REQUEST_REMOVE_FILTER, _this, { "filterItem" : _this._filterItem}));
                e.stopPropagation();
            });
        }
    };
    
    FilterRenderer.prototype._createFilterTitle = function(filterItem, filterItem$) {
        if(filterItem.valueCount () <=0 ) {
            var filterText$ = $(document.createElement('span')).appendTo(filterItem$).text(filterItem.displayName()).attr("title", filterItem.displayName());
            filterText$.addClass(CSSConst.FILTERBAR_PREFIX + 'filter-item-text');
            filterText$.addClass(CSSConst.FILTERBAR_PREFIX + 'range-filter-item-text');
            return;
        }

        var title$ = $(document.createElement('div')).appendTo(filterItem$);
        var name$ = $(document.createElement('div')).appendTo(title$).text(filterItem.displayName()).attr("title", filterItem.displayName()).css("display", 'inline');
        name$.addClass(CSSConst.FILTERBAR_PREFIX + 'filter-item-text').attr('id', 'filterName');
        var countInfo$ = $(document.createElement('div')).appendTo(title$).css("display", 'inline').attr('id', 'countInfo');
        countInfo$.addClass(CSSConst.FILTERBAR_PREFIX + 'filter-item-info');
        $(document.createElement('span')).appendTo(countInfo$).text('(');
        var count$ = $(document.createElement('span')).appendTo(countInfo$).text(filterItem.valueCount ());
        if(filterItem.valueCssClass()) {
            count$.addClass(filterItem.valueCssClass());
        }
        $(document.createElement('span')).appendTo(countInfo$).text(')');
    };
    
    FilterRenderer.prototype._addFilterValues = function(filterItem, filterItem$) {
        var filterText$ = filterItem$.find("span[id='values']");
        if(filterText$.length === 0) {
            filterText$ = $(document.createElement('span')).appendTo(filterItem$);
            filterText$.addClass(CSSConst.FILTERBAR_PREFIX + 'filter-values');
            filterText$.attr({
                id : 'values'
            });
        }
        
        var displayValue = filterItem.displayValue();
        filterText$.text(displayValue ).attr("title", displayValue);
        if(filterItem.valueCssClass()) {
            filterText$.addClass(filterItem.valueCssClass());
        }
    };

    return FilterRenderer;
});
// @formatter:off
define('sap/viz/controls/filterbar/FilterBar',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/managers/DragManager',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/views/feed/FeedList',
    'sap/viz/controls/common/views/feed/FeedListEvent',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/helpers/Rectangle',
    'sap/viz/controls/filterbar/FilterBarConfig',
    'sap/viz/controls/filterbar/FilterBarEvent',
    'sap/viz/controls/filterbar/FilterItem',
    'sap/viz/controls/filterbar/FilterRenderer'
    ],
function($, VizControlBase, CSSConst, EventTypeConst, Event, DragManager, LangManager, OOUtil, Utils, VizUtils, UIControl,
    DropAction, FeedList, FeedListEvent, AnalyticalType, FeedItemType, Rectangle,
    FilterBarConfig, FilterBarEvent, FilterItem, FilterRenderer) {
// @formatter:on
    /**
     * FilterBar is a standard standalone UI control to display current FilterItems.
     * @class sap.viz.controls.filterbar.FilterBar
     * @param {HTMLElement} div
     *                      The dom element to host the FilterBar.
     * @param {JSON}  [uiConfig]  configuration for initialization of FilterBar.
     * @param {Number} uiConfig.maxLines  max lines of filters can be shown on the FilterBar, default value is 1.<br/>
     * @param {Boolean} uiConfig.addButtonVisible  show add button, default value is true.<br/>
     * @param {Boolean} uiConfig.showInformationIcon  specify whether show information icon for read-only filters, default value is false.<br/>
     * @param {String} uiConfig.informationIconTooltip  tooltip for information icon.<br/>
     * @param {Boolean} uiConfig.showClearIcon  specify whether show clear icon, default value is false.<br/>
     * @extends sap.viz.controls.common.VizControlBase
     */
    var FilterBar = function(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        FilterBar.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.filterbar.FilterBar";

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_filterbar_control');

        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : FilterBarConfig.instance();
        this._filterItems = [];
        this._renderers = [];
        // Feeding
        this._allAnalyses = null;
        this._settings = null;
        this._visualLines = 1;
        if(Utils.isNumber(this._uiConfig.maxLines) && this._uiConfig.maxLines>1){
            this._visualLines = this._uiConfig.maxLines;
        }
        this._description$ = null;
        this._layout$ = null;
        this._headerVisible = false;
        this._isFullScreen = false;
        this._createChildren();
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_filterbar_control');
    };
    // API document: events
    /**
     * Event: requestAddFilter
     * When user clicks FilterButton and pick an AnalysisObject on the popup FeedList, FilterBar will notify host application to create a new filter item
     * <pre>
     * type: "requestAddFilter"
     * handler: function({
     *                    type: "requestAddFilter",
     *                    token: "<uuid>",
     *                    data : {
     *                      analysisObject: AnalysisObject
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.filterbar.FilterBar#requestAddFilter
     * @param {String} evt.type "requestAddFilter"
     * @param {Object} evt.token "<uuid>"
     * @param {sap.viz.controls.common.feeds.AnalysisObject} evt.data.analysisObject AnalysisObject
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var filterBar = new FilterBar(...);
     * var requestFilterHandler = function(event) {
     *      //create filter item base on event.data.analysisObject
     *      // update filter base UI
     *      filterBar.filterItems(newfilters);
     * };
     * filterBar.addEventListener('requestAddFilter', requestFilterHandler);
     * </pre>
     */

    /**
     * Event: requestRemoveFilter
     * When user remove a FilterItem through FilterBar or FilterRenderer UI
     * <pre>
     * type: "requestRemoveFilter"
     * handler: function({
     *                    type: "requestRemoveFilter",
     *                    token: "<uuid>",
     *                    data : {
     *                      filterItem: FilterItem
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.filterbar.FilterBar#requestRemoveFilter
     * @param {String} evt.type "requestRemoveFilter"
     * @param {Object} evt.token "<uuid>"
     * @param {sap.viz.controls.filterbar.FilterItem} evt.data.filterItem FilterItem
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var filterBar = new FilterBar(...);
     * var removeFilterHandler = function(event) {
     *      // remove filter item
     *      // update filter base UI
     *      filterBar.filterItems(newfilters);
     * };
     * filterBar.addEventListener('requestRemoveFilter', removeFilterHandler);
     * </pre>
     * */

    /**
     * Event: requestEditFilter
     * When user wants to edit a FilterItem through FilterBar or FilterRenderer UI via double click or long tap
     * <pre>
     * type: "requestEditFilter"
     * handler: function({
     *                    type: "requestEditFilter",
     *                    token: "<uuid>",
     *                    data : {
     *                      filterItem: FilterItem
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.filterbar.FilterBar#requestEditFilter
     * @param {String} evt.type "requestEditFilter"
     * @param {Object} evt.token "<uuid>"
     * @param {sap.viz.controls.filterbar.FilterItem} evt.data.filterItem FilterItem
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var filterBar = new FilterBar(...);
     * var editFilterHandler = function(event) {
     *      // edit filter item
     *      // update filter base UI
     *      filterBar.filterItems(newfilters);
     * };
     * filterBar.addEventListener('requestEditFilter', editFilterHandler);
     * </pre>
     */

    /**
     * Event: clearFilters
     * When user clicks clear all icon.
     * <pre>
     * type: "clearFilters"
     * handler: function({
     *                    type: "clearFilters",
     *                    token: "<uuid>"
     * })
     * </pre>
     * @event sap.viz.controls.filterbar.FilterBar#clearFilters
     * @param {String} evt.type "clearFilters"
     * @param {Object} evt.token "<uuid>"
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var filterBar = new FilterBar(...);
     * var clearFiltersHandler = function(event) {
     *      // clear all filters
     *      // update filter base UI
     *      filterBar.filterItems(newfilters);
     * };
     * filterBar.addEventListener('clearFilters', clearFiltersHandler);
     * </pre>
     */

    /**
     * Event: sizeChanged
     * When filter bar height is changed by add or remove filterItems.
     * <pre>
     * type: "sizeChanged"
     * handler: function({
     *                    type: "sizeChanged",
     *                    token: "<uuid>",
     *                    data : {
     *                      height: height
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.filterbar.FilterBar#sizeChanged
     * @param {String} evt.type "sizeChanged"
     * @param {Object} evt.token "<uuid>"
     * @param {Number} evt.data.height
     *                 Height of filter bar.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var filterBar = new FilterBar(...);
     * var requestHeightChangeHandler = function(e) {
     *      var height = e.data.height;
     *      //Update filter bar height;
     * };
     * filterBar.addEventListener('sizeChanged', requestHeightChangeHandler);
     * </pre>
     */
    /**
     * @ignore
     * @method sap.viz.controls.filterbar.FilterBar.prototype.connect
     */
    /**
     * @ignore
     * @method sap.viz.controls.filterbar.FilterBar.prototype.disconnect
     */
     /**
     * @ignore
     * @method sap.viz.controls.filterbar.FilterBar.prototype.save
     */
     /**
     * @ignore
     * @method sap.viz.controls.filterbar.FilterBar.prototype.load
     */

    var filterItemShrinks = 0.8;
    var filterItemHeightDefault = 40;
    var filterItemWidthDefault = 180;
    OOUtil.extend(FilterBar, VizControlBase);

    // const of data types
    FilterBar.TYPE_STRING = 'string';
    FilterBar.TYPE_INTEGER = 'integer';
    FilterBar.TYPE_NUMBER = 'number';
    FilterBar.TYPE_DATE = 'date';

    var ImageWidth = 16;
    /**
     * Get/Set  filterBar filterItems.
     * @method sap.viz.controls.filterbar.FilterBar.prototype.filterItems
     * @param {Array<sap.viz.controls.filterbar.FilterItem>} filterItems
     * @return {Array<sap.viz.controls.filterbar.FilterItem>}
     */
    FilterBar.prototype.filterItems = function(filterItems) {
        if(arguments.length > 0) {
            this._filterItems = filterItems;
            this._filtersChanged();
            return this;
        } else {
            return this._filterItems;
        }
    };

    /**
     * TODO: Add comments.
     */
    FilterBar.prototype._createChildren = function() {
        var _this = this;
        var config = this._uiConfig;
        if(!config || config.addButtonVisible !== false) {
            this._headerVisible = true;
            this._plus$ = $(document.createElement("div")).appendTo(this._div);
            this._plus$.addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16');
            this._plus$.addClass(CSSConst.FILTERBAR_PREFIX + 'header-plus');
            this._plus$.click(function(e) {
                _this._plusClickHandler(e);
            });
            var label = config.label ? config.label : LangManager.get('VIZ_FILTERBAR_ADD_FILTERS');
            this._description$ = $(document.createElement("span")).text(label).appendTo(this._div);
            this._description$.addClass(CSSConst.FILTERBAR_PREFIX + "description");
        }

        var layoutRight = 0;
        if(config && config.showClearIcon){
            this._clearIcon$ = $(document.createElement("div"));
            this._clearIcon$.addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16');
            this._clearIcon$.addClass(CSSConst.FILTERBAR_PREFIX + 'clear-disabled');
            this._clearIcon$.attr({
                "title" : LangManager.get('VIZ_FILTERBAR_CLEAR_FILTERS')
                });
            this._clearIcon$.appendTo(this._div);
            layoutRight = 24;
        }

        this._layout$ = $(document.createElement('div')).appendTo(this._div);
        this._layout$.addClass(CSSConst.FILTERBAR_PREFIX + 'layout');
        this._layout$.addClass(CSSConst.COMMON_PREFIX + 'scrollable');
        this._layout$.addClass(CSSConst.COMMON_PREFIX + 'scrollable-y');
        this._layout$.css({
            'max-height' : this._visualLines * filterItemHeightDefault,
            'right' : layoutRight
        });
        this._filterItemsContainer$ = $(document.createElement('div')).appendTo(this._layout$);
        this._filterItemsContainer$.addClass(CSSConst.FILTERBAR_PREFIX + 'filterItems-container');
        if(this._headerVisible === true) {
            this._layout$.hide();
        } else {
            this._layout$.css({'left' : '0px'});
        }

        //support drop filter
        if (!config || config.enableDrop !== false) {
            $(this._div).droppable({
                tolerance : 'pointer',
                accept : '.' + DragManager.DRAGGABLE_CLASS_ANALYSIS,
                over : $.proxy(this._dragOver, this),
                out : $.proxy(this._dragOut, this),
                drop : $.proxy(this._drop, this)
            });
        }
    };
    /**
     * Get/Set available AnalysisObjects for object picker popup UI
     *
     * @method sap.viz.controls.filterbar.FilterBar.prototype.analysisObjectsForPicker
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     *
     */
    FilterBar.prototype.analysisObjectsForPicker = function(analysisObjects) {
        if(arguments.length > 0) {
            if (analysisObjects != null && !VizUtils.isArrayOfAnalysisObject(analysisObjects)) {
                return;
            }

            this._allAnalyses = analysisObjects;
        } else {
            return this._allAnalyses;
        }
    };

    FilterBar.prototype._plusClickHandler = function(e) {
        var dom = document.createElement('div');

        var newFilterItems = this._filterItems;
        if(this._filterItemsFilter) {
        	newFilterItems = this._filterItemsFilter(this._filterItems);
        }
        var feedList = new FeedList(dom, this._allAnalyses, FeedItemType.DIMENSION, newFilterItems);
        feedList.addEventListener(FeedListEvent.ITEM_SELECTED, function(event) {
            var analysisObject = event.data.selectedItem;
            if(analysisObject) {
                this._addFilterItem(analysisObject);
            }
        }, this);
        var offset = this._plus$.offset();
        feedList.open({
            x : offset.left,
            y : offset.top,
            shelfWidth : this._plus$.width()
        });
    };

	/**
	 * User define function. reference to AppView.prototype._filterAssignedValue
	 * @param : filterItemsFilter, the function which return the new filterItems
	 */
	FilterBar.prototype.setfilterItemsFilter = function(filterItemsFilter){
		this._filterItemsFilter = filterItemsFilter;
	};

    FilterBar.prototype._isExist = function(analysisObject){
        var id = analysisObject.id();
        if(analysisObject.type() === AnalyticalType.HIERARCHY){
            id = analysisObject.selectedHierarchyLevel().analysis().id();
        }
        for(var i=0; i<this._filterItems.length; ++i){
            if(this._filterItems[i].id() === id){
                return true;
            }
        }
        return false;
    };
    FilterBar.prototype._getDroppableAnalysisObject = function(token) {
        if(!token || !token.analysisObject) {
            return null;
        }

        var analysisObject = token.analysisObject;
        var tokenAnalyticalType = analysisObject.type();
        if(AnalyticalType.compatible(AnalyticalType.DIMENSION, tokenAnalyticalType)
            && tokenAnalyticalType !== AnalyticalType.MND
            && !this._isExist(analysisObject)
            && !analysisObject.aggregationType()) {
            return analysisObject;
        } else {
            return null;
        }
    };
    /**
     * Hanlder for drag over.
     */
    FilterBar.prototype._dragOver = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(!token) {
            return;
        }

        var analysisObject = this._getDroppableAnalysisObject(token);
        if(analysisObject) {
            token.currentAction(DropAction.ACCEPT_AS_COPY);
        } else {
            token.currentAction(DropAction.DENY);
        }
    };
    /**
     * Hanlder for drag out.
     */
    FilterBar.prototype._dragOut = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(token) {
            token.currentAction(DropAction.DENY);
        }
    };
    /**
     * Handler for drag drop.
     */
    FilterBar.prototype._drop = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(!token) {
            return;
        }

        var analysisObject = this._getDroppableAnalysisObject(token);
        if(analysisObject) {
            token.currentAction(DropAction.ACCEPT_AS_COPY);
            this._addFilterItem(analysisObject);
        } else {
            token.currentAction(DropAction.DENY);
        }

        token.dropTarget(this._dom);
    };
    /**
     * add filter item to vizModel.
     * @param {sap.viz.controls.common.feeds.AnalysisObject} analysisObject
     */

    FilterBar.prototype._addFilterItem = function(analysisObject) {
        this._dispatchEvent(new FilterBarEvent(FilterBarEvent.REQUEST_ADD_FILTER, this, { "analysisObject" : analysisObject}));
    };

    FilterBar.prototype._updateClearIcon = function(){
        if(!this._clearIcon$){
            return;
        }
        var filterItems = this._filterItems;
        var showClearIcon = false;
        if(filterItems ){
            for(var i=0; i<filterItems.length; i++){
                if(!filterItems[i].disableRemoval()){
                    showClearIcon = true;
                    break;
                }
            }
        }
        var _this = this;
        this._clearIcon$.unbind("click");
        if(showClearIcon){
            this._clearIcon$.addClass(CSSConst.FILTERBAR_PREFIX + 'clear');
            this._clearIcon$.removeClass(CSSConst.FILTERBAR_PREFIX + 'clear-disabled');
            this._clearIcon$.click(function(e) {
                _this._dispatchEvent(new FilterBarEvent(FilterBarEvent.CLEAR_FILTERS, _this, null));
            });
        } else {
            this._clearIcon$.addClass(CSSConst.FILTERBAR_PREFIX + 'clear-disabled');
            this._clearIcon$.removeClass(CSSConst.FILTERBAR_PREFIX + 'clear');
        }
    };
    /**
     * update Filter
     */
    FilterBar.prototype._filtersChanged = function() {
        if(this._filterItemsContainer$) {
            this._filterItemsContainer$.empty();
        }
        this._updateClearIcon();
        var filterItems = this._filterItems;
        if(!filterItems || filterItems.length == 0) {
            this._updateDescription();
            this._updateFilterItemContainer();
            return this;
        }
        if(this._headerVisible === true) {
            this._description$.hide();
            this._layout$.show();
        }
        this._updateFilterItemContainer();
    };
    /**
     * change properties value to number
     * @param {String} string
     */
    FilterBar.prototype._stringToNumber = function(value) {
        if(!value) {
            return 0;
        }
        return parseInt(value.replace('px', ''));
    };
    /**
     * update size
     */
    FilterBar.prototype._validateSize = function() {
        var filterItem$ = $('.' + CSSConst.FILTERBAR_PREFIX + 'filter-item');
        if(filterItem$.length == 0) {
            return this;
        }
        filterItem$.css({
            'width' : filterItemWidthDefault
        });
        this._updateFilterItemsWidth();
    };
    /**
     * judge there is enough space nor not
     */
    FilterBar.prototype._needAdjust = function() {
        var height = this._filterItemsContainer$.innerHeight();
        var needChanged = height > filterItemHeightDefault;
        if(needChanged) {
            return true;
        } else {
            return false;
        }
    };
    /**
     * update the filterItemContainer
     *
     */
    FilterBar.prototype._updateFilterItemContainer = function() {
        var filterItems = this._filterItems;
        var i;
        for( i = 0;i < this._renderers.length;i++) {
            this._renderers[i].destroy();
        }
        for( i = 0;i < filterItems.length;i++) {
            var filterItem$ = $(document.createElement('div')).appendTo(this._filterItemsContainer$);
            this._renderers[i] = new FilterRenderer(filterItems[i],filterItem$, this._uiConfig.showInformationIcon, this._uiConfig.informationIconTooltip);
            this._renderers[i].addEventListener(FilterBarEvent.REQUEST_REMOVE_FILTER, this._dispatchFilterEvent, this);
            this._renderers[i].addEventListener(FilterBarEvent.REQUEST_EDIT_FILTER, this._dispatchFilterEvent, this);
        }
        this._updateFilterItemsWidth();
        return this;
    };

    FilterBar.prototype._dispatchFilterEvent = function(e){
        this._dispatchEvent(e);
    };

    FilterBar.prototype._updateFiltersTitle = function() {
        var updataFunc = function(index, filter$) {
            var name$ = $('#filterName', filter$);
            if(name$.length === 0) {
                return;
            }
            name$.css({
                'width' : 'auto'
            });
            var title$ = name$.parent();
            var countInfo$ = $('#countInfo', filter$);
            var namePosition = name$.position();
            var nameWidth = name$.width() + namePosition.left + 2;
            var titleWidth = title$.width() - ImageWidth;
            var countWidth = countInfo$.width();
            var width = Math.min(nameWidth, titleWidth - countWidth);
            name$.css({
                'width' : width - namePosition.left
            });
            countInfo$.css({
                'left' : width
            });
        };
        $('.' + CSSConst.FILTERBAR_PREFIX + 'filter-item',this._div).each(updataFunc);
        $('.' + CSSConst.FILTERBAR_PREFIX + 'global-filter-item',this._div).each(updataFunc);
    };
    /**
     * change filter items width
     */
    FilterBar.prototype._updateFilterItemsWidth = function() {
        var data;
        if(this._filterItemsContainer$.children().length === 0) {
            this._updateDescription();
            var height = this._filterItemsContainer$.innerHeight();
            if( height !== filterItemHeightDefault){
                data = {
                    'height' : filterItemHeightDefault
                };
                this._dispatchEvent(new FilterBarEvent(FilterBarEvent.SIZE_CHANGED, this, data));
            }
            return this;
        }
        if(!this._needAdjust()) {
            data = {
                'height' : filterItemHeightDefault
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.SIZE_CHANGED, this, data));
            this._updateFiltersTitle();
            return this;
        }
        //adjust the filterItems width
        var changeCount = 0;
        var itemWidth = filterItemWidthDefault;
        var filterItem$ = this._filterItemsContainer$.children();
        while(this._needAdjust() && changeCount < 2) {
            changeCount++;
            itemWidth = itemWidth * filterItemShrinks;
            filterItem$.css({
                'width' : itemWidth
            });
        }
        //adjust vizframe header height
        if(this._needAdjust()) {
            data = {
                'height' : this._avaliableHeightForHeader()
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.SIZE_CHANGED, this, data));
            if(data.height < this._filterItemsContainer$.outerHeight()) {
                $(this._layout$).scrollTop(this._filterItemsContainer$.outerHeight());
            }
        }
        //filterItemsContainer height may change automatic when header height was changed ,so we need judgment again
        if(!this._needAdjust()) {
            data = {
                'height' : filterItemHeightDefault
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.SIZE_CHANGED, this, data));
        };
        this._updateFiltersTitle();
        return this;
    };

    FilterBar.prototype._avaliableHeightForHeader = function() {
        var containerHeight = this._filterItemsContainer$.outerHeight();
        var minHeight = filterItemHeightDefault - 2;
        var maxHeight = filterItemHeightDefault;
        var num = this._visualLines - 1;
        for(var i = 2;i <= this._visualLines;i++) {
            if(minHeight * i <= containerHeight && containerHeight <= maxHeight * i) {
                num = i - 1;
                break;
            }
        }
        var marginBottom = 2;
        return num * minHeight + maxHeight + marginBottom;
    };
    /**
     * update filter bar description
     */
    FilterBar.prototype._updateDescription = function() {
        var filterItems = this._vizModel().filterItems();
        if(filterItems.length === 0 && this._headerVisible === true) {
            this._description$.show();
            this._layout$.hide();
        }
    };
    return FilterBar;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/PropertyEditorConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on

    var PropertyEditorConfig = {};

    PropertyEditorConfig.instance = function(assetsRoot) {
        return {
            'icons' : [{
                'id' : 'bus',
                'svg' : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" ' +
                        'width="100%" height="100%" viewBox="0 0 309 293" enable-background="new 0 0 309 293" xml:space="preserve">'+
                        '<path d="M195.781,200.678v5.801h72.909V5.316H42.312v201.163h72.899v-5.801H195.781z M221.002,176.428'+
                            'c-11.501,0-20.826-9.325-20.826-20.809c0-11.518,9.325-20.826,20.826-20.826s20.834,9.309,20.834,20.826'+
                            'C241.836,167.103,232.503,176.428,221.002,176.428z M159.738,27.415h95.483v57.129h-95.483V27.415z M55.785,27.415h95.475'+
                            'v57.129H55.785V27.415z M92.741,174.805c-11.518,0-20.83-9.326-20.83-20.827s9.312-20.817,20.83-20.817'+
                            'c11.476,0,20.81,9.316,20.81,20.817S104.217,174.805,92.741,174.805z"/>'+
                            '<polygon points="195.781,218.038 195.781,225.137 115.212,225.137 115.212,218.038 29.091,218.038'+
                             '29.091,243.811 281.89,243.811 281.89,218.038"/>'+
                             '<rect x="115.212" y="206.479" width="80.569" height="11.56"/>'+
                             '<rect x="42.312" y="243.811" width="36.434" height="33.843"/>'+
                             '<rect x="232.244" y="243.811" width="36.446" height="33.843"/>'+
                             '<rect x="274.7" y="55.975" width="30.301" height="56.292"/>'+
                             '<rect x="5.001" y="55.975" width="30.297" height="56.292"/></svg>'
            },{
                'id' : 'plane',
                'svg' : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" '+
                        'width="100%" height="100%" viewBox="0 0 424.876 469.719" enable-background="new 0 0 424.876 469.719" xml:space="preserve">'+
                        '<path d="M211.131,4.251c6.051-0.543,12.363,5.176,19.721,25.602c7.393,20.47,7.188,41.583,7.193,42.477v70.454'+
                        'l36.368,33.614l0.03-5.229c0.03-3.354,1.335-7.684,3.661-10.167c0.616-0.656,1.469-0.897,2.385-0.9h14.942'+
                        'c0.9,0.001,1.771,0.234,2.376,0.9c2.287,2.519,3.55,6.806,3.512,10.167v28.655l30.799,27.212l0.027-2.894'+
                        'c0.012-3.364,1.316-6.443,3.651-8.926c0.622-0.658,1.479-1.065,2.376-1.06h14.954c0.886,0.006,1.763,0.398,2.358,1.06'+
                        'c2.305,2.513,3.367,5.757,3.347,9.113v26.129l61.135,51.113c0.694,0.614,0.915,1.506,0.909,2.445v25.433'+
                        'c-0.012,1.152-0.625,2.225-1.64,2.775c-1.009,0.568-2.245,0.568-3.245-0.024l-122.26-70.578l-55.687-17.585v104.766'+
                        'c-0.117,15.592-2.816,25.786-2.931,26.218l-4.263,15.474l58.095,53.767c0.635,0.613,1.291,1.454,1.281,2.355v15.894'+
                        'c-0.009,0.993-0.47,1.939-1.281,2.544c-0.793,0.61-1.816,0.805-2.783,0.557l-67.872-17.462l-0.876,4.971'+
                        'c-0.165,0.844-0.656,1.672-1.275,1.994c-0.773,0.402-1.4,0.635-2.25,0.432l-2.759-0.504l-2.81,0.504'+
                        'c-0.86,0.194-1.442,0.059-2.163-0.432c-0.721-0.482-1.233-1.147-1.401-1.994l-0.801-4.971l-67.659,17.462'+
                        'c-0.979,0.258-1.997,0.051-2.805-0.557c-0.775-0.626-1.22-1.541-1.218-2.544v-15.894c0.003-0.91,0.564-1.739,1.218-2.355'+
                        'l58.184-53.767l-4.077-15.474c-0.064-0.258-2.64-10.63-2.516-26.218V244.037l-57.453,17.585L7.249,332.2'+
                        'c-1.01,0.587-2.236,0.614-3.245,0.024c-0.994-0.565-1.607-1.614-1.595-2.775v-25.433c0.014-0.949,0.607-1.828,1.307-2.445'+
                        'l58.987-51.113v-28.236c0.024-3.369,1.505-4.519,3.834-7.005c0.618-0.654,1.476-1.068,2.384-1.06H83.87'+
                        'c0.915,0.008,1.76,0.382,2.374,1.06c2.279,2.505,3.527,3.822,3.499,7.206l-0.015,4.614l31.402-27.212l0.207-28.655'+
                        'c0.014-3.354,1.308-7.661,3.64-10.167c0.618-0.643,1.489-0.911,2.376-0.9h14.958c0.901,0.009,1.76,0.237,2.363,0.9'+
                        'c2.302,2.516,3.544,6.808,3.513,10.167l-0.033,5.229l36.929-33.614V71.981c0,0-1.081-22.023,6.593-42.388'+
                        'C199.329,9.287,205.091,3.617,211.131,4.251z"/></svg>'
            }],
            'enableTitle' : false
        };
    };

    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_PROPERTYEDITOR, PropertyEditorConfig);
    return PropertyEditorConfig;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/helpers/CSSHelper',[
    'jquery'],
function($) {
// @formatter:on
    var CSSHelper = {};
    CSSHelper.FontCSSProperties = ["font-family","font-size","font-weight","fill","font-style"];
    CSSHelper.FontProperties = ["fontFamily","fontSize","fontWeight","fontColor","fontStyle"];
    
    CSSHelper.cssTofont = function(cssFont){
        var font = {};
        for(var i=0; i<CSSHelper.FontCSSProperties.length; ++i){
            font[CSSHelper.FontProperties[i]] = cssFont[CSSHelper.FontCSSProperties[i]];
        }
        return font;
    };
    
    CSSHelper.fontToCss = function(font) {
        var css = "{";
        for(var i=0; i<CSSHelper.FontCSSProperties.length; ++i){
            if(font.hasOwnProperty(CSSHelper.FontProperties[i])){
                css += CSSHelper.FontCSSProperties[i]+ ":" + font[CSSHelper.FontProperties[i]] + ";";
            }
        }
        css += "}";
        return css;
    };

    return CSSHelper;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/helpers/VizPropertiesHelper', [
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/propertyeditor/helpers/CSSHelper'
 ], function(LangManager, ChartTypeUtil, CSSHelper) {
    // @formatter:on
        var VizPropertiesHelper = {};

        VizPropertiesHelper.Type_Boolean = "boolean";
        VizPropertiesHelper.Type_Font = "font";
        VizPropertiesHelper.Type_Separator = "separator";
        VizPropertiesHelper.Text_Alignment = "alignment";
        VizPropertiesHelper.Text_Format = "format";

        function createTextWithFont(text, path, css, alignmentPath){
            var result = {
                path : path,
                type : VizPropertiesHelper.Type_Boolean,
                text : text,
                children : [ {
                    path : path,
                    cssClass : css,
                    cssProperties : CSSHelper.FontCSSProperties,
                    type : VizPropertiesHelper.Type_Font
                } ]
            };
            if(alignmentPath){
                result.children.push({
                    path : alignmentPath,
                    type : VizPropertiesHelper.Text_Alignment
                });
            }
            return result;
        }

        function createSeparator(text, path){
            return {
                path : path,
                text : text,
                type : VizPropertiesHelper.Type_Separator
            };
        }

        function addAxisProperties(name, result, text, cssName) {
            var upperCaseName = name.toUpperCase();
            text = text || "PROPERTY_EDITOR_" + upperCaseName;
            cssName = cssName || ".v-m-root .v-m-main .v-m-" + name;

            result.push( createSeparator(text, name + ".visible") );
            result.push( {
                path : name + ".visible",
                type : VizPropertiesHelper.Type_Boolean,
                text : "PROPERTY_EDITOR_SHOW_AXIS",
                children : [
                    createTextWithFont("PROPERTY_EDITOR_SHOW_AXIS_TITLE", name + ".title.visible", cssName + " .v-title"),
                    createTextWithFont("PROPERTY_EDITOR_SHOW_AXIS_LABEL", name + ".label.visible", cssName + " .v-label")
                ]
            });
        }

        function addGeneralProperties(properties, datalabelCss){
            properties.push(createSeparator("PROPERTY_EDITOR_GENERAL", "title.visible"));
            properties.push(createTextWithFont("PROPERTY_EDITOR_SHOW_CHART_TITLE", "title.visible", [".v-m-root .v-m-title .v-title", ".v-m-root .v-m-Title .v-title"]));
            properties.push(createTextWithFont("PROPERTY_EDITOR_SHOW_LEGEND", ["legend.visible","sizeLegend.visible"], [".v-m-root .v-m-legends .v-m-legend .v-label", ".v-m-root .v-m-legends .v-m-sizeLegend .v-label", ".v-m-root .v-m-ColorLegend .v-label"]));
            properties.push(createTextWithFont("PROPERTY_EDITOR_SHOW_DATA_LABEL", "dataLabel.visible", datalabelCss));
        }

        var defaultPropertiesDefinitions = null;
        function getDefaultPropertiesDefinitions(){
            if(!defaultPropertiesDefinitions){
                defaultPropertiesDefinitions = [];
                addGeneralProperties(defaultPropertiesDefinitions, ".v-m-root .v-m-main .v-m-datalabel .v-datalabel");
                addAxisProperties("xAxis", defaultPropertiesDefinitions);
                addAxisProperties("xAxis2", defaultPropertiesDefinitions);
                addAxisProperties("yAxis", defaultPropertiesDefinitions);
                addAxisProperties("yAxis2", defaultPropertiesDefinitions);
                addAxisProperties("zAxis", defaultPropertiesDefinitions);
                addAxisProperties("plotArea.valueAxis", defaultPropertiesDefinitions, "PROPERTY_EDITOR_VALUE_AXIS", ".v-m-root .v-m-main .v-m-plot");
                defaultPropertiesDefinitions.push(createSeparator("PROPERTY_EDITOR_POLAR_AXIS", "plotArea.polarAxis.title.visible"));
                defaultPropertiesDefinitions.push(createTextWithFont("PROPERTY_EDITOR_SHOW_AXIS_TITLE", "plotArea.polarAxis.title.visible", ".v-m-root .v-m-main .v-m-plot .v-polar-axis-title"));
            }
            return defaultPropertiesDefinitions;
        }


        var mutlChartPropertiesDefinitions = null;
        function getMutlChartPropertiesDefinitions(){
            if(!mutlChartPropertiesDefinitions){
                mutlChartPropertiesDefinitions = [];
                addGeneralProperties(mutlChartPropertiesDefinitions, ".v-m-root .v-m-main .v-m-plot .v-m-datalabel .v-datalabel");
                addAxisProperties("rowAxis", mutlChartPropertiesDefinitions, "PROPERTY_EDITOR_ROW_AXIS", ".v-m-root>.v-m-main>.v-m-yAxis");
                addAxisProperties("columnAxis", mutlChartPropertiesDefinitions, "PROPERTY_EDITOR_COLUMN_AXIS", ".v-m-root>.v-m-main>.v-m-xAxis2");
                addAxisProperties("xAxis", mutlChartPropertiesDefinitions, null, ".v-m-root .v-m-main .v-m-plot .v-m-xAxis");
                addAxisProperties("xAxis2", mutlChartPropertiesDefinitions, null, ".v-m-root .v-m-main .v-m-plot .v-m-xAxis2");
                addAxisProperties("yAxis", mutlChartPropertiesDefinitions, null, ".v-m-root .v-m-main .v-m-plot .v-m-yAxis");
                addAxisProperties("yAxis2", mutlChartPropertiesDefinitions, null, ".v-m-root .v-m-main .v-m-plot .v-m-yAxis2");
                addAxisProperties("plotArea.valueAxis", mutlChartPropertiesDefinitions, "PROPERTY_EDITOR_VALUE_AXIS", ".v-m-root .v-m-main .v-m-plot .v-m-plot");
                mutlChartPropertiesDefinitions.push(createSeparator("PROPERTY_EDITOR_POLAR_AXIS", "plotArea.polarAxis.title.visible"));
                mutlChartPropertiesDefinitions.push(createTextWithFont("PROPERTY_EDITOR_SHOW_AXIS_TITLE", "plotArea.polarAxis.title.visible", ".v-m-root .v-m-main .v-m-plot .v-m-plot .v-polar-axis-title"));
            }
            return mutlChartPropertiesDefinitions;
        }

        var _map = {};
        VizPropertiesHelper.register = function(vizType, properties) {
            if (vizType && properties) {
                _map[vizType] = properties;
            }
        };
        VizPropertiesHelper.getProperties = function(vizType) {
            if (_map.hasOwnProperty(vizType)) {
                return _map[vizType]();
            } else if(ChartTypeUtil.isMultipleChart(vizType)){
                return getMutlChartPropertiesDefinitions();
            } else {
                return getDefaultPropertiesDefinitions();
            }
        };

        var ConvertMap = {};
        ConvertMap[VizPropertiesHelper.Type_Font] = CSSHelper.fontToCss;

        VizPropertiesHelper.toCSSValue = function(dataType, value) {
            if(value == null){
                return value;
            }
            if (ConvertMap.hasOwnProperty(dataType)) {
                return ConvertMap[dataType](value);
            } else {
                return value;
            }
        };

        var FromCSSMap = {};
        FromCSSMap[VizPropertiesHelper.Type_Font] = CSSHelper.cssTofont;
        VizPropertiesHelper.fromCSSValue = function(dataType, value) {
            if(value == null){
                return value;
            }

            if (FromCSSMap.hasOwnProperty(dataType)) {
                return FromCSSMap[dataType](value);
            } else {
                return value;
            }
        };

        var NUMBER_CHART_DEFINITION  = null;
        function createNumberChartDefinition(){
            if(!NUMBER_CHART_DEFINITION){
                NUMBER_CHART_DEFINITION = [];
                NUMBER_CHART_DEFINITION.push({
                    path : "plotArea.valuePoint.label",
                    text : "NUMBERCHART_VALUE_NAME",
                    type : VizPropertiesHelper.Type_Separator
                });
                NUMBER_CHART_DEFINITION.push({
                    path : "plotArea.valuePoint.label",
                    type : VizPropertiesHelper.Type_Font
                });
                NUMBER_CHART_DEFINITION.push({
                    path : "plotArea.valuePoint.label.formatString",
                    type : VizPropertiesHelper.Text_Format
                });
                NUMBER_CHART_DEFINITION.push( createSeparator("NUMBERCHART_TITLE_NAME", "title.visible" ) );
                var titleDef = createTextWithFont("NUMBERCHART_SHOW_TITLE", "title.visible", ".v-m-root .v-m-title .v-title", "title.alignment");
                titleDef.children.push({
                    path : "title.layout.position",
                    text : 'PROPERTY_EDITOR_TITLE_POSITION',
                    type : "list",
                    items : [ {
                        key : "top",
                        value : LangManager.get('PROPERTY_EDITOR_TITLE_POSITION_TOP')
                    }, {
                        key : "bottom",
                        value : LangManager.get('PROPERTY_EDITOR_TITLE_POSITION_BOTTOM')
                    } ]
                } );
                NUMBER_CHART_DEFINITION.push(titleDef);
            }
            return NUMBER_CHART_DEFINITION;
        };

        VizPropertiesHelper.register('viz/number', createNumberChartDefinition);

        return VizPropertiesHelper;
    });

define('sap/viz/controls/propertyeditor/sections/PropertyViewFactory',[], function() {
    var PropertyViewFactory = {};

    PropertyViewFactory.produce = function(section, dom, uiConfig, vizProxy, propertyZones) {
        return new section.viewClass(dom, uiConfig, vizProxy, propertyZones);
    };

    return PropertyViewFactory;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/PickerEvent',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
function(OOUtil, Event) {
// @formatter:on
    var PickerEvent = function(type, target, data) {
        PickerEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.PickerEvent";
    };
    OOUtil.extend(PickerEvent, Event);

    PickerEvent.PICKED_ITEM_CHANGED = 'pickedItemChanged';
    PickerEvent.STATUS_CHANGED = "statusChanged";

    return PickerEvent;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/PickerBase',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent'
    ],
function(OOUtil, UIControl, PickerEvent) {
// @formatter:on
    var PickerBase = function(dom, pickedItem, config) {
        PickerBase.superclass.constructor.apply(this, arguments);

        this._pickedItem = pickedItem;
        this._config = config;
    };
    OOUtil.extend(PickerBase, UIControl);

    PickerBase.prototype.pickedItem = function(value) {
        if (arguments.length > 0) {
            this._pickedItem = value;
            return this;
        } else {
            return this._pickedItem;
        }
    };

    PickerBase.prototype.visible = function(value) {
        if (arguments.length > 0) {
            this._dom$.css("display", value ? "" : "none");
            this._onStatusChanged();
            return this;
        } else {
            return this._dom$.css("display") !== "none";
        }
    };

    PickerBase.prototype._onStatusChanged = function() {
        this._dispatchEvent(new PickerEvent(PickerEvent.STATUS_CHANGED, this, {
        }));
    };
    /**
     * Call from implementation class instance to dispatch event
     *
     * @param {Object} value
     */
    PickerBase.prototype._changePickedItem = function(value, changedItem) {
        if (value !== undefined) {
            this._pickedItem = value;
        }

        this._dispatchEvent(new PickerEvent(PickerEvent.PICKED_ITEM_CHANGED, this, {
            'pickedItem' : this._pickedItem,
            'changedItem' : changedItem
        }));
    };

    return PickerBase;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/SectionPicker',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/pickers/PickerBase'
    ],
function(OOUtil, PickerBase) {
// @formatter:on
    var SectionPicker = function(dom, pickedItem, config) {
        SectionPicker.superclass.constructor.apply(this, arguments);
        config = this._config || {};

        this._sectionMap = null;
        // Create children
        this._combobox = new sap.ui.commons.DropdownBox({
            'maxPopupItems': -1,
            'change' : $.proxy(function(oEvent) {
                this._changePickedItem(this._sectionMap[oEvent.oSource.getSelectedKey()]);
            }, this)
        });
        this._combobox.placeAt(dom);
        // Initialize
        this.sections(config.sections);
    };
    OOUtil.extend(SectionPicker, PickerBase);

    SectionPicker.prototype.sections = function(value) {
        this._sections = value || [];
        this._commitSections();
        return this;
    };

    SectionPicker.prototype._commitSections = function() {
        this._combobox.removeAllItems();

        this._sectionMap = {};
        var groupIndex = 0;
        this._sections.forEach($.proxy(function(s) {
            if (groupIndex !== s.groupIndex) {
                groupIndex = s.groupIndex;
                var item = new sap.ui.core.ListItem({
                    'enabled' : false,
                    'text' : '------'
                });
                item.setTooltip(new sap.ui.core.TooltipBase({text: ""}));
                this._combobox.addItem(item);
            }

            this._sectionMap[s.id] = s;
            this._combobox.addItem(new sap.ui.core.ListItem({
                'key' : s.id,
                'text' : s.caption
            }));
        }, this));
    };

    SectionPicker.prototype.pickedItem = function(value) {
        SectionPicker.superclass.pickedItem.apply(this, arguments);
        this._combobox.setSelectedKey(this._pickedItem.id);
    };

    return SectionPicker;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/events/PropertyEditorEvent',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
function(OOUtil, Event) {
// @formatter:on
    var PropertyEditorEvent = function(type, target, data) {
        PropertyEditorEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.propertyEditor.PropertyEditorEvent";
    };
    OOUtil.extend(PropertyEditorEvent, Event);

    /**
     * type: 'recentColorsChanged',
     * data: 'recentColors'
     */
    PropertyEditorEvent.RECENTCOLORS_CHANGED = "recentColorsChanged";

    return PropertyEditorEvent;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/ColorButton',[
],
function() {
// @formatter:on
    var _declare = function() {
        // Create a extend button for colorPalette.
        jQuery.sap.declare("sap.viz.controls.propertyeditor.pickers.ColorButton");
        sap.ui.commons.Button.extend("sap.viz.controls.propertyeditor.pickers.ColorButton", {
            metadata : {
                properties : {
                    color : {
                        type : "any",
                        defaultValue : "#FFFFFF"
                    },
                }
            },
            setColor : function(sValue) {
                // no full re-render required, just change the background color
                this.setProperty("color", sValue, true);
                this.$().css("background-color", sValue);
            },
            renderer : function(oRm, oControl) {
                oRm.addStyle("background-color", oControl.getColor());
                oRm.addClass("colorButton");
                sap.ui.commons.ButtonRenderer.render(oRm, oControl);
            }
        });
    };

    return {
        'create' : function(id, settings) {
            try {
                return new sap.viz.controls.propertyeditor.pickers.ColorButton(id, settings);
            } catch(e) {
                _declare();
                return arguments.callee.apply(this, arguments);
            }
        }
    };
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/ColorPicker',[
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/pickers/PickerBase',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/propertyeditor/events/PropertyEditorEvent',
    'sap/viz/controls/propertyeditor/pickers/ColorButton'
    ],
function(CSSConst, OOUtil, PickerBase, LangManager, EventDispatcher, PropertyEditorEvent, ColorButton) {
// @formatter:on
    var ColorPicker = function(dom, pickedItem, config) {
        ColorPicker.superclass.constructor.apply(this, arguments);
        config = this._config || {};
        var noColor;
        if (this._pickedItem === null) {
            noColor = true;
        }else {
            noColor = false;
        }
        if (this._pickedItem === undefined) {
            this._pickedItem = 'rgba(0,0,0,1)';
        }

        this._pickedItemChanged = false;
        this._mode = config.mode || 'fill';
        this._needUpdate = true;
        this._viewsContainer$ = null;
        this._views = [];
        this._mdHandler = null;
        this._noColorText = null;
        this._resizeHandler = null;
        this._oRecentColorsPalette = null;
        this._pickContainer$ = $(document.createElement('div')).appendTo(dom).on('click', $.proxy(this._pickerBtnClickHandler, this));
        this._pickContainer$.addClass('sapUiTfBrd sapUiTfStd  sapUiTfCombo '+ CSSConst.PROPERTYEDITOR_PREFIX + 'colorpicker-pickercontainer');

        this._colorDiv$ = $(document.createElement('div')).appendTo(this._pickContainer$);
        this._imgDiv$ = $(document.createElement('div')).appendTo(this._pickContainer$);

        if (!noColor) {
            this._colorDiv$.css({
                'background-color': this._pickedItem
            });
        }
        this._imgDiv$.addClass('sapUiTfComboIcon');
        this._colorDiv$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'colorpicker-background-color');
    };
    ColorPicker._recentColors =[];
    ColorPicker._shouldExcludeRecentColors = {
        'rgba(0,0,0,0)': true
    } //Add more if it's necessary.
    ColorPicker._eventDispatch = new EventDispatcher();
    //Same with lumira colorpalette
    var CONSTCOLORPALETTE = [ "#000000", "#7F7F7F", "#ED1C24", "#FF7F27", "#FFF200", "#22B14C", "#00A2E8", "#3F48CC", "#A349A4",
                "#FFFFFF", "#C3C3C3", "#FFAEC9", "#FFC90E", "#EFE4B0", "#B5E61D", "#99D9EA", "#7092BE", "#C8BFE7" ];
    var CONSTCOLORPALETTEINRGBMODE =["rgba(0,0,0,1)","rgba(127,127,127,1)","rgba(237,28,36,1)","rgba(255,127,39,1)","rgba(255,242,0,1)",
    "rgba(34,177,76,1)","rgba(0,162,232,1)","rgba(63,72,204,1)","rgba(163,73,164,1)","rgba(255,255,255,1)","rgba(195,195,195,1)","rgba(255,174,201,1)",
    "rgba(255,201,14,1)","rgba(239,228,176,1)","rgba(181,230,29,1)","rgba(153,217,234,1)","rgba(112,146,190,1)","rgba(200,191,231,1)"]
    var MAXRECENTCOLORSLENGTH = 9;

    OOUtil.extend(ColorPicker, PickerBase);

    ColorPicker.prototype._pickerBtnClickHandler = function() {
        if (this._viewsContainer$ !== null) {
            this._destroyControls();
            return;
        }
        var viewsContainer$ = this._viewsContainer$ = $(document.createElement('div'));
        viewsContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'colorpicker-views-container');
        this._locate();
        viewsContainer$.appendTo(document.body);
        var cpContainer$ = $(document.createElement('div'));
        var btnContainer$ = $(document.createElement('div'));
        btnContainer$.css({
            'width' : '100%',
        }).appendTo(viewsContainer$);

        this._oTogglePickerBtn = new sap.ui.commons.ToggleButton({
            text: LangManager.get('PROPERTY_EDITOR_COLORPICKER_MORE'), //$NON-NLS-1$
            press: function(oEvent) {
                var oSrc = oEvent.getSource();
                if (oSrc.getPressed()) {
                    this._oPicker.$().addClass("visible");
                    this._locate(); //$NON-NLS-1$
                } else {
                    this._oPicker.$().removeClass("visible");
                    this._locate(); //$NON-NLS-1$
                }
            }.bind(this)
        });
        this._oPicker = new sap.ui.commons.ColorPicker({
            colorString : _parseAlphaString(this._pickedItem ? this._pickedItem : 'rgba(0,0,0,1)')
        });

        this._oPicker.attachLiveChange($.proxy(this._handlerColorPickerChange, this));
        this._oPalette = this._createColorPalette(CONSTCOLORPALETTE);
        this._oPalette.placeAt(viewsContainer$);
        var labelContainer = $(document.createElement('div'));
        var oLabel = new sap.ui.commons.Label();
        oLabel.setText(LangManager.get('PROPERTY_EDITOR_COLORPICKER_RECENTCOLORS'));
        oLabel.addStyleClass('recentColorLabel');
        oLabel.placeAt(labelContainer);
        labelContainer.appendTo(viewsContainer$);
        this._oRecentColorsPalette = this._createRecentColorsPalette();
        this._oRecentColorsPalette.placeAt(viewsContainer$);
        this._oTogglePickerBtn.placeAt(cpContainer$);
        this._oPicker.placeAt(cpContainer$);
        this._needUpdate = true;
        cpContainer$.appendTo(viewsContainer$);
        viewsContainer$.fadeIn();
        this._addEventListeners();
        this._mdHandler = $.proxy(this._mousedownHandler, this);
        $(document).on('mousedown', this._mdHandler);
        $(window).on('blur', this._mdHandler);
    };

    ColorPicker.prototype._handleColorPalettePickerChange = function(oEvent){
        var target = oEvent.getParameters().id;
        this._pickedItem = $('#'+target)[0].title;
        this._needUpdate = false;
        this._oPicker.setColorString(this._pickedItem);
        //TODO: Do not use private ui5 function when ui5 have public update state method.
        if(this._oPicker._processRGBchanges){
            this._oPicker._processRGBchanges();
        }
        this._updateColor();
        this._needUpdate = true;

    };


    ColorPicker.prototype._handleNoColorClicked = function(){
        this._pickedItem = 'rgba(0,0,0,0)';
        this._updateColor();
    };

    var parseColor = function(oEvent){
        var p = oEvent.getParameters();
        if(p.h === 360){
            //Work around for UI5 bug: when h === 360, ui5 color picker will give a wrong color, so here we make this correct.
            //When h ==360, means that b should equal to 0 not 255.
            //What I found in ui5 code is that they don't treat 360 correctly. Here I follow ui5's solution.
            this._oPicker.oHueField.setValue(359.9);
            if(this._oPicker._handleHueValueChange){
                this._oPicker._handleHueValueChange();
            }
            return;
        }

        return 'rgba(' + p.r + ',' + p.g + ',' + p.b + ',' + ((!!p.alpha || p.alpha === 0) ? p.alpha : 1) + ')';
    }

    ColorPicker.prototype._handlerColorPickerChange = function(oEvent){
        if(!this._needUpdate){
            return;
        }

        this._pickedItem = parseColor(oEvent);
        this._pickedItemChanged = true;
        this._updateColor();
    };

    ColorPicker.prototype._updateRecentColor = function(oEvent){

        this._updateRecentColorPalette();
    };

    ColorPicker.prototype._updateColor = function(){
        this._changePickedItem(this._pickedItem);
        this._colorDiv$.css({
            'background-color':this._pickedItem
        })
    }
    ColorPicker.prototype._locate = function() {
        //align offset with Lumira
        if(this._viewsContainer$ !== null && this._pickContainer$ !== null) {

            var offsetContainer = $('.viz-controls-propertyeditor-main').offset();
            var offset = this._pickContainer$.offset();
            var bodyHeight  = $('body').height();
            var viewHeight = this._viewsContainer$.height();
            viewHeight = viewHeight > 100 ? viewHeight : 100;
            var offsetTop = offset.top + 32 + viewHeight < bodyHeight - 20 ? offset.top + 26 : offset.top - viewHeight - 12
            this._viewsContainer$.css({
                'left' : offsetContainer.left - 10,
                'top' : offsetTop < 0 ? 0 : offsetTop
            });

        }
    };
    ColorPicker.prototype._resizer = function(event) {
        if(!event.data.invalidateSize) {
            setTimeout($.proxy(function() {
                event.data.invalidateSize = false;
                this._locate();
            }, this), 1000 / 24);
        }
        event.data.invalidateSize = true;
    };
    ColorPicker.prototype._addEventListeners = function() {
        this._resizeHandler = $.proxy(this._resizer, this);
        $(window).resize({
            'invalidateSize' : false
        }, this._resizeHandler);
    };
    ColorPicker.prototype._mousedownHandler = function(oEvent) {
        if (this._viewsContainer$ !== null && $(oEvent.target).closest(this._viewsContainer$).length <= 0
            && $(oEvent.target).closest(this._pickContainer$).length <= 0) {
            this._destroyControls();
            this._updateRecentColor();
        }
    }
    ColorPicker.prototype._destroyControls = function() {
        $(document).off('mousedown', this._mdHandler);
        $(window).off('blur', this._mdHandler);
        $(window).off('resize', this._resizeHandler);
        this._views.forEach(function(view) {
            view.destroy();
        });
        if(!!this._noColorText){
            this._noColorText.destroy();
        }
        this._viewsContainer$.empty().detach();
        this._views = [];
        this._viewsContainer$ = null;
        this._mdHandler = null;
        this._resizeHandler = null;
    };

    var createButton = function(color, pressCallback, scope){
        var color = color===undefined?'transparent':color;
        var oColorButton = ColorButton.create({
            color: color,
            tooltip: color
        });
        oColorButton.attachPress(function (oEvent) {
            pressCallback.call(scope,oEvent);
        });
        oColorButton.addStyleClass('colorButton');
        return oColorButton;
    }

    ColorPicker.prototype._createColorPalette = function(colorPalette){
        var colorLength = colorPalette.length;
        var container = $(document.createElement('div'));
        for(var i = 0; i<colorLength;i++){
            var oColorButton = createButton(colorPalette[i], this._handleColorPalettePickerChange, this);
            oColorButton.placeAt(container);

        }
        var noColorButton  = ColorButton.create({
                color: "transparent",
                tooltip: LangManager.get('PROPERTY_EDITOR_COLORPICKER_NOCOLOR'),
            });
        noColorButton.attachPress(function (oEvent) {
                this._handleNoColorClicked();
        }.bind(this));
         noColorButton.addStyleClass('colorButton');
         noColorButton.placeAt(container);

        this._noColorText = new sap.ui.core.HTML("noColorText", {
            content: "<span class='sapUiBtnS noColorText'>"+LangManager.get('PROPERTY_EDITOR_COLORPICKER_NOCOLOR')+"</span>"
        });
        this._noColorText.attachBrowserEvent('click',function(){
            this._handleNoColorClicked();
        }.bind(this));
        this._noColorText.placeAt(container);

        return {
            placeAt: function(dom$){
                container.appendTo(dom$);
            }
        };
    };

    ColorPicker.prototype._createRecentColorsPalette = function(){
        var container = $(document.createElement('div'));
        container.addClass('recentColorsContainer');
        var recentColorsLength = ColorPicker._recentColors.length>MAXRECENTCOLORSLENGTH?MAXRECENTCOLORSLENGTH:ColorPicker._recentColors.length;
        var colorButtonArray = [];
        for(var i = 0; i<recentColorsLength;i++){
            var oColorButton = createButton(ColorPicker._recentColors[i], this._handleRecentColorChange, this);
            oColorButton.placeAt(container);
            colorButtonArray.push(oColorButton);

        }

        return {
            placeAt: function(dom$){
                container.appendTo(dom$);
            },
            update: function(){
                var i;
                for(i = 0; i < recentColorsLength; i++){
                    if (i === 0) {
                        colorButtonArray[i].addStyleClass("colorButtonSelected");
                    } else {
                        colorButtonArray[i].removeStyleClass("colorButtonSelected");
                    }
                    colorButtonArray[i].setColor(ColorPicker._recentColors[i]);
                    colorButtonArray[i].setTooltip(ColorPicker._recentColors[i]);
                }
                for(i = recentColorsLength; i < MAXRECENTCOLORSLENGTH; i++){
                    if(!!ColorPicker._recentColors[i]){
                        var oColorButton = createButton(ColorPicker._recentColors[i], this._handleRecentColorChange, this);
                        oColorButton.placeAt(container);
                        colorButtonArray.push(oColorButton);
                    }
                }
            }
        };
    };

    ColorPicker.prototype._checkExcludedRecentColor = function(){
        var exclued =false;
        if(this._pickedItem)
        {
            if(ColorPicker._shouldExcludeRecentColors.hasOwnProperty(this._pickedItem)
                && ColorPicker._shouldExcludeRecentColors[this._pickedItem])
            {
                exclued = true;
            }
        }
        return exclued;
    }
    ColorPicker.prototype._handleRecentColorChange = function(oEvent){
        var target = oEvent.getParameters().id;
        this._pickedItem = $('#'+target)[0].title;
        this._pickedItemChanged = true;
        this._needUpdate = false;
        this._oPicker.setColorString(this._pickedItem);
        this._updateRecentColorPalette();
        //TODO: Do not use private ui5 function when ui5 have public update state method.
        if(this._oPicker._processRGBchanges){
            this._oPicker._processRGBchanges();
        }
        this._updateColor();
        this._needUpdate = true;
    };

    ColorPicker.prototype._updateRecentColorPalette = function(){
        if(this._pickedItemChanged === false){
            return;
        }
        this._pickedItemChanged = false;
        if(CONSTCOLORPALETTE.indexOf(this._pickedItem)>=0
            || CONSTCOLORPALETTEINRGBMODE.indexOf(this._pickedItem)>=0
            || this._checkExcludedRecentColor()){
            return;
        }
        var index = ColorPicker._recentColors.indexOf(this._pickedItem);
        if(index>=0){
            ColorPicker._recentColors.splice(index,1);
        }
        ColorPicker._recentColors.splice(0,0,this._pickedItem);
        this._oRecentColorsPalette.update.call(this);
        ColorPicker._recentColors.length = ColorPicker._recentColors.length>MAXRECENTCOLORSLENGTH?MAXRECENTCOLORSLENGTH:ColorPicker._recentColors.length;

        var propertEditorevent = new PropertyEditorEvent(PropertyEditorEvent.RECENTCOLORS_CHANGED, this, ColorPicker._recentColors);
        ColorPicker._eventDispatch._dispatchEvent(propertEditorevent);

    }

    //UI5 ColorPicker doesn't accept 0 alpha, pares 0 alpha to 0.0
    var _parseAlphaString = function(colorString) {
        var c = colorString;
        if (c.substr(0, 4) === 'rgba') {
            c = c.substr(4);
            c = c.replace('(', '');
            c = c.replace(')', '');
            c = c.split(',');
            if (Number(c[3]) === 0) {
                c[3] = '0.0';
                c = c.join(',');
                c = 'rgba(' + c + ')';
                return c;
            }
        }
        return colorString;
    }

    return ColorPicker;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/AlignmentPicker',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/propertyeditor/pickers/PickerBase',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent'],
function(OOUtil, CSSConst, PickerBase, PickerEvent) {
// @formatter:on
    var AlignmentPicker = function(dom, pickedItem, config) {
        AlignmentPicker.superclass.constructor.apply(this, arguments);

        this._dom$;

        this._buttons = {};
        this._createChildren();

        pickedItem = pickedItem ? pickedItem : ALIGNMENTCENTER;
        this._switchUIHandler(pickedItem);
    };
    var ALIGNMENTLEFT = 'left';
    var ALIGNMENTCENTER = 'center';
    var ALIGNMENTRIGHT = 'right';
    OOUtil.extend(AlignmentPicker, PickerBase);

    AlignmentPicker.prototype._createChildren = function () {
        this._pickerContainer$ = $(document.createElement('div')).appendTo(this._dom$);
        this._pickerContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row ' + CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-padding-bottom')
        this._buttons = {
            left: this._addButton(ALIGNMENTLEFT),
            center: this._addButton(ALIGNMENTCENTER),
            right: this._addButton(ALIGNMENTRIGHT)
        };
    };

    AlignmentPicker.prototype._switchUIHandler = function (alignType) {
        for (var key in this._buttons) {
            var node$ = this._buttons[key];
            node$.removeClass(CSSConst.PROPERTYEDITOR_PREFIX + 'alignmentpicker-selected-' + key);
            if (key === alignType) {
                node$.removeClass(CSSConst.PROPERTYEDITOR_PREFIX + 'alignmentpicker-unselected-' + key);
                node$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'alignmentpicker-selected-' + key);
            } else {
                node$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'alignmentpicker-unselected-' + key);
            }
        }
    };

    AlignmentPicker.prototype._addButton = function (alignType) {
        var node$ = $(document.createElement('div'));
        node$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'alignmentpicker-button');
        node$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'icon');
        node$.appendTo(this._pickerContainer$);
        node$.on('click', $.proxy(function (oEvent) {
                this._switchUIHandler(alignType);
                this.pickedItem(alignType);
                this._changePickedItem();
            }, this));

        return node$;
    };
    return AlignmentPicker;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/FontPicker',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/propertyeditor/pickers/PickerBase',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/AlignmentPicker'],
function(OOUtil, CSSConst, utils, PickerBase, PickerEvent, ColorPicker, AlignmentPicker) {
// @formatter:on
    var FontPicker = function(dom, pickedItem, config, customizedSizes) {
        FontPicker.superclass.constructor.apply(this, arguments);
        config = this._config || {};
        // default font sizes
        this._sizes = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28];

        this._pickedItem = {
            fontFamily : pickedItem ? _parseCSSFontFamily(pickedItem.fontFamily) : undefined,
            fontSize : pickedItem ? pickedItem.fontSize : undefined,
            fontWeight : pickedItem ? pickedItem.fontWeight : undefined,
            fontColor : pickedItem ? pickedItem.fontColor : undefined,
            fontStyle : pickedItem ? pickedItem.fontStyle : undefined
        };

        this._dom$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fontpicker');

        // Create children
        var container$ = this._createItemRow(2, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

        // Font family
        var familyContainer$ = $(container$.children()[0]).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fontpicker-family');
        var family = new sap.ui.commons.DropdownBox({
            'width' : familyContainer$.width() + 'px',
            'selectedKey' : this._pickedItem.fontFamily,
            'items' : this._genFamilyItems(),
            'change' : $.proxy(function(oEvent) {
                this._pickedItem.fontFamily = oEvent.oSource.getSelectedKey();
                this._changePickedItem(this._pickedItem, {
                    'fontFamily' : this._pickedItem.fontFamily
                });
            }, this)
        }).placeAt(familyContainer$);

        if (this._pickedItem.fontFamily === null) {
            utils.defer(function() {
                sap.ui.commons.TextField.prototype.setValue.apply(family, [' '])
            });
        } else {
            this._pickedItem.fontFamily = family.getSelectedKey();
        }

        // Font size
        var sizeContainer$ = $(container$.children()[1]).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fontpicker-size');
        // customize font sizes
        if (utils.isArray(customizedSizes)) {
            this._sizes = customizedSizes;
        }
        var size = this._size = new sap.ui.commons.ComboBox({
            'width' : sizeContainer$.width() + 'px',
            'selectedKey' : this._pickedItem.fontSize ? parseInt(this._pickedItem.fontSize) : null,
            'items' : this._genSizeItems(),
            'change' : $.proxy(function(oEvent) {
                var sizeValue = oEvent.oSource.getValue();
                if (isNaN(sizeValue)) {
                    this._updateSize(this._sizes[0]);
                } else {
                    this._updateSize(oEvent.oSource.getSelectedKey() || parseInt(sizeValue));
                }
                this._changePickedItem(this._pickedItem, {
                    'fontSize' : this._pickedItem.fontSize
                });
            }, this)
        }).placeAt(sizeContainer$);

        this._updateSize(this._pickedItem.fontSize !== null ? parseInt(this._pickedItem.fontSize) : null);

        // Highlight text when focus in
        utils.defer(function() {
            var input$ = $('input', size.$());
            input$.on('click', function() {
                input$.get(0).select();
            });
        });

        // Font weight
        container$ = this._createItemRow(3, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');
        var weight = new sap.ui.commons.ToggleButton({
            'text' : 'B',
            'pressed' : this._pickedItem.fontWeight === 'bold' ? true : false,
            'press' : $.proxy(function(oEvent) {
                this._pickedItem.fontWeight = oEvent.oSource.getPressed() ? 'bold' : 'normal';
                this._changePickedItem(this._pickedItem, {
                    'fontWeight' : this._pickedItem.fontWeight
                });
            }, this)
        }).placeAt($(container$.children()[0]));
        weight.addStyleClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fontpicker-button');

        if (this._pickedItem.fontWeight !== null) {
            this._pickedItem.fontWeight = weight.getPressed() ? 'bold' : 'normal';
        }

        // Font style
        var style = new sap.ui.commons.ToggleButton({
            'text' : '/',
            'pressed' : this._pickedItem.fontStyle === 'oblique' ? true : false,
            'press' : $.proxy(function(oEvent) {
                this._pickedItem.fontStyle = oEvent.oSource.getPressed() ? 'oblique' : 'normal';
                this._changePickedItem(this._pickedItem, {
                    'fontStyle' : this._pickedItem.fontStyle
                });
            }, this)
        }).placeAt($(container$.children()[1]));
        style.addStyleClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fontpicker-button');

        if (this._pickedItem.fontStyle !== null) {
            this._pickedItem.fontStyle = style.getPressed() ? 'oblique' : 'normal';
        }

        // Font color
        if (config.showColorPicker === false) {
            container$.children().eq(2).hide();
        }
        var color = new ColorPicker($(container$.children()[2]), this._pickedItem.fontColor, {
            'mode' : 'text'
        });
        color.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, function(event) {
            this._pickedItem.fontColor = event.data.pickedItem;
            this._changePickedItem(this._pickedItem, {
                'fontColor' : this._pickedItem.fontColor
            });
        }, this);

        if (this._pickedItem.fontColor !== null) {
            this._pickedItem.fontColor = color.pickedItem();
        }
    };
    OOUtil.extend(FontPicker, PickerBase);

    FontPicker.prototype._updateSize = function(value) {
        if (value) {
            this._pickedItem.fontSize = value + 'px';
            this._size.setValue(value);
        } else {
            this._size.setValue(' ');
        }
    };
    FontPicker.prototype._createItemRow = function(count, css) {
        var i, itemRow$, itemCell$;
        itemRow$ = $(document.createElement('div'));
        if (css) {
            itemRow$.addClass(css);
        }
        for ( i = 0; i < count; i++) {
            itemCell$ = $(document.createElement('div'));
            if (i === 0) {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell-wrap');
            } else {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            }

            itemCell$.appendTo(itemRow$);
        }
        itemRow$.appendTo(this._dom$);
        return itemRow$;
    };

    var _families = ['Arial', 'Courier', 'Georgia', 'Times New Roman', 'Trebuchet MS', 'Verdana'];

    FontPicker.prototype._genFamilyItems = function() {
        var items = [];
        _families.forEach(function(family) {
            items.push(new sap.ui.core.ListItem({
                'key' : family,
                'text' : family
            }));
        });
        return items;
    };

    FontPicker.prototype._genSizeItems = function() {
        var items = [];
        this._sizes.sort(function(a, b) {
            return a - b;
        });
        this._sizes.forEach(function(size) {
            items.push(new sap.ui.core.ListItem({
                'key' : size,
                'text' : size
            }));
        });
        return items;
    };

    var _parseCSSFontFamily = function(cssString) {
        if (!cssString) {
            return null;
        }

        var temp;
        for (var i in _families) {
            temp = _families[i];
            if (cssString.indexOf(temp) >= 0) {
                return temp;
            }
        }
        return cssString;
    };

    return FontPicker;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/SwitchPicker',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/pickers/PickerBase'],
function(OOUtil, PickerBase) {
// @formatter:on
    var SwitchPicker = function(dom, pickedItem, config) {
        SwitchPicker.superclass.constructor.apply(this, arguments);
        config = this._config || {};
        // Create children
        this._checkBox = new sap.ui.commons.CheckBox({
            'text' : config.text,
            'checked' : this._pickedItem,
            'change' : $.proxy(function(oEvent) {
                this._changePickedItem(this._checkBox.getChecked());
                this._onStatusChanged();
            },this)
        });
        this._checkBox.placeAt(dom);
    };
    OOUtil.extend(SwitchPicker, PickerBase);
    
    SwitchPicker.prototype.checked = function(checked){
        if (arguments.length > 0) {
            if (this._checkBox.getChecked() !== checked) {
                this._checkBox.setChecked(checked);
            }
            return this;
        } else {
            return this._checkBox.getChecked();
        }
    };
    
    SwitchPicker.prototype.enabled = function(enabled) {
        if (arguments.length > 0) {
            if (this._checkBox.getEnabled() !== enabled) {
                this._checkBox.setEnabled(enabled);
            }
            return this;
        } else {
            return this._checkBox.getEnabled();
        }
    };
    return SwitchPicker;
});
// @formatter:off
define('sap/viz/controls/propertyeditor/sections/PropertyViewBase',[
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/utils/Utils'],
function(VizPropertyZone, OOUtil, UIControl, Utils) {
// @formatter:on
    var PropertyViewBase = function(dom, uiConfig, vizProxy, propertyZones) {
        PropertyViewBase.superclass.constructor.apply(this, arguments);

        this._vizProxy = vizProxy;
        this._propertyZones = propertyZones;

        this._vizProxy.on("initialized.PropertyViewBase", $.proxy(function(e) {
            this._propertyChangedHandler(e);
        }, this));
    };
    OOUtil.extend(PropertyViewBase, UIControl);

    PropertyViewBase.prototype._createHelper = function(clazz, config) {
        return new clazz(config, {
            'view' : this,
            'dom$' : this._dom$,
            'proxy' : this._vizProxy,
            'queryProperty' : $.proxy(this._queryProperty, this),
            'queryProperties' : $.proxy(this._queryProperties, this),
            'updateProperty' : $.proxy(this._updateProperty, this),
            'updateProperties' : $.proxy(this._updateProperties, this)
        });
    };

    PropertyViewBase.prototype._queryProperty = function(propertyField) {
        var propertyFields = {};
        propertyFields[propertyField] = true;

        var result = this._queryProperties(propertyFields);

        return result ? result[propertyField] : undefined;
    };

    /**
     *
     * @param {Object} propertyFields
     * @param {Object} Optional, options
     * 	conflict: last
     */
    PropertyViewBase.prototype._queryProperties = function(propertyFields) {
        if (this._propertyZones) {
            return this._vizProxy.queryProperties({
                'propertyZones' : this._propertyZones,
                'propertyFields' : propertyFields,
                'chartType' : this._vizProxy._client().type()
            });
        } else {
            return this._vizProxy.queryProperties({
                'propertyFields' : propertyFields
            });
        }
    };

    PropertyViewBase.prototype._updateProperty = function(propertyField, value) {
        var properties = {};
        properties[propertyField] = value;

        this._updateProperties(properties);
    };

    PropertyViewBase.prototype._updateProperties = function(properties, keepNullValues, applyToAll) {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:update_properties_on_propertyviewbase');

        if (!keepNullValues) {
            this._filterNullValue(properties);
        }

        if (this._propertyZones) {
            if (applyToAll === true) {
                this._vizProxy.updateProperties({
                    'propertyZones' : [new VizPropertyZone(this._propertyZones[0].type())],
                    'properties' : properties,
                    'chartType' : this._vizProxy._client().type()
                });
            } else {
                var propertyZones = [];
                this._propertyZones.forEach($.proxy(function(propertyZone) {
                    propertyZones.push(propertyZone);
                }, this));
                this._vizProxy.updateProperties({
                    'propertyZones' : propertyZones,
                    'properties' : properties,
                    'chartType' : this._vizProxy._client().type()
                });
            }
        } else {
            this._vizProxy.updateProperties(properties);
        }

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:update_properties_on_propertyviewbase');
    };

    /*
     * Determine whether the selected property zones are covering all the possible same kind of zones.
     */
    PropertyViewBase.prototype._isAllSelected = function() {
        // TODO: Use new rules to get more practical result.
        if (this._propertyZones) {
            return this._propertyZones[0].context() === undefined;
        }

        return false;
    };

    /*
     * Filter out null values as mixed states don't need to update to chart.
     */
    PropertyViewBase.prototype._filterNullValue = function(properties) {
        for (var i in properties) {
            if (properties[i] === null) {
                delete properties[i];
            }
        }
    };

    PropertyViewBase.prototype._getExtraContext = function(contextName) {
        var i, extraCtx, first, hasDiff;
        if (this._propertyZones && this._propertyZones.length && this._propertyZones[0].extraContext()) {
            first = this._propertyZones[0].extraContext()[contextName];
            for ( i = 0; i < this._propertyZones.length; i++) {
                extraCtx = this._propertyZones[i].extraContext();
                if (extraCtx[contextName] !== first) {
                    hasDiff = true;
                    break;
                }
            }
        }
        if (!hasDiff) {
            return first;
        }
        return null;
    };

    PropertyViewBase.prototype.destroy = function() {
        this._vizProxy.off("initialized.PropertyViewBase");
        PropertyViewBase.superclass.destroy.apply(this, arguments);
    };

    PropertyViewBase.prototype._propertyChangedHandler = function(e) {

    };

    return PropertyViewBase;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/spin/SpinEvent',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
function(OOUtil, Event) {
// @formatter:on
    var SpinEvent = function(type, target, data) {
        SpinEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.SpinEvent";
    };
    OOUtil.extend(SpinEvent, Event);

    SpinEvent.CHANGED = 'changed';

    return SpinEvent;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/spin/Spin',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/KeyboardEventConst',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/propertyeditor/spin/SpinEvent'
],
function(OOUtil, CSSConst, KeyboardEventConst, UIControl, SpinEvent) {
// @formatter:on
    /* options:
        * value - the initial value
        * step - increment or decrement to the value, the default value is 1.
        * min - the minimum value.
        * max - the maximum value.
        * decimals - the default is 0.
     */
    var Spin = function(dom, options) {
        Spin.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.propertyeditor.spin.Spin";

        this._options = ( options != null ? options : {});

        if(!(this._options.hasOwnProperty('step'))) {
            this._options.step = 1;
        }

        if(!(this._options.hasOwnProperty('decimals'))) {
            this._options.decimals = 0;
        }

        if(!(this._options.hasOwnProperty('value'))) {
            this._options.value = 0;
        }

        this._createChildren();
    };
    OOUtil.extend(Spin, UIControl);

    Spin.prototype._createChildren = function() {
        var _container$ = $(document.createElement('div'));
        this._dom.append(_container$);
        var textBox = document.createElement('div');
        this._input = new sap.ui.commons.TextField({
            "width" : "100%"
        });
        this._input.setValue(this._options.value);
        this._input.placeAt($(textBox));
        _container$.append(textBox);

        var upButton = document.createElement('span');
        var upButtonContent = document.createElement('span');
        upButton.appendChild(upButtonContent);
        _container$.append(upButton);

        var downButton = document.createElement('span');
        var downButtonContent = document.createElement('span');
        downButton.appendChild(downButtonContent);
        _container$.append(downButton);

        _container$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'spin');
        $(textBox).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'spin-input');
        $(upButtonContent).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'icon');
        $(upButtonContent).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'spin-upButton-content');
        $(upButton).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'spin-upButton');
        $(downButtonContent).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'icon');
        $(downButtonContent).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'spin-downButton-content');
        $(downButton).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'spin-downButton');

        var me = this;
        this._input.attachChange(function(event) {
            me.setValue(me._input.getValue());
        });

        textBox.addEventListener('mousewheel', $.proxy(this._handleMouseWheel, this), this);
        textBox.addEventListener('DOMMouseScroll', $.proxy(this._handleMouseWheel, this), false);
        textBox.addEventListener('keydown', $.proxy(this._handleKeyDown, this), false);
        textBox.addEventListener('keypress', $.proxy(this._handleKeyPress, this), false);
        textBox.addEventListener('keyup', $.proxy(this._stop, this), false);

        upButton.addEventListener('mousedown', $.proxy(this._upButtonStart, this), false);
        upButton.addEventListener('mouseup', $.proxy(this._stop, this), false);
        upButton.addEventListener('mouseout', $.proxy(this._stop, this), false);

        downButton.addEventListener('mousedown', $.proxy(this._downButtonStart, this), false);
        downButton.addEventListener('mouseup', $.proxy(this._stop, this), false);
        downButton.addEventListener('mouseout', $.proxy(this._stop, this), false);
    }

    Spin.prototype.getValue = function() {
        return this._input.getValue();
    };

    Spin.prototype.setValue = function(value) {
        this._setValue(value, false);
    };
    
    Spin.prototype._setValue = function(value, updateUI) {
        var isConflict;
        if (value === null || value === '') {
            isConflict = true;
        }
        var value = parseFloat(value);
        if(isNaN(value)) {
            value = 0;
        }

        if(this._options.hasOwnProperty('min')) {
            value = Math.max(this._options.min, value);
        }

        if(this._options.hasOwnProperty('max')) {
            value = Math.min(this._options.max, value);
        }

        var sign = (value < 0 ? '-' : '');
        value = Math.abs(value);

        var multiplier = Math.pow(10, this._options.decimals);

        value = Math.round(value * multiplier);
        var integer = (value - value % multiplier) / multiplier;
        var fractional = '' + value % multiplier;

        var n = this._options.decimals - fractional.length;
        if(n > 0) {
            for (var i = 0; i < n; i++) {
                fractional = '0' + fractional;
            }
        }
        if (isConflict) {
            this._input.setValue('');
        } else {
            this._input.setValue(sign + integer + (this._options.decimals > 0 ? '.' + fractional : ''));

            if (!updateUI) {
                this._dispatchEvent(new SpinEvent(SpinEvent.CHANGED, this, {
                    'value' : this._input.getValue()
                }));
            }
        }
    };

    Spin.prototype.updateUI = function(value) {
        this._setValue(value, true);
    };
    
    Spin.prototype._handleMouseWheel = function(e) {
        if(e.target.id === this._input.sId) {
            if(e.wheelDelta) {
                this._start(e, e.wheelDelta > 1);
            } else if(e.detail) {
                this._start(e, e.detail < 1);
            }
            this._stop();
        }
    };

    Spin.prototype._handleKeyDown = function(e) {
        // check up or down key
        if(e.keyCode == KeyboardEventConst.UP)
            this._start(e, true);
        if(e.keyCode == KeyboardEventConst.DOWN)
            this._start(e, false);

    };

    Spin.prototype._handleKeyPress = function(e) {
        var keyCode = e.keyCode;

        // check special key
        if(keyCode == 0 || e.altKey || e.ctrlKey || e.metaKey) {
            return;
        }

        // check '-'
        if(keyCode == KeyboardEventConst.SUBTRACT && (!this._options.hasOwnProperty('min') || this._options.min < 0)) {
            return;
        }

        // check '.'
        if(keyCode == KeyboardEventConst.DECIMAL && this._options.decimals > 0) {
            return;
        }

        // check number
        if(keyCode >= KeyboardEventConst.NUM_0 && keyCode <= KeyboardEventConst.NUM_9) {
            return;
        }

        if(keyCode == KeyboardEventConst.ENTER) {
            this.setValue(this._input.getValue());
            return;
        }

        e.preventDefault();
    };

    Spin.prototype._upButtonStart = function(e) {
        e.preventDefault();
        this._start(e, true);
    };

    Spin.prototype._downButtonStart = function(e, up) {
        e.preventDefault();
        this._start(e, false)
    };

    Spin.prototype._start = function(e, up) {
        // if the field is disabled or we are already updating, return immediately
        if(this._timeout)
            return;

        this._curStep = ( up ? this._options.step : -this._options.step)
        this._delay = 500;
        this._update();
    };

    Spin.prototype._stop = function(e) {
        if(this._timeout) {
            clearTimeout(this._timeout);
            delete this._timeout;
        }
    };

    Spin.prototype._update = function() {
        var value = parseFloat(this._input.getValue());
        if(isNaN(value))
            value = 0;

        this.setValue(value + this._curStep);

        this._delay = Math.max(20, Math.floor(this._delay * 0.8));

        this._timeout = setTimeout($.proxy(function() {
            this._update();
        }, this), this._delay);
    };

    return Spin;
});

define('sap/viz/controls/propertyeditor/pickers/PSfixPicker',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/pickers/PickerBase'],
function(OOUtil, CSSConst, LangManager, PickerBase) {

    var PSfixPicker = function(dom, pickedItem) {
        PSfixPicker.superclass.constructor.apply(this, arguments);

        this._pickedItem = {
            fix: pickedItem ? pickedItem.fix : undefined,
            value : pickedItem ? pickedItem.value : ''
        };

        this._dom$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fixpicker-container')

        this._createChildren();
    }

    OOUtil.extend(PSfixPicker, PickerBase);

    PSfixPicker.LABEL_PREFIX = "Prefix";
    PSfixPicker.LABEL_SUFFIX = "Suffix";

    PSfixPicker.prototype._createChildren = function() {
        var item$ = this._createItemRow(2, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');
        var fixBox$ = $(item$.children()[0]).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fixpicker-fix');
        var fixBox = new sap.ui.commons.DropdownBox({
            'width' : fixBox$.width() + 'px',
            'selectedKey' : this._pickedItem.fix,
            'items' : genItems(),
            'change' : $.proxy(function(oEvent) {
                this._pickedItem.fix = oEvent.oSource.getSelectedKey();
                this._pickedItem.value = this._input.getValue();
                this._changePickedItem(this._pickedItem, {
                    'fix' : this._pickedItem.fix,
                    'value' : this._pickedItem.value ? this._pickedItem.value : ''
                });
            }, this)
        }).placeAt(fixBox$);

        var inputBox = $(item$.children()[1]).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fixpicker-input');
        this._input = new sap.ui.commons.TextField({
            "width" : "60px"
        }).placeAt(item$.children()[1]);
        this._input.setMaxLength(3);
        this._input.setValue(this._pickedItem.value);

        var me = this;
        this._input.attachChange(function(event) {
            var fixString = me._pickedItem.fix ? me._pickedItem.fix : PSfixPicker.LABEL_PREFIX;
            me._pickedItem.value = me._input.getValue();
            me._changePickedItem(me._pickedItem, {
                'fix' : fixString,
                'value' : me._pickedItem.value
            });
        });

    }

    var _fixes = [{"key": PSfixPicker.LABEL_PREFIX, "text": LangManager.get('PROPERTY_EDITOR_PSPICKER_PREFIX')},
                  {"key": PSfixPicker.LABEL_SUFFIX, "text": LangManager.get('PROPERTY_EDITOR_PSPICKER_SUFFIX')}];
    function genItems () {
        var items = [];
        _fixes.forEach(function(family) {
            items.push(new sap.ui.core.ListItem({
                'key' : family["key"],
                'text' : family["text"]
            }));
        });
        return items;
    };

    PSfixPicker.prototype._createItemRow = function(count, css) {
        var i, itemRow$, itemCell$;
        itemRow$ = $(document.createElement('div'));
        if (css) {
            itemRow$.addClass(css);
        }
        for ( i = 0; i < count; i++) {
            itemCell$ = $(document.createElement('div'));
            itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            itemCell$.appendTo(itemRow$);
        }
        itemRow$.appendTo(this._dom$);
        return itemRow$;
    };

    return PSfixPicker;

});

define('sap/viz/controls/propertyeditor/pickers/FormatPicker',
    ['sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/propertyeditor/pickers/PickerBase',
    'sap/viz/controls/propertyeditor/spin/Spin',
    'sap/viz/controls/propertyeditor/pickers/PSfixPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent'
    ],
function(OOUtil, LangManager, CSSConst, PickerBase, Spin, PSfixPicker, PickerEvent) {
    // CVOM KMBT formatting suffix
    var CVOM_FORMAT_UNIT_AUTO_SUFFIX = "u";
    var CVOM_FORMAT_UNIT_K_SUFFIX = "[CVOM#UNIT]k";
    var CVOM_FORMAT_UNIT_M_SUFFIX = "[CVOM#UNIT]m";
    var CVOM_FORMAT_UNIT_B_SUFFIX = "[CVOM#UNIT]b";
    var CVOM_FORMAT_UNIT_T_SUFFIX = "[CVOM#UNIT]t";
    var CVOM_FORMAT_UNIT_SUFFIX = [CVOM_FORMAT_UNIT_AUTO_SUFFIX,
                                    CVOM_FORMAT_UNIT_K_SUFFIX,
                                    CVOM_FORMAT_UNIT_M_SUFFIX,
                                    CVOM_FORMAT_UNIT_B_SUFFIX,
                                    CVOM_FORMAT_UNIT_T_SUFFIX];

    var PREFIX_MARK = "[CVOM#PFIX]";
    var SUFFIX_MARK = "[CVOM#SFIX]";
    var MINUS_PLACEHOLDER = '#minus#';

    function parseFormatString(format) {
        var decimal = 0, dispNum = true, dispPercent = false, showSep = false;
        var useAbbr = false, abbrOption = undefined, unitFormtSuffix, unitFormatSuffixLen, mainformat, pIdx, zeroCount = 0, i;
        var prefix = null, suffix = null, unitSuffix;
        //For prefix/suffix, because user input max length is 3,
        //need packaging with [$*], so, the prefix/suffix max length is 6

        if (format) {
            // Replace '-''s placeholder, value keep consistent with PSfixPicker.MINUS_PLACEHOLDER
            format = format.replace(/#minus#/g, '-');
            var MARKER_LEGNTH = 11;
            // parse out the prefix
            var sIdx = format.indexOf(PREFIX_MARK);
            var eIdx = format.lastIndexOf(PREFIX_MARK);
            if (sIdx >= 0 && eIdx >=0 && sIdx !== eIdx) {
                prefix = format.substring(sIdx + MARKER_LEGNTH, eIdx);
                format = format.substring(eIdx + MARKER_LEGNTH);
            }

            // parse out the suffix
            sIdx = format.indexOf(SUFFIX_MARK);
            eIdx = format.lastIndexOf(SUFFIX_MARK);
            if (sIdx >= 0 && eIdx >=0 && sIdx !== eIdx) {
                suffix = format.substring(sIdx + MARKER_LEGNTH, eIdx);
                format = format.substring(0, sIdx);
            }

            // show as percent
            var formatLength = format.length;
            if (format.substring(formatLength - 1) === '%') {
                dispPercent = true;
                dispNum = false;
                mainformat = format.substring(0, formatLength - 1);
            } else {
                dispPercent = false;
                dispNum = true;
                mainformat = format;
                // parese KMBT format suffix
                for(i=0; i<CVOM_FORMAT_UNIT_SUFFIX.length; i++){
                    unitSuffix = CVOM_FORMAT_UNIT_SUFFIX[i];
                    unitFormtSuffixLen = unitSuffix.length;
                    unitFormtSuffix = format.substring(formatLength - unitFormtSuffixLen);
                    if (unitSuffix === unitFormtSuffix) {
                        useAbbr = true;
                        abbrOption = unitSuffix;
                        mainformat = format.substring(0, formatLength - unitFormtSuffixLen);
                        break;
                    }
                }

                if (mainformat.indexOf(',') > -1) {
                    showSep = true;
                }
            }

            pIdx = mainformat.indexOf(".");
            if (pIdx > -1) {
                fraction = mainformat.substring(pIdx);

                for (i = 1, zeroCount = 0; i < fraction.length; i++) {
                    if (fraction.charAt(i) === '0') {
                        zeroCount++;
                    } else {
                        break;
                    }
                }
            }
            decimal = zeroCount;
        }

        return {
            decimal : decimal,
            displayAsNumber : dispNum,
            displayAsPercent : dispPercent,
            showSep : showSep,
            useAbbr : useAbbr,
            abbrOption : abbrOption,
            prefix : prefix,
            suffix : suffix
        };
    }

    function getPSfix(value, fixString) {
        if (value) {
            // Workaround for number formatting to support '-'
            // correspond with replaced string in number.js -- Num.prototype._drawValuePoint
            value = value.replace(/-/g, MINUS_PLACEHOLDER);
            if (fixString === PSfixPicker.LABEL_PREFIX) {
                return PREFIX_MARK + value + PREFIX_MARK;
            } else if (fixString === PSfixPicker.LABEL_SUFFIX) {
                return SUFFIX_MARK + value + SUFFIX_MARK;
            }
        }
        return null;
    }

    function genFormatString(formatItems) {
        var decimal = formatItems["decimal"], dispNum = formatItems["displayAsNumber"];
        var dispPercent = formatItems["displayAsPercent"], showSep = formatItems["showSep"];
        var useAbbr = formatItems["useAbbr"], abbrOption = formatItems["abbrOption"], formatString = "", i;
        var prefix = getPSfix(formatItems['prefix'], PSfixPicker.LABEL_PREFIX);
        var suffix = getPSfix(formatItems['suffix'], PSfixPicker.LABEL_SUFFIX);

        if (decimal && !isNaN(Number(decimal))) {
            decimal = Number(decimal);
            if (decimal > 0) {
                formatString += ".";
                while (decimal--) {
                    formatString += "0";
                }
            }
        }

        if (dispNum) {
            formatString = (showSep ? "#,##0" : "###0") + formatString;
            if (useAbbr) {
                switch (abbrOption) {
                case CVOM_FORMAT_UNIT_AUTO_SUFFIX:
                    formatString += CVOM_FORMAT_UNIT_AUTO_SUFFIX;
                    break;
                case CVOM_FORMAT_UNIT_K_SUFFIX:
                case CVOM_FORMAT_UNIT_M_SUFFIX:
                case CVOM_FORMAT_UNIT_B_SUFFIX:
                case CVOM_FORMAT_UNIT_T_SUFFIX:
                    formatString += abbrOption;
                default:
                }
            }
        } else if (dispPercent) {
            formatString = "0" + formatString + "%";
        }
        if (prefix) {
            formatString = prefix + formatString;
        }

        if (suffix) {
            formatString = formatString + suffix;
        }

        return formatString;
    }

    var FormatPicker = function(dom, formatString) {
        FormatPicker.superclass.constructor.apply(this, arguments);

        try {
            this._formatItem = parseFormatString(formatString);
        } catch(e) {
            this._formatItem = {};
        }

        this._createChildren();
    };

    OOUtil.extend(FormatPicker, PickerBase);

    FormatPicker.prototype._createChildren = function() {
        // Create children
        // this._dom$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'formatpicker ');
        var child$, grandChild$;
        // decimal
        child$ = $(document.createElement('div'));
        child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
        child$.appendTo(this._dom$);
        // decimal label
        var decimallabel = new sap.ui.commons.Label( {
            text : LangManager.get('FORMAT_PICKER_DECIMAL')
        });
        decimallabel.placeAt(child$);
        // decimal input
        child$ = $(document.createElement('div'));
        // child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'formatpicker-decimal-len');
        child$.appendTo(this._dom$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-padding-bottom');
        child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
        var decimalValue = new Spin(child$, {min: 0, max: 10, value: this._formatItem.decimal});
        decimalValue.addEventListener("changed", $.proxy(function (event) {
                this._formatItem["decimal"] = event.data.value;
                this._pickedItem = genFormatString(this._formatItem);
                this._changePickedItem();
        }, this));

        // format radio Group
        child$ = $(document.createElement('div')).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
        child$.appendTo(this._dom$);
        // display as number
        var displayAsNumber = new sap.ui.commons.RadioButton( {
            text : LangManager.get('FORMAT_PICKER_DISPLAY_NUMBER'),
            groupName : 'formatradio',
            selected : this._formatItem.displayAsNumber,
            select : $.proxy(function(e) {
                this._formatItem["displayAsNumber"] = true;
                this._formatItem["displayAsPercent"] = false;
                updateUIStatus.apply(this);
                this._pickedItem = genFormatString(this._formatItem);
                this._changePickedItem();
            }, this)
        }).placeAt(child$);
        // display as number, settings
        child$ = $(document.createElement('div'));
        child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1 ' + CSSConst.PROPERTYEDITOR_PREFIX + 'formatpicker-number');
        child$.appendTo(this._dom$);
        // show separator setting
        grandChild$ = $(document.createElement('div'));
        grandChild$.appendTo(child$);
        var showSeparatorCtrl = new sap.ui.commons.CheckBox( {
            text : LangManager.get('FORMAT_PICKER_SHOW_SEP'),
            checked : this._formatItem.showSep,
            change : $.proxy(function(e) {
                this._formatItem["showSep"] = e.oSource.getChecked();
                this._pickedItem = genFormatString(this._formatItem);
                this._changePickedItem();
            }, this)
        }).placeAt(grandChild$);
        // show by unit setting
        grandChild$ = $(document.createElement('div'));
        grandChild$.appendTo(child$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
        var useAbbrCtrl = new sap.ui.commons.CheckBox( {
            text : LangManager.get('FORMAT_PICKER_SHOW_BY_UNIT'),
            'width' : grandChild$.width() + 'px',
            checked : this._formatItem.useAbbr,
            change : $.proxy(function(e) {
                this._formatItem["useAbbr"] = e.oSource.getChecked();
                this._formatItem["abbrOption"] = useAbbrDrop.getSelectedKey();
                updateUIStatus.apply(this);
                this._pickedItem = genFormatString(this._formatItem);
                this._changePickedItem();
            }, this)
        }).placeAt(grandChild$);
        // show by unit setting, dropdown
        grandChild$ = $(document.createElement('div'));
        grandChild$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row ' + CSSConst.PROPERTYEDITOR_PREFIX + 'formatpicker-dropdown');
        grandChild$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
        grandChild$.appendTo(child$);
        var useAbbrDrop = new sap.ui.commons.DropdownBox( {
            'width' : grandChild$.width() + 'px',
            'items' : this._createAbbrOptions(),
            selectedKey : this._formatItem.abbrOption || CVOM_FORMAT_UNIT_AUTO_SUFFIX,
            change : $.proxy(function(e) {
                this._formatItem["abbrOption"] = e.oSource.getSelectedKey();
                this._pickedItem = genFormatString(this._formatItem);
                this._changePickedItem();
            }, this)
        }).placeAt(grandChild$);

        // show as percent
        child$ = $(document.createElement('div'));
        child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
        child$.appendTo(this._dom$);
        var displayAsPercentage = new sap.ui.commons.RadioButton( {
            text : LangManager.get('FORMAT_PICKER_DISPLAY_PERCENT'),
            groupName : 'formatradio',
            selected : this._formatItem.displayAsPercent,
            select : $.proxy(function(e) {
                this._formatItem["displayAsNumber"] = false;
                this._formatItem["displayAsPercent"] = true;
                updateUIStatus.apply(this);
                this._pickedItem = genFormatString(this._formatItem);
                this._changePickedItem();
            }, this)
        }).placeAt(child$);

        // prefix and suffix group
        child$ = $(document.createElement('div'));
        child$.appendTo(this._dom$);
        var fix, value;
        if (this._formatItem.prefix && this._formatItem.prefix !== '') {
            fix = 'Prefix';
            value = this._formatItem.prefix;
        } else if (this._formatItem.suffix && this._formatItem.suffix !== '') {
            fix = 'Suffix';
            value = this._formatItem.suffix;
        }
        var psPicker = new PSfixPicker(child$, {'fix': fix, 'value': value});
        psPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, $.proxy(function (event) {
            var valueObj = event.data.changedItem;
            this._formatItem["prefix"] = valueObj.fix === PSfixPicker.LABEL_PREFIX ? valueObj.value : null;
            this._formatItem["suffix"] = valueObj.fix === PSfixPicker.LABEL_SUFFIX ? valueObj.value : null;
            this._pickedItem = genFormatString(this._formatItem);
            this._changePickedItem();
        }, this));

        function updateUIStatus() {
            useAbbrCtrl.setEnabled(this._formatItem["displayAsNumber"]);
            useAbbrDrop.setEnabled(this._formatItem["displayAsNumber"] && this._formatItem["useAbbr"]);
            showSeparatorCtrl.setEnabled(this._formatItem["displayAsNumber"]);
        }

        updateUIStatus.apply(this);
    };

    FormatPicker.prototype._createAbbrOptions = function() {
        var items = [];
        var abbrs = [ {
            key : CVOM_FORMAT_UNIT_AUTO_SUFFIX,
            value : LangManager.get('FORMAT_PICKER_UNIT_AUTO')
        }, {
            key : CVOM_FORMAT_UNIT_K_SUFFIX,
            value : LangManager.get('FORMAT_PICKER_UNIT_K')
        }, {
            key : CVOM_FORMAT_UNIT_M_SUFFIX,
            value : LangManager.get('FORMAT_PICKER_UNIT_M')
        }, {
            key : CVOM_FORMAT_UNIT_B_SUFFIX,
            value : LangManager.get('FORMAT_PICKER_UNIT_B')
        }, {
            key : CVOM_FORMAT_UNIT_T_SUFFIX,
            value : LangManager.get('FORMAT_PICKER_UNIT_T')
        } ];
        abbrs.forEach(function(abbr) {
            items.push(new sap.ui.core.ListItem( {
                'key' : abbr.key,
                'text' : abbr.value
            }));
        });
        return items;
    };
    /**
     * Analysis format string on a single data value
     */
    FormatPicker.analysisFormatString = function (num) {
        if (num === undefined || num === null) {
            return;
        }
        var numString = num.toString();
        var decimal = 0;
        if (numString.indexOf('.') >= 0) {
            decimal = numString.length - 1 - numString.indexOf('.');
        }
        var ret = '0';
        for (var i = 0; i < decimal; i++) {
            if (i === 0) {
                ret = '0.';
            }
            ret = ret.concat('0');
        }
        return ret;
    };

    return FormatPicker;
});

define('sap/viz/controls/propertyeditor/pickers/ListPicker', [ 'sap/viz/controls/common/utils/OOUtil', 'sap/viz/controls/common/constants/CSSConst',
        'sap/viz/controls/propertyeditor/pickers/PickerBase', 'sap/viz/controls/propertyeditor/pickers/PickerEvent'],
        function(OOUtil, CSSConst, PickerBase, PickerEvent) {
            var ListPicker = function(dom, pickItem, config) {
                ListPicker.superclass.constructor.apply(this, arguments);
                this._pickedItem = pickItem;
                this._createChildren(config);
            };

            OOUtil.extend(ListPicker, PickerBase);

            ListPicker.prototype._createChildren = function(config) {
                // Create children
                this._dom$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'listpicker');
                var child$ = $(document.createElement('div'));
                child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
                child$.appendTo(this._dom$);
                var label = new sap.ui.commons.Label( {
                    text : config.text
                }).placeAt(child$);

                child$ = $(document.createElement('div'));
                child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'listpicker-dropdown');
                child$.appendTo(this._dom$);
                var dropDown = new sap.ui.commons.DropdownBox( {
                    'width' : child$.width() + 'px',
                    'items' : this._createOptions(config.items),
                    selectedKey : this._pickedItem,
                    change : $.proxy(function(e) {
                        this._pickedItem = e.oSource.getSelectedKey();
                        this._changePickedItem();
                    }, this)
                }).placeAt(child$);
            };

            ListPicker.prototype._createOptions = function(list) {
                var items = [];
                if (list) {
                    list.forEach(function(abbr) {
                        items.push(new sap.ui.core.ListItem( {
                            'key' : abbr.key,
                            'text' : abbr.value
                        }));
                    });
                }
                return items;
            };

            return ListPicker;
        });

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/VizChartView',[
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/propertyeditor/helpers/VizPropertiesHelper',
    'sap/viz/controls/propertyeditor/pickers/FontPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/pickers/SwitchPicker',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
     'sap/viz/controls/common/events/Event',
     'sap/viz/controls/propertyeditor/pickers/FormatPicker',
     'sap/viz/controls/propertyeditor/pickers/ListPicker',
     'sap/viz/controls/propertyeditor/pickers/AlignmentPicker'
], function(CSSConst, OOUtil, Utils, VizPropertiesHelper, FontPicker, PickerEvent, SwitchPicker, PropertyViewBase, Event, FormatPicker, ListPicker, AlignmentPicker) {
// @formatter:on
    var VizChartView = function(dom, uiConfig, vizProxy, propertyZone) {
        VizChartView.superclass.constructor.apply(this, arguments);
        this._createChildren();
    };
    OOUtil.extend(VizChartView, PropertyViewBase);

    var PickerMap = {
        "boolean" : SwitchPicker,
        "font" : FontPicker,
        "alignment" : AlignmentPicker,
        "format" : FormatPicker,
        "list" : ListPicker
    };

    VizChartView.prototype._createChildren = function() {
        this._area$ = $(document.createElement('div')).appendTo(this._dom$);
        this._area$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'views-container');
    };

    VizChartView.prototype.update = function(data, vizProxy) {
        this._vizProxy = vizProxy;
        this._updateChildren(data);
    };

    VizChartView.prototype._updateChildren = function(data) {
        this.destroy();
        var area$ = this._area$ = $(document.createElement('div')).appendTo(this._dom$);
        this._createUIChildren(area$, data, null);
    };

    VizChartView.prototype._createUIChildren = function(container$, children, parent, isChildren){
        for(var i = 0; i < children.length; i++){
            var data = children[i];
            var div$ = $(document.createElement('div')).appendTo(container$);
            var component = this._createUIControl(data, div$, parent);
            if(!component){
                continue;
            }
            if(data.hasOwnProperty("children")) {
                var childrenContainer$ = $(document.createElement('div')).appendTo(container$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + "vizchartview-childcontainer");
                this._createUIChildren(childrenContainer$, data.children, component, true);
                if (!isChildren) {
                    childrenContainer$.hide();
                }
            }
            if (!div$.hasClass(CSSConst.PROPERTYEDITOR_PREFIX + 'collapse') && !isChildren){
                div$.hide();
            }
        }

        if (!isChildren) {
            var event = new Object;
            event.currentTarget = $(container$.get(0).children[0]);
            if (event.currentTarget.length <= 0) {
                return;
            }
            this._collapseControlClickHandler(event);
        }
    };

    VizChartView.prototype._createCollapseControl = function(data, div$, parent) {
        var text = data.text || '';
        var title$ = (div$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'collapse');
        title$.data('isCollapsed', true);
        var arrowIcon$ = $(document.createElement('div')).addClass(CSSConst.COMMON_PREFIX + "UVBSharedSprite");
        arrowIcon$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + "collapse-icon");
        arrowIcon$.appendTo(title$);
        var titleText$ = $(document.createElement('div')).appendTo(title$);
        titleText$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + "title-text");
        var textLabel = new sap.ui.commons.Label({
            'text' : text
        });
        textLabel.placeAt(titleText$);
        title$.click(this._collapseControlClickHandler);
    }

    VizChartView.prototype._collapseControlClickHandler = function(event) {
        var _control$ = $(event.currentTarget);
        var isCollapsed = !_control$.data('isCollapsed');
        _control$.data('isCollapsed', isCollapsed);
        var _collapseComponent$ = $(_control$.get(0).children[0]);
        if (isCollapsed) {
            _collapseComponent$.removeClass(CSSConst.PROPERTYEDITOR_PREFIX + "expand-icon");
            _collapseComponent$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + "collapse-icon");
        } else {
            _collapseComponent$.removeClass(CSSConst.PROPERTYEDITOR_PREFIX + "collapse-icon");
            _collapseComponent$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + "expand-icon");
        }
        _hiddenOrShow(_control$, isCollapsed);
    }

    var _hiddenOrShow = function(collapseControl$, isCollapsed) {
        var div$ = collapseControl$.next();
        if (isCollapsed) {
            while (!div$.hasClass(CSSConst.PROPERTYEDITOR_PREFIX + 'collapse') && div$.length > 0) {
                div$.hide();
                div$ = div$.next();
            }
        } else {
            while (!div$.hasClass(CSSConst.PROPERTYEDITOR_PREFIX + 'collapse') && div$.length > 0) {
                div$.show();
                div$ = div$.next();
            }
        }
    }

    VizChartView.prototype._createUIControl = function(data, div$, parent) {
        var type = data.type;
        var component = null;
        if(PickerMap.hasOwnProperty(type)){
            if (type === 'font' && this._vizProxy.getType() === 'viz/number') {
                var customizedSizes = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];
                component = new PickerMap[type](div$[0], data.value, data, customizedSizes);
            } else if (type === 'format' && this._vizProxy.getType() === 'viz/number') {
                var rawData = this._vizProxy.getDataset().data().measureValuesGroup;
                if (rawData && rawData[0] && rawData[0].data && rawData[0].data[0] && rawData[0].data[0].values
                    && rawData[0].data[0].values[0] && rawData[0].data[0].values[0][0]) {

                    data.value = data.value || PickerMap[type].analysisFormatString(rawData[0].data[0].values[0][0]);
                }
                component = new PickerMap[type](div$[0], data.value, data);
                this._updateProperty(data.path, data.value);
            } else {
                component = new PickerMap[type](div$[0], data.value, data);
            }
            component.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, function(e) {
                this._pickedItemChangedHandler(e.data.pickedItem, data);
            }, this);

            if(parent && parent.pickedItem){
                component.visible(parent.pickedItem() && parent.visible());
                parent.addEventListener(PickerEvent.STATUS_CHANGED, function(){
                    component.visible(parent.pickedItem() && parent.visible());
                });
            }
        } else if(type === VizPropertiesHelper.Type_Separator){
            component = this._createCollapseControl(data, div$, parent);
        }

        return component;
    };

    VizChartView.prototype._pickedItemChangedHandler = function(pickedItem, data){
        if(data.cssClass ){
            var value = VizPropertiesHelper.toCSSValue(data.type, pickedItem);
            this._updateProperties({
                css : {
                    selector : data["cssClass"],
                    value : value
                }
            });
        } else {
            this._updateProperty(data.path, pickedItem);
        }
    };

    VizChartView.prototype._updateProperty = function(path, value){
        var properties = this._queryProperties();
        if(!Utils.isArray(path)){
            path = [path];
        }
        for(var n=0; n<path.length; ++n){
            var pathArray = path[n].split('.');
            var node = properties;
            var found = true;
            for (var i = 0; i < pathArray.length - 1; i++) {
                if (!node[pathArray[i]]) {
                    found = false;
                    break;
                }
                node = node[pathArray[i]];
            }
            if(found){
                var leaf = pathArray[pathArray.length - 1];
                node[leaf] = value;
            }
        }

        this._updateProperties({properties : properties});
    }

    VizChartView.prototype.destroy = function() {
         VizChartView.superclass.destroy.apply(this, arguments);
         this._area$.empty();
    };

    return VizChartView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/VizPropertyEditor',[
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/helpers/VizPropertiesHelper',
    'sap/viz/controls/propertyeditor/sections/PropertyViewFactory',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/pickers/SectionPicker',
    'sap/viz/controls/propertyeditor/sections/views/VizChartView'
],
function(VizControlBase, CSSConst, OOUtil, Utils, ChartTypeUtil, VizUtils,
    LangManager, VizPropertiesHelper, PropertyViewFactory,
    PickerEvent, SectionPicker,VizChartView) {
// @formatter:on

    /**
     * The VizPropertyEditor class is a control to build proprty editor.
     * @class sap.viz.controls.propertyeditor.VizPropertyEditor
     */
    var VizPropertyEditor = function(div, uiConfig) {
        VizPropertyEditor.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.propertyeditor.VizPropertyEditor';

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_vizpropertyeditor_control');

        this._title$ = null;
        this._sectionPicker = null;
        this._viewsContainer$ = null;
        this._views = [];

        this._createChildren();

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_vizpropertyeditor_control');
    };

    OOUtil.extend(VizPropertyEditor, VizControlBase);

    VizPropertyEditor.prototype._onConnect = function(vizUid, modelChanged) {
        VizPropertyEditor.superclass._onConnect.apply(this, arguments);
        this._updateChildren();
        this._vizProxy().addEventListener("ChartChanged", this._chartChangedHandler, this);
    };

    VizPropertyEditor.prototype._onDisconnect = function() {
        VizPropertyEditor.superclass._onDisconnect.apply(this, arguments);
        this._vizProxy().removeEventListener("ChartChanged", this._chartChangedHandler, this);
    };

    VizPropertyEditor.prototype._chartChangedHandler = function() {
        var vizType = this._vizModel().type();
        if (vizType) {
            this._updateVizChartView(vizType);
        }
    };

    VizPropertyEditor.prototype._createChildren = function() {
        var child$;

        this._dom$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'main');
        // Need to be fixed, the property of overflow should be controlled
        // by css file in the same way with info property editor,
        // but by now, some view in info property editor,
        // such as ColumnDataPointView, doesn't run it properly.
        this._dom$.css('overflow', 'auto');
        // Title
        if (this._uiConfig.enableTitle === true) {
            this._title$ = $(document.createElement('div'));
            this._title$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'title');
            this._title$.appendTo(this._dom$);
        }
        // Splitter
        /*child$ = $($('<div/>'));
        child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'title-splitter');
        child$.appendTo(this._dom$);*/
        // View container
        this._viewsContainer$ = $(document.createElement('div'));
        this._viewsContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'views-container');
        this._viewsContainer$.appendTo(this._dom$);
        this._vizChartView = new VizChartView(this._viewsContainer$, {}, this._vizProxy());
        // Update
        this._updateChildren();
    };

    VizPropertyEditor.prototype._updateChildren = function() {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:update_vizpropertyeditor');

        var vizType = this._vizModel().type();
        if (ChartTypeUtil.isInfoChart(vizType)) {
            return;
        }
        if (vizType) {
            // convert from real chart type to viz controls' type
            var mappingType = ChartTypeUtil.getVizType(vizType);
            if (this._title$) {
                this._title$.text(Utils.substitute(LangManager.get('PROPERTY_EDITOR_TITLE_PREFIX'), ChartTypeUtil.getVizTypeObject(mappingType).caption));
            }
            this._updateVizChartView(vizType);
        }

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:update_vizpropertyeditor');
    };

    VizPropertyEditor._getPropertyValue = function(properties, path) {
        var pathArray = path.split('.');
        var value = properties;
        for (var j = 0; j < pathArray.length; j++) {
            value = value[pathArray[j]];
            if (value == null) {
                break;
            }
        }
        return value;
    };

    VizPropertyEditor.prototype._getCssValue = function(css, properties, type) {
        var value = this._vizProxy().queryProperties({
            css : {
                selector : css,
                properties : properties
            }
        });
        if (value) {
            value = VizPropertiesHelper.fromCSSValue(type, value);
        }
        return value;
    };

    VizPropertyEditor.prototype._createPropertiesData = function(vizType, properties) {
        var propertyList = [];
        for (var i = 0; i < properties.length; ++i) {
            propertyList.push(properties[i].path);
        }
        var supportMap = VizUtils.hasProperties(vizType, propertyList);
        var data = [];
        var vizProperties = this._vizProxy().getProperties();
        if (!vizProperties) {
            return data;
        }
        for (var i = 0; i < properties.length; i++) {
            if (!supportMap[i]) {
                continue;
            }
            var item = Utils.clone(properties[i]);
            item.text = LangManager.get(item.text);
            var path = item.path;
            var value = null;
            if (item.cssClass) {
                value = this._getCssValue(item.cssClass, item.cssProperties, item.type);
            } else {
                if (Utils.isArray(path)) {
                    for (var n = 0; n < path.length; ++n) {
                        value = value || VizPropertyEditor._getPropertyValue(vizProperties, path[n]);
                    }
                } else {
                    value = VizPropertyEditor._getPropertyValue(vizProperties, path);
                }
            }

            item.value = value;
            if (item.hasOwnProperty("children")) {
                item.children = this._createPropertiesData(vizType, item.children);
            }
            data.push(item);
        }
        return data;
    };

    VizPropertyEditor.prototype._updateVizChartView = function(vizType) {
        var data = this._createPropertiesData(vizType, VizPropertiesHelper.getProperties(vizType));
        this._vizChartView.update(data, this._vizProxy());
    };

    VizPropertyEditor.prototype.destroy = function() {
        // Need to be fixed, the property of overflow should be controlled
        // by css file in the same way with info property editor,
        // but by now, some view in info property editor,
        // such as ColumnDataPointView, doesn't run it properly.
        this._dom$.css('overflow', 'visible');

        VizPropertyEditor.superclass.destroy.apply(this, arguments);
        this._vizChartView.destroy();
        this._viewsContainer$.empty();
    };

    return VizPropertyEditor;
});

define('sap/viz/controls/propertyeditor/sections/Section',[], function() {
    /**
     * Metadata of view
     */
    var Section = function(id, viewClass, caption, groupIndex, itemIndex) {
        this.id = id;
        this.viewClass = viewClass;
        this.caption = caption;

        this.groupIndex = groupIndex;
        this.itemIndex = itemIndex;
    };

    Section.CHART_AREA = 'sectionChartArea';
    Section.CHART_TITLE = 'sectionChartTitle';
    Section.PLOT_AREA = 'sectionPlotArea';
    Section.LEGEND = 'sectionLegend';
    Section.CATEGORY_AXIS = 'sectionCategoryAxis';
    Section.VALUE_AXIS = 'sectionValueAxis';
    Section.VALUE_AXIS_TITLE = 'sectionValueAxisTitle';
    Section.CATEGORY_AXIS_TITLE = 'sectionCategoryAxisTitle';
    Section.COLUMN_DATA_POINT = 'sectionColumnDataPoint';
    Section.COLUMN_DATA_LABEL = 'sectionColumnDataLabel';
    Section.DONUT_DATA_POINT = 'sectionDonutDataPoint';
    Section.DONUT_DATA_LABEL = 'sectionDonutDataLabel';
    Section.DONUT_PLOT_AREA = 'sectionDonutPlotArea';
    Section.LINE_DATA_POINT = 'sectionLineDataPoint';
    Section.LINE_DATA_LABEL = 'sectionLineDataLabel';
    Section.LINE = 'sectionLine';

    return Section;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/helpers/ViewHelperBase',[
], function() {
// @formatter:on
    var ViewHelperBase = function(config, target) {
        this._config = config;
        this._target = target;
    };

    return ViewHelperBase;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/helpers/TextViewHelper',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/propertyeditor/sections/helpers/ViewHelperBase',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/pickers/FontPicker'
], function(OOUtil, CSSConst, ViewHelperBase, PickerEvent, FontPicker) {
// @formatter:on
    var TextViewHelper = function(config, target) {
        TextViewHelper.superclass.constructor.apply(this, arguments);

        this._checkbox = null;
        this._fontPicker = null;

        this._createChildren();
    };
    OOUtil.extend(TextViewHelper, ViewHelperBase);

    TextViewHelper.prototype._createChildren = function() {
        // Checkbox
        var checkbox$ = $(document.createElement('div')).appendTo(this._target.dom$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

        var checkbox = this._checkbox = new sap.ui.commons.CheckBox({
            'text' : this._config.visible.text,
            'change' : $.proxy(this._checkboxChangedHandler, this)
        });
        checkbox.placeAt(checkbox$);

        // FontPicker
        var fontPicker$ = $(document.createElement('div')).appendTo(this._target.dom$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
        this._fontPicker = new FontPicker(fontPicker$.get(0), this._target.queryProperties({
            'fontFamily' : true,
            'fontSize' : true,
            'fontWeight' : true,
            'fontColor' : true,
            'fontStyle' : true
        }));
        this._fontPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._fontPickerChangedHandler, this);

        // Initliaze
        checkbox.setChecked(this._target.queryProperty(this._config.visible.propertyField));

        this._commitChecked();
    };

    TextViewHelper.prototype._checkboxChangedHandler = function() {
        var checked = this._checkbox.getChecked();
        this._target.updateProperty(this._config.visible.propertyField, checked);

        if (this._config.visible.updateLayout) {
            this._config.visible.updateLayout(checked);
        }

        this._commitChecked();
    };

    TextViewHelper.prototype._commitChecked = function() {
        var checked = this._checkbox.getChecked();

        this._fontPicker.visible(checked);
    };

    TextViewHelper.prototype._fontPickerChangedHandler = function(event) {
        this._target.updateProperties(event.data.pickedItem);
    };

    return TextViewHelper;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/CategoryAxisTitleView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/sections/helpers/TextViewHelper'
], function(OOUtil, LangManager, PropertyViewBase, TextViewHelper) {
    // @formatter:on
    var CategoryAxisTitleView = function(dom, vizProxy, propertyZone) {
        CategoryAxisTitleView.superclass.constructor.apply(this, arguments);

        this._createChildren();
    };
    OOUtil.extend(CategoryAxisTitleView, PropertyViewBase);

    CategoryAxisTitleView.prototype._createChildren = function() {
        var helper = this._createHelper(TextViewHelper, {
            'visible': {
                'text': LangManager.get('PROPERTY_EDITOR_SHOW_AXIS_TITLE'),
                'propertyField': 'categoryAxis.title.visible',
            }
        });
    };
    return CategoryAxisTitleView;
});
// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/ValueAxisTitleView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/sections/helpers/TextViewHelper',
], function(OOUtil, LangManager, PropertyViewBase, TextViewHelper) {
    // @formatter:on
    var ValueAxisTitleView = function(dom, uiConfig, vizProxy, propertyZone) {
        ValueAxisTitleView.superclass.constructor.apply(this, arguments);

        this._createChildren();
    };
    OOUtil.extend(ValueAxisTitleView, PropertyViewBase);

    ValueAxisTitleView.prototype._createChildren = function() {
        var helper = this._createHelper(TextViewHelper, {
            'visible': {
                'text': LangManager.get('PROPERTY_EDITOR_SHOW_AXIS_TITLE'),
                'propertyField': 'valueAxis.title.visible',
            }
        });
    };

    return ValueAxisTitleView;
});
define('sap/viz/controls/propertyeditor/utils/PropertyUtil',[
// @formatter:off
],
function() {
// @formatter:on
    var PropertyUtil = {};

    PropertyUtil.propertyToToggle = function(visible) {
        if (visible === null) {
            return 'Mixed';
        } else if (visible !== true) {
            return "Unchecked";
        } else {
            return "Checked";
        }
    };

    return PropertyUtil;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/helpers/SVGHelper',[
    'jquery'],
function($) {
// @formatter:on
    var SVGHelper = {};

    SVGHelper.setColor = function(svg, color) {
        $(svg).find('*').each(function() {
            var this$ = $(this);
            if (this$.css('stroke') && this$.css('stroke') !== 'none') {
                this$.css('stroke', color);
            }
            if (this$.css('fill') && this$.css('fill') !== 'none') {
                this$.css('fill', color);
            }
        });
    };

    return SVGHelper;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/helpers/ObjectHelper',[
    'jquery',
    'sap/viz/controls/propertyeditor/helpers/SVGHelper'],
function($, SVGHelper) {
// @formatter:on
    var ObjectHelper = {};

    ObjectHelper.setSVGColor = function(object, color, callback) {
        if ($('svg', object).length > 0) {
            SVGHelper.setColor(object, color);
            if (callback) {
                callback();
            }
        }
    };

    return ObjectHelper;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/IconPicker',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/helpers/ObjectHelper',
    'sap/viz/controls/propertyeditor/helpers/SVGHelper',
    'sap/viz/controls/propertyeditor/pickers/PickerBase'],
function($, CSSConst, OOUtil, ObjectHelper, SVGHelper, PickerBase) {
// @formatter:on
    /**
     * @param {Object} dom
     * @param {Object} menuGroups
     */
    var IconPicker = function(dom, pickedItem, config) {
        IconPicker.superclass.constructor.apply(this, arguments);

        config = this._config || {};
        this._icons = config.icons;
        this._iconMap = {};
        this._parseIconMap();
        if (this._pickedItem === null) {
            this._icon = null;
        }else {
            this._icon = pickedItem ? pickedItem : this._icons[0].svg;
        }
        this._color = config.color ? config.color : 'rgb(0,0,0)';
        this._createChildren();
        this._list$ = null;
        this._container$ = null;
        this._resizeHandler = null;
        this._mdHandler = $.proxy(this._mousedownHandler, this);
    };
    OOUtil.extend(IconPicker, PickerBase);

    var cssPrefix = CSSConst.PROPERTYEDITOR_PREFIX + 'iconpicker-';
    var cssCommon = CSSConst.COMMON_PREFIX;

    IconPicker.prototype._createChildren = function() {
        this._container$ = $(document.createElement('div')).appendTo(this._dom$);
        this._container$.addClass('sapUiTfBrd sapUiTfStd  sapUiTfCombo ' + cssPrefix + 'container');
        this._icon$ = $(document.createElement('div')).appendTo(this._container$);
        this._icon$.addClass(cssPrefix + 'icon');
        this._arrow$ = $(document.createElement('div')).appendTo(this._container$);
        this._arrow$.addClass('sapUiTfComboIcon');
        this._arrow$.click($.proxy(this._arrowClickHandler, this));
        this._applyDefaultIcon();
    };

    IconPicker.prototype._parseIconMap = function() {
        var i, icon;
        for ( i = 0; i < this._icons.length; i++) {
            icon = this._icons[i];
            this._iconMap[icon.id] = icon.svg;
        }
    };

    IconPicker.prototype.icon = function(icon) {
        if (arguments.length > 0) {
            if (this._icon !== icon) {
                this._icon = icon;
                this._applyIcon();
                this._changePickedItem(this._icon);
            }
            return this;
        } else {
            return this._icon;
        }
    };

    IconPicker.prototype._applyIcon = function() {
        if (this.icon()) {
            this._icon$[0].innerHTML = this.icon();
            // Scale svg
            var svg = this._icon$.children().get(0);
            if (!svg.getAttribute('viewBox')) {
                var bbox = svg.getBBox();
                svg.setAttribute('viewBox', [bbox.x, bbox.y, bbox.width, bbox.height].join(' '));
            }
            svg.setAttribute('fill', this.color());
        }
    };

    IconPicker.prototype.color = function(color) {
        if (arguments.length > 0) {
            this._color = color;
            this._applyColor();
            return this;
        } else {
            return this._color;
        }
    };

    IconPicker.prototype._applyColor = function() {
        $('svg', this._dom$).each($.proxy(function(index, item) {
            SVGHelper.setColor(item, this.color());
        }, this));
    };

    IconPicker.prototype._createIconList = function() {
        this._list$ = $(document.createElement('div')).appendTo($('body'));
        this._locate();
        this._list$.addClass(cssPrefix + 'list');
        var table$ = $(document.createElement('div')).appendTo(this._list$);
        var i, id, icon, svg, li$, icon$, cell$;
        for ( i = 0; i < this._icons.length; i++) {
            icon = this._icons[i];
            id = icon.id;
            svg = icon.svg;
            this._iconMap[id] = svg;
            cell$ = $(document.createElement('div')).appendTo(table$);
            cell$.addClass(cssPrefix + 'list-cell');
            cell$.data('icon', svg);
            icon$ = $(document.createElement('div')).appendTo(cell$);
            icon$[0].innerHTML = svg;
            // Scale svg
            var svg = icon$.children().get(0);
            if (!svg.getAttribute('viewBox')) {
                var bbox = svg.getBBox();
                svg.setAttribute('viewBox', [bbox.x, bbox.y, bbox.width, bbox.height].join(' '));
            }
            icon$.addClass(cssPrefix + 'list-icon');
            svg.setAttribute('fill', this.color());
            cell$.click($.proxy(this._iconListClickHandler, this));
        }
        this._addEventListeners();
        $(document).on('mousedown', this._mdHandler);
        $(window).on('blur', this._mdHandler);
    };

    IconPicker.prototype._iconListClickHandler = function(event) {
        var icon$ = $(event.currentTarget);
        var icon = icon$.data('icon');
        this.icon(icon);
        this._destroyList();
    };

    IconPicker.prototype._arrowClickHandler = function(event) {
        if (this._list$ !== null) {
            this._destroyList();
            return;
        }
        this._createIconList();
    };

    IconPicker.prototype._destroyList = function() {
        $(document).off('mousedown', this._mdHandler);
        $(window).off('blur', this._mdHandler);
        $(window).off('resize', this._resizeHandler);
        this._list$.empty().detach();
        this._list$ = null;
    };

    IconPicker.prototype._locate = function() {
        if(!!this._list$){
            var offset;
            if(!!this._container$){
                offset = this._container$.offset();
            }else{
                offset = this._dom$.children().offset();
            }
            this._list$.css({
                position:'absolute',
                top:offset.top + 2,
                left:offset.left
            });
        }
    };

    IconPicker.prototype._resizer = function(event) {
        if(!event.data.invalidateSize) {
            setTimeout($.proxy(function() {
                event.data.invalidateSize = false;
                this._locate();
            }, this), 1000 / 24);
        }
        event.data.invalidateSize = true;
    };
    IconPicker.prototype._addEventListeners = function() {
        this._resizeHandler = $.proxy(this._resizer, this);
        $(window).resize({
            'invalidateSize' : false
        }, this._resizeHandler);
    };

    IconPicker.prototype._mousedownHandler = function(oEvent) {
        if(this._list$ !== null && this._list$.css('visibility') == 'visible'
            && $(oEvent.target).closest(this._list$).length <= 0
            && oEvent.target !== this._arrow$[0]) {
            this._destroyList();
        }
    };

    IconPicker.prototype._applyDefaultIcon = function() {
        var i, icon;
        for (i=0; i<this._icons.length; i++) {
            icon = this._icons[i];
            if (this._icon === icon.svg) {
                this._applyIcon();
                break;
            }
        }
    };

    return IconPicker;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/CategoryAxisView',[
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/SwitchPicker',
    'sap/viz/controls/propertyeditor/utils/PropertyUtil',
    'sap/viz/controls/propertyeditor/pickers/FontPicker',
    'sap/viz/controls/propertyeditor/pickers/IconPicker',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent'
], function(CSSConst, LangManager, OOUtil, ChartTypeUtil, InfoChartUtil, ChartConst, PropertyViewBase, SwitchPicker, PropertyUtil, FontPicker, IconPicker, ColorPicker, PickerEvent) {
    // @formatter:on
    var CategoryAxisView = function() {
        CategoryAxisView.superclass.constructor.apply(this, arguments);

        this._axisSize = 0;
        this._defaultIcon = this._uiConfig.icons[0].svg;
        this._axisName = ChartTypeUtil.getCategoryAxis(this._vizProxy.getType())[0];
        
        this._axisVisibleProperty = "categoryAxis.visible";
        this._axisLineVisibleProperty = 'categoryAxis.axisLine.visible';
        this._axisTickVisibleProperty = "categoryAxis.axisTick.visible";
        this._axisLabelVisibleProperty = 'textVisible';
        var chartDirection  = ChartTypeUtil.getDirection(InfoChartUtil.getVizType(this._vizProxy.getType()));
        if(chartDirection === ChartConst.DIRECTION_HORIZONTAL){
            this._axisSizeProperty = "categoryAxis.layout.maxWidth";
        }else{
            this._axisSizeProperty = "categoryAxis.layout.maxHeight";
        }
        
        this._axisImageProperty = "iconSVG";
        this._axisImageColorProperty = "iconColor";
        this._axisImageSizeProperty = 'iconSize';
        this._axisImageVisibleProperty = "iconVisible";
        this._axisDefaultSize = 0.25;
        this._axisDefaultImageSize = 0.5;

        this._createChildren();
    };

    OOUtil.extend(CategoryAxisView, PropertyViewBase);

    CategoryAxisView.prototype.destroy = function() {
        CategoryAxisView.superclass.destroy.apply(this, arguments);

        if (this._axisImageSize) {
            this._axisImageSize.destroy();
        }
        this._axisImageSize = null;

    };

    CategoryAxisView.prototype._createChildren = function() {
        var properties = this._initialProperties();
        if (properties) {

            // Axis line
            var axisLineRow$ = this._createItemRow(1, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
            var visible = properties[this._axisLineVisibleProperty] !== false;
            this._axisLineVisible = new SwitchPicker($(axisLineRow$.children()[0]), visible, {
                text : LangManager.get('PROPERTY_EDITOR_SHOW_AXIS_LINE')
            });
            var enabled = true;
            this._axisLineVisible.enabled(enabled);

            // Axis label
            var axisLabelRow$ = this._createItemRow(1, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
            if (properties[this._axisLabelVisibleProperty] === null) {
                visible = null;
            } else {
                visible = properties[this._axisLabelVisibleProperty] !== false;
            }

            visible = PropertyUtil.propertyToToggle(visible);
            this._axisLabelVisible = new sap.ui.commons.TriStateCheckBox({
                'text' : LangManager.get('PROPERTY_EDITOR_SHOW_AXIS_LABEL'),
            });
            this._axisLabelVisible.toggle(visible);
            this._axisLabelVisible.placeAt($(axisLabelRow$.children()[0]));
            this._axisLabelVisible.attachChange($.proxy(this._showHideAxisLabel, this));

            axisLabelRow$ = this._createItemRow(1, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
            axisLabelRow$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'fontpicker');
            this._axisLabelFont = new FontPicker($(axisLabelRow$.children()[0]), {
                'fontFamily' : properties['fontFamily'],
                'fontSize' : properties['fontSize'],
                'fontWeight' : properties['fontWeight'],
                'fontColor' : properties['fontColor'],
                'fontStyle' : properties['fontStyle']
            });
            this._axisLabelFontContainer$ = axisLabelRow$;
            if (visible !== "Unchecked") {
                this._axisLabelFontContainer$.show();
            } else {
                this._axisLabelFontContainer$.hide();
            }

            // Axis image
            var axisImageRow$ = this._createItemRow(1, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
            var axisImage = properties[this._axisImageProperty];
            var axisImageColor = properties[this._axisImageColorProperty];
            var axisImageVisible = properties[this._axisImageVisibleProperty];

            if (axisImageVisible === null) {
                visible = null;
            } else {
                visible = axisImageVisible ? axisImageVisible : false;
            }

            visible = PropertyUtil.propertyToToggle(visible);
            this._axisImageVisible = new sap.ui.commons.TriStateCheckBox({
                'text' : LangManager.get('PROPERTY_EDITOR_SHOW_AXIS_IMAGE'),
            });
            this._axisImageVisible.toggle(visible);
            this._axisImageVisible.placeAt($(axisImageRow$.children()[0]));
            this._axisImageVisible.attachChange($.proxy(this._showHideAxisImage, this));

            axisImageRow$ = this._axisImageRow$ = this._createItemRow(2, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
            this._axisImage = new IconPicker($(axisImageRow$.children()[0]), axisImage, {
                'icons' : this._uiConfig.icons
            });
            this._axisImageColor = new ColorPicker($(axisImageRow$.children()[1]), axisImageColor, {
                'mode' : 'fill'
            });

            this._axisImageSize$ = this._createItemRow(2, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
            this._axisImageSize$.css({
                'height' : 'auto'
            });
            var textLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_SIZE_OF_ALL_IMAGES')
            });
            textLabel.placeAt(this._axisImageSize$.children()[0]);

            var axisImageSize = (properties[this._axisImageSizeProperty] !== undefined && properties[this._axisImageSizeProperty] !== null) ? properties[this._axisImageSizeProperty] : this._axisDefaultImageSize;
            this._axisImageSize = new sap.ui.commons.Slider({
                min : 0,
                max : 1,
                value : axisImageSize,
                width : '154px',
                smallStepWidth : 0.01,
                liveChange : $.proxy(function(event) {
                    this._changeAxisImageSize(event.getParameters().value);
                }, this)
            });
            this._axisImageSize.placeAt($(this._axisImageSize$.children()[1]).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'views-slider-container ' + CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-padding-bottom'));

            this._showImagePickers(visible !== 'Unchecked');

            this._axisLineVisible.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._showHideAxisLine, this);
            this._axisLabelFont.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._changeAxisLabelFont, this);
            this._axisImage.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._changeAxisImage, this);
            this._axisImageColor.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._changeAxisImageColor, this);

            // Special case: when the textVisible or iconVisible is not set, then update the properties.
            if (properties.textVisible === undefined || properties.iconVisible === undefined) {
                var props = this._getPickerProps(['showDataLabel', 'fontPicker', 'showDataLabelImage', 'imageIcon', 'imageColor', 'imageSizeSlider']);
                this._updateProperties(props);
            }
        }
    };

    CategoryAxisView.prototype._createItemRow = function(count, css) {
        var i, itemRow$, itemCell$;
        itemRow$ = $(document.createElement('div'));
        if (css) {
            itemRow$.addClass(css);
        }
        for ( i = 0; i < count; i++) {
            itemCell$ = $(document.createElement('div'));
            if (i === 0) {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell-wrap');
            } else {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            }
            itemCell$.appendTo(itemRow$);
        }
        itemRow$.appendTo(this._dom$);
        return itemRow$;
    };

    CategoryAxisView.prototype._initialProperties = function() {
        var options = {};
        options[this._axisLineVisibleProperty] = true;
        options[this._axisLabelVisibleProperty] = true;
        options[this._axisSizeProperty] = true;
        options[this._axisImageProperty] = true;
        options[this._axisImageColorProperty] = true;
        options[this._axisImageSizeProperty] = true;
        options[this._axisImageVisibleProperty] = true;
        options['fontFamily'] = true;
        options['fontSize'] = true;
        options['fontWeight'] = true;
        options['fontColor'] = true;
        options['fontStyle'] = true;

        return this._queryProperties(options);
    };

    CategoryAxisView.prototype._changeAxisImageSize = function(value) {
        var options = {};
        options[this._axisImageSizeProperty] = value;

        this._updateProperties(options, false, true);
    };


    CategoryAxisView.prototype._showHideAxisLine = function(event) {
        var visible = event.data.pickedItem;
        var options = {};
        options[this._axisLineVisibleProperty] = visible;
        options[this._axisTickVisibleProperty] = visible;

        this._updateProperties(options);
    };

    CategoryAxisView.prototype._showHideAxisLabel = function(event) {
        var visible = this._axisLabelVisible.getSelectionState();
        if (visible !== "Unchecked") {
            this._axisLabelFontContainer$.show();
        } else {
            this._axisLabelFontContainer$.hide();
        }
        var options = {};
        options[this._axisLabelVisibleProperty] = visible !== "Unchecked" ? undefined : false;

        this._updateProperties(options);
    };

    CategoryAxisView.prototype._changeAxisLabelFont = function(event) {
        var props = event.data.changedItem;
        this._updateProperties(props);
    };

    CategoryAxisView.prototype._showHideAxisImage = function(event) {
        var visible = this._axisImageVisible.getSelectionState();
        var options = {};
        options[this._axisImageProperty] = this._axisImage.icon();
        options[this._axisImageColorProperty] = this._axisImageColor.pickedItem();
        options[this._axisImageSizeProperty] = this._axisImageSize ? this._axisImageSize.getValue() : this._axisDefaultImageSize;
        options[this._axisImageVisibleProperty] = (visible !== 'Unchecked');
        options[this._axisSizeProperty] = visible !== 'Unchecked'?0.5:0.25;
        this._showImagePickers(visible !== 'Unchecked');

        this._updateProperties(options);
    };

    CategoryAxisView.prototype._changeAxisImage = function(event) {
        var icon = event.data.pickedItem;
        var options = {};
        options[this._axisImageProperty] = icon;
        this._updateProperties(options);
    };

    CategoryAxisView.prototype._changeAxisImageColor = function(event) {
        var color = event.data.pickedItem;
        var options = {};
        options[this._axisImageColorProperty] = color;
        this._updateProperties(options);
    };

    /*
     * Show/Hide image pickers, including icon picker, color picker, size label, size slider.
     */
    CategoryAxisView.prototype._showImagePickers = function(visible) {
        if (this._axisImageRow$) {
            visible ? this._axisImageRow$.show() : this._axisImageRow$.hide();
        }
        if (this._axisImageSize$) {
            visible ? this._axisImageSize$.show() : this._axisImageSize$.hide();
        }
    };

    CategoryAxisView.prototype._getPickerProps = function(pickers) {
        var props = {};

        for (var i in pickers) {
            switch (pickers[i]) {
                case 'showAxisLine' :
                    if (this._axisLineVisible) {
                        props[this._axisLineVisibleProperty] = props[this._axisTickVisibleProperty] = this._axisLineVisible.pickedItem();
                    }
                    break;
                case 'showDataLabel' :
                    if (this._axisLabelVisible) {
                        if (this._axisLabelVisible.getSelectionState() === 'Checked') {
                            props['textVisible'] = true;
                        } else if (this._axisLabelVisible.getSelectionState() === 'Unchecked') {
                            props['textVisible'] = false;
                        }
                    }
                    break;
                case 'fontPicker' :
                    if (this._axisLabelFont) {
                        props['fontFamily'] = this._axisLabelFont.pickedItem()['fontFamily'];
                        props['fontSize'] = this._axisLabelFont.pickedItem()['fontSize'];
                        props['fontWeight'] = this._axisLabelFont.pickedItem()['fontWeight'];
                        props['fontColor'] = this._axisLabelFont.pickedItem()['fontColor'];
                        props['fontStyle'] = this._axisLabelFont.pickedItem()['fontStyle'];
                    }
                    break;
                case 'showDataLabelImage' :
                    if (this._axisImageVisible) {
                        if (this._axisImageVisible.getSelectionState() === 'Checked') {
                            props['iconVisible'] = true;
                        } else if (this._axisImageVisible.getSelectionState() === 'Unchecked') {
                            props['iconVisible'] = false;
                        }
                    }
                    break;
                case 'imageIcon' :
                    if (this._axisImage) {
                        props['iconSVG'] = this._axisImage.icon();
                    }
                    break;
                case 'imageColor' :
                    if (this._axisImageColor) {
                        props['iconColor'] = this._axisImageColor.pickedItem();
                    }
                    break;
                case 'imageSizeSlider' :
                    if (this._axisImageSize) {
                        props['iconSize'] = this._axisImageSize.getValue();
                    }
                    break;
            }
        }

        return props;
    };

    CategoryAxisView.prototype._mergeLayoutProperties = function(properties, layoutProperties) {
        if (properties && layoutProperties) {
            for (var propName in layoutProperties) {
                properties[propName] = layoutProperties[propName];
            }
        }
    };

    return CategoryAxisView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/helpers/ChartAreaViewHelper',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/sections/helpers/ViewHelperBase'
], function(OOUtil, CSSConst, LangManager, ViewHelperBase) {
// @formatter:on
    var ChartAreaViewHelper = function(config, target) {
        ChartAreaViewHelper.superclass.constructor.apply(this, arguments);
    };
    OOUtil.extend(ChartAreaViewHelper, ViewHelperBase);

    ChartAreaViewHelper.prototype.createLayout = function() {
        var layoutTitle$ = $(document.createElement('div')).appendTo(this._target.dom$);
        layoutTitle$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'title-text');
        layoutTitle$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

        var layoutTitle = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_LAYOUT')
        });

        layoutTitle.placeAt(layoutTitle$);

        var layoutContainer$ = $(document.createElement('div')).appendTo(this._target.dom$);
        layoutContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row ' + CSSConst.PROPERTYEDITOR_PREFIX + 'linestyle');

        var classicBtn$ = $(document.createElement('div')).appendTo(layoutContainer$);
        classicBtn$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
        classicBtn$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'chartarea-layoutbtn');

        var classicBtn = new sap.ui.commons.Button({
            'text' : LangManager.get('PROPERTY_EDITOR_CLASSIC_LAYOUT'),
            'press' : $.proxy(this._classicBtnPress, this),
            'styled' : false,
            'width' : "100px"
        });

        classicBtn.placeAt(classicBtn$);

        var leanBtn$ = $(document.createElement('div')).appendTo(layoutContainer$);
        leanBtn$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');
        leanBtn$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'chartarea-layoutbtn');
        var leanBtn = new sap.ui.commons.Button({
            'text' : LangManager.get('PROPERTY_EDITOR_LEAN_LAYOUT'),
            'press' : $.proxy(this._leanBtnPress, this),
            'styled' : false,
            'width' : "100px"
        });

        leanBtn.placeAt(leanBtn$);
    };

    ChartAreaViewHelper.prototype._classicBtnPress = function(event) {
        var properties = {
            title : {
                visible : true
            },
            legend : {
                visible : true
            },
            valueAxis : {
                title : {
                    visible : true
                }
            },
            valueAxis2 : {
                title : {
                    visible : true
                }
            },
            categoryAxis : {
                title : {
                    visible : true
                }
            },
            categoryAxis2 : {
                title : {
                    visible : true
                }
            }
        };

        this._target.proxy.setProperties(properties);
    };

    ChartAreaViewHelper.prototype._leanBtnPress = function(event) {
        var properties = {
            title : {
                visible : false
            },
            legend : {
                visible : false
            },
            valueAxis : {
                title : {
                    visible : false
                }
            },
            valueAxis2 : {
                title : {
                    visible : false
                }
            },
            categoryAxis : {
                title : {
                    visible : false
                }
            },
            categoryAxis2 : {
                title : {
                    visible : false
                }
            }
        };

        this._target.proxy.setProperties(properties);
    };

    return ChartAreaViewHelper;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/ChartAreaView',['sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/spin/Spin',
    'sap/viz/controls/propertyeditor/sections/helpers/ChartAreaViewHelper'
], function(CSSConst, LangManager, OOUtil, PropertyViewBase, ColorPicker, PickerEvent, Spin, ChartAreaViewHelper) {
    // @formatter:on
    var ChartAreaView = function(dom, vizProxy, propertyZone) {
        ChartAreaView.superclass.constructor.apply(this, arguments);

        this._helper = null;

        this._createChildren();
    };
    OOUtil.extend(ChartAreaView, PropertyViewBase);

    ChartAreaView.prototype._createChildren = function() {
        this._helper = this._createHelper(ChartAreaViewHelper, {});

        /**
         * comment the feature of layout in 1.17
         */
        // var generalTitle$ = $(document.createElement('div')).appendTo(this._dom$);
        // generalTitle$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'title-text');
//
        // var generalTitle = new sap.ui.commons.Label({
            // 'text' : LangManager.get('PROPERTY_EDITOR_GENERAL')
        // });
//
        // generalTitle.placeAt(generalTitle$);

        var item$ = $(document.createElement('div')).appendTo(this._dom$);
        item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

        var textLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_BACKGROUND_COLOR')
        });

        textLabel.placeAt(item$);

        var cpContainer$ = $(document.createElement('div')).appendTo(this._dom$);

        var cp = this._colorPicker = new ColorPicker(cpContainer$, this._queryProperty('fill'), {
            'mode' : 'fill'
        });
        this._colorPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._pickerChangedHandler, this);

        var size = this._vizProxy.getSize();

        /*
        // Height
        var heightContainer$ = $(document.createElement('div')).appendTo(this._dom$);
        heightContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'linestyle');

        var heightLabelContainer$ = $(document.createElement('div')).appendTo(heightContainer$);
        heightLabelContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

        var heightLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_HEIGHT')
        });
        heightLabel.placeAt(heightLabelContainer$);

        var heightSpinContainer$ = $(document.createElement('div')).appendTo(heightContainer$);
        this._heightSpin = new Spin(heightSpinContainer$, {
            min : 0,
            value : size ? size.height : 400
        });
        this._heightSpin.addEventListener("changed", $.proxy(function(event) {
            this._heightChangedHandler(event);
        }, this), this);

        // Width
        var widthContainer$ = $(document.createElement('div')).appendTo(this._dom$);
        widthContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'linestyle');

        var widthLabelContainer$ = $(document.createElement('div')).appendTo(widthContainer$);
        widthLabelContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

        var widthLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_WIDTH')
        });
        widthLabel.placeAt(widthLabelContainer$);

        var widthSpinContainer$ = $(document.createElement('div')).appendTo(widthContainer$);
        this._widthSpin = new Spin(widthSpinContainer$, {
            min : 0,
            value : size ? size.width : 500
        });
        this._widthSpin.addEventListener("changed", $.proxy(function(event) {
            this._widthChangedHandler(event);
        }, this), this);
        */

        /**
         * comment the feature of layout in 1.17
         */
        // this._helper.createLayout();
    };

    ChartAreaView.prototype._pickerChangedHandler = function(oEvent) {
        var changedValue = oEvent.data.pickedItem;
        var options = {
            'fill' : changedValue
        };
        this._updateProperties(options);
    };

    ChartAreaView.prototype._heightChangedHandler = function(event) {
        var size = this._vizProxy.getSize();

        var height = parseFloat(event.data.value);
        if (height != size.height) {
            this._vizProxy.setSize({'height': height, 'width': size.width});
        }
    };

    ChartAreaView.prototype._widthChangedHandler = function(event) {
        var size = this._vizProxy.getSize();

        var width = parseFloat(event.data.value);
        if (width != size.width) {
            this._vizProxy.setSize({'height': size.height, 'width': width});
        }
    };

    ChartAreaView.prototype._propertyChangedHandler = function(e) {
        if (this._heightSpin && this._widthSpin) {
            var size = this._vizProxy.getSize();
            if (size.height != this._heightSpin.getValue()) {
                this._heightSpin.updateUI(size.height);
            }
            if (size.width != this._widthSpin.getValue()) {
                this._widthSpin.updateUI(size.width);
            }
        }
    };

    return ChartAreaView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/ChartTitleView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/sections/helpers/TextViewHelper'
], function(OOUtil, LangManager, PropertyViewBase, TextViewHelper) {
    // @formatter:on
    var ChartTitleView = function(dom, vizProxy, propertyZone) {
        ChartTitleView.superclass.constructor.apply(this, arguments);

        this._createChildren();
    };
    OOUtil.extend(ChartTitleView, PropertyViewBase);

    ChartTitleView.prototype._createChildren = function() {
        var helper = this._createHelper(TextViewHelper, {
            'visible': {
                'text': LangManager.get('PROPERTY_EDITOR_SHOW_CHART_TITLE'),
                'propertyField': 'title.visible',
                'updateLayout': $.proxy(this._updateLayout, this)
            }
        });
    };

    ChartTitleView.prototype._updateLayout = function(visible) {
        if (visible) {
            this._updateProperty("title.layout.maxHeight", 0.1);
        } else {
            this._updateProperty("title.layout.maxHeight", 0);
        }
    };

    return ChartTitleView;
});
// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/ThicknessPicker',['sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/pickers/PickerBase'
    ],
function(CSSConst, OOUtil, PickerBase) {
// @formatter:on
    var ThicknessPicker = function(dom, pickedItem, config) {
        ThicknessPicker.superclass.constructor.apply(this, arguments);
        config = this._config || {};
        this._color = config.color ? config.color : 'rgb(0,0,0)';
        this._lineSize = this._pickedItem;
        this._createChildren();
        this._list$ = null;
        this._mdHandler = $.proxy(this._mousedownHandler, this);
    };

    OOUtil.extend(ThicknessPicker, PickerBase);

    var cssPrefix = CSSConst.PROPERTYEDITOR_PREFIX + 'thicknesspicker-';
    var cssCommon = CSSConst.COMMON_PREFIX;

    var linesConfig = [{
        'thickness' : 1
    }, {
        'thickness' : 2
    }, {
        'thickness' : 3
    }, {
        'thickness' : 4
    }, {
        'thickness' : 5
    }, {
        'thickness' : 6
    }];

    ThicknessPicker.prototype._createChildren = function() {
        this._container$ = $(document.createElement('div')).appendTo(this._dom$);
        this._container$.addClass('sapUiTfBrd sapUiTfStd  sapUiTfCombo ' + cssPrefix + 'container');
        this._line$ = $(document.createElement('div')).appendTo(this._container$);
        this._line$.addClass(cssPrefix + 'line');
        this._line$.click($.proxy(this._arrowClickHandler, this));
        this._arrow$ = $(document.createElement('div')).appendTo(this._container$);
        this._arrow$.addClass('sapUiTfComboIcon');
        this._arrow$.click($.proxy(this._arrowClickHandler, this));
        this._applyLine();
    };

    ThicknessPicker.prototype._createLineList = function() {
        this._list$ = $(document.createElement('div')).appendTo($('body'));
        this._list$.addClass(cssPrefix + 'list');
        this._locate();
        var _ul$ = $(document.createElement('ul')).appendTo(this._list$);

        var i, line, id, lineArea$, line$, item$, image$, pt$, labelArea$, label$, lineContainer$;
        for ( i = 0; i < linesConfig.length; i++) {
            line = linesConfig[i];
            li$ = $(document.createElement('li')).appendTo(_ul$);
            li$.data('line', line.thickness);
            lineArea$ = $(document.createElement('div')).appendTo(li$);

            item$ = $(document.createElement('div')).addClass(cssPrefix + 'list-line-container').appendTo(lineArea$);
            line$ = $(document.createElement('div')).css({
                'margin-top' : (20 - line.thickness) / 2 + 'px',
                'background-color' : this._color,
                'height' : line.thickness + 'pt'
            }).appendTo(item$);

            if (line.thickness == this._lineSize) {
                item$.removeClass(cssPrefix + 'list-line-container');
                item$.addClass(cssPrefix + 'list-line-container-selected');
            }

            li$.click($.proxy(this._lineListClickHandler, this));
        }
        $(document).on('mousedown', this._mdHandler);
        $(window).on('blur', this._mdHandler);
    };

    ThicknessPicker.prototype._locate = function() {
        if(!!this._list$){
            var offset;
            if(!!this._container$){
                offset = this._container$.offset();
            }else{
                offset = this._dom$.children().offset();
            }
            this._list$.css({
                position:'absolute',
                top:offset.top + 2,
                left:offset.left
            });
        }
    };

    ThicknessPicker.prototype._resizer = function(event) {
        if(!event.data.invalidateSize) {
            setTimeout($.proxy(function() {
                event.data.invalidateSize = false;
                this._locate();
            }, this), 1000 / 24);
        }
        event.data.invalidateSize = true;
    };

    ThicknessPicker.prototype._arrowClickHandler = function(event) {
        if (this._list$ !== null) {
            this._destroyList();
            return;
        }
        this._createLineList();
    };

    ThicknessPicker.prototype._lineListClickHandler = function(event) {
        var lineLi$ = $(event.currentTarget);
        var linesize = lineLi$.data('line');
        this.lineSize(linesize);
        this._destroyList();
    }

    ThicknessPicker.prototype.color = function(color) {
        if (arguments.length > 0) {
            this._color = color;
            this._applyColor();
            return this;
        } else {
            return this._color;
        }
    };

    ThicknessPicker.prototype._applyColor = function() {
        $('div.' + cssPrefix + 'list-line').css('background-color', this._color);
    };

    ThicknessPicker.prototype.lineSize = function(size) {
        if (arguments.length > 0) {
            if (this._lineSize !== size) {
                this._lineSize = size;
                this._applyLine();
                this._changePickedItem(this._lineSize);
            }
            return this;
        } else {
            return this._lineSize;
        }
    };

    ThicknessPicker.prototype._applyLine = function() {
        this._line$.empty();
        var line$ = $(document.createElement('div')).css({
            'margin-top' : (20 - this._lineSize) / 2 + 'px',
            'background-color' : this._color,
            'height' : this._lineSize + 'pt'
        }).addClass(cssPrefix + 'list-line').appendTo(this._line$);
    };

    ThicknessPicker.prototype._mousedownHandler = function(oEvent) {
        if (this._list$ !== null && this._list$.css('visibility') == 'visible' && $(oEvent.target).closest(this._list$).length <= 0 && oEvent.target !== this._arrow$[0]) {
            this._destroyList();
        }
    }

    ThicknessPicker.prototype.destroy = function() {
        ThicknessPicker.superclass.destroy.apply(this, arguments);
        if (this._list$ !== null) {
            this._destroyList();
        }
        this._line$.empty().detach();
        this._line$ = null;
        this._arrow$.empty().detach();
        this._arrow$ = null;
        this._container$.empty().detach();
        this._container$ = null;
    };

    ThicknessPicker.prototype._destroyList = function() {
        $(document).off('mousedown', this._mdHandler);
        $(window).off('blur', this._mdHandler);
        this._list$.empty().detach();
        this._list$ = null;
    }

    return ThicknessPicker;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/PlotAreaView',['sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/ThicknessPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent'
], function(CSSConst, LangManager, OOUtil, PropertyViewBase, ColorPicker, ThicknessPicker, PickerEvent) {
    // @formatter:on
    var PlotAreaView = function(dom, vizProxy, propertyZone) {
        PlotAreaView.superclass.constructor.apply(this, arguments);

        this._createChildren();
    };
    OOUtil.extend(PlotAreaView, PropertyViewBase);

    PlotAreaView.prototype._createChildren = function() {
        var gridLineProperties = this._initialProperties();

        var item$ = $(document.createElement('div')).appendTo(this._dom$);
        item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

        var textLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_BACKGROUND_COLOR')
        });

        textLabel.placeAt(item$);

        var cpContainer$ = $(document.createElement('div')).appendTo(this._dom$);

        var cp = this._colorPicker = new ColorPicker(cpContainer$, this._queryProperty('fill'), {
            'mode' : 'fill'
        });
        this._colorPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._pickerChangedHandler, this);

        item$ = $(document.createElement('div')).appendTo(this._dom$);
        item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

        var showGridLine = gridLineProperties["plotArea.gridline.visible"] !== false;
        var checkbox = this._showGridLineChb = new sap.ui.commons.CheckBox({
            'text' : LangManager.get('PROPERTY_EDITOR_SHOW_GRIDLINE'),
            'checked' : showGridLine,
            'change' : $.proxy(function(event) {
                this._showGridLine(event.getParameters().checked);
            }, this)
        });
        checkbox.placeAt(item$);

        //thickness picker
        item$ = this._thicknessContainer$ = $(document.createElement('div')).appendTo(this._dom$);
        item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');

        var thicknessPicker$ = $(document.createElement('div')).appendTo(item$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
        this._thicknessPicker = new ThicknessPicker(thicknessPicker$, gridLineProperties["plotArea.gridline.size"]);
        this._thicknessPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._thicknessChangeHandler, this);

        var colorPicker$ = $(document.createElement('div')).appendTo(item$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
        this._tcPicker = new ColorPicker(colorPicker$, gridLineProperties["plotArea.gridline.color"]);
        this._tcPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._tcPickerChangedHandler, this);

        showGridLine ? this._thicknessContainer$.show() : this._thicknessContainer$.hide();
    };

    PlotAreaView.prototype._initialProperties = function() {
        var options = {
            "plotArea.gridline.visible" : true,
            "plotArea.gridline.color" : true,
            "plotArea.gridline.size" : true
        };
        return this._queryProperties(options);
    };

    PlotAreaView.prototype._showGridLine = function(visible) {
        if (visible) {
            this._thicknessContainer$.show();
        } else {
            this._thicknessContainer$.hide();
        }

        var options = {
            "plotArea.gridline.visible" : visible
        };
        this._updateProperties(options);
    };

    PlotAreaView.prototype._tcPickerChangedHandler = function(oEvent) {
        var color = oEvent.data.pickedItem;
        var options = {
            "plotArea.gridline.color" : oEvent.data.pickedItem
        };
        this._updateProperties(options);
    };

    PlotAreaView.prototype._thicknessChangeHandler = function(oEvent) {
        var size = oEvent.data.pickedItem;

        var options = {
            "plotArea.gridline.size" : size
        };
        this._updateProperties(options);
    }

    PlotAreaView.prototype._pickerChangedHandler = function(oEvent) {
        var changedValue = oEvent.data.pickedItem;
        var options = {
            'fill' : changedValue
        };
        this._updateProperties(options);
    };
    return PlotAreaView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/DonutPlotAreaView',['sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent'
], function(CSSConst, LangManager, OOUtil, PropertyViewBase, ColorPicker, PickerEvent) {
    // @formatter:on
    var DonutPlotAreaView = function(dom, vizProxy, propertyZone) {
        DonutPlotAreaView.superclass.constructor.apply(this, arguments);

        this._createChildren();
    };
    OOUtil.extend(DonutPlotAreaView, PropertyViewBase);

    DonutPlotAreaView.prototype._createChildren = function() {
        var item$ = $(document.createElement('div')).appendTo(this._dom$);
        item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

        var textLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_BACKGROUND_COLOR')
        });

        textLabel.placeAt(item$);

        var cpContainer$ = $(document.createElement('div')).appendTo(this._dom$);

        var cp = this._colorPicker = new ColorPicker(cpContainer$, this._queryProperty('fill'), {
            'mode' : 'fill'
        });
        this._colorPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._pickerChangedHandler, this);
    };

    DonutPlotAreaView.prototype._pickerChangedHandler = function(oEvent) {
        var changedValue = oEvent.data.pickedItem;
        var options = {
            'fill' : changedValue
        };
        this._updateProperties(options);
    };
    return DonutPlotAreaView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/LegendView',[
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/pickers/FontPicker',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase'
], function(CSSConst, LangManager, OOUtil, PickerEvent, FontPicker, PropertyViewBase) {
// @formatter:on

    var LegendView = function(dom, vizProxy, propertyZone) {
        LegendView.superclass.constructor.apply(this, arguments);

        this._showLegendChb = null;
        this._fontPicker = null;
        this._showLegendTitleChb = null;
        this._titleFontPicker = null;
        this._createChildren();

        this._legendPosition = 'right';
    };

    OOUtil.extend(LegendView, PropertyViewBase);

    LegendView.prototype._createChildren = function() {
        var legendProperties = this._initialProperties();

        if (legendProperties) {
            this._legendPosition = legendProperties['legendGroup.layout.position'];

            // Show Legend
            var item$ = $(document.createElement('div')).appendTo(this._dom$);
            item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

            var showLegend = legendProperties['legend.visible'] !== false;
            var checkbox = this._showLegendChb = new sap.ui.commons.CheckBox({
                'text' : LangManager.get('PROPERTY_EDITOR_SHOW_LEGEND'),
                'checked' : showLegend,
                'change' : $.proxy(function(event) {
                    this._showLegend(event.getParameters().checked);
                }, this)
            });
            checkbox.placeAt(item$);

            // Show Legend FontPicker
            item$ = this._fontPicker$ = $(document.createElement('div')).appendTo(this._dom$);
            item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
            this._fontPicker = new FontPicker(item$.get(0), {
                'fontFamily' : legendProperties['fontFamily'],
                'fontSize' : legendProperties['fontSize'],
                'fontWeight' : legendProperties['fontWeight'],
                'fontColor' : legendProperties['fontColor'],
                'fontStyle' : legendProperties['fontStyle']
            });
            this._fontPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._fontPickerChangedHandler, this);
            this._fontPicker.visible(showLegend);

            // Show Legend Title
            item$ = this._showLegendTitle$ = $(document.createElement('div')).appendTo(this._dom$);
            item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
            var showTitle = legendProperties['legend.title.visible'] !== false;
            checkbox = this._showLegendTitleChb = new sap.ui.commons.CheckBox({
                'text' : LangManager.get('PROPERTY_EDITOR_SHOW_LEGEND_TITLE'),
                'checked' : showTitle,
                'change' : $.proxy(function(event) {
                    this._showLegendTitle(event.getParameters().checked);
                }, this)
            });
            checkbox.setVisible(showLegend);
            checkbox.placeAt(item$);

            // Show Legend Title FontPicker
            item$ = this._titleFontPicker$ = $(document.createElement('div')).appendTo(this._dom$);
            item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent2');
            this._titleFontPicker = new FontPicker(item$.get(0), {
                'fontFamily' : legendProperties['title-fontFamily'],
                'fontSize' : legendProperties['title-fontSize'],
                'fontWeight' : legendProperties['title-fontWeight'],
                'fontColor' : legendProperties['title-fontColor'],
                'fontStyle' : legendProperties['title-fontStyle']
            });
            this._titleFontPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._titleFontPickerChangedHandler, this);
            this._titleFontPicker.visible(showLegend && legendProperties['legend.title.visible'] !== false);
        }
    };

    LegendView.prototype._initialProperties = function() {
        var options = {
            'legendGroup.layout.position' : true,
            'legend.visible' : true,
            'fontFamily' : true,
            'fontSize' : true,
            'fontWeight' : true,
            'fontColor' : true,
            'fontStyle' : true,
            'legend.title.visible' : true,
            'title-fontFamily' : true,
            'title-fontSize' : true,
            'title-fontWeight' : true,
            'title-fontColor' : true,
            'title-fontStyle' : true
        };

        return this._queryProperties(options);
    };

    LegendView.prototype._showLegend = function(visible) {
        if (visible) {
            this._fontPicker$.show();
            this._showLegendTitle$.show();
        } else {
            this._fontPicker$.hide();
            this._showLegendTitle$.hide();
        }
        this._showLegendTitleChb.setVisible(visible);
        this._titleFontPicker.visible(visible && this._showLegendTitleChb.getChecked());

        var options = {
            'legend.visible' : visible
        };

        if (visible) {
            if (this._legendPosition == 'right' || this._legendPosition == 'left') {
                options['legendGroup.layout.maxWidth'] = 0.2;
                options['legendGroup.layout.maxHeight'] = null;
            } else {
                options['legendGroup.layout.maxWidth'] = null;
                options['legendGroup.layout.maxHeight'] = 0.2;
            }
        } else {
            if (this._legendPosition == 'right' || this._legendPosition == 'left') {
                options['legendGroup.layout.maxWidth'] = 0;
                options['legendGroup.layout.maxHeight'] = null;
            } else {
                options['legendGroup.layout.maxWidth'] = null;
                options['legendGroup.layout.maxHeight'] = 0;
            }
        }

        this._updateProperties(options);
    };

    LegendView.prototype._showLegendTitle = function(visible) {
        visible ? this._titleFontPicker$.show() : this._titleFontPicker$.hide();

        this._updateProperties({
            'legend.title.visible' : visible
        });
    };

    LegendView.prototype._fontPickerChangedHandler = function(event) {
        this._updateProperties(event.data.changedItem);
    };

    LegendView.prototype._titleFontPickerChangedHandler = function(event) {
        var props = {};

        var items = event.data.changedItem;
        if (items.fontFamily) {
            props['title-fontFamily'] = items['fontFamily'];
        }
        if (items.fontSize) {
            props['title-fontSize'] = items['fontSize'];
        }
        if (items.fontWeight) {
            props['title-fontWeight'] = items['fontWeight'];
        }
        if (items.fontColor) {
            props['title-fontColor'] = items['fontColor'];
        }
        if (items.fontStyle) {
            props['title-fontStyle'] = items['fontStyle'];
        }

        this._updateProperties(props);
    };

    return LegendView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/ValueAxisView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/SwitchPicker',
    'sap/viz/controls/propertyeditor/pickers/FontPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/constants/ChartConst'
], function(OOUtil, CSSConst, LangManager, PropertyViewBase, SwitchPicker, FontPicker, PickerEvent, ChartTypeUtil, InfoChartUtil, ChartConst) {
    // @formatter:on
    var ValueAxisView = function(dom, uiConfig, vizProxy, propertyZone) {
        ValueAxisView.superclass.constructor.apply(this, arguments);

        this._valueAxisScaleEditor = null;
        this._axisLineVisible = null;
        this._axisLabelVisible = null;
        this._axisLabelFont = null;
        this._axisTitleVisible = true;
        this._axisName = ChartTypeUtil.getValueAxis(this._vizProxy.getType())[0];

        this._axisVisibleProperty = "valueAxis.visible";

        var chartDirection  = ChartTypeUtil.getDirection(InfoChartUtil.getVizType(this._vizProxy.getType()));
        if(chartDirection === ChartConst.DIRECTION_VERTICAL){
            this._axisSizeProperty = "valueAxis.layout.maxWidth";
        }else{
            this._axisSizeProperty = "valueAxis.layout.maxHeight";
        }
        //this._axisBodySizeProperty = "valueAxis.layout.bodyWidth";
        this._axisLineVisibleProperty = "valueAxis.axisLine.visible";
        this._axisTitleVisibleProperty = "valueAxis.title.visible";
        this._axisLabelVisibleProperty = "valueAxis.label.visible";
        this._axisTickVisibleProperty = "valueAxis.axisTick.visible";
        this._axisDefaultSize = 0.15;
        this._valueScaleMaxProperty = "plotArea.primaryScale.maxValue";
        this._valueScaleMinProperty = "plotArea.primaryScale.minValue";
        this._valueScaleAutoMaxProperty = "plotArea.primaryScale.autoMaxValue";
        this._valueScaleAutoMinProperty = "plotArea.primaryScale.autoMinValue";
        this._valueScaleFixedRangeProperty = "plotArea.primaryScale.fixedRange";

        this._createChildren();
    };
    OOUtil.extend(ValueAxisView, PropertyViewBase);

    ValueAxisView.prototype.destroy = function() {
        ValueAxisView.superclass.destroy.apply(this, arguments);

        if (this._valueScaleSlider) {
            this._valueScaleSlider.destroy();
        }
        this._valueScaleSlider = null;

    };

    ValueAxisView.prototype._createChildren = function() {
        var axisProperties = this._initialProperties();

        if (axisProperties) {
            var me = this;
            this._axisTitleVisible = axisProperties[this._axisTitleVisibleProperty];

            // Axis line
            var item$ = $(document.createElement('div')).appendTo(this._dom$);
            item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

            var checkbox = this._axisLineVisible = new sap.ui.commons.CheckBox({
                'text' : LangManager.get('PROPERTY_EDITOR_SHOW_AXIS_LINE'),
                'checked' : axisProperties[this._axisLineVisibleProperty],
                'change' : $.proxy(function(event) {
                    me._showLineTick(event.getParameters().checked);
                }, this)
            });
            checkbox.placeAt(item$);

            // Axis label
            item$ = $(document.createElement('div')).appendTo(this._dom$);
            item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

            var showLabel = axisProperties[this._axisLabelVisibleProperty];
            var checkbox = this._axisLabelVisible = new sap.ui.commons.CheckBox({
                'text' : LangManager.get('PROPERTY_EDITOR_SHOW_AXIS_LABEL'),
                'checked' : showLabel,
                'change' : $.proxy(function(event) {
                    me._showLabel(event.getParameters().checked);
                }, this)
            });
            checkbox.placeAt(item$);

            // font picker
            item$ = $(document.createElement('div')).appendTo(this._dom$);
            item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
            var fontPicker = this._axisLabelFont = new FontPicker(item$.get(0), {
                'fontFamily' : axisProperties['fontFamily'],
                'fontSize' : axisProperties['fontSize'],
                'fontWeight' : axisProperties['fontWeight'],
                'fontColor' : axisProperties['fontColor'],
                'fontStyle' : axisProperties['fontStyle']
            });
            fontPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._fontPickerChangedHandler, this);
            fontPicker.visible(showLabel);

            // =============Value scale data label =============
            var valueScaleRow$ = this._createItemRow(2, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item').css({
                'height' : 'auto'
            });
            var valueScaleTextLabel$ = $(document.createElement('div')).appendTo(this._dom$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell-wrap');
            var valueScaleTextLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_AXIS_VALUE_SCALE')
            });
            valueScaleTextLabel.placeAt(valueScaleRow$.children()[0]);
            // =============Value scale=============
            var isFixedRange = this._queryProperty(this._valueScaleFixedRangeProperty);
            var fixedRange = this._getFixedValueScale();
            var autoRange = this._getAutoValueScale();
            var maxValueScale, minValueScale;
            if (isFixedRange && fixedRange.max !== null) {
                maxValueScale = fixedRange.max;
            } else {
                maxValueScale = autoRange.max;
            }
            if (isFixedRange && fixedRange.min !== null) {
                minValueScale = fixedRange.min;
            } else {
                minValueScale = autoRange.min;
            }

            var ratio = maxValueScale / autoRange.max;
            ratio = Math.max(1, Math.min(ratio, 2));

            var valueScaleSlider$ = $(document.createElement('div')).appendTo(this._dom$).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            this._valueScaleSlider = new sap.ui.commons.Slider({
                'max' : 2,
                'min' : 1,
                'smallStepWidth' : 0.01,
                'value' : ratio,
                'width' : '154px',
                'liveChange' : $.proxy(function(oEvent) {
                    me._valueScaleSliderChangedHandler(oEvent);
                }, me)
            });
            this._valueScaleSlider.placeAt($(valueScaleRow$.children()[1]).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'views-slider-container'));
        }
    };

    ValueAxisView.prototype._createItemRow = function(count, css) {
        var i, itemRow$, itemCell$;
        itemRow$ = $('<div/>');
        if (css) {
            itemRow$.addClass(css);
        }
        for ( i = 0; i < count; i++) {
            itemCell$ = $('<div/>');
            if (i === 0) {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell-wrap');
            } else {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            }
            itemCell$.appendTo(itemRow$);
        }
        itemRow$.appendTo(this._dom$);
        return itemRow$;
    };

    ValueAxisView.prototype._valueScaleSliderChangedHandler = function(oEvent) {
        var ratio = parseFloat(oEvent.oSource.getValue());
        var props = {};
        var autoRange = this._getAutoValueScale();
        props[this._valueScaleMaxProperty] = Math.round(autoRange.max * ratio * 100) / 100;
        if (autoRange.max * autoRange.min < 0) {
            props[this._valueScaleMinProperty] = Math.round(autoRange.min * ratio * 100) / 100;
        }
        props[this._valueScaleFixedRangeProperty] = true;
        this._updateProperties(props);
    };

    ValueAxisView.prototype._getAutoValueScale = function() {
        var max = this._queryProperty(this._valueScaleAutoMaxProperty);
        var min = this._queryProperty(this._valueScaleAutoMinProperty);
        return {
            max : max,
            min : min
        };
    };

    ValueAxisView.prototype._getFixedValueScale = function() {
        var max = this._queryProperty(this._valueScaleMaxProperty);
        var min = this._queryProperty(this._valueScaleMinProperty);
        return {
            max : max,
            min : min
        };
    };

    ValueAxisView.prototype._initialProperties = function() {
        var options = {
            "plotArea.primaryScale.maxValue" : true
        };
        options[this._axisLineVisibleProperty] = true;
        options[this._axisTitleVisibleProperty] = true;
        options[this._axisLabelVisibleProperty] = true;
        options[this._axisTickVisibleProperty] = true;
        options['fontFamily'] = true;
        options['fontSize'] = true;
        options['fontWeight'] = true;
        options['fontColor'] = true;
        options['fontStyle'] = true;
        return this._queryProperties(options);
    };


    ValueAxisView.prototype._showLineTick = function(visible) {
        var options = {};
        options[this._axisLineVisibleProperty] = visible;
        options[this._axisTickVisibleProperty] = visible;
        this._updateProperties(options);
    };

    ValueAxisView.prototype._showLabel = function(visible) {
        this._axisLabelFont.visible(visible);
        if (visible) {
            this._axisLabelFont._dom$.show();
        } else {
            this._axisLabelFont._dom$.hide();
        }

        var options = {};
        options[this._axisLabelVisibleProperty] = visible;

        this._updateProperties(options);
    };

    ValueAxisView.prototype._fontPickerChangedHandler = function(event) {
        var props = event.data.changedItem;

        this._updateProperties(props);
    };

    ValueAxisView.prototype._mergeLayoutProperties = function(properties, layoutProperties) {
        if (properties && layoutProperties) {
            for (var propName in layoutProperties) {
                properties[propName] = layoutProperties[propName];
            }
        }
    };

    return ValueAxisView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/helpers/DataLabelViewHelper',[
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/FontPicker',
    'sap/viz/controls/propertyeditor/pickers/IconPicker',
    'sap/viz/controls/propertyeditor/utils/PropertyUtil',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/sections/helpers/ViewHelperBase',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/constants/ChartConst'
], function(CSSConst, LangManager, OOUtil, ColorPicker, FontPicker, IconPicker, PropertyUtil, PickerEvent, ViewHelperBase, InfoChartUtil, ChartConst) {
// @formatter:on

    var DataLabelViewHelper = function(config, target) {
        DataLabelViewHelper.superclass.constructor.apply(this, arguments);
        this._createChildren();
    };

    // Select data label or data label image, the increase ratio is 1.2
    var VALUE_SCALE_INCREASE_RATE = 1.2;

    OOUtil.extend(DataLabelViewHelper, ViewHelperBase);

    DataLabelViewHelper.prototype._createChildren = function() {
        var properties = this._initProperties();

        if (properties) {
            if (this._config.showDataLabel === true) {
                // =============Show Data Label Checkbox=============
                var showDataLabel$ = $(document.createElement('div')).appendTo(this._target.dom$);
                showDataLabel$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');
                var textVisible = properties['textVisible'];
                var dataLabelVisible = properties['dataLabelVisible'];
                var showDataLabel = (textVisible === undefined) ? dataLabelVisible : textVisible;

                showDataLabel = PropertyUtil.propertyToToggle(showDataLabel);
                this._showDataLabel = new sap.ui.commons.TriStateCheckBox({
                    'text' : LangManager.get('PROPERTY_EDITOR_SHOW_DATA_LABEL'),
                });
                this._showDataLabel.toggle(showDataLabel);
                this._showDataLabel.placeAt(showDataLabel$);
                this._showDataLabel.attachChange($.proxy(this._showDataLabelChangedHandler, this));

                // =============Data Label Font=============
                var fontPicker$ = this._fontPicker$ = $(document.createElement('div')).appendTo(this._target.dom$);
                fontPicker$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
                this._fontPicker = new FontPicker(fontPicker$.get(0), {
                    'fontFamily' : properties['fontFamily'],
                    'fontSize' : properties['fontSize'],
                    'fontWeight' : properties['fontWeight'],
                    'fontColor' : properties['fontColor'],
                    'fontStyle' : properties['fontStyle']
                });
                this._fontPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._fontPickerChangedHandler, this);

                this._showFontPicker(showDataLabel !== 'Unchecked');
            }

            if (this._config.showDataLabelImage === true) {
                // =============Show Data Label Image Checkbox=============
                var showDataLabelImage$ = $(document.createElement('div')).appendTo(this._target.dom$);
                showDataLabelImage$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
                var showDataLabelImage = properties['iconVisible'];

                showDataLabelImage = PropertyUtil.propertyToToggle(showDataLabelImage);
                this._showDataLabelImage = new sap.ui.commons.TriStateCheckBox({
                    'text' : LangManager.get('PROPERTY_EDITOR_SHOW_DATA_LABEL_IMAGE'),
                });
                this._showDataLabelImage.toggle(showDataLabelImage);
                this._showDataLabelImage.placeAt(showDataLabelImage$);
                this._showDataLabelImage.attachChange($.proxy(this._showDataLabelImageChangedHandler, this));

                // =============Data Label Image Icon and Color=============

                // image icon and color container
                var imageIconAndColor$ = this._createItemRow(2, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
                this._imageIconAndColor$ = imageIconAndColor$;

                // image icon
                var imageIcon$ = $(imageIconAndColor$.children()[0]);
                var imageIcon = properties['iconSVG'];
                var imageColor = properties['iconColor'];
                this._imageIcon = new IconPicker(imageIcon$, imageIcon, {
                    'icons' : this._target.view._uiConfig.icons
                });
                this._imageIcon.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._imageIconChangedHandler, this);

                // image color
                var imageColor$ = $(imageIconAndColor$.children()[1]);
                this._imageColor = new ColorPicker(imageColor$, imageColor, {
                    'mode' : 'fill'
                });
                this._imageColor.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._imageColorChangedHandler, this);

                // =============Data Label Image Size=============

                // image size container
                var imageSize$ = this._imageSize$ = $(document.createElement('div'));
                imageSize$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1').css({
                    'height' : 'auto'
                });
                imageSize$.appendTo(this._target.dom$);

                // image size label
                var imageSizeLabel$ = $(document.createElement('div'));
                imageSizeLabel$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
                imageSizeLabel$.appendTo(imageSize$);
                var textLabel = new sap.ui.commons.Label({
                    'text' : LangManager.get('PROPERTY_EDITOR_DATA_LABEL_IMAGE_SIZE')
                });
                textLabel.placeAt(imageSizeLabel$);

                // image size slider
                var imageSlider$ = $(document.createElement('div')).appendTo(imageSize$);
                imageSlider$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'views-slider-container');
                var imageSize = (properties['iconSize'] !== undefined && properties['iconSize'] !== null) ? properties['iconSize'] : 0.8;
                this._imageSizeSlider = new sap.ui.commons.Slider({
                    'max' : 1,
                    'min' : 0,
                    'smallStepWidth' : 0.01,
                    'value' : imageSize,
                    'width' : '154px',
                    'liveChange' : $.proxy(function(oEvent) {
                        this._imageSizeSliderChangedHandler(oEvent);
                    }, this)
                });
                this._imageSizeSlider.placeAt(imageSlider$);

                this._showImagePickers(showDataLabelImage !== 'Unchecked');
            }

            // Special case: when the textVisible or iconVisible is not set, then update the properties.
            if (properties.textVisible === undefined || properties.iconVisible === undefined) {
                var props = this._getPickerProps(['showDataLabel', 'fontPicker', 'showDataLabelImage', 'imageIcon', 'imageColor', 'imageSizeSlider']);
                this._target.updateProperties(props);
            }
        }
    };

    DataLabelViewHelper.prototype._initProperties = function() {
        var propertyFields = {
            'dataLabelVisible' : true,
            'textVisible' : true,
            'fontFamily' : true,
            'fontSize' : true,
            'fontWeight' : true,
            'fontColor' : true,
            'fontStyle' : true,
            'iconVisible' : true,
            'iconSVG' : true,
            'iconColor' : true,
            'iconSize' : true
        };

        return this._target.queryProperties(propertyFields);
    };

    DataLabelViewHelper.prototype._createItemRow = function(count, css) {
        var itemRow$ = $(document.createElement('div'));

        if (css) {
            itemRow$.addClass(css);
        }

        for (var i = 0; i < count; i++) {
            var itemCell$ = $(document.createElement('div'));
            if (i === 0) {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell-wrap');
            } else {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            }
            itemCell$.appendTo(itemRow$);
        }

        itemRow$.appendTo(this._target.dom$);

        return itemRow$;
    };

    DataLabelViewHelper.prototype._addItemToComboBox = function(comboBox, items) {
        for (var i in items) {
            comboBox.addItem(new sap.ui.core.ListItem({
                'key' : items[i].key,
                'text' : items[i].text
            }));
        }
    };

    DataLabelViewHelper.prototype._getPickerProps = function(pickers) {
        var props = {};

        for (var i in pickers) {
            switch (pickers[i]) {
                case 'showDataLabel' :
                    if (this._showDataLabel) {
                        if (this._showDataLabel.getSelectionState() === 'Checked') {
                            props['textVisible'] = true;
                        } else if (this._showDataLabel.getSelectionState() === 'Unchecked') {
                            props['textVisible'] = false;
                        }
                    }
                    break;
                case 'fontPicker' :
                    if (this._fontPicker) {
                        props['fontFamily'] = this._fontPicker.pickedItem()['fontFamily'];
                        props['fontSize'] = this._fontPicker.pickedItem()['fontSize'];
                        props['fontWeight'] = this._fontPicker.pickedItem()['fontWeight'];
                        props['fontColor'] = this._fontPicker.pickedItem()['fontColor'];
                        props['fontStyle'] = this._fontPicker.pickedItem()['fontStyle'];
                    }
                    break;
                case 'showDataLabelImage' :
                    if (this._showDataLabelImage) {
                        if (this._showDataLabelImage.getSelectionState() === 'Checked') {
                            props['iconVisible'] = true;
                        } else if (this._showDataLabelImage.getSelectionState() === 'Unchecked') {
                            props['iconVisible'] = false;
                        }
                    }
                    break;
                case 'imageIcon' :
                    if (this._imageIcon) {
                        props['iconSVG'] = this._imageIcon.icon();
                    }
                    break;
                case 'imageColor' :
                    if (this._imageColor) {
                        props['iconColor'] = this._imageColor.pickedItem();
                    }
                    break;
                case 'imageSizeSlider' :
                    if (this._imageSizeSlider) {
                        props['iconSize'] = this._imageSizeSlider.getValue();
                    }
                    break;
            }
        }

        return props;
    };

    /*
     * Show/Hide font picker.
     */
    DataLabelViewHelper.prototype._showFontPicker = function(visible) {
        if (this._fontPicker$) {
            visible !== false ? this._fontPicker$.show() : this._fontPicker$.hide();
        }
    };

    /*
     * Show/Hide image pickers, including icon picker, color picker, size label, size slider.
     */
    DataLabelViewHelper.prototype._showImagePickers = function(visible) {
        if (this._imageIconAndColor$) {
            visible ? this._imageIconAndColor$.show() : this._imageIconAndColor$.hide();
        }
        if (this._imageSize$) {
            visible ? this._imageSize$.show() : this._imageSize$.hide();
        }
    };

    /*
     * Update 'dataLabelVisible' property in props according to 'textVisible' & 'iconVibible' & propertyZone context.
     */
    DataLabelViewHelper.prototype._updateDataLabelVisible = function(props) {
        if (props['textVisible'] !== false || props['iconVisible'] !== false) {
            props['dataLabelVisible'] = true;
        } else if (this._target.view._isAllSelected()) {
            props['dataLabelVisible'] = false;
        }
    };

    DataLabelViewHelper.prototype._showDataLabelChangedHandler = function(event) {
        var props = this._getPickerProps(['showDataLabel', 'fontPicker', 'showDataLabelImage']);
        this._updateDataLabelVisible(props);

        this._showFontPicker(props['textVisible'] === true);

        this._mergeRangeProperties(props, this._getRangeProperties());
        this._target.updateProperties(props);
    };

    DataLabelViewHelper.prototype._fontPickerChangedHandler = function(event) {
        var props = this._getPickerProps(['fontPicker']);
        var items = event.data.changedItem;
        for (var i in items) {
            if (items[i]) {
                props[i] = items[i];
            }
        }

        this._target.updateProperties(props);
    };

    DataLabelViewHelper.prototype._showDataLabelImageChangedHandler = function(event) {
        var props = this._getPickerProps(['showDataLabel', 'showDataLabelImage', 'imageIcon', 'imageColor', 'imageSizeSlider']);
        this._updateDataLabelVisible(props);

        this._showImagePickers(props['iconVisible'] === true);

        this._mergeRangeProperties(props, this._getRangeProperties());
        this._target.updateProperties(props);
    };

    DataLabelViewHelper.prototype._imageIconChangedHandler = function(event) {
        var props = this._getPickerProps(['imageIcon']);
        props['iconSVG'] = event.data.pickedItem;

        this._target.updateProperties(props);
    };

    DataLabelViewHelper.prototype._imageColorChangedHandler = function(event) {
        var props = this._getPickerProps(['imageColor']);
        props['iconColor'] = event.data.pickedItem;

        this._target.updateProperties(props);
    };

    DataLabelViewHelper.prototype._imageSizeSliderChangedHandler = function(oEvent) {
        var props = this._getPickerProps(['imageSizeSlider']);
        props['iconSize'] = oEvent.oSource.getValue();

        this._mergeRangeProperties(props, this._getRangeProperties());
        this._target.updateProperties(props, false, true);
    };

    DataLabelViewHelper.prototype.destroy = function() {
        if (this._imageSizeSlider) {
            this._imageSizeSlider.destroy();
        }
        this._imageSizeSlider = null;
    };

    DataLabelViewHelper.prototype._getRangeProperties = function() {
        var props = this._getPickerProps(['showDataLabel', 'showDataLabelImage']);
        var vizType = InfoChartUtil.getVizType(this._target.proxy.getType());
        if (!this._target.queryProperty('plotArea.primaryScale.fixedRange')) {
            if (ChartConst.TYPE_BAR === vizType) {
                return this._getValueRange(props.textVisible === true || props.iconVisible === true);
            } else if (ChartConst.TYPE_COLUMN === vizType) {
                return this._getValueRange(props.iconVisible === true);
            }
        }
    };

    DataLabelViewHelper.prototype._getValueRange = function(increase) {
        if (increase) {
            var props = {};
            var autoMax = this._target.queryProperty('plotArea.primaryScale.autoMaxValue');
            var autoMin = this._target.queryProperty('plotArea.primaryScale.autoMinValue');
            props['plotArea.primaryScale.maxValue'] = parseFloat(autoMax * VALUE_SCALE_INCREASE_RATE);
            if (autoMax * autoMin < 0) {
                props['plotArea.primaryScale.minValue'] = parseFloat(autoMin * VALUE_SCALE_INCREASE_RATE);
            }
            props['plotArea.primaryScale.fixedRange'] = true;

            return props;
        }
    };

    DataLabelViewHelper.prototype._mergeRangeProperties = function(properties, rangeProperties) {
        if (properties && rangeProperties) {
            for (var propName in rangeProperties) {
                properties[propName] = rangeProperties[propName];
            }
        }
    };

    return DataLabelViewHelper;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/ColumnDataLabelView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/sections/helpers/DataLabelViewHelper'
], function(OOUtil, PropertyViewBase, DataLabelViewHelper) {
// @formatter:on

    var ColumnDataLabelView = function(dom, vizProxy, propertyZone) {
        ColumnDataLabelView.superclass.constructor.apply(this, arguments);

        this._helper = null;
        this._createChildren();
    };

    OOUtil.extend(ColumnDataLabelView, PropertyViewBase);

    ColumnDataLabelView.prototype.destroy = function() {
        ColumnDataLabelView.superclass.destroy.apply(this, arguments);

        if (this._helper) {
            this._helper.destroy();
        }
        this._helper = null;
    };

    ColumnDataLabelView.prototype._createChildren = function() {
        this._helper = this._createHelper(DataLabelViewHelper, {
            'showDataLabel' : true,
            'showDataLabelImage' : true
        });
    };

    return ColumnDataLabelView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/ShapePicker',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/helpers/ObjectHelper',
    'sap/viz/controls/propertyeditor/helpers/SVGHelper',
    'sap/viz/controls/propertyeditor/pickers/PickerBase'],
function($, CSSConst, OOUtil, ObjectHelper, SVGHelper, PickerBase) {
// @formatter:on
    /**
     * @param {Object} dom
     * @param {Object} menuGroups
     */
    var ShapePicker = function(dom, pickedItem, config) {
        ShapePicker.superclass.constructor.apply(this, arguments);

        config = this._config || {};
        this._icons = config.icons || [];
        this._defaultIcon = null;
        this._iconMap = {};
        this._parseIconMap();

        this._pickedItem = {
            icon : pickedItem ? pickedItem.icon : undefined,
            color : pickedItem ? pickedItem.color : undefined
        };

        if (this._pickedItem.icon === null) {
            this._icon = null;
        } else {
            this._icon = this._pickedItem.icon ? this._pickedItem.icon : this._defaultIcon;
        }
        this._color = this._pickedItem.color ? this._pickedItem.color : defaultColor;

        this._createChildren();
        this._list$ = null;
        this._container$ = null;
        this._resizeHandler = null;
        this._mdHandler = $.proxy(this._mousedownHandler, this);
    };
    OOUtil.extend(ShapePicker, PickerBase);

    var cssPrefix = CSSConst.PROPERTYEDITOR_PREFIX + 'iconpicker-';
    var cssCommon = CSSConst.COMMON_PREFIX;
    var defaultColor = 'rgba(0,0,0,1)';
    var shapes = [{
            'type' : 'shape',
            'id' : 'rectangle',
            'svg' : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" ' +
                    'width="100%" height="100%" viewBox="265 0 622 104" enable-background="new 265 0 622 104" xml:space="preserve">' +
                    '<rect x="272" y="6" fill="#F05B26" width="100%" height="100%"/></svg>'
        },{
            'type' : 'shape',
            'id' : 'trapezoid',
            'svg' : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"' +
                    'width="100%" height="100%" viewBox="265 0 622 104" enable-background="new 265 0 622 104" xml:space="preserve">' +
                    '<polygon fill="#F05B26" points="272,6 272,96.197 879.811,96.197 789.666,6 "/></svg>'
        },{
            'type' : 'shape',
            'id' : 'triangle',
            'svg' : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"' +
                    'width="100%" height="100%" viewBox="0 0 622 104" enable-background="new 0 0 622 104" xml:space="preserve">' +
                    '<polygon fill="#F05B26" points="7,96.196 7,6 614.811,51.098 "/></svg>'
        },{
            'type' : 'shape',
            'id' : 'pike',
            'svg' : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"' +
                    'width="100%" height="100%" viewBox="265 0 622 104" enable-background="new 265 0 622 104" xml:space="preserve">' +
                    '<polygon fill="#F05B26" points="789.666,6 272,6 272,96.195 789.666,96.195 879.811,51.098 "/></svg>'
        }];

    ShapePicker.prototype._createChildren = function() {
        this._container$ = $(document.createElement('div')).appendTo(this._dom$);
        this._container$.addClass('sapUiTfBrd sapUiTfStd  sapUiTfCombo ' + cssPrefix + 'container');
        this._icon$ = $(document.createElement('div')).appendTo(this._container$);
        this._icon$.addClass(cssPrefix + 'icon');
        this._arrow$ = $(document.createElement('div')).appendTo(this._container$);
        this._arrow$.addClass('sapUiTfComboIcon');
        this._arrow$.click($.proxy(this._arrowClickHandler, this));
        this._applyIcon();
    };

    ShapePicker.prototype._parseIconMap = function() {
        var i, icon;
        var icons = this._icons = shapes.concat(this._icons);
        if (icons.length) {
            for ( i = 0; i < icons.length; i++) {
                icon = icons[i];
                this._iconMap[icon.id] = icon;
            }
            if (icons[0].type === 'shape') {
                this._defaultIcon = {
                    'type' : 'shape',
                    'value' : icons[0].id
                };
            } else {
                this._defaultIcon = {
                    'type' : 'svg',
                    'value' : icons[0].svg
                };
            }
        }
    };

    ShapePicker.prototype.icon = function(icon) {
        if (arguments.length > 0) {
            if (this._icon !== icon) {
                this._icon = icon;
                this._applyIcon();
                this._changePickedItem(this._icon);
            }
            return this;
        } else {
            return this._icon;
        }
    };

    ShapePicker.prototype._applyIcon = function() {
        if (this.icon()) {
            var icon = this.icon().type === 'shape' ? this._iconMap[this.icon().value].svg : this.icon().value;
            this._icon$[0].innerHTML = icon;
            // Scale svg
            var svg = this._icon$.children().get(0);
            if (!svg.getAttribute('viewBox')) {
                var bbox = svg.getBBox();
                svg.setAttribute('viewBox', [bbox.x, bbox.y, bbox.width, bbox.height].join(' '));
            }
            if (this.icon().type === 'shape') {
                ObjectHelper.setSVGColor(this._icon$[0], this.color());
            } else {
                svg.setAttribute('fill', this.color());
            }
        }
    };

    ShapePicker.prototype.color = function(color) {
        if (arguments.length > 0) {
            this._color = color;
            this._applyColor();
            return this;
        } else {
            return this._color;
        }
    };

    ShapePicker.prototype._applyColor = function() {
        if (this.color()) {
            $('svg', this._dom$).each($.proxy(function(index, item) {
                SVGHelper.setColor(item, this.color());
            }, this));
        }
    };

    ShapePicker.prototype._createIconList = function() {
        this._list$ = $(document.createElement('div')).appendTo($('body'));
        this._list$.addClass(cssPrefix + 'list');
        this._locate();
        var table$ = $(document.createElement('div')).appendTo(this._list$);
        var i, id, icon, svg, color, data, li$, icon$, cell$;
        for ( i = 0; i < this._icons.length; i++) {
            icon = this._icons[i];
            id = icon.id;
            svg = icon.svg;
            cell$ = $(document.createElement('div')).appendTo(table$);
            cell$.addClass(cssPrefix + 'list-cell');
            if (icon.type === 'shape') {
                data = {
                    'type' : 'shape',
                    'value' : id
                };
            } else {
                data = {
                    'type' : 'svg',
                    'value' : svg
                };
            }
            cell$.data('icon', data);
            icon$ = $(document.createElement('div')).appendTo(cell$);
            icon$[0].innerHTML = svg;

            svg = icon$.children().get(0);
            if (!svg.getAttribute('viewBox')) {
                var bbox = svg.getBBox();
                svg.setAttribute('viewBox', [bbox.x, bbox.y, bbox.width, bbox.height].join(' '));
            }

            icon$.addClass(cssPrefix + 'list-icon');
            color = this.color() ? this.color() : defaultColor;
            if (icon.type === 'shape') {
                ObjectHelper.setSVGColor(icon$[0], color);
            } else {
                svg.setAttribute('fill', color);
            }

            cell$.click($.proxy(this._iconListClickHandler, this));
        }
        this._addEventListeners();
        $(document).on('mousedown', this._mdHandler);
        $(window).on('blur',this._mdHandler);
    };

    ShapePicker.prototype._locate = function() {
        if(!!this._list$){
            var offset;
            if(!!this._container$){
                offset = this._container$.offset();
            }else{
                offset = this._dom$.children().offset();
            }
            this._list$.css({
                position:'absolute',
                top:offset.top + 2,
                left:offset.left
            });
        }
    };

    ShapePicker.prototype._resizer = function(event) {
        if(!event.data.invalidateSize) {
            setTimeout($.proxy(function() {
                event.data.invalidateSize = false;
                this._locate();
            }, this), 1000 / 24);
        }
        event.data.invalidateSize = true;
    };

    ShapePicker.prototype._addEventListeners = function() {
        this._resizeHandler = $.proxy(this._resizer, this);
        $(window).resize({
            'invalidateSize' : false
        }, this._resizeHandler);
    };

    ShapePicker.prototype._iconListClickHandler = function(event) {
        var icon$ = $(event.currentTarget);
        var icon = icon$.data('icon');
        this.icon(icon);
        this._destroyList();
    };

    ShapePicker.prototype._arrowClickHandler = function(event) {
        if (this._list$ !== null) {
            this._destroyList();
            return;
        }
        this._createIconList();
    };

    ShapePicker.prototype._destroyList = function() {
        $(document).off('mousedown', this._mdHandler);
        $(window).off('blur', this._mdHandler);
        $(window).off('resize', this._resizeHandler);
        this._list$.empty().detach();
        this._list$ = null;
    };

    ShapePicker.prototype._mousedownHandler = function(oEvent) {
        if(this._list$ !== null && this._list$.css('visibility') == 'visible'
            && $(oEvent.target).closest(this._list$).length <= 0
            && oEvent.target !== this._arrow$[0]) {
            this._destroyList();
        }
    };

    return ShapePicker;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/ColumnDataPointView',[
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/ShapePicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent'
], function(CSSConst, LangManager, OOUtil, PropertyViewBase, ColorPicker, ShapePicker, PickerEvent) {
// @formatter:on
    var ColumnDataPointView = function() {
        ColumnDataPointView.superclass.constructor.apply(this, arguments);
        this._defaultShapeFill = null;
        this._createChildren();
    };
    OOUtil.extend(ColumnDataPointView, PropertyViewBase);

    ColumnDataPointView.prototype._createChildren = function() {
        var properties = this._initialProperties();
        if (properties) {
            if (!this._isAllSelected()) {
                this._defaultShapeFill = this._getExtraContext('color');
            }
            var itemRow$ = this._createItemRow(3, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

            var textLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_SHAPE_STYLE')
            });
            textLabel.placeAt($(itemRow$.children()[0]));
            // shape
            var defaultShape;
            if (properties.dataPointShape === null) {
                defaultShape = null;
            } else {
                defaultShape = {};
                defaultShape.type = properties.dataPointShape ? properties.dataPointShape.type : 'shape';
                defaultShape.value = properties.dataPointShape ? properties.dataPointShape.value : 'rectangle';
            }
            // color
            var defaultShapeFill;
            if (properties.lineFill === null) {
                defaultShapeFill = null;
            } else {
                defaultShapeFill = properties.dataPointShapeFill ? properties.dataPointShapeFill : this._defaultShapeFill;
            }

            var shapePickerItems = {
                'icon' : defaultShape
            };

            this._shapePicker = new ShapePicker($(itemRow$.children()[1]), shapePickerItems, {
                'icons' : this._uiConfig.icons
            });

            var colorPickerItem = defaultShapeFill;
            this._colorPicker = new ColorPicker($(itemRow$.children()[2]), colorPickerItem, {
                'mode' : 'fill'
            });
            this._shapePicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._shapeChangedHandler, this);
            this._colorPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._colorChangedHandler, this);
            itemRow$.children()[0].insertAdjacentHTML('afterEnd', '<br>');
        }
    };

    ColumnDataPointView.prototype._createItemRow = function(count, css) {
        var i, itemRow$, itemCell$;
        itemRow$ = $(document.createElement('div'));
        if (css) {
            itemRow$.addClass(css);
        }
        for ( i = 0; i < count; i++) {
            itemCell$ = $(document.createElement('div')).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            itemCell$.appendTo(itemRow$);
        }
        itemRow$.appendTo(this._dom$);
        return itemRow$;
    };

    //Parse chart properties according to current chart instance
    ColumnDataPointView.prototype._initialProperties = function() {
        var options = {
            'dataPointShape' : true,
            'dataPointShapeFill' : true
        };
        return this._queryProperties(options);
    };

    ColumnDataPointView.prototype._shapeChangedHandler = function(event) {
        var shape = event.data.pickedItem;
        var options = {
            'dataPointShape' : shape
        };
        this._updateProperties(options);
    };

    ColumnDataPointView.prototype._colorChangedHandler = function(event) {
        var color = event.data.pickedItem;
        var options = {
            'dataPointShapeFill' : color,
        };
        this._updateProperties(options);
    };
    return ColumnDataPointView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/ColumnSeriesView',[
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/ShapePicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/common/property/VizPropertyZone'
], function(CSSConst, LangManager, OOUtil, utils, InfoChartUtil, PropertyViewBase, ColorPicker, ShapePicker, PickerEvent, VizPropertyZone) {
// @formatter:on

    var ColumnSeriesView = function() {
        ColumnSeriesView.superclass.constructor.apply(this, arguments);

        this._defaultShapeFill = null;
        if (this._isSeries()) {
            this._createChildrenForSeries();
        } else {
            this._createChildrenForDataPoint();
        }
    };

    OOUtil.extend(ColumnSeriesView, PropertyViewBase);

    ColumnSeriesView.prototype._isSeries = function() {
        var isSeries = true;
        var zones = this._propertyZones;
        zones.forEach(function(item){
            if (!item.seriesContext()) {
                isSeries = false;
                return;
            }
        });
        return isSeries;
    };

    ColumnSeriesView.prototype._createChildrenForSeries = function() {
        var properties = this._initialProperties();
        if (properties) {
            if (!this._isAllSelected()) {
                this._defaultShapeFill = this._getExtraContext('color');
            }
            var defaultShapeFill;
            if (properties.lineFill === null) {
                defaultShapeFill = null;
            } else {
                defaultShapeFill = properties.dataPointShapeFill ? properties.dataPointShapeFill : this._defaultShapeFill;
            }
            // Series section
            var itemRow$ = this._createItemRow(1, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

            // Create series items
            this._seriesItems = this._createSeriesItems();
            var seriesNames = this._genSeriesListItems(this._seriesItems);
            var selectedSeries = this._genSelectedSeriesItem();

            // TODO: add new css for it
            var seriesDropdown = new sap.ui.commons.DropdownBox({
                'width' : '76px',
                'selectedKey' : Object.keys(selectedSeries).length == 1 ? Object.keys(selectedSeries)[0] : null,
                'items' : seriesNames,
                'change' : $.proxy(this._seriesDropdownChangedHandler, this)
            }).placeAt($(itemRow$.children()[0]));

            if (Object.keys(selectedSeries).length != 1) {
                utils.defer(function() {
                    sap.ui.commons.TextField.prototype.setValue.apply(seriesDropdown, [' '])
                });
            }

            // Color section
            itemRow$ = this._createItemRow(2, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

            var colorLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_COLOR')
            }).placeAt($(itemRow$.children()[0]));
            this._colorPicker = new ColorPicker($(itemRow$.children()[1]), defaultShapeFill, {
                'mode' : 'fill'
            });
            this._colorPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._colorPickerChangedHandler, this);
        }
    };

    ColumnSeriesView.prototype._createChildrenForDataPoint = function() {
        var properties = this._initialProperties();
        if (properties) {
            var itemRow$ = this._createItemRow(3, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

            var textLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_SHAPE_STYLE')
            });
            textLabel.placeAt($(itemRow$.children()[0]));
            // shape
            var defaultShape;
            if (properties.stackShape === null) {
                defaultShape = null;
            } else {
                defaultShape = {};
                defaultShape.type = properties.stackShape ? properties.stackShape.type : 'shape';
                defaultShape.value = properties.stackShape ? properties.stackShape.value : 'rectangle';
            }

            var shapePickerItems = {
                'icon' : defaultShape
            };

            this._shapePicker = new ShapePicker($(itemRow$.children()[1]), shapePickerItems, {
                'icons' : this._uiConfig.icons
            });

            this._shapePicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._shapeChangedHandler, this);

            // rotate
            var rotateBtn = new sap.ui.commons.Button({
                press : $.proxy(this._btnPress, this)
            });

            rotateBtn.placeAt(itemRow$.children()[2]);
            $(itemRow$.children()[2]).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'rotatebutton-container');

            itemRow$.children()[0].insertAdjacentHTML('afterEnd', '<br>');
        }
    };

    ColumnSeriesView.prototype._createItemRow = function(count, css) {
        var itemRow$ = $(document.createElement('div'));

        if (css) {
            itemRow$.addClass(css);
        }

        for (var i = 0; i < count; i++) {
            var itemCell$ = $(document.createElement('div'));
            if (i === 0) {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell-wrap');
            } else {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            }
            itemCell$.appendTo(itemRow$);
        }

        itemRow$.appendTo(this._dom$);

        return itemRow$;
    };

    //Parse chart properties according to current chart instance
    ColumnSeriesView.prototype._initialProperties = function() {
        var options = {
            'stackShape' : true,
            'dataPointShapeFill' : true
        };
        return this._queryProperties(options);
    };

    ColumnSeriesView.prototype._shapeChangedHandler = function(event) {
        var shape = event.data.pickedItem;
        var options = {
            'stackShape' : shape
        };
        this._updateProperties(options);
    };

    ColumnSeriesView.prototype._btnPress = function() {
    };

    ColumnSeriesView.prototype._seriesDropdownChangedHandler = function(event) {
        var seriesName = event.oSource.getSelectedKey();
        var zoneType = VizPropertyZone.DATA_POINT;
        var zone = this._propertyZones[0];
        var context = this._seriesItems[seriesName]['seriesData'];
        zone.context(context);
        this._vizProxy.setPropertyZones([zone]);
        var properties = this._initialProperties();
        if (properties) {
            if (!this._isAllSelected()) {
                this._defaultShapeFill = this._getExtraContext('color');
            }
            var defaultShapeFill;
            if (properties.lineFill === null) {
                defaultShapeFill = null;
            } else {
                defaultShapeFill = properties.dataPointShapeFill ? properties.dataPointShapeFill : this._defaultShapeFill;
            }
        }
        this._colorPicker.updateColor(defaultShapeFill);
    };

    ColumnSeriesView.prototype._colorPickerChangedHandler = function(event) {
        var color = event.data.pickedItem;
        var options = {
            'dataPointShapeFill' : color,
        };
        this._updateProperties(options);
    };

    ColumnSeriesView.prototype._createSeriesItems = function() {
        var feedingItem = this._vizProxy.getVizFeeding();
        var dataset = this._vizProxy.getDataset().table();
        var seriesItems = InfoChartUtil.buildInfoSeries(feedingItem, dataset);
        return seriesItems;
    }

    ColumnSeriesView.prototype._genSeriesListItems = function(seriesItems) {
        var items = [];
        for (item in seriesItems) {
            items.push(new sap.ui.core.ListItem({
                'key' : seriesItems[item].name,
                'text' : seriesItems[item].name
            }));
        }
        return items;
    };

    ColumnSeriesView.prototype._genSelectedSeriesItem = function() {
        var feedingItem = this._vizProxy.getVizFeeding();
        var dataset = [];
        this._propertyZones.forEach(function(item) {
            dataset.push(item.context());
        });
        return InfoChartUtil.buildInfoSeries(feedingItem, dataset);
    }

    return ColumnSeriesView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/DonutDataLabelView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/sections/helpers/DataLabelViewHelper'
], function(OOUtil, PropertyViewBase, DataLabelViewHelper) {
// @formatter:on

    var DonutDataLabelView = function(dom, vizProxy, propertyZone) {
        DonutDataLabelView.superclass.constructor.apply(this, arguments);

        this._helper = null;
        this._createChildren();
    };

    OOUtil.extend(DonutDataLabelView, PropertyViewBase);

    DonutDataLabelView.prototype.destroy = function() {
        DonutDataLabelView.superclass.destroy.apply(this, arguments);

        if (this._helper) {
            this._helper.destroy();
        }
        this._helper = null;
    };

    DonutDataLabelView.prototype._createChildren = function() {
        this._helper = this._createHelper(DataLabelViewHelper, {
            'showDataLabel' : true
        });
    };

    return DonutDataLabelView;
});

define('sap/viz/controls/propertyeditor/sections/views/DonutGetPropertiesByCtx',[], function() {
    function equalCtx(ctx1, ctx2) {
        var keys1 = Object.keys(ctx1), keys2 = Object.keys(ctx2);
        return (keys1.length > 0) && keys1.every(function(key) {
            return ctx1[key] === ctx2[key];
        });
    }

    function match(configCtx, dpCtx) {
        if (!configCtx) {
            return false;
        }
        if (!Array.isArray(configCtx)) {
            configCtx = [configCtx];
        }

        return configCtx.some(function(ctx) {
            if (!ctx) {
                return true;
            }

            return equalCtx(ctx, dpCtx);
        });
    }

    function filterDimensionContext(context, measureIds) {
        var ret;
        for (var key in context) {
            if (!ret) {
                ret = {};
            }
            var isDimension = true;
            for (var i = 0; i < measureIds.length; i++) {
                if (key === measureIds[i]) {
                    measureIds.splice(i, 1);
                    isDimension = false;
                    break;
                }
            }
            if (!isDimension) {
                continue;
            }
            ret[key] = context[key];
        }
        return ret;
    };

    return function(context, configs) {
        var ctx = context.ctx;

        if (!Array.isArray(configs)) {
            configs = [configs];
        }

        var defaultResult;
        for (var i = 0, len = configs.length; i < len; i++) {
            var config = configs[i], configCtx = config.ctx, paras = config.paras;
            if (!configCtx) {
                defaultResult = paras;
            }
        }

        var paras = this._parameters, isUpdated, contextNum = -1, number, paraNum;
        for (var i = 0, len = configs.length; i < len; i++) {
            var config = configs[i], configCtx = config.ctx, paras = config.paras;
            if (!configCtx) {// Handle ctx undefined case
                paraNum = i;
            } else if (match(configCtx, ctx)) {
                number = 0;
                for (var j in configCtx) {// Get context key number
                    number++;
                }
                if (contextNum < number) {// Get most detailed context
                    contextNum = number;
                    paraNum = i;
                }
            }
        }
        if (configs[paraNum]) {
            return configs[paraNum].paras;
        }
        return defaultResult;
    };
}); 
// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/DonutDataPointView',['sap/viz/controls/propertyeditor/sections/views/DonutGetPropertiesByCtx',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/ShapePicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/FontPicker',
    'sap/viz/controls/common/property/VizPropertyZone'],
function(getPropertiesByCtx, CSSConst, LangManager, OOUtil, Utils, PropertyViewBase, ShapePicker, PickerEvent, ColorPicker, FontPicker, VizPropertyZone) {
        // @formatter:on
        var DonutDataPointView = function(dom, uiConfig, vizProxy, propertyZone) {
            DonutDataPointView.superclass.constructor.apply(this, arguments);
            this._createChildren();
        };
        OOUtil.extend(DonutDataPointView, PropertyViewBase);

        DonutDataPointView.prototype._createChildren = function() {

            var properties = this._properties = this._initialProperties();

            if (properties) {
                var context = this._propertyZones[0].context();
                this._selectedIndex = null;
                if (context) {
                    this._selectedIndex = context._id;
                }
                var highlightIndex = -1;
                var dataset = this._vizProxy.getDataset();

                if (properties['plotArea.highlight.highlightContext'] && properties['plotArea.highlight.highlightContext'].length>0) {
                    highlightIndex = this._getHighlightContextIndex(properties['plotArea.highlight.highlightContext'][0], dataset.table());
                }
                if (this._selectedIndex === null) {
                    if(highlightIndex >-1){
                        this._selectedIndex = highlightIndex;
                    }else{
                        this._selectedIndex = 0;
                    }

                    var dataItem = dataset.table()[this._selectedIndex];
                    var context = Utils.clone(dataItem);
                    context._id = context._contextId;
                    delete context._contextId;
                    this._vizProxy.setPropertyZones([new VizPropertyZone(VizPropertyZone.DATA_POINT, context)]);
                }

                var container$ = this._container$ = $(document.createElement('div')).appendTo(this._dom$);

                // slice color
                var item$ = $(document.createElement('div')).appendTo(container$);
                item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'slicestyle');

                var label$ = $(document.createElement('div')).appendTo(item$);
                label$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
                var textLabel = new sap.ui.commons.Label({
                    'text': LangManager.get('PROPERTY_EDITOR_DONUT_DATA_POINT_SLICE_COLOR')
                });
                textLabel.placeAt(label$);

                var cpContainer$ = $(document.createElement('div')).appendTo(item$);
                cpContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
                var propertyZoneColor = null;
                if (this._propertyZones && this._propertyZones.length === 1) { //single selection.
                    var propertyZonesObj = this._propertyZones[0];
                    var extraContext = propertyZonesObj.extraContext();
                    if (extraContext && extraContext.hasOwnProperty('color')) {
                        propertyZoneColor = extraContext.color;
                    }else{
                        // invalid propertyZone

                        propertyZoneColor = properties['plotArea.colorPalette'][this._selectedIndex];

                        var contextInfos = properties['plotArea.highlight.contextInfos'];
                        this._setDefaultSelectedContext(dataset, this._selectedIndex);
                        if(contextInfos && contextInfos.length>0){
                            if(dataset){

                                if(this._DefaultSelectedContext){
                                    var effectiveContext = {'ctx': this._DefaultSelectedContext};
                                     var params = getPropertiesByCtx(effectiveContext, contextInfos);
                                     if(params && params.color){
                                         propertyZoneColor = params.color;
                                     }
                                }
                            }
                        }
                    }
                }

                var sliceColor = new ColorPicker(cpContainer$, this._propertyZones.length > 1 ? this._getMultiSelectedColor() : propertyZoneColor, {
                    'mode': 'fill'
                });
                sliceColor.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, $.proxy(this._cpChangedHandler, this), this);
                // highlight slice check box
                var highLightCB$ = $(document.createElement('div'));
                highLightCB$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');
                highLightCB$.appendTo(container$);
                var highLightCB = this._highLightCB = new sap.ui.commons.CheckBox({
                    text: LangManager.get('PROPERTY_EDITOR_DONUT_DATA_POINT_HIGHLIGHT'),
                    checked: this._selectedIndex === highlightIndex,
                    change: $.proxy(this._hlBoxChangedHandler, this),
                    enabled: (this._vizProxy.getPropertyZones().length == 1)
                });
                highLightCB.placeAt(highLightCB$);

                // highlight slice container
                this._subContainer$ = $(document.createElement('div'));
                this._subContainer$.appendTo(container$);
                if (highLightCB.getChecked()) {
                    this._subContainer$.show();
                } else {
                    this._subContainer$.hide();
                }
                this._createSubContainer();
            }
        };

        DonutDataPointView.prototype._setDefaultSelectedContext =function(dataset, index){
            this._DefaultSelectedContext = null;
            if(dataset){
                var dim =dataset.dimensions();
                var dataArray = dataset.table();
                if(dim && dim.length>0 && dataArray && dataArray.length>0 && index < dataArray.length){
                     var obj = dataArray[index];
                     var selectedContext = {};
                     for(var j=0;j<dim.length;j++){
                         var prop = dim[j];
                         if(prop && obj.hasOwnProperty(prop)){
                             selectedContext[prop] = obj[prop];
                         }
                     }
                     if(selectedContext){
                         this._DefaultSelectedContext = selectedContext;
                     }else{
                         this._DefaultSelectedContext = null;
                     }
                }
            }
        };

        DonutDataPointView.prototype._getHighlightContextIndex = function(highlightContext, dataSetArray){
            if(!highlightContext || !dataSetArray){
                return -1;
            }
            var index = -1;
            if(dataSetArray && dataSetArray.length>0){
                var tempObj= null;
                var i = 0;
                for(;i<dataSetArray.length;i++){
                    var found = true;
                    tempObj = dataSetArray[i];
                    if(tempObj && highlightContext){
                        for(var prop in highlightContext){
                            if(highlightContext.hasOwnProperty(prop) && tempObj.hasOwnProperty(prop)){
                                if(highlightContext[prop] === tempObj[prop]){
                                    found = found && true;
                                }else{
                                    found = false;
                                    break;
                                }
                            }else{
                                found = false;
                            }
                        }
                    }else{
                        found =false;
                    }

                    if(found){
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };

        DonutDataPointView.prototype._createSubContainer = function() {
            if (this._properties) {
                // Show name
                var cb1$ = $(document.createElement('div'));
                cb1$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
                cb1$.appendTo(this._subContainer$);

                var cb1 = new sap.ui.commons.CheckBox({
                    text: LangManager.get('PROPERTY_EDITOR_DONUT_DATA_POINT_SHOW_NAME'),
                    checked: this._properties['plotArea.highlight.centerName.visible'],
                    change: $.proxy(this._showNameChangedHandler, this)
                });
                cb1.placeAt(cb1$);

                var fontPicker1$ = this._showNameFontPicker$ = $(document.createElement('div'));
                fontPicker1$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent2');
                fontPicker1$.appendTo(this._subContainer$);

                var pickedItem1 = {
                    fontFamily: this._properties['centerName.fontFamily'],
                    fontSize: this._properties['centerName.fontSize'],
                    fontWeight: this._properties['centerName.fontWeight'],
                    fontColor: this._properties['centerName.fontColor'],
                    fontStyle: this._properties['centerName.fontStyle']
                };

                var fontPicker1 = new FontPicker(fontPicker1$.get(0), pickedItem1, {
                    'showColorPicker': false
                });
                fontPicker1.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, $.proxy(this._nameFPChangedHandler, this), this);

                if (cb1.getChecked()) {
                    this._showNameFontPicker$.show();
                } else {
                    this._showNameFontPicker$.hide();
                }
                // Show percentage
                var cb2$ = $(document.createElement('div'));
                cb2$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1');
                cb2$.appendTo(this._subContainer$);

                var cb2 = new sap.ui.commons.CheckBox({
                    text: LangManager.get('PROPERTY_EDITOR_DONUT_DATA_POINT_SHOW_PERCENTAGE'),
                    checked: this._properties['plotArea.highlight.centerValue.visible'],
                    change: $.proxy(this._showPercentChangedHandler, this)
                });
                cb2.placeAt(cb2$);

                var fontPicker2$ = this._showPercentageFontPicker$ = $(document.createElement('div'));
                fontPicker2$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent2');
                fontPicker2$.appendTo(this._subContainer$);

                var pickedItem2 = {
                    fontFamily: this._properties['centerValue.fontFamily'],
                    fontSize: this._properties['centerValue.fontSize'],
                    fontWeight: this._properties['centerValue.fontWeight'],
                    fontColor: this._properties['centerValue.fontColor'],
                    fontStyle: this._properties['centerValue.fontStyle']
                };

                var fontPicker2 = new FontPicker(fontPicker2$.get(0), pickedItem2, {
                    'showColorPicker': false
                });
                fontPicker2.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, $.proxy(this._percentFPChangedHandler, this), this);

                if (cb2.getChecked()) {
                    this._showPercentageFontPicker$.show();
                } else {
                    this._showPercentageFontPicker$.hide();
                }
                // Other slices's color
                var label$ = $(document.createElement('div'));
                label$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-indent1').css({
                    'height': 'auto'
                });
                label$.appendTo(this._subContainer$);

                var labelRow$ = $(document.createElement('div')).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
                labelRow$.appendTo(label$);

                var label = new sap.ui.commons.Label({
                    text: LangManager.get('PROPERTY_EDITOR_DONUT_DATA_POINT_OTHER_SLICE_COLOR')
                });
                label.placeAt(labelRow$);

                var cpContainer$ = $(document.createElement('div')).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
                cpContainer$.appendTo(label$);

                var color = this._properties['plotArea.highlight.unhighlightSliceColor'];
                var cp = new ColorPicker(cpContainer$, color, {
                    'mode': 'fill'
                });
                cp.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, $.proxy(this._otherCPChangedHandler, this), this);
            }
        };

        DonutDataPointView.prototype._initialProperties = function() {
            var options = {
                'plotArea.highlight.highlightContext': true,
                'plotArea.highlight.unhighlightSliceColor': true,
                'plotArea.highlight.contextInfos': true,
                'plotArea.highlight.centerName.visible': true,
                'plotArea.highlight.centerValue.visible': true,
                'centerName.fontFamily': true,
                'centerName.fontSize': true,
                'centerName.fontWeight': true,
                'centerName.fontStyle': true,
                'centerValue.fontFamily': true,
                'centerValue.fontSize': true,
                'centerValue.fontWeight': true,
                'centerValue.fontStyle':true,
            };


            var properties = this._queryProperties(options);
            var palette = properties['plotArea.colorPalette'] = this._vizProxy.getProperties().plotArea.colorPalette;
            var paletteCount = palette.length;
            var sliceCount = this._vizProxy.getDataset().dataInFields().length;
            if (paletteCount < sliceCount) {
                for (var i = paletteCount; i++; i < sliceCount) {
                    palette[i] = palette[i % paletteCount];
                }
            }
            return properties;
        };

        /*
         * Override super class method to pass null value when needed
         */
        DonutDataPointView.prototype._updateProperties = function(properties) {
            var keepNullValues = true;
            DonutDataPointView.superclass._updateProperties.apply(this, [properties, keepNullValues]);
        };

        DonutDataPointView.prototype._getMultiSelectedColor = function() {
            var zones = this._propertyZones;
            var color = null;

            if (zones && zones.length > 0 && zones[0].extraContext()) {
                var extraContext = zones[0].extraContext();
                if (extraContext && extraContext.color) {
                    color = extraContext.color;

                    for (var i = 1; i < zones.length; i++) {
                        var zone = zones[i];
                        if (zone && zone.extraContext()) {
                            var nextColor = zone.extraContext().color;
                            if (color !== nextColor) {
                                return null;
                            }

                        }
                    }
                }
            }
            return color;
        };

        DonutDataPointView.prototype._hlBoxChangedHandler = function(oEvent) {

            var checked = this._highLightCB.getChecked();
            var highlightContext = [];
            if (checked) {
                this._subContainer$.show();
                if (this._propertyZones && this._propertyZones.length > 0 && this._propertyZones[0] && this._propertyZones[0]._context) {
                    // interaction on chart.
                    var context = this._propertyZones[0]._context;
                    if (context && context.hasOwnProperty('_id')) {
                        highlightContext.push(this._propertyZones[0].getDimensionContext());
                    }

                }else{ // for case when swtich to data point view
                    if(this._DefaultSelectedContext){
                        highlightContext.push(this._DefaultSelectedContext);
                    }
                }
            } else {
                this._subContainer$.hide();
            }

            var options = {
                'plotArea.highlight.highlightContext': highlightContext,
                //TODO: highlightIndex is hiden, confirm with PO&Vicky for this issue
                // 'plotArea.highlight.highlightIndex': (this._highLightCB.getChecked() ? -1 : null),
                'centerName.fontColor': this._properties['plotArea.colorPalette'][this._selectedIndex],
                'centerValue.fontColor': this._properties['plotArea.colorPalette'][this._selectedIndex]
            };
            this._updateProperties(options);
        };

        DonutDataPointView.prototype._cpChangedHandler = function(oEvent) {
            var changedValue = oEvent.data.pickedItem;
            var palette = this._properties['plotArea.colorPalette'];
            var contextInfos = this._properties['plotArea.highlight.contextInfos'];
            var zones = this._vizProxy.getPropertyZones();
            if (!contextInfos || (contextInfos && contextInfos.length <1)) {
                contextInfos = [];
            }

            for (var i = 0; i < zones.length; i++)
            {
                var context = zones[i].context();
                if (context)
                {
                    var selectedIndex = context._id;
                    palette[selectedIndex] = changedValue;

                    context = zones[i].getDimensionContext(); // ONLY check the demension information.
                    if((context === null || context === undefined) && this._DefaultSelectedContext !== null){// when invalid propertyZone
                        context = this._DefaultSelectedContext;
                    }
                    var effectiveContext = {'ctx': context};

                    var paras = getPropertiesByCtx(effectiveContext, contextInfos);
                    if(paras && paras.color){
                        paras.color = changedValue;
                    }
                    else{
                        if(!contextInfos ||  contextInfos.length===0){
                            contextInfos = [];
                        }
                        // TODO if more paras required, add it.
                        contextInfos.push({'ctx':context,
                            'paras':{'color': changedValue
                            }

                        });
                    }
                }
            }
                this._updateProperties({
                    'plotArea.highlight.contextInfos': contextInfos,
                    'centerName.fontColor': palette[this._selectedIndex],
                    'centerValue.fontColor': palette[this._selectedIndex]
                });

            };

            DonutDataPointView.prototype._otherCPChangedHandler = function(oEvent) {
                var changedValue = oEvent.data.pickedItem;
                this._updateProperties({
                    'plotArea.highlight.unhighlightSliceColor': changedValue
                });
            };

            DonutDataPointView.prototype._showNameChangedHandler = function(oEvent) {
                if (oEvent.getParameter('checked')) {
                    this._showNameFontPicker$.show();
                } else {
                    this._showNameFontPicker$.hide();
                }
                var options = {
                    'plotArea.highlight.centerName.visible': oEvent.getParameter('checked'),
                    'centerName.fontColor': this._properties['plotArea.colorPalette'][this._selectedIndex]
                };
                this._updateProperties(options);
            };

            DonutDataPointView.prototype._showPercentChangedHandler = function(oEvent) {
                if (oEvent.getParameter('checked')) {
                    this._showPercentageFontPicker$.show();
                } else {
                    this._showPercentageFontPicker$.hide();
                }
                var options = {
                    'plotArea.highlight.centerValue.visible': oEvent.getParameter('checked'),
                    'centerValue.fontColor': this._properties['plotArea.colorPalette'][this._selectedIndex]
                };
                this._updateProperties(options);
            };

            DonutDataPointView.prototype._nameFPChangedHandler = function(oEvent) {
                var pickedItem = oEvent.data.changedItem;
                var options = {};

                if (pickedItem.hasOwnProperty('fontFamily')) {
                    options['centerName.fontFamily'] = pickedItem.fontFamily;
                }

                if (pickedItem.hasOwnProperty('fontSize')) {
                    options['centerName.fontSize'] = pickedItem.fontSize;
                }

                if (pickedItem.hasOwnProperty('fontWeight')) {
                    options['centerName.fontWeight'] = pickedItem.fontWeight;
                }

                if (pickedItem.hasOwnProperty('fontStyle')) {
                    options['centerName.fontStyle'] = pickedItem.fontStyle;
                }

                this._updateProperties(options);
            };

            DonutDataPointView.prototype._percentFPChangedHandler = function(oEvent) {
                var pickedItem = oEvent.data.changedItem;
                var options = {};

                if (pickedItem.hasOwnProperty('fontFamily')) {
                    options['centerValue.fontFamily'] = pickedItem.fontFamily;
                }

                if (pickedItem.hasOwnProperty('fontSize')) {
                    options['centerValue.fontSize'] = pickedItem.fontSize;
                }

                if (pickedItem.hasOwnProperty('fontWeight')) {
                    options['centerValue.fontWeight'] = pickedItem.fontWeight;
                }

                if (pickedItem.hasOwnProperty('fontStyle')) {
                    options['centerValue.fontStyle'] = pickedItem.fontStyle;
                }

                this._updateProperties(options);
            };

            return DonutDataPointView;

        });
// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/DonutChartAreaView',['sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/spin/Spin',
    'sap/viz/controls/propertyeditor/sections/helpers/ChartAreaViewHelper'
], function(CSSConst, LangManager, OOUtil, PropertyViewBase, ColorPicker, PickerEvent, Spin, ChartAreaViewHelper) {
    // @formatter:on
    var DonutChartAreaView = function(dom, vizProxy, propertyZone) {
        DonutChartAreaView.superclass.constructor.apply(this, arguments);

        this._innerCircleSlider = null;
        this._innerCiccleRatioProperty = "plotArea.innerRadiusRatio";

        this._helper = null;

        this._createChildren();
    };
    OOUtil.extend(DonutChartAreaView, PropertyViewBase);

    DonutChartAreaView.prototype.destroy = function() {
        DonutChartAreaView.superclass.destroy.apply(this, arguments);

        if (this._innerCircleSlider) {
            this._innerCircleSlider.destroy();
        }
        this._innerCircleSlider = null;
    };

    DonutChartAreaView.prototype._createChildren = function() {
        this._helper = this._createHelper(ChartAreaViewHelper, {});

        var properties = this._initialProperties();

        /**
         * comment the feature of layout in 1.17
         */
        // var generalTitle$ = $(document.createElement('div')).appendTo(this._dom$);
        // generalTitle$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'title-text');
//
        // var generalTitle = new sap.ui.commons.Label({
            // 'text' : LangManager.get('PROPERTY_EDITOR_GENERAL')
        // });
//
        // generalTitle.placeAt(generalTitle$);

        var item$ = $(document.createElement('div')).appendTo(this._dom$);
        item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row ' + CSSConst.PROPERTYEDITOR_PREFIX + 'donut-chartarea');

        var label$ = $(document.createElement('div')).appendTo(item$);
        label$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row')
        var textLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_BACKGROUND_COLOR')
        });
        textLabel.placeAt(label$);

        var cpContainer$ = $(document.createElement('div')).appendTo(item$);
        cpContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row')
        var cp = this._colorPicker = new ColorPicker(cpContainer$, this._queryProperty('fill'), {
            'mode' : 'fill'
        });
        this._colorPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._pickerChangedHandler, this);

        var size = this._vizProxy.getSize();

        /*
        // Height
        var heightContainer$ = $(document.createElement('div')).appendTo(this._dom$);
        heightContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'linestyle');

        var heightLabelContainer$ = $(document.createElement('div')).appendTo(heightContainer$);
        heightLabelContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

        var heightLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_HEIGHT')
        });
        heightLabel.placeAt(heightLabelContainer$);

        var heightSpinContainer$ = $(document.createElement('div')).appendTo(heightContainer$);
        this._heightSpin = new Spin(heightSpinContainer$, {
            min : 0,
            value : size ? size.height : 400
        });
        this._heightSpin.addEventListener("changed", $.proxy(function(event) {
            this._heightChangedHandler(event);
        }, this), this);

        // Width
        var widthContainer$ = $(document.createElement('div')).appendTo(this._dom$);
        widthContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'linestyle');

        var widthLabelContainer$ = $(document.createElement('div')).appendTo(widthContainer$);
        widthLabelContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

        var widthLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_WIDTH')
        });
        widthLabel.placeAt(widthLabelContainer$);

        var widthSpinContainer$ = $(document.createElement('div')).appendTo(widthContainer$);
        this._widthSpin = new Spin(widthSpinContainer$, {
            min : 0,
            value : size ? size.width : 500
        });
        this._widthSpin.addEventListener("changed", $.proxy(function(event) {
            this._widthChangedHandler(event);
        }, this), this);
        */

        // slider to change inner circle size
        item$ = $(document.createElement('div')).appendTo(this._dom$);
        item$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'donut-chartarea');
        label$ = $(document.createElement('div')).appendTo(item$);
        label$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row')
        textLabel = new sap.ui.commons.Label({
            'text' : LangManager.get('PROPERTY_EDITOR_DONUT_INNER_CIRCLE')
        });
        textLabel.placeAt(label$);

        var slider$ = $(document.createElement('div')).appendTo(item$);
        slider$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
        var slider = this._innerCircleSlider = new sap.ui.commons.Slider({
            min : 0,
            max : 1,
            value : properties[this._innerCiccleRatioProperty],
            width : '154px',
            smallStepWidth : 0.01,
            liveChange : $.proxy(function(event) {
                this._changeInnerSize(event.getParameters().value);
            }, this)
        });
        slider.placeAt(slider$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'views-slider-container'));

        /**
         * comment the feature of layout in 1.17
         */
        // this._helper.createLayout();
    };

    DonutChartAreaView.prototype._initialProperties = function() {
        var options = {};
        options[this._innerCiccleRatioProperty] = true;

        return this._queryProperties(options);
    };

    DonutChartAreaView.prototype._pickerChangedHandler = function(oEvent) {
        var changedValue = oEvent.data.pickedItem;
        var options = {
            'fill' : changedValue
        };
        this._updateProperties(options);
    };

    DonutChartAreaView.prototype._heightChangedHandler = function(event) {
        var size = this._vizProxy.getSize();

        var height = parseFloat(event.data.value);
        if (height != size.height) {
            this._vizProxy.setSize({'height': height, 'width': size.width});
        }
    };

    DonutChartAreaView.prototype._widthChangedHandler = function(event) {
        var size = this._vizProxy.getSize();

        var width = parseFloat(event.data.value);
        if (width != size.width) {
            this._vizProxy.setSize({'height': size.height, 'width': width});
        }
    };

    DonutChartAreaView.prototype._propertyChangedHandler = function(e) {
        if (this._heightSpin && this._widthSpin) {
            var size = this._vizProxy.getSize();
            if (size.height != this._heightSpin.getValue()) {
                this._heightSpin.updateUI(size.height);
            }
            if (size.width != this._widthSpin.getValue()) {
                this._widthSpin.updateUI(size.width);
            }
        }
    };

    DonutChartAreaView.prototype._changeInnerSize = function(value) {
        var options = {};
        options[this._innerCiccleRatioProperty] = value;
        this._updateProperties(options);
    };

    return DonutChartAreaView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/LineDataPointView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/propertyeditor/pickers/SwitchPicker',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/IconPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent'
], function(OOUtil, Utils, PropertyViewBase, CSSConst, LangManager, VizPropertyZone, SwitchPicker, ColorPicker, IconPicker, PickerEvent) {
// @formatter:on
    var LineDataPointView = function() {
        LineDataPointView.superclass.constructor.apply(this, arguments);

        this._dataPointImageProperty = 'line.iconSVG';
        this._dataPointImageColorProperty = 'line.iconColor';
        this._dataPointSizeProperty = 'line.iconSize';

        this._defaultIcon = null;
        this._defaultIconColor = null;
        this._dataPointDefaultSize = 8;
        this._icons = this._uiConfig.icons.concat();
        this._createChildren();
    };
    OOUtil.extend(LineDataPointView, PropertyViewBase);

    LineDataPointView.prototype.destroy = function() {
        LineDataPointView.superclass.destroy.apply(this, arguments);

        if (this._markerSizeSlider) {
            this._markerSizeSlider.destroy();
        }
        this._markerSizeSlider = null;
    };
    LineDataPointView.prototype._createChildren = function() {
        var properties = this._initialProperties();
        if (properties) {
            // Data point Visible
            var dataPointRow$ = this._createItemRow(1, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

            var textLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_MARKER_SHAPE')
            });
            textLabel.placeAt($(dataPointRow$.children()[0]));

            // Data Point Image and color
            var icon = properties[this._dataPointImageProperty];
            var iconColor = properties[this._dataPointImageColorProperty];
            dataPointImageRow$ = this._createItemRow(2, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');
            var dataPointImage = null;
            var dataPointImageColor = null;
            this._setDefaultIcon('circle');
            if (icon === null) {
                dataPointImage = null;
            } else {
                dataPointImage = icon ? icon : this._defaultIcon;
            }
            if (iconColor === null) {
                dataPointImageColor = null;
            } else {
                if (!this._isAllSelected()) {
                    this._defaultIconColor = this._getExtraContext('color');
                }
                dataPointImageColor = iconColor ? iconColor : this._defaultIconColor;
            }
            this._dataPointImage = new IconPicker($(dataPointImageRow$.children()[0]), dataPointImage, {
                'icons' : this._icons
            });
            this._dataPointColor = new ColorPicker($(dataPointImageRow$.children()[1]), dataPointImageColor, {
                'mode' : 'fill'
            });

            // Data Point Marker Slider
            var dataPointSizeRow$ = this._createItemRow(1, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item');

            textLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_SIZE_OF_ALL_MARKERS')
            });
            textLabel.placeAt($(dataPointSizeRow$.children()[0]));

            var markerSize = properties[this._dataPointSizeProperty];
            markerSize = (markerSize !== undefined && markerSize !== null) ? markerSize : this._dataPointDefaultSize;
            var markerSizeSliderRow$ = this._createItemRow(1, CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

            var markerSizeSlider = this._markerSizeSlider = new sap.ui.commons.Slider({
                min : 0,
                max : 100,
                value : markerSize,
                width : '154px',
                smallStepWidth : 1,
                liveChange : $.proxy(function(event) {
                    this._changeMarkerSize(event.getParameters().value);
                }, this)
            });
            markerSizeSlider.placeAt($(markerSizeSliderRow$.children()[0]).addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'views-slider-container'));

            this._dataPointImage.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._changeDataPointImage, this);
            this._dataPointColor.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._changeDataPointImageColor, this);

            // apply default icon if never set icon
            if (this._needApplyDefaultMarker()) {
                Utils.defer($.proxy(function() {
                    this._applyDefaultMarker();
                }, this));
            }
        }
    };

    LineDataPointView.prototype._createItemRow = function(count, css) {
        var i, itemRow$, itemCell$;
        itemRow$ = $(document.createElement('div'));
        if (css) {
            itemRow$.addClass(css);
        }
        for ( i = 0; i < count; i++) {
            itemCell$ = $(document.createElement('div'));
            if (i === 0) {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell-wrap');
            } else {
                itemCell$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-cell');
            }
            itemCell$.appendTo(itemRow$);
        }
        itemRow$.appendTo(this._dom$);
        return itemRow$;
    };

    LineDataPointView.prototype._initialProperties = function() {
        var options = {};
        options[this._dataPointImageProperty] = true;
        options[this._dataPointImageColorProperty] = true;
        options[this._dataPointSizeProperty] = true;

        return this._queryProperties(options);
    };

    /**
     * Justify whether apply default marker
     */
    LineDataPointView.prototype._needApplyDefaultMarker = function() {
        var propertyFields = {};
        propertyFields[this._dataPointImageProperty] = true;
        // get general iconSVG property without merged others
        var options = this._vizProxy.queryProperties({
            'propertyZones' : [new VizPropertyZone(this._propertyZones[0].type())],
            'propertyFields' : propertyFields
        });
        return (options[this._dataPointImageProperty] === undefined);
    };

    /**
     * Apply default marker
     */
    LineDataPointView.prototype._applyDefaultMarker = function() {
        var options = {};
        options[this._dataPointImageProperty] = this._defaultIcon;
        options[this._dataPointSizeProperty] = this._dataPointDefaultSize;
        this._updateProperties(options, false, true);
    };

    LineDataPointView.prototype._changeMarkerSize = function(value) {
        var options = {};
        options[this._dataPointSizeProperty] = value;

        this._updateProperties(options, false, true);
    };

    LineDataPointView.prototype._changeDataPointImage = function(event) {
        var icon = event.data.pickedItem;
        var options = {};
        options[this._dataPointImageProperty] = icon;
        this._updateProperties(options);
    };

    LineDataPointView.prototype._changeDataPointImageColor = function(event) {
        var color = event.data.pickedItem;
        var options = {};
        options[this._dataPointImageColorProperty] = color;
        this._updateProperties(options);
    };

    LineDataPointView.prototype._setDefaultIcon = function(id) {
        var i, icon;
        for ( i = 0; i < this._icons.length; i++) {
            icon = this._icons[i];
            if (icon.id === id) {
                this._defaultIcon = icon.svg;
                break;
            }
        }
        // add circle icon to dropdown list if uiconfig.icons has no circle icon
        if (!this._defaultIcon) {
            this._defaultIcon = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" ' + 'width="100%" height="100%" viewBox="0 0 400.427 400.38" enable-background="new 0 0 400.427 400.38" xml:space="preserve">' + '<circle cx="200.199" cy="200.186" r="200"/></svg>';
            var newIcon = {
                'id' : id,
                'svg' : this._defaultIcon
            };
            this._icons.unshift(newIcon);
        }
    };

    return LineDataPointView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/LineDataLabelView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/sections/helpers/DataLabelViewHelper'
], function(OOUtil, PropertyViewBase, DataLabelViewHelper) {
// @formatter:on

    var LineDataLabelView = function(dom, vizProxy, propertyZone) {
        LineDataLabelView.superclass.constructor.apply(this, arguments);

        this._helper = null;
        this._createChildren();
    };

    OOUtil.extend(LineDataLabelView, PropertyViewBase);

    LineDataLabelView.prototype.destroy = function() {
        LineDataLabelView.superclass.destroy.apply(this, arguments);

        if (this._helper) {
            this._helper.destroy();
        }
        this._helper = null;
    };

    LineDataLabelView.prototype._createChildren = function() {
        this._helper = this._createHelper(DataLabelViewHelper, {
            'showDataLabel' : true
        });
    };

    return LineDataLabelView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/pickers/LineStylePicker',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/helpers/ObjectHelper',
    'sap/viz/controls/propertyeditor/helpers/SVGHelper',
    'sap/viz/controls/propertyeditor/pickers/ShapePicker'],
function($, CSSConst, OOUtil, ObjectHelper, SVGHelper, ShapePicker) {
// @formatter:on
    /**
     * @param {Object} dom
     * @param {Object} menuGroups
     */
    var LineStylePicker = function(dom, pickedItem, config) {
        this._lineStyles = [this._generateLineStyle('1,0'), this._generateLineStyle('2,4'), this._generateLineStyle('6,6')];
        LineStylePicker.superclass.constructor.apply(this, arguments);

    };
    OOUtil.extend(LineStylePicker, ShapePicker);
    var lineCssPrefix = CSSConst.PROPERTYEDITOR_PREFIX + 'linestylepicker-';

    LineStylePicker.prototype._generateLineStyle = function (dashString) {
        var ret = {};
        ret.type = 'shape';
        ret.id = dashString;
        ret.svg = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" ' +
                    'width="100%" height="100%" enable-background="new 265 0 622 104" xml:space="preserve">' +
                    '<g style="stroke-width: 2;stroke: F05B26;"><path d="M0 10 80 10" stroke-dasharray="' + dashString + '"></path></g></svg>';
        return ret;
    };

    LineStylePicker.prototype._parseIconMap = function () {
        var i, icon;
        if (this._lineStyles.length) {
            for (i=0; i<this._lineStyles.length; i++) {
                shape = this._lineStyles[i];
                this._iconMap[shape.id] = shape;
            }
            this._defaultIcon = {
                'type' : 'shape',
                'value' : this._lineStyles[0].id
            };
        }
    };

    LineStylePicker.prototype._applyIcon = function() {
        if (this.icon() && this.color()) {
            var icon = this.icon().type === 'shape' ? this._iconMap[this.icon().value].svg : this.icon().value;
            this._icon$[0].innerHTML = icon;
            ObjectHelper.setSVGColor(this._icon$[0], this.color());
        }
    };

    LineStylePicker.prototype._createIconList = function() {
        this._list$ = $(document.createElement('div')).appendTo($('body'));
        this._list$.addClass(lineCssPrefix + 'list');
        this._locate();
        var ul$ = $(document.createElement('ul')).appendTo(this._list$);
        var i, id, svg, shape, li$, shape$;
        var data = {};
        for (i=0; i<this._lineStyles.length; i++) {
            shape = this._lineStyles[i];
            id = shape.id;
            svg = shape.svg;
            if (shape.type === 'shape') {
                data = {
                    'type' : 'shape',
                    'value' : id
                };
            } else {
                data = {
                    'type' : 'svg',
                    'value' : svg
                };
            }
            li$ = $(document.createElement('li')).appendTo(ul$).addClass(lineCssPrefix + 'list-li');
            li$.data('icon', data);
            shape$ = $(document.createElement('div')).appendTo(li$);
            shape$[0].innerHTML = svg;
            shape$.addClass(lineCssPrefix + 'list-shape');
            ObjectHelper.setSVGColor(shape$[0], this.color());
            li$.click($.proxy(this._iconListClickHandler, this));

            if (this._shape === shape) {
                li$.removeClass(lineCssPrefix + 'list-li');
                li$.addClass(lineCssPrefix + 'list-li-selected');
            }
        }
        $(document).on('mousedown', this._mdHandler);
        $(window).on('blur', this._mdHandler);
    };

    return LineStylePicker;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/LineView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/pickers/LineStylePicker',
    'sap/viz/controls/propertyeditor/spin/Spin'
], function(OOUtil, PropertyViewBase, CSSConst, LangManager, ColorPicker, PickerEvent, LineStylePicker, Spin) {
// @formatter:on
    var LineView = function() {
        LineView.superclass.constructor.apply(this, arguments);

        this._defaultLineFill = null;
        this._createChildren();
    };
    OOUtil.extend(LineView, PropertyViewBase);

    LineView.prototype._createChildren = function() {
        var properties = this._initialProperties();
        if (properties) {
            if (!this._isAllSelected()) {
                this._defaultLineFill = this._getExtraContext('color');
            }
            // Line Color
            var cpContainer$ = this._cpContainer$ = $(document.createElement('div')).appendTo(this._dom$);
            cpContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'linestyle');

            var colorLabelContainer$ = $(document.createElement('div')).appendTo(cpContainer$);
            colorLabelContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

            var colorLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_LINE_LINE_COLOR')
            });
            colorLabel.placeAt(colorLabelContainer$);

            var colorPicker$ = $(document.createElement('div')).appendTo(cpContainer$);
            colorPicker$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

            var defaultLineFill;
            if (properties.lineFill === null) {
                defaultLineFill = null;
            } else {
                defaultLineFill = properties.lineFill ? properties.lineFill : this._defaultLineFill;
            }
            this._colorPicker = new ColorPicker(colorPicker$, defaultLineFill, {
                'mode' : 'fill'
            });
            this._colorPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._colorChangedHandler, this);

            // Line Thickness
            var thicknessContainer$ = this._thicknessContainer$ = $(document.createElement('div')).appendTo(this._dom$);
            thicknessContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'linestyle');

            var thicknessLabelContainer$ = $(document.createElement('div')).appendTo(thicknessContainer$);
            thicknessLabelContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

            var thicknessLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_LINE_LINE_THICKNESS')
            });
            thicknessLabel.placeAt(thicknessLabelContainer$);

            var defaultLineWidth;
            if (properties['plotArea.width'] === null) {
                defaultLineWidth = null;
            } else if (properties['plotArea.width'] === undefined) {
                defaultLineWidth = 2; // default value
            } else {
                defaultLineWidth = properties['plotArea.width'];
            }
            var spinContainer$ = $(document.createElement('div')).appendTo(thicknessContainer$);
            var spin = new Spin(spinContainer$, {
                min : 0,
                value : defaultLineWidth
            });
            spin.addEventListener("changed", $.proxy(function(event) {
                this._thicknessChangedHandler(event);
            }, this), this);

            // Line Style
            var lineStyleContainer$ = this._lineStyleContainer$ = $(document.createElement('div')).appendTo(this._dom$);
            lineStyleContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item ' + CSSConst.PROPERTYEDITOR_PREFIX + 'linestyle');

            var lineStyleLabelContainer$ = $(document.createElement('div')).appendTo(lineStyleContainer$);
            lineStyleLabelContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

            var lineStyleLabel = new sap.ui.commons.Label({
                'text' : LangManager.get('PROPERTY_EDITOR_LINE_LINE_STYLE')
            });
            lineStyleLabel.placeAt(lineStyleLabelContainer$);

            var stylePickerContainer$ = $(document.createElement('div')).appendTo(lineStyleContainer$);
            stylePickerContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view-item-row');

            var defaultStyle;
            if (properties.lineStyle === null) {
                defaultStyle = null;
            } else {
                defaultStyle = {};
                defaultStyle.type = 'shape';
                defaultStyle.value = properties.lineStyle ? properties.lineStyle : '1,0';
            }
            var stylePickerItems = {
                'icon' : defaultStyle
            };
            this._stylePicker = new LineStylePicker(stylePickerContainer$, stylePickerItems);

            this._stylePicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._lineStyleChangedHandler, this);
        }
    };

    LineView.prototype._initialProperties = function() {
        var options = {
            'lineFill' : true,
            'lineStyle' : true,
            'plotArea.width' : true
        };
        return this._queryProperties(options);
    };

    LineView.prototype._colorChangedHandler = function(event) {
        var color = event.data.pickedItem;
        var options = {
            'lineFill' : color,
        };
        this._updateProperties(options);
    };

    LineView.prototype._thicknessChangedHandler = function(event) {
        var width = parseFloat(event.data.value);
        this._updateProperty('plotArea.width', width);
    };

    LineView.prototype._lineStyleChangedHandler = function(event) {
        var style = event.data.pickedItem;
        var options = {
            'lineStyle' : style.value
        };
        this._updateProperties(options);
    };
    return LineView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/views/StackedColumnDataLabelView',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/propertyeditor/sections/PropertyViewBase',
    'sap/viz/controls/propertyeditor/sections/helpers/DataLabelViewHelper'
], function(OOUtil, PropertyViewBase, DataLabelViewHelper) {
// @formatter:on

    var StackedColumnDataLabelView = function(dom, vizProxy, propertyZone) {
        StackedColumnDataLabelView.superclass.constructor.apply(this, arguments);

        this._helper = null;
        this._createChildren();
    };

    OOUtil.extend(StackedColumnDataLabelView, PropertyViewBase);

    StackedColumnDataLabelView.prototype.destroy = function() {
        StackedColumnDataLabelView.superclass.destroy.apply(this, arguments);

        if (this._helper) {
            this._helper.destroy();
        }
        this._helper = null;
    };

    StackedColumnDataLabelView.prototype._createChildren = function() {
        this._helper = this._createHelper(DataLabelViewHelper, {
            'showDataLabel' : true,
            'showDataLabelImage' : false
        });
    };

    return StackedColumnDataLabelView;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/sections/VizPropertyZoneMap',[
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/sections/Section',
    'sap/viz/controls/propertyeditor/sections/views/CategoryAxisTitleView',
    'sap/viz/controls/propertyeditor/sections/views/ValueAxisTitleView',
    'sap/viz/controls/propertyeditor/sections/views/CategoryAxisView',
    'sap/viz/controls/propertyeditor/sections/views/ChartAreaView',
    'sap/viz/controls/propertyeditor/sections/views/ChartTitleView',
    'sap/viz/controls/propertyeditor/sections/views/PlotAreaView',
    'sap/viz/controls/propertyeditor/sections/views/DonutPlotAreaView',
    'sap/viz/controls/propertyeditor/sections/views/LegendView',
    'sap/viz/controls/propertyeditor/sections/views/ValueAxisView',
    'sap/viz/controls/propertyeditor/sections/views/ColumnDataLabelView',
    'sap/viz/controls/propertyeditor/sections/views/ColumnDataPointView',
    'sap/viz/controls/propertyeditor/sections/views/ColumnSeriesView',
    'sap/viz/controls/propertyeditor/sections/views/DonutDataLabelView',
    'sap/viz/controls/propertyeditor/sections/views/DonutDataPointView',
    'sap/viz/controls/propertyeditor/sections/views/DonutChartAreaView',
    'sap/viz/controls/propertyeditor/sections/views/LineDataPointView',
    'sap/viz/controls/propertyeditor/sections/views/LineDataLabelView',
    'sap/viz/controls/propertyeditor/sections/views/LineView',
    'sap/viz/controls/propertyeditor/sections/views/StackedColumnDataLabelView'
], function(ChartConst, VizPropertyZone, InfoChartUtil, LangManager, Section, CategoryAxisTitleView, ValueAxisTitleView,
    CategoryAxisView, ChartAreaView, ChartTitleView, PlotAreaView, DonutPlotAreaView, LegendView, ValueAxisView, ColumnDataLabelView,
    ColumnDataPointView, ColumnSeriesView, DonutDataLabelView, DonutDataPointView, DonutChartAreaView, LineDataPointView,
    LineDataLabelView, LineView, StackedColumnDataLabelView) {
// @formatter:on
    var VizPropertyZoneMap = {};

    var _COMMON_CHART_TYPE = 'commonChartType';

    var _mapping = null;

    var _write = function(chartType, zoneType, sections) {
        var deeper;
        deeper = _mapping[chartType] = _mapping[chartType] || {};
        deeper[zoneType] = sections;
    };

    var _read = function(chartType, zoneType) {
        if (_mapping[chartType] && _mapping[chartType][zoneType]) {
            return _mapping[chartType][zoneType];
        } else if (chartType !== _COMMON_CHART_TYPE) {
            return _read(_COMMON_CHART_TYPE, zoneType);
        }
    };

    VizPropertyZoneMap.mapSections = function(chartType, zoneType) {
        // Lazy initialize to wait language loaded
        initialize();

        return _read(chartType, zoneType) || [];
    };

    VizPropertyZoneMap.getAvailableSections = function(chartType) {
        // Lazy initialize to wait language loaded
        initialize();

        if (_mapping[chartType]) {
            var sections = [];
            for (var zoneType in _mapping[chartType]) {
                sections = sections.concat(_read(chartType, zoneType));
            }
            sections.sort(function(s1, s2) {
                return (s1.groupIndex * 10 + s1.itemIndex) - (s2.groupIndex * 10 + s2.itemIndex);
            });
            return sections;
        } else if (chartType !== _COMMON_CHART_TYPE) {
            return VizPropertyZoneMap.getAvailableSections(_COMMON_CHART_TYPE);
        }
    };

    VizPropertyZoneMap.queryPropertyZone = function(chartType, section) {
        // Lazy initialize to wait language loaded
        initialize();

        if (_mapping[chartType]) {
            for (var zoneType in _mapping[chartType]) {
                var sections = _read(chartType, zoneType);
                if ($.inArray(section, sections) !== -1) {
                    return new VizPropertyZone(zoneType);
                }
            }
        }
        return null;

    };
    // Initialize _mapping

    var initialize = function() {
        if (!_mapping) {
            _mapping = {};
            var chartType;
            // Common for all charts
            chartType = _COMMON_CHART_TYPE;
            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 0, 0)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 0, 1)]);
            // Column chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_COLUMN);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.COLUMN_DATA_POINT, ColumnDataPointView, LangManager.get('PROPERTY_EDITOR_COLUMN_DATA_POINT'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.COLUMN_DATA_LABEL, ColumnDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);

            _write(chartType, VizPropertyZone.X_AXIS, [new Section(Section.CATEGORY_AXIS, CategoryAxisView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS'), 1, 0)]);
            _write(chartType, VizPropertyZone.X_AXIS_TITLE, [new Section(Section.CATEGORY_AXIS_TITLE, CategoryAxisTitleView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE'), 1, 1)]);
            _write(chartType, VizPropertyZone.Y_AXIS, [new Section(Section.VALUE_AXIS, ValueAxisView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS'), 1, 2)]);
            _write(chartType, VizPropertyZone.Y_AXIS_TITLE, [new Section(Section.VALUE_AXIS_TITLE, ValueAxisTitleView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS_TITLE'), 1, 3)]);

            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
            // Bar chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_BAR);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.COLUMN_DATA_POINT, ColumnDataPointView, LangManager.get('PROPERTY_EDITOR_BAR_DATA_POINT'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.COLUMN_DATA_LABEL, ColumnDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);

            _write(chartType, VizPropertyZone.Y_AXIS, [new Section(Section.CATEGORY_AXIS, CategoryAxisView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS'), 1, 0)]);
            _write(chartType, VizPropertyZone.Y_AXIS_TITLE, [new Section(Section.CATEGORY_AXIS_TITLE, CategoryAxisTitleView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS_TITLE'), 1, 1)]);
            _write(chartType, VizPropertyZone.X_AXIS, [new Section(Section.VALUE_AXIS, ValueAxisView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS'), 1, 2)]);
            _write(chartType, VizPropertyZone.X_AXIS_TITLE, [new Section(Section.VALUE_AXIS_TITLE, ValueAxisTitleView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE'), 1, 3)]);

            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
            // Line chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_LINE);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.LINE_DATA_POINT, LineDataPointView, LangManager.get('PROPERTY_EDITOR_MARKER'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.LINE_DATA_LABEL, LineDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);
            _write(chartType, VizPropertyZone.LINE, [new Section(Section.LINE, LineView, LangManager.get('PROPERTY_EDITOR_LINE'), 0, 2)]);

            _write(chartType, VizPropertyZone.X_AXIS, [new Section(Section.CATEGORY_AXIS, CategoryAxisView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS'), 1, 0)]);
            _write(chartType, VizPropertyZone.X_AXIS_TITLE, [new Section(Section.CATEGORY_AXIS_TITLE, CategoryAxisTitleView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE'), 1, 1)]);
            _write(chartType, VizPropertyZone.Y_AXIS, [new Section(Section.VALUE_AXIS, ValueAxisView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS'), 1, 2)]);
            _write(chartType, VizPropertyZone.Y_AXIS_TITLE, [new Section(Section.VALUE_AXIS_TITLE, ValueAxisTitleView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS_TITLE'), 1, 3)]);

            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
            // Horizontal line chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_HORIZONTAL_LINE);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.LINE_DATA_POINT, LineDataPointView, LangManager.get('PROPERTY_EDITOR_MARKER'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.LINE_DATA_LABEL, LineDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);
            _write(chartType, VizPropertyZone.LINE, [new Section(Section.LINE, LineView, LangManager.get('PROPERTY_EDITOR_LINE'), 0, 2)]);

            _write(chartType, VizPropertyZone.Y_AXIS, [new Section(Section.CATEGORY_AXIS, CategoryAxisView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS'), 1, 0)]);
            _write(chartType, VizPropertyZone.Y_AXIS_TITLE, [new Section(Section.CATEGORY_AXIS_TITLE, CategoryAxisTitleView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS_TITLE'), 1, 1)]);
            _write(chartType, VizPropertyZone.X_AXIS, [new Section(Section.VALUE_AXIS, ValueAxisView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS'), 1, 2)]);
            _write(chartType, VizPropertyZone.X_AXIS_TITLE, [new Section(Section.VALUE_AXIS_TITLE, ValueAxisTitleView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE'), 1, 3)]);

            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
            // Donut chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_DONUT);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.DONUT_DATA_POINT, DonutDataPointView, LangManager.get('PROPERTY_EDITOR_DONUT_DATA_POINT'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.DONUT_DATA_LABEL, DonutDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);
            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, DonutChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.DONUT_PLOT_AREA, DonutPlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
            // Stacked column chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_STACKED_COLUMN);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.COLUMN_DATA_POINT, ColumnSeriesView, LangManager.get('PROPERTY_EDITOR_SERIES'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.COLUMN_DATA_LABEL, StackedColumnDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);

            _write(chartType, VizPropertyZone.X_AXIS, [new Section(Section.CATEGORY_AXIS, CategoryAxisView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS'), 1, 0)]);
            _write(chartType, VizPropertyZone.X_AXIS_TITLE, [new Section(Section.CATEGORY_AXIS_TITLE, CategoryAxisTitleView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE'), 1, 1)]);
            _write(chartType, VizPropertyZone.Y_AXIS, [new Section(Section.VALUE_AXIS, ValueAxisView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS'), 1, 2)]);
            _write(chartType, VizPropertyZone.Y_AXIS_TITLE, [new Section(Section.VALUE_AXIS_TITLE, ValueAxisTitleView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS_TITLE'), 1, 3)]);

            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
            // Stacked bar chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_STACKED_BAR);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.COLUMN_DATA_POINT, ColumnSeriesView, LangManager.get('PROPERTY_EDITOR_SERIES'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.COLUMN_DATA_LABEL, StackedColumnDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);

            _write(chartType, VizPropertyZone.Y_AXIS, [new Section(Section.CATEGORY_AXIS, CategoryAxisView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS'), 1, 0)]);
            _write(chartType, VizPropertyZone.Y_AXIS_TITLE, [new Section(Section.CATEGORY_AXIS_TITLE, CategoryAxisTitleView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS_TITLE'), 1, 1)]);
            _write(chartType, VizPropertyZone.X_AXIS, [new Section(Section.VALUE_AXIS, ValueAxisView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS'), 1, 2)]);
            _write(chartType, VizPropertyZone.X_AXIS_TITLE, [new Section(Section.VALUE_AXIS_TITLE, ValueAxisTitleView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE'), 1, 3)]);

            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
            // 100% Stacked Column Chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_100_STACKED_COLUMN);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.COLUMN_DATA_POINT, ColumnSeriesView, LangManager.get('PROPERTY_EDITOR_SERIES'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.COLUMN_DATA_LABEL, StackedColumnDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);

            _write(chartType, VizPropertyZone.X_AXIS, [new Section(Section.CATEGORY_AXIS, CategoryAxisView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS'), 1, 0)]);
            _write(chartType, VizPropertyZone.X_AXIS_TITLE, [new Section(Section.CATEGORY_AXIS_TITLE, CategoryAxisTitleView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE'), 1, 1)]);
            _write(chartType, VizPropertyZone.Y_AXIS, [new Section(Section.VALUE_AXIS, ValueAxisView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS'), 1, 2)]);
            _write(chartType, VizPropertyZone.Y_AXIS_TITLE, [new Section(Section.VALUE_AXIS_TITLE, ValueAxisTitleView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS_TITLE'), 1, 3)]);

            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
            // 100% Stacked Bar Chart
            chartType = InfoChartUtil.getInfoType(ChartConst.TYPE_100_STACKED_BAR);
            _write(chartType, VizPropertyZone.DATA_POINT, [new Section(Section.COLUMN_DATA_POINT, ColumnSeriesView, LangManager.get('PROPERTY_EDITOR_SERIES'), 0, 0)]);
            _write(chartType, VizPropertyZone.DATA_LABEL, [new Section(Section.COLUMN_DATA_LABEL, StackedColumnDataLabelView, LangManager.get('PROPERTY_EDITOR_DATA_LABEL'), 0, 1)]);

            _write(chartType, VizPropertyZone.Y_AXIS, [new Section(Section.CATEGORY_AXIS, CategoryAxisView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS'), 1, 0)]);
            _write(chartType, VizPropertyZone.Y_AXIS_TITLE, [new Section(Section.CATEGORY_AXIS_TITLE, CategoryAxisTitleView, LangManager.get('PROPERTY_EDITOR_VERTICAL_AXIS_TITLE'), 1, 1)]);
            _write(chartType, VizPropertyZone.X_AXIS, [new Section(Section.VALUE_AXIS, ValueAxisView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS'), 1, 2)]);
            _write(chartType, VizPropertyZone.X_AXIS_TITLE, [new Section(Section.VALUE_AXIS_TITLE, ValueAxisTitleView, LangManager.get('PROPERTY_EDITOR_HORIZONTAL_AXIS_TITLE'), 1, 3)]);

            _write(chartType, VizPropertyZone.CHART_AREA, [new Section(Section.CHART_AREA, ChartAreaView, LangManager.get('PROPERTY_EDITOR_CHART_AREA'), 2, 0)]);
            _write(chartType, VizPropertyZone.CHART_TITLE, [new Section(Section.CHART_TITLE, ChartTitleView, LangManager.get('PROPERTY_EDITOR_CHART_TITLE'), 2, 1)]);
            _write(chartType, VizPropertyZone.PLOT_AREA, [new Section(Section.PLOT_AREA, PlotAreaView, LangManager.get('PROPERTY_EDITOR_PLOT_AREA'), 2, 2)]);
            _write(chartType, VizPropertyZone.LEGEND, [new Section(Section.LEGEND, LegendView, LangManager.get('PROPERTY_EDITOR_LEGEND'), 2, 3)]);
        }
    };
    return VizPropertyZoneMap;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/InfoPropertyEditor',[
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/propertyeditor/sections/VizPropertyZoneMap',
    'sap/viz/controls/propertyeditor/sections/PropertyViewFactory',
    'sap/viz/controls/propertyeditor/pickers/PickerEvent',
    'sap/viz/controls/propertyeditor/pickers/SectionPicker'
],
function(VizControlBase, CSSConst, OOUtil, utils, InfoChartUtil, ChartTypeUtil, LangManager, VizPropertyZone,
    VizPropertyZoneMap, PropertyViewFactory,
    PickerEvent, SectionPicker) {
// @formatter:on

    /**
     * The InfoPropertyEditor class is a control to build proprty editor.
     * @class sap.viz.controls.propertyeditor.InfoPropertyEditor
     */
    var InfoPropertyEditor = function(div, uiConfig) {
        InfoPropertyEditor.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.propertyeditor.InfoPropertyEditor';

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_infopropertyeditor_control');

        this._title$ = null;
        this._sectionPicker = null;
        this._viewsContainer$ = null;
        this._views = [];

        this._createChildren();

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:create_infopropertyeditor_control');
    };

    OOUtil.extend(InfoPropertyEditor, VizControlBase);

    InfoPropertyEditor.prototype.destroy = function() {
        InfoPropertyEditor.superclass.destroy.apply(this, arguments);

        // ChartEvent.PROPERTY_ZONES_CHANGED
        var vizProxy = this._vizProxy();
        vizProxy.removeEventListener('propertyZonesChanged', this._recreateViews, this);
        vizProxy.setPropertyZones([]);
        this._destroyViews();
    };

    InfoPropertyEditor.prototype._onConnect = function(vizUid, modelChanged) {
        InfoPropertyEditor.superclass._onConnect.apply(this, arguments);
        this._updateChildren();
        // ChartEvent.PROPERTY_ZONES_CHANGED
        this._vizProxy().addEventListener('propertyZonesChanged', this._recreateViews, this);
    };

    InfoPropertyEditor.prototype._onDisconnect = function() {
        InfoPropertyEditor.superclass._onDisconnect.apply(this, arguments);
        // ChartEvent.PROPERTY_ZONES_CHANGED
        this._vizProxy().removeEventListener('propertyZonesChanged', this._recreateViews, this);
    };

    InfoPropertyEditor.prototype._createChildren = function() {
        var child$;

        this._dom$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'main');
        // Title
        if (this._uiConfig.enableTitle === true) {
            this._title$ = $(document.createElement('div'));
            this._title$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'title');
            this._title$.appendTo(this._dom$);
        }
        // Splitter
        if (this._title$) {
            child$ = $(document.createElement('div'));
            child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'title-splitter');
            child$.appendTo(this._dom$);
        }
        // Section selector
        child$ = $(document.createElement('div'));
        child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'section-selector-container');
        child$.appendTo(this._dom$);
        child$ = $(document.createElement('div')).appendTo(child$);
        this._sectionPicker = new SectionPicker(child$.get(0), null, {
            'sections' : []
        });
        this._sectionPicker.addEventListener(PickerEvent.PICKED_ITEM_CHANGED, this._sectionPickerChangedHandler, this);
        // View container
        this._viewsContainer$ = $(document.createElement('div'));
        this._viewsContainer$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'views-container');
        this._viewsContainer$.appendTo(this._dom$);
        // Update
        this._updateChildren();
    };

    InfoPropertyEditor.prototype._updateChildren = function() {
        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:update_infopropertyeditor');

        var vizType = this._vizModel().type();
        if (!ChartTypeUtil.isInfoChart(vizType)) {
            return;
        }
        if (vizType) {
            // Title
            if (this._title$) {
                var name = sap.viz.api.manifest.Viz.get(InfoChartUtil.getVizType(vizType))[0].name;
                this._title$.text(utils.substitute(LangManager.get('PROPERTY_EDITOR_TITLE_PREFIX'), name));
            }
            // Section picker
            this._sectionPicker.sections(VizPropertyZoneMap.getAvailableSections(vizType));
            // Views
            this._recreateViews();
        } else {
            // Title
            if (this._title$) {
                this._title$.text(LangManager.get('PROPERTY_EDITOR_TITLE_PLACE_HOLDER'));
            }
            // Section picker
            this._sectionPicker.sections([]);
            // Views
            this._destroyViews();
        }

        sap.viz.base.utils.log.Analyzer.pnrProfiling('VizControls:update_infopropertyeditor');
    };

    InfoPropertyEditor.prototype._sectionPickerChangedHandler = function(event) {
        var section = event.data.pickedItem;
        var zone = VizPropertyZoneMap.queryPropertyZone(this._vizModel().type(), section);
        this._vizProxy().setPropertyZones([zone]);
        this._recreateViews();
    };

    InfoPropertyEditor.prototype._recreateViews = function() {
        this._destroyViews();
        this._createViews();
    };

    InfoPropertyEditor.prototype._createViews = function() {
        this._views = [];
        var zones = this._vizProxy().getPropertyZones();
        if (!zones || zones.length == 0) {
            zones = [new VizPropertyZone(VizPropertyZone.CHART_AREA)];
            this._vizProxy().setPropertyZones(zones);
        }

        var done = {};
        zones.forEach($.proxy(function(zone, index, zones) {
            // Do not create duplicate sections when multiple zone with same type selected.
            if (done[zone.type()]) {
                done[zone.type()].push(zone);
            } else {
                done[zone.type()] = [zone];
            }
        }, this));

        for (var type in done) {
            // Generate sections
            var sections = VizPropertyZoneMap.mapSections(this._vizModel().type(), type);
            sections.forEach($.proxy(function(section) {
                this._sectionPicker.pickedItem(section);

                var child$ = $(document.createElement('div')).appendTo(this._viewsContainer$);
                child$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'view');
                var view = PropertyViewFactory.produce(section, child$.get(0), this._uiConfig, this._vizProxy(), done[type]);
                this._views.push(view);
            }, this));
        }
    };

    InfoPropertyEditor.prototype._destroyViews = function() {
        if (this._views) {
            this._views.forEach(function(view) {
                view.destroy();
            });
        }
        this._views = null;
        this._viewsContainer$.empty();
    };

    return InfoPropertyEditor;
});

// @formatter:off
define('sap/viz/controls/propertyeditor/PropertyEditor',[
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/propertyeditor/PropertyEditorConfig',
    'sap/viz/controls/propertyeditor/VizPropertyEditor',
    'sap/viz/controls/propertyeditor/InfoPropertyEditor',
    'sap/viz/controls/propertyeditor/events/PropertyEditorEvent',
    'sap/viz/controls/propertyeditor/pickers/ColorPicker'
],
function(VizControlBase, CSSConst, OOUtil, utils, LangManager,
    PropertyEditorConfig, VizPropertyEditor, InfoPropertyEditor, PropertyEditorEvent, ColorPicker) {
// @formatter:on

    /**
     * The PropertyEditor class is a control to build proprty editor.
     * @class sap.viz.controls.propertyeditor.PropertyEditor
     */
    var PropertyEditor = function(div, uiConfig) {
        PropertyEditor.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.propertyeditor.PropertyEditor';

        this._uiConfig = uiConfig ? uiConfig : PropertyEditorConfig.instance();
        try {
            jQuery.sap.require('sap.ui.commons.Button');
            jQuery.sap.require('sap.ui.commons.Slider');
            jQuery.sap.require('sap.ui.commons.ColorPicker');
            jQuery.sap.require('sap.ui.commons.ToggleButton');
            jQuery.sap.require('sap.ui.commons.Label');
            jQuery.sap.require('sap.ui.commons.DropdownBox');
            jQuery.sap.require('sap.ui.commons.TextField');
            jQuery.sap.require('sap.ui.commons.CheckBox');
            jQuery.sap.require('sap.ui.commons.RadioButton');
            jQuery.sap.require('sap.ui.commons.TriStateCheckBox');
            jQuery.sap.require('sap.ui.commons.ComboBox');
        } catch(e) {
            throw utils.substitute(LangManager.get('VIZ_COMMON_DEPENDENCY_ERROR'), 'sap.ui.commons', 'PropertyEditor');
        }

        this._createChildren();

        this._recentColors = [];

        this._colorPickerClass = ColorPicker;
        this._colorPickerClass._recentColors = this._recentColors;
        this._colorPickerClass._eventDispatch.addEventListener(PropertyEditorEvent.RECENTCOLORS_CHANGED, function(event){
             this._onRecentColorsChange(event);
        }.bind(this));
    };

    OOUtil.extend(PropertyEditor, VizControlBase);

    PropertyEditor.prototype.update = function() {
        this._updateChildren();
    };

    /**
     * Set/Get recentColors.
     * @method sap.viz.controls.propertyeditor.PropertyEditor.prototype.recentColors
     * @param {Array<colorString>} recentColors
     * @return {Array<colorString>} recentColors
     */
    PropertyEditor.prototype.recentColors = function(recentColors){
        if(arguments.length>0 && !!recentColors){
            if(this._colorPickerClass)
            {
                this._colorPickerClass._recentColors = recentColors;
            }
            this._recentColors = recentColors;
            return this;
        }else{
            return this._recentColors;
        }
    };

    PropertyEditor.prototype._onConnect = function(vizUid, modelChanged) {
        PropertyEditor.superclass._onConnect.apply(this, arguments);
        this._updateChildren();
    };

    PropertyEditor.prototype._onDisconnect = function() {
        PropertyEditor.superclass._onDisconnect.apply(this, arguments);
        if (this._editorInstance) {
            this._editorInstance.disconnect();
        }
    };
    PropertyEditor.prototype._onAfterDisconnect = function() {
    	this._vizModel().type(null);
        this._updateChildren();
    };

    PropertyEditor.prototype._onVizModelChanged = function(e) {
        if (e.data.vizTypeChanged) {
            this._updateChildren();
        }
    };

    PropertyEditor.prototype._createChildren = function() {
        this._dom$.addClass(CSSConst.PROPERTYEDITOR_PREFIX + 'main');
        this._editorInstance = null;
        this._updateChildren();
    };

    PropertyEditor.prototype._onRecentColorsChange = function(event){
        this._dispatchEvent(event);
        this._recentColors = event.data;
    };

    PropertyEditor.prototype._updateChildren = function() {
        if(this._editorInstance) {
            this._editorInstance.disconnect();
            this._editorInstance.destroy();
        }
        this._dom$.empty();
        var vizType = this._vizModel().type();
        if(!vizType) {
            return;
        }
        if(vizType.indexOf('info/') == 0) {
            this._editorInstance = new InfoPropertyEditor(this._dom$, this._uiConfig);
        } else if(vizType.indexOf('viz/') == 0) {
            this._editorInstance = new VizPropertyEditor(this._dom$, this._uiConfig);
        } else {
            //for extension, chart type is started neither by info nor viz
            this._editorInstance = new VizPropertyEditor(this._dom$, this._uiConfig);
        }
        if(this._editorInstance) {
            this._editorInstance.connect(this._vizUid);
        }
    };

    PropertyEditor.prototype.destroy = function() {
        if (this._editorInstance) {
            this._editorInstance.destroy();
        }
        PropertyEditor.superclass.destroy.apply(this, arguments);
    };

    return PropertyEditor;
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/ShapeMarker',[],
function() {
// @formatter:on
    var _declare = function() {
        /*
         * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
         */
        jQuery.sap.declare('sap.viz.chartpopover.ShapeMarker');

        sap.ui.core.Control.extend('sap.viz.chartpopover.ShapeMarker', {
            metadata : {
                properties : {
                    'type' : 'string',
                    'color' : 'string',
                    'markerSize' : 'int'
                }
            },

            renderer : {
                render : function(oRm, oControl) {
                    var markerSize = oControl.getMarkerSize() ? oControl.getMarkerSize() : 10;
                    var props = {
                        rx : markerSize / 2,
                        ry : markerSize / 2,
                        type : oControl.getType(),
                        borderWidth : 0
                    };
                    oRm.write('<div');
                    oRm.writeClasses();
                    oRm.write('>');
                    oRm.write('<svg width=' + markerSize + 'px height=' + markerSize + 'px ');
                    oRm.write('>');
                    oRm.write("<path d = '" + oControl._generateShapePath(props) + "'");
                    oRm.write(" fill = '" + oControl.getColor() + "'");
                    oRm.write(" transform = 'translate(" + markerSize / 2 + "," + markerSize / 2 + ")'");
                    oRm.write('</path>');
                    oRm.write('</svg>');
                    oRm.write('</div>');
                    oRm.writeStyles();
                }
            }
        });

        sap.viz.chartpopover.ShapeMarker.prototype._generateShapePath = function(props) {
            var result;
            var temp = props.borderWidth / 2;
            switch(props.type) {
                case "circle" :
                    result = "M" + (-props.rx - temp) + ",0 A" + (props.rx + temp) + "," + (props.ry + temp) + " 0 1,0 " + (props.rx + temp) + ",0 A";
                    result += (props.rx + temp) + "," + (props.ry + temp) + " 0 1,0 " + (-props.rx - temp) + ",0z";
                    break;
                case "cross" :
                    result = "M" + (-props.rx - temp) + "," + (-props.ry / 3 - temp) + "H" + (-props.rx / 3 - temp) + "V" + (-props.ry - temp) + "H" + (props.rx / 3 + temp);
                    result += "V" + (-props.ry / 3 - temp) + "H" + (props.rx + temp) + "V" + (props.ry / 3 + temp) + "H" + (props.rx / 3 + temp);
                    result += "V" + (props.ry + temp) + "H" + (-props.rx / 3 - temp) + "V" + (props.ry / 3 + temp) + "H" + (-props.rx - temp) + "Z";
                    break;
                case "diamond" :
                    result = "M0," + (-props.ry - temp) + "L" + (props.rx + temp) + ",0" + " 0," + (props.ry + temp) + " " + (-props.rx - temp) + ",0" + "Z";
                    break;
                case "square" :
                    result = "M" + (-props.rx - temp) + "," + (-props.ry - temp) + "L" + (props.rx + temp) + ",";
                    result += (-props.ry - temp) + "L" + (props.rx + temp) + "," + (props.ry + temp) + "L" + (-props.rx - temp) + "," + (props.ry + temp) + "Z";
                    break;
                case "triangle-down" :
                //TODO: remove duplicate
                case "triangleDown" :
                    result = "M0," + (props.ry + temp) + "L" + (props.rx + temp) + "," + -(props.ry + temp) + " " + -(props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "triangle-up" :
                //TODO: remove duplicate
                case "triangleUp" :
                    result = "M0," + -(props.ry + temp) + "L" + (props.rx + temp) + "," + (props.ry + temp) + " " + -(props.rx + temp) + "," + (props.ry + temp) + "Z";
                    break;
                case "triangle-left" :
                //TODO: remove duplicate
                case "triangleLeft" :
                    result = "M" + -(props.rx + temp) + ",0L" + (props.rx + temp) + "," + (props.ry + temp) + " " + (props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "triangle-right" :
                //TODO: remove duplicate
                case "triangleRight" :
                    result = "M" + (props.rx + temp) + ",0L" + -(props.rx + temp) + "," + (props.ry + temp) + " " + -(props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "intersection" :
                    result = "M" + (props.rx + temp) + "," + (props.ry + temp) + "L" + (props.rx / 3 + temp) + ",0L" + (props.rx + temp) + "," + -(props.ry + temp) + "L";
                    result += (props.rx / 2 - temp) + "," + -(props.ry + temp) + "L0," + (-props.ry / 3 - temp) + "L" + (-props.rx / 2 + temp) + "," + -(props.ry + temp) + "L";
                    result += -(props.rx + temp) + "," + -(props.ry + temp) + "L" + -(props.rx / 3 + temp) + ",0L" + -(props.rx + temp) + "," + (props.ry + temp) + "L";
                    result += (-props.rx / 2 + temp) + "," + (props.ry + temp) + "L0," + (props.ry / 3 + temp) + "L" + (props.rx / 2 - temp) + "," + (props.ry + temp) + "Z";
                    break;
                case 'squareWithRadius' :
                    var r = props.rx;
                    var radius = r - 3;
                    result = "M0," + -r + "L" + -radius + "," + -r + "Q" + -r + "," + -r + " " + -r + "," + -radius + "L" + -r + "," + radius + "Q" + -r + "," + r + " " + -radius + "," + r;
                    result += "L" + radius + "," + r + "Q" + r + "," + r + " " + r + "," + radius + "L" + r + "," + -radius + "Q" + r + "," + -r + " " + radius + "," + -r + "Z";
                    break;
            }
            //symbolMap[props] = result;
            return result;
        };

    };

    return {
        'create' : function(id, settings) {
            try {
                return new sap.viz.chartpopover.ShapeMarker(id, settings);
            } catch(e) {
                _declare();
                return arguments.callee.apply(this, arguments);
            }
        }
    };
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/ContentPanel',[
    'sap/viz/controls/popover/chartpopover/ShapeMarker'
],
function(ShapeMarker) {
// @formatter:on
    var _declare = function() {
        /*
         * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
         */
        jQuery.sap.declare('sap.viz.chartpopover.ContentPanel');

        sap.ui.core.Control.extend('sap.viz.chartpopover.ContentPanel', {
            metadata : {
                publicMethods : ["setContentData"]
            },

            /*
             onAfterRendering : function(){
             var contentHeight = this._oPanel.$().outerHeight(true);
             this._oPanel.setHeight(contentHeight+'px');
             },*/

            renderer : {
                render : function(oRm, oControl) {
                    oRm.renderControl(oControl._oPanel);
                }
            }
        });

        sap.viz.chartpopover.ContentPanel.prototype.init = function() {
            this._measureItemsLen = 0;
            this._defaultItemsLineHeight = 1.4375;
            this._spacing = 0.4375 * 2;

            var oModel = new sap.ui.model.json.JSONModel();
            this._sModelName = "sapvizModel";
            var oItemTemplate = new sap.m.DisplayListItem({
                label : "{measureName}",
                value : "{measureValue}"
            }).addStyleClass('viz-controls-chartPopover-measures-item');

            this._oList = new sap.m.List({
            }).addStyleClass('viz-controls-chartPopover-measures-list');
            this._oList.setModel(oModel);
            this._oList.bindAggregation("items", "/items", oItemTemplate);

            this._oShapeLabel = ShapeMarker.create(this._createId('vizShapeMarker'), {
            }).addStyleClass('viz-controls-chartPopover-dimension-marker');
            this._oDimLabel = new sap.m.Label(this._createId('vizDimensionLabel'), {
            }).addStyleClass('viz-controls-chartPopover-dimension-label');
            this._oPanel = new sap.m.Panel(this._createId('vizPanel'), {
                content : [this._oShapeLabel, this._oDimLabel, this._oList]
            });
        };

        sap.viz.chartpopover.ContentPanel.prototype.setContentData = function(data) {
            var values = data.val, dims = '', meas = [];
            this._measureItemsLen = 0;
            if (values) {
                for (var i = 0; i < values.length; i++) {
                    if (values[i].type === 'dimension') {
                        if (dims.length > 0) {
                            dims = dims + ' - ' + values[i].value;
                        } else {
                            dims = values[i].value;
                        }
                    } else if (values[i].type == 'measure') {
                        meas.push({
                            measureName : values[i].name,
                            measureValue : values[i].value
                        });
                    }
                }

                var markerSize = this._oDimLabel.$().css('margin-left');
                if (markerSize) {
                    markerSize = parseInt(markerSize.substr(0, markerSize.length - 2));
                    this._oShapeLabel.setMarkerSize(markerSize);
                }
                this._oShapeLabel.setColor(data.color).setType((data.shape ? data.shape : 'square'));
                this._oDimLabel.setText(dims);
                this._oList.getModel().setData({
                    'items' : meas
                });

                this._measureItemsLen = meas.length;
            }
        };

        sap.viz.chartpopover.ContentPanel.prototype.getContentHeight = function() {
            return this._measureItemsLen > 0 ? ((this._measureItemsLen + 1) * this._defaultItemsLineHeight + this._spacing) : 0;
        };
        /**
         * Creates an id for an Element prefixed with the control id
         *
         * @return {string} id
         * @public
         */
        sap.viz.chartpopover.ContentPanel.prototype._createId = function(sId) {
            return this.getId() + "-" + sId;
        };

        sap.viz.chartpopover.ContentPanel.prototype.exit = function(sId) {
            if (this._oList) {
                this._oList.destroy();
                this._oList = null;
            }

            if (this._oShapeLabel) {
                this._oShapeLabel.destroy();
                this._oShapeLabel = null;
            }

            if (this._oDimLabel) {
                this._oDimLabel.destroy();
                this._oDimLabel = null;

            }
        };

    };

    return {
        'create' : function(id, settings) {
            try {
                return new sap.viz.chartpopover.ContentPanel(id, settings);
            } catch(e) {
                _declare();
                return arguments.callee.apply(this, arguments);
            }
        }
    };

});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/HeaderBar',[],
function() {
// @formatter:on
    var _declare = function() {
        /*
         * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
         */
        jQuery.sap.declare('sap.viz.chartpopover.HeaderBar');

        sap.m.Bar.extend('sap.viz.chartpopover.HeaderBar', {
            metadata : {
                properties : {
                    'showNavButton' : 'boolean',
                    'title' : 'string'
                },
                publicMethods : [],
                events : {
                    "navButtonPress" : {},
                    "closeButtonPress" : {}
                }
            },
            renderer : {}
        });

        sap.viz.chartpopover.HeaderBar.prototype.getContentLeft = function() {
            if (!this._oNavButton) {
                this._oNavButton = new sap.m.Button(this._createId("popoverNavButton"), {
                    type : sap.m.ButtonType.Back,
                    press : jQuery.proxy(function() {
                        this.fireNavButtonPress();
                    }, this)
                }).addStyleClass('sapUiIcon');
            }
            this._oNavButton.setVisible(this.getShowNavButton());
            return [this._oNavButton];
        };

        sap.viz.chartpopover.HeaderBar.prototype.getContentMiddle = function() {
            if (!this._oTitleLabel) {
                this._oTitleLabel = new sap.m.Label(this._createId('popoverHeaderTitle'));
            }
            this._oTitleLabel.setText(this.getTitle());
            return [this._oTitleLabel];
        };

        sap.viz.chartpopover.HeaderBar.prototype.getContentRight = function() {
            if (!this._oCloseButton) {
                this._oCloseButton = new sap.m.Button(this._createId("popoverCloseButton"), {
                    icon : sap.ui.core.IconPool.getIconURI("decline"),
                    press : jQuery.proxy(function() {
                        this.fireCloseButtonPress();
                    }, this)
                }).addStyleClass('sapUiIcon');
            }
            return [this._oCloseButton];
        };

        sap.viz.chartpopover.HeaderBar.prototype.exit = function() {
            if (this._oCloseButton) {
                this._oCloseButton.destroy();
                this._oCloseButton = null;
            }

            if (this._oTitleLabel) {
                this._oTitleLabel.destroy();
                this._oTitleLabel = null;
            }

            if (this._oNavButton) {
                this._oNavButton.destroy();
                this._oNavButton = null;
            }
        };

        sap.viz.chartpopover.HeaderBar.prototype._createId = function(sId) {
            return this.getId() + "-" + sId;
        };

    };

    return {
        'create' : function(id, settings) {
            try {
                return new sap.viz.chartpopover.HeaderBar(id, settings);
            } catch(e) {
                _declare();
                return arguments.callee.apply(this, arguments);
            }
        }
    };
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/SubActionItemsPage',[],
function() {
// @formatter:on
    var _declare = function() {
        /*
         * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
         */
        jQuery.sap.declare('sap.viz.chartpopover.SubActionItemsPage');

        sap.ui.core.Element.extend('sap.viz.chartpopover.SubActionItemsPage', {
            metadata : {
                properties : {
                    items : {
                        type : 'sap.m.ListBase[]'
                    }
                }
            }
        });

        sap.viz.chartpopover.SubActionItemsPage.prototype.init = function() {
            this._oList = new sap.m.List({
            });

            this._oPage = new sap.m.Page(this._createId("listPage"), {
                showNavButton : false,
                showHeader : false,
                content : [this._oList]
            });
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype.exit = function() {
            if (this._oList) {
                this._oList.destroy();
                this._oList = null;
            }

            if (this._oPage) {
                this._oPage.destroy();
                this._oPage = null;
            }
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype.getControl = function() {
            return this._oPage;
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype.getPageId = function() {
            return this._oPage.getId();
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype.setItems = function(items) {
            this._oList.removeAllItems();
            var item;
            for (var i = 0; i < items.length; i++) {
                item = new sap.m.ActionListItem({
                    text : items[i].text,
                    press : items[i].press ? items[i].press : function() {
                    }
                });
                this._oList.addItem(item);
            }
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype._createId = function(sId) {
            return this.getId() + "-" + sId;
        };

    };

    return {
        'create' : function(id, settings) {
            try {
                return new sap.viz.chartpopover.SubActionItemsPage(id, settings);
            } catch(e) {
                _declare();
                return arguments.callee.apply(this, arguments);
            }
        }
    };
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/ChartPopover',[
    'sap/viz/controls/popover/chartpopover/ContentPanel',
    'sap/viz/controls/popover/chartpopover/HeaderBar',
    'sap/viz/controls/popover/chartpopover/SubActionItemsPage'
],
function(ContentPanel, HeaderBar, SubActionItemsPage) {
// @formatter:on
    var _declare = function() {
        /**
         * ChartPopover provides a popover used with charts to display chart selections.
         * Content and Action List Items can be customized.
         *
         */
        jQuery.sap.declare('sap.viz.chartpopover.ChartPopover');

        sap.ui.core.Control.extend('sap.viz.chartpopover.ChartPopover', {
            metadata : {
                properties : {
                    'customDataControl' : {
                        type : 'any'
                    }, //Parameter is selectData and returned Value is an UI5 Controls
                    'actionItems' : {
                        type : 'object[]'
                    }
                }
            }
        });

        sap.viz.chartpopover.ChartPopover.prototype.init = function() {
            this._listItemHeight = 3;
            //3rem
            this._options = null;
            this._oContentPanel = ContentPanel.create(this._createId('vizContentPanel'), {});

            this._oSelectedLabel = new sap.m.Label(this._createId('vizSelectedLabel'), { });

            this._oSelectedBar = new sap.m.Bar(this._createId('vizSelectedBar'), {
                contentMiddle : [this._oSelectedLabel]
            }).addStyleClass('viz-controls-chartPopover-vizSelectedBar').addStyleClass('viz-controls-chartPopover-vizSelectedBarBorder');

            this._oHomePage = new sap.m.Page(this._createId('vizHomePage'), {
                showNavButton : false,
                showHeader : false,
                content : [this._oContentPanel]
            });

            this._oNavContainer = new sap.m.NavContainer(this._createId('vizNavContainer'), {
                // initialPage : 'homePage',
                afterNavigate : jQuery.proxy(function(oEvent) {
                    var pageId = oEvent.getParameter("to").getId();
                    if (pageId.search('HomePage') !== -1) {
                        this._oCustomHeader.setShowNavButton(false).setTitle('Current Selection');
                    } else {
                        this._oCustomHeader.setShowNavButton(true);
                    }
                }, this)
            });
            this._oNavContainer.addPage(this._oHomePage);

            this._oCustomHeader = HeaderBar.create(this._createId('vizHeaderBar'), {
                title : 'Current Selection',
                showNavButton : false,
                closeButtonPress : jQuery.proxy(this.close, this),
                navButtonPress : jQuery.proxy(this._navigateBack, this)
            });

            this._oPopover = new sap.m.ResponsivePopover(this._createId('vizChartPopover'), {
                modal : false,
                bounce : true,
                //verticalScrolling:true,
                horizontalScrolling : false,
               // placement : sap.m.PlacementType.Left.Horizontal,
                contentWidth : "18rem",
                contentHeight : '100%',
                customHeader : this._oCustomHeader,
                content : [this._oNavContainer]
            });
            this._oPopover.addStyleClass('viz-controls-chartPopover');
            this._oPopover.attachBeforeOpen(jQuery.proxy(this._beforeOpen, this));
            this._oPopover.attachAfterClose(jQuery.proxy(this._afterClose, this));
        };

        sap.viz.chartpopover.ChartPopover.prototype._beforeOpen = function() {
            var selectedLabelHeight = 0;
            if (!this._options.data.val || this._options.selectedValues > 1) {
                selectedLabelHeight = this._listItemHeight + 0.1;
            }
            var contentHeight = this._oContentPanel.getContentHeight() + selectedLabelHeight;
            if (this._oContentPanel.getContentHeight() === 0) {
                //No detail data info, remove contentPanel
                if (!this._oCustomPanel) {
                    this._oHomePage.removeContent(this._oContentPanel);
                    this._oSelectedBar.removeStyleClass('viz-controls-chartPopover-vizSelectedBarBorder');
                }
            }
            if (this.getActionItems()) {
                contentHeight += this.getActionItems().length * this._listItemHeight;
            }
            this._oPopover.setContentHeight(contentHeight + 'rem');
        };

        sap.viz.chartpopover.ChartPopover.prototype._afterClose = function() {
            if (this._options && this._options.selectedValues < 1) {
                this._oHomePage.removeContent(this._oSelectedBar);
            }
        };

        /**
         * Returns true if the popover is open, otherwise false.
         *
         * @returns {boolean} true if the popover is open, otherwise false
         *
         */
        sap.viz.chartpopover.ChartPopover.prototype.isOpen = function() {
            return this._oPopover.isOpen();
        };

        /**
         * Open Chart's Popover.
         */
        sap.viz.chartpopover.ChartPopover.prototype.openBy = function(oControl, bSkipInstanceManager) {
            if (oControl) {
                this._updateContent();
                this._updateActionItems();

                var targetSize = oControl.getBoundingClientRect();
                this._oPopover.setOffsetX(parseInt(targetSize.width)).setOffsetY(parseInt(targetSize.height / 2));

                this._navigateBack();

                this._oPopover.openBy(oControl, bSkipInstanceManager);
            }
            return this;
        };

        /**
         * Close Chart's Popover.
         */
        sap.viz.chartpopover.ChartPopover.prototype.close = function() {
            this._oPopover.close();
            return this;
        };

        /**
         * Destroy Chart's Popover
         */
        sap.viz.chartpopover.ChartPopover.prototype.exit = function() {
            if (this._oNavContainer) {
                this._oNavContainer.destroy();
                this._oNavContainer = null;
            }

            if (this._oContentPanel) {
                this._oContentPanel.destroy();
                this._oContentPanel = null;
            }

            if (this._oSelectedLabel) {
                this._oSelectedLabel.destroy();
                this._oSelectedLabel = null;
            }

            if (this._oHomePage) {
                this._oHomePage.destroy();
                this._oHomePage = null;
            }

            if (this._oCustomHeader) {
                this._oCustomHeader.destroy();
                this._oCustomHeader = null;
            }

            if (this._oCustomPanel) {
                this._oCustomPanel.destroy();
                this._oCustomPanel = null;
            }

            if (this._oPopover) {
                this._oPopover.destroy();
                this._oPopover = null;
            }

            this._options = null;
        };

        /**
         * Set popover's options
         */
        sap.viz.chartpopover.ChartPopover.prototype.setOptions = function(options) {
            var data = options.data;
            this._options = options;
            this._oContentPanel.setContentData(data);
            if (!data.val || options.selectedValues > 1) {
                this._oSelectedLabel.setText(options.selectedValues + ' values selected');
                this._oHomePage.insertContent(this._oSelectedBar, 1);
            } else {
                this._oHomePage.removeContent(this._oSelectedBar);
            }
            return this;
        };

        sap.viz.chartpopover.ChartPopover.prototype._updateContent = function() {
            var contents = this.getCustomDataControl();
            if (contents) {
                //Has Custom Data Content.
                //1. remove the repvious custom panel.
                //2. remove content panel
                //3. insert new custom panel
                if (this._oCustomPanel) {
                    this._oHomePage.removeContent(this._oCustomPanel);
                }
                this._oCustomPanel = contents(this._options);
                this._oHomePage.removeContent(this._oContentPanel);
                this._oHomePage.insertContent(this._oCustomPanel, 0);
                this._oSelectedBar.addStyleClass('viz-controls-chartPopover-vizSelectedBarBorder');
            } else {
                //No custom data content.
                this._oCustomPanel = null;
                if (this._oHomePage.indexOfContent(this._oContentPanel) === -1) {
                    this._oHomePage.insertContent(this._oContentPanel, 0);
                    this._oSelectedBar.addStyleClass('viz-controls-chartPopover-vizSelectedBarBorder');
                }
            }
            return this;
        };

        sap.viz.chartpopover.ChartPopover.prototype._updateActionItems = function() {
            if (!this._oActionList) {
                var actionItems = this.getActionItems();
                if (actionItems && actionItems.length > 0) {
                    this._actionItems = jQuery.extend(true, this._actionItems, actionItems);

                    var item, listItems = [];
                    for (var i = 0, len = actionItems.length; i < len; i++) {
                        item = actionItems[i];
                        if (item.type === 'action') {
                            listItems.push(new sap.m.ActionListItem(this._createId('actionItems-' + i), {
                                text : item.text,
                                press : item.press ? item.press : function() {
                                }
                            }));
                        } else if (item.type === 'navigation') {
                            listItems.push(new sap.m.StandardListItem(this._createId('actionItems-' + i), {
                                title : item.text,
                                type : 'Navigation',
                                press : jQuery.proxy(function(event) {
                                    var id = event.getParameter('id');
                                    var index = parseInt(id.substring(id.lastIndexOf('-') + 1));
                                    var subActionItems = this._actionItems[index].children;
                                    if (subActionItems && subActionItems.length > 0) {
                                        if (!this._oSubActionItemsPage) {
                                            this._oSubActionItemsPage = SubActionItemsPage.create();
                                            this._oNavContainer.addPage(this._oSubActionItemsPage.getControl());
                                        }

                                        this._oSubActionItemsPage.setItems(subActionItems);
                                        this._oCustomHeader.setTitle(this._actionItems[index].text);
                                        this._navigateTo(this._oSubActionItemsPage.getPageId());
                                    }
                                }, this)
                            }));
                        }
                    }
                    this._oActionList = new sap.m.List({
                        items : listItems
                    }).addStyleClass('viz-controls-chartPopover-actionList');
                    this._oHomePage.addContent(this._oActionList);
                }
            }
        };

        sap.viz.chartpopover.ChartPopover.prototype._navigateBack = function() {
            this._oNavContainer.back();
        };

        sap.viz.chartpopover.ChartPopover.prototype._navigateTo = function(pageId) {
            this._oNavContainer.to(pageId);
        };

        /**
         * Creates an id for an Element prefixed with the control id
         *
         * @return {string} id
         * @public
         */
        sap.viz.chartpopover.ChartPopover.prototype._createId = function(sId) {
            return this.getId() + "-" + sId;
        };
    };

    return {

        'create' : function(id, settings) {
            try {
                return new sap.viz.chartpopover.ChartPopover(id, settings);
            } catch(e) {
                _declare();
                return arguments.callee.apply(this, arguments);
            }
        }
    };

});

// @formatter:off
define('sap/viz/controls/popover/PopOver',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/popover/chartpopover/ChartPopover'
],
function($, VizControlBase, OOUtil, utils, LangManager, ChartPopover) {
// @formatter:on

	/**
     * UI5 dependencies: sap.m
	 * 
	 * @param {Object} dom
	 * @param {Object} uiConfig
	 */
    var PopOver = function(options) {
        PopOver.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.popover.PopOver";

        try {
            jQuery.sap.require("sap.m.Label");
            jQuery.sap.require("sap.m.List");
            jQuery.sap.require("sap.m.Bar");
            jQuery.sap.require("sap.m.Page");
            jQuery.sap.require("sap.m.ActionListItem");
            jQuery.sap.require("sap.m.ResponsivePopover");
            jQuery.sap.require("sap.m.StandardListItem");
            jQuery.sap.require("sap.m.DisplayListItem");
            jQuery.sap.require("sap.m.Panel");
            jQuery.sap.require("sap.m.Button");
        } catch(e) {
            throw utils.substitute(LangManager.get('VIZ_COMMON_DEPENDENCY_ERROR'), 'sap.m', 'PopOver');
        }
        
        this._chartPopover = ChartPopover.create(options);
          /*
          {
            
            customDataControl : function(selectedData){
              console.log(selectedData);
              return new sap.m.Button({text: 'ff'});
            },
            
            'actionItems' : [
              {type: 'action', text: 'Action Item 1'},
              {type: 'navigation', text: 'Action Item 2', 
                children : [
                  {text: 'subActionItem'}
              ]},
              {type: 'navigation', text: 'Action Item 3', 
                children : [
                  {text: 'subActionItem 3-1'},
                  {text: 'subActionItem 3-2'}
              ]}
            ]
          });*/
          /*{
          'actionItems' : [
            {type: 'action', text: 'Action Item 1'},
            {type: 'navigation', text: 'Action Item 2', 
              children : [
                {text: 'subActionItem'}
            ]},
            {type: 'navigation', text: 'Action Item 3', 
              children : [
                {text: 'subActionItem 3-1'},
                {text: 'subActionItem 3-2'}
            ]}
          ]});*/
        /*
        var content = [
            new sap.m.Button({
                text : "SLIDE to Page 3",
                press : function() {
                    app.to("page3", "slide");
                }
            }), 
            new sap.m.Button({
                text : "FADE to Page 3",
                press : function() {
                    app.to("page3", "fade");
                }
            }), 
            new sap.m.Button({
                text : "SHOW to Page 3",
                press : function() {
                    app.to("page3", "show");
                }
            }), 
            new sap.m.Label({
                text : "The following field shows the data passed from page 1:"
            }), 
            new sap.m.Input("p2input", {
                value : null,
                width: "100%"
            }), 
            new sap.ui.core.HTML({content:"<div>This page does not scroll.</div>"}) 
          ];
          this.setContents(content);
          var actionItem = [
            new sap.m.ActionListItem({
              text : 'Action 1'
            }),
            new sap.m.StandardListItem({
              title : 'Actions',
              type : 'Navigation',
              //press : handleNavigator
            })
          ];
          this.setActionItems(actionItem);
          var subActionItem = [
             new sap.m.ActionListItem({
               text : 'Action 1'
             }),
             new sap.m.ActionListItem({
               text : 'Action 2'
             })
           ];
           this.setSubActionItems(subActionItem);
*/
    };
    OOUtil.extend(PopOver, VizControlBase);

    PopOver.prototype._onConnect = function(vizUid, modelChanged) {
        PopOver.superclass._onConnect.apply(this, arguments);
        this._vizProxy().on('showTooltip.PopOver', jQuery.proxy(function(event){
        	// TODO
            this._chartPopover.setOptions(event.data).openBy(event.data.target);
        }, this));
        this._vizProxy().on('hideTooltip.PopOver', jQuery.proxy(function(){
            this._chartPopover.close();
        }, this));
        // TODO Create things which are associate to VizFrame
    };

    PopOver.prototype._onDisconnect = function() {
        PopOver.superclass._onDisconnect.apply(this, arguments);
        this._vizProxy().off('showTootip.PopOver');
        this._vizProxy().off('hideTooltip.PopOver');
        // TODO Destroy things which are associate to VizFrame
    };
    
    PopOver.prototype.destroy = function() {
        PopOver.superclass.destroy.apply(this, arguments);
        this._vizProxy().off('showTooltip.PopOver');
        this._vizProxy().off('hideTooltip.PopOver');
        // TODO Destroy everything
    };

    PopOver.prototype.setContents = function(content){
      for(var i = 0; i < content.length; i++){
        this._chartPopover.addContent(content[i]);
      }
    };

    PopOver.prototype.setActionItems = function(items){
      for(var i = 0; i < items.length; i++){
        this._chartPopover.addActionItem(items[i]);
      }
    };

    PopOver.prototype.setSubActionItems = function(items){
      for(var i = 0; i < items.length; i++){
        this._chartPopover.addSubActionItem(items[i]);
      }
    };

    return PopOver;
});

// @formatter:off
define('sap/viz/controls/dedicatedlegend/DedicatedLegend',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/managers/LangManager'
],
function($, VizControlBase, OOUtil, utils, LangManager) {
// @formatter:on
    /*
     * options should be an JSON. 
     * {
     *    openBy : uiControl
     *  }
     */
    var DedicatedLegend = function(options) {
        DedicatedLegend.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.DedicatedLegend.DedicatedLegend";
        this._defaultChartOption = {};

        try {
            jQuery.sap.require("sap.m.ResponsivePopover");
        } catch(e) {
            throw utils.substitute(LangManager.get('VIZ_COMMON_DEPENDENCY_ERROR'), 'sap.m', 'DedicatedLegend');
        }
        this._options = options;
    };
    OOUtil.extend(DedicatedLegend, VizControlBase);

    DedicatedLegend.prototype._onConnect = function(vizUid, modelChanged) {
        DedicatedLegend.superclass._onConnect.apply(this, arguments);
        
        this._olegendDOMID = this._createId('legends');
        this._oLegendDOM = new sap.ui.core.HTML();

        this._oPopover = new sap.m.ResponsivePopover(this._createId('legendPopover'), {
            dal:false,
            verticalScrolling:true,
            horizontalScrolling:false,
            placement:sap.m.PlacementType.Auto,
            contentWidth:"18rem",
            title : 'Legends',
            content : [
                this._oLegendDOM
            ]
        });
        this._oPopover.addStyleClass('viz-controls-dedicatedLegend');
        
        this._oPopover.attachBeforeClose(function(){
            console.log('close');
        }, this);
        //TODO Don't use 48 directly.
        this._maxHeight = this._vizProxy().getSize().height * 0.8 - 48 - 6;
    };

    DedicatedLegend.prototype._open = function(openBy){
      this._oPopover.attachBeforeOpen(jQuery.proxy(function(){
        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        this._vizProxy().setProperties({
            legendGroup: {
                renderTo: function(){
                    return svg;
                }
            }
        });
        
        var contentHeight = parseInt($(svg).attr('height')) + 4;
        this._oLegendDOM.setContent($(svg).outerHTML());
        this._oPopover.setContentHeight(Math.min(contentHeight, this._maxHeight)+'px');
       }, this));
       this._oPopover.openBy(openBy);
    };

    DedicatedLegend.prototype._onDisconnect = function() {
        DedicatedLegend.superclass._onDisconnect.apply(this, arguments);
        // TODO Destroy things which are associate to VizFrame
    };
    
    DedicatedLegend.prototype.destroy = function() {
        DedicatedLegend.superclass.destroy.apply(this, arguments);
        // TODO Destroy everything
    };

    DedicatedLegend.prototype._createId = function(sId) {
      return this._uid + "-" + sId;
    };

    DedicatedLegend.prototype.updateLegendVisibility = function(){
        var chartOptions = this._vizProxy().getProperties();
        if(this._isDefaultLegend(chartOptions.legendGroup.layout.position)){
            //Default Legend
            if((chartOptions.legend && chartOptions.legend.visible) || (chartOptions.sizeLegend && chartOptions.sizeLegend.visible)){
                //Hide
                this._hideLegend(chartOptions);
                this._vizProxy().setProperties(chartOptions);
            }else{
                //Show
                this._vizProxy().setProperties(this._defaultChartOption);
            }
        }else{
            //Dedicated Legend
            if(this._oPopover.isOpen()){
                this._oPopover.close();
            }else{
                this._vizProxy().setProperties(this._defaultChartOption);   
                this._open(this._options.openBy);
            }
        }
    };

    DedicatedLegend.prototype.parseDefaultLegendProperties = function(props){
        $.extend(true, this._defaultChartOption, props);

        if(this._defaultChartOption.legend && this._defaultChartOption.legend.visible === false){
            if(this._defaultChartOption.sizeLegend){
                if(this._defaultChartOption.sizeLegend.visible === false){
                    this._defaultChartOption.legend.visible = true;
                    this._defaultChartOption.sizeLegend.visible = true;
                }
            }else{
                this._defaultChartOption.legend.visible = true;
            }
        }

        if(!this._isDefaultLegend(props.legendGroup.layout.position)){
            //Dedicated Legend
            this._hideLegend(props);
        }
        return props;
    };

    DedicatedLegend.prototype._isDefaultLegend = function(position){
        return (position === 'top' || position === 'bottom') ? 
            (this._vizProxy().getSize().height >= 480) : (this._vizProxy().getSize().width >= 600);
    };

    DedicatedLegend.prototype._hideLegend = function(props){
        if(props.legend){
            props.legend.visible = false;
        }
        if(props.sizeLegend){
            props.sizeLegend.visible = false;
        }
    };

    DedicatedLegend.prototype._showLegend = function(props){
        if(props.legend){
            props.legend.visible = true;
        }
        if(props.sizeLegend){
            props.sizeLegend.visible = true;
        }
    };

    return DedicatedLegend;
});
//Export modules in the list to global scope
(function(global) {
    // @formatter:off
    var exportedList = ("sap/viz/controls/Version,sap/viz/controls/common/config/GlobalConfig,sap/viz/controls/common/constants/ChartConst,sap/viz/controls/common/constants/CSSConst,sap/viz/controls/common/feeds/AnalysisObject,sap/viz/controls/common/feeds/AnalyticalType,sap/viz/controls/common/feeds/AutoFeedingUtils,sap/viz/controls/common/feeds/FeedItem,sap/viz/controls/common/feeds/HierarchyLevelObject,sap/viz/controls/common/filter/AbstractFilter,sap/viz/controls/common/filter/DateRangeFilter,sap/viz/controls/common/filter/NumericRangeFilter,sap/viz/controls/common/filter/ValueFilter,sap/viz/controls/common/managers/DragManager,sap/viz/controls/common/managers/LangManager,sap/viz/controls/common/utils/InfoChartUtil,sap/viz/controls/common/utils/Serialization,sap/viz/controls/common/views/menu/MenuGroup,sap/viz/controls/common/views/menu/MenuItem,sap/viz/controls/services/FakeDataService,sap/viz/controls/builder/VizBuilder,sap/viz/controls/annotation/Annotation,sap/viz/controls/annotationcontrol/AnnotationControl,sap/viz/controls/chart/Chart,sap/viz/controls/plugins/infochart/setup,sap/viz/controls/contextmenu/ContextMenu,sap/viz/controls/custombutton/CustomButton,sap/viz/controls/feeding/FeedingPanel,sap/viz/controls/frame/VizFrame,sap/viz/controls/mapbuilder/MapBuilder,sap/viz/controls/filterbar/FilterBar,sap/viz/controls/filterbar/FilterItem,sap/viz/controls/filterbar0/FilterBar,sap/viz/controls/playcontrol/PlayControl,sap/viz/controls/propertyeditor/PropertyEditor,sap/viz/controls/switchbar/SwitchBar,sap/viz/controls/popover/PopOver,sap/viz/controls/dedicatedlegend/DedicatedLegend").split(/,\s*/);
    if (exportedList[0] === "// REPLACE_" + "EXPORT_LIST_HERE") exportedList = [
        'sap/viz/controls/annotationcontrol/AnnotationItem',
        'sap/viz/controls/builder/VizBuilder',
        'sap/viz/controls/chart/Chart',
        'sap/viz/controls/common/config/GlobalConfig',
        'sap/viz/controls/common/constants/ChartConst',
        'sap/viz/controls/common/constants/CSSConst',
        'sap/viz/controls/common/feeds/AnalysisObject',
        'sap/viz/controls/common/feeds/AnalyticalType',
        'sap/viz/controls/common/feeds/AutoFeedingUtils',
        'sap/viz/controls/common/feeds/FeedItem',
        'sap/viz/controls/common/feeds/HierarchyLevelObject',
        'sap/viz/controls/common/filter/AbstractFilter',
        'sap/viz/controls/common/filter/DateRangeFilter',
        'sap/viz/controls/common/filter/NumericRangeFilter',
        'sap/viz/controls/common/filter/ValueFilter',
        'sap/viz/controls/common/managers/DragManager',
        'sap/viz/controls/common/managers/LangManager',
        'sap/viz/controls/common/utils/InfoChartUtil',
        'sap/viz/controls/common/utils/Serialization',
        'sap/viz/controls/common/views/menu/MenuGroup',
        'sap/viz/controls/common/views/menu/MenuItem',
        'sap/viz/controls/feeding/FeedingPanel',
        'sap/viz/controls/filterbar/FilterBar',
        'sap/viz/controls/filterbar/FilterItem',
        'sap/viz/controls/frame/VizFrame',
        'sap/viz/controls/mapbuilder/MapBuilder',
        'sap/viz/controls/playcontrol/PlayControl',
        'sap/viz/controls/plugins/infochart/setup',
        'sap/viz/controls/propertyeditor/PropertyEditor',
        'sap/viz/controls/services/FakeDataService',
        'sap/viz/controls/switchbar/SwitchBar',
        'sap/viz/controls/popover/PopOver',
        'sap/viz/controls/dedicatedlegend/DedicatedLegend',
        'sap/viz/controls/Version'
    ];
    // @formatter:on
    var jq = global.jQuery;

    if (jq) {
        if (jQuery.holdReady) {
            jQuery.holdReady(true);
        } else {
            jQuery.readyWait += 1;
        }
    }
    //put modules on global object
    require(exportedList, function() {
        var exports = arguments;

        exportedList.forEach(function(mod, i) {
            var nameParts = mod.split("/");
            nameParts.reduce(function(p, c, index) {
                if (!p[c]) {
                    if (index < nameParts.length - 1) {
                        p[c] = {};
                    } else {
                        p[c] = exports[i];
                    }
                }
                return p[c];
            }, global);
        });
        if (jq) {
            if (jQuery.holdReady) {
                jQuery.holdReady(false);
            } else {
                jQuery.ready(true);
            }
        }
    });

})(this);

})();
