/* SAP CVOM 4.0 Â© <2012-2014> SAP SE. All rights reserved. Build Version 7.34.1-SNAPSHOT, Build Context N/A */

(function(global) {

    var ns = ensure(["sap", "viz", "moduleloader"]);
    if (ns.require) {
        return;
    }

    var metas = {};

    function ensure(parts) {
        var o = global;
        for (var i = 0, len = parts.length; i < len; i++) {
            var name = parts[i];
            if (!o.hasOwnProperty(name)) {
                o[name] = {};
            }
            o = o[name];
        }
        return o;
    }

    function define(name, deps, callback) {
        var m = {
            id: name
        };

        if (!Array.isArray(deps)) {
            callback = deps;
            deps = [];
        } else {
            var parentPath;
            deps = deps.map(function(dep) {
                // only resolve path(handle ".") for BI Framework's dependencies
                if (dep[0] === ".") {
                    if (parentPath == null) {
                        parentPath = name.substring(0, name.lastIndexOf("/"));
                    }
                    dep = parentPath + dep.substring(1);
                }

                return dep;
            });
            m["export"] = (deps.indexOf("exports") !== -1);
            if (m["export"] || deps.indexOf("require") !== -1) {
                define.__autoLoad.push(name);
            }
        }

        m.deps = deps;
        m.callback = callback;
        metas[name] = m;
    }

    define.__autoLoad = [];

    function isFunction(it) {
        return Object.prototype.toString.call(it) === '[object Function]';
    }

    function getModule(context, name) {
        var result;
        if (name === "require") {
            var localRequire = requireByContext.bind(null, context);
            localRequire.toUrl = function() {
                return "";
            };
            localRequire.defined = function(id) {
                return context.modules.hasOwnProperty(id);
            };
            result = localRequire;
        } else if (name !== "exports") {
            var modules = context.modules;
            if (!modules.hasOwnProperty(name)) {
                var m = metas[name];
                if (m) {
                    modules[name] = exec(context, m.deps, m.callback, m.id, m["export"]);
                    delete metas[name];
                }
            }

            result = modules[name];
        }

        return result;
    }

    function exec(context, deps, callback, id, needExport) {
        var args = deps.map(getModule.bind(null, context));
        var result = callback;
        if (isFunction(result)) {
            result = result.apply(null, args);
        }
        if (needExport && id) {
            var exportName = context.exportMap[id];
            var parts = exportName ? exportName.split(".") : id.split("/");
            var parent = ensure(parts.slice(0, parts.length - 1));
            var name = parts[parts.length - 1];
            if (parent.hasOwnProperty(name)) {
                var target = parent[name];
                for (var prop in result) {
                    if (result.hasOwnProperty(prop)) {
                        target[prop] = result[prop];
                    }
                }
                if (isFunction(target) && isFunction(result)) {
                    target = result;
                }
            } else {
                parent[name] = result;
            }
        }

        return result;
    }

    function requireByContext(context, deps, callback) {
        return Array.isArray(deps) ? exec(context, deps, callback) : getModule(context, deps);
    }

    function require(deps, callback) {
        var context = require.s.contexts._;
        return requireByContext(context, deps, callback);
    }

    require.s = {
        contexts: {
            // default context
            _: {

            }
        }
    };

    require.config = function(c) {
        var context = c.context || '_';
        require.s.contexts[context] = require.s.contexts[context] || {
            id: c.context,
            modules: {},
            exportMap: c.exportMap || {}
        };
        var req = requireByContext.bind(null, require.s.contexts[context]);

        // mock for BI framework usage
        req.config = require.config;
        req.s = require.s;
        
        return req;
    };

    ns.define = define;
    ns.require = require;
})(this);
(function(){var a;if(window){sap=window.sap||{}}else{sap=sap||{}}if(sap){sap.common=sap.common||{}}if(sap.common){sap.common.globalization=sap.common.globalization||{}}sap.common.globalization.VERSION=function(){return"1.0.0"};sap.common.globalization.declare=function(c){if(!c){throw new Error("name required")}if(typeof(c)!="string"){throw new Error("name has to be a string")}if(c.charAt(0)=="."||c.charAt(c.length-1)=="."||c.indexOf("..")!=-1){throw new Error("illegal name: "+c)}c=c.split(".");var d=window;for(var b=0;b<c.length;b++){d[c[b]]=d[c[b]]||{};d=d[c[b]]}return d};sap.common.globalization.require=function(b){};sap.common.globalization.extend=function(f,b){var c=f.prototype;f.superclass=b.prototype;var d=function(){};d.prototype=b.prototype;f.prototype=new d();for(var e in c){if(c.hasOwnProperty(e)){f.prototype[e]=c[e]}}f.prototype.constructor=f;if(b.prototype.constructor==Object.prototype.constructor){b.prototype.constructor=b}return f}})();(function(){sap.common.globalization.declare("sap.common.globalization.NumericFormatManager");sap.common.globalization.require("sap.common.globalization.utils.NumberUtil");sap.common.globalization.require("sap.common.globalization.utils.BooleanUtil");sap.common.globalization.require("sap.common.globalization.utils.DataFormatUtils");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.numericFormat.FTUtil");sap.common.globalization.require("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");var a=sap.common.globalization.NumericFormatManager;a.DEFAULT_FORMAT_DATE_TIME="SAP_FORMAT_DEFAULT_DATE_TIME";a.DEFAULT_FORMAT_TIME="SAP_FORMAT_DEFAULT_TIME";a.DEFAULT_FORMAT_SHORT_DATE="SAP_FORMAT_DEFAULT_SHORT_DATE";a.DEFAULT_FORMAT_LONG_DATE="SAP_FORMAT_DEFAULT_LONG_DATE";a.DEFAULT_FORMAT_NUMBER="SAP_DEFAULT_NUMBER_FORMAT";a.DEFAULT_FORMAT_BOOLEAN="SAP_DEFAULT_BOOLEAN_FORMAT";a._formatsCache={};a.resetFormatsCache=function(){a._formatsCache={}};a.setPVL=function(e,d){var b=sap.common.globalization.GlobalizationPreference.getInstance().pvl();sap.common.globalization.GlobalizationPreference.getInstance().setPvl(e);var c=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(!b||c!=b){a._formatsCache={};if(!d){a.setCustomizedLocaleInfo(null)}}};a.getPVL=function(){return sap.common.globalization.GlobalizationPreference.getInstance().pvl()};a.setCustomizedLocaleInfo=function(c,b){if(b){delete c.dayStrings;delete c.shortDayStrings;delete c.monthStrings;delete c.shortMonthStrings;delete c.amPms}sap.common.globalization.numericFormat.FLocalization.getInstance().setCustomizedLocaleInfo(c)};a.getThousandSeparator=function(){return sap.common.globalization.GlobalizationNumericConstant.getDisplayThousandSeparator()};a.getDecimalSeparator=function(){return sap.common.globalization.GlobalizationNumericConstant.getDisplayDecimalSeparator()};a.formatToText=function(f,b,e,d,c){return this._format(f,b,false,e,d,c)};a.formatToTextWithColor=function(f,b,e,d,c){return this._format(f,b,true,e,d,c)};a.getFormattedColor=function(c){var b=undefined;if(c&&c.hasOwnProperty("color")){b=c.color}return b};a.getFormattedText=function(b){var c=b;if(b&&b.hasOwnProperty("text")){c=b.text}return c};a.getFormat=function(f){if((f==null)||(f=="")){return null}if(!a._formatsCache){a._formatsCache=new Object()}var k=a._formatsCache[f];var b=sap.common.globalization.defaultFormat;if(k==null){if(f==a.DEFAULT_FORMAT_SHORT_DATE||f==a.DEFAULT_FORMAT_LONG_DATE||f==a.DEFAULT_FORMAT_DATE_TIME||f==a.DEFAULT_FORMAT_TIME){var f;var m=b.CustomNumericFormatLocaleFactory.getInstance();switch(f){case a.DEFAULT_FORMAT_SHORT_DATE:var j=new b.DefaultShortDateFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(j,m);f=j.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_LONG_DATE:var c=new b.DefaultDateFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(c,m);f=c.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_DATE_TIME:var e=new b.DefaultDateTimeFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(e,m);f=e.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_TIME:default:var i=new b.DefaultTimeFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(i,m);f=i.getDefaultDateFormat()}k.parse(f)}else{if(b.DefaultNumericFormatLocaleFactory.isDefaultNumberFormat(f)){var g=new b.DefaultNumericFormatLocaleFactory(f);var g;var l=g.getDefaultNumericFormat();k=new sap.common.globalization.numericFormat.FT(b.CustomDateFormatLocaleFactory.getInstance(),g);k.parse(l)}else{if(b.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat(f)){var h=new b.DefaultCurrencyFormatLocaleFactory(f);var d=h.getDefaultCurrencyFormat();k=new sap.common.globalization.numericFormat.FT(b.CustomDateFormatLocaleFactory.getInstance(),h);k.parse(d)}else{if(f==a.DEFAULT_FORMAT_BOOLEAN){k=new sap.common.globalization.numericFormat.FTBoolean();k.parse(f)}else{k=new sap.common.globalization.numericFormat.FT();k.parse(f)}}}}a._formatsCache[f]=k}return k};a._format=function(k,h,j,l,o,f){var m=k==null?"":k;var i=a.getFormat(h);var d=false;var g=NaN;var l=l==undefined?true:l;var n;var b=String(m);if(i){if(i.isParsedSuccess()==false&&o==true){b=k}else{i.color=undefined;var c=false;if(l){if(sap.common.globalization.utils.NumberUtil.isNumericValue(m)){c=true}}else{if(sap.common.globalization.utils.BaseUtils.isNumber(m)){c=true}}if(c||f){var e=f?m:Number(m);b=i.display(e);g=Number(i.color)}else{if(sap.common.globalization.utils.BooleanUtil.isBooleanValue(m)&&sap.common.globalization.numericFormat.FTUtil.isBooleanFT(i)){b=i.display(m)}else{if(m instanceof Date){b=i.display(m)}}}}}if(j&&!isNaN(g)){if(!n){n={}}n.color=g;n.text=b}else{n=b}return n};a.format=function(c,b){var d=a.getFormat(b);if(d==null){return c}return d.display(c)};a.SAP_PARAMETERS={};a.resetParameters=function(){a.SAP_PARAMETERS={}};a.setBooleanDisplayString=function(b,c){sap.common.globalization.GlobalizationBooleanConstant.BOOLEAN_STRING_TRUE=b;sap.common.globalization.GlobalizationBooleanConstant.BOOLEAN_STRING_FALSE=c}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.NumericFormatManager");sap.common.globalization.GlobalizationPreference=function(){this.__className="sap.common.globalization.GlobalizationPreference";this._preferredViewingLocale=null};var a=sap.common.globalization.GlobalizationPreference;a._instance=null;a.DOCUMENT_LOCALE="en";a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.GlobalizationPreference()}return a._instance};a.resetInstance=function(){a._instance=new sap.common.globalization.GlobalizationPreference()};a.prototype.pvl=function(){return this._preferredViewingLocale};a.prototype.setPvl=function(b){if(b!=this._preferredViewingLocale){this._preferredViewingLocale=b}};a.prototype.pvlIsoLanguageCode=function(){return this._getIsoLanguageCode(this.pvl())};a.prototype.documentLocale=function(){return a.DOCUMENT_LOCALE};a.prototype.documentIsoLanguageCode=function(){return this._getIsoLanguageCode(a.DOCUMENT_LOCALE)};a.prototype._getIsoLanguageCode=function(b){if(b){return String(b).split("_")[0]}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationBooleanConstant");var a=sap.common.globalization.GlobalizationBooleanConstant;a.BOOLEAN_STRING_TRUE="TRUE";a.BOOLEAN_STRING_FALSE="FALSE";a.getBooleanStrings=function(){return[a.BOOLEAN_STRING_TRUE,a.BOOLEAN_STRING_FALSE]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.GlobalizationNumericConstant=function(){this.__className="sap.common.globalization.GlobalizationNumericConstant"};var a=sap.common.globalization.GlobalizationNumericConstant;a._FORMAT_TYPE_NUMBER="number";a._FORMAT_TYPE_CURRENCY="currency";a._KEY_TYPE_NUMERIC="numeric";a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR="displayThousandsSeparator";a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR="displayDecimalSeparator";a._DEFAULT_FORMAT_STRING={af:{number:"#,##0.###",currency:"Â¤#,##0.00"},af_ZA:{},ar:{number:"#,##0.###",currency:"Â¤ #,##0.00"},ar_AE:{},ar_BH:{},ar_DZ:{},ar_EG:{},ar_IQ:{},ar_JO:{},ar_KW:{},ar_LB:{},ar_LY:{},ar_MA:{},ar_OM:{},ar_QA:{currency:"Â¤#0.00"},ar_SA:{currency:"Â¤#0.00"},ar_SY:{currency:"Â¤#0.00"},ar_TN:{currency:"Â¤#0.00"},ar_YE:{currency:"Â¤#0.00"},az:{number:"#,##0.###",currency:"Â¤ #,##0.00"},az_AZ:{},be:{number:"#,##0.###",currency:"Â¤#,##0.00"},be_BY:{},bg:{number:"#,##0.###",currency:"#,##0.00 Â¤"},bg_BG:{},bn:{number:"#,##,##0.###",currency:"#,##,##0.00Â¤;(#,##,##0.00Â¤)"},bn_IN:{},br:{number:"#,##0.###",currency:"Â¤#,##0.00"},bs:{number:"#,##0.###",currency:"Â¤ #,##0.00"},bs_BA:{},ca:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ca_ES:{},cs:{number:"#,##0.###",currency:"#,##0.00 Â¤"},cs_CZ:{},cy:{number:"#,##0.###",currency:"Â¤#,##0.00"},cy_GB:{},da:{number:"#,##0.###",currency:"#,##0.00 Â¤"},da_DK:{},de:{number:"#,##0.###",currency:"#,##0.00 Â¤"},de_AT:{currency:"Â¤ #,##0.00"},de_BE:{},de_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},de_DE:{},de_LI:{currency:"Â¤ #,##0.00"},de_LU:{},el:{number:"#,##0.###",currency:"#,##0.00 Â¤"},el_CY:{currency:"Â¤#,##0.00"},el_GR:{},en:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},en_AU:{currency:"Â¤#,##0.00"},en_BZ:{currency:"Â¤#,##0.00"},en_CA:{},en_GB:{currency:"Â¤#,##0.00"},en_HK:{},en_IE:{currency:"Â¤#,##0.00"},en_IN:{number:"#,##,##0.###",currency:"Â¤Â #,##,##0.00"},en_JM:{currency:"Â¤#,##0.00"},en_NZ:{currency:"Â¤#,##0.00"},en_PH:{},en_SG:{},en_TT:{currency:"Â¤#,##0.00"},en_US:{},en_VI:{},en_ZA:{currency:"Â¤#,##0.00"},en_ZW:{currency:"Â¤#,##0.00"},es:{number:"#,##0.###",currency:"Â¤ #,##0.00"},es_AR:{},es_BO:{},es_CL:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},es_CO:{},es_CR:{},es_DO:{},es_EC:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},es_ES:{},es_GT:{},es_HN:{},es_MX:{},es_NI:{},es_PA:{},es_PE:{},es_PR:{},es_PY:{currency:"Â¤ #,##0.00;Â¤ -#,##0.00"},es_SV:{},es_UY:{currency:"Â¤ #,##0.00;(Â¤ #,##0.00)"},es_VE:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},et:{number:"#,##0.###",currency:"#,##0.00 Â¤"},et_EE:{},eu:{number:"#,##0.###",currency:"#,##0.00 Â¤"},eu_ES:{},fa:{number:"#,##0.###;â#,##0.###",currency:"#,##0.00 Â¤;'-#,##0.00' Â¤"},fa_IR:{},fi:{number:"#,##0.###",currency:"#,##0.00 Â¤"},fi_FI:{},fo:{number:"#,##0.###",currency:"Â¤#,##0.00;Â¤-#,##0.00"},fo_FO:{},fr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},fr_BE:{},fr_CA:{currency:"#,##0.00 Â¤;(#,##0.00 Â¤)"},fr_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},fr_FR:{},fr_LU:{},fr_MC:{},gl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},gl_ES:{},gu:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},gu_IN:{},he:{number:"#,##0.###",currency:"#,##0.00 Â¤"},he_IL:{},hi:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},hi_IN:{},hr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},hr_HR:{},hu:{number:"#,##0.###",currency:"#,##0.00 Â¤"},hu_HU:{},hy:{number:"#0.###",currency:"#0.00 Â¤"},hy_AM:{},id:{number:"#,##0.###",currency:"Â¤#,##0.00"},id_ID:{},is:{number:"#,##0.###",currency:"#,##0.00 Â¤"},is_IS:{},it:{number:"#,##0.###",currency:"Â¤ #,##0.00"},it_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},it_IT:{},ja:{number:"#,##0.###",currency:"Â¤#,##0.00"},ja_JP:{},ka:{number:"#,##0.###",currency:"Â¤ #,##0.00"},ka_GE:{},kk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},kk_KZ:{},kn:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},kn_IN:{},ko:{number:"#,##0.###",currency:"Â¤#,##0.00"},ko_KR:{},kok:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},kok_IN:{},lt:{number:"#,##0.###;â#,##0.###",currency:"#,##0.00 Â¤"},lt_LT:{},lv:{number:"#,##0.###",currency:"#,##0.00 Â¤"},lv_LV:{},mk:{number:"#,##0.###;(#,##0.###)",currency:"Â¤ #,##0.00"},mk_MK:{},ml:{number:"#,##,##0.###",currency:"#,##,##0.00Â¤"},ml_IN:{},mn:{number:"#,##0.###",currency:"Â¤ #,##0.00"},mn_MN:{},mr:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},mr_IN:{},ms:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},ms_BN:{currency:"Â¤ #,##0.00"},ms_MY:{},mt:{number:"#,##0.###",currency:"Â¤#,##0.00"},mt_MT:{},nb:{number:"#,##0.###",currency:"Â¤ #,##0.00"},nb_NO:{},nl:{number:"#,##0.###",currency:"Â¤ #,##0.00;Â¤ #,##0.00-"},nl_BE:{currency:"#,##0.00 Â¤"},nl_NL:{},nn:{number:"#,##0.###;â#,##0.###",currency:"#,##0.00 Â¤"},nn_NO:{},pa:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},pa_IN:{},pl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},pl_PL:{},pt:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},pt_BR:{},pt_PT:{currency:"#,##0.00 Â¤"},ro:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ro_RO:{},ru:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ru_RU:{},ru_UA:{},se:{number:"#,##0.###",currency:"Â¤ #,##0.00"},se_NO:{},sk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sk_SK:{},sl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sl_SI:{},sq:{number:"#,##0.###",currency:"Â¤#,##0.00"},sq_AL:{},sr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sr_BA:{},sr_CS:{},sv:{number:"#,##0.###;â#,##0.###",currency:"#,##0.00 Â¤"},sv_FI:{},sv_SE:{},sw:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sw_KE:{currency:"Â¤#,##0.00"},syr:{number:"#,##0.###",currency:"Â¤ #,##0.00"},syr_SY:{},ta:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},ta_IN:{},te:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},te_IN:{},th:{number:"#,##0.###",currency:"Â¤#,##0.00;Â¤-#,##0.00"},th_TH:{},tn:{number:"#,##0.###",currency:"Â¤#,##0.00"},tn_ZA:{},tr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},tr_TR:{},uk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},uk_UA:{},uz:{number:"#,##0.###",currency:"Â¤ #,##0.00"},uz_UZ:{},vi:{number:"#,##0.###",currency:"#,##0.00 Â¤"},vi_VN:{},xh:{number:"#,##0.###",currency:"Â¤#,##0.00"},xh_ZA:{},zh:{number:"#,##0.###",currency:"Â¤#,##0.00"},zh_CN:{},zh_HK:{},zh_MO:{},zh_SG:{},zh_TW:{},zu:{number:"#,##0.###",currency:"Â¤#,##0.00"},zu_ZA:{}};a._RESOURCE_MAP={af:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},af_ZA:{numeric:{}},ar:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ar_AE:{numeric:{}},ar_BH:{numeric:{}},ar_DZ:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_EG:{numeric:{}},ar_IQ:{numeric:{}},ar_JO:{numeric:{}},ar_KW:{numeric:{}},ar_LB:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_LY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_MA:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_OM:{numeric:{}},ar_QA:{numeric:{}},ar_SA:{numeric:{}},ar_SY:{numeric:{}},ar_TN:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_YE:{numeric:{}},az:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},az_AZ:{numeric:{}},be:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},be_BY:{numeric:{}},bg:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},bg_BG:{numeric:{}},bn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},bn_IN:{numeric:{}},br:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},bs:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},bs_BA:{numeric:{}},ca:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ca_ES:{numeric:{}},cs:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},cs_CZ:{numeric:{}},cy:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},cy_GB:{numeric:{}},da:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},da_DK:{numeric:{}},de:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},de_AT:{numeric:{}},de_BE:{},de_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},de_DE:{numeric:{}},de_LI:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},de_LU:{numeric:{}},el:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},el_CY:{numeric:{}},el_GR:{numeric:{}},en:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},en_AU:{numeric:{}},en_BZ:{numeric:{}},en_CA:{numeric:{}},en_GB:{numeric:{}},en_HK:{numeric:{}},en_IE:{numeric:{}},en_IN:{numeric:{}},en_JM:{numeric:{}},en_NZ:{numeric:{}},en_PH:{numeric:{}},en_SG:{numeric:{}},en_TT:{numeric:{}},en_US:{numeric:{}},en_VI:{numeric:{}},en_ZA:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},en_ZW:{numeric:{}},es:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_AR:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_BO:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CL:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CO:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CR:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_DO:{numeric:{}},es_EC:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_ES:{numeric:{}},es_GT:{numeric:{}},es_HN:{numeric:{}},es_MX:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_NI:{numeric:{}},es_PA:{numeric:{}},es_PE:{numeric:{}},es_PR:{numeric:{}},es_PY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_SV:{numeric:{}},es_UY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_VE:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},et:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},et_EE:{numeric:{}},eu:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},eu_ES:{numeric:{}},fa:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},fa_IR:{numeric:{}},fi:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},fi_FI:{numeric:{}},fo:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},fo_FO:{numeric:{}},fr:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},fr_BE:{numeric:{displayThousandsSeparator:"."}},fr_CA:{numeric:{}},fr_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},fr_FR:{numeric:{}},fr_LU:{numeric:{displayThousandsSeparator:"."}},fr_MC:{numeric:{}},gl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},gl_ES:{numeric:{}},gu:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},gu_IN:{numeric:{}},he:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},he_IL:{numeric:{}},hi:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},hi_IN:{numeric:{}},hr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},hr_HR:{numeric:{}},hu:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},hu_HU:{numeric:{}},hy:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},hy_AM:{numeric:{}},id:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},id_ID:{numeric:{}},is:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},is_IS:{numeric:{}},it:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},it_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},it_IT:{numeric:{}},ja:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ja_JP:{numeric:{}},ka:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ka_GE:{numeric:{}},kk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},kk_KZ:{numeric:{}},kn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},kn_IN:{numeric:{}},ko:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ko_KR:{numeric:{}},kok:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},kok_IN:{numeric:{}},lt:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},lt_LT:{numeric:{}},lv:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},lv_LV:{numeric:{}},mk:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},mk_MK:{numeric:{}},ml:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ml_IN:{numeric:{}},mn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mn_MN:{numeric:{}},mr:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mr_IN:{numeric:{}},ms:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ms_BN:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ms_MY:{numeric:{}},mt:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mt_MT:{numeric:{}},nb:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},nb_NO:{numeric:{}},nl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},nl_BE:{numeric:{}},nl_NL:{numeric:{}},nn:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},nn_NO:{numeric:{}},pa:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},pa_IN:{numeric:{}},pl:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},pl_PL:{numeric:{}},pt:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},pt_BR:{numeric:{}},pt_PT:{numeric:{displayThousandsSeparator:"Â "}},ro:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ro_RO:{numeric:{}},ru:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},ru_RU:{numeric:{}},ru_UA:{numeric:{}},se:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},se_NO:{numeric:{}},sk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},sk_SK:{numeric:{}},sl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sl_SI:{numeric:{}},sq:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sq_AL:{numeric:{}},sr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sr_BA:{numeric:{}},sr_CS:{numeric:{}},sv:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},sv_FI:{numeric:{}},sv_SE:{numeric:{}},sw:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},sw_KE:{numeric:{}},syr:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},syr_SY:{numeric:{}},ta:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ta_IN:{numeric:{}},te:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},te_IN:{numeric:{}},th:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},th_TH:{numeric:{}},tn:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},tn_ZA:{numeric:{}},tr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},tr_TR:{numeric:{}},uk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},uk_UA:{numeric:{}},uz:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},uz_UZ:{numeric:{}},vi:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},vi_VN:{numeric:{}},xh:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},xh_ZA:{numeric:{}},zh:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},zh_CN:{numeric:{}},zh_HK:{numeric:{}},zh_MO:{numeric:{}},zh_SG:{numeric:{}},zh_TW:{numeric:{}},zu:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},zu_ZA:{numeric:{}}};a.getParseThousandSeparator=function(b){return","};a.getDisplayThousandSeparator=function(b){var b=b||null;if(b){if(a._resourceExist(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)){return a.getNumericResource(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)}else{return null}}return a._getAppropriateNumericResource(a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)};a.getParseDecimalSeparator=function(b){return"."};a.getDisplayDecimalSeparator=function(b){var b=b||null;if(b){if(a._resourceExist(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)){return a.getNumericResource(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)}else{return null}}return a._getAppropriateNumericResource(a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)};a.getParseCurrencySymbol=function(){return"Â¤"};a.getDefaultNumberFormat=function(b){var b=b||null;if(b){if(a._formatExist(b,a._FORMAT_TYPE_NUMBER)){return a._getNumericFormat(b,a._FORMAT_TYPE_NUMBER)}else{return null}}return a._getAppropriateNumericFormat(a._FORMAT_TYPE_NUMBER)};a.getDefaultCurrencyFormat=function(b){var b=b||null;if(b){if(a._formatExist(b,a._FORMAT_TYPE_CURRENCY)){return a._getNumericFormat(b,a._FORMAT_TYPE_CURRENCY)}else{return null}}return a._getAppropriateNumericFormat(a._FORMAT_TYPE_CURRENCY)};a.getActualLocaleForDefaultCurrencyFormat=function(){return a.getActualLocaleForNumerFormat(a._FORMAT_TYPE_CURRENCY)};a.getActualLocaleForDefaultNumberFormat=function(){return a.getActualLocaleForNumerFormat(a._FORMAT_TYPE_NUMBER)};a.getActualLocaleForNumerFormat=function(d){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a._formatExist(e,d)){return e}var c=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a._formatExist(c,d)){return c}var f=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a._formatExist(f,d)){return f}var b=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a._formatExist(b,d)){return b}return"en"};a._getAppropriateNumericFormat=function(b){return a._getNumericFormat(a.getActualLocaleForNumerFormat(b),b)};a._formatExist=function(b,c){return(b&&c&&a._DEFAULT_FORMAT_STRING[b]&&a._DEFAULT_FORMAT_STRING[b][c])};a._getNumericFormat=function(b,c){return a._DEFAULT_FORMAT_STRING[b][c]};a._getAppropriateNumericResource=function(e,b){var f=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a._resourceExist(f,e,b)){return a.getNumericResource(f,e,b)}var d=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a._resourceExist(d,e,b)){return a.getNumericResource(d,e,b)}var g=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a._resourceExist(g,e,b)){return a.getNumericResource(g,e,b)}var c=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a._resourceExist(c,e,b)){return a.getNumericResource(c,e,b)}return a.getNumericResource("en",e,b)};a._resourceExist=function(b,d,c){return(b&&d&&c&&a._RESOURCE_MAP[b]&&a._RESOURCE_MAP[b][d]&&a._RESOURCE_MAP[b][d][c])};a.getNumericResource=function(b,d,c){return a._RESOURCE_MAP[b][d][c]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.GlobalizationDateConstant=function(){this.__className="sap.common.globalization.defaultFormat.GlobalizationDateConstant"};var a=sap.common.globalization.GlobalizationDateConstant;a.FORMAT_TYPE_SHORTDATE="shortDate",a.FORMAT_TYPE_LONGDATE="longDate",a.FORMAT_TYPE_DATE_TIME="dateTime",a.FORMAT_TYPE_TIME="timeFormat",a.KEY_TYPE_DATE="date",a.KEY_TYPE_TIME="time",a.KEY_TOKEN_SHORT_DAY="shortDay",a.KEY_TOKEN_LONG_DAY="longDay",a.KEY_TOKEN_SHORT_MONTH="shortMonth",a.KEY_TOKEN_LONG_MONTH="longMonth",a.KEY_TOKEN_AM_PM="amPm",a.KEY_DATE_SEPARATOR="dateSeparator",a.KEY_TIME_SEPARATOR="timeSeparator",a.KEY_TOKEN_ABBREV_ERA="eraAbbr",a.DEFAULT_FORMAT_STRING={af:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},af_ZA:{},ar:{longDate:"ddddØ d MMMMØ yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"dd/MM/yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ar_AE:{},ar_BH:{},ar_DZ:{},ar_EG:{},ar_IQ:{},ar_JO:{},ar_KW:{},ar_LB:{},ar_LY:{},ar_MA:{},ar_OM:{},ar_QA:{},ar_SA:{},ar_SY:{},ar_TN:{},ar_YE:{},az:{longDate:"dddd, d, MMMM, yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},az_AZ:{},be:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d.M.yy;@",dateTime:"d.M.yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},be_BY:{},bg:{longDate:"dd MMMM yyyy, dddd;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},bg_BG:{},bn:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d/M/yy;@",dateTime:"d MMM, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},bn_IN:{},bs:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},bs_BA:{},ca:{longDate:'dddd d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ca_ES:{},cs:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yy;@",dateTime:"d.M.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},cs_CZ:{},cy:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},cy_GB:{},da:{longDate:'dddd "den" d. MMMM yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},da_DK:{},de:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},de_AT:{longDate:"dddd, dd. MMMM yyyy;@"},de_CH:{},de_DE:{},de_LI:{},de_LU:{},el:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"dd MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},el_GR:{},en:{longDate:"dddd, MMMM d, yyyy;@",shortDate:"M/d/yy;@",dateTime:"MMM d, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},en_AU:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d/MM/yy;@",dateTime:"dd/MM/yyyy h:mm:ss AM/PM;@"},en_BZ:{dateTime:"dd-MMM-yyyy h:mm:ss AM/PM;@"},en_CA:{shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd h:mm:ss AM/PM;@"},en_GB:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},en_IE:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},en_JM:{},en_NZ:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy h:mm:ss AM/PM;@"},en_PH:{},en_TT:{},en_US:{},en_VI:{},en_ZA:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy/MM/dd;@",dateTime:"dd MMM yyyy h:mm:ss AM/PM;@"},en_ZW:{longDate:"dddd dd MMMM yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"dd MMM, yyyy h:mm:ss AM/PM;@"},es:{longDate:'dddd d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},es_AR:{},es_BO:{},es_CL:{shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_CO:{shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_CR:{},es_DO:{},es_EC:{dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_ES:{},es_GT:{shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},es_HN:{longDate:'dddd dd "de" MMMM "de" yyyy;@'},es_MX:{},es_NI:{},es_PA:{shortDate:"MM/dd/yy;@",dateTime:"MM/dd/yyyy HH:mm:ss;@"},es_PE:{shortDate:"d/MM/yy;@"},es_PR:{shortDate:"MM/dd/yy;@",dateTime:"MM/dd/yyyy HH:mm:ss;@"},es_PY:{},es_SV:{},es_UY:{},es_VE:{},et:{longDate:"dddd, d, MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},et_EE:{},eu:{longDate:'dddd, yyyy"eko" MMMM"ren" dd"a";@',shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},eu_ES:{},fa:{longDate:"dddd d MMMM yyyy;@",shortDate:"yy/M/d;@",dateTime:"yyyy/M/dØ H:mm:ss;@",timeFormat:"H:mm:ss;@"},fa_IR:{},fi:{longDate:"dddd d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy H.mm.ss;@",timeFormat:"H.mm.ss;@"},fi_FI:{},fo:{longDate:"dddd dd MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},fo_FO:{},fr:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},fr_BE:{shortDate:"d/MM/yy;@"},fr_CA:{shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd HH:mm:ss;@"},fr_CH:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yy;@"},fr_FR:{},fr_LU:{},fr_MC:{},gl:{longDate:"dddd dd MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},gl_ES:{},gu:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d-MM-yy;@",dateTime:"d MMM, yyyy hh:mm:ss AM/PM;@",timeFormat:"hh:mm:ss AM/PM;@"},gu_IN:{},he:{longDate:"dddd, d ×MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},he_IL:{},hi:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"dd-MM-yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},hi_IN:{},hr:{longDate:"dddd, d. MMMM yyyy.;@",shortDate:"dd.MM.yyyy.;@",dateTime:"d.M.yyyy. HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},hr_HR:{},hu:{longDate:"yyyy. MMMM d., dddd;@",shortDate:"yyyy.MM.dd.;@",dateTime:"yyyy.MM.dd. H:mm:ss;@",timeFormat:"H:mm:ss;@"},hu_HU:{},hy:{longDate:"dddd, MMMM d, yyyy;@",shortDate:"MM/dd/yy;@",dateTime:"MMM d, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},hy_AM:{},id:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},id_ID:{},is:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},is_IS:{},it:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"dd/MMM/yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},it_CH:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d-MMM-yyyy HH.mm.ss;@"},it_IT:{},ja:{longDate:"yyyyå¹´Mædæ¥dddd;@",shortDate:"yy/MM/dd;@",dateTime:"yyyy/MM/dd H:mm:ss;@",timeFormat:"H:mm:ss;@"},ja_JP:{},ka:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ka_GE:{},kk:{longDate:'dddd, d MMMM yyyy "Ð¶".;@',shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},kk_KZ:{},kn:{longDate:"dddd d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM yyyy hh:mm:ss AM/PM;@",timeFormat:"hh:mm:ss AM/PM;@"},kn_IN:{},ko:{longDate:"yyyyë Mì dì¼ dddd;@",shortDate:"yy. M. d.;@",dateTime:"yyyy. M. d. AM/PM h:mm:ss;@",timeFormat:"AM/PM h:mm:ss;@"},ko_KR:{},kok:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},kok_IN:{},lt:{longDate:'yyyy "m". MMMM d "d".,dddd;@',shortDate:"yyyy-MM-dd;@",dateTime:"yyyy.MM.dd HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},lt_LT:{},lv:{longDate:'dddd, yyyy. "gada" d. MMMM;@',shortDate:"dd.MM.yy;@",dateTime:'yyyy. "gada" d. MMM HH:mm:ss;@',timeFormat:"HH:mm:ss;@"},lv_LV:{},mk:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd.M.yy;@",dateTime:"dd.M.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mk_MK:{},ml:{longDate:"yyyy, MMMM d, dddd;@",shortDate:"dd/MM/yy;@",dateTime:"yyyy, MMM d h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ml_IN:{},mn:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mn_MN:{},mr:{longDate:"dddd d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM yyyy h-mm-ss AM/PM;@",timeFormat:"h-mm-ss AM/PM;@"},mr_IN:{},ms:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ms_BN:{longDate:"dd MMMM yyyy;@",dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ms_MY:{},mt:{longDate:'dddd, d "ta"â MMMM yyyy;@',shortDate:"dd/MM/yyyy;@",dateTime:"dd MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mt_MT:{},nb:{longDate:"dddd d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d. MMM yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},nb_NO:{},nl:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},nl_BE:{shortDate:"d/MM/yy;@",dateTime:"d-MMM-yyyy HH:mm:ss;@"},nl_NL:{},nn:{longDate:"dddd d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d. MMM. yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},nn_NO:{},pa:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},pa_IN:{},pl:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},pl_PL:{},pt:{longDate:'dddd, d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},pt_BR:{},pt_PT:{dateTime:'d "de" MMM "de" yyyy HH:mm:ss;@'},ro:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yyyy;@",dateTime:"dd.MM.yyyy, HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ro_RO:{},ru:{longDate:'dddd, d MMMM yyyy "Ð³".;@',shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ru_RU:{},se:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},se_NO:{},sk:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},sk_SK:{},sl:{longDate:"dddd, dd. MMMM yyyy;@",shortDate:"d. MM. yy;@",dateTime:"d. MMM. yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},sl_SI:{},sq:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd h.mm.ss.AM/PM;@",timeFormat:"h.mm.ss.AM/PM;@"},sq_AL:{},sr:{longDate:"dddd, dd. MMMM yyyy.;@",shortDate:"d.M.yy.;@",dateTime:"dd.MM.yyyy. HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},sr_BA:{},sr_CS:{},sv:{longDate:"dddd d MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},sv_FI:{},sv_SE:{},sw:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},sw_KE:{},syr:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"y MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},syr_SY:{},ta:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ta_IN:{},te:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},te_IN:{},th:{longDate:"ddddà¸à¸µà¹ d MMMM G yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"d MMM yyyy, H:mm:ss;@",timeFormat:"H:mm:ss;@"},th_TH:{},tn:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},tn_ZA:{},tr:{longDate:"dd MMMM yyyy dddd;@",shortDate:"dd.MM.yyyy;@",dateTime:"dd MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},tr_TR:{},uk:{longDate:'dddd, d MMMM yyyy "Ñ".;@',shortDate:"dd.MM.yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},uk_UA:{},uz:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},uz_UZ:{},vi:{longDate:'dddd, "ngÃ y" dd MMMM "nÄm" yyyy;@',shortDate:"dd/MM/yyyy;@",dateTime:"HH:mm:ss dd-MM-yyyy;@",timeFormat:"HH:mm:ss;@"},vi_VN:{},xh:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},xh_ZA:{},zh:{longDate:"yyyyå¹´Mædæ¥dddd;@",shortDate:"yy-M-d;@",dateTime:"yyyy-M-d AM/PMhh:mm:ss;@",timeFormat:"AM/PMhh:mm:ss;@"},zh_CN:{},zh_HK:{},zh_MO:{},zh_SG:{},zh_TW:{},zu:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},zu_ZA:{}},a.RESOURCE_MAP={af:{date:{dateSeparator:"-",era:["voor Christus","na Christus"],eraAbbr:["v.C.","n.C."],shortDay:["So","Ma","Di","Wo","Do","Vr","Sa"],shortMonth:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Des"],longDay:["Sondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrydag","Saterdag"],longMonth:["Januarie","Februarie","Maart","April","Mei","Junie","Julie","Augustus","September","Oktober","November","Desember"]},time:{timeSeparator:":",amPm:["vm.","nm."]}},af_ZA:{date:{},time:{}},ar:{date:{dateSeparator:"/",era:["ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯","ÙÙÙØ§Ø¯Ù"],eraAbbr:["Ù.Ù","Ù"],shortDay:["Ø£Ø­Ø¯","Ø¥Ø«ÙÙÙ","Ø«ÙØ§Ø«Ø§Ø¡","Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø®ÙÙØ³","Ø¬ÙØ¹Ø©","Ø³Ø¨Øª"],shortMonth:["ÙÙØ§ÙØ±","ÙØ¨Ø±Ø§ÙØ±","ÙØ§Ø±Ø³","Ø£Ø¨Ø±ÙÙ","ÙØ§ÙÙ","ÙÙÙÙÙ","ÙÙÙÙÙ","Ø£ØºØ³Ø·Ø³","Ø³Ø¨ØªÙØ¨Ø±","Ø£ÙØªÙØ¨Ø±","ÙÙÙÙØ¨Ø±","Ø¯ÙØ³ÙØ¨Ø±"],longDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ¥Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"],longMonth:["ÙÙØ§ÙØ±","ÙØ¨Ø±Ø§ÙØ±","ÙØ§Ø±Ø³","Ø£Ø¨Ø±ÙÙ","ÙØ§ÙÙ","ÙÙÙÙÙ","ÙÙÙÙÙ","Ø£ØºØ³Ø·Ø³","Ø³Ø¨ØªÙØ¨Ø±","Ø£ÙØªÙØ¨Ø±","ÙÙÙÙØ¨Ø±","Ø¯ÙØ³ÙØ¨Ø±"]},time:{timeSeparator:":",amPm:["Øµ","Ù"]}},ar_AE:{date:{},time:{}},ar_BH:{date:{},time:{}},ar_DZ:{date:{},time:{}},ar_EG:{date:{},time:{}},ar_IQ:{date:{},time:{}},ar_JO:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"],shortMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","Ø£ÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"],longMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","Ø£ÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"]},time:{}},ar_KW:{date:{},time:{}},ar_LB:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"],shortMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","ÙÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"],longMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","ÙÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"]},time:{}},ar_LY:{date:{},time:{}},ar_MA:{date:{},time:{}},ar_OM:{date:{},time:{}},ar_QA:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"]},time:{}},ar_SA:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"]},time:{}},ar_SY:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"],shortMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","ÙÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"],longMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","ÙÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"]},time:{}},ar_TN:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"]},time:{}},ar_YE:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"]},time:{}},az:{date:{dateSeparator:"-",era:["eramÄ±zdan ÉvvÉl","bizim eramÄ±zÄ±n"],eraAbbr:["e.É.","b.e."],shortDay:["B.","B.E.","Ã.A.","Ã.","C.A.","C","Å."],shortMonth:["yan","fev","mar","apr","may","iyn","iyl","avq","sen","okt","noy","dek"],longDay:["bazar","bazar ertÉsi","Ã§ÉrÅÉnbÉ axÅamÄ±","Ã§ÉrÅÉnbÉ","cÃ¼mÉ axÅamÄ±","cÃ¼mÉ","ÅÉnbÉ"],longMonth:["Yanvar","Fevral","Mart","Aprel","May","Ä°yun","Ä°yul","Avqust","Sentyabr","Oktyabr","Noyabr","Dekabr"]},time:{timeSeparator:":",amPm:["AM","PM"]}},az_AZ:{date:{},time:{}},be:{date:{dateSeparator:".",era:["Ð´Ð° Ð½.Ñ.","Ð½.Ñ."],eraAbbr:["Ð´Ð° Ð½.Ðµ.","Ð½.Ðµ."],eraNarrow:["Ð´Ð° Ð½.Ñ.","Ð½.Ñ."],shortDay:["Ð½Ð´","Ð¿Ð½","Ð°Ñ","ÑÑ","ÑÑ","Ð¿Ñ","ÑÐ±"],shortMonth:["ÑÑÑ","Ð»ÑÑ","ÑÐ°Ðº","ÐºÑÐ°","Ð¼Ð°Ð¹","ÑÑÑ","Ð»ÑÐ¿","Ð¶Ð½Ñ","Ð²ÐµÑ","ÐºÐ°Ñ","Ð»ÑÑ","ÑÐ½Ðµ"],longDay:["Ð½ÑÐ´Ð·ÐµÐ»Ñ","Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº","Ð°ÑÑÐ¾ÑÐ°Ðº","ÑÐµÑÐ°Ð´Ð°","ÑÐ°ÑÐ²ÐµÑ","Ð¿ÑÑÐ½ÑÑÐ°","ÑÑÐ±Ð¾ÑÐ°"],longMonth:["ÑÑÑÐ´Ð·ÐµÐ½Ñ","Ð»ÑÑÑ","ÑÐ°ÐºÐ°Ð²ÑÐº","ÐºÑÐ°ÑÐ°Ð²ÑÐº","Ð¼Ð°Ð¹","ÑÑÑÐ²ÐµÐ½Ñ","Ð»ÑÐ¿ÐµÐ½Ñ","Ð¶Ð½ÑÐ²ÐµÐ½Ñ","Ð²ÐµÑÐ°ÑÐµÐ½Ñ","ÐºÐ°ÑÑÑÑÑÐ½ÑÐº","Ð»ÑÑÑÐ°Ð¿Ð°Ð´","ÑÐ½ÐµÐ¶Ð°Ð½Ñ"]},time:{timeSeparator:".",amPm:["Ð´Ð° Ð¿Ð°Ð»ÑÐ´Ð½Ñ","Ð¿Ð°ÑÐ»Ñ Ð¿Ð°Ð»ÑÐ´Ð½Ñ"]}},be_BY:{date:{},time:{}},bg:{date:{dateSeparator:".",era:["Ð¿Ñ.Ð¥Ñ.","ÑÐ».Ð¥Ñ."],eraAbbr:["Ð¿Ñ. Ð½. Ðµ.","Ð¾Ñ Ð½. Ðµ."],eraNarrow:["ÑÐ».Ð½.Ðµ."],shortDay:["Ð½Ð´","Ð¿Ð½","Ð²Ñ","ÑÑ","ÑÑ","Ð¿Ñ","ÑÐ±"],shortMonth:["ÑÐ½.","ÑÐµÐ²Ñ.","Ð¼Ð°ÑÑ","Ð°Ð¿Ñ.","Ð¼Ð°Ð¹","ÑÐ½Ð¸","ÑÐ»Ð¸","Ð°Ð²Ð³.","ÑÐµÐ¿Ñ.","Ð¾ÐºÑ.","Ð½Ð¾ÐµÐ¼.","Ð´ÐµÐº."],longDay:["Ð½ÐµÐ´ÐµÐ»Ñ","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº","Ð²ÑÐ¾ÑÐ½Ð¸Ðº","ÑÑÑÐ´Ð°","ÑÐµÑÐ²ÑÑÑÑÐº","Ð¿ÐµÑÑÐº","ÑÑÐ±Ð¾ÑÐ°"],longMonth:["ÑÐ½ÑÐ°ÑÐ¸","ÑÐµÐ²ÑÑÐ°ÑÐ¸","Ð¼Ð°ÑÑ","Ð°Ð¿ÑÐ¸Ð»","Ð¼Ð°Ð¹","ÑÐ½Ð¸","ÑÐ»Ð¸","Ð°Ð²Ð³ÑÑÑ","ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸","Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸","Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸","Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸"]},time:{timeSeparator:":",amPm:["Ð¿Ñ. Ð¾Ð±.","ÑÐ». Ð¾Ð±."]}},bg_BG:{date:{},time:{}},bn:{date:{dateSeparator:"/",eraAbbr:["à¦à§à¦·à§à¦à¦ªà§à¦°à§à¦¬","à¦à§à¦·à§à¦à¦¾à¦¬à§à¦¦"],shortDay:["à¦°à¦¬à¦¿","à¦¸à§à¦®","à¦®à¦à§à¦à¦²","à¦¬à§à¦§","à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿","à¦¶à§à¦à§à¦°","à¦¶à¦¨à¦¿"],shortMonth:["à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§","à¦«à§à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§","à¦®à¦¾à¦°à§à¦","à¦à¦ªà§à¦°à¦¿à¦²","à¦®à§","à¦à§à¦¨","à¦à§à¦²à¦¾à¦","à¦à¦à¦¸à§à¦","à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°","à¦à¦à§à¦à§à¦¬à¦°","à¦¨à¦­à§à¦®à§à¦¬à¦°","à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°"],longDay:["à¦°à¦¬à¦¿à¦¬à¦¾à¦°","à¦¸à§à¦®à¦¬à¦¾à¦°","à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°","à¦¬à§à¦§à¦¬à¦¾à¦°","à¦¬à§à¦¹à¦·à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦°","à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°","à¦¶à¦¨à¦¿à¦¬à¦¾à¦°"],longMonth:["à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§","à¦«à§à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§","à¦®à¦¾à¦°à§à¦","à¦à¦ªà§à¦°à¦¿à¦²","à¦®à§","à¦à§à¦¨","à¦à§à¦²à¦¾à¦","à¦à¦à¦¸à§à¦","à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°","à¦à¦à§à¦à§à¦¬à¦°","à¦¨à¦­à§à¦®à§à¦¬à¦°","à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°"]},time:{timeSeparator:":",amPm:["à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦£","à¦à¦ªà¦°à¦¾à¦¹à§à¦£"]}},bn_IN:{date:{},time:{}},bs:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["7","1","2","3","4","5","6"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["7","1","2","3","4","5","6"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},bs_BA:{date:{},time:{}},ca:{date:{dateSeparator:"/",eraAbbr:["aC","dC"],shortDay:["dg.","dl.","dt.","dc.","dj.","dv.","ds."],shortMonth:["gen.","febr.","marÃ§","abr.","maig","juny","jul.","ag.","set.","oct.","nov.","des."],longDay:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],longMonth:["gener","febrer","marÃ§","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"]},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},ca_ES:{date:{},time:{}},cs:{date:{dateSeparator:".",eraAbbr:["pÅ.Kr.","po Kr."],shortDay:["ne","po","Ãºt","st","Ät","pÃ¡","so"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12",],longDay:["nedÄle","pondÄlÃ­","ÃºterÃ½","stÅeda","Ätvrtek","pÃ¡tek","sobota"],longMonth:["ledna","Ãºnora","bÅezna","dubna","kvÄtna","Äervna","Äervence","srpna","zÃ¡ÅÃ­","ÅÃ­jna","listopadu","prosince"]},time:{timeSeparator:":",amPm:["dop.","odp."]}},cs_CZ:{date:{},time:{}},cy:{date:{dateSeparator:"-",era:["Cyn Crist","Oed Crist"],eraAbbr:["CC","OC"],eraNarrow:["C","O"],shortDay:["Sul","Llun","Maw","Mer","Iau","Gwen","Sad"],shortMonth:["Ion","Chwef","Mawrth","Ebrill","Mai","Meh","Gorff","Awst","Medi","Hyd","Tach","Rhag"],longDay:["Dydd Sul","Dydd Llun","Dydd Mawrth","Dydd Mercher","Dydd Iau","Dydd Gwener","Dydd Sadwrn"],longMonth:["Ionawr","Chwefror","Mawrth","Ebrill","Mai","Mehefin","Gorffenaf","Awst","Medi","Hydref","Tachwedd","Rhagfyr"]},time:{timeSeparator:":",amPm:["AM","PM"]}},cy_GB:{date:{},time:{}},da:{date:{dateSeparator:"/",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸n","man","tir","ons","tor","fre","lÃ¸r"],shortMonth:["jan.","feb.","mar.","apr.","maj","jun.","jul.","aug.","sep.","okt.","nov.","dec."],longDay:["sÃ¸ndag","mandag","tirsdag","onsdag","torsdag","fredag","lÃ¸rdag"],longMonth:["januar","februar","marts","april","maj","juni","juli","august","september","oktober","november","december"]},time:{timeSeparator:".",amPm:["f.m.","e.m."]}},da_DK:{date:{},time:{}},de:{date:{dateSeparator:".",era:["v. Chr.","n. Chr."],eraAbbr:["v. Chr.","n. Chr."],shortDay:["So.","Mo.","Di.","Mi.","Do.","Fr.","Sa."],shortMonth:["Jan","Feb","MÃ¤r","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],longDay:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],longMonth:["Januar","Februar","MÃ¤rz","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"]},time:{timeSeparator:":",amPm:["vorm.","nachm."]}},de_AT:{date:{shortMonth:["JÃ¤n","Feb","MÃ¤r","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],longMonth:["JÃ¤nner","Februar","MÃ¤rz","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"]},time:{}},de_CH:{date:{},time:{}},de_DE:{date:{},time:{}},de_LI:{date:{},time:{}},de_LU:{date:{},time:{}},el:{date:{dateSeparator:"/",era:["Ï.Î§.","Î¼.Î§."],eraAbbr:["Ï.Î§.","Î¼.Î§."],shortDay:["ÎÏÏ","ÎÎµÏ","Î¤ÏÎ¹","Î¤ÎµÏ","Î ÎµÎ¼","Î Î±Ï","Î£Î±Î²"],shortMonth:["ÎÎ±Î½","Î¦ÎµÎ²","ÎÎ±Ï","ÎÏÏ","ÎÎ±Ï","ÎÎ¿ÏÎ½","ÎÎ¿ÏÎ»","ÎÏÎ³","Î£ÎµÏ","ÎÎºÏ","ÎÎ¿Îµ","ÎÎµÎº"],longDay:["ÎÏÏÎ¹Î±ÎºÎ®","ÎÎµÏÏÎ­ÏÎ±","Î¤ÏÎ¯ÏÎ·","Î¤ÎµÏÎ¬ÏÏÎ·","Î Î­Î¼ÏÏÎ·","Î Î±ÏÎ±ÏÎºÎµÏÎ®","Î£Î¬Î²Î²Î±ÏÎ¿"],longMonth:["ÎÎ±Î½Î¿ÏÎ±ÏÎ¯Î¿Ï","Î¦ÎµÎ²ÏÎ¿ÏÎ±ÏÎ¯Î¿Ï","ÎÎ±ÏÏÎ¯Î¿Ï","ÎÏÏÎ¹Î»Î¯Î¿Ï","ÎÎ±ÎÎ¿Ï","ÎÎ¿ÏÎ½Î¯Î¿Ï","ÎÎ¿ÏÎ»Î¯Î¿Ï","ÎÏÎ³Î¿ÏÏÏÎ¿Ï","Î£ÎµÏÏÎµÎ¼Î²ÏÎ¯Î¿Ï","ÎÎºÏÏÎ²ÏÎ¯Î¿Ï","ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï","ÎÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï"]},time:{timeSeparator:":",amPm:["Ï.Î¼.","Î¼.Î¼."]}},el_GR:{date:{},time:{}},en:{date:{dateSeparator:"/",era:["Before Christ","Anno Domini"],eraAbbr:["BC","AD"],eraNarrow:["B","A"],shortDay:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortMonth:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longDay:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],longMonth:["January","February","March","April","May","June","July","August","September","October","November","December"]},time:{timeSeparator:":",amPm:["AM","PM"]}},en_AU:{date:{dateSeparator:"/"},time:{}},en_BZ:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},en_CA:{date:{dateSeparator:"-"},time:{}},en_GB:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},en_IE:{date:{dateSeparator:"/"},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},en_JM:{date:{},time:{}},en_NZ:{date:{dateSeparator:"/"},time:{}},en_PH:{date:{},time:{}},en_TT:{date:{},time:{}},en_US:{date:{},time:{}},en_VI:{date:{},time:{}},en_ZA:{date:{dateSeparator:"/"},time:{}},en_ZW:{date:{dateSeparator:"/"},time:{}},es:{date:{dateSeparator:"/",era:["antes de Cristo","anno DÃ³mini"],eraAbbr:["a.C.","d.C."],shortDay:["dom","lun","mar","miÃ©","jue","vie","sÃ¡b"],shortMonth:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],longDay:["domingo","lunes","martes","miÃ©rcoles","jueves","viernes","sÃ¡bado"],longMonth:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"]},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},es_AR:{date:{},time:{amPm:["a.m.","p.m."]}},es_BO:{date:{},time:{}},es_CL:{date:{dateSeparator:"-"},time:{timeSeparator:":"}},es_CO:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},es_CR:{date:{},time:{}},es_DO:{date:{},time:{}},es_EC:{date:{},time:{timeSeparator:":"}},es_ES:{date:{},time:{}},es_GT:{date:{dateSeparator:"/"},time:{}},es_HN:{date:{},time:{}},es_MX:{date:{},time:{}},es_NI:{date:{},time:{}},es_PA:{date:{dateSeparator:"/"},time:{}},es_PE:{date:{dateSeparator:"/"},time:{}},es_PR:{date:{dateSeparator:"/"},time:{}},es_PY:{date:{},time:{}},es_SV:{date:{},time:{}},es_UY:{date:{},time:{}},es_VE:{date:{},time:{}},et:{date:{dateSeparator:".",era:["enne meie aega","meie aja jÃ¤rgi"],eraAbbr:["e.m.a.","m.a.j."],shortDay:["P","E","T","K","N","R","L"],shortMonth:["jaan","veebr","mÃ¤rts","apr","mai","juuni","juuli","aug","sept","okt","nov","dets"],longDay:["pÃ¼hapÃ¤ev","esmaspÃ¤ev","teisipÃ¤ev","kolmapÃ¤ev","neljapÃ¤ev","reede","laupÃ¤ev"],longMonth:["jaanuar","veebruar","mÃ¤rts","aprill","mai","juuni","juuli","august","september","oktoober","november","detsember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},et_EE:{date:{},time:{}},eu:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["ig","al","as","az","og","or","lr"],shortMonth:["urt","ots","mar","api","mai","eka","uzt","abu","ira","urr","aza","abe"],longDay:["igandea","astelehena","asteartea","asteazkena","osteguna","ostirala","larunbata"],longMonth:["urtarrila","otsaila","martxoa","apirila","maiatza","ekaina","uztaila","abuztua","iraila","urria","azaroa","abendua"]},time:{timeSeparator:":",amPm:["AM","PM"]}},eu_ES:{date:{},time:{}},fa:{date:{dateSeparator:"/",era:["ÙØ¨Ù Ø§Ø² ÙÛÙØ§Ø¯","ÙÛÙØ§Ø¯Û"],eraAbbr:["Ù.Ù.","Ù."],eraNarrow:["Ù","Ù"],shortDay:["ÛÚ©Ø´ÙØ¨Ù","Ø¯ÙØ´ÙØ¨Ù","Ø³ÙØ´ÙØ¨Ù","ÚÙØ§Ø±Ø´ÙØ¨Ù","Ù¾ÙØ¬Ø´ÙØ¨Ù","Ø¬ÙØ¹Ù","Ø´ÙØ¨Ù"],shortMonth:["ÚØ§ÙÙÛÙÙ","ÙÙØ±ÛÙÙ","ÙØ§Ø±Ø³","Ø¢ÙØ±ÛÙ","ÙÙÙ","ÚÙØ¦Ù","ÚÙØ¦ÛÙÙ","Ø§ÙØª","Ø³Ù¾ØªØ§ÙØ¨Ø±","Ø§Ú©ØªØ¨Ø±","ÙÙØ§ÙØ¨Ø±","Ø¯Ø³Ø§ÙØ¨Ø±"],longDay:["ÛÚ©Ø´ÙØ¨Ù","Ø¯ÙØ´ÙØ¨Ù","Ø³ÙØ´ÙØ¨Ù","ÚÙØ§Ø±Ø´ÙØ¨Ù","Ù¾ÙØ¬Ø´ÙØ¨Ù","Ø¬ÙØ¹Ù","Ø´ÙØ¨Ù"],longMonth:["ÚØ§ÙÙÛÙÙ","ÙÙØ±ÛÙÙ","ÙØ§Ø±Ø³","Ø¢ÙØ±ÛÙ","ÙÙÙ","ÚÙØ¦Ù","ÚÙØ¦ÛÙÙ","Ø§ÙØª","Ø³Ù¾ØªØ§ÙØ¨Ø±","Ø§Ú©ØªØ¨Ø±","ÙÙØ§ÙØ¨Ø±","Ø¯Ø³Ø§ÙØ¨Ø±"]},time:{timeSeparator:":",amPm:["ÙØ¨Ù Ø§Ø² Ø¸ÙØ±","Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±"]}},fa_IR:{date:{},time:{}},fi:{date:{dateSeparator:".",era:["ennen Kristuksen syntymÃ¤Ã¤","jÃ¤lkeen Kristuksen syntymÃ¤n"],eraAbbr:["eKr.","jKr."],shortDay:["su","ma","ti","ke","to","pe","la"],shortMonth:["tammikuuta","helmikuuta","maaliskuuta","huhtikuuta","toukokuuta","kesÃ¤kuuta","heinÃ¤kuuta","elokuuta","syyskuuta","lokakuuta","marraskuuta","joulukuuta"],longDay:["sunnuntaina","maanantaina","tiistaina","keskiviikkona","torstaina","perjantaina","lauantaina"],longMonth:["tammikuuta","helmikuuta","maaliskuuta","huhtikuuta","toukokuuta","kesÃ¤kuuta","heinÃ¤kuuta","elokuuta","syyskuuta","lokakuuta","marraskuuta","joulukuuta"]},time:{timeSeparator:".",amPm:["ap.","ip."]}},fi_FI:{date:{},time:{}},fo:{date:{dateSeparator:"-",era:["fyrir Krist","eftir Krist"],eraAbbr:["BCE","CE"],eraNarrow:["f.Kr.","e.Kr."],shortDay:["sun","mÃ¡n","tÃ½s","mik","hÃ³s","frÃ­","ley"],shortMonth:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],longDay:["sunnudagur","mÃ¡nadagur","tÃ½sdagur","mikudagur","hÃ³sdagur","frÃ­ggjadagur","leygardagur"],longMonth:["januar","februar","mars","aprÃ­l","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},fo_FO:{date:{},time:{}},fr:{date:{dateSeparator:"/",era:["avant JÃ©sus-Christ","aprÃ¨s JÃ©sus-Christ"],eraAbbr:["av. J.-C.","ap. J.-C."],shortDay:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],shortMonth:["janv.","fÃ©vr.","mars","avr.","mai","juin","juil.","aoÃ»t","sept.","oct.","nov.","dÃ©c."],longDay:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],longMonth:["janvier","fÃ©vrier","mars","avril","mai","juin","juillet","aoÃ»t","septembre","octobre","novembre","dÃ©cembre"]},time:{timeSeparator:":",amPm:["AM","PM"]}},fr_BE:{date:{dateSeparator:"/"},time:{}},fr_CA:{date:{dateSeparator:"-"},time:{}},fr_CH:{date:{dateSeparator:"."},time:{}},fr_FR:{date:{},time:{}},fr_LU:{date:{},time:{}},fr_MC:{date:{},time:{}},gl:{date:{dateSeparator:"/",era:["antes de Cristo","despois de Cristo"],eraAbbr:["a.C.","d.C."],shortDay:["Dom","Lun","Mar","MÃ©r","Xov","Ven","SÃ¡b"],shortMonth:["Xan","Feb","Mar","Abr","Mai","XuÃ±","Xul","Ago","Set","Out","Nov","Dec"],longDay:["Domingo","Luns","Martes","MÃ©rcores","Xoves","Venres","SÃ¡bado"],longMonth:["Xaneiro","Febreiro","Marzo","Abril","Maio","XuÃ±o","Xullo","Agosto","Setembro","Outubro","Novembro","Decembro"]},time:{timeSeparator:":",amPm:["AM","PM"]}},gl_ES:{date:{},time:{}},gu:{date:{dateSeparator:"-",era:["àªàª¸àªµà«àª¸àª¨ àªªà«àª°à«àªµà«","àªàª¸àªµà«àª¸àª¨"],eraAbbr:["BCE","CE"],eraNarrow:["àª àª¸ àªªà«","àªàª¸"],shortDay:["àª°àªµàª¿","àª¸à«àª®","àª®àªàªàª³","àª¬à«àª§","àªà«àª°à«","àª¶à«àªà«àª°","àª¶àª¨àª¿"],shortMonth:["àªàª¾àª¨à«àª¯à«","àª«à«àª¬à«àª°à«","àª®àª¾àª°à«àª","àªàªªà«àª°àª¿àª²","àª®à«","àªà«àª¨","àªà«àª²àª¾àª","àªàªàª¸à«àª","àª¸àªªà«àªà«","àªàªà«àªà«","àª¨àªµà«","àª¡àª¿àª¸à«"],longDay:["àª°àªµàª¿àªµàª¾àª°","àª¸à«àª®àªµàª¾àª°","àª®àªàªàª³àªµàª¾àª°","àª¬à«àª§àªµàª¾àª°","àªà«àª°à«àªµàª¾àª°","àª¶à«àªà«àª°àªµàª¾àª°","àª¶àª¨àª¿àªµàª¾àª°"],longMonth:["àªàª¾àª¨à«àª¯à«àªàª°à«","àª«à«àª¬à«àª°à«àªàª°à«","àª®àª¾àª°à«àª","àªàªªà«àª°àª¿àª²","àª®à«","àªà«àª¨","àªà«àª²àª¾àª","àªàªàª¸à«àª","àª¸àªªà«àªà«àª®à«àª¬àª°","àªàªà«àªà«àª¬àª°","àª¨àªµà«àª®à«àª¬àª°","àª¡àª¿àª¸à«àª®à«àª¬àª°"]},time:{timeSeparator:":",amPm:["am","pm"]}},gu_IN:{date:{},time:{}},he:{date:{dateSeparator:"/",era:["××¤× × ××¡×¤××¨×","××¡×¤××¨×"],eraAbbr:["××¤× ××´×¡","××¡××´× "],shortDay:["××× ×'","××× ×'","××× ×'","××× ×'","××× ×'","××× ×'","×©××ª"],shortMonth:["×× ×","×¤××¨","××¨×¡","××¤×¨","×××","××× ","×××","×××","×¡×¤×","×××§","× ××","××¦×"],longDay:["××× ×¨××©××","××× ×©× ×","××× ×©×××©×","××× ×¨×××¢×","××× ××××©×","××× ×©××©×","××× ×©××ª"],longMonth:["×× ×××¨","×¤××¨×××¨","××¨×¡","××¤×¨××","×××","××× ×","××××","×××××¡×","×¡×¤××××¨","×××§××××¨","× ×××××¨","××¦×××¨"]},time:{timeSeparator:":",amPm:['××¤× ×"×¦','×××"×¦']}},he_IL:{date:{},time:{}},hi:{date:{dateSeparator:"-",eraAbbr:["à¤à¤¸à¤¾à¤ªà¥à¤°à¥à¤µ","à¤¸à¤¨"],shortDay:["à¤°à¤µà¤¿","à¤¸à¥à¤®","à¤®à¤à¤à¤²","à¤¬à¥à¤§","à¤à¥à¤°à¥","à¤¶à¥à¤à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤à¤¨à¤µà¤°à¥","à¤«à¤°à¤µà¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¥à¤²","à¤®à¤","à¤à¥à¤¨","à¤à¥à¤²à¤¾à¤","à¤à¤à¤¸à¥à¤¤","à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°","à¤à¤à¥à¤¤à¥à¤¬à¤°","à¤¨à¤µà¤®à¥à¤¬à¤°","à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°"],longDay:["à¤°à¤µà¤¿à¤µà¤¾à¤°","à¤¸à¥à¤®à¤µà¤¾à¤°","à¤®à¤à¤à¤²à¤µà¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤à¤¨à¤µà¤°à¥","à¤«à¤°à¤µà¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¥à¤²","à¤®à¤","à¤à¥à¤¨","à¤à¥à¤²à¤¾à¤","à¤à¤à¤¸à¥à¤¤","à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°","à¤à¤à¥à¤¤à¥à¤¬à¤°","à¤¨à¤µà¤®à¥à¤¬à¤°","à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°"]},time:{timeSeparator:":",amPm:["AM","PM"]}},hi_IN:{date:{},time:{}},hr:{date:{dateSeparator:".",era:["Prije Krista","Poslije Krista"],eraAbbr:["pr.n.e.","AD"],shortDay:["ned","pon","uto","sri","Äet","pet","sub"],shortMonth:["01.","02.","03.","04.","05.","06.","07.","08.","09.","10.","11.","12."],longDay:["nedjelja","ponedjeljak","utorak","srijeda","Äetvrtak","petak","subota"],longMonth:["sijeÄnja","veljaÄe","oÅ¾ujka","travnja","svibnja","lipnja","srpnja","kolovoza","rujna","listopada","studenoga","prosinca"]},time:{timeSeparator:":",amPm:["AM","PM"]}},hr_HR:{date:{},time:{}},hu:{date:{dateSeparator:".",era:["idÅszÃ¡mÃ­tÃ¡sunk elÅtt","idÅszÃ¡mÃ­tÃ¡sunk szerint"],eraAbbr:["i. e.","i. sz."],shortDay:["V","H","K","Sze","Cs","P","Szo"],shortMonth:["jan.","febr.","mÃ¡rc.","Ã¡pr.","mÃ¡j.","jÃºn.","jÃºl.","aug.","szept.","okt.","nov.","dec."],longDay:["vasÃ¡rnap","hÃ©tfÅ","kedd","szerda","csÃ¼tÃ¶rtÃ¶k","pÃ©ntek","szombat"],longMonth:["januÃ¡r","februÃ¡r","mÃ¡rcius","Ã¡prilis","mÃ¡jus","jÃºnius","jÃºlius","augusztus","szeptember","oktÃ³ber","november","december"]},time:{timeSeparator:":",amPm:["de.","du."]}},hu_HU:{date:{},time:{}},hy:{date:{dateSeparator:"/",eraAbbr:["Õâ¤Ô±â¤","Õâ¤Ôµâ¤"],shortDay:["Ô¿Õ«Ö","ÔµÖÕ¯","ÔµÖÖ","ÕÕ¸Ö","ÕÕ¶Õ£","ÕÖÖ","ÕÕ¡Õ¢"],shortMonth:["ÕÕ¶Ö","ÕÕ¿Ö","ÕÖÕ¿","Ô±ÕºÖ","ÕÕµÕ½","ÕÕ¶Õ½","ÕÕ¬Õ½","ÕÕ£Õ½","ÕÕ¥Õº","ÕÕ¸Õ¯","ÕÕ¸Õµ","Ô´Õ¥Õ¯"],longDay:["Ô¿Õ«ÖÕ¡Õ¯Õ«","ÔµÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«","ÔµÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«","ÕÕ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«","ÕÕ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«","ÕÖÖÕ¢Õ¡Õ©","ÕÕ¡Õ¢Õ¡Õ©"],longMonth:["ÕÕ¸ÖÕ¶Õ¸ÖÕ¡Ö","ÕÕ¥Õ¿ÖÕ¸ÖÕ¡Ö","ÕÕ¡ÖÕ¿","Ô±ÕºÖÕ«Õ¬","ÕÕ¡ÕµÕ«Õ½","ÕÕ¸ÖÕ¶Õ«Õ½","ÕÕ¸ÖÕ¬Õ«Õ½","ÕÕ£Õ¸Õ½Õ¿Õ¸Õ½","ÕÕ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö","ÕÕ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö","ÕÕ¸ÕµÕ¥Õ´Õ¢Õ¥Ö","Ô´Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö"]},time:{timeSeparator:":",amPm:["Ô±Õ¼â¤","ÔµÖâ¤"]}},hy_AM:{date:{},time:{}},id:{date:{dateSeparator:"/",eraAbbr:["BCE","CE"],shortDay:["Min","Sen","Sel","Rab","Kam","Jum","Sab"],shortMonth:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agu","Sep","Okt","Nov","Des"],longDay:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],longMonth:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","November","Desember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},id_ID:{date:{},time:{}},is:{date:{dateSeparator:".",eraAbbr:["fyrir Krist","eftir Krist",],eraNarrow:["f.k.","e.k."],shortDay:["sun","mÃ¡n","Ã¾ri","miÃ°","fim","fÃ¶s","lau"],shortMonth:["jan","feb","mar","apr","maÃ­","jÃºn","jÃºl","Ã¡gÃº","sep","okt","nÃ³v","des"],longDay:["sunnudagur","mÃ¡nudagur","Ã¾riÃ°judagur","miÃ°vikudagur","fimmtudagur","fÃ¶studagur","laugardagur"],longMonth:["janÃºar","febrÃºar","mars","aprÃ­l","maÃ­","jÃºnÃ­","jÃºlÃ­","Ã¡gÃºst","september","oktÃ³ber","nÃ³vember","desember"]},time:{timeSeparator:":",amPm:["f.h.","e.h."]}},is_IS:{date:{},time:{}},it:{date:{dateSeparator:"/",era:["a.C.","d.C"],eraAbbr:["aC","dC"],shortDay:["dom","lun","mar","mer","gio","ven","sab"],shortMonth:["gen","feb","mar","apr","mag","giu","lug","ago","set","ott","nov","dic"],longDay:["domenica","lunedÃ¬","martedÃ¬","mercoledÃ¬","giovedÃ¬","venerdÃ¬","sabato"],longMonth:["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre"]},time:{timeSeparator:".",amPm:["m.","p."]}},it_CH:{date:{dateSeparator:"."},time:{}},it_IT:{date:{},time:{}},ja:{date:{dateSeparator:"/",era:["ç´åå","è¥¿æ¦"],eraAbbr:["ç´åå","è¥¿æ¦"],shortDay:["æ¥","æ","ç«","æ°´","æ¨","é","å"],shortMonth:["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"],longDay:["æ¥ææ¥","æææ¥","ç«ææ¥","æ°´ææ¥","æ¨ææ¥","éææ¥","åææ¥"],longMonth:["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"]},time:{timeSeparator:":",amPm:["åå","åå¾"]}},ja_JP:{date:{},time:{}},ka:{date:{dateSeparator:"-",era:["á©áááá¡ á¬ááááá¦á ááªá®ááááá","á©áááá á¬ááááá¦á ááªá®ááá"],eraAbbr:["á©áááá¡ á¬ááááá¦á ááªá®ááááá","á©áááá á¬ááááá¦á ááªá®ááá"],eraNarrow:["á©áááá¡ á¬ááááá¦á ááªá®ááááá","á©áááá á¬ááááá¦á ááªá®ááá"],shortDay:["ááá","áá á¨","á¡áá","ááá®","á®á£á","ááá ","á¨áá"],shortMonth:["ááá","ááá","ááá ","ááá ","ááá","ááá","ááá","ááá","á¡áá¥","áá¥á¢","ááá","ááá"],longDay:["áááá á","áá á¨ááááá","á¡ááá¨ááááá","ááá®á¨ááááá","á®á£áá¨ááááá","ááá áá¡áááá","á¨ááááá"],longMonth:["áááááá á","ááááá áááá","ááá á¢á","ááá ááá","áááá¡á","ááááá¡á","ááááá¡á","ááááá¡á¢á","á¡áá¥á¢ááááá á","áá¥á¢ááááá á","ááááááá á","áááááááá á"]},time:{timeSeparator:":",amPm:["ááááá¡","á¡áá¦áááá¡"]}},ka_GE:{date:{},time:{}},kk:{date:{dateSeparator:".",eraAbbr:["BCE","CE"],shortDay:["Ð¶Ñ.","Ð´Ñ.","ÑÑ.","ÑÑ.","Ð±Ñ.","Ð¶Ð¼.","ÑÒ»."],shortMonth:["ÒÐ°Ò£.","Ð°ÒÐ¿.","Ð½Ð°Ñ.","ÑÓÑ.","Ð¼Ð°Ð¼.","Ð¼Ð°Ñ.","ÑÑÐ».","ÑÐ°Ð¼.","ÒÑÑ.","ÒÐ°Ð·.","ÒÐ°Ñ.","Ð¶ÐµÐ»Ñ."],longDay:["Ð¶ÐµÐºÑÐµÐ½Ñ","Ð´ÑÐ¹ÑÐµÐ½Ð±Ñ","ÑÐµÐ¹ÑÐµÐ½Ð±Ñ","ÑÓÑÐµÐ½Ð±Ñ","Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ","Ð¶Ò±Ð¼Ð°","ÑÐµÐ½Ð±Ñ"],longMonth:["ÒÐ°Ò£ÑÐ°Ñ","Ð°ÒÐ¿Ð°Ð½","Ð½Ð°ÑÑÑÐ·","ÑÓÑÑÑ","Ð¼Ð°Ð¼ÑÑ","Ð¼Ð°ÑÑÑÐ¼","ÑÑÐ»Ð´Ðµ","ÑÐ°Ð¼ÑÐ·","ÒÑÑÐºÒ¯Ð¹ÐµÐº","ÒÐ°Ð·Ð°Ð½","ÒÐ°ÑÐ°ÑÐ°","Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½"]},time:{timeSeparator:":",amPm:["AM","PM"]}},kk_KZ:{date:{},time:{}},kn:{date:{dateSeparator:"-",era:["à²à²¸à²ªà³à²µà³¯.","à²à³à²°à²¿à²¸à³à²¤ à²¶à²"],eraAbbr:["BCE","CE"],shortDay:["à²°.","à²¸à³.","à²®à².","à²¬à³.","à²à³.","à²¶à³.","à²¶à²¨à²¿."],shortMonth:["à²à²¨à²µà²°à³","à²«à³à²¬à³à²°à²µà²°à³","à²®à²¾à²°à³à²à³","à²à²ªà³à²°à²¿à²²à³","à²®à³","à²à³à²¨à³","à²à³à²²à³","à²à²à²¸à³à²à³","à²¸à²ªà³à²à³à²à²¬à²°à³","à²à²à³à²à³à²¬à²°à³","à²¨à²µà³à²à²¬à²°à³","à²¡à²¿à²¸à³à²à²¬à²°à³"],longDay:["à²°à²µà²¿à²µà²¾à²°","à²¸à³à²®à²µà²¾à²°","à²®à²à²à²³à²µà²¾à²°","à²¬à³à²§à²µà²¾à²°","à²à³à²°à³à²µà²¾à²°","à²¶à³à²à³à²°à²µà²¾à²°","à²¶à²¨à²¿à²µà²¾à²°"],longMonth:["à²à²¨à²µà²°à³","à²«à³à²¬à³à²°à²µà²°à³","à²®à²¾à²°à³à²à³","à²à²ªà³à²°à²¿à²²à³","à²®à³","à²à³à²¨à³","à²à³à²²à³","à²à²à²¸à³à²à³","à²¸à²ªà³à²à³à²à²¬à²°à³","à²à²à³à²à³à²¬à²°à³","à²¨à²µà³à²à²¬à²°à³","à²¡à²¿à²¸à³à²à²¬à²°à³"]},time:{timeSeparator:":",amPm:["am","pm"]}},kn_IN:{date:{},time:{}},ko:{date:{dateSeparator:". ",era:["ìë ¥ê¸°ìì ","ìë ¥ê¸°ì"],eraAbbr:["ê¸°ìì ","ìê¸°"],shortDay:["ì¼","ì","í","ì","ëª©","ê¸","í "],shortMonth:["1ì","2ì","3ì","4ì","5ì","6ì","7ì","8ì","9ì","10ì","11ì","12ì"],longDay:["ì¼ìì¼","ììì¼","íìì¼","ììì¼","ëª©ìì¼","ê¸ìì¼","í ìì¼"],longMonth:["1ì","2ì","3ì","4ì","5ì","6ì","7ì","8ì","9ì","10ì","11ì","12ì"]},time:{timeSeparator:":",amPm:["ì¤ì ","ì¤í"]}},ko_KR:{date:{},time:{}},kok:{date:{dateSeparator:"-",eraAbbr:["à¤à¥à¤°à¤¿à¤¸à¥à¤¤à¤ªà¥à¤°à¥à¤µ","à¤à¥à¤°à¤¿à¤¸à¥à¤¤à¤¶à¤à¤¾"],shortDay:["à¤°à¤µà¤¿","à¤¸à¥à¤®","à¤®à¤à¤à¤³","à¤¬à¥à¤§","à¤à¥à¤°à¥","à¤¶à¥à¤à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","à¤«à¥à¤¬à¥à¤µà¤¾à¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥","à¤à¥à¤¨","à¤à¥à¤²à¥","à¤à¤à¤¸à¥à¤","à¤¸à¥à¤ªà¥à¤à¥à¤à¤¬à¤°","à¤à¤à¥à¤à¥à¤¬à¤°","à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"],longDay:["à¤à¤¦à¤¿à¤¤à¥à¤¯à¤µà¤¾à¤°","à¤¸à¥à¤®à¤µà¤¾à¤°","à¤®à¤à¤à¤³à¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥","à¤à¥à¤¨","à¤à¥à¤²à¥","à¤à¤à¤¸à¥à¤","à¤¸à¥à¤ªà¥à¤à¥à¤à¤¬à¤°","à¤à¤à¥à¤à¥à¤¬à¤°","à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"]},time:{timeSeparator:":",amPm:["à¤®.à¤ªà¥.","à¤®.à¤¨à¤."]}},kok_IN:{date:{},time:{}},lt:{date:{dateSeparator:"-",era:["prieÅ¡ KristÅ³","po Kristaus"],eraAbbr:["pr. Kr.","po Kr."],shortDay:["Sk","Pr","An","Tr","Kt","Pn","Å t"],shortMonth:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rgp","Rgs","Spl","Lap","Grd"],longDay:["sekmadienis","pirmadienis","antradienis","treÄiadienis","ketvirtadienis","penktadienis","Å¡eÅ¡tadienis"],longMonth:["sausio","vasario","kovo","balandÅ¾io","geguÅ¾Äs","birÅ¾elio","liepos","rugpjÅ«Äio","rugsÄjo","spalio","lapkriÄio","gruodÅ¾io"]},time:{timeSeparator:":",amPm:["prieÅ¡piet","popiet"]}},lt_LT:{date:{},time:{}},lv:{date:{dateSeparator:".",era:["pirms mÅ«su Äras","mÅ«su ÄrÄ"],eraAbbr:["p.m.Ä.","m.Ä."],eraNarrow:["p.m.Ä.","m.Ä."],shortDay:["Sv","Pr","Ot","Tr","Ce","Pk","Se"],shortMonth:["janv.","febr.","marts","apr.","maijs","jÅ«n.","jÅ«l.","aug.","sept.","okt.","nov.","dec."],longDay:["svÄtdiena","pirmdiena","otrdiena","treÅ¡diena","ceturtdiena","piektdiena","sestdiena"],longMonth:["janvÄris","februÄris","marts","aprÄ«lis","maijs","jÅ«nijs","jÅ«lijs","augusts","septembris","oktobris","novembris","decembris"]},time:{timeSeparator:":",amPm:["AM","PM"]}},lv_LV:{date:{},time:{}},mk:{date:{dateSeparator:".",eraAbbr:["Ð¿Ñ.Ð½.Ðµ.","Ð°Ðµ."],shortDay:["Ð½ÐµÐ´.","Ð¿Ð¾Ð½.","Ð²Ñ.","ÑÑÐµ.","ÑÐµÑ.","Ð¿ÐµÑ.","ÑÐ°Ð±."],shortMonth:["ÑÐ°Ð½.","ÑÐµÐ².","Ð¼Ð°Ñ.","Ð°Ð¿Ñ.","Ð¼Ð°Ñ","ÑÑÐ½.","ÑÑÐ».","Ð°Ð²Ð³.","ÑÐµÐ¿Ñ.","Ð¾ÐºÑ.","Ð½Ð¾ÐµÐ¼.","Ð´ÐµÐºÐµÐ¼."],longDay:["Ð½ÐµÐ´ÐµÐ»Ð°","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº","Ð²ÑÐ¾ÑÐ½Ð¸Ðº","ÑÑÐµÐ´Ð°","ÑÐµÑÐ²ÑÑÐ¾Ðº","Ð¿ÐµÑÐ¾Ðº","ÑÐ°Ð±Ð¾ÑÐ°"],longMonth:["ÑÐ°Ð½ÑÐ°ÑÐ¸","ÑÐµÐ²ÑÑÐ°ÑÐ¸","Ð¼Ð°ÑÑ","Ð°Ð¿ÑÐ¸Ð»","Ð¼Ð°Ñ","ÑÑÐ½Ð¸","ÑÑÐ»Ð¸","Ð°Ð²Ð³ÑÑÑ","ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸","Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸","Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸","Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸"]},time:{timeSeparator:":",amPm:["Ð¿ÑÐµÑÐ¿Ð»Ð°Ð´Ð½Ðµ","Ð¿Ð¾Ð¿Ð»Ð°Ð´Ð½Ðµ"]}},mk_MK:{date:{},time:{}},ml:{date:{dateSeparator:"/",era:["à´àµà´°à´¿à´¸àµà´¤àµà´µà´¿à´¨àµàµ à´®àµà´®àµà´ªàµ","à´àµà´°à´¿à´¸àµà´¤àµà´µà´¿à´¨àµ à´ªà´¿à´¨àµà´ªàµ"],eraAbbr:["à´àµà´°à´¿.à´®àµ.","à´àµà´°à´¿.à´ªà´¿."],eraNarrow:["à´àµà´°à´¿.à´®àµ.","à´àµà´°à´¿.à´ªà´¿."],shortDay:["à´à´¾à´¯à´°àµ","à´¤à´¿à´àµà´à´³àµ","à´àµà´µàµà´µ","à´¬àµà´§à´¨àµ","à´µàµà´¯à´¾à´´à´","à´µàµà´³àµà´³à´¿","à´¶à´¨à´¿"],shortMonth:["à´à´¨àµ","à´«àµà´¬àµà´°àµ","à´®à´¾à´°àµ","à´à´ªàµà´°à´¿","à´®àµà´¯àµ","à´àµà´£àµ","à´àµà´²àµ","à´à´","à´¸àµà´ªàµà´±àµà´±à´","à´à´àµà´àµ","à´¨à´µà´","à´¡à´¿à´¸à´"],longDay:["à´à´¾à´¯à´±à´¾à´´àµà´","à´¤à´¿à´àµà´à´³à´¾à´´àµà´","à´àµà´µàµà´µà´¾à´´àµà´","à´¬àµà´§à´¨à´¾à´´àµà´","à´µàµà´¯à´¾à´´à´¾à´´àµà´","à´µàµà´³àµà´³à´¿à´¯à´¾à´´àµà´","à´¶à´¨à´¿à´¯à´¾à´´àµà´"],longMonth:["à´à´¨àµà´µà´°à´¿","à´«àµà´¬àµà´°àµà´µà´°à´¿","à´®à´¾à´°àµà´àµà´àµ","à´à´ªàµà´°à´¿à´²àµ","à´®àµà´¯àµ","à´àµà´£àµ","à´àµà´²àµ","à´à´à´¸àµà´±àµà´±àµ","à´¸àµà´ªàµà´±àµà´±à´à´¬à´°àµ","à´à´àµà´àµà´¬à´°àµ","à´¨à´µà´à´¬à´°àµ","à´¡à´¿à´¸à´à´¬à´°àµ"]},time:{timeSeparator:":",amPm:["am","pm"]}},ml_IN:{date:{},time:{}},mn:{date:{dateSeparator:"-",era:["Ð¼Ð°Ð½Ð°Ð¹ ÑÑÐ¸Ð½Ð¸Ð¹ Ó©Ð¼Ð½Ó©Ñ","Ð¼Ð°Ð½Ð°Ð¹ ÑÑÐ¸Ð½Ð¸Ð¹"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},mn_MN:{date:{},time:{}},mr:{date:{dateSeparator:"-",era:["à¤à¤¸à¤µà¥à¤¸à¤¨à¤ªà¥à¤°à¥à¤µ","à¤à¤¸à¤µà¥à¤¸à¤¨"],eraAbbr:["à¤.à¤¸.à¤ªà¥.","à¤.à¤¸."],shortDay:["à¤°à¤µà¤¿","à¤¸à¥à¤®","à¤®à¤à¤à¤³","à¤¬à¥à¤§","à¤à¥à¤°à¥","à¤¶à¥à¤à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥","à¤à¥à¤¨","à¤à¥à¤²à¥","à¤à¤à¤¸à¥à¤","à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°","à¤à¤à¥à¤à¥à¤¬à¤°","à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"],longDay:["à¤°à¤µà¤¿à¤µà¤¾à¤°","à¤¸à¥à¤®à¤µà¤¾à¤°","à¤®à¤à¤à¤³à¤µà¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥","à¤à¥à¤¨","à¤à¥à¤²à¥","à¤à¤à¤¸à¥à¤","à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°","à¤à¤à¥à¤à¥à¤¬à¤°","à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"]},time:{timeSeparator:"-",amPm:["am","pm"]}},mr_IN:{date:{},time:{}},ms:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["Ahd","Isn","Sel","Rab","Kha","Jum","Sab"],shortMonth:["Jan","Feb","Mac","Apr","Mei","Jun","Jul","Ogos","Sep","Okt","Nov","Dis"],longDay:["Ahad","Isnin","Selasa","Rabu","Khamis","Jumaat","Sabtu"],longMonth:["Januari","Februari","Mac","April","Mei","Jun","Julai","Ogos","September","Oktober","November","Disember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ms_BN:{date:{},time:{timeSeparator:":"}},ms_MY:{date:{},time:{}},mt:{date:{dateSeparator:"/",era:["Qabel Kristu","Wara Kristu"],eraAbbr:["QK","WK"],shortDay:["Ä¦ad","Tne","Tli","Erb","Ä¦am","Ä im","Sib"],shortMonth:["Jan","Fra","Mar","Apr","Mej","Ä un","Lul","Aww","Set","Ott","Nov","DiÄ"],longDay:["Il-Ä¦add","It-Tnejn","It-Tlieta","L-ErbgÄ§a","Il-Ä¦amis","Il-Ä imgÄ§a","Is-Sibt"],longMonth:["Jannar","Frar","Marzu","April","Mejju","Ä unju","Lulju","Awwissu","Settembru","Ottubru","Novembru","DiÄembru"]},time:{timeSeparator:":",amPm:["QN","WN"]}},mt_MT:{date:{},time:{}},nb:{date:{dateSeparator:".",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸n.","man.","tir.","ons.","tor.","fre.","lÃ¸r."],shortMonth:["jan.","feb.","mars","apr.","mai","juni","juli","aug.","sep.","okt.","nov.","des."],longDay:["sÃ¸ndag","mandag","tirsdag","onsdag","torsdag","fredag","lÃ¸rdag"],longMonth:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:".",amPm:["AM","PM"]}},nb_NO:{date:{},time:{}},nl:{date:{dateSeparator:"-",era:["Voor Christus","Anno Domini"],eraAbbr:["v. Chr.","n. Chr."],shortDay:["zo","ma","di","wo","do","vr","za"],shortMonth:["jan.","feb.","mrt.","apr.","mei","jun.","jul.","aug.","sep.","okt.","nov.","dec."],longDay:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],longMonth:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"]},time:{timeSeparator:":",amPm:["AM","PM"]}},nl_BE:{date:{dateSeparator:"/"},time:{}},nl_NL:{date:{},time:{}},nn:{date:{dateSeparator:".",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸.","mÃ¥.","ty.","on.","to.","fr.","la."],shortMonth:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],longDay:["sÃ¸ndag","mÃ¥ndag","tysdag","onsdag","torsdag","fredag","laurdag"],longMonth:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:".",amPm:["formiddag","ettermiddag"]}},nn_NO:{date:{},time:{}},pa:{date:{dateSeparator:"/",era:["à¨à¨¸à¨¾à¨ªà©à¨°à¨µ","à¨¸à©°à¨¨"],eraAbbr:["BCE","CE"],shortDay:["à¨à¨¤.","à¨¸à©à¨®.","à¨®à©°à¨à¨².","à¨¬à©à¨§.","à¨µà©à¨°.","à¨¸à¨¼à©à¨à¨°.","à¨¸à¨¼à¨¨à©."],shortMonth:["à¨à¨¨à¨µà¨°à©","à¨«à¨¼à¨°à¨µà¨°à©","à¨®à¨¾à¨°à¨","à¨à¨ªà©à¨°à©à¨²","à¨®à¨","à¨à©à¨¨","à¨à©à¨²à¨¾à¨","à¨à¨à¨¸à¨¤","à¨¸à¨¤à©°à¨¬à¨°","à¨à¨à¨¤à©à¨¬à¨°","à¨¨à¨µà©°à¨¬à¨°","à¨¦à¨¸à©°à¨¬à¨°"],longDay:["à¨à¨¤à¨µà¨¾à¨°","à¨¸à©à¨®à¨µà¨¾à¨°","à¨®à©°à¨à¨²à¨µà¨¾à¨°","à¨¬à©à¨§à¨µà¨¾à¨°","à¨µà©à¨°à¨µà¨¾à¨°","à¨¸à¨¼à©à©±à¨à¨°à¨µà¨¾à¨°","à¨¸à¨¼à¨¨à©à¨à¨°à¨µà¨¾à¨°"],longMonth:["à¨à¨¨à¨µà¨°à©","à¨«à¨¼à¨°à¨µà¨°à©","à¨®à¨¾à¨°à¨","à¨à¨ªà©à¨°à©à¨²","à¨®à¨","à¨à©à¨¨","à¨à©à¨²à¨¾à¨","à¨à¨à¨¸à¨¤","à¨¸à¨¤à©°à¨¬à¨°","à¨à¨à¨¤à©à¨¬à¨°","à¨¨à¨µà©°à¨¬à¨°","à¨¦à¨¸à©°à¨¬à¨°"]},time:{timeSeparator:":",amPm:["à¨¸à¨µà©à¨°à©","à¨¸à¨¼à¨¾à¨®"]}},pa_IN:{date:{},time:{}},pl:{date:{dateSeparator:"-",era:["p.n.e.","n.e."],eraAbbr:["p.n.e.","n.e."],shortDay:["niedz.","pon.","wt.","År.","czw.","pt.","sob."],shortMonth:["sty","lut","mar","kwi","maj","cze","lip","sie","wrz","paÅº","lis","gru"],longDay:["niedziela","poniedziaÅek","wtorek","Åroda","czwartek","piÄtek","sobota"],longMonth:["stycznia","lutego","marca","kwietnia","maja","czerwca","lipca","sierpnia","wrzeÅnia","paÅºdziernika","listopada","grudnia"]},time:{timeSeparator:":",amPm:["AM","PM"]}},pl_PL:{date:{},time:{}},pt:{date:{dateSeparator:"/",era:["Antes de Cristo","Ano do Senhor"],eraAbbr:["a.C.","d.C."],shortDay:["dom","seg","ter","qua","qui","sex","sÃ¡b"],shortMonth:["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],longDay:["domingo","segunda-feira","terÃ§a-feira","quarta-feira","quinta-feira","sexta-feira","sÃ¡bado"],longMonth:["janeiro","fevereiro","marÃ§o","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"]},time:{timeSeparator:":",amPm:["AM","PM"]}},pt_BR:{date:{},time:{}},pt_PT:{date:{shortMonth:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],longMonth:["Janeiro","Fevereiro","MarÃ§o","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"]},time:{amPm:["Antes do meio-dia","Depois do meio-dia"]}},ro:{date:{dateSeparator:".",era:["Ã®nainte de Hristos","dupÄ Hristos"],eraAbbr:["Ã®.Hr.","d.Hr."],shortDay:["Du","Lu","Ma","Mi","Jo","Vi","SÃ¢"],shortMonth:["ian.","feb.","mar.","apr.","mai","iun.","iul.","aug.","sept.","oct.","nov.","dec."],longDay:["duminicÄ","luni","marÈi","miercuri","joi","vineri","sÃ¢mbÄtÄ"],longMonth:["ianuarie","februarie","martie","aprilie","mai","iunie","iulie","august","septembrie","octombrie","noiembrie","decembrie"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ro_RO:{date:{},time:{}},ru:{date:{dateSeparator:".",era:["Ð´Ð¾ Ð½.Ñ.","Ð½.Ñ."],eraAbbr:["Ð´Ð¾ Ð½.Ñ.","Ð½.Ñ."],shortDay:["ÐÑ","ÐÐ½","ÐÑ","Ð¡Ñ","Ð§Ñ","ÐÑ","Ð¡Ð±"],shortMonth:["ÑÐ½Ð².","ÑÐµÐ²Ñ.","Ð¼Ð°ÑÑÐ°","Ð°Ð¿Ñ.","Ð¼Ð°Ñ","Ð¸ÑÐ½Ñ","Ð¸ÑÐ»Ñ","Ð°Ð²Ð³.","ÑÐµÐ½Ñ.","Ð¾ÐºÑ.","Ð½Ð¾ÑÐ±.","Ð´ÐµÐº."],longDay:["Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº","Ð²ÑÐ¾ÑÐ½Ð¸Ðº","ÑÑÐµÐ´Ð°","ÑÐµÑÐ²ÐµÑÐ³","Ð¿ÑÑÐ½Ð¸ÑÐ°","ÑÑÐ±Ð±Ð¾ÑÐ°"],longMonth:["ÑÐ½Ð²Ð°ÑÑ","ÑÐµÐ²ÑÐ°Ð»Ñ","Ð¼Ð°ÑÑÐ°","Ð°Ð¿ÑÐµÐ»Ñ","Ð¼Ð°Ñ","Ð¸ÑÐ½Ñ","Ð¸ÑÐ»Ñ","Ð°Ð²Ð³ÑÑÑÐ°","ÑÐµÐ½ÑÑÐ±ÑÑ","Ð¾ÐºÑÑÐ±ÑÑ","Ð½Ð¾ÑÐ±ÑÑ","Ð´ÐµÐºÐ°Ð±ÑÑ"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ru_RU:{date:{},time:{}},se:{date:{dateSeparator:"-",era:["ovdal Kristtusa","maÅÅel Kristtusa"],eraAbbr:["BCE","CE"],eraNarrow:["o.Kr.","m.Kr."],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},se_NO:{date:{},time:{}},sk:{date:{dateSeparator:".",eraAbbr:["pred n.l.","n.l."],shortDay:["ne","po","ut","st","Å¡t","pi","so"],shortMonth:["jan","feb","mar","apr","mÃ¡j","jÃºn","jÃºl","aug","sep","okt","nov","dec"],longDay:["nedeÄ¾a","pondelok","utorok","streda","Å¡tvrtok","piatok","sobota"],longMonth:["januÃ¡ra","februÃ¡ra","marca","aprÃ­la","mÃ¡ja","jÃºna","jÃºla","augusta","septembra","oktÃ³bra","novembra","decembra"]},time:{timeSeparator:":",amPm:["dopoludnia","popoludnÃ­"]}},sk_SK:{date:{},time:{}},sl:{date:{dateSeparator:". ",era:["pred naÅ¡im Å¡tetjem","naÅ¡e Å¡tetje"],eraAbbr:["pr. n. Å¡t.","po Kr."],shortDay:["ned","pon","tor","sre","Äet","pet","sob"],shortMonth:["jan","feb","mar","apr","maj","jun","jul","avg","sep","okt","nov","dec"],longDay:["nedelja","ponedeljek","torek","sreda","Äetrtek","petek","sobota"],longMonth:["januar","februar","marec","april","maj","junij","julij","avgust","september","oktober","november","december"]},time:{timeSeparator:":",amPm:["dop.","pop."]}},sl_SI:{date:{},time:{}},sq:{date:{dateSeparator:"-",eraAbbr:["p.e.r.","n.e.r."],shortDay:["Die","HÃ«n","Mar","MÃ«r","Enj","Pre","Sht"],shortMonth:["Jan","Shk","Mar","Pri","Maj","Qer","Kor","Gsh","Sht","Tet","NÃ«n","Dhj"],longDay:["e diel","e hÃ«nÃ«","e martÃ«","e mÃ«rkurÃ«","e enjte","e premte","e shtunÃ«"],longMonth:["janar","shkurt","mars","prill","maj","qershor","korrik","gusht","shtator","tetor","nÃ«ntor","dhjetor"]},time:{timeSeparator:".",amPm:["PD","MD"]}},sq_AL:{date:{},time:{}},sr:{date:{dateSeparator:".",era:["ÐÑÐµ Ð½Ð¾Ð²Ðµ ÐµÑÐµ","ÐÐ¾Ð²Ðµ ÐµÑÐµ"],eraAbbr:["Ð¿. Ð½. Ðµ.","Ð½. Ðµ"],eraNarrow:["Ð¿.Ð½.Ðµ.","Ð½.Ðµ."],shortDay:["Ð½ÐµÐ´","Ð¿Ð¾Ð½","ÑÑÐ¾","ÑÑÐµ","ÑÐµÑ","Ð¿ÐµÑ","ÑÑÐ±"],shortMonth:["ÑÐ°Ð½","ÑÐµÐ±","Ð¼Ð°Ñ","Ð°Ð¿Ñ","Ð¼Ð°Ñ","ÑÑÐ½","ÑÑÐ»","Ð°Ð²Ð³","ÑÐµÐ¿","Ð¾ÐºÑ","Ð½Ð¾Ð²","Ð´ÐµÑ"],longDay:["Ð½ÐµÐ´ÐµÑÐ°","Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº","ÑÑÐ¾ÑÐ°Ðº","ÑÑÐµÐ´Ð°","ÑÐµÑÐ²ÑÑÐ°Ðº","Ð¿ÐµÑÐ°Ðº","ÑÑÐ±Ð¾ÑÐ°"],longMonth:["ÑÐ°Ð½ÑÐ°Ñ","ÑÐµÐ±ÑÑÐ°Ñ","Ð¼Ð°ÑÑ","Ð°Ð¿ÑÐ¸Ð»","Ð¼Ð°Ñ","ÑÑÐ½","ÑÑÐ»","Ð°Ð²Ð³ÑÑÑ","ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ","Ð¾ÐºÑÐ¾Ð±Ð°Ñ","Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ","Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ"]},time:{timeSeparator:".",amPm:["Ð¿ÑÐµ Ð¿Ð¾Ð´Ð½Ðµ","Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ"]}},sr_BA:{date:{},time:{}},sr_CS:{date:{},time:{}},sv:{date:{dateSeparator:"-",era:["fÃ¶re Kristus","efter Kristus"],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¶n","mÃ¥n","tis","ons","tors","fre","lÃ¶r"],shortMonth:["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],longDay:["sÃ¶ndag","mÃ¥ndag","tisdag","onsdag","torsdag","fredag","lÃ¶rdag"],longMonth:["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"]},time:{timeSeparator:".",amPm:["fm","em"]}},sv_FI:{date:{},time:{}},sv_SE:{date:{},time:{}},sw:{date:{dateSeparator:"-",era:["Kabla ya Kristo","Baada ya Kristo"],eraAbbr:["KK","BK"],shortDay:["Jpi","Jtt","Jnn","Jtn","Alh","Iju","Jmo"],shortMonth:["Jan","Feb","Mac","Apr","Mei","Jun","Jul","Ago","Sep","Okt","Nov","Des"],longDay:["Jumapili","Jumatatu","Jumanne","Jumatano","Alhamisi","Ijumaa","Jumamosi"],longMonth:["Januari","Februari","Machi","Aprili","Mei","Juni","Julai","Agosti","Septemba","Oktoba","Novemba","Desemba"]},time:{timeSeparator:":",amPm:["AM","PM"]}},sw_KE:{date:{},time:{}},syr:{date:{dateSeparator:"-",shortDay:["1","2","3","4","5","6","7"],shortMonth:["ÜÜ¢ Ü","Ü«ÜÜ","ÜÜÜª","Ü¢ÜÜ£Ü¢","ÜÜÜª","ÜÜÜÜªÜ¢","Ü¬Ü¡ÜÜ","ÜÜ","ÜÜÜ ÜÜ ","Ü¬Ü« Ü","Ü¬Ü« Ü","ÜÜ¢ Ü"],longDay:["1","2","3","4","5","6","7"],longMonth:["ÜÜ¢ Ü","Ü«ÜÜ","ÜÜÜª","Ü¢ÜÜ£Ü¢","ÜÜÜª","ÜÜÜÜªÜ¢","Ü¬Ü¡ÜÜ","ÜÜ","ÜÜÜ ÜÜ ","Ü¬Ü« Ü","Ü¬Ü« Ü","ÜÜ¢ Ü"]},time:{timeSeparator:":",amPm:["AM","PM"]}},syr_SY:{date:{},time:{}},ta:{date:{dateSeparator:"-",era:["à®à®¿à®±à®¿à®¸à¯à®¤à¯à®µà¯à®à¯à®à¯ à®®à¯à®©à¯","à®à®©à¯ à®à¯à®®à®¿à®©à®¿"],eraAbbr:["à®à®¿à®®à¯","à®à®¿à®ªà®¿"],shortDay:["à®à®¾","à®¤à®¿","à®à¯","à®ªà¯","à®µà®¿","à®µà¯","à®"],shortMonth:["à®à®©.","à®ªà®¿à®ªà¯.","à®®à®¾à®°à¯.","à®à®ªà¯.","à®®à¯","à®à¯à®©à¯","à®à¯à®²à¯","à®à®.","à®à¯à®ªà¯.","à®à®à¯.","à®¨à®µ.","à®à®¿à®."],longDay:["à®à®¾à®¯à®¿à®±à¯","à®¤à®¿à®à¯à®à®³à¯","à®à¯à®µà¯à®µà®¾à®¯à¯","à®ªà¯à®¤à®©à¯","à®µà®¿à®¯à®¾à®´à®©à¯","à®µà¯à®³à¯à®³à®¿","à®à®©à®¿"],longMonth:["à®à®©à®µà®°à®¿","à®ªà®¿à®ªà¯à®°à®µà®°à®¿","à®®à®¾à®°à¯à®à¯","à®à®ªà¯à®°à®²à¯","à®®à¯","à®à¯à®©à¯","à®à¯à®²à¯","à®à®à®¸à¯à®à¯","à®à¯à®ªà¯à®à®®à¯à®ªà®°à¯","à®à®à¯à®à¯à®ªà®°à¯","à®¨à®µà®®à¯à®ªà®°à¯","à®à®¿à®à®®à¯à®ªà®°à¯"]},time:{timeSeparator:":",amPm:["am","pm"]}},ta_IN:{date:{},time:{}},te:{date:{dateSeparator:"-",era:["à°à°¸à°¾à°ªà±à°°à±à°µ.","à°¸à°¨à±."],eraAbbr:["BCE","CE"],shortDay:["à°à°¦à°¿","à°¸à±à°®","à°®à°à°à°³","à°¬à±à°§","à°à±à°°à±","à°¶à±à°à±à°°","à°¶à°¨à°¿"],shortMonth:["à°à°¨à°µà°°à°¿","à°«à°¿à°¬à±à°°à°µà°°à°¿","à°®à°¾à°°à±à°à°¿","à°à°ªà±à°°à°¿à°²à±","à°®à±","à°à±à°¨à±","à°à±à°²à±","à°à°à°¸à±à°à±","à°¸à±à°ªà±à°à±à°à°¬à°°à±","à°à°à±à°à±à°¬à°°à±","à°¨à°µà°à°¬à°°à±","à°¡à°¿à°¸à±à°à°¬à°°à±"],longDay:["à°à°¦à°¿à°µà°¾à°°à°","à°¸à±à°®à°µà°¾à°°à°","à°®à°à°à°³à°µà°¾à°°à°","à°¬à±à°§à°µà°¾à°°à°","à°à±à°°à±à°µà°¾à°°à°","à°¶à±à°à±à°°à°µà°¾à°°à°","à°¶à°¨à°¿à°µà°¾à°°à°"],longMonth:["à°à°¨à°µà°°à°¿","à°«à°¿à°¬à±à°°à°µà°°à°¿","à°®à°¾à°°à±à°à°¿","à°à°ªà±à°°à°¿à°²à±","à°®à±","à°à±à°¨à±","à°à±à°²à±","à°à°à°¸à±à°à±","à°¸à±à°ªà±à°à±à°à°¬à°°à±","à°à°à±à°à±à°¬à°°à±","à°¨à°µà°à°¬à°°à±","à°¡à°¿à°¸à±à°à°¬à°°à±"]},time:{timeSeparator:":",amPm:["am","pm"]}},te_IN:{date:{},time:{}},th:{date:{dateSeparator:"/",era:["à¸à¸µà¸à¹à¸­à¸à¸à¸£à¸´à¸ªà¸à¹à¸¨à¸±à¸à¸£à¸²à¸","à¸à¸£à¸´à¸ªà¸à¹à¸¨à¸±à¸à¸£à¸²à¸"],eraAbbr:["à¸à¸µà¸à¹à¸­à¸ à¸.à¸¨.","à¸.à¸¨."],eraNarrow:["à¸à¹à¸­à¸ à¸.à¸¨."],shortDay:["à¸­à¸².","à¸.","à¸­.","à¸.","à¸à¸¤.","à¸¨.","à¸ª."],shortMonth:["à¸¡.à¸.","à¸.à¸.","à¸¡à¸µ.à¸.","à¹à¸¡.à¸¢.","à¸.à¸.","à¸¡à¸´.à¸¢.","à¸.à¸.","à¸ª.à¸.","à¸.à¸¢.","à¸.à¸.","à¸.à¸¢.","à¸.à¸."],longDay:["à¸§à¸±à¸à¸­à¸²à¸à¸´à¸à¸¢à¹","à¸§à¸±à¸à¸à¸±à¸à¸à¸£à¹","à¸§à¸±à¸à¸­à¸±à¸à¸à¸²à¸£","à¸§à¸±à¸à¸à¸¸à¸","à¸§à¸±à¸à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ","à¸§à¸±à¸à¸¨à¸¸à¸à¸£à¹","à¸§à¸±à¸à¹à¸ªà¸²à¸£à¹"],longMonth:["à¸¡à¸à¸£à¸²à¸à¸¡","à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹","à¸¡à¸µà¸à¸²à¸à¸¡","à¹à¸¡à¸©à¸²à¸¢à¸","à¸à¸¤à¸©à¸ à¸²à¸à¸¡","à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸","à¸à¸£à¸à¸à¸²à¸à¸¡","à¸ªà¸´à¸à¸«à¸²à¸à¸¡","à¸à¸±à¸à¸¢à¸²à¸¢à¸","à¸à¸¸à¸¥à¸²à¸à¸¡","à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸","à¸à¸±à¸à¸§à¸²à¸à¸¡"]},time:{timeSeparator:":",amPm:["à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸","à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸"]}},th_TH:{date:{},time:{}},tn:{date:{dateSeparator:"-",era:["BC","AD"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},tn_ZA:{date:{},time:{}},tr:{date:{dateSeparator:".",era:["Milattan Ãnce","Milattan Sonra"],eraAbbr:["MÃ","MS"],shortDay:["Paz","Pzt","Sal","Ãar","Per","Cum","Cmt"],shortMonth:["Oca","Åub","Mar","Nis","May","Haz","Tem","AÄu","Eyl","Eki","Kas","Ara"],longDay:["Pazar","Pazartesi","SalÄ±","ÃarÅamba","PerÅembe","Cuma","Cumartesi"],longMonth:["Ocak","Åubat","Mart","Nisan","MayÄ±s","Haziran","Temmuz","AÄustos","EylÃ¼l","Ekim","KasÄ±m","AralÄ±k"]},time:{timeSeparator:":",amPm:["AM","PM"]}},tr_TR:{date:{},time:{}},uk:{date:{dateSeparator:".",era:["Ð´Ð¾ Ð½Ð°ÑÐ¾Ñ ÐµÑÐ¸","Ð½Ð°ÑÐ¾Ñ ÐµÑÐ¸"],eraAbbr:["Ð´Ð¾ Ð½.Ðµ.","Ð½.Ðµ."],shortDay:["ÐÐ´","ÐÐ½","ÐÑ","Ð¡Ñ","Ð§Ñ","ÐÑ","Ð¡Ð±"],shortMonth:["ÑÑÑ.","Ð»ÑÑ.","Ð±ÐµÑ.","ÐºÐ²ÑÑ.","ÑÑÐ°Ð².","ÑÐµÑÐ².","Ð»Ð¸Ð¿.","ÑÐµÑÐ¿.","Ð²ÐµÑ.","Ð¶Ð¾Ð²Ñ.","Ð»Ð¸ÑÑ.","Ð³ÑÑÐ´."],longDay:["ÐÐµÐ´ÑÐ»Ñ","ÐÐ¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº","ÐÑÐ²ÑÐ¾ÑÐ¾Ðº","Ð¡ÐµÑÐµÐ´Ð°","Ð§ÐµÑÐ²ÐµÑ","ÐÊ¼ÑÑÐ½Ð¸ÑÑ","Ð¡ÑÐ±Ð¾ÑÐ°"],longMonth:["ÑÑÑÐ½Ñ","Ð»ÑÑÐ¾Ð³Ð¾","Ð±ÐµÑÐµÐ·Ð½Ñ","ÐºÐ²ÑÑÐ½Ñ","ÑÑÐ°Ð²Ð½Ñ","ÑÐµÑÐ²Ð½Ñ","Ð»Ð¸Ð¿Ð½Ñ","ÑÐµÑÐ¿Ð½Ñ","Ð²ÐµÑÐµÑÐ½Ñ","Ð¶Ð¾Ð²ÑÐ½Ñ","Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´Ð°","Ð³ÑÑÐ´Ð½Ñ"]},time:{timeSeparator:":",amPm:["Ð´Ð¿","Ð¿Ð¿"]}},uk_UA:{date:{},time:{}},uz:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},uz_UZ:{date:{},time:{}},vi:{date:{dateSeparator:"/",eraAbbr:["tr. CN","sau CN"],shortDay:["CN","Th 2","Th 3","Th 4","Th 5","Th 6","Th 7"],shortMonth:["thg 1","thg 2","thg 3","thg 4","thg 5","thg 6","thg 7","thg 8","thg 9","thg 10","thg 11","thg 12"],longDay:["Chá»§ nháº­t","Thá»© hai","Thá»© ba","Thá»© tÆ°","Thá»© nÄm","Thá»© sÃ¡u","Thá»© báº£y"],longMonth:["thÃ¡ng má»t","thÃ¡ng hai","thÃ¡ng ba","thÃ¡ng tÆ°","thÃ¡ng nÄm","thÃ¡ng sÃ¡u","thÃ¡ng báº£y","thÃ¡ng tÃ¡m","thÃ¡ng chÃ­n","thÃ¡ng mÆ°á»i","thÃ¡ng mÆ°á»i má»t","thÃ¡ng mÆ°á»i hai"]},time:{timeSeparator:":",amPm:["SA","CH"]}},vi_VN:{date:{},time:{}},xh:{date:{dateSeparator:"-",era:["BC","umnyaka wokuzalwa kukaYesu"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},xh_ZA:{date:{},time:{}},zh:{date:{dateSeparator:"-",era:["å¬åå","å¬å"],eraAbbr:["å¬åå","å¬å"],shortDay:["å¨æ¥","å¨ä¸","å¨äº","å¨ä¸","å¨å","å¨äº","å¨å­"],shortMonth:["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"],longDay:["æææ¥","ææä¸","ææäº","ææä¸","ææå","ææäº","ææå­"],longMonth:["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"]},time:{timeSeparator:":",amPm:["ä¸å","ä¸å"]}},zh_CN:{date:{},time:{}},zh_HK:{date:{},time:{}},zh_MO:{date:{},time:{}},zh_SG:{date:{},time:{}},zh_TW:{date:{},time:{}},zu:{date:{dateSeparator:"-",eraAbbr:["BC","AD"],shortDay:["Son","Mso","Bil","Tha","Sin","Hla","Mgq"],shortMonth:["Jan","Feb","Mas","Apr","Mey","Jun","Jul","Aga","Sep","Okt","Nov","Dis"],longDay:["Sonto","Msombuluko","Lwesibili","Lwesithathu","uLwesine","Lwesihlanu","Mgqibelo"],longMonth:["Januwari","Februwari","Mashi","Apreli","Meyi","Juni","Julayi","Agasti","Septhemba","Okthoba","Novemba","Disemba"]},time:{timeSeparator:":",amPm:["AM","PM"]}},zu_ZA:{date:{},time:{}}};a.formatExist=function(b,c){return(b&&c&&a.DEFAULT_FORMAT_STRING[b]&&a.DEFAULT_FORMAT_STRING[b][c])};a.getDefaultDateFormat=function(b,c){return a.DEFAULT_FORMAT_STRING[b][c]};a.getShortDay=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)};a.getLongDay=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)};a.getShortMonth=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)};a.getLongMonth=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)};a.getDateSeparator=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR).toString()}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR).toString()};a.getTimeSeparator=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR)){return a.getDateResource(b,a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR).toString()}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR).toString()};a.getAmPmToken=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)){return a.getDateResource(b,a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)};a.getAbbrevEraString=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)};a.getDefaultShorDateFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_SHORTDATE)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_SHORTDATE).toString()}else{return""}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_SHORTDATE).toString()};a.getDefaultLongDateFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_LONGDATE)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_LONGDATE).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_LONGDATE)};a.getDefaultDateTimeFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_DATE_TIME)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_DATE_TIME).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_DATE_TIME).toString()};a.getDefaultTimeFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_TIME)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_TIME).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_TIME).toString()};a.getAppropriateDateFormat=function(d){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a.formatExist(e,d)){return a.getDefaultDateFormat(e,d).toString()}var c=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a.formatExist(c,d)){return a.getDefaultDateFormat(c,d).toString()}var f=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a.formatExist(f,d)){return a.getDefaultDateFormat(f,d).toString()}var b=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a.formatExist(b,d)){return a.getDefaultDateFormat(b,d).toString()}return a.getDefaultDateFormat("en",d).toString()};a.getAppropriateDateResource=function(e,b){var f=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a.resourceExist(f,e,b)){return a.getDateResource(f,e,b)}var d=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a.resourceExist(d,e,b)){return a.getDateResource(d,e,b)}var g=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a.resourceExist(g,e,b)){return a.getDateResource(g,e,b)}var c=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a.resourceExist(c,e,b)){return a.getDateResource(c,e,b)}return a.getDateResource("en",e,b)};a.resourceExist=function(b,d,c){return(b&&d&&c&&a.RESOURCE_MAP[b]&&a.RESOURCE_MAP[b][d]&&a.RESOURCE_MAP[b][d][c])};a.getDateResource=function(b,d,c){return a.RESOURCE_MAP[b][d][c]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.GlobalizationNumericUtil=function(){this.__className="sap.common.globalization.GlobalizationNumericUtil"};sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry=function(a){switch(a){case"bn":case"bn_IN":case"en_IN":case"gu":case"gu_IN":case"hi":case"hi_IN":case"kn":case"kn_IN":case"kok":case"kok_IN":case"ml":case"ml_IN":case"mr":case"mr_IN":case"pa":case"pa_IN":case"ta":case"ta_IN":case"te":case"te_IN":return true;default:return false}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.NumericFormatManager");sap.common.globalization.numericFormat.FLocalization=function(){this.__className="sap.common.globalization.numericFormat.FLocalization";this._setDisplayLocaleInfo();this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null;this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null};var a=sap.common.globalization.numericFormat.FLocalization;a._defaultLocale="en";a._DayStrings=null;a._shortDayStrings=null;a._MonthStrings=null;a._shortMonthStrings=null;a._DateTimeCodes=null;a._NumericStrings=null;a._DateTimeStrings=null;a._CurrencySymbol=null;a._SAPCurrencySymbol=null;a._SAPDateString=null;a._SAPTimeString=null;a._SAPThousandsSeparator=null;a._SAPDecimalSeparator=null;a._SAPLongDay=null;a._SAPShortDay=null;a._SAPLongMonth=null;a._SAPShortMonth=null;a._AmPms=null;a._singleton=null;sap.common.globalization.numericFormat.FLocalization.prototype.replaceNBSP=function(e){if(e){var f="";var c=160;for(var d=0;d<e.length;++d){if(e.charCodeAt(d)==c){f+=" "}else{f+=e.charAt(d)}}e=f}return e};a.getInstance=function(){if(!a._singleton){a._initStrings();a._initializePvlDateStrings();a._initSAPGlobilizationStrings();a._singleton=new sap.common.globalization.numericFormat.FLocalization();a._singleton.IMSABBREVDAYNAME1=a._shortDayStrings.en[1]}return a._singleton};a.resetInstance=function(){a._resetAllStaticVars();a._initStrings();a._initializePvlDateStrings();a._initSAPGlobilizationStrings();a._singleton=new sap.common.globalization.numericFormat.FLocalization();a._singleton.IMSABBREVDAYNAME1=a._shortDayStrings.en[1]};var b={monthStrings:"_MonthStrings",shortMonthStrings:"_shortMonthStrings",dayStrings:"_DayStrings",shortDayStrings:"_shortDayStrings",dateTimeCodes:"_DateTimeCodes",numericStrings:"_NumericStrings",dateTimeStrings:"_DateTimeStrings",currencySymbol:"_CurrencySymbol",amPms:"_AmPms"};a.prototype._setDisplayLocaleInfo=function(){this.IMDateSeparator=a._DateTimeStrings.en[1];this.IMDayCode=a._DateTimeCodes.en[5];this.IMDecimalSeparator=a._NumericStrings.en[1];this.IMGeneralFormatName="General";this.IMHourCode=a._DateTimeCodes.en[3];this.IMMinuteCode=a._DateTimeCodes.en[1];this.IMMonthCode=a._DateTimeCodes.en[4];this.IMSABBREVDAYNAME1=a._shortDayStrings.en[1];this.IMSABBREVDAYNAME2=a._shortDayStrings.en[2];this.IMSABBREVDAYNAME3=a._shortDayStrings.en[3];this.IMSABBREVDAYNAME4=a._shortDayStrings.en[4];this.IMSABBREVDAYNAME5=a._shortDayStrings.en[5];this.IMSABBREVDAYNAME6=a._shortDayStrings.en[6];this.IMSABBREVDAYNAME7=a._shortDayStrings.en[7];this.IMSABBREVMONTHNAME1=a._shortMonthStrings.en[1];this.IMSABBREVMONTHNAME10=a._shortMonthStrings.en[10];this.IMSABBREVMONTHNAME11=a._shortMonthStrings.en[11];this.IMSABBREVMONTHNAME12=a._shortMonthStrings.en[12];this.IMSABBREVMONTHNAME2=a._shortMonthStrings.en[2];this.IMSABBREVMONTHNAME3=a._shortMonthStrings.en[3];this.IMSABBREVMONTHNAME4=a._shortMonthStrings.en[4];this.IMSABBREVMONTHNAME5=a._shortMonthStrings.en[5];this.IMSABBREVMONTHNAME6=a._shortMonthStrings.en[6];this.IMSABBREVMONTHNAME7=a._shortMonthStrings.en[7];this.IMSABBREVMONTHNAME8=a._shortMonthStrings.en[8];this.IMSABBREVMONTHNAME9=a._shortMonthStrings.en[9];this.IMSDAYNAME1=a._DayStrings.en[1];this.IMSDAYNAME2=a._DayStrings.en[2];this.IMSDAYNAME3=a._DayStrings.en[3];this.IMSDAYNAME4=a._DayStrings.en[4];this.IMSDAYNAME5=a._DayStrings.en[5];this.IMSDAYNAME6=a._DayStrings.en[6];this.IMSDAYNAME7=a._DayStrings.en[7];this.IMSMONTHNAME1=a._MonthStrings.en[1];this.IMSMONTHNAME10=a._MonthStrings.en[10];this.IMSMONTHNAME11=a._MonthStrings.en[11];this.IMSMONTHNAME12=a._MonthStrings.en[12];this.IMSMONTHNAME2=a._MonthStrings.en[2];this.IMSMONTHNAME3=a._MonthStrings.en[3];this.IMSMONTHNAME4=a._MonthStrings.en[4];this.IMSMONTHNAME5=a._MonthStrings.en[5];this.IMSMONTHNAME6=a._MonthStrings.en[6];this.IMSMONTHNAME7=a._MonthStrings.en[7];this.IMSMONTHNAME8=a._MonthStrings.en[8];this.IMSMONTHNAME9=a._MonthStrings.en[9];this.IMSecondCode=a._DateTimeCodes.en[2];this.IMTimeSeparator=a._DateTimeStrings.en[2];this.IMYearCode=a._DateTimeCodes.en[6];this.IMCurrencySymbol=a._CurrencySymbol.en[1];this.SAPDateSeparator=a._SAPDateString;this.SAPTimeSeparator=a._SAPTimeString;this.SAPCurrencySymbol=a._SAPCurrencySymbol;this.SAPDecimalSeparator=a._SAPDecimalSeparator;this.SAPThousandsSeparator=a._SAPThousandsSeparator;this.SAPLongDay=a._SAPLongDay;this.SAPShortDay=a._SAPShortDay;this.SAPLongMonth=a._SAPLongMonth;this.SAPShortMonth=a._SAPShortMonth;this.IMAMTOKEN=a._AmPms.en[1];this.IMPMTOKEN=a._AmPms.en[2];this._IMThousandsSeparator=this.replaceNBSP(a._NumericStrings.en[2])};a.prototype.setCustomizedLocaleInfo=function(e){if(e){var d;for(d in b){if(e.hasOwnProperty(d)){var g=b[d];this._setCustomizedLocaleInfoByType(g,e[d])}}}else{var c=sap.common.globalization.GlobalizationDateConstant;var f=sap.common.globalization.GlobalizationNumericConstant;this._setCustomizedLocaleInfoByType(b.dayStrings,c.getLongDay());this._setCustomizedLocaleInfoByType(b.shortDayStrings,c.getShortDay());this._setCustomizedLocaleInfoByType(b.monthStrings,c.getLongMonth());this._setCustomizedLocaleInfoByType(b.shortMonthStrings,c.getShortMonth());this._setCustomizedLocaleInfoByType(b.amPms,c.getAmPmToken());this._setCustomizedLocaleInfoByType(b.dateTimeStrings,[c.getDateSeparator(),c.getTimeSeparator()]);this._setCustomizedLocaleInfoByType(b.numericStrings,[f.getDisplayDecimalSeparator(),f.getDisplayThousandSeparator()]);this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null;this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null;a._initializePvlDayStrings()}this._setDisplayLocaleInfo()};a.prototype._setCustomizedLocaleInfoByType=function(e,f){if(f&&f.length>0){var c;for(var d=0;d<f.length;d++){c=d+1;a[e]["en"][c]=f[d]}}};a._initStrings=function(){a._DayStrings={en:{1:"Monday",2:"Tuesday",3:"Wednesday",4:"Thursday",5:"Friday",6:"Saturday",7:"Sunday"}};a._shortDayStrings={en:{1:"Mon",2:"Tue",3:"Wed",4:"Thu",5:"Fri",6:"Sat",7:"Sun"}};a._MonthStrings={en:{1:"January",2:"February",3:"March",4:"April",5:"May",6:"June",7:"July",8:"August",9:"September",10:"October",11:"November",12:"December"}};a._shortMonthStrings={en:{1:"Jan",2:"Feb",3:"Mar",4:"Apr",5:"May",6:"Jun",7:"Jul",8:"Aug",9:"Sep",10:"Oct",11:"Nov",12:"Dec"}};a._DateTimeCodes={en:{1:"m",2:"s",3:"h",4:"M",5:"D",6:"Y"}};a._NumericStrings={en:{1:".",2:","}};a._DateTimeStrings={en:{1:"/",2:":"}};a._CurrencySymbol={en:{1:"$",2:"$"}};a._AmPms={en:{1:"AM",2:"PM"}}};a._initSAPGlobilizationStrings=function(){var d=sap.common.globalization.NumericFormatManager;var e=d.SAP_PARAMETERS["BICSWS_DECIMAL"];e=e?e:d.SAP_PARAMETERS["SAP_decimal"];var l=d.SAP_PARAMETERS["BICSWS_THOUSANDSEPARATOR"];l=l?l:d.SAP_PARAMETERS["SAP_thousandSeparator"];var f=d.SAP_PARAMETERS["BICSWS_MONTHSLONG"];f=f?f:d.SAP_PARAMETERS["SAP_monthsLong"];var g=d.SAP_PARAMETERS["BICSWS_MONTHSSHORT"];g=g?g:d.SAP_PARAMETERS["SAP_monthsShort"];var c=d.SAP_PARAMETERS["BICSWS_DAYSLONG"];c=c?c:d.SAP_PARAMETERS["SAP_daysLong"];var m=d.SAP_PARAMETERS["BICSWS_DAYSSHORT"];m=m?m:d.SAP_PARAMETERS["SAP_daysShort"];var k=d.SAP_PARAMETERS["BICSWS_DATESEPARATOR"];k=k?k:d.SAP_PARAMETERS["SAP_dateSeparator"];var j=d.SAP_PARAMETERS["BICSWS_TIMESEPARATOR"];j=j?j:d.SAP_PARAMETERS["SAP_timeSeparator"];var h=d.SAP_PARAMETERS["SAP_s_g_n_FLocalization._CurrencySymbol"];var i;if(c){i=c.split(",");a._SAPLongDay=i;a._DayStrings.en[1]=i[0];a._DayStrings.en[2]=i[1];a._DayStrings.en[3]=i[2];a._DayStrings.en[4]=i[3];a._DayStrings.en[5]=i[4];a._DayStrings.en[6]=i[5];a._DayStrings.en[7]=i[6]}if(m){i=m.split(",");a._SAPShortDay=i;a._shortDayStrings.en[1]=i[0];a._shortDayStrings.en[2]=i[1];a._shortDayStrings.en[3]=i[2];a._shortDayStrings.en[4]=i[3];a._shortDayStrings.en[5]=i[4];a._shortDayStrings.en[6]=i[5];a._shortDayStrings.en[7]=i[6]}if(f){i=f.split(",");a._SAPLongMonth=i;a._MonthStrings.en[1]=i[0];a._MonthStrings.en[2]=i[1];a._MonthStrings.en[3]=i[2];a._MonthStrings.en[4]=i[3];a._MonthStrings.en[5]=i[4];a._MonthStrings.en[6]=i[5];a._MonthStrings.en[7]=i[6];a._MonthStrings.en[8]=i[7];a._MonthStrings.en[9]=i[8];a._MonthStrings.en[10]=i[9];a._MonthStrings.en[11]=i[10];a._MonthStrings.en[12]=i[11]}if(g){i=g.split(",");a._SAPShortMonth=i;a._shortMonthStrings.en[1]=i[0];a._shortMonthStrings.en[2]=i[1];a._shortMonthStrings.en[3]=i[2];a._shortMonthStrings.en[4]=i[3];a._shortMonthStrings.en[5]=i[4];a._shortMonthStrings.en[6]=i[5];a._shortMonthStrings.en[7]=i[6];a._shortMonthStrings.en[8]=i[7];a._shortMonthStrings.en[9]=i[8];a._shortMonthStrings.en[10]=i[9];a._shortMonthStrings.en[11]=i[10];a._shortMonthStrings.en[12]=i[11]}if(e){a._SAPDecimalSeparator=e}if(l){a._SAPThousandsSeparator=l}if(k){a._SAPDateString=k}if(j){a._SAPTimeString=j}if(h){a._SAPCurrencySymbol=h}};a.prototype.IMThousandsSeparator=function(c){if(arguments.length>=1){this._IMThousandsSeparator=this.replaceNBSP(c);return this}else{return this._IMThousandsSeparator}};a.prototype.getDateParseLocaleInfo=function(){if(!this._dateParseLocaleInfo){this._dateParseLocaleInfo=new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl();this._dateParseLocaleInfo.IMDateSeparator(this.IMDateSeparator);this._dateParseLocaleInfo.IMTimeSeparator(this.IMTimeSeparator)}return this._dateParseLocaleInfo};a.prototype.getDateDisplayLocaleInfo=function(){if(!this._dateDisplayLocaleInfo){this._dateDisplayLocaleInfo=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();this._dateDisplayLocaleInfo.IMDateSeparator(this.SAPDateSeparator);this._dateDisplayLocaleInfo.IMSDAYNAME1(this.IMSDAYNAME1);this._dateDisplayLocaleInfo.IMSDAYNAME2(this.IMSDAYNAME2);this._dateDisplayLocaleInfo.IMSDAYNAME3(this.IMSDAYNAME3);this._dateDisplayLocaleInfo.IMSDAYNAME4(this.IMSDAYNAME4);this._dateDisplayLocaleInfo.IMSDAYNAME5(this.IMSDAYNAME5);this._dateDisplayLocaleInfo.IMSDAYNAME6(this.IMSDAYNAME6);this._dateDisplayLocaleInfo.IMSDAYNAME7(this.IMSDAYNAME7);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME1(this.IMSABBREVDAYNAME1);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME2(this.IMSABBREVDAYNAME2);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME3(this.IMSABBREVDAYNAME3);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME4(this.IMSABBREVDAYNAME4);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME5(this.IMSABBREVDAYNAME5);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME6(this.IMSABBREVDAYNAME6);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME7(this.IMSABBREVDAYNAME7);this._dateDisplayLocaleInfo.IMSMONTHNAME1(this.IMSMONTHNAME1);this._dateDisplayLocaleInfo.IMSMONTHNAME2(this.IMSMONTHNAME2);this._dateDisplayLocaleInfo.IMSMONTHNAME3(this.IMSMONTHNAME3);this._dateDisplayLocaleInfo.IMSMONTHNAME4(this.IMSMONTHNAME4);this._dateDisplayLocaleInfo.IMSMONTHNAME5(this.IMSMONTHNAME5);this._dateDisplayLocaleInfo.IMSMONTHNAME6(this.IMSMONTHNAME6);this._dateDisplayLocaleInfo.IMSMONTHNAME7(this.IMSMONTHNAME7);this._dateDisplayLocaleInfo.IMSMONTHNAME8(this.IMSMONTHNAME8);this._dateDisplayLocaleInfo.IMSMONTHNAME9(this.IMSMONTHNAME9);this._dateDisplayLocaleInfo.IMSMONTHNAME10(this.IMSMONTHNAME10);this._dateDisplayLocaleInfo.IMSMONTHNAME11(this.IMSMONTHNAME11);this._dateDisplayLocaleInfo.IMSMONTHNAME12(this.IMSMONTHNAME12);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME1(this.IMSABBREVMONTHNAME1);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME2(this.IMSABBREVMONTHNAME2);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME3(this.IMSABBREVMONTHNAME3);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME4(this.IMSABBREVMONTHNAME4);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME5(this.IMSABBREVMONTHNAME5);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME6(this.IMSABBREVMONTHNAME6);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME7(this.IMSABBREVMONTHNAME7);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME8(this.IMSABBREVMONTHNAME8);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME9(this.IMSABBREVMONTHNAME9);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME10(this.IMSABBREVMONTHNAME10);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME11(this.IMSABBREVMONTHNAME11);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME12(this.IMSABBREVMONTHNAME12);this._dateDisplayLocaleInfo.IMTimeSeparator(this.SAPTimeSeparator);this._dateDisplayLocaleInfo.IMAMTOKEN(this.IMAMTOKEN);this._dateDisplayLocaleInfo.IMPMTOKEN(this.IMPMTOKEN)}return this._dateDisplayLocaleInfo};a.prototype.numericParseLocaleInfo=function(){if(!this._numericParseLocaleInfo){this._numericParseLocaleInfo=new sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl(this._IMThousandsSeparator,this.IMDecimalSeparator,this.IMCurrencySymbol)}return this._numericParseLocaleInfo};a.prototype.numericDisplayLocaleInfo=function(){if(!this._numericDisplayLocaleInfo){var c=(this.SAPThousandsSeparator?this.SAPThousandsSeparator:this._IMThousandsSeparator);var e=(this.SAPDecimalSeparator?this.SAPDecimalSeparator:this.IMDecimalSeparator);var d=(this.SAPCurrencySymbol?this.SAPCurrencySymbol:this.IMCurrencySymbol);this._numericDisplayLocaleInfo=new sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl(c,e,d)}return this._numericDisplayLocaleInfo};a._initializePvlDayStrings=function(){var d=sap.common.globalization.GlobalizationDateConstant.getLongDay();if(d){a._DayStrings.en[1]=d[1];a._DayStrings.en[2]=d[2];a._DayStrings.en[3]=d[3];a._DayStrings.en[4]=d[4];a._DayStrings.en[5]=d[5];a._DayStrings.en[6]=d[6];a._DayStrings.en[7]=d[0]}var c=sap.common.globalization.GlobalizationDateConstant.getShortDay();if(c){a._shortDayStrings.en[1]=c[1];a._shortDayStrings.en[2]=c[2];a._shortDayStrings.en[3]=c[3];a._shortDayStrings.en[4]=c[4];a._shortDayStrings.en[5]=c[5];a._shortDayStrings.en[6]=c[6];a._shortDayStrings.en[7]=c[0]}};a._initializePvlDateStrings=function(){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(e&&!sap.common.globalization.utils.StringUtil.isBlankString(e)){a._initializePvlDayStrings();var f=sap.common.globalization.GlobalizationDateConstant.getLongMonth();if(f){a._MonthStrings.en[1]=f[0];a._MonthStrings.en[2]=f[1];a._MonthStrings.en[3]=f[2];a._MonthStrings.en[4]=f[3];a._MonthStrings.en[5]=f[4];a._MonthStrings.en[6]=f[5];a._MonthStrings.en[7]=f[6];a._MonthStrings.en[8]=f[7];a._MonthStrings.en[9]=f[8];a._MonthStrings.en[10]=f[9];a._MonthStrings.en[11]=f[10];a._MonthStrings.en[12]=f[11]}var d=sap.common.globalization.GlobalizationDateConstant.getShortMonth();if(d){a._shortMonthStrings.en[1]=d[0];a._shortMonthStrings.en[2]=d[1];a._shortMonthStrings.en[3]=d[2];a._shortMonthStrings.en[4]=d[3];a._shortMonthStrings.en[5]=d[4];a._shortMonthStrings.en[6]=d[5];a._shortMonthStrings.en[7]=d[6];a._shortMonthStrings.en[8]=d[7];a._shortMonthStrings.en[9]=d[8];a._shortMonthStrings.en[10]=d[9];a._shortMonthStrings.en[11]=d[10];a._shortMonthStrings.en[12]=d[11]}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c){a._AmPms.en[1]=c[0];a._AmPms.en[2]=c[1]}}};a._resetAllStaticVars=function(){a._DayStrings=null;a._shortDayStrings=null;a._MonthStrings=null;a._shortMonthStrings=null;a._DateTimeCodes=null;a._NumericStrings=null;a._DateTimeStrings=null;a._CurrencySymbol=null;a._SAPCurrencySymbol=null;a._SAPDateString=null;a._SAPTimeString=null;a._SAPThousandsSeparator=null;a._SAPDecimalSeparator=null;a._SAPLongDay=null;a._SAPShortDay=null;a._SAPLongMonth=null;a._SAPShortMonth=null;a._AmPms=null}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.BaseUtils");var b=sap.common.globalization.utils.BaseUtils;var a=0;sap.common.globalization.utils.BaseUtils.genUID=function(){if(!a){a=0}return"xgen_"+(a++)};var c={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object"};sap.common.globalization.utils.BaseUtils.applyProperties=function(g,f){if(f!=null){var d=f.length;for(var e=0;e<d;e++){var h=f[e];if(h&&h!=null){this.applyObjectProperty(g,h.name,h.value)}}}};sap.common.globalization.utils.BaseUtils.applyObjectProperty=function(g,f,d){try{if(b.isFunction(g[f])){g[f](d)}else{if(g.hasOwnProperty(f)){g[f]=d}}}catch(h){if(console){console.log(h)}}};sap.common.globalization.utils.BaseUtils.getObjectProperty=function(f,d){try{if(b.isFunction(f[d])){return f[d]()}else{if(f.hasOwnProperty(d)){return f[d]}}}catch(g){if(console){console.log(g)}}};sap.common.globalization.utils.BaseUtils.type=function(d){return d==null?String(d):c[Object.prototype.toString.call(d)]||"object"};sap.common.globalization.utils.BaseUtils.isFunction=function(d){return b.type(d)==="function"};sap.common.globalization.utils.BaseUtils.isBoolean=function(d){return b.type(d)==="boolean"};sap.common.globalization.utils.BaseUtils.isString=function(d){return b.type(d)==="string"};sap.common.globalization.utils.BaseUtils.isArray=function(d){return b.type(d)==="array"};sap.common.globalization.utils.BaseUtils.isNumber=function(d){return b.type(d)==="number"};sap.common.globalization.utils.BaseUtils.isRegExp=function(d){return b.type(d)==="regexp"};sap.common.globalization.utils.BaseUtils.sortArrayOn=function(d,f,e){if(b.isArray(d)&&b.isString(f)){d.sort(function(h,g){return e?(h[f]<g[f])-(h[f]>g[f]):(h[f]>g[f])-(h[f]<g[f])})}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.UnitAbbreviations");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.UnitAbbreviations=function(){this.__className="sap.common.globalization.utils.UnitAbbreviations";this.thousands="K";this.millions="M";this.billions="B";this.trillions="T"};sap.common.globalization.utils.UnitAbbreviations.prototype.toObject=function(){return{thousands:this.thousands,millions:this.millions,billions:this.billions,trillions:this.trillions}};sap.common.globalization.utils.UnitAbbreviations.prototype.copyFromObject=function(a){if(!a){a={thousands:"K",millions:"M",billions:"B",trillions:"T"}}var b=false;for(attr in ["thousands","millions","billions","trillions"]){if(sap.common.globalization.utils.BaseUtils.isString(a[attr])&&a[attr]!=this[attr]){this[attr]=a[attr];b=true}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.BooleanUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.BooleanUtil.isBooleanValue=function(a){if(sap.common.globalization.utils.BaseUtils.isBoolean(a)){return true}else{if(sap.common.globalization.utils.BaseUtils.isString(a)){return String(a).toLowerCase()=="true"||String(a).toLowerCase()=="false"}else{return false}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.ColorUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.ColorUtil.convertToHexString=function(c){if(c==null||!sap.common.globalization.utils.BaseUtils.isNumber(c)||isNaN(c)){return null}var h="#",b=["r","g","b"],d=sap.common.globalization.utils.ColorUtil.convertToRGBObject(c);for(var f=0,a=b.length;f<a;f++){var g=b[f],e=d[g].toString(16);if(e.length==1){h+="0"}h+=e}return h};sap.common.globalization.utils.ColorUtil.convertToRGBObject=function(a){if(a==null||!sap.common.globalization.utils.BaseUtils.isNumber(a)||isNaN(a)){return null}return{r:(a&16711680)>>16,g:(a&65280)>>8,b:a&255}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.DataFormatUtils");sap.common.globalization.require("sap.common.globalization.utils.ColorUtil");sap.common.globalization.utils.DataFormatUtils.decorateColorHTML=function(b,a){if(!isNaN(a)){return'<FONT COLOR="'+sap.common.globalization.utils.ColorUtil.convertToHexString(a)+'"/>'+b+"</FONT>"}return b};sap.common.globalization.utils.DataFormatUtils.DataFormatUtils=function(){throw new Error("Should not initialize DataFormatUtils.")}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.NumberUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.require("sap.common.globalization.utils.UnitAbbreviations");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.utils.NumberUtil.checkEquality=function(d,c,a){a=a||-5;if(d==c){return true}var b=Math.pow(10,a-1);var e=d-c;return e<b&&e>-b};sap.common.globalization.utils.NumberUtil.lessThanEqual=function(b,c,a){a=a||-5;return((b<c)||sap.common.globalization.utils.NumberUtil.checkEquality(b,c,a))};sap.common.globalization.utils.NumberUtil.greaterThanEqual=function(b,c,a){a=a||-5;return((b>c)||sap.common.globalization.utils.NumberUtil.checkEquality(b,c,a))};sap.common.globalization.utils.NumberUtil.getPrecision=function(d){var c=String(d);var e=c.length;var b=c.indexOf(".");var a=e-(b+1);return a};sap.common.globalization.utils.NumberUtil.roundToPrecision=function(e,c){var f=e.toString(10);var d=f.split(".");var a=(d&&d.length>1?d[1].length:0);if(a<=c){return e}var b=Math.pow(10,c);return Math.round(e*b)/b};sap.common.globalization.utils.NumberUtil.roundToNearest=function(b,a,c){a=a||1;c=c||0;return Math.round((b+c)/a)*a-c};sap.common.globalization.utils.NumberUtil.abbreviate=function(f,g,c){var h=1000;var d=1000000;var b=1000000000;var a=1000000000000;g=g||null;c=c||1;if(!g){g=new sap.common.globalization.utils.UnitAbbreviations()}var i="";var e=Math.abs(f);if(e>=a){f/=a;i=g.trillions}else{if(e>=b){f/=b;i=g.billions}else{if(e>=d){f/=d;i=g.millions}else{if(e>=h){f/=h;i=g.thousands}}}}f=sap.common.globalization.utils.NumberUtil.roundToPrecision(f,c);return String(f)+i};sap.common.globalization.utils.NumberUtil.parseNumber=function(c,b){var a=b;if(c!=null){var d=Number(c);if(isNaN(d)==false){a=d}}return a};sap.common.globalization.utils.NumberUtil.isNumericValue=function(a){if(sap.common.globalization.utils.BaseUtils.isNumber(a)&&!isNaN(a)){return true}else{if(sap.common.globalization.utils.BaseUtils.isString(a)){return sap.common.globalization.utils.StringUtil.isNumber(String(a))}else{return false}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.StringUtil.escapeEntities=function(a){if(a){a=a.split("&").join("&amp;");a=a.split("<").join("&lt;");a=a.split(">").join("&gt;");a=a.split('"').join("&quot;");a=a.split("'").join("&apos;")}return a};sap.common.globalization.utils.StringUtil.trim=function(a){return a.replace(/^\s*/,"").replace(/\s*$/,"")};sap.common.globalization.utils.StringUtil.isBlankString=function(a){if(a==null||!(sap.common.globalization.utils.BaseUtils.isString(a))){return false}return sap.common.globalization.utils.StringUtil.trim(a)===""};sap.common.globalization.utils.StringUtil.isNumber=function(a){if(isNaN(Number(a))){return false}else{if(sap.common.globalization.utils.StringUtil.isBlankString(a)){return false}else{return true}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.");sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory";this._parseLocaleInfo=null;this._displayLocaleInfo=null};var a=sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory;a.prototype.getDateParseLocaleInfo=function(){if(!this._parseLocaleInfo){this._parseLocaleInfo=this.getPredefinedDateParseLocaleString()}return this._parseLocaleInfo};a.prototype.getDateDisplayLocaleInfo=function(){if(!this._displayLocaleInfo){this._displayLocaleInfo=this.getPredefinedDateDisplayLocaleString();this.applySAPDateTokensAndSeparators(this._displayLocaleInfo)}return this._displayLocaleInfo};a.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultLongDateFormat()};a.prototype.createFDate=function(){return new sap.common.globalization.numericFormat.FDefaultDate(this.getDateParseLocaleInfo(),this.getDateDisplayLocaleInfo())};a.prototype.getPredefinedDateParseLocaleString=function(){return new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl()};a.prototype.getPredefinedDateDisplayLocaleString=function(){var e=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();var f=sap.common.globalization.GlobalizationDateConstant.getLongDay();if(f){e.IMSDAYNAME1(f[1]);e.IMSDAYNAME2(f[2]);e.IMSDAYNAME3(f[3]);e.IMSDAYNAME4(f[4]);e.IMSDAYNAME5(f[5]);e.IMSDAYNAME6(f[6]);e.IMSDAYNAME7(f[0])}var c=sap.common.globalization.GlobalizationDateConstant.getShortDay();if(c){e.IMSABBREVDAYNAME1(c[1]);e.IMSABBREVDAYNAME2(c[2]);e.IMSABBREVDAYNAME3(c[3]);e.IMSABBREVDAYNAME4(c[4]);e.IMSABBREVDAYNAME5(c[5]);e.IMSABBREVDAYNAME6(c[6]);e.IMSABBREVDAYNAME7(c[0])}var g=sap.common.globalization.GlobalizationDateConstant.getLongMonth();if(g){e.IMSMONTHNAME1(g[0]);e.IMSMONTHNAME2(g[1]);e.IMSMONTHNAME3(g[2]);e.IMSMONTHNAME4(g[3]);e.IMSMONTHNAME5(g[4]);e.IMSMONTHNAME6(g[5]);e.IMSMONTHNAME7(g[6]);e.IMSMONTHNAME8(g[7]);e.IMSMONTHNAME9(g[8]);e.IMSMONTHNAME10(g[9]);e.IMSMONTHNAME11(g[10]);e.IMSMONTHNAME12(g[11])}var d=sap.common.globalization.GlobalizationDateConstant.getShortMonth();if(d){e.IMSABBREVMONTHNAME1(d[0]);e.IMSABBREVMONTHNAME2(d[1]);e.IMSABBREVMONTHNAME3(d[2]);e.IMSABBREVMONTHNAME4(d[3]);e.IMSABBREVMONTHNAME5(d[4]);e.IMSABBREVMONTHNAME6(d[5]);e.IMSABBREVMONTHNAME7(d[6]);e.IMSABBREVMONTHNAME8(d[7]);e.IMSABBREVMONTHNAME9(d[8]);e.IMSABBREVMONTHNAME10(d[9]);e.IMSABBREVMONTHNAME11(d[10]);e.IMSABBREVMONTHNAME12(d[11])}var b=sap.common.globalization.GlobalizationDateConstant.getAbbrevEraString();if(b&&b[1]){e.IMEraToken(b[1])}return e};a.prototype.applySAPDateTokensAndSeparators=function(c){var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(b.SAPShortDay){c.IMSABBREVDAYNAME1(b.SAPShortDay[0]);c.IMSABBREVDAYNAME2(b.SAPShortDay[1]);c.IMSABBREVDAYNAME3(b.SAPShortDay[2]);c.IMSABBREVDAYNAME4(b.SAPShortDay[3]);c.IMSABBREVDAYNAME5(b.SAPShortDay[4]);c.IMSABBREVDAYNAME6(b.SAPShortDay[5]);c.IMSABBREVDAYNAME7(b.SAPShortDay[6])}if(b.SAPLongDay){c.IMSDAYNAME1(b.SAPLongDay[0]);c.IMSDAYNAME2(b.SAPLongDay[1]);c.IMSDAYNAME3(b.SAPLongDay[2]);c.IMSDAYNAME4(b.SAPLongDay[3]);c.IMSDAYNAME5(b.SAPLongDay[4]);c.IMSDAYNAME6(b.SAPLongDay[5]);c.IMSDAYNAME7(b.SAPLongDay[6])}if(b.SAPShortMonth){c.IMSABBREVMONTHNAME1(b.SAPShortMonth[0]);c.IMSABBREVMONTHNAME2(b.SAPShortMonth[1]);c.IMSABBREVMONTHNAME3(b.SAPShortMonth[2]);c.IMSABBREVMONTHNAME4(b.SAPShortMonth[3]);c.IMSABBREVMONTHNAME5(b.SAPShortMonth[4]);c.IMSABBREVMONTHNAME6(b.SAPShortMonth[5]);c.IMSABBREVMONTHNAME7(b.SAPShortMonth[6]);c.IMSABBREVMONTHNAME8(b.SAPShortMonth[7]);c.IMSABBREVMONTHNAME9(b.SAPShortMonth[8]);c.IMSABBREVMONTHNAME10(b.SAPShortMonth[9]);c.IMSABBREVMONTHNAME11(b.SAPShortMonth[10]);c.IMSABBREVMONTHNAME12(b.SAPShortMonth[11])}if(b.SAPLongMonth){c.IMSMONTHNAME1(b.SAPLongMonth[0]);c.IMSMONTHNAME2(b.SAPLongMonth[1]);c.IMSMONTHNAME3(b.SAPLongMonth[2]);c.IMSMONTHNAME4(b.SAPLongMonth[3]);c.IMSMONTHNAME5(b.SAPLongMonth[4]);c.IMSMONTHNAME6(b.SAPLongMonth[5]);c.IMSMONTHNAME7(b.SAPLongMonth[6]);c.IMSMONTHNAME8(b.SAPLongMonth[7]);c.IMSMONTHNAME9(b.SAPLongMonth[8]);c.IMSMONTHNAME10(b.SAPLongMonth[9]);c.IMSMONTHNAME11(b.SAPLongMonth[10]);c.IMSMONTHNAME12(b.SAPLongMonth[11])}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultDateTimeFormatLocaleFactory=function(){a.DefaultDateTimeFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory"};a.DefaultDateTimeFormatLocaleFactory=sap.common.globalization.extend(a.DefaultDateTimeFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultDateTimeFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultDateTimeFormat()};a.DefaultDateTimeFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){a.DefaultDateTimeFormatLocaleFactory.superclass.applySAPDateTokensAndSeparators(c);var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPTimeSeparator){c.IMTimeSeparator(b.SAPTimeSeparator)}};a.DefaultDateTimeFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var c=a.DefaultDateTimeFormatLocaleFactory.superclass.getPredefinedDateParseLocaleString();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&c){c.IMTimeSeparator(b)}return c};a.DefaultDateTimeFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var d=a.DefaultDateTimeFormatLocaleFactory.superclass.getPredefinedDateDisplayLocaleString();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&d){d.IMTimeSeparator(b)}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c&&d){d.IMAMTOKEN(c[0]);d.IMPMTOKEN(c[1])}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultShortDateFormatLocaleFactory=function(){a.DefaultShortDateFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory"};a.DefaultShortDateFormatLocaleFactory=sap.common.globalization.extend(a.DefaultShortDateFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultShortDateFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultShorDateFormat()};a.DefaultShortDateFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){a.DefaultShortDateFormatLocaleFactory.superclass.applySAPDateTokensAndSeparators(c);var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPDateSeparator){c.IMDateSeparator(b.SAPDateSeparator)}};a.DefaultShortDateFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var b=a.DefaultShortDateFormatLocaleFactory.superclass.getPredefinedDateParseLocaleString();var c=sap.common.globalization.GlobalizationDateConstant.getDateSeparator();if(c&&b){b.IMDateSeparator(c)}return b};a.DefaultShortDateFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var b=a.DefaultShortDateFormatLocaleFactory.superclass.getPredefinedDateDisplayLocaleString();var c=sap.common.globalization.GlobalizationDateConstant.getDateSeparator();if(c&&b){b.IMDateSeparator(c)}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo=function(){this.__className="sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo";this._trueString="";this._falseString=""};sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo.prototype.trueString=function(a){if(arguments.length>=1){this._trueString=a;return this}else{return this._trueString}};sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo.prototype.falseString=function(a){if(arguments.length>=1){this._falseString=a;return this}else{return this._falseString}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateForPVL");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");var a=sap.common.globalization.defaultFormat;a.CustomDateFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory";this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null};a.CustomDateFormatLocaleFactory._instance=null;a.CustomDateFormatLocaleFactory.getInstance=function(){if(!a.CustomDateFormatLocaleFactory._instance){a.CustomDateFormatLocaleFactory._instance=new a.CustomDateFormatLocaleFactory()}return a.CustomDateFormatLocaleFactory._instance};a.CustomDateFormatLocaleFactory.prototype.getDateParseLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().getDateParseLocaleInfo()};a.CustomDateFormatLocaleFactory.prototype.getDateDisplayLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().getDateDisplayLocaleInfo()};a.CustomDateFormatLocaleFactory.prototype.createFDate=function(){var b=sap.common.globalization.GlobalizationPreference.getInstance().pvl()&&!sap.common.globalization.utils.StringUtil.isBlankString(sap.common.globalization.GlobalizationPreference.getInstance().pvl());if(b){return new sap.common.globalization.numericFormat.FDateForPVL(this.getDateParseLocaleInfo(),this.getDateDisplayLocaleInfo())}else{return new sap.common.globalization.numericFormat.FDate(null,this.getDateDisplayLocaleInfo())}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory"};var a=sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory;a._instance=null;a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory()}return a._instance};a.prototype.getNumericParseLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().numericParseLocaleInfo()};a.prototype.getNumericDisplayLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().numericDisplayLocaleInfo()};a.prototype.createFNumber=function(){return new sap.common.globalization.numericFormat.FNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo())}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl=function(){this.__className="sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl";this._IMDateSeparator=null;this._IMSMONTHNAME1=null;this._IMSMONTHNAME2=null;this._IMSMONTHNAME3=null;this._IMSMONTHNAME4=null;this._IMSMONTHNAME5=null;this._IMSMONTHNAME6=null;this._IMSMONTHNAME7=null;this._IMSMONTHNAME8=null;this._IMSMONTHNAME9=null;this._IMSMONTHNAME10=null;this._IMSMONTHNAME11=null;this._IMSMONTHNAME12=null;this._IMSABBREVMONTHNAME1=null;this._IMSABBREVMONTHNAME2=null;this._IMSABBREVMONTHNAME3=null;this._IMSABBREVMONTHNAME4=null;this._IMSABBREVMONTHNAME5=null;this._IMSABBREVMONTHNAME6=null;this._IMSABBREVMONTHNAME7=null;this._IMSABBREVMONTHNAME8=null;this._IMSABBREVMONTHNAME9=null;this._IMSABBREVMONTHNAME10=null;this._IMSABBREVMONTHNAME11=null;this._IMSABBREVMONTHNAME12=null;this._IMSDAYNAME1=null;this._IMSDAYNAME2=null;this._IMSDAYNAME3=null;this._IMSDAYNAME4=null;this._IMSDAYNAME5=null;this._IMSDAYNAME6=null;this._IMSDAYNAME7=null;this._IMSABBREVDAYNAME1=null;this._IMSABBREVDAYNAME2=null;this._IMSABBREVDAYNAME3=null;this._IMSABBREVDAYNAME4=null;this._IMSABBREVDAYNAME5=null;this._IMSABBREVDAYNAME6=null;this._IMSABBREVDAYNAME7=null;this._IMTimeSeparator=null;this._IMAMToken=null;this._IMPMToken=null;this._IMEraToken=null};var a=sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl;a.prototype.IMDateSeparator=function(b){if(arguments.length>=1){this._IMDateSeparator=b}else{return this._IMDateSeparator}};a.prototype.IMSMONTHNAME1=function(b){if(arguments.length>=1){this._IMSMONTHNAME1=b}else{return this._IMSMONTHNAME1}};a.prototype.IMSMONTHNAME2=function(b){if(arguments.length>=1){this._IMSMONTHNAME2=b}else{return this._IMSMONTHNAME2}};a.prototype.IMSMONTHNAME3=function(b){if(arguments.length>=1){this._IMSMONTHNAME3=b}else{return this._IMSMONTHNAME3}};a.prototype.IMSMONTHNAME4=function(b){if(arguments.length>=1){this._IMSMONTHNAME4=b}else{return this._IMSMONTHNAME4}};a.prototype.IMSMONTHNAME5=function(b){if(arguments.length>=1){this._IMSMONTHNAME5=b}else{return this._IMSMONTHNAME5}};a.prototype.IMSMONTHNAME6=function(b){if(arguments.length>=1){this._IMSMONTHNAME6=b}else{return this._IMSMONTHNAME6}};a.prototype.IMSMONTHNAME7=function(b){if(arguments.length>=1){this._IMSMONTHNAME7=b}else{return this._IMSMONTHNAME7}};a.prototype.IMSMONTHNAME8=function(b){if(arguments.length>=1){this._IMSMONTHNAME8=b}else{return this._IMSMONTHNAME8}};a.prototype.IMSMONTHNAME9=function(b){if(arguments.length>=1){this._IMSMONTHNAME9=b}else{return this._IMSMONTHNAME9}};a.prototype.IMSMONTHNAME10=function(b){if(arguments.length>=1){this._IMSMONTHNAME10=b}else{return this._IMSMONTHNAME10}};a.prototype.IMSMONTHNAME11=function(b){if(arguments.length>=1){this._IMSMONTHNAME11=b}else{return this._IMSMONTHNAME11}};a.prototype.IMSMONTHNAME12=function(b){if(arguments.length>=1){this._IMSMONTHNAME12=b}else{return this._IMSMONTHNAME12}};a.prototype.IMSABBREVMONTHNAME1=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME1=b}else{return this._IMSABBREVMONTHNAME1}};a.prototype.IMSABBREVMONTHNAME2=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME2=b}else{return this._IMSABBREVMONTHNAME2}};a.prototype.IMSABBREVMONTHNAME3=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME3=b}else{return this._IMSABBREVMONTHNAME3}};a.prototype.IMSABBREVMONTHNAME4=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME4=b}else{return this._IMSABBREVMONTHNAME4}};a.prototype.IMSABBREVMONTHNAME5=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME5=b}else{return this._IMSABBREVMONTHNAME5}};a.prototype.IMSABBREVMONTHNAME6=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME6=b}else{return this._IMSABBREVMONTHNAME6}};a.prototype.IMSABBREVMONTHNAME7=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME7=b}else{return this._IMSABBREVMONTHNAME7}};a.prototype.IMSABBREVMONTHNAME8=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME8=b}else{return this._IMSABBREVMONTHNAME8}};a.prototype.IMSABBREVMONTHNAME9=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME9=b}else{return this._IMSABBREVMONTHNAME9}};a.prototype.IMSABBREVMONTHNAME10=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME10=b}else{return this._IMSABBREVMONTHNAME10}};a.prototype.IMSABBREVMONTHNAME11=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME11=b}else{return this._IMSABBREVMONTHNAME11}};a.prototype.IMSABBREVMONTHNAME12=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME12=b}else{return this._IMSABBREVMONTHNAME12}};a.prototype.IMSDAYNAME1=function(b){if(arguments.length>=1){this._IMSDAYNAME1=b}else{return this._IMSDAYNAME1}};a.prototype.IMSDAYNAME2=function(b){if(arguments.length>=1){this._IMSDAYNAME2=b}else{return this._IMSDAYNAME2}};a.prototype.IMSDAYNAME3=function(b){if(arguments.length>=1){this._IMSDAYNAME3=b}else{return this._IMSDAYNAME3}};a.prototype.IMSDAYNAME4=function(b){if(arguments.length>=1){this._IMSDAYNAME4=b}else{return this._IMSDAYNAME4}};a.prototype.IMSDAYNAME5=function(b){if(arguments.length>=1){this._IMSDAYNAME5=b}else{return this._IMSDAYNAME5}};a.prototype.IMSDAYNAME6=function(b){if(arguments.length>=1){this._IMSDAYNAME6=b}else{return this._IMSDAYNAME6}};a.prototype.IMSDAYNAME7=function(b){if(arguments.length>=1){this._IMSDAYNAME7=b}else{return this._IMSDAYNAME7}};a.prototype.IMSABBREVDAYNAME1=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME1=b}else{return this._IMSABBREVDAYNAME1}};a.prototype.IMSABBREVDAYNAME2=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME2=b}else{return this._IMSABBREVDAYNAME2}};a.prototype.IMSABBREVDAYNAME3=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME3=b}else{return this._IMSABBREVDAYNAME3}};a.prototype.IMSABBREVDAYNAME4=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME4=b}else{return this._IMSABBREVDAYNAME4}};a.prototype.IMSABBREVDAYNAME5=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME5=b}else{return this._IMSABBREVDAYNAME5}};a.prototype.IMSABBREVDAYNAME6=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME6=b}else{return this._IMSABBREVDAYNAME6}};a.prototype.IMSABBREVDAYNAME7=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME7=b}else{return this._IMSABBREVDAYNAME7}};a.prototype.IMTimeSeparator=function(b){if(arguments.length>=1){this._IMTimeSeparator=b}else{return this._IMTimeSeparator}};a.prototype.IMAMTOKEN=function(b){if(arguments.length>=1){this._IMAMToken=b}else{return this._IMAMToken}};a.prototype.IMPMTOKEN=function(b){if(arguments.length>=1){this._IMPMToken=b}else{return this._IMPMToken}};a.prototype.IMEraToken=function(b){if(arguments.length>=1){this._IMEraToken=b}else{return this._IMEraToken}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl=function(){this.__className="sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl";this._IMDateSeparator=null;this._IMTimeSeparator=null};sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl.prototype.IMDateSeparator=function(a){if(arguments.length>=1){this._IMDateSeparator=a}else{return this._IMDateSeparator}};sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl.prototype.IMTimeSeparator=function(a){if(arguments.length>=1){this._IMTimeSeparator=a}else{return this._IMTimeSeparator}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.require("sap.common.globalization.GlobalizationBooleanConstant");sap.common.globalization.require("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory=function(){this.className="sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory";this._displayLocale=null};var a=sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory;a._instance=null;a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory()}return a._instance};a.prototype.getBooleanDisplayLocaleInfo=function(){if(!this._displayLocale){this._displayLocale=new sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo();var b=sap.common.globalization.GlobalizationBooleanConstant.getBooleanStrings();if(b){this._displayLocale.trueString(b[0]);this._displayLocale.falseString(b[1])}}return this._displayLocale}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultNumber");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");var a="SAP_DEFAULT_NUMBER_FORMAT";sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory=function(c){this.__className="sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory.DefaultNumericFormatLocaleFactory";this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null;this._decimalPattern=null;if(b.isDefaultNumberFormat(c)){this._parseDecimalPattern(c)}};var b=sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory;b.REG_DEFAULT_NUMBER_FORMAT=new RegExp("^"+a+"(;.*)?$","i");b.isDefaultNumberFormat=function(c){return b.REG_DEFAULT_NUMBER_FORMAT.test(c)};b.prototype.getNumericParseLocaleInfo=function(){var c=sap.common.globalization;if(!this._numericParseLocaleInfo){this._numericParseLocaleInfo=new c.defaultFormat.NumericParseLocaleInfoImpl(c.GlobalizationNumericConstant.getParseThousandSeparator(),c.GlobalizationNumericConstant.getParseDecimalSeparator(),c.GlobalizationNumericConstant.getParseCurrencySymbol())}return this._numericParseLocaleInfo};b.prototype.getNumericDisplayLocaleInfo=function(){if(!this._numericDisplayLocaleInfo){var f=",";var e=".";var c=sap.common.globalization;if(c.numericFormat.FLocalization.getInstance().SAPThousandsSeparator){f=c.numericFormat.FLocalization.getInstance().SAPThousandsSeparator}else{if(c.GlobalizationNumericConstant.getDisplayThousandSeparator()){f=c.GlobalizationNumericConstant.getDisplayThousandSeparator()}}if(c.numericFormat.FLocalization.getInstance().SAPDecimalSeparator){e=c.numericFormat.FLocalization.getInstance().SAPDecimalSeparator}else{if(c.GlobalizationNumericConstant.getDisplayDecimalSeparator()){e=c.GlobalizationNumericConstant.getDisplayDecimalSeparator()}}var d=(c.numericFormat.FLocalization.getInstance().SAPCurrencySymbol?c.numericFormat.FLocalization.getInstance().SAPCurrencySymbol:this.displayCurrencySymbol());this._numericDisplayLocaleInfo=new c.defaultFormat.NumericDisplayLocaleInfoImpl(f,e,d)}return this._numericDisplayLocaleInfo};b.prototype.createFNumber=function(){var c=new sap.common.globalization.numericFormat.FDefaultNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo());if(sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry(sap.common.globalization.GlobalizationNumericConstant.getActualLocaleForDefaultNumberFormat())){c.groupingStrategy(sap.common.globalization.numericFormat.TwoDigitGroupingStrategy.instance())}return c};b.prototype.getDefaultNumericFormat=function(){var c=this._getDefaultNumericFormat();if(this._decimalPattern){c=c.replace(/.###/g,this._decimalPattern)}return c};b.prototype._getDefaultNumericFormat=function(){if(sap.common.globalization.GlobalizationNumericConstant.getDefaultNumberFormat()){return sap.common.globalization.GlobalizationNumericConstant.getDefaultNumberFormat()}return"#,##0.###"};b.prototype.displayCurrencySymbol=function(){return""};b.prototype._parseDecimalPattern=function(c){var d=c.match(/;\..*/);if(d){d=d[0].split(";")[1];if(/^\.#*$/.test(d)){this._decimalPattern=d}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultTimeFormatLocaleFactory=function(){a.DefaultTimeFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory"};a.DefaultTimeFormatLocaleFactory=sap.common.globalization.extend(a.DefaultTimeFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultTimeFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultTimeFormat()};a.DefaultTimeFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPTimeSeparator){c.IMTimeSeparator(b.SAPTimeSeparator)}};a.DefaultTimeFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var c=new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&c){c.IMTimeSeparator(b)}return c};a.DefaultTimeFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var d=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&d){d.IMTimeSeparator(b)}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c&&d){d.IMAMTOKEN(c[0]);d.IMPMTOKEN(c[1])}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl=function(a,b,c){if(a){this._thousandsSeparator=a}else{this._thousandsSeparator=","}if(b){this._decimalSeparator=b}else{this._decimalSeparator="."}if(c){this._currencySymbol=c}else{this._currencySymbol=""}};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.thousandsSeparator=function(){return this._thousandsSeparator};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.decimalSeparator=function(){return this._decimalSeparator};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.currencySymbol=function(){return this._currencySymbol}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl=function(a,b,c){if(a){this._thousandsSeparator=a}else{this._thousandsSeparator=","}if(b){this._decimalSeparator=b}else{this._decimalSeparator="."}if(c){this._currencySymbol=c}else{this._currencySymbol=""}};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.thousandsSeparator=function(){return this._thousandsSeparator};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.decimalSeparator=function(){return this._decimalSeparator};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.currencySymbol=function(){return this._currencySymbol}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateA");var a=sap.common.globalization.numericFormat;a.FDateA=function(b){this.__className="sap.common.globalization.numericFormat.FDateA";this._full=true;this._displayLocale=b};a.FDateA.prototype.parse=function(e,d){var c=0;var b=d.toLowerCase();if(b.substr(0,5)=="am/pm"){e.miltime=false;c=5}if(b.substr(0,3)=="a/p"){e.miltime=false;this._full=false;c=3}return c};a.FDateA.prototype.display=function(c){var b="";if(c.getHrs()>=12){if(this._full){b=this._displayLocale.IMPMTOKEN()?this._displayLocale.IMPMTOKEN():"PM"}else{b=this._displayLocale.IMPMTOKEN()?this._displayLocale.IMPMTOKEN():"P"}}else{if(this._full){b=this._displayLocale.IMAMTOKEN()?this._displayLocale.IMAMTOKEN():"AM"}else{b=this._displayLocale.IMAMTOKEN()?this._displayLocale.IMAMTOKEN():"A"}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");var a=sap.common.globalization.numericFormat;a.FDateB=function(b){this.__className="sap.common.globalization.numericFormat.FDateB";this._displayLocaleInfo=b;this.mask=undefined;this.c="";this._tok={};this.initializeTokenMap()};a.FDateB.prototype.parse=function(f,e){var c=2;this.c=e.charAt(1);var d=this.createTokenFormatter(this._tok[this.c]);if(this.c=="M"||this.c=="m"){d.bminute=true}var b=d.parse(f,e.substring(1));if(b>0){this.mask=d;c+=b}return c};a.FDateB.prototype.display=function(c){var b;if(this.c=="S"||this.c=="s"){b=86400*c.serial}else{if(this.c=="M"||this.c=="m"){b=1440*c.serial}else{if(this.c=="H"||this.c=="h"){b=24*c.serial}}}this.mask.value=Math.floor(b);return this.mask.display(c)};a.FDateB.prototype.createTokenFormatter=function(b){var c=null;switch(b){case a.FDateM:c=new a.FDateM(this._displayLocaleInfo);break;case a.FDateH:c=new a.FDateH();break;case a.FDateS:c=new a.FDateS();break;default:}return c};a.FDateB.prototype.initializeTokenMap=function(){this._tok.M=a.FDateM;this._tok.H=a.FDateH;this._tok.S=a.FDateS;this._tok.m=a.FDateM;this._tok.h=a.FDateH;this._tok.s=a.FDateS}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateD");var a=sap.common.globalization.numericFormat;a.FDateD=function(b){this.__className="sap.common.globalization.numericFormat.FDateD";this._placeholders=0;this._displayLocaleInfo=b};a.FDateD.prototype.getPlaceholders=function(){return this._placeholders};a.FDateD.prototype.parse=function(d,c){var b=0;while(c.charAt(b)=="D"||c.charAt(b)=="d"){b++}if(b<=2){this._placeholders=b}else{if(b==3){this._placeholders=-1}else{if(b>=4){this._placeholders=-2}}}return b};a.FDateD.prototype.display=function(d){var c="";if(this._placeholders>=0){c+=d.getDate();while(c.length<this._placeholders){c="0"+c}}else{var b=d.getDay();if(this._placeholders==-1){c+=this.getShortDay(b)}else{c+=this.getDay(b)}}return c};a.FDateD.prototype.getDay=function(b){if(b==0){return this._displayLocaleInfo.IMSDAYNAME7()}if(b==1){return this._displayLocaleInfo.IMSDAYNAME1()}if(b==2){return this._displayLocaleInfo.IMSDAYNAME2()}if(b==3){return this._displayLocaleInfo.IMSDAYNAME3()}if(b==4){return this._displayLocaleInfo.IMSDAYNAME4()}if(b==5){return this._displayLocaleInfo.IMSDAYNAME5()}if(b==6||b==-1){return this._displayLocaleInfo.IMSDAYNAME6()}return this._displayLocaleInfo.IMSDAYNAME6()};a.FDateD.prototype.getShortDay=function(b){if(b==0){return this._displayLocaleInfo.IMSABBREVDAYNAME7().split(".")[0]}if(b==1){return this._displayLocaleInfo.IMSABBREVDAYNAME1().split(".")[0]}if(b==2){return this._displayLocaleInfo.IMSABBREVDAYNAME2().split(".")[0]}if(b==3){return this._displayLocaleInfo.IMSABBREVDAYNAME3().split(".")[0]}if(b==4){return this._displayLocaleInfo.IMSABBREVDAYNAME4().split(".")[0]}if(b==5){return this._displayLocaleInfo.IMSABBREVDAYNAME5().split(".")[0]}if(b==6||b==-1){return this._displayLocaleInfo.IMSABBREVDAYNAME6().split(".")[0]}return this._displayLocaleInfo.IMSABBREVDAYNAME6().split(".")[0]}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateH");var a=sap.common.globalization.numericFormat;a.FDateH=function(){this.__className="sap.common.globalization.numericFormat.FDateH";this.placeholders=1;this.number=0;this.value=NaN};sap.common.globalization.numericFormat.FDateH.prototype.parse=function(d,c){var b=0;this.number=d.HNum+1;d.HBool=true;d.HNum=this.number;while(c.charAt(b)=="H"||c.charAt(b)=="h"){b++}if(b>1){this.placeholders=2}return b};a.FDateH.prototype.display=function(d){var b;if(isNaN(this.value)){b=d.getHrs()}else{b=this.value}if(!d.miltime){if(this.number==d.HNum){if(b>11){b=b-12}if(b==0){b=12}}}var c=""+b;while(this.placeholders>c.length){c="0"+c}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateM");var a=sap.common.globalization.numericFormat;a.FDateM=function(b){this.__className="sap.common.globalization.numericFormat.FDateM";this.bminute=false;this.placeholders=0;this.value=undefined;this._displayLocaleInfo=b};a.FDateM.prototype.parse=function(d,c){var b=0;while(c.charAt(b)=="M"||c.charAt(b)=="m"){b++}if(b<=2){if(d.HBool){this.bminute=true}d.HBool=false;this.placeholders=b}else{if(b==3){this.placeholders=-1}else{if(b==4){this.placeholders=-2}else{if(b==5){this.placeholders=-3}}}}return b};a.FDateM.prototype.display=function(g){var f="";if(this.placeholders>=0&&this.bminute){if(this.value==undefined){f+=g.getMin()}else{f+=this.value}while(f.length<this.placeholders){f="0"+f}}else{var d=g.getMonth();if(this.placeholders>=0){d++;f+=d;while(f.length<this.placeholders){f="0"+f}}else{var e=new Array(this._displayLocaleInfo.IMSMONTHNAME1(),this._displayLocaleInfo.IMSMONTHNAME2(),this._displayLocaleInfo.IMSMONTHNAME3(),this._displayLocaleInfo.IMSMONTHNAME4(),this._displayLocaleInfo.IMSMONTHNAME5(),this._displayLocaleInfo.IMSMONTHNAME6(),this._displayLocaleInfo.IMSMONTHNAME7(),this._displayLocaleInfo.IMSMONTHNAME8(),this._displayLocaleInfo.IMSMONTHNAME9(),this._displayLocaleInfo.IMSMONTHNAME10(),this._displayLocaleInfo.IMSMONTHNAME11(),this._displayLocaleInfo.IMSMONTHNAME12());var c=new Array(this._displayLocaleInfo.IMSABBREVMONTHNAME1(),this._displayLocaleInfo.IMSABBREVMONTHNAME2(),this._displayLocaleInfo.IMSABBREVMONTHNAME3(),this._displayLocaleInfo.IMSABBREVMONTHNAME4(),this._displayLocaleInfo.IMSABBREVMONTHNAME5(),this._displayLocaleInfo.IMSABBREVMONTHNAME6(),this._displayLocaleInfo.IMSABBREVMONTHNAME7(),this._displayLocaleInfo.IMSABBREVMONTHNAME8(),this._displayLocaleInfo.IMSABBREVMONTHNAME9(),this._displayLocaleInfo.IMSABBREVMONTHNAME10(),this._displayLocaleInfo.IMSABBREVMONTHNAME11(),this._displayLocaleInfo.IMSABBREVMONTHNAME12());if(this.placeholders==-1){f+=c[d]}else{if(this.placeholders==-3){f+=e[d].substring(0,1)}else{f+=e[d]}}}}return f}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.numericFormat.FDateS=function(){this.__className="sap.common.globalization.numericFormat.FDateS";this.splaceholders=1;this.msplaceholders=0;this.value=undefined;this.IMDecimalSeparator=sap.common.globalization.numericFormat.FLocalization.getInstance().IMDecimalSeparator;this.ms=NaN};sap.common.globalization.numericFormat.FDateS.prototype.parse=function(g,f){var e=0;var c=g.mask;var b=c.length;for(var d=b-1;d>=0;d--){if(c[d].__className=="sap.common.globalization.numericFormat.FDateM"){c[d].bminute=true;break}}while(f.charAt(e)=="S"||f.charAt(e)=="s"){e++}if(e>1){this.splaceholders=2}if(f.charAt(e)==this.IMDecimalSeparator.charAt(0)&&f.charAt(e+1)=="0"){e++;while(f.charAt(e)=="0"){e++;this.msplaceholders++}if(this.msplaceholders>g.ms){g.ms=this.msplaceholders}}return e};sap.common.globalization.numericFormat.FDateS.prototype.display=function(d){var c;if(this.value==undefined){c=""+d.getSec()}else{c=""+this.value}while(this.splaceholders>c.length){c="0"+c}if(this.msplaceholders>0){var a=d.getMS()/Math.pow(10,(3-this.msplaceholders));if(this.msplaceholders<this.ms){a=Math.floor(a)}else{a=Math.round(a)}var b=""+a;while(b.length<this.msplaceholders){b="0"+b}c+=this.IMDecimalSeparator+b}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateSep");sap.common.globalization.numericFormat.FDateSep=function(a,b){this.__className="sap.common.globalization.numericFormat.FDateSep";this._parseLocalInfo=a;this._displayLocaleInfo=b};sap.common.globalization.numericFormat.FDateSep.prototype.parse=function(c,b){var a=b.charAt(0);if(this._displayLocaleInfo.IMDateSeparator()!=null&&(a=="."||a=="/"||a=="-")){return 1}else{return 0}};sap.common.globalization.numericFormat.FDateSep.prototype.display=function(b){var a=this._displayLocaleInfo.IMDateSeparator();return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.numericFormat.FDateY=function(){this.__className="sap.common.globalization.numericFormat.FDateY";this.placeholders=2};sap.common.globalization.numericFormat.FDateY.prototype.parse=function(c,b){var a=0;while(b.charAt(a)=="Y"||b.charAt(a)=="y"){a++}if(a>2){this.placeholders=4}return a};sap.common.globalization.numericFormat.FDateY.prototype.display=function(b){var a=""+b.getYear();if(this.placeholders<4){a=a.substring(2)}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FText");sap.common.globalization.numericFormat.FText=function(){this.__className="sap.common.globalization.numericFormat.FText";this.color=NaN;this.format="";this.condnum=0;this.cond={};this.numAts=0;this.mask=new Array()};sap.common.globalization.numericFormat.FText.tokens="@";sap.common.globalization.numericFormat.FText.prototype.parse=function(b){var a=0;while(b.charAt(a)=="@"){a++}this.numAts=a;return a};sap.common.globalization.numericFormat.FText.prototype.display=function(a){var c="";for(var b=0;b<this.numAts;b++){c+=a.toString()}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateA");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateSep");var a=sap.common.globalization.numericFormat;a.FDate=function(c,b){this.__className="sap.common.globalization.numericFormat.FDate";this.date;this.color;this.condnum=-Infinity;this.cond;this.tok={};this.HBool=false;this.serial=37500;this.format="";this.HNum=0;this.miltime=true;this.ms=0;this.mask=new Array();this._parseLocaleInfo=c;this._displayLocaleInfo=b;this._inputIsDateType=false;this.initializeTokenMap()};a.FDate.tokens="MDYHSAmdyhsa";a.FDate.prototype.parse=function(f){var g=f.charAt(0);if(g=="."){g=f.substring(0,2)}var e=this.tok[g];if(e==undefined){return 0}var d=this.createTokenFormatter(e);var b=d.parse(this,f);if(b>0){this.mask.push(d)}else{b=0}return b};a.FDate.prototype.display=function(d){this.setNumber(d);var c=this.mask;var b=c.length;var f="";for(var e=0;e<b;e++){if((typeof c[e])=="object"){f+=c[e].display(this)}else{f+=c[e]}}return f};a.FDate.prototype.getMaskClone=function(){if(this.mask){return this.mask.slice()}return[]};a.FDate.prototype.getYear=function(){if(this._inputIsDateType){return this.date.getFullYear()}if(this.serial>=0&&this.serial<1){return 1900}return this.date.getUTCFullYear()};a.FDate.prototype.getMonth=function(){if(this._inputIsDateType){return this.date.getMonth()}if(this.serial>=0&&this.serial<1){return 0}return this.date.getUTCMonth()};a.FDate.prototype.getDate=function(){if(this._inputIsDateType){return this.date.getDate()}if(this.serial>=0&&this.serial<1){return 0}if(this.serial==60){return 29}return this.date.getUTCDate()};a.FDate.prototype.getDay=function(){var b=this.date.getUTCDay();if(this.serial<60){b--}if(this._inputIsDateType){b=this.date.getDay()}return b};a.FDate.prototype.getHrs=function(){if(this._inputIsDateType){return this.date.getHours()}return this.date.getUTCHours()};a.FDate.prototype.getMin=function(){if(this._inputIsDateType){return this.date.getMinutes()}return this.date.getUTCMinutes()};a.FDate.prototype.getSec=function(){if(this._inputIsDateType){return this.date.getSeconds()}return this.date.getUTCSeconds()};a.FDate.prototype.getMS=function(){if(this._inputIsDateType){return this.date.getMilliseconds()}return this.date.getUTCMilliseconds()};a.FDate.prototype.setNumber=function(b){if(b instanceof Date){var e=new Date();e.setTime(b.getTime());this.date=e;this._inputIsDateType=true;this.serial=37500;return}this._inputIsDateType=false;this.serial=b;if(b<60){b++}var d=b*86400*1000;var c=d-(2209161600*1000);this.date=new Date(c);if(this.date.getUTCMilliseconds()>=500){this.date.setUTCMilliseconds(this.date.getUTCMilliseconds()+500)}};a.FDate.prototype.createTokenFormatter=function(b){var c=null;switch(b){case a.FDateM:c=new a.FDateM(this._displayLocaleInfo);break;case a.FDateD:c=new a.FDateD(this._displayLocaleInfo);break;case a.FDateY:c=new a.FDateY();break;case a.FDateH:c=new a.FDateH();break;case a.FDateS:c=new a.FDateS();break;case a.FDateSep:c=new a.FDateSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case a.FTimeSep:c=new a.FTimeSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case a.FDateA:c=new a.FDateA(this._displayLocaleInfo);break;case a.FDateB:c=new a.FDateB(this._displayLocaleInfo);break;default:}return c};a.FDate.prototype.initializeTokenMap=function(){this.tok.M=a.FDateM;this.tok.D=a.FDateD;this.tok.Y=a.FDateY;this.tok.H=a.FDateH;this.tok.S=a.FDateS;this.tok.A=a.FDateA;this.tok.m=a.FDateM;this.tok.d=a.FDateD;this.tok.y=a.FDateY;this.tok.h=a.FDateH;this.tok.s=a.FDateS;this.tok.a=a.FDateA;this.tok["["]=a.FDateB;this.tok["/"]=a.FDateSep;this.tok[".M"]=a.FDateSep;this.tok[".D"]=a.FDateSep;this.tok[".Y"]=a.FDateSep;this.tok["-"]=a.FDateSep;this.tok[".m"]=a.FTimeSep;this.tok[".h"]=a.FTimeSep;this.tok[".s"]=a.FTimeSep;this.tok[":"]=a.FTimeSep};a.FDate.prototype.toString=function(){var b="[FDate]\n";for(var c in this){b=b+c+" = "+this[c]+"\n"}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateForPVL");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.numericFormat.FDateForPVL=function(c,b){sap.common.globalization.numericFormat.FDateForPVL.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FDateForPVL"};sap.common.globalization.numericFormat.FDateForPVL=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDateForPVL,sap.common.globalization.numericFormat.FDate);var a=sap.common.globalization.numericFormat.FDateForPVL;a.prototype.createTokenFormatter=function(b){var c=null;if(b==sap.common.globalization.numericFormat.FDefaultDateD){c=new sap.common.globalization.numericFormat.FDefaultDateD(this._displayLocaleInfo)}else{c=a.superclass.createTokenFormatter.call(this,b)}return c};a.prototype.initializeTokenMap=function(){a.superclass.initializeTokenMap.apply(this);this.tok.d=sap.common.globalization.numericFormat.FDefaultDateD;this.tok.D=sap.common.globalization.numericFormat.FDefaultDateD}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.numericFormat.FDefaultDateSep=function(b,a){sap.common.globalization.numericFormat.FDefaultDateSep.superclass.constructor.call(this,b,a);this.__className="sap.common.globalization.numericFormat.FDefaultDateSep"};sap.common.globalization.numericFormat.FDefaultDateSep=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateSep,sap.common.globalization.numericFormat.FDateSep);sap.common.globalization.numericFormat.FDefaultDateSep.prototype.parse=function(e,d){var a=this._parseLocalInfo.IMDateSeparator();if(a){var c=a.length;var b=d.substr(0,c);if(b==a){return c}else{return 0}}return 0}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.numericFormat.FDefaultDateH=function(){sap.common.globalization.numericFormat.FDefaultDateH.superclass.constructor.apply(this);this.__className="sap.common.globalization.numericFormat.FDefaultDateH";this._is12HourStyle=false};sap.common.globalization.numericFormat.FDefaultDateH=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateH,sap.common.globalization.numericFormat.FDateH);sap.common.globalization.numericFormat.FDefaultDateH.prototype.parse=function(c,b){var a=0;this.number=c.HNum+1;c.HBool=true;c.HNum=this.number;this._is12HourStyle=true;while(b.charAt(a)=="H"||b.charAt(a)=="h"){if(b.charAt(a)=="H"){this._is12HourStyle=false}a++}if(a>1){this.placeholders=2}return a};sap.common.globalization.numericFormat.FDefaultDateH.prototype.display=function(c){var a;if(isNaN(this.value)){a=c.getHrs()}else{a=this.value}if(this._is12HourStyle){if(this.number==c.HNum){if(a>11){a=a-12}if(a==0){a=12}}}var b=""+a;while(this.placeholders>b.length){b="0"+b}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateG");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.numericFormat.FDefaultDateG=function(a){this.__className="sap.common.globalization.numericFormat.FDefaultDateG";this._displayLocInfo=a;this._count=0};sap.common.globalization.numericFormat.FDefaultDateG.prototype.parse=function(c,b){if(b&&!sap.common.globalization.utils.StringUtil.isBlankString(b)){if(this._displayLocInfo&&this._displayLocInfo.IMEraToken()){this._count=0;var a=b.charAt(this._count);while(a=="G"){this._count++;a=b.charAt(this._count)}return this._count}}return 0};sap.common.globalization.numericFormat.FDefaultDateG.prototype.display=function(b){var a="";if(this._displayLocInfo&&this._displayLocInfo.IMEraToken()){switch(this._count){case 4:case 5:case 1:case 2:case 3:default:a=this._displayLocInfo.IMEraToken()}}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FDefaultDateD=function(b){sap.common.globalization.numericFormat.FDefaultDateD.superclass.constructor.call(this,b);this.__className="sap.common.globalization.numericFormat.FDefaultDateD"};sap.common.globalization.numericFormat.FDefaultDateD=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateD,sap.common.globalization.numericFormat.FDateD);a.FDefaultDateD.prototype.getShortDay=function(b){if(b==0){return this._displayLocaleInfo.IMSABBREVDAYNAME7()}if(b==1){return this._displayLocaleInfo.IMSABBREVDAYNAME1()}if(b==2){return this._displayLocaleInfo.IMSABBREVDAYNAME2()}if(b==3){return this._displayLocaleInfo.IMSABBREVDAYNAME3()}if(b==4){return this._displayLocaleInfo.IMSABBREVDAYNAME4()}if(b==5){return this._displayLocaleInfo.IMSABBREVDAYNAME5()}if(b==6||b==-1){return this._displayLocaleInfo.IMSABBREVDAYNAME6()}return this._displayLocaleInfo.IMSABBREVDAYNAME6()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateG");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateA");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.numericFormat.FDefaultDate=function(b,a){sap.common.globalization.numericFormat.FDefaultDate.superclass.constructor.apply(this,[b,a]);this.__className="sap.common.globalization.numericFormat.FDefaultDate"};sap.common.globalization.numericFormat.FDefaultDate=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDate,sap.common.globalization.numericFormat.FDate);sap.common.globalization.numericFormat.FDefaultDate.prototype.createTokenFormatter=function(a){var c=sap.common.globalization.numericFormat;var b=null;switch(a){case c.FDateM:b=new c.FDateM(this._displayLocaleInfo);break;case c.FDefaultDateD:b=new c.FDefaultDateD(this._displayLocaleInfo);break;case c.FDateY:b=new c.FDateY();break;case c.FDefaultDateH:b=new c.FDefaultDateH();break;case c.FDateS:b=new c.FDateS();break;case c.FDefaultDateSep:b=new c.FDefaultDateSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case c.FTimeSep:b=new c.FTimeSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case c.FDateA:b=new c.FDateA(this._displayLocaleInfo);break;case c.FDateB:b=new c.FDateB(this._displayLocaleInfo);break;case c.FDefaultDateG:b=new c.FDefaultDateG(this._displayLocaleInfo);break;default:}return b};sap.common.globalization.numericFormat.FDefaultDate.prototype.initializeTokenMap=function(){var a=sap.common.globalization.numericFormat;this.tok.M=a.FDateM;this.tok.Y=a.FDateY;this.tok.S=a.FDateS;this.tok.A=a.FDateA;this.tok.m=a.FDateM;this.tok.y=a.FDateY;this.tok.s=a.FDateS;this.tok.a=a.FDateA;this.tok["["]=a.FDateB;this.tok.D=a.FDefaultDateD;this.tok.d=a.FDefaultDateD;this.tok.H=a.FDefaultDateH;this.tok.h=a.FDefaultDateH;if(this._parseLocaleInfo&&this._parseLocaleInfo.IMDateSeparator){if(this._parseLocaleInfo.IMDateSeparator()=="."){this.tok[".M"]=a.FDefaultDateSep;this.tok[".D"]=a.FDefaultDateSep;this.tok[".d"]=a.FDefaultDateSep;this.tok[".Y"]=a.FDefaultDateSep;this.tok[".y"]=a.FDefaultDateSep}else{this.tok[this._parseLocaleInfo.IMDateSeparator()]=a.FDefaultDateSep}}if(this._parseLocaleInfo&&this._parseLocaleInfo.IMTimeSeparator()){if(this._parseLocaleInfo.IMDateSeparator=="."){this.tok[".m"]=a.FTimeSep;this.tok[".h"]=a.FTimeSep;this.tok[".H"]=a.FTimeSep;this.tok[".s"]=a.FTimeSep;this.tok[".S"]=a.FTimeSep}else{this.tok[this._parseLocaleInfo.IMTimeSeparator()]=a.FTimeSep}}this.tok.G=a.FDefaultDateG}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.DefaultGroupingStrategy");sap.common.globalization.numericFormat.DefaultGroupingStrategy=function(){this.__className="sap.common.globalization.numericFormat.DefaultGroupingStrategy"};var a=sap.common.globalization.numericFormat.DefaultGroupingStrategy;a._instance=new sap.common.globalization.numericFormat.DefaultGroupingStrategy();a.prototype.nextGroupDigits=function(){return 2};a.instance=function(){return a._instance}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.Helper");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.numericFormat.Helper.isThousandsSeparator=function(d,b,e){var e=e||null;var a=(e?e:sap.common.globalization.numericFormat.FLocalization.getInstance().IMThousandsSeparator());if(a.charAt(0)==" "){for(var c=b;c<d.length;++c){if(d.charAt(c)!=" "){break}}if(d.charAt(c)=="â¬"||d.charAt(c)=="Ð³"||d.charAt(c)=="k"||d.charAt(c)=="S"||d.charAt(c)=="L"||d.charAt(c)=="m"||d.charAt(c)=="K"){return false}}return(d.charAt(b)==a.charAt(0))}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FCurr");sap.common.globalization.numericFormat.FCurr=function(b,a){this.__className="sap.common.globalization.numericFormat.FCurr";this.display="";this._parseLocaleInfo=b;this._displayLocaleInfo=a};sap.common.globalization.numericFormat.FCurr.prototype.parse=function(c,b){var a=this._parseLocaleInfo.currencySymbol();var d=this._displayLocaleInfo.currencySymbol();if(d!=null&&a!=null&&a!=d){c.currencyIndex=c.mask.length;this.display=d;return a.length}else{return 0}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNum0");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNum0=function(a){this.__className="sap.common.globalization.numericFormat.FNum0";this._parseLocaleInfo=a;this.display="0"};sap.common.globalization.numericFormat.FNum0.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"){if(!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.scale=e.scale/1000000}}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumP");sap.common.globalization.numericFormat.FNumP=function(){this.__className="sap.common.globalization.numericFormat.FNumP";this.display="%"};sap.common.globalization.numericFormat.FNumP.prototype.parse=function(b,a){b.scale=b.scale*100;return -1}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumQ");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNumQ=function(a){this.__className="sap.common.globalization.numericFormat.FNumQ";this._parseLocaleInfo=a;this.display=" "};sap.common.globalization.numericFormat.FNumQ.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"&&!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumS");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNumS=function(a){this.__className="sap.common.globalization.numericFormat.FNumS";this._parseLocaleInfo=a;this.display=""};sap.common.globalization.numericFormat.FNumS.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"){if(!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.scale=e.scale/1000000}}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FPeriod");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FPeriod=function(b,a){this.__className="sap.common.globalization.numericFormat.FPeriod";this._parseLocaleInfo=b;this.display=a.decimalSeparator()};sap.common.globalization.numericFormat.FPeriod.prototype.parse=function(e,d){var b=-1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"&&!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}if(e.period==-1){e.period=e.mask.length}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.numericFormat.FNumber=function(d,c){this.__className="sap.common.globalization.numericFormat.FNumber";this.scale=1;this.bcomma=false;this.bsign=true;this.period=-1;this.numfore=undefined;this.numaft=undefined;this.sign="";this.mask=new Array();this.mfore=new Array();this.maft=new Array();this.format=undefined;this.currencyIndex=-1;this._tok={};this._tok["#"]=sap.common.globalization.numericFormat.FNumS;this._tok["?"]=sap.common.globalization.numericFormat.FNumQ;this._tok["%"]=sap.common.globalization.numericFormat.FNumP;this._tok["0"]=sap.common.globalization.numericFormat.FNum0;this.condnum=0;this.cond={};var a=d.decimalSeparator();this._tok[a]=sap.common.globalization.numericFormat.FPeriod;this.IMDecimalSeparator=a;this.parseLocaleInfo=d;this.displayLocaleInfo=c;this.IMThousandsSeparator=c.thousandsSeparator();var b=this.parseLocaleInfo.currencySymbol();if(b){this._tok[b]=sap.common.globalization.numericFormat.FCurr}};sap.common.globalization.numericFormat.FNumber.tokens="#?%0";sap.common.globalization.numericFormat.FNumber.prototype.parse=function(f){if(this.format==null){this.format=f}var g=f.charAt(0);if(this._tok[g]==undefined||(g==this.IMDecimalSeparator&&(f.length>1&&f.charAt(1)!="#"&&f.charAt(1)!="0"))){return 0}var e=this.createTokenFormatter(this._tok[g]);var d=e.parse(this,f);if(this.period>1){var a=true}if(d>0){var b=this.mask.length;this.mask.push(e);if(this.currencyIndex!=b){if(this.period==-1){this.mfore.push(b)}else{this.maft.push(b)}}}else{if(d<0){this.mask.push(e);d=Math.abs(d)}else{d=0}}return d};sap.common.globalization.numericFormat.FNumber.prototype.display=function(k){if(typeof(k)!="number"&&typeof(k)!="string"){return k}if(isNaN(k)||!isFinite(k)){return k}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(k);var q=new Array();var e=this.mfore.length;var c=3;var m=this.period;var f=(m==-1)?(this.mask.length):m;var g;var o;var p;for(var h=e-1;h>=0;h--){m=this.mfore[h];for(var g=f-1;g>m;g--){p=this.mask[g];if((typeof p)=="object"){q.unshift(p.display)}else{q.unshift(p)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){q.unshift(this.IMThousandsSeparator);c=2}}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}else{var n=this.mask[m].display;if(n.length!=0){if(this.bcomma&&c--==0){q.unshift(this.IMThousandsSeparator);c=2}q.unshift(this.mask[m].display)}}f=m}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){q.unshift(this.IMThousandsSeparator);c=2}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}}else{q.unshift(this.numfore)}}p=this.mask;if(this.currencyIndex!=-1){h=0}for(g=f-1;g>=0;g--){if((typeof p[h])=="object"){q.unshift(this.mask[g].display)}else{q.unshift(this.mask[g])}}e=this.mask.length;h=(this.period==-1)?(e):(this.period);m=0;for(;h<e;h++){if((typeof p[h])=="object"){if(this.maft[m]==h){m++;if(this.numaft.length>0){q.push(this.numaft.charAt(0));this.numaft=this.numaft.substring(1)}else{q.push(p[h].display)}}else{q.push(p[h].display)}}else{q.push(p[h])}}var b;if(this.bsign){b=this.sign+q.join("")}else{b=q.join("")}return b};sap.common.globalization.numericFormat.FNumber.prototype.setNumber=function(d){var a=this.maft.length;if(this.format.charAt(this.format.length-1)=="%"){d=Number(d);var h=Math.pow(10,a+1+2);d=d*h;d=d/(h/this.scale)}else{if(this.scale!=1){d=Number(d)*this.scale}}var b;if(typeof d==="string"){b=d.split(".");if(b[1]){var c=this.excel_round(Number("0."+b[1]),a);b[1]=c.toString().substr(2)}}else{d=this.excel_round(d,a);var g=d.toString();if(g.indexOf("e")>-1){g=e(g)}b=g.split(".")}function f(j,m){var l="";for(var k=0;k<m;k++){l+=j}return l}function e(p){var m,n,k,q,j;var l=p.indexOf("e");m=parseInt(p.substring(l+2));var i=p.substring(0,l);if(i[0]==="-"){j=true;i=i.substring(1)}if(p[l+1]==="-"){if(i.indexOf(".")>-1){i=i[0]+i.substring(2)}q="0."+f("0",m-1)+i}else{var o=i.indexOf(".");if(o>-1){k=m-i.substring(o+1).length;if(k>=0){q=i[0]+i.substring(2)+f("0",k)}else{q=i[0]+i.substring(2,m+2)+"."+i.substring(m+2)}}else{q=i[0]+f("0",m)}}if(j){q="-"+q}return q}this.numfore=b[0];if(this.numfore.charAt(0)=="-"){this.sign="-";this.numfore=this.numfore.substring(1)}else{this.sign=""}if(this.numfore.charAt(0)=="0"){this.numfore=this.numfore.substring(1)}this.numaft=undefined;if(b.length<2){this.numaft=""}else{this.numaft=b[1]}};sap.common.globalization.numericFormat.FNumber.prototype.createTokenFormatter=function(a){var b=null;var c=sap.common.globalization.numericFormat;switch(a){case c.FNumS:b=new sap.common.globalization.numericFormat.FNumS(this.parseLocaleInfo);break;case c.FNumQ:b=new sap.common.globalization.numericFormat.FNumQ(this.parseLocaleInfo);break;case c.FNumP:b=new sap.common.globalization.numericFormat.FNumP();break;case c.FNum0:b=new sap.common.globalization.numericFormat.FNum0(this.parseLocaleInfo);break;case c.FPeriod:b=new sap.common.globalization.numericFormat.FPeriod(this.parseLocaleInfo,this.displayLocaleInfo);break;case c.FCurr:b=new sap.common.globalization.numericFormat.FCurr(this.parseLocaleInfo,this.displayLocaleInfo);break;default:}return b};sap.common.globalization.numericFormat.FNumber.prototype.excel_round=function(a,f){var d=false;if(a<0){d=true;a=-a}var e,c;var b=0;var g=Math.pow(10,f);e=Math.floor(a*g);b=(e+0.5)/g;c=(e+1)/g;e/=g;a=(a<b)?e:c;if(d){a=-a}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.DefaultGroupingStrategy");sap.common.globalization.require("sap.common.globalization.numericFormat.FPeriod");sap.common.globalization.numericFormat.FDefaultNumber=function(b,a){sap.common.globalization.numericFormat.FDefaultNumber.superclass.constructor.apply(this,[b,a]);this.__className="sap.common.globalization.numericFormat.FDefaultDateNumber";this._groupingStrategy=sap.common.globalization.numericFormat.DefaultGroupingStrategy.instance()};sap.common.globalization.numericFormat.FDefaultNumber=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultNumber,sap.common.globalization.numericFormat.FNumber);sap.common.globalization.numericFormat.FDefaultNumber.prototype.display=function(m){if(typeof(m)!="number"&&typeof(m)!="string"){return m}if(isNaN(m)||!isFinite(m)){return m}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(m);var r=new Array();var e=this.mfore.length;var c=3;var n=this.period;var g=(n==-1)?(this.mask.length):n;var h;var p;var q;for(var k=e-1;k>=0;k--){n=this.mfore[k];for(h=g-1;h>n;h--){q=this.mask[h];if((typeof q)=="object"){r.unshift(q.display)}else{r.unshift(q)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}}p=this.numfore.length-1;r.unshift(this.numfore.charAt(p));this.numfore=this.numfore.substring(0,p)}else{var o=this.mask[n].display;if(o.length!=0){if(this.bcomma&&c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}r.unshift(this.mask[n].display)}}g=n}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}p=this.numfore.length-1;r.unshift(this.numfore.charAt(p));this.numfore=this.numfore.substring(0,p)}}else{r.unshift(this.numfore)}}q=this.mask;if(this.currencyIndex!=-1){k=0}for(h=g-1;h>=0;h--){if((typeof q[k])=="object"){r.unshift(this.mask[h].display)}else{r.unshift(this.mask[h])}}e=this.mask.length;k=(this.period==-1)?(e):(this.period);n=0;var f=false;for(;k<e;k++){if((typeof q[k])=="object"){if(q[k].__className=="sap.common.globalization.numericFormat.FPeriod"&&!this.numaft){f=true;continue}if(this.maft[n]==k){n++;if(this.numaft.length>0){if(!f){r.push(this.numaft.charAt(0))}this.numaft=this.numaft.substring(1)}else{r.push(q[k].display)}}else{r.push(q[k].display)}}else{r.push(q[k])}}var b;if(this.bsign){b=this.sign+r.join("")}else{b=r.join("")}return b};sap.common.globalization.numericFormat.FDefaultNumber.prototype.groupingStrategy=function(a){if(this._groupingStrategy!=a){this._groupingStrategy=a}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FText");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.numericFormat.FT=function(c,b){this.__className="sap.common.globalization.numericFormat.FT";this._hasCustomCondition=false;this.color=undefined;this.o=new Array();this._dateLocaleFactory=c?c:sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory.getInstance();this._numericLocaleFactory=b?b:sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory.getInstance();this._isParsedSuccess=false};var a=sap.common.globalization.numericFormat.FT;a.ftarr=new Array();a._CONDITION_TOKENS="=<>";a._equals=function(d,c){return(d==c)};a._neq=function(d,c){return(d!=c)};a._gthan=function(d,c){return(d>c)};a._gte=function(d,c){return(d>=c)};a._lthan=function(d,c){return(d<c)};a._lte=function(d,c){return(d<=c)};a._CONDITIONS={"=":sap.common.globalization.numericFormat.FT._equals,"<>":sap.common.globalization.numericFormat.FT._neq,"<":sap.common.globalization.numericFormat.FT._lthan,"<=":sap.common.globalization.numericFormat.FT._lte,">":sap.common.globalization.numericFormat.FT._gthan,">=":sap.common.globalization.numericFormat.FT._gte};a._COLORS={black:0,blue:255,cyan:65535,green:65280,magenta:16711935,red:16711680,white:16777215,yellow:16776960};a.prototype._isNumeric=function(e){var d="#?%";var b=d.length;for(var c=0;c<b;c++){if(e.indexOf(d.charAt(c))!=-1){return true}}return false};a.prototype.isParsedSuccess=function(){return this._isParsedSuccess};a.prototype.parse=function(x){this._isParsedSuccess=false;this._hasCustomCondition=false;var z=x;var t=x.length;var B;var d=0;for(var w=0;w<t;w++){B=z.charAt(w);if(B=='"'){while(w<t){if(z.charAt(++w)=='"'&&z.charAt(w-1)!="\\"){break}}continue}if(B=="\\"||B=="_"||B=="*"){w++;continue}if(B==";"){if(this.o[d]==undefined){this.o[d]=new sap.common.globalization.numericFormat.FText()}this.o[d].format=z.substring(0,w);d++;z=z.substring(w+1);t=z.length;w=-1;continue}if(B=="["){var r="";while(z.charAt(++w)!="]"&&(w<t)){r+=z.charAt(w)}var A=r.length;var n=r.charAt(0);if(n=="s"||n=="m"||n=="h"){for(var v=1;v<A;v++){var k=r.charAt(v);if(n!=k){break}}if(v==A){if(this.o[d]==undefined){this.o[d]=this._dateLocaleFactory.createFDate()}}}}var D=sap.common.globalization.numericFormat.FDate.tokens.indexOf(B);if(sap.common.globalization.numericFormat.FDate.tokens.indexOf(B)!=-1&&!this._isNumeric(x)){if(this.o[d]==undefined){this.o[d]=this._dateLocaleFactory.createFDate()}this.o[d]=this._dateLocaleFactory.createFDate()}else{if(sap.common.globalization.numericFormat.FNumber.tokens.indexOf(B)!=-1){if(this.o[d]==undefined){this.o[d]=this._numericLocaleFactory.createFNumber();if(d==1){this.o[d].bsign=false}}}else{if(sap.common.globalization.numericFormat.FText.tokens.indexOf(B)!=-1){if(this.o[d]==undefined){this.o[d]=new sap.common.globalization.numericFormat.FText()}}}}}if(this.o[d]==undefined){this.o[d]=this._numericLocaleFactory.createFNumber()}else{this._isParsedSuccess=true}this.o[d].format=z;var g=this.o.length;for(var s=0;s<g;s++){var m=this.o[s];m.condnum=m.condnum||0;if(s==0){m.cond=sap.common.globalization.numericFormat.FT._gthan}else{if(s==1){m.cond=sap.common.globalization.numericFormat.FT._lthan}else{if(s==2){m.cond=sap.common.globalization.numericFormat.FT._equals}}}var C=m.mask;var h=false;z=m.format;t=z.length;for(var v=0;v<t;v++){B=z.charAt(v);if(B=='"'){h=!h;continue}if(B=="\\"){v++;B=z.charAt(v);C.push(B);continue}if(h){C.push(B);continue}if(B=="*"){v++;continue}if(B=="_"){v++;C.push(" ");continue}if(B=="["){n=z.charAt(v+1);k=z.charAt(v+2);if(n=="$"&&k!="-"){var y=z.indexOf("]",v+1);if(y!=-1){var u=z.substring(v+1,y);if(r.indexOf("-")!=-1){u=r.substring(1,r.indexOf("-"))}else{u=r.substring(1)}for(var b=0;b<u.length;++b){C.push(u.charAt(b))}v=y;continue}}else{r=z.substring(v+1);r=r.substring(0,r.indexOf("]")).toLowerCase();if(sap.common.globalization.numericFormat.FT._COLORS[r]!=undefined){m.color=sap.common.globalization.numericFormat.FT._COLORS[r];v+=r.length+1;continue}else{if(r=="h"||r=="m"||r=="s"){}else{var e=1;while(r.charAt(e)!==""&&sap.common.globalization.numericFormat.FT._CONDITION_TOKENS.indexOf(r.charAt(e))!=-1){e++}var p=r.substring(0,e);if(sap.common.globalization.numericFormat.FT._CONDITIONS[p]!=undefined){m.cond=sap.common.globalization.numericFormat.FT._CONDITIONS[p];m.condnum=r.substring(e);v+=r.length+1;this._hasCustomCondition=true;continue}else{v+=r.length+1;continue}}}}}var E=m.parse(z.substring(v));if(E>0){v+=E-1}else{C.push(B)}}}};a.prototype.display=function(d){var f=this.o[0];var b=this.o.length;if(b>3&&sap.common.globalization.utils.BaseUtils.isString(d)){f=this.o[3]}else{if(this._hasCustomCondition&&b>0){if(b<=3){f=this.o[b-1]}else{f=this.o[2]}}for(var e=0;e<3&&e<b;e++){var c=this.o[e];if(c&&c.cond(d,c.condnum)){f=c;break}}}if(!isNaN(f.color)){this.color=f.color}else{this.color=undefined}return(f.display(d))};a.prototype.getNumericDisplayLoacleInfo=function(){return this._numericLocaleFactory.getNumericDisplayLocaleInfo()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTBoolean");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.NumericFormatManager;");sap.common.globalization.require("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FTBoolean=function(c,b){a.FTBoolean.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FTBoolean";c=c||null;b=b||null;this._booleanLocaleFactory=sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory.getInstance()};a.FTBoolean.BOOLEAN_TOKEN="SAP_DEFAULT_BOOLEAN_FORMAT";a.FTBoolean=sap.common.globalization.extend(a.FTBoolean,a.FT);sap.common.globalization.numericFormat.FTBoolean.prototype.parse=function(b){if(b==a.FTBoolean.BOOLEAN_TOKEN){this.o[0]=this}else{this.o[0]=null}};sap.common.globalization.numericFormat.FTBoolean.prototype.display=function(b){var d=String(b);var c=this._booleanLocaleFactory.getBooleanDisplayLocaleInfo();if(c&&this.o[0].__className=="sap.common.globalization.numericFormat.FTBoolean"){if(sap.common.globalization.utils.BaseUtils.isBoolean(b)){d=b?c.trueString():c.falseString()}else{if(sap.common.globalization.utils.BaseUtils.isString(b)&&(String(b).toLowerCase()=="true"||String(b).toLowerCase()=="false")){d=String(b).toLowerCase()=="true"?c.trueString():c.falseString()}}}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.numericFormat.FTimeSep=function(b,a){this._parseLocale=b;this._displayLocale=a};sap.common.globalization.numericFormat.FTimeSep.prototype.parse=function(c,b){var a=b.charAt(0);if(this._displayLocale.IMTimeSeparator()!=null&&(a==":"||a==".")){return 1}else{return 0}};sap.common.globalization.numericFormat.FTimeSep.prototype.display=function(a){return this._displayLocale.IMTimeSeparator()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTUtil");sap.common.globalization.numericFormat.FTUtil.isBooleanFT=function(a){return a&&(a.__className=="sap.common.globalization.numericFormat.FTBoolean")};sap.common.globalization.numericFormat.FTUtil.isDate=function(a){return a&&a.o&&a.o.length>0&&(a.o[0].__className=="sap.common.globalization.numericFormat.FDate")}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");sap.common.globalization.numericFormat.TwoDigitGroupingStrategy=function(){this.__className="sap.common.globalization.numericFormat.TwoDigitGroupingStrategy"};var a=sap.common.globalization.numericFormat.TwoDigitGroupingStrategy;a._instance=new sap.common.globalization.numericFormat.TwoDigitGroupingStrategy();a.prototype.nextGroupDigits=function(){return 1};a.instance=function(){return a._instance}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultCurrencyNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.DefaultGroupingStrategy");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FDefaultCurrencyNumber=function(c,b){sap.common.globalization.numericFormat.FDefaultCurrencyNumber.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FDefaultCurrencyNumber";this._groupingStrategy=a.DefaultGroupingStrategy.instance()};a.FDefaultCurrencyNumber=sap.common.globalization.extend(a.FDefaultCurrencyNumber,a.FNumber);a.FDefaultCurrencyNumber.prototype.display=function(k){if(typeof(k)!="number"){return k}if(isNaN(k)||!isFinite(k)){return k}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(k);var q=new Array();var e=this.mfore.length;var c=3;var m=this.period;var f=(m==-1)?(this.mask.length):m;var g;var o;var p;for(var h=e-1;h>=0;h--){m=this.mfore[h];for(g=f-1;g>m;g--){p=this.mask[g];if((typeof p)=="object"){q.unshift(p.display)}else{q.unshift(p)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}else{var n=this.mask[m].display;if(n.length!=0){if(this.bcomma&&c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}q.unshift(this.mask[m].display)}}f=m}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}}else{q.unshift(this.numfore)}}p=this.mask;if(this.currencyIndex!=-1){h=0}for(g=f-1;g>=0;g--){if((typeof this.mask[g])=="object"){q.unshift(this.mask[g].display)}else{q.unshift(this.mask[g])}}e=this.mask.length;h=(this.period==-1)?(e):(this.period);m=0;for(;h<e;h++){if((typeof p[h])=="object"){if(this.maft[m]==h){m++;if(this.numaft.length>0){q.push(this.numaft.charAt(0));this.numaft=this.numaft.substring(1)}else{q.push(p[h].display)}}else{q.push(p[h].display)}}else{q.push(p[h])}}var b;if(this.bsign){b=this.sign+q.join("")}else{b=q.join("")}return b};a.FDefaultCurrencyNumber.prototype.groupingStrategy=function(b){if(this._groupingStrategy!=b){this._groupingStrategy=b}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultCurrencyNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory=function(b){sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory.superclass.constructor.apply(this,[b]);this.__className="sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory";this._displayCurrencySymbol=null;if(sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat(b)){this._parseCurrencySymbol(b)}};var a=sap.common.globalization.defaultFormat;a.DefaultCurrencyFormatLocaleFactory=sap.common.globalization.extend(a.DefaultCurrencyFormatLocaleFactory,a.DefaultNumericFormatLocaleFactory);a.DefaultCurrencyFormatLocaleFactory.REG_DEFAULT_CURRENCY_FORMAT=new RegExp('^SAP_DEFAULT_CURRENCY_FORMAT(;".*")?$',"i");a.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat=function(b){return a.DefaultCurrencyFormatLocaleFactory.REG_DEFAULT_CURRENCY_FORMAT.test(b)};a.DefaultCurrencyFormatLocaleFactory.prototype.getDefaultCurrencyFormat=function(){return sap.common.globalization.GlobalizationNumericConstant.getDefaultCurrencyFormat()};a.DefaultCurrencyFormatLocaleFactory.prototype._parseCurrencySymbol=function(b){if("SAP_DEFAULT_CURRENCY_FORMAT"==b){this._displayCurrencySymbol=""}else{this._displayCurrencySymbol=b.slice(29,b.length-1)}};a.DefaultCurrencyFormatLocaleFactory.prototype.createFNumber=function(){var b=new sap.common.globalization.numericFormat.FDefaultCurrencyNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo());if(sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry(sap.common.globalization.GlobalizationNumericConstant.getActualLocaleForDefaultCurrencyFormat())){b._groupingStrategy=sap.common.globalization.numericFormat.TwoDigitGroupingStrategy.instance()}return b};a.DefaultCurrencyFormatLocaleFactory.prototype.displayCurrencySymbol=function(){return this._displayCurrencySymbol}})();
(function(global){
    var sap = global.sap;
    var root = sap && sap.viz;
    if(root){
        var metadata = root.api && root.api.metadata;
        if(metadata){
            global.__sap_metadata = metadata;
        }
        __sap_temp_v2 = sap.viz.extapi;

        delete sap.viz.api;
        delete sap.viz.extapi;
    }
})(this);

(function(global) {

    function isModuleReady(moduleName) {
        var temp = global, nameParts = moduleName.split("."), i = 0;
        while (i < nameParts.length && temp !== undefined) {
            temp = temp[nameParts[i++]];
        }
        return temp !== undefined;
    }
    function getModuleByQname(qname){
        var nameParts = qname.split("."), res = global, i;
        for (i = 0; i < nameParts.length; i++) {
            res = res[nameParts[i]];
        }
        return res;
    }
    function apiDef(apiname, def) {
        var res = global, i, nameParts = apiname.split("."), len = nameParts.length;
        nameParts.reduce(function(p, c, i) {
            p[c] = p[c] || (i < len - 1 || !def ? {} : def);
            return p[c];
        }, global);
        return getModuleByQname(apiname);
    }

    var templateQueue = {};
    var languageQueue = [];
    apiDef("sap.viz.extapi.env", {
        template:{
            _queue : templateQueue
        },
        language:{
            _queue : languageQueue
        }
    });

    function genManifestFuncOnModule(moduleQname, funcname, queue){
        return function(item){
            if (isModuleReady(moduleQname)) {
                getModuleByQname(moduleQname)[funcname](item);
            } else {
                queue && queue.push(item);
            }
        };
    }

    function pushItemToQueue(queue){
    	return function(item){
    		queue && queue.push(item);
    	};
    }

    apiDef("sap.viz.extapi.env.Template", {
        register : function(templateDef) {
            templateQueue[templateDef.id] = templateQueue[templateDef.id] || [];
            templateQueue[templateDef.id].push(templateDef);
        }
    });
    apiDef("sap.viz.extapi.env.Language", {
        register : pushItemToQueue(languageQueue)
    });
    // make sure sap.viz.api namespace exists, it is used for VERSION in all in one build
	apiDef("sap.viz.api");

	apiDef("sap.viz.extapi.core");
})(this);
sap.viz.extapi.env.Language.register({id:'language',value: {IDS_ERROR_NEED_SPECIFY_OPTIONS_TO_INITIALIZE:"You must specify the chart or component options to initialize.",IDS_ERROR_EXIST_CATEGORY_NAME:"A category named {0} already exists.",IDS_ERROR_CATEGORY_NAME_NOT_EMPTY:"The category name must be a non-empty string.",IDS_ERROR_SDK_VERSION_DOES_NOT_MATCH:"[{0}] requires sap.viz.api's version is equal to or greater than {1}; While the current version of sap.viz.api is {2}.",IDS_ERROR_AXIS_ALREADY_EXIST:"Axis {0} already exists.",IDS_ERROR_NODE_NOT_IN_SAME_ROOT:"Node is not in the same root.",IDS_ERROR_INVALID_PATH_DEFINITION:"Invalid path definition: {0}.",IDS_ERROR_UNKNOWN_ERROR:"Unknown error.",IDS_ERROR_DATE_HAVE_INVALID_FORMAT:"Some dates do not have the correct format",IDS_ERROR_NOT_INITIALIZE_WITHOUT_UICONTROLLER:"Cannot initialize without a root UIController <DIV>.",IDS_FEED:"feed",IDS_ERROR_FLATTABLE_MANNUAL_FEED_WRONG_BINDING:"Field IDs in manual feeding are missing or are not in array format.",IDS_ERROR_CUSTOMIZATION_ID:"Customization {0} does not exist for chart type {1}.",IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES:"Could not accept more than 2 axes",IDS_ERROR_WRONG_MEASURE_AXIS_INDEX:"The measure axis index in the feed definition {0} is incorrect.",IDS_ERROR_NOT_ADD_SELF_AS_CHILD:"An ID cannot add itself as a child.",IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2:"Axis index should be 1 or 2",IDS_ERROR_NO_AXIS:"Could not find axis {0} in the dataset {1} feed.",IDS_ERROR_CHART_TYPE_FOR_CUSTOMIZATION:"Chart type {0} does not support customization API. ",IDS_ERROR_FLATTABLE_FEED_DEF_FIELD_INDEX_MISSING:"The field index in feed definition {0} is missing.",IDS_ERROR_NOT_FIND_JQUERY:"Cannot find 'jQuery' library",IDS_ERROR_NEED_SPECIFY_HOLDER_FOR_VISUALIZATION:"The target <DIV> is not specified for rendering the visualization.",IDS_ERROR_NOT_FIND_MEASURE_GROUP:"Could not find measure values group {0} in the dataset {1} feed.",IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING:"The dimensions/measures binding is duplicated.",IDS_ERROR_UNKNOWN_STATE:"Unknown state",IDS_ERROR_FEED_NOT_ACCEPT_DATA:"Feed {0} could not accept more data containers.",IDS_ERROR_NOT_ADD_ANCESTOR_AS_CHILD:"Cannot add ancestor as a child",IDS_ALREADY_EXISTS:"{0} already exists",IDS_ERROR_NODE_DIV_IN_SVG:"Cannot add <div> tag under <svg> tag.",IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION:"The category factory must be a function.",IDS_ERROR_WRONG_AXIS_INDEX:"The analysis axis index in the feed definition {0} is incorrect.",IDS_ERROR_NOT_FIND_FEED_DEFINITION:"Could not find the feed definition of {0}.",IDS_ERROR_DATA_NOT_MATCHING_TIME_LEVEL:"Invalid data. Multiple data in the same minimum time interval.",IDS_ERROR_NEED_PROVIDE_CONTAINER_FOR_FRAME:"You must provide a container <DIV> for the visualization.",IDS_ERROR_LOADING_TEMPLATE_FAIL:"Loading template {0} failed.",IDS_ERROR_NOT_DETERMINE_AXIS_INDEX:"Could not determine measure value axis index",IDS_ERROR_NOT_DETERMINE_DEMENSION:"Cannot determine the dimension after transform is applied",IDS_WRONG_MISSINGEXTENSIONMETADATA:"Extension metadata is incomplete.",IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2:"The values count {0} in the second analysis axis (aa2) should be {1}.",IDS_ERROR_CAN_NOT_FIND_CATEGORY:"Cannot find {0} in category {1}.",IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1:"The values count {0} in the first analysis axis (aa1) should be {1}.",IDS_ERROR_NOT_CREATE_CHAIN_FOR_NON_FUNCTION_OBJECT:"Could not create a call chain for a non-function object.",IDS_ERROR_ALREADY_EXIST_IN_CATEGORY:"There is already an item named {0} in category {1}.",IDS_ERROR_NOT_ACCEPT:"Could not accept {0}",IDS_ERROR_INVALID_BINDING:"Invalid data binding",IDS_ERROR_NODE_IS_NOT_CHILD_OF_THIS_NODE:"Node is not a child of this node",IDS_ERROR_NOT_CHILD_NODE_INSERT:"The node to be inserted is not a child of this node.",IDS_ERROR_DIMENSION_NOT_ZERO:"Length of dimension cannot be zero.",IDS_ERROR_INVALID_CONTEXT_NAME:"{0} is not a valid data ID.  ",IDS_WARN_PARAMETER_NOT_CORRECT:"Input parameter is not correct.",IDS_ERROR_INVALID_FEEDING_NUMBER:"Invalid feeding: the correct number  is {0} feed.",IDS_ERROR_SELECTOR_NOT_NULL:"Selector string cannot be null.",IDS_ERROR_DIMENSION_NOT_FOUND:"dimension index {0} not found",IDS_WRONG_EXTENSIONVERSION:"Extension is not supported by current SDK version.",IDS_ERROR_DIMENSION_WRONG_COUNT:"{0} is an incorrect dimension count.",IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING:"Incomplete dimensions binding.",IDS_ERROR_FLATTABLE_INVALID_DATA_PARAM:"Invalid parameter, parameter must have metadata and data.",IDS_ERROR_WRONG_FEED_TYPE:"The feed type of {0} is incorrect.",IDS_ERROR_NO_FEED_ID:"Invalid feeding: no feed ID",IDS_ERROR_INVALIDE_DATA_DESCRIPTION:"The dataset does not match the selected time levels.",IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION:"The feed type in the feed definition {0} is incorrect.",IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID:"Cannot register without a valid ID.",IDS_ERROR_INVALID_FEEDING:"Invalid feeding: the feed {0} has exceeded the maximum stacked dimension number.",IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT:"{0} is an incorrect dimension labels count.",IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT:"Cannot register a undefined object.",IDS_ERROR_WRONG_TYPE:"Data type is incorrect.",IDS_ERROR_NOT_MEET_NUMBER_OF_FEED:"{0} : does not meet the minimum or maximum number of feeds definition.",IDS_ERROR_NOT_SUPPORTED:"Not supported",IDS_WARN_LOCALE_NOT_CORRECT:"Input locale is not correct.",IDS_ERROR_BUNDLE_VERSION_DOES_NOT_MATCH:"Failed to initialize [{0}], which requires a version equal to or greater than {1}. The current version is {2}.",IDS_ERROR_ISNODATA:"No data",IDS_ERROR_INVALIDE_DATA:"Invalid data",IDS_ERROR_PARSE_ERROR_EXPECT_TO:"An error occurred when parsing {0}; it should be: {1}.",}});
(function (global) {
    // cache global require & define
    sap.viz.moduleloader.originalDefine = global.define;
    sap.viz.moduleloader.originalRequire = global.require;
    sap.viz.moduleloader.originalRequirejs = global.requirejs;

    // replace with sap.viz.moduleloader.require/define
    global.define = sap.viz.moduleloader.define;
    global.require = sap.viz.moduleloader.require.config({
        context: 'info'
    });
    global.requirejs = require;
})(this);

define('sap/viz/framework/common/util/TypeUtils',[],
    function Setup() {
        var class2type = {
            '[object Boolean]': 'boolean',
            '[object Number]': 'number',
            '[object String]': 'string',
            '[object Function]': 'function',
            '[object Array]': 'array',
            '[object Date]': 'date',
            '[object RegExp]': 'regexp',
            '[object Object]': 'object'
        };

        var hasOwn = Object.prototype.hasOwnProperty;
        // Used for trimming whitespace
        var rdigit = /\d/;

        var type = function(obj) {
            return obj == null ? String(obj) : class2type[Object.prototype.toString.call(obj)] || "object";
        };

        /**
         * Type Utilities for common variable type related tasks
         *
         * @name sap.viz.base.utils.TypeUtils
         * @class
         */
        var typeUtils = {

            /**
             * Returns a boolean value indicating whether the parameter is of type
             * function
             *
             * @param {object}
             * @returns {boolean}
             */
            // See test/unit/core.js for details concerning isFunction.
            // Since version 1.3, DOM methods and functions like alert
            // aren't supported. They return false on IE (#2968).
            isFunction: function(obj) {
                return type(obj) === "function";
            },

            /**
             * Returns a boolean value indicating whether the parameter is of type
             * array
             *
             * @param {object}
             * @returns {boolean}
             */
            isArray: Array.isArray || function(obj) {
                return type(obj) === "array";
            },

            /**
             * Returns a boolean value indicating whether the parameter is of type
             * string
             *
             * @param {object}
             * @returns {boolean}
             */
            isString: function(obj) {
                return type(obj) === "string";
            },

            /**
             * Returns a boolean value indicating whether the parameter is a
             * non-empty string
             *
             * @param {object}
             * @returns {boolean}
             */
            isNonEmptyString: function(obj) {
                return this.isString(obj) && obj.length !== 0;
            },


            /**
             * Returns a boolean value indicating whether the parameter is NaN
             *
             * @param {object}
             * @returns {boolean}
             */
            isNaN: function(obj) {
                return obj === null || obj === undefined || !rdigit.test(obj) || isNaN(obj);
            },

            /**
             * Returns a boolean value indicating whether the parameter is a number
             *
             * @param {object}
             * @returns {boolean} 
             * 
             * Caution: isNumber(Infinity) returns false;
             * Caution: isNumber([0,1]) returns true.
             */
            isNumber: function(n) {
                return !typeUtils.isNaN(parseFloat(n)) && isFinite(n);
            },
            
            /**
             * Returns a boolean value indicating whether the parameter is a number
             * This method fixed an issue of TypeUtils.isNumber, where an array with 
             * all numeric elements will be considered as a number. 
             * 
             * @param {object}
             * @returns {boolean} Caution: isNumeric(Infinity) returns false.
             */
            isNumeric: function(n) {
                return !typeUtils.isArray( n ) && (n - parseFloat( n ) + 1) >= 0;
            },

            
            /**
             *  return if binary bit mask set   
             */
            isSet: function(mode, mark){
                return Boolean(mode & mark);
            },

            /**
             * Returns a boolean value indicating whether the parameter is defined
             *
             * @param {object}
             * @returns {boolean}
             */
            isDefined: function(v) {
                return typeof(v) !== 'undefined';
            },

            /**
             * Returns a boolean value indicating whether the parameter is undefined
             *
             * @param {object}
             * @returns {boolean}
             */
            isUndefined: function(v) {
                return typeof(v) === 'undefined';
            },

            /**
             * Returns a boolean value indicating whether the parameter is a plain
             * object
             *
             * @param {object}
             * @returns {boolean} Caution: A plain object is an object that has no
             *          prototype method and no parent class. Null, undefined, DOM
             *          nodes and window object are not considered as plain object.
             */
            isPlainObject: function(obj) {
                // Must be an Object.
                // Because of IE, we also have to check the presence of the
                // constructor property.
                // Make sure that DOM nodes and window objects don't pass through,
                // as well
                if (!obj || type(obj) !== "object" || obj.nodeType || (obj && typeof obj === "object" &&
                    "setInterval" in obj)) {
                    return false;
                }

                // Not own constructor property must be Object
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype,
                    "isPrototypeOf")) {
                    return false;
                }

                // Own properties are enumerated firstly, so to speed up,
                // if last one is own, then all properties are own.

                var key;
                for (key in obj) {} // jshint ignore:line

                return key === undefined || hasOwn.call(obj, key);
            },

            /**
             * Returns a boolean value indicating whether the parameter is an empty
             * object
             *
             * @param {object}
             * @returns {boolean} Caution: An empty is a plain object without any
             *          properties.
             */
            isEmptyObject: function(obj) {
                for (var name in obj) {
                    if (obj.hasOwnProperty(name)) {
                        return false;
                    }

                }
                return typeUtils.isPlainObject(obj);
            },

            equals: function(x, y) {
                var p;
                if (x === y) {
                    return true;
                }
                if (!(x instanceof Object) || !(y instanceof Object) || (x.constructor !== y.constructor)) {
                    return false;
                }

                for (p in x) {
                    if (x.hasOwnProperty(p)) {

                        if (!y.hasOwnProperty(p)) {
                            return false;
                        }
                        if (x[p] === y[p]) {
                            continue;
                        }
                        if (typeof(x[p]) !== "object" || !typeUtils.equals(x[p], y[p])) {
                            return false;
                        }
                    }
                }

                for (p in y) {
                    if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) {
                        {
                            return false;
                        }
                    }
                }
                return true;
            },

            /**
             * Returns a boolean value indicating whether the parameter is undefined or null
             *
             * @param {object}
             * @returns {boolean}
             */
            isExist: function(o) {
                if ((typeof(o) === 'undefined') || (o === null)) {
                    {
                        return false;
                    }
                }
                return true;
            }
        };

        return typeUtils;
    });
define('sap/viz/framework/common/log/Logger',[],
    function Setup() {
        var noop = function() {};
        Date.now = Date.now || function() {
            return +new Date();
        };

        function getLevel() {
            return this.threshold;
        }

        function setLevel(level) {
            if (typeof level === "string") {
                this.threshold = levelStr2Int(level);
            } else if (typeof level === "number") {
                this.threshold = level;
            }
        }

        /**
         * Append log message  into the browse console.
         *
         * @name ConsoleAppender
         * @property  {Number} threshold  The log level number.
         * @property  {DefaultLayout} layout  The log layout format class.
         * @property {function} print The console output function.
         * @method  ConsoleAppender#doAppend
         * @method  ConsoleAppender#setLayout
         * @method  ConsoleAppender#getLevel
         * @method  ConsoleAppender#setLevel
         */
        var ConsoleAppender = function() {
            this.threshold = Logger.LEVEL.INFO;
            this.layout = new Logger.DefaultLayout();
            this.print = typeof console !== undefined ? function(msg) {
                window.console.log(msg);
            } : noop;
        };
        ConsoleAppender.prototype = {
            doAppend: function(logTime, logLevel, logCate, logMsg) {
                this.print(this.layout.format(logTime, logLevel, logCate, logMsg));
            },
            setLayout: function(layout) {
                if (layout.format) {
                    this.layout = layout;
                }
            },
            getLevel: getLevel,
            setLevel: setLevel
        };

        /**
         * The default layout class  ConsoleAppender as console format.
         *
         * @name DefaultLayout
         */

        var DefaultLayout = function() {
            // this.df = Logger.dateFormatter;
        };
        DefaultLayout.prototype.format = function(logTime, logLevel, logCate, logMsg) {
            return "[" + logTime + "]" + "[" + getLevelStr(logLevel) + "]" + "[" + (logCate || "main") + "]-" + logMsg;
        };

        /**
         * Append log message on the DIV page.
         *
         * @name DivAppender
         * @property  {Number} threshold  The log level number.
         * @property  {HTMLLayout} layout  The log layout format class.
         * @property {<Div>} div The html div tag to display the log message.
         * @method  DivAppender#doAppend
         * @method  DivAppender#getLevel
         * @method  DivAppender#setLevel
         */
        var DivAppender = function(div) {
            //        if(!$) {  //remove jQuery dependency.
            //            throw "need jQuery";
            //        }
            this.threshold = Logger.LEVEL.INFO;
            //        this.divSl = $(div);  //remove jQuery dependency.
            this.div = div;
            this.layout = new HTMLLayout();
        };
        DivAppender.prototype = {
            getLevel: getLevel,
            setLevel: setLevel,
            doAppend: function(logTime, logLevel, logCate, logMsg) {
                //            this.divSl.append(this.layout.format(logTime, logLevel, logCate, logMsg));
                this.div.insertAdjacentHTML('beforeend',this.layout.format(logTime, logLevel, logCate, logMsg));
            }
        };

        /**
         * The layout class specified for DivAppender as html page format.
         *
         * @name HTMLLayout
         */
        var HTMLLayout = function() {
            // this.df = Logger.dateFormatter;
        };
        HTMLLayout.prototype = {
            format: function(logTime, logLevel, logCate, logMsg) {
                return "<div>[" + logTime + "]" + "[" + getLevelStr(logLevel) + "][" + (logCate ||
                    "main") + "]-" + logMsg + "</div>";
            }
        };
        var FifoBuffer = function() {
            this.array = [];
        };

        FifoBuffer.prototype = {

            /**
             * @param {Object} obj any object added to buffer
             */
            push: function(obj) {
                this.array[this.array.length] = obj;
                return this.array.length;
            },
            /**
             * @return first putted in Object
             */
            pull: function() {
                if (this.array.length > 0) {
                    var firstItem = this.array[0];
                    for (var i = 0; i < this.array.length - 1; i++) {
                        this.array[i] = this.array[i + 1];
                    }
                    this.array.length = this.array.length - 1;
                    return firstItem;
                }
                return null;
            },
            length: function() {
                return this.array.length;
            }
        };
        /**
         * Append log message to a remote file via ajax call.
         *
         * @name AjaxAppender
         * @property  {Number} threshold  The log level number.
         * @property  {String} loggingUrl The ajax call url.
         * @property  {Boolean} isInProgress  The process state of ajax call.
         * @property  {Number} bufferSize  Once the log messages reaches the number, it will perform to send ajax call.
         * @property  {Number} timeout  The delayed time to send the ajax call request.
         * @property  {Arrary} loggingEventMap  The array stored the log messages.
         * @property  {JSONLayout} layout  The specified layout for AjaxAppender.
         * @property  {Arrary} loggingEventMap  The array stored the log messages.
         * @property  {httpRequest} httpRequest  The httpRequest to send ajax call.
         * @method  AjaxAppender#doAppend
         * @method  AjaxAppender#getLevel
         * @method  AjaxAppender#setLevel
         * @method  AjaxAppender#send
         * @method  AjaxAppender#onReadyStateChanged
         * @method  AjaxAppender#getXmlHttpRequest
         */

        var AjaxAppender = function(url) {
            this.loggingUrl = url;
            this.isInProgress = false;
            this.threshold = Logger.LEVEL.INFO;
            this.bufferSize = 20;
            this.timeout = 2000;
            this.loggingEventMap = [];
            this.layout = new Logger.JSONLayout();
            this.httpRequest = null;
            this.timer = undefined;
        };

        function tryAppend() {
            var appender = this;
            if (this.isInProgress === true) {
                setTimeout(function() {
                    tryAppend.call(appender);
                }, 100);
            } else {
                this.send();
            }
        }

        AjaxAppender.prototype = {
            getLevel: getLevel,
            setLevel: setLevel,
            doAppend: function(logTime, logLevel, logCate, logMsg) {
                this.loggingEventMap.push([logTime, logLevel, logCate, logMsg]);
                if (this.loggingEventMap.length <= this.bufferSize || this.isInProgress === true) {
                    var appender = this;
                    if (this.timer === undefined) {
                        this.timer = setTimeout(function() {
                            tryAppend.call(appender);
                        }, 100);
                    }
                }

                if (this.loggingEventMap.length >= this.bufferSize && this.isInProgress === false) {
                    //if bufferSize is reached send the events and reset current bufferSize
                    if (this.timer !== undefined) {
                        window.clearTimeout(this.timer);
                    }
                    this.send();
                }
            },
            send: function() {
                if (this.loggingEventMap.length > 0) {
                    this.isInProgress = true;
                    var a = [];
                    var loggingEvent;
                    for (var i = 0, lml = this.loggingEventMap.length; i < lml && i < this.bufferSize; i++) {
                        loggingEvent = this.loggingEventMap.shift();
                        a.push(this.layout.format(loggingEvent[0], loggingEvent[1], loggingEvent[2], loggingEvent[3]));
                    }

                    var content = this.layout.getHeader();
                    content += a.join(this.layout.getSeparator());
                    content += this.layout.getFooter();

                    var appender = this;
                    if (this.httpRequest === null) {
                        this.httpRequest = this.getXmlHttpRequest();
                    }
                    this.httpRequest.onreadystatechange = function() {
                        appender.onReadyStateChanged.call(appender);
                    };

                    this.httpRequest.open("POST", this.loggingUrl, true);
                    // set the request headers.
                    this.httpRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                    this.httpRequest.setRequestHeader("Content-length", content.length);
                    //this.httpRequest.setRequestHeader("Content-type", this.layout.getContentType());
                    this.httpRequest.send(content);
                    appender = this;

                    try {
                        setTimeout(function() {
                            appender.httpRequest.onreadystatechange = function() {};
                            appender.httpRequest.abort();
                            //this.httpRequest = null;
                            appender.isInProgress = false;

                            if (appender.loggingEventMap.length > 0) {
                                appender.send();
                            }
                        }, this.timeout);
                    } catch (e) {}
                }
            },
            onReadyStateChanged: function() {
                var req = this.httpRequest;
                if (this.httpRequest.readyState !== 4) {
                    return;
                }

                var success = ((typeof req.status === "undefined") || req.status === 0 ||
                    (req.status >= 200 && req.status < 300));

                if (success) {

                    //ready sending data
                    this.isInProgress = false;

                } else {}
            },
            getXmlHttpRequest: function() {

                var httpRequest = false;

                try {
                    if (window.XMLHttpRequest) { // Mozilla, Safari, IE7...
                        httpRequest = new window.XMLHttpRequest();
                        if (httpRequest.overrideMimeType) {
                            httpRequest.overrideMimeType(this.layout.getContentType());
                        }
                    } else if (window.ActiveXObject) { // IE
                        try {
                            httpRequest = new window.ActiveXObject("Msxml2.XMLHTTP");
                        } catch (e) {
                            httpRequest = new window.ActiveXObject("Microsoft.XMLHTTP");
                        }
                    }
                } catch (e) {
                    httpRequest = false;
                }

                if (!httpRequest) {
                    throw "browser don't support AJAX";
                }

                return httpRequest;
            }
        };

        /**
         * The layout class specified for AjaxAppender as JSON format.
         *
         * @name JSONLayout
         */
        var JSONLayout = function() {

        };
        JSONLayout.prototype = {
            /**
             * Implement this method to create your own layout format.
             * @param {Log4js.LoggingEvent} loggingEvent loggingEvent to format
             * @return formatted String
             * @type String
             */
            format: function(logTime, logLevel, logCate, logMsg) {

                var jsonString = "{\n \"LoggingEvent\": {\n";
                jsonString += "\t\"category\": \"" + (logCate || "main") + "\",\n";
                jsonString += "\t\"level\": \"" + getLevelStr(logLevel) + "\",\n";
                jsonString += "\t\"message\": \"" + logMsg + "\",\n";
                // jsonString += "\t\"referer\": \"" + referer + "\",\n";
                // jsonString += "\t\"useragent\": \"" + useragent + "\",\n";
                jsonString += "\t\"timestamp\": \"" + logTime + "\"\n";
                jsonString += "}\n}";

                return jsonString;
            },
            /**
             * Returns the content type output by this layout.
             * @return The base class returns "text/xml".
             * @type String
             */
            getContentType: function() {
                return "text/json";
            },
            /**
             * @return Returns the header for the layout format. The base class returns null.
             * @type String
             */
            getHeader: function() {
                var useragent = "unknown";
                try {
                    useragent = window.navigator.userAgent;
                } catch (e) {
                    useragent = "unknown";
                }

                var referer = "unknown";
                try {
                    referer = window.location.href;
                } catch (e) {
                    referer = "unknown";
                }
                return "{" + "\"ClientInfo\" : {\n" + "\t\"useragent\": \"" + useragent + "\",\n" +
                    "\t\"referer\": \"" + referer + "\"\n},\n" + "\"VizLogger\": [\n";
            },
            /**
             * @return Returns the footer for the layout format. The base class returns null.
             * @type String
             */
            getFooter: function() {
                return "\n]}";
            },
            getSeparator: function() {
                return ",\n";
            }
        };

        /**
         * Get the XMLHttpRequest object independent of browser.
         * @private
         */
        var XMLLayout = function() {
            // this.df = Logger.dateFormatter;
        };
        XMLLayout.prototype = {
            format: function(logTime, logLevel, logCate, logMsg) {

                var content = "<vizLogger:event category=\"";
                content += (logCate || "main") + "\" level=\"";
                content += getLevelStr(logLevel) + "\" timestamp=\"";
                content += logTime + "\">\n";
                content += "\t<vizLogger:message><![CDATA[" + this.escapeCdata(logMsg) + "]]></vizLogger:message>\n";
                content += "</vizLogger:event>";

                return content;
            },
            /**
             * Returns the content type output by this layout.
             * @return The base class returns "text/xml".
             * @type String
             */
            getContentType: function() {
                return "text/xml";
            },
            /**
             * @return Returns the header for the layout format. The base class returns null.
             * @type String
             */
            getHeader: function() {
                var useragent = "unknown";
                try {
                    useragent = window.navigator.userAgent;
                } catch (e) {
                    useragent = "unknown";
                }

                var referer = "unknown";
                try {
                    referer = window.location.href;
                } catch (e) {
                    referer = "unknown";
                }
                return "<vizLogger:eventSet useragent=\"" + useragent + "\" referer=\"" +
                    referer.replace(/&/g, "&amp;") + "\">\n";
            },
            /**
             * @return Returns the footer for the layout format. The base class returns null.
             * @type String
             */
            getFooter: function() {
                return "</vizLogger:eventSet>\n";
            },
            getSeparator: function() {
                return "\n";
            },
            /**
             * Escape Cdata messages
             * @param str {String} message to escape
             * @return {String} the escaped message
             * @private
             */
            escapeCdata: function(str) {
                return str.replace(/\]\]>/, "]]>]]&gt;<![CDATA[");
            }
        };

        function getLevelStr(levelInt) {
            switch (levelInt) {
                case Logger.LEVEL.TRACE:
                    return "TRACE";
                case Logger.LEVEL.DEBUG:
                    return "DEBUG";
                case Logger.LEVEL.INFO:
                    return "INFO";
                case Logger.LEVEL.WARN:
                    return "WARN";
                case Logger.LEVEL.ERROR:
                    return "ERROR";
            }
        }

        function levelStr2Int(levelStr) {
            switch (levelStr.toLowerCase()) {
                case "trace":
                    return Logger.LEVEL.TRACE;
                case "debug":
                    return Logger.LEVEL.DEBUG;
                case "info":
                    return Logger.LEVEL.INFO;
                case "warn":
                    return Logger.LEVEL.WARN;
                case "error":
                    return Logger.LEVEL.ERROR;
            }
        }
        var enabled = false;
        var paused = false;
        var MaxBufferSize = 2000;
        var doLog = function(level, category, message, loggerLevel) {
            for (var appenderKey in appenders) {
                if (appenders.hasOwnProperty(appenderKey)) {
                    var appender = appenders[appenderKey];
                    var PnRAppender = appender.hasOwnProperty('profiling') && level <= levelSetting.DEBUG;
                    // pnr Appender (reference to sap.viz.base.utils.log.Analyzer), pnr default level is DEBUG.
                    if (PnRAppender || (appender.threshold >= loggerLevel && level >= appender.threshold)) {
                        // ONLY appender.threshold >= loggerLevel
                        appender.doAppend(Date.now(), level, category, message);
                    }
                }
            }
        };
        var awakeThenLog = function(level, category, message) {
            resume();
            doLog(level, category, message);
        };
        var log = noop;
        var pause = function() {
            paused = true;
            log = awakeThenLog;
        };
        var resume = function() {
            paused = false;
            log = doLog;
        };
        // id for appender
        var id = 0;
        var nextId = function() {
            return id++;
        };
        var appenders = {};
        /*
         * singleton Logger
         *
         */
        var levelSetting = {
            TRACE: 5000,
            DEBUG: 10000,
            INFO: 20000,
            WARN: 30000,
            ERROR: 40000,
            NO: Number.MAX_VALUE
        };
        var Logger = {
            LEVEL: levelSetting,
            isEnabled: function() {
                return enabled;
            },
            enable: function() {
                log = doLog;
                enabled = true;
            },
            disable: function() {
                log = noop;
                enabled = false;
            },
            toggleEnable: function() {
                if (enabled) {
                    this.disable();
                } else {
                    this.enable();
                }
            },
            addAppender: function( /*[key,] appender*/ ) {
                var _nextId = nextId();
                var key, appender;
                if (arguments.length === 1) {
                    key = _nextId;
                    appender = arguments[0];
                } else if (arguments.length >= 2) {
                    key = arguments[0];
                    appender = arguments[1];
                }
                if (typeof appender === "object" && appender.doAppend) {
                    if (appenders[key] !== undefined) {
                        return;
                    }
                    appenders[key] = appender;
                    return key;
                }

            },
            setAppenders: function(apds) {
                appenders = [];
                for (var i = 0, l = apds.length; i < l; i++) {
                    var appender = apds[i];
                    if (appender.appenderKey) {
                        this.addAppender(appender.appenderKey, appender.appender);
                    } else {
                        this.addAppender(appender.appender);
                    }
                }
            },
            removeAppender: function(key) {
                if (appenders[key] === undefined) {
                    return false;
                } else {
                    return (delete appenders[key]);
                }
            },
            getAppender: function(key) {
                return appenders[key];
            },
            getAppenders: function() {
                var appenderArray = [];
                if (appenders) {
                    for (var key in appenders) {
                        if (appenders.hasOwnProperty(key)) {
                            var item = appenders[key];
                            appenderArray.push(item);
                        }
                    }
                }
                return appenderArray;
            },
            ConsoleAppender: ConsoleAppender,
            DivAppender: DivAppender,
            AjaxAppender: AjaxAppender,
            //[time][level][category]-message [yyyy-MM-ddThh:mm:ss:ms][INFO][function1]-this is a piece of log.
            DefaultLayout: DefaultLayout,
            HTMLLayout: HTMLLayout,
            XMLLayout: XMLLayout,
            JSONLayout: JSONLayout,
            level: levelSetting.NO, // default log level.
            trace: function(message, category) {
                log(Logger.LEVEL.TRACE, category, message, this.level);
            },
            debug: function(message, category) {
                log(Logger.LEVEL.DEBUG, category, message, this.level);
            },
            info: function(message, category) {
                log(Logger.LEVEL.INFO, category, message, this.level);
            },
            warn: function(message, category) {
                log(Logger.LEVEL.WARN, category, message, this.level);
            },
            error: function(message, category) {
                log(Logger.LEVEL.ERROR, category, message, this.level);
            }
        };
        appenders["[default]"] = new Logger.ConsoleAppender();
        return Logger;
    });

define('sap/viz/framework/common/util/FunctionUtils',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/log/Logger'],
    function Setup(TypeUtils, Logger) {
        var msgparas = /\{(\d+)\}/g;
        var ArraySlice = Array.prototype.slice;

        function emptyFn() {}

        function error(msg) {
            var args = arguments, message;
            if (args[0]) {
                message = args[0].replace(msgparas, function(m, n) {
                    return args[parseInt(n) + 1];
                });
            } else {
                message = 'Unknown error!';
            }
            Logger.error(message);
            throw message;
        }

        function logWarnning(msg) {
            var args = arguments, message;
            if (args[0]) {
                message = args[0].replace(msgparas, function(m, n) {
                    return args[parseInt(n) + 1];
                });
            } else {
                message = 'Unknown warnning!';
            }
            Logger.warn(message);
            if (window.console) {
                window.console.warn(message);
            }
        }

        function createCallChain() {
            var callChain = [];

            function ChainedFunc() {
                for (var i = 0, len = callChain.length; i < len; i++) {
                    callChain[i].apply(this, arguments);
                }
            }

            function buildChain() {
                for (var i = 0, len = arguments.length; i < len; i++) {
                    if (TypeUtils.isFunction(arguments[i])) {
                        callChain.push(arguments[i]);
                    } else {
                        Logger.error('Could not create call chain for non-function object');
                        throw 'Could not create call chain for non-function object';
                    }
                }
            }
            ChainedFunc.chain = function() {
                return createCallChain.apply(null, [].concat(callChain, ArraySlice.call(arguments)));
            };
            buildChain.apply(null, arguments);
            return ChainedFunc;
        }

        var funcUtils = {
            /**
             * empty function
             *
             * @name sap.viz.base.utils.FunctionUtils#noop
             * @function
             */
            noop: emptyFn,

            /**
             * Function throwing unsupported exception with constant error message,
             * or make a new function which could throw exception with specified
             * error message
             *
             * @name sap.viz.base.utils.FunctionUtils#unsupported
             * @function
             *
             * @param {String}
             *            (msg)
             * @return {Function}
             * @throw {Error}
             */
            unsupported: function(msg) {
                if (arguments.length) {
                    return function() {
                        throw new Error(msg || 'Unsupported function!');
                    };
                } else {
                    throw new Error('Unsupported function!');
                }
            },

            /**
             * function throwing unimplemented exception
             *
             * @name sap.viz.base.utils.FunctionUtils#unimplemented
             * @function
             */
            unimplemented: function(msg) {
                if (arguments.length) {
                    return function() {
                        throw new Error(msg || 'Unimplemented function!');
                    };
                } else {
                    throw new Error('Unimplemented function!');
                }
            },

            /**
             * function throwing error
             *
             * @name sap.viz.base.utils.FunctionUtils#error
             * @param {String}
             *            msg the error message
             * @function
             */
            error: error,

            /**
             * function logging warnning, not throw
             *
             * @name sap.viz.base.utils.FunctionUtils#logWarnning
             * @param {String}
             *            msg the warning message
             * @function
             */
            logWarnning: logWarnning,

            /**
             * Return a number comparator for ascendent sorting
             *
             * @param a
             * @param b
             * @returns todo
             */
            ascending: function(a, b) {
                return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
            },
            /**
             * Return a number comparator for descendent sorting
             *
             * @param a
             * @param b
             * @returns todo
             */
            descending: function(a, b) {
                return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
            },

            createCallChain: createCallChain
        };

        return funcUtils;
    });
define('sap/viz/framework/common/util/ObjectUtils',['sap/viz/framework/common/util/TypeUtils'], function Setup(TypeUtils) {
    // JSON RegExp
    var rvalidchars = /^[\],:{}\s]*$/,
        rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
        rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
        rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;

    //TypeUtils.isPlainObject is too slow. Using this function instead.

    var class2type = {
        '[object Boolean]': 'boolean',
        '[object Number]': 'number',
        '[object String]': 'string',
        '[object Function]': 'function',
        '[object Array]': 'array',
        '[object Date]': 'date',
        '[object RegExp]': 'regexp',
        '[object Object]': 'object',
        '[object Error]': 'error'
    };

    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;

    var type = function(obj) {
        if ( obj == null ) {
            return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ?
            class2type[ toString.call(obj) ] || "object" :
            typeof obj;
    };

    var isPlainObject = function(obj) {

        if (!obj || type(obj) !== "object" || obj.nodeType || (obj && typeof obj === "object" &&
            "setInterval" in obj)) {
            return false;
        }

        // Not own constructor property must be Object
        if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype,
            "isPrototypeOf")) {
            return false;
        }

        return true;
    };

    /**
     * Frequently used object utilities
     *
     * @name sap.viz.base.utils.ObjectUtils
     * @class
     */
    var ObjectUtils = {
        // Copy from jQuery
        extend: function() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

            // Handle a deep copy situation
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                // skip the boolean and the target
                i = 2;
            }

            // Handle case when target is a string or something (possible in
            // deep
            // copy)
            if (typeof target !== "object" && !TypeUtils.isFunction(target)) {
                target = {};
            }

            // extend jQuery itself if only one argument is passed
            if (length === i) {
                target = this;
                --i;
            }

            for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[i]) != null) {
                    // Extend the base object
                    for (name in options) {
                        if (options.hasOwnProperty(name)) {
                            src = target[name];
                            copy = options[name];

                            // Prevent never-ending loop
                            if (target === copy) {
                                continue;
                            }

                            // Recurse if we're merging plain objects or arrays
                            if (deep && copy && (isPlainObject(copy) || (copyIsArray = TypeUtils.isArray(
                                copy)))) {
                                if (copyIsArray) {
                                    copyIsArray = false;
                                    clone = src && TypeUtils.isArray(src) ? src : [];

                                } else {
                                    clone = src && isPlainObject(src) ? src : {};
                                }
                                // Never move original objects, clone them
                                target[name] = ObjectUtils.extend(deep, clone, copy);
                                // Don't bring in undefined values
                            } else if (copy !== undefined) {
                                target[name] = copy;
                            }
                        }
                    }
                }
            }
            // Return the modified object
            return target;
        },

        // in this version, when target is array, just use src replace target
        extendByRepalceArray: function() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

            // Handle a deep copy situation
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                // skip the boolean and the target
                i = 2;
            }

            // Handle case when target is a string or something (possible in
            // deep
            // copy)
            if (typeof target !== "object" && !TypeUtils.isFunction(target)) {
                target = {};
            }

            // extend itself if only one argument is passed
            if (length === i) {
                target = this;
                --i;
            }

            for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[i]) !== null) {
                    // Extend the base object
                    for (name in options) {
                        if (options.hasOwnProperty(name)) {
                            src = target[name];
                            copy = options[name];

                            // Prevent never-ending loop
                            if (target === copy) {
                                continue;
                            }

                            // Recurse if we're merging plain objects or arrays
                            // in this version, when target is array, just src replace target
                            if (deep && copy && (isPlainObject(copy))) {
                                if (copyIsArray) {
                                    copyIsArray = false;
                                    clone = src && TypeUtils.isArray(src) ? src : [];

                                } else {
                                    clone = src && isPlainObject(src) ? src : {};
                                }
                                // Never move original objects, clone them
                                target[name] = ObjectUtils.extendByRepalceArray(deep, clone, copy);
                                // Don't bring in undefined values
                            } else if (copy !== undefined) {
                                target[name] = copy;
                            }
                        }
                    }
                }
            }
            // Return the modified object
            return target;
        },

        // args is for internal usage only
        each: function(object, callback, args) {
            var name, i = 0,
                length = object.length,
                isObj = length === undefined || TypeUtils.isFunction(object);

            if (args) {
                if (isObj) {
                    for (name in object) {
                        if (callback.apply(object[name], args) === false) {
                            break;
                        }
                    }
                } else {
                    for (; i < length;) {
                        if (callback.apply(object[i++], args) === false) {
                            break;
                        }
                    }
                }

                // A special, fast, case for the most common use of each
            } else {
                if (isObj) {
                    for (name in object) {
                        if (callback.call(object[name], name, object[name]) === false) {
                            break;
                        }
                    }
                } else {
                    for (var value = object[0]; i < length && callback.call(value, i, value) !== false; value =
                        object[++i]) {}
                }
            }
            return object;
        },

        parseJSON: function(data) {
            if (typeof data !== "string" || !data) {
                return null;
            }

            // Make sure leading/trailing whitespace is removed (IE can't handle
            // it)
            data = data.trim();

            // Make sure the incoming data is actual JSON
            // Logic borrowed from http://json.org/json2.js
            if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(
                rvalidbraces, ""))) {

                // Try to use the native JSON parser
                return window && window.JSON && window.JSON.parse && window.JSON.parse(data); // jshint ignore:line

            } else {
                TypeUtils.error("Invalid JSON: " + data);
            }
        },

        /**
         * Generate a guid
         *
         * @name sap.viz.base.utils.ObjectUtils#guid
         * @function
         * @return {String}
         */
        guid: function() { // guid generator
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : r & 0x3 | 0x8;
                return v.toString(16);
            });
        },

        /**
         * Clone object
         * @param {obj} clone source
         * @param {isFullClone} clone all the items even undefined in the array
         */
        clone: function _clone(obj, isFullClone) {
            if (typeof(obj) !== 'object') {
                return obj;
            }
            if (obj === null) {
                return obj;
            }
            var isArray = TypeUtils.isArray(obj);
            var o = isArray ? [] : {};
            var i;
            if (isArray && isFullClone) {
                for (i = 0; i < obj.length; i ++) {
                    o[i] = typeof obj[i] === "object" ? _clone(obj[i], isFullClone) : obj[i];
                }
            } else {
                for (i in obj) {
                    if (obj.hasOwnProperty(i)) {
                        if(obj[i] instanceof Date) {
                            o[i] = new Date(obj[i]);
                        }
                        else {
                            o[i] = typeof obj[i] === "object" ?
                                    _clone(obj[i], isFullClone) : obj[i];
                        }
                    }
                }
            }
            return o;
        },

        deepEqual: function(source, target) {
            if (typeof source === 'object' && typeof target === 'object') {
                var key = null;
                for (key in source) {
                    if (source.hasOwnProperty(key)) {
                        if (!target || !target.hasOwnProperty(key)) {
                            return false;
                        } else if (!this.deepEqual(source[key], target[key])) {
                            return false;
                        }
                    }
                }
                for (key in target) {
                    if (target.hasOwnProperty(key)) {
                        if (!source || !source.hasOwnProperty(key)) {
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return source === target;
            }
        },

        leftEqual: function(source, target) {
            if (typeof source === 'object' && typeof target === 'object') {
                var key = null;
                for (key in source) {
                    if (source.hasOwnProperty(key)) {
                        if (!target.hasOwnProperty(key)) {
                            return false;
                        } else if (!this.leftEqual(source[key], target[key])) {
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return source === target;
            }
        },

        hasElement: function(array, element) {
            for (var i = 0; i < array.length; i++) {
                if (this.deepEqual(array[i], element)) {
                    return true;
                }
            }
            return false;
        },

        /**
         * Set value to a name path that starts from a base object
         * @param {string} name
         * @param {*} value
         * @param {object} [base=window]
         * @param {string} [separator='.']
         */
        setObject: function(name, value, base, separator) {
            for (var i = 0, parts = name.split(separator || '.'), last = parts.length - 1, p = base || window,
                    c;
                (c = parts[i]); ++i) {
                if (i < last) {
                    p[c] = p[c] || {};
                } else {
                    p[c] = value;
                }
                p = p[c];
            }
        },

        /**
         * Get value of a name path that starts from a base object
         * @param {string} name
         * @param {object} [base=window]
         * @param {string} [separator='.']
         * @returns {*} return undefined if path not found
         */
        getObject: function(name, base, separator) {
            for (var i = 0, parts = name.split(separator || '.'), last = parts.length - 1, p = base || window,
                    c;
                (c = parts[i]); ++i) {
                if (i < last && !p[c]) {
                    return undefined;
                }
                p = p[c];
            }
            return p;
        }
    };
    return ObjectUtils;
});
define('sap/viz/framework/common/lang/LangMessageUtil',[],
    function Setup() {

        var number2IDS = {

            // ERROR start with 50000.
            50000: 'IDS_ERROR_DIMENSION_NOT_ZERO',
            50001: 'IDS_ERROR_DIMENSION_WRONG_COUNT',
            50002: 'IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT',
            50003: 'IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',
            50004: 'IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1',
            50005: 'IDS_ERROR_NOT_MEET_NUMBER_OF_FEED',
            50006: 'IDS_ERROR_WRONG_FEED_TYPE',
            50007: 'IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION',
            50008: 'IDS_ERROR_WRONG_AXIS_INDEX',
            50009: 'IDS_ERROR_WRONG_MEASURE_AXIS_INDEX',
            50010: 'IDS_ERROR_INVALID_FEEDING',
            50011: 'IDS_ERROR_NO_FEED_ID',
            50012: 'IDS_ERROR_INVALID_FEEDING_NUMBER',
            50013: 'IDS_ERROR_NO_AXIS',
            50014: 'IDS_ERROR_FEED_NOT_ACCEPT_DATA',
            50015: 'IDS_ERROR_NOT_FIND_MEASURE_GROUP',
            50016: 'IDS_ERROR_NOT_ACCEPT',
            50017: 'IDS_ERROR_INVALID_BINDING',
            50018: 'IDS_ERROR_NOT_FIND_FEED_DEFINITION',
            50019: 'IDS_ERROR_WRONG_TYPE',
            50020: 'IDS_ERROR_NOT_SUPPORTED',
            50021: 'IDS_ERROR_NOT_DETERMINE_AXIS_INDEX',
            50022: 'IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES',
            50023: 'IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2',
            50024: 'IDS_ERROR_NOT_DETERMINE_DEMENSION',
            50025: 'IDS_ERROR_UNKNOWN_STATE',
            50026: 'IDS_ERROR_INVALID_PATH_DEFINITION',
            50027: 'IDS_ERROR_NODE_NOT_IN_SAME_ROOT',
            50028: 'IDS_ERROR_NOT_ADD_SELF_AS_CHILD',
            50029: 'IDS_ERROR_NOT_ADD_ANCESTOR_AS_CHILD',
            50030: 'IDS_ERROR_NOT_CHILD_NODE_INSERT',
            50031: 'IDS_ERROR_NODE_IS_NOT_CHILD_OF_THIS_NODE',
            50032: 'IDS_ERROR_SELECTOR_NOT_NULL',
            50033: 'IDS_ERROR_NOT_FIND_JQUERY',
            50034: 'IDS_ERROR_NEED_SPECIFY_OPTIONS_TO_INITIALIZE',
            50035: 'IDS_ERROR_NEED_SPECIFY_HOLDER_FOR_VISUALIZATION',
            50036: 'IDS_ERROR_NOT_INITIALIZE_WITHOUT_UICONTROLLER',
            50037: 'IDS_ERROR_NEED_PROVIDE_CONTAINER_FOR_FRAME',
            50038: 'IDS_ERROR_CATEGORY_NAME_NOT_EMPTY',
            50039: 'IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION',
            50040: 'IDS_ERROR_EXIST_CATEGORY_NAME',
            50041: 'IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT',
            50042: 'IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID',
            50043: 'IDS_ERROR_UNKNOWN_ERROR',
            50044: 'IDS_ERROR_NOT_CREATE_CHAIN_FOR_NON_FUNCTION_OBJECT',
            50045: 'IDS_ERROR_AXIS_ALREADY_EXIST',
            50046: 'IDS_ERROR_CAN_NOT_FIND_CATEGORY',
            50047: 'IDS_ERROR_ALREADY_EXIST_IN_CATEGORY',
            50048: 'IDS_ERROR_LOADING_TEMPLATE_FAIL',
            50049: 'IDS_ERROR_PARSE_ERROR_EXPECT_TO',
            50050: 'IDS_ERROR_FLATTABLE_FEED_DEF_FIELD_INDEX_MISSING',
            50051: 'IDS_ERROR_FLATTABLE_MANNUAL_FEED_WRONG_BINDING',
            50052: 'IDS_ERROR_FLATTABLE_INVALID_DATA_PARAM',
            50053: 'IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING',
            50054: 'IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING',
            50055: 'IDS_ERROR_CUSTOMIZATION_ID',
            50056: 'IDS_ERROR_CHART_TYPE_FOR_CUSTOMIZATION',
            50057: 'IDS_ERROR_DIMENSION_NOT_FOUND',
            50058: 'IDS_ERROR_SDK_VERSION_DOES_NOT_MATCH',
            50059: 'IDS_ERROR_BUNDLE_VERSION_DOES_NOT_MATCH',
            50060: 'IDS_ERROR_DATA_NOT_MATCHING_TIME_LEVEL',
            50061: 'IDS_ERROR_DATE_HAVE_INVALID_FORMAT',
            // warning
            40000: 'IDS_WARN_PARAMETER_NOT_CORRECT',
            40001: 'IDS_WARN_LOCALE_NOT_CORRECT'

        };


        var IDS2Number = null;
        /**
         * create a map for message key to message code.
         */
        function getIDS2NumberMapping() {
            if (IDS2Number == null && number2IDS) {
                IDS2Number = {};
                for (var num in number2IDS) {
                    if (number2IDS.hasOwnProperty(num)) {
                        IDS2Number[number2IDS[num]] = num;
                    }
                }
            }
            return IDS2Number;

        }

        var langMessageUtil = {
            /**
             * Register number/IDS pair for message globalization.
             *
             * @param {Number}
             *          message code.
             * @param {String}
             *          the key string of message content.
             */
            register: function(number, IDS) {
                if (IDS2Number === null) {
                    IDS2Number = getIDS2NumberMapping();
                }
                if (number2IDS && number2IDS.hasOwnProperty(number) === false && IDS2Number.hasOwnProperty(IDS) ===
                    false) {
                    number2IDS[number] = IDS;
                    IDS2Number[IDS] = number;
                } else {
                    // TODO: handle the number or IDS exists.
                }
            },

            /**
             * Get the message key by message code.
             *
             * @param {Number}
             *          message code.
             * @returns {String}
             *          the key string of message content.
             */
            getIDSByNumber: function(num) {
                if (number2IDS && number2IDS.hasOwnProperty(num)) {
                    return number2IDS[num];
                } else {
                    return undefined;
                }
            },
            /**
             * Get the message code by message key.
             *
             * @param {String}
             *          message key.
             * @returns {number}
             *          message code.
             */
            getNumberByIDS: function(IDS) {
                if (IDS2Number === null) {
                    IDS2Number = getIDS2NumberMapping();
                }
                if (IDS2Number && IDS2Number.hasOwnProperty(IDS)) {
                    return IDS2Number[IDS];
                } else {
                    return undefined;
                }
            }

        };
        return langMessageUtil;
    });
define('sap/viz/framework/common/util/DOM',[],function() {
    var DOM = {
        remove: function(node){
            if (node && node.parentNode){
                node.parentNode.removeChild(node);
            }
        },
        empty: function(node) {
            var temp;
            while ((temp = node.firstChild)) {
                node.removeChild(temp);
            }
            return node;
        },
        matches: function(node, selector) {
            return (node.matches || node.webkitMatchesSelector ||
                node.msMatchesSelector || node.mozMatchesSelector).call(node,
                selector);
        },
        hasClass: function(node, clz) {
            if (!node || !node.getAttribute) {
                return false;
            }
            var nodeClz = node.getAttribute('class') || "";
            return (' ' + nodeClz + ' ').indexOf(' ' + clz + ' ') >= 0;
        },
        getBrowserComputedStyle: function(target, styleName) {
            var style = window.getComputedStyle ?
                // w3c
                window.getComputedStyle(target, null) :
                // ie
                target.currentStyle;

            return styleName ? style[styleName] : style;
        },
        parent: function(node, selector) {
            if (selector) {
                var parent = node.parentNode;
                while(parent.parentNode /* filter out the window.document root */) {
                    if (DOM.matches(parent, selector)) {
                        return parent;
                    }
                    parent = parent.parentNode;
                }
                return null;
            } else {
                return node.parentNode;
            }
        }
    };

    return DOM;
});

define( "jquery", [], function () { return jQuery; } );

define('sap/viz/framework/common/util/ResourceLoader',[
    'sap/viz/framework/common/util/DOM',
    'sap/viz/framework/common/util/ObjectUtils',
    'jquery'
], function(
    DOM,
    ObjectUtils,
    $
    ) {
    var SCRIPT_TYPE = 1,
        STYLESHEET_TYPE = 2;

    // Load a script tag to current page
    function loadScript(url, type, onComplete) {
        var done = 0;
        var head = document.getElementsByTagName("head")[0] || document.documentElement;
        var script;
        if (type == SCRIPT_TYPE) {
            script = document.createElement("script");
            script.type = 'text/javascript';
            script.src = url;
        } else if (type == STYLESHEET_TYPE) {
            onComplete();
            return;
        }

        function complete(err) {
            //clear script
            script.onload = script.onreadystatechange = null;
            DOM.remove(script);
            onComplete(err);
        }

        script.onload = script.onreadystatechange = function() {
            if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                done = 1;
                complete();
            }
        };

        if (script.addEventListener) {
            script.addEventListener('error', complete, true);
        }

        if (head.firstChild) {
            head.insertBefore(script, head.firstChild);
        } else {
            head.appendChild(script);
        }
    }

    var loadingMap = {};
    var loadedUrls = {};

    // Load resource on single path
    function loadForPath(path, id, onComplete, args) {
        function loadForId(id) {
            var urlData = args.getUrl(path, id),
                isObjFlag = typeof urlData === 'object';
            var url = urlData, 
                hasCssFile = false, 
                originalPath = urlData;
            if (isObjFlag) {
                url = urlData.path;
                hasCssFile = urlData.hasCssFile;
                originalPath = urlData.originalPath;
            }
            
            var link, cssFlag = false;
            if (args.getCssFile && hasCssFile) {
                link = args.getCssFile(path, id).path;
                cssFlag = true;
            }
            if (loadedUrls[url]) {
                onComplete(originalPath, id);
            } else {
                loadScript(url, SCRIPT_TYPE, function(err) {
                    if (err) {
                        if (args.degrade) {
                            id = args.degrade(id);
                            if (id) {
                                loadForId(id);
                                return;
                            }
                        }
                        if (cssFlag) {
                            loadScript(link, STYLESHEET_TYPE, function(err2) { 
                                onComplete(originalPath, id, err2, true);
                            });  
                        } else {
                            onComplete(originalPath, id, err);
                        }   
                    } else {
                        loadedUrls[url] = 1;
                        //FIXME (by eddy.zeng) temporary change, since we're using require.js in jsonp, 
                        //delay call callback to make sure jsonp content evaluated before trying to get
                        //language content from setting map.
                        if (cssFlag) {
                            loadScript(link, STYLESHEET_TYPE, function(error) { 
                                setTimeout(function() {
                                    onComplete(originalPath, id, error, true);
                                }, 4);
                            });  
                        } else {
                            setTimeout(function() {
                                onComplete(originalPath, id);
                            }, 4);
                        }    
                    }
                });
            }
        }
        loadForId(id);
    }

    // Load resource on multiple paths
    // example:
    // loadResource({
    //      id: "en_US",
    //      paths: ["path/to/resoruce", "another/path/to/resource"],
    //      degrade: function(id){
    //          // An optional function to degrade to another id if the given id failed to load resource file.
    //          // return another id
    //      },
    //      onPathComplete: function(path, effectiveId, error){
    //          // Callback when one path is loaded
    //          // If degrade is called, effectiveId != id
    //      },
    //      onComplete: function(errors){
    //          // Callback when every path are loaded.
    //          // errors is an array containing error reports on failed paths.
    //          // Each item in errors is of the following format:
    //          // {
    //          //      path: '...'
    //          //      id: effectiveId,
    //          //      err: error object
    //          // }
    //      }
    // });
    function loadResource(args) {
        var id = args.id;
        var paths = args.paths || [];
        var errors = [];
        var uuid = id + "_" + ObjectUtils.guid();

        // load counter for specific uuid
        loadingMap[uuid] = paths.length;

        function onLoadedForPath(path, effectiveId, err, cssFlag) {
            if (err) {
                errors.push({
                    path: path,
                    id: effectiveId,
                    err: err
                });
            } else if (cssFlag) {
                errors.push({
                    path: path,
                    id: effectiveId,
                    cssFlag: cssFlag
                });
            }
            if (args.onPathComplete) {
                args.onPathComplete(path, effectiveId, err);
            }
            if (--loadingMap[uuid] === 0 && args.onComplete) {
                args.onComplete(errors, id);
            }
        }

        if(paths.length){
            for (var i = 0; i < paths.length; ++i) {
                loadForPath(paths[i], id, onLoadedForPath, args);
            }
        }else if(args.onComplete){
            args.onComplete(errors, id);
        }
    }

    return {
        loadScript: loadScript,
        loadResource: loadResource
    };
});

define('sap/viz/framework/common/lang/LangManager',[
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/lang/LangMessageUtil',
    'sap/viz/framework/common/util/ResourceLoader'
], function(FunctionUtils, ObjectUtils, LangMessageUtil, ResourceLoader) {

    var listeners = [];
    var languageSetting = {};

    var placeHolder = 'language';
    languageSetting[placeHolder] = {};

    var languageQueue;
    if (window.sap && sap.viz && sap.viz.extapi && sap.viz.extapi.env &&
        sap.viz.extapi.env.language && sap.viz.extapi.env.language._queue) {
        languageQueue = sap.viz.extapi.env.language._queue;
        delete sap.viz.extapi.env.language;
    }

    /**
     * substitute the localized string for resource bundle.
     * @private
     * @example
     *      substitute('The ID {0} is not a valid number', 'NOT_NUMBER')
     * @returns {String} replacedString
     */
    var substitute = function(str /*String*/ , rest /*Array*/ ) {
        if (str == null) {
            return '';
        }

        if (!rest) {
            rest = [];
        }
        var len = rest.length;
        for (var i = 0; i < len; i++) {
            str = str.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
        }
        return str;
    };

    var manager = {
        /** @lends sap.viz.lang.langManager */

        /**
         * The file paths of language folder.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @default ["../../../resources/langs/charts/", "../../../resources/langs/sdk"], by default it contains charts
           and sdk language resource.
         * if only contains sap.viz.skd, only reset loadPath for sdk.
         */
        loadPath: [
            "../../../resources/langs/charts/",
            "../../../resources/langs/sdk/"
        ],

        /**
         * File name template of the language resource. ${lang} can be used in the template to represent the language
           name.
         * @default "language_${lang}.js"
         */
        fileNameTemplate: 'language_${lang}.js',

        /**
         * Alias language name mapping. The mapper name will not be tried at all. The mapped name will be used instead.
         * @type Object?
         */
        alias: {
            "ar_AE": "ar",
            "ar_EG": "ar",
            "ar_SA": "ar",

            "bg_BG": "bg",

            "ca_ES": "ca",

            "cs_CZ": "cs",

            "da_DK": "da",

            "de_CH": "de",
            "de_AT": "de",
            "de_BE": "de",
            "de_LU": "de",
            "de_DE": "de",

            "el_CY": "el",
            "el_GR": "el",

            "en_AU": "en",
            "en_CA": "en",
            "en_GB": "en",
            "en_HK": "en",
            "en_ID": "en",
            "en_IE": "en",
            "en_IN": "en",
            "en_IS": "en",
            "en_MY": "en",
            "en_NZ": "en",
            "en_PH": "en",
            "en_SG": "en",
            "en_US": "en",
            "en_ZA": "en",

            "es_AR": "es",
            "es_BO": "es",
            "es_CL": "es",
            "es_CO": "es",
            "es_ES": "es",
            "es_MX": "es",
            "es_PE": "es",
            "es_UY": "es",
            "es_VE": "es",

            "et_EE": "et",

            "fa_IR": "fa",

            "fi_FI": "fi",

            "fr_BE": "fr",
            "fr_CA": "fr",
            "fr_CH": "fr",
            "fr_FR": "fr",
            "fr_LU": "fr",

            "he_IL": "iw",
            "he": "iw",

            "hi_IN": "hi",

            "hr_HR": "hr",

            "hu_HU": "hu",

            "id_ID": "id",

            "it_CH": "it",
            "it_IT": "it",

            "ja_JP": "ja",

            "ko_KR": "ko",

            "lt_LT": "lt",

            "lv_LV": "lv",

            "nb_NO": "nb",

            "nl_BE": "nl",
            "nl_NL": "nl",

            "nn_NO": "nn",

            "pl_PL": "pl",

            "pt_BR": "pt",
            "pt_PT": "pt",

            "ro_RO": "ro",

            "ru_KZ": "ru",
            "ru_RU": "ru",
            "ru_UA": "ru",

            "sh_ME": "sr",
            "sh_RS": "sr",

            "sk_SK": "sk",

            "sl_SL": "sl",
            "sl_SI": "sl",

            "sv_SE": "sv",

            "th_TH": "th",

            "tr_CY": "tk",
            "tr_TR": "tk",

            "uk_UA": "uk",

            "vi_VI": "vi",
            "vi_VN": "vi",

            "zf_TW": "zh_TW",
            "zh_HK": "zh_CN",
            "zh"   : "zh_CN"
        },

        /**
         * Special degrade rules. By default, "xx_yy" degrads to "xx", and "xx" degrads to the default language "en".
         */
        //degrade: {},

        /**
         * Default language
         * If a specific language does not exists, will degrade to this default language.
         * @default 'en'
         */
        defaultLanguage: 'en',

        /**
         * Current language
         */
        currentLanguage: 'en',

        /**
         * Return current applied language Id.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead.
         * @returns {String}
         */
        current: function() {
            return manager.currentLanguage;
        },

        /**
         * Register new language.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           register instead.
         * @param {Object...}
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        register: function(obj) {
            languageSetting[obj.id] = ObjectUtils.extend(true, languageSetting[obj.id], obj.value);
            return manager;
        },

        /**
         * Apply(switch) language.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.api.env.Language.set instead.
         * @param {String}
         *          id the language id
         * @param {Function}
         *          [callback] the call back function.
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        apply: function(id, callback, failedCallback, options) {
            if(options && options.isLoaded){
                manager.currentLanguage = id;
                if (callback) {
                    callback();
                }
                return manager;
            }
            var aliasId = alias(id);
            var errMsgs = [];

            function onPathComplete(path, effectiveId, err) {
                var errMsg;

                if (!effectiveId) {
                    errMsg = 'Failed to load language ' + id + ' from path ' + path + '.';
                } else if (aliasId !== effectiveId) {
                    errMsg = 'Language ' + id + ' is degraded to ' + effectiveId + ' for path ' + path + '.';
                }

                if (errMsg) {
                    errMsgs.push(errMsg);
                    try {
                        FunctionUtils.error(errMsg);
                    } catch (e) {
                        // Not a fatal error.
                    }
                }
            }

            function onComplete() {
                takeinDefQueue();

                if (errMsgs.length && failedCallback) {
                    failedCallback(id, errMsgs.join('\n'));
                }

                // Honor user's input
                manager.currentLanguage = id;

                // Find the currently effective language resource and pass it to listeners
                id = aliasId;
                var language = languageSetting[id];
                while (!language) {
                    id = degrade(id);
                    language = id && languageSetting[id];
                }

                for (var i = 0; i < listeners.length; ++i) {
                    var listener = listeners[i];
                    listener.fn.apply(listener.scope, [language]);
                }

                // fail to load language will be handled by failedCallback,
                if (callback) {
                    callback();
                }
            }

            if (aliasId) {
                ResourceLoader.loadResource({
                    id: aliasId,
                    paths: manager.loadPath,
                    getUrl: getUrl,
                    degrade: degrade,
                    onPathComplete: onPathComplete,
                    onComplete: onComplete
                });
            } else {
                takeinDefQueue();
            }
            return manager;
        },

        /**
         * Get globalization value.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.api.env.Language.get instead.
         * @param {String}
         *       id of labels
         *
         * @returns {String}  globalization value
         */
        get: function(ids, lang) {
            var id = alias(lang || manager.currentLanguage);
            var language = languageSetting[id];
            var result = language && language[ids];

            while (id && id !== placeHolder && typeof result !== 'string') {
                id = degrade(id);
                language = id && languageSetting[id];
                result = language && language[ids];
            }

            return result || '';
        },

        /**
         * Get log id and globalization log message.
         * @ignore
         *
         * @param {...Object}
         *       key of log message
         *       variables in the log message
         * @example
         *      // return Invalid feeding: the correct number  is 2.
         *      getLogMessage('IDS_ERROR_INVALID_FEEDING_NUMBER', 2);
         *
         * @returns {String}  log id and globalization log message.
         */
        getLogMessage: function(ids) {
            var num = LangMessageUtil.getNumberByIDS(ids);
            var message = manager.get(ids);

            // Substitute the resouce boundle
            // e.g: ('Invalid feeding: the correct number  is {0}.', '2')
            if (arguments.length > 1) {
                message = substitute(message, Array.prototype.slice.call(arguments, 1));
            }

            return (num ? '[' + num + '] - ' : '') + message;
        },

        /**
         * Get log globalization message value by ID.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead.
         * @param {Number}
         *       message code.
         *
         * @returns {String}  globalization log message value
         */
        getLogMessageByID: function(num) {
            var ids = LangMessageUtil.getIDSByNumber(num);
            if (!ids) {
                FunctionUtils.error('Not exist the log ID {0}.', num);
            }
            return manager.get(ids);
        },

        /**
         * Add language folder path before load language file if the language folder is not default.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @param {String}
         *       folder of language files.
         *
         * @returns {Arrary}  all folders of language files.
         */
        addLanguageFolder: function(folder) {
            manager.loadPath.push(folder);
            return manager.loadPath;
        },

        /**
         * Add a listener which will be executed when current language is changed.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           addListener instead.
         * @param {Object}
         *          listener
         * @param {Function}
         *          listener.fn the listener function
         * @param {Object}
         *          listener.scope the "this" object in the listener function
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        addListener: function(listener) {
            listeners.push(listener);
            return manager;
        },

        /**
         * Remove the listener.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           removeListener instead.
         * @param {Object} listener
         *          the listener reference
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        removeListener: function(listener) {
            var index = listeners.indexOf(listener);
            if (index >= 0) {
                listeners.splice(index, 1);
            }
            return manager;
        }
    };

    function normalizeLangName(id) {
        return String(id).replace(/-/g, '_');
    }

    function alias(id) {
        id = normalizeLangName(id);
        return (manager.alias && manager.alias[id]) || id;
    }

    function degrade(id) {
        var degradeMap = manager.degrade;
        if (degradeMap && degradeMap[id]) {
            return degradeMap[id];
        }

        var matched = String(id).match(/^([a-zA-Z]+)([_-][a-zA-Z]+)?$/);
        if (matched) {
            var mainLang = matched[1].toLowerCase();

            if (matched[2]) {
                return mainLang;
            } else if (mainLang !== placeHolder) {
                return placeHolder;
            }
        }
        return null;
    }

    function getUrl(path, id) {
        path = /\/$/.test(path) ? path : path + '/';
        var fileName = id === placeHolder ?
                placeHolder + '.js' :
                manager.fileNameTemplate.replace(/\$\{lang\}/gi, id);
        return path + fileName;
    }

    //take in register queue
    function takeinDefQueue() {
        if (languageQueue) {
            for (var i = 0; i < languageQueue.length; ++i) {
                manager.register(languageQueue[i]);
            }
            // For multiple require contexts to work.
            //sap.viz.extapi.manifest._queue.language.registerList = [];
        }
    }

    takeinDefQueue();
    return manager;
});

define('sap/viz/framework/core/ChartPropertyRegistry',[], function() {
    /**
     * stores property metadata:
     * {
     *      properties:{},
     *      metadata: {
     *          extendTitle: true/false,
     *          extendLegend: true/false
     *      }
     * } 
     */
    var _properties = {};
    var VALID_PROPERTY_META_ENTRIES = {
        "supportedValueType": false,
        "supportedValues": false,
        "defaultValue": true,
        "readonly": true,
        "serializable": true,
        "description": false
    };

    function isPropertyObject(obj) {
        for(var prop in obj) {
            if(obj.hasOwnProperty(prop) && !(prop in VALID_PROPERTY_META_ENTRIES)) {
                return false;
            }
        }
        return true;
    }

    /**
     * copy properties object recursively, and filter out invalid property metadata
     * @param  {Object} properties to copy
     * @return {Object} the copied properties
     */
    function copy(properties) {
        var ret, prop;
        if(properties instanceof Object) {
            ret = {};
            if(isPropertyObject(properties)) {
                for(prop in properties) {
                    if(properties.hasOwnProperty(prop) && VALID_PROPERTY_META_ENTRIES[prop]) {
                        ret[prop] = properties[prop];
                    }
                }
            } else {
                for(prop in properties) {
                    if(properties.hasOwnProperty(prop)) {
                        ret[prop] = copy(properties[prop]);
                    }
                }
            }
            return ret;
        } else {
            return properties;
        }
    }

    function register(type, properties, metadata) {
        var prop = _properties[type] || {};
        prop.properties = copy(properties);
        prop.metadata = metadata || {};
        _properties[type] = prop;
    }

    // Will never return null values
    function get(type) {
        return _properties[type] || {
            isEmpty: true,
            properties: {},
            metadata: {}
        };
    }

    function unregister(type) {
        _properties[type] = undefined;
    }

    return {
        register: register,
        unregister: unregister,
        get: get
    };
});
define('sap/viz/framework/common/util/oo',[], function() {
    var oo = {};

    oo.extend = function(subClz, superClz) {
        var subClzPrototype = subClz.prototype;

        // add the superclass prototype to the subclass definition
        subClz.superclass = superClz.prototype;

        // copy prototype
        var F = function() {};
        F.prototype = superClz.prototype;

        subClz.prototype = new F();
        for (var prop in subClzPrototype) {
            if (subClzPrototype.hasOwnProperty(prop)) {
                subClz.prototype[prop] = subClzPrototype[prop];
            }
        }
        subClz.prototype.constructor = subClz;
        if (superClz.prototype.constructor === Object.prototype.constructor) {
            superClz.prototype.constructor = superClz;
        }
        return subClz;
    };

    return oo;
});
define('sap/viz/framework/property/PropertyManager',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/ObjectUtils"
], function(TypeUtils, ObjectUtils) {

    var isFunction = TypeUtils.isFunction;
    var isArray = TypeUtils.isArray;

    var configKeywords = {
        customizeValue: 1,
        value: 1,
        appValue: 1,
        templateValue: 1,
        defaultValue: 1,
        set: 1,
        get: 1,
        readonly: 1,
        serializable: 1,
        serialize: 1,
        compare: 1,
        watchers: 1,
        access: 1
    };

    var defaultValueStack = [
        'value',
        'templateValue',
        'defaultValue'
    ];

    /**
     * Manage property CRUD operations.
     * The purpose of PropertyManager is to provide a central place for public
     * property access and management. Note that if a property is only
     * accessible by a module itself, it need not be put into property manager.
     * @class
     */
    function PropertyManager() {
        this._props = {};
        this._cache = {};
        this._watchers = {};
        this._flag = 0;
        this._flags = {};
        this.origin = this;
        this._valueStack = defaultValueStack;
        // this property is used when set/reset/serialize values, it's a default attr value if attr is not specified.
        this._defaultValueAttr = undefined;
    }

    /**
     * Check whether it is a valid property value.
     * A valid property value can be set to or get from a property.
     * @param {anything} it
     * @return {boolean}
     */
    PropertyManager.isValidValue = function(it){
        if(!isValue(it)){
            // if it has property which is included in configKeywords, it is not a valid value.
            for(var keyword in configKeywords){
                if(configKeywords.hasOwnProperty(keyword) && it.hasOwnProperty(keyword)){
                    return false;
                }
            }
        }
        return true;
    };

    var prot = PropertyManager.prototype;

    /**
     * Property name level separator
     */
    prot.separator = '.';

    /**
     * Add a new property to this manager, or override an existing property.
     * @param {string} key - the name of the property
     * @param {object} [config] - configuration of this property
     * {
     *      value: user value (level 0, the highest level)
     *      appValue: application value (level 1)
     *      templateValue: template value (level 2)
     *      defaultValue: default value (level 3, the lowest level)
     *      readonly: {Boolean} whether this prop is readonly
     *      serializable: {Boolean} whether this prop is serializable.
     *      get: {Function(value, config):void} user defined get function
     *      set: {Function(value, config):anything} user defined set function
     *      filter: {Function(key, value):boolean} user defined filter function to judge whether to serialize a prop
     *      serialize: {Function(value):anything} user defined serialize function
     *      compare: {Function(a, b):boolean} user defined compare function to check whether a value is changed
     * }
     * @param {boolean} [safe] - if true, existing properties (or prefix) won't be overrided
     * @example
     * propMgr.add("some.prop");
     * propMgr.add("some.prop", { readonly: true });
     * propMgr.add({
     *    "some.prop": { readonly: true }
     * });
     * propMgr.add({
     *    "some": {
     *        "prop": { readonly: true },
     *        "other.prop": { serializable: false }
     *    }
     * });
     * propMgr.add({
     *     "some": {
     *         "prop": "default value"
     *     }
     * });
     */
    prot.add = function(key, config, safe, flag) {
        if (typeof key === 'string') {
            if(key){
                if (this._prefix) {
                    key = this._prefix + this.separator + key;
                }
                addProp(this, key, config, safe, flag);
            }
        } else {
            var obj = key;
            flag = safe;
            safe = config;
            if (this._prefix) {
                var tmp = obj;
                obj = {};
                obj[this._prefix] = tmp;
            }
            addAll(this, obj, '', safe, flag);
        }
    };

    /**
     * Remove a property
     * @param {string} key - the name of the property
     */
    prot.remove = function(key) {
        key = getKey(this, key);
        if (this._allow(key, 'remove')) {
            delete this._props[key];
            // clear watchers
            delete this._watchers[key];
            // clear flag
            delete this._flags[key];

            // also clear all caches for this key
            var parts = parts || key.split(this.separator);
            var prefix = '';
            for(var i = 0; i < parts.length; ++i){
                prefix = prefix ? prefix + this.separator + parts[i] : parts[i];
                var cache = this._cache[prefix];
                if(cache && cache[key]){
                    delete cache[key];
                }
                if(prefix === key){
                    delete this._cache[prefix];
                }
            }
        }
    };

    /**
     * Get/set the current flag of this manager.
     * If any flag exists, this manager only operates on the properties that were added with the matching flag.
     * @param {number} flag - a set of flags represented by bit map.
     * @return {number}
     */
    prot.flag = function(flag, isAdd){
        if(typeof flag === 'number'){
            flag = parseInt(flag, 10);
            this._flag = isAdd ? this._flag | flag : flag;
        }
        return this._flag;
    };

    /**
     * Get an array of property names with the given prefix
     * @param {string} [prefix] - a common prefix of property names
     * @return {array} property full names
     */
    prot.names = function(prefix) {
        prefix = getPrefix(this, prefix);
        var result = [];
        var storage = getCache(this, prefix);
        for (var key in storage) {
            if (storage.hasOwnProperty(key) && this._allow(key, 'names')){
                result.push(key);
            }
        }
        return result;
    };

    /**
     * Check whether a property exists
     * @param {string} key - the name of the property
     * @param {string} [attr] - if provided, check whether the specified attribute exists
     * @return {boolean} whether this property exists
     */
    prot.has = function(key, attr) {
        key = getKey(this, key);
        if(this._allow(key, 'has', attr)){
            var config = this._props[key];
            if (config && configKeywords[attr]) {
                return config.hasOwnProperty(attr);
            }
            return !!config;
        }
        return false;
    };

    /**
     * Get/set the value stack of this manager.
     * The default value stack is (from the hightest level to the lowest level):
     *      ["value", "appValue", "templateValue", "defaultValue"]
     * When a higher level value does not exist, the manager will try to find its corresponding lower level value.
     * @param {string[]} [valueStack] - the value stack to be set
     * @return {string[]} a copy of the value stack.
     */
    prot.valueStack = function(valueStack){
        if (isArray(valueStack)) {
            this._valueStack = valueStack;
        }
        return this._valueStack.slice();
    };

    /**
     * Set/get the default value attr which will be used as the attr value when set/reset/serialize.
     * @param {String} the default attr to be set, if not passed or as undefined/null value, clear it.
     * @return {String} the default attr which will be used when set(if attr is not specified when set) or undefined.
     */
    prot.defaultValueAttr = function (attr) {
        if (arguments.length === 0) {
            return this._valueStack.indexOf(this._defaultValueAttr) > -1 ?
                this._defaultValueAttr : this._valueStack[0];

        } else if (attr === undefined || this._valueStack.indexOf(attr) > -1) {
            this._defaultValueAttr = attr;
        }
    };

    /**
     * Get the value of a property, or get values of a bunch of properties.
     * @param {string} [key] - the name of the property, or a prefix of a bunch of properties.
     * @param {string} [attr] - if provided, get the specified attribute instead of value
     * @param {boolean} [strict] - if set to truthy, only get the value of the specified attr (or default to 'value').
     * If there's no value set to this attr, then will not include this property in the output.
     * @return {*}
     * @example
     * // get a single property:
     * var visible = propMgr.get('title.visible');
     * // get a bunch of properties by prefix:
     * var props = propMgr.get('title');
     * var visible = props.visible;
     * // check whether a property is readonly:
     * var readonly = propMgr.get('title.visible', 'readonly');
     * // check whether a bunch of properties are readonly:
     * var readonlys = propMgr.get('title', 'readonly');
     * var readonly = readonlys.visible;
     * // get all properties in this property manager (or proxy):
     * var props = propMgr.get();
     * // get "templateValue" only, do not fallback to "defaultValue"
     * var props = propMgr.get('title', 'defaultValue', true);
     */
    prot.get = function(key, attr, strict) {
        key = getKey(this, key);
        return (this._props[key] ? get : getMultiple)(this, key, attr, strict);
    };

    /**
     * Set property value, and notify all watchers when the new value is
     * different from the old one.
     * @param {string} key - the name of the property
     * @param {*} value - the new value of the property
     * @param {boolean} [forced=false] - whether force to set even if the property is readonly
     * @param {string} [attr] - if provided, set the specified attribute instead of value
     * @example
     * // set a single property value:
     * propMgr.set('legend.title.color', '#cccccc');
     * // set a bunch of properties by providing a prefix:
     * propMgr.set('legend', {
     *      title: {
     *          visible: true,
     *          color: '#cccccc'
     *      }
     * });
     * // set a bunch of properties withour prividing a prefix:
     * propMgr.set({
     *      legend: {
     *          title: {
     *              visible: true,
     *              color: '#cccccc'
     *          },
     *          "layout.position": right
     *      }
     * });
     * // force to set a readonly property:
     * propMgr.set('legend.title.text', 'abc', true);
     * // set a property to be serializable:
     * propMgr.set('legend.title.color', true, true, 'serializable');
     */
    prot.set = function(key, value, forced, attr) {
        if (typeof key !== 'string') {
            attr = forced;
            forced = value;
            value = key;
            key = '';
        }
        key = getKey(this, key);
        (this._props[key] ? set : setMultiple)(this, key, value, forced, attr);
    };

    /**
     * Reset (delete) a property attribute on a bunch of properties with the given prefix, by default reset the value
     * @param {string} [prefix] - prefix to reset, if omitted, reset all properties
     * @param {string} [attr] - if provided, delete the specified attribute instead of value
     * @param {boolean} [downTo] - if true, reset all value levels above this level, as well as this level.
     * e.g. downTo templateValue means to reset value, appValue and templateValue
     */
    prot.reset = function(prefix, attr, downTo){
        if(configKeywords[prefix]){
            downTo = attr;
            attr = prefix;
            prefix = '';
        }
        prefix = getPrefix(this, prefix);
        var properties = getCache(this, prefix);
        var valueStack = this._valueStack;

        attr = attr || this.defaultValueAttr();
        var startLevel = valueStack.indexOf(attr);
        for(var key in properties){
            if(properties.hasOwnProperty(key)){
                var config = properties[key];
                delete config[attr];

                if(downTo){
                    for(var i = startLevel - 1; i >= 0; --i){
                        delete config[valueStack[i]];
                    }
                }
            }
        }
    };

    /**
     * Watch a property, get notified when it is changed.
     * @param {string} key - the name of the property
     * @param {function} callback
     * @return {object} a handler object holding a remove function to unwatch.
     * @example
     * var handler = propMgr.watch("some.prop", function(newValue, oldValue, key){});
     * handler.remove();
     */
    prot.watch = function(key, callback){
        if (typeof key !== 'string') {
            callback = key;
            key = '';
        }
        key = getKey(this, key);
        var watchers = this._watchers[key] = this._watchers[key] || [];
        if (watchers.indexOf(callback) < 0) {
            watchers.push(callback);
        }
        return {
            remove: function(){
                var idx = watchers.indexOf(callback);
                if (idx >= 0) {
                    watchers.splice(idx, 1);
                }
            }
        };
    };

    /**
     * Load property values from a previously serialized object
     * @param {object} obj
     */
    prot.load = function(obj, prefix) {
        if (obj) {
            prefix = getPrefix(this, prefix);
            var storage = this._props;
            var dict = getPlainDict(this, prefix, obj, this.separator);
            for (var key in obj) {
                if (obj.hasOwnProperty(key) && this._allow(key, 'load')) {
                    storage[key] = storage[key] || {};
                    storage[key].value = obj[key];
                }
            }
        }
    };

    /**
     * Serialize all changed properties to an object
     * @param {object} [args]
     * @return {object}
     * @example
     * // only changed serializable properties are serialized.
     * // it's using defaultValueAttr, the result maybe different from get
     * var obj = propMgr.serialize();
     * // both changed and unchanged serializable properties are serialized.
     * var obj = propMgr.serialize({ all: true });
     * // get specified stack level(vaule level):
     & var obj = propMgr.serialize({ attr: "value" });
     * // customize what to serialize
     * var obj = propMgr.serialize({
     *      filter: function(key, value){
     *          return key != "somestring";
     *      }
     * });
     */
    prot.serialize = function(args) {
        args = args || {};
        var storage = this._props;
        var result = {};
        var hasFilter = isFunction(args.filter);
        var attr = args.attr || this.defaultValueAttr();
        for (var key in storage) {
            if (storage.hasOwnProperty(key) && this._allow(key, 'serialize')) {
                var config = storage[key];
                if (config && (config.serializable || config.serializable === undefined)) {
                    var value = get(this, key);
                    // provide a chance to customize what to serialize
                    if ((hasFilter && args.filter(key, value, config)) ||
                        // Unless explicitly specified, only serialize changed values
                        (!hasFilter && (args.all || config.hasOwnProperty(attr)))) {
                        value = isFunction(config.serialize) ? config.serialize(value) : value;
                        ObjectUtils.setObject(key, value, result, this.separator);
                    }
                }
            }
        }
        return result;
    };

    /**
     * Get the default value of a property
     * @param {string} key - the name of the property
     * @return {*}
     */
    prot.getDefault = function(key) {
        // template value is regarded as default value from user's point of view.
        return this.get(key, 'templateValue');
    };

    /**
     * Set the default value of a property
     * @param {string} key - the name of the property
     * @param {*} value - the default value of the property
     */
    prot.setDefault = function(key, value) {
        if (typeof key !== 'string') {
            value = key;
            key = '';
        }
        this.set(key, value, 1, 'defaultValue');
    };

    /**
     * Return a proxy of this manager that works under a given prefix
     * @param {string} [prefix] - prefix that the result manager will work with
     * @return {PropertyManager}
     */
    prot.proxy = function(prefix) {
        var proxy = new PropertyManager();
        proxy._prefix = getPrefix(this, prefix);
        proxy._props = this._props;
        proxy._cache = this._cache;
        proxy._watchers = this._watchers;
        proxy._allow = this._allow;
        proxy._valueStack = this._valueStack;
        proxy._flags = this._flags;
        proxy._flag = this._flag;
        proxy.parentLevel = this;
        proxy.origin = this.origin;
        proxy._defaultValueAttr = this._defaultValueAttr;
        return proxy;
    };

    /**
     * Return the prefix string of this manager
     * @return {String}
     */
    prot.prefix = function(){
        return this._prefix || '';
    };

    /**
     * Destroy this manager
     */
    prot.destroy = function(){
        this._props = null;
        this._cache = null;
        this._watchers = null;
        this.origin = null;
    };

    /**
     * The original property manager of this proxy. If this is not a proxy,
     * then this.origin is undefined.
     * @member: origin
     */

    // Protected ------------------------------------------------------

    /**
     * Check whether a property is allowed to be accessed.
     * By default it is controlled by flag, but this method can be overrided to
     * provide some additional authorization control.
     * @param {string} key
     * @param {string} operation
     * @param {string} [attr]
     * @return {boolean} anything truthy
     */
    prot._allow = function(key, operation, attr) {
        return this._matchFlag(key);
    };

    prot._matchFlag = function(key) {
        return !this._flag || +(this._flag & this._flags[key]) === +this._flags[key];
    };

    // Private------------------------------------------------------

    function addAll(manager, properties, prefix, safe, flag) {
        var pf = prefix ? prefix + manager.separator : '';
        for (var key in properties) {
            if (key && !configKeywords[key]) {
                addProp(manager, pf + key, properties[key], safe, flag);
            }
        }
    }

    function addProp(manager, key, config, safe, flag) {
        var storage = manager._props;
        var obj = storage[key] || {};
        var isProp, hasSubprop;
        var allow = 1;
        var parts, partsLen, prefix, i;

        if(safe){
            // Safe mode should not override existing properties
            parts = key.split(manager.separator);
            partsLen = parts.length;
            if(manager._cache[key] || manager._props[key]){
                // adding an existing prefix is not allowed
                allow = 0;
            }else{
                for(i = 0; i < partsLen; ++i){
                    prefix = prefix ? prefix + manager.separator + parts[i] : parts[i];
                    if(storage[prefix]){
                        // If any prefix of this key is an existing property, it is not allowed
                        allow = 0;
                        break;
                    }
                }
            }
        }

        if(isValue(config)){
            // Add to user value level if in safe mode
            if(safe){
                config = {
                    value: config
                };
            }else{
                config = {
                    defaultValue: config
                };
            }
        }else{
            config = config || {};
        }
        for (var arg in config) {
            if (configKeywords[arg]) {
                isProp = 1;
                if(allow){
                    obj[arg] = config[arg];
                }
            } else if(arg) {
                hasSubprop = 1;
            }
        }
        // If this is a property, it can not have sub properties
        if(isProp){
            hasSubprop = 0;
        }


        if (allow && key !== manager._prefix && (isProp || !hasSubprop)) {
            if(typeof obj.defaultValue === 'boolean' && !obj.type){
                obj.type = 'boolean';
            }
            if(!storage[key]){
                parts = parts || key.split(manager.separator);
                partsLen = (partsLen || parts.length) - 1; // Don't need to cache key itself
                prefix = '';
                for(i = 0; i < partsLen; ++i){
                    prefix = prefix ? prefix + manager.separator + parts[i] : parts[i];
                    var cache = manager._cache[prefix] = manager._cache[prefix] || {};
                    cache[key] = obj;
                }
                // Flags are only set on the first time "add"
                manager._flags[key] = flag || manager._flag || 0;
                storage[key] = obj;
            }
        }
        if (hasSubprop) {
            // search for hierarchical properties
            addAll(manager, config, key, safe, flag);
        }
    }

    function get(manager, key, attr, strict) {
        var config = manager._props[key];
        if (config && manager._allow(key, 'get', attr)) {
            var valueStack = manager._valueStack;
            attr = attr || valueStack[0];
            if (!strict) {
                var level = valueStack.indexOf(attr);
                if (level >= 0) {
                    return getValue(manager, config, level);
                }
            }
            return config[attr];
        }
        return undefined;
    }

    function set(manager, key, value, forced, attr) {
        var config = manager._props[key];
        if (config && manager._allow(key, 'set', attr) && (!config.readonly || forced)) {
            var defaultValueAttr = manager.defaultValueAttr();
            attr = attr || defaultValueAttr;
            if (manager._valueStack.indexOf(attr) > -1) {
                if (attr === defaultValueAttr) {
                    var oldValue = getValue(manager, config);
                    var newValue = isFunction(config.set) ? config.set(value, config) : value;
                    newValue = config[attr] = normalizeType(newValue, config);
                    if (isValueChanged(config, newValue, oldValue)) {
                        onChange(manager, key, newValue, oldValue);
                    }
                } else {
                    config[attr] = normalizeType(value, config);
                }
            } else {
                config[attr] = value;
            }
        }
    }

    function getPrefix(manager, prefix) {
        return manager._prefix && prefix ?
            manager._prefix + manager.separator + prefix :
            prefix || manager._prefix || '';
    }

    function getKey(manager, key, prefix) {
        prefix = getPrefix(manager, prefix);
        return key ? (prefix ? prefix + manager.separator : '') + key : prefix;
    }

    function getMultiple(manager, prefix, attr, strict) {
        attr = attr || manager._valueStack[0];
        var properties = getCache(manager, prefix, true);
        if(properties){
            var prefixLength = prefix ? prefix.length + manager.separator.length : 0;
            var result = {};
            var valid;
            for (var key in properties) {
                if (!strict || properties[key].hasOwnProperty(attr)) {
                    var path = key.substring(prefixLength);
                    if (path) {
                        valid = true;
                        ObjectUtils.setObject(path, get(manager, key, attr, strict), result, manager.separator);
                    }
                }
            }
            return valid ? result : undefined;
        }
        return undefined;
    }

    function setMultiple(manager, prefix, values, forced, attr) {
        values = getPlainDict(manager, prefix, values, manager.separator);
        for (var key in values) {
            if (values.hasOwnProperty(key)) {
                set(manager, key, values[key], forced, attr);
            }
        }
    }

    function getCache(manager, prefix, forGetMultiple){
        if(prefix){
            var cache = manager._cache[prefix];
            if(!forGetMultiple){
                if(!cache){
                    cache = {};
                }
                if(manager._props[prefix]){
                    cache[prefix] = cache[prefix] || manager._props[prefix];
                }
            }
            return cache;
        }
        return manager._props;
    }

    function getPlainDict(manager, prefix, obj, separator, dict) {
        dict = dict || {};
        if (!isValue(obj)) {
            prefix = prefix ? prefix + separator : '';
            for (var name in obj) {
                if (obj.hasOwnProperty(name)) {
                    var value = obj[name];
                    if (manager._props[prefix + name]) {
                        dict[prefix + name] = value;
                    } else {
                        getPlainDict(manager, prefix + name, value, separator, dict);
                    }
                }
            }
        }
        return dict;
    }

    // Event ----------------------------------------------------------------

    function onChange(manager, key, newValue, oldValue){
        function notify(watchers){
            if(watchers){
                for(var i = 0; i < watchers.length; ++i){
                    watchers[i](newValue, oldValue, key);
                }
            }
        }
        var sep = manager.separator;
        for(var parts = key.split(sep); parts.length; parts.pop()){
            notify(manager._watchers[parts.join(sep)]);
        }
        notify(manager._watchers['']);
    }

    // Utility ---------------------------------------------------------------

    function getValue(manager, config, level){
        level = level >= 0 ? level : 0;
        var valueStack = manager._valueStack;
        var len = valueStack.length;
        var value;
        for(; level < len; ++level){
            var levelName = valueStack[level];
            if(config.hasOwnProperty(levelName)){
                value = config[levelName];
                break;
            }
        }
        return isFunction(config.get) ? config.get(value, config) : value;
    }

    function isValueChanged(config, newValue, oldValue) {
        return isFunction(config.compare) ?
            config.compare(newValue, oldValue) :
            newValue !== oldValue;
    }

    function isValue(it) {
        return it === null || Object.prototype.toString.call(it) !== '[object Object]';
    }

    function normalizeType(v, config){
        if(/^boolean$/i.test(config.type)){
            if(/^true$/i.test(v)){
                v = true;
            }else if(/^false$/i.test(v)){
                v = false;
            }
        }
        return v;
    }

    return PropertyManager;
});

define('sap/viz/framework/extension/BaseChart',[
        'sap/viz/framework/common/util/TypeUtils',
        'sap/viz/framework/property/PropertyManager'
    ],
    function (TypeUtils, PropertyManager) {
        /**
         * @private
         */
        var BaseChart = function () {
            this._builtInComponents = {};
            this._data = null;
            this._bindings = null;
            this._scales = null;
        };

        /**
         * @static
         */
        BaseChart.metadata = {
            id: "",
            // "csv" dataset will position columns by binding definition,
            //      and user can retrieve bindings value to know which columns belong to which binding
            // "raw" dataset could be any data structure passed when createViz(),
            //      in Lumira it will be FlatTableDataset
            dataType: "raw",
            /**
             * binding schema: {
                    "id": "categoryAxis",
                    "name": "IDS_CATEGORY_AXIS",
                    "type": "Dimension",
                    "min": 1,
                    "max": Number.POSITIVE_INFINITY,
                    // optional
                    "acceptMND": true,
                    // optional
                    "role": "layout.category"
                }
             */
            bindingDefinition: [],
            /**
             * {
                    "feed": "valueAxis",
                    "properties": {
                        "min": {
                            "name": "min",
                            "supportedValueType": "Number",
                            "defaultValue": "auto",
                            // optional
                            "description": ""
                        },
                        "max": {
                            "name": "max",
                            "supportedValueType": "Number",
                            "defaultValue": "auto",
                            // optional
                            "description": ""
                        }
                    }
                }
             */
            scales: [],
            css: null,
            /**
             * properties schema: {
                    "supportedValueType": "Object", // Number, String, Boolean, StringArray, NumberArray, BooleanArray
                    "defaultValue": null,
                    // optional, by default read-only is false
                    "readonly": false,
                    // optional, by default serializable is true
                    "serializable": true,
                    // optional
                    "description": "",
                }
             */
            properties: {},
            /**
             * Array of event type String
             */
            events: [],
            /**
             * build-in component schema: {
                    name : sap.viz.extapi.component.TITLE.NAME,
                    properties : {
                        "position": "top"
                    }
                }
             */
            builtInComponents: []
        };

        //-----------------------------
        // Methods to be Overridden
        // No super() support
        //-----------------------------

        /**
         * optional to override
         */
        BaseChart.prototype.init = function () {};

        /**
         * @param {Object} changes {
                                dataChanged : false,
                                bindingChanged : false,
                                scalesChanged : false,
                                propertiesChanged : false,  
                                sizeChanged : false
                           }
         */
        BaseChart.prototype.render = function (changes) {};

        /**
         * optional to override
         */
        BaseChart.prototype.destroy = function () {};

        /**
         * optional to override
         *
         * @return {Array} value Array of DataContext
         */
        BaseChart.prototype.getSelection = function () {
            return [];
        };

        /**
         * optional to override
         *
         * @param {Array} value Array of DataContext
         * @param {Object} [option] supported options: {"clearSelection": true}, {"selectionMode": "exclusive"}
         */
        BaseChart.prototype.setSelection = function (value, option) {};


        /**
         * optional to override
         *
         * @param {String} [propertyName]
         * @return {Array} boundary as the same stracture as VizInstance's propertyZone
         */
        BaseChart.prototype.propertyZone = function (propertyName) {

            return [];
        };


        /**
         * optional to override
         * update to set builtInComponents properties before they start rendering
         * builtInComponents properties can only be set inside updateBuiltInComponents method, 
         * otherwise error will be thrown
         * @param {Object} changes {
                                dataChanged : false,
                                bindingChanged : false,
                                scalesChanged : false,
                                propertiesChanged : false,Â Â 
                                sizeChanged : false
                        Â Â Â }
        */
        BaseChart.prototype.updateBuiltInComponents = function(changes) {

        };

        /**
         * optional to override
         *
         * @return {Array} boundary as the same stracture as VizInstance's feedingZone
         */
        BaseChart.prototype.feedingZone = function () {
            //var bindings = this.bindings();
            return [];
        };

        //-----------------------------
        // Public Utility Methods
        //-----------------------------

        /**
         * @return {HTMLDIVElement} the host DIV
         */
        BaseChart.prototype.container = function () {
            return this._container;
        };

        /**
         * @return {Object} the size for the extension
         */
        BaseChart.prototype.size = function () {
            return this._size;
        };
        /**
         * @return {Array} data bindings
         */
        BaseChart.prototype.bindings = function (data) {
            if (data) {
                this._bindings = data;
            } else {
                return this._bindings;
            }
        };

        /**
         * @return {Object}
         *         if BaseChart.metadata.dataType is "raw", return raw dataset.
         *         if BaseChart.metadata.dataType is "csv", return whole CSV 2DArray, or CSV 2DArray by bindingId
         */
        BaseChart.prototype.data = function (data) {
            if (data) {
                this._data = data;
            } else {
                return this._data;
            }
        };

        /**
         * @return {Array} scale settings
         */
        BaseChart.prototype.scales = function (data) {
            if (data) {
                this._scales = data;
            } else {
                return this._scales;
            }
        };

        /**
         * show built-in tooltip
         * VizInstance "showTooltip" event will be auto-dispatched
         *
         * @param {Object} position relative to container
         * @Example: this.showTooltip({
         *      container: this.container.node(),//parnet dom node for the tooltip
         *      position: {x:100, y:100},//(left, top)position for the tooltip
         *      data: dataContexArray // Array of selected data's data context.
         *
         *  })
         */

        BaseChart.prototype.showTooltip = function (position, context) {};

        /**
         * hide built-in tooltip
         * VizInstance "hideTooltip" event will be auto-dispatched
         *
         */
        BaseChart.prototype.hideTooltip = function () {};

        /**
         * @return {Object} properties
         */
        BaseChart.prototype.properties = function (key) {};

        /**
         * dispatch event to VizInstance
         *
         * @param {String} type
         * @param {Object} data
         */
        BaseChart.prototype.dispatchEvent = function (type, data) {};

        return BaseChart;
    });
define('sap/viz/framework/extension/ChartFactory',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/extension/BaseChart',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/FunctionUtils',
    'require'
], function (
    oo,
    BaseChart,
    LangManager,
    FunctionUtils,
    req
) {

    var ChartFactory = {};
    /* global requirejs: true */



    var nextTickBak;

    function requireJSHack() {
        nextTickBak = requirejs.s.contexts._.nextTick;
        requirejs.s.contexts._.nextTick = function (fn) {
            fn();
        };

    }

    function requireJSUnHack() {
        if (nextTickBak) {
            requirejs.s.contexts._.nextTick = nextTickBak;
        }
    }


    function createChartView(chartClazz) {


        requireJSHack();

        var ExtensionChartView;
        try{
            ExtensionChartView = (req||require)("sap/viz/chart/views/ExtensionChartView");
        }catch(err){
            //In Lumira, we can only add /v3 for all module which is lazy loaded.
            //This is caused by the side by side bundle loaidng for viz & info chart lib.
            ExtensionChartView = (req||require)("sap/viz/chart/views/ExtensionChartView/v3");
        }

        var newChartView = function () {
            newChartView.superclass.constructor.apply(this, arguments);
        };

        newChartView.prototype.getDefintion = function () {
            return chartClazz;
        };

        oo.extend(newChartView, ExtensionChartView);

        requireJSUnHack();

        return newChartView;



    }


    ChartFactory.createChart = function (chartClazz) {
        var chartView = null;
        try {
            if(chartClazz){
                chartView = createChartView(chartClazz);
            }
        } catch (e) {
            FunctionUtils.error(LangManager.getLogMessage('IDS_WRONG_EXTENSIONVERSION'));
            chartView = null;
        }

        return chartView;

    };

    return ChartFactory;



});
define('sap/viz/framework/extension/Constants',[], function () {

    var EXTENSIONCONSTS = {
        ModuleName: {
            'legend': 'sap.viz.component.ColorLegend',
            'title': 'sap.viz.component.Title',
            'legendGroup': 'sap.viz.component.ColorLegend'
        }
    };

    EXTENSIONCONSTS.ModuleMapping = {
        'sap.viz.component.ColorLegend': {
            id: 'legendGroup',
            extendId: 'extendLegend'
        },
        'sap.viz.component.Title': {
            id: 'title',
            extendId: 'extendTitle'
        }
    };
    EXTENSIONCONSTS.SDK_NAME = 'sap.viz.common.core';
    EXTENSIONCONSTS.BUNDLEID = '*sap.viz.impls.ext';
    EXTENSIONCONSTS.MINVERSION = 5;
    EXTENSIONCONSTS.CSVDATAMODEL = 'csv';
    EXTENSIONCONSTS.RAWDATAMODEL = 'raw';
    return EXTENSIONCONSTS;

});
define('sap/viz/framework/common/util/VersionComparator',[ "sap/viz/framework/common/util/TypeUtils" ], function Setup(TypeUtils) {
    var VERSION_SEP = ".";
    var VERSION_SEG_NUM = 3;
    
    var VersionComparator = {
        compare : function(version1, version2) {
            var v1 = !version1 ? [] : version1.split(VERSION_SEP).slice(0,VERSION_SEG_NUM);
            var v2 = !version2 ? [] : version2.split(VERSION_SEP).slice(0,VERSION_SEG_NUM);
            
            var i;
            for ( i = v1.length; i<VERSION_SEG_NUM; i++ ) {
                v1.push(0);
            }
            for ( i = v2.length; i<VERSION_SEG_NUM; i++ ) {
                v2.push(0);
            }
            
            for (i = 0; i < VERSION_SEG_NUM; i++) {
                if (v1[i] === v2[i]) {
                    continue;
                }
                if (TypeUtils.isNaN(v1[i])) {
                    return 1;
                }
                if (TypeUtils.isNaN(v2[i])) {
                    return -1;
                }
                
                var ret = parseInt(v1[i]) - parseInt(v2[i]);
                if (ret !== 0) {
                    return ret;
                }
            }
            
            return 0;
        }
    };
    return VersionComparator;
});

define('sap/viz/framework/extension/ExtensionUtils',[
    'sap/viz/framework/core/ChartPropertyRegistry',
    'sap/viz/framework/extension/ChartFactory',
    'sap/viz/framework/extension/Constants',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/framework/common/util/VersionComparator",
    "sap/viz/framework/common/log/Logger",
], function (
    ChartPropertyRegistry,
    ChartFactory,
    Constants,
    TypeUtils,
    LangManager,
    FunctionUtils,
    oo,
    ObjectUtils,
    VersionComparator,
    Logger
) {


    var ExtensionUtil = {};


    function buildProperties(metadata) {
        var properties = metadata.properties;
        var meta = {};
        var type = metadata.id;
        if (metadata.builtInComponents && TypeUtils.isArray(metadata.builtInComponents)) {
            for (var i = 0, len = metadata.builtInComponents.length; i < len; i++) {
                var id = metadata.builtInComponents[i].name;
                meta[Constants.ModuleMapping[id].extendId] = true;
                if(Constants.ModuleName['legend'] === id){
                    meta['extendInteraction'] = true;
                }
            }
        }
        //For events register.
        //Supoort tooltip by default.
        meta['extendTooltip'] = true;
        meta['extendInteraction'] = true;
   
        
        return [
            metadata.id,
            metadata.properties,
            meta
        ];


    }



    function getMetaData(type) {
        var extensionMetaData = sap.bi.framework.getServiceMetadata(Constants.BUNDLEID);
        return extensionMetaData.filter(function(d) {
            return d.id === type;
        });
    }

    function getRequireSDKVersion(servicesMetaData) {
        if (servicesMetaData.customProperties && servicesMetaData.customProperties.requires) {
            var requires = servicesMetaData.customProperties.requires;
            for (var j = 0, requiresLen = requires.length; j < requiresLen; j++) {
                if (requires[j].id === "sap.viz.common.core") {
                    return requires[j].version;
                }
            }
        }
        return undefined;
    }

    ExtensionUtil.checkVersion = function(servicesMetaData) {
        var result = ExtensionUtil.checkVersionTo(servicesMetaData, sap.viz.api.VERSION);
        if(!result) {
            Logger.warn(LangManager.getLogMessage('IDS_ERROR_SDK_VERSION_DOES_NOT_MATCH', 
                servicesMetaData.id,
                getRequireSDKVersion(servicesMetaData),
                sap.viz.api.VERSION));
        }
        return result;
    };

    ExtensionUtil.checkVersionTo = function(servicesMetaData, targetVersion) {
        var version = getRequireSDKVersion(servicesMetaData);
        if(version && (VersionComparator.compare(version, targetVersion) > 0)) {
            return false;
        }
        return true;
    };
    
    ExtensionUtil.parseSDKVersion = function (type) {
        var extensionMetaData = getMetaData(type);
        if(extensionMetaData.length>0){
            var extensionProperties = extensionMetaData[0].customProperties;
            if(extensionProperties && extensionProperties.requires && extensionProperties.requires.length){
                var sdk = extensionProperties.requires;
                var version = sdk.filter(function(d){
                    return d.id === Constants.SDK_NAME;
                });
                return version[0]&& version[0].version;
            }
        }
        return null;
    };

    ExtensionUtil.isExtension = function (type) {
        var extensionMetaData = getMetaData(type);
        return extensionMetaData.length>0;
    };


    ExtensionUtil.create = function (chartClass, metadata) {
        if (!(chartClass && chartClass.metadata)) {
            FunctionUtils.error(LangManager.getLogMessage('IDS_WRONG_MISSINGEXTENSIONMETADATA'));
        }
        chartClass.metadata.bindingDefinition = chartClass.metadata.bindingDefinition||[];

        if (ExtensionUtil.checkVersion(metadata)) {
            var chartView = ChartFactory.createChart(chartClass);

            if (chartClass.metadata ) {
                var porperties = chartClass.metadata.properties || {};
                ChartPropertyRegistry.register.apply(this, buildProperties(chartClass.metadata));
            } else {

            }

            return chartView;

        } else {
            FunctionUtils.error(LangManager.getLogMessage('IDS_WRONG_EXTENSIONVERSION'));
        }

    };

    ExtensionUtil.extend = function (baseClass) {
        var extension = function () {
            extension.superclass.constructor.apply(this, arguments);
        };
        oo.extend(extension, baseClass);
        extension.metadata = ObjectUtils.extend(true, {}, baseClass.metadata);
        return extension;
    };
    
    ExtensionUtil.getBundleVersion = function(type) {
        function getBundleVersionAt(service, type) {
            var servicesMetaData = sap.bi.framework.getServiceMetadata(service).filter(function(d) {
                return d.id === type;
            });
            if (servicesMetaData.length > 0) {
                if (servicesMetaData[0].framework && servicesMetaData[0].framework.bundleVersion) {
                    return servicesMetaData[0].framework.bundleVersion;
                }
            }
            return null;
        }
        
        var ret = getBundleVersionAt('*sap.viz.impls', type);
        
        if (!ret) {
            ret = getBundleVersionAt('*sap.viz.impls.ext', type);
        } 
        return ret;
    };

    return ExtensionUtil;



});
define('sap/viz/framework/common/util/Constants',[], function Setup() {
    var moduleConstants = {
        CSS: {
            CLASS: {
                ZERO_LINE_GROUP: "v-zeroline-group",
                AXIS: {
                    CONTAINER: "v-axis",
                    TITLE: "v-title",
                    SCROLLBAR: "v-scrollbar",
                    TITLE_BACKWORD: "viz-axis-title",
                    TITLE_HIDDEN: "v-hidden-title",
                    LINE_GROUP: "v-line-group",
                    TICK_GROUP: "v-tick-group",
                    LABEL_GROUP: "v-label-group",
                    LINE: "v-line",
                    TICK: "v-tick",
                    LONGTICK: "v-longtick",
                    VBCLINE: "v-vbcline",
                    LABEL: "v-label",
                    LABEL_SELECTION: "v-axis-item",
                    LABEL_SELECTION_TIMEAXIS: "v-timeaxis-item",
                    LABEL_SELECTION_TIMEAXIS_UPPERLEVEL: "v-timeaxis-item-upperLevel",
                    LABEL_BACKWORD: "viz-axis-label",
                    MORPHABLE_LABEL: "v-morphable-label",
                    PERIMETER: "v-valueaxisline",
                    FIXED_PERIMETER: "v-fixed-valueaxisline",
                    BACKGROUND_RECT: "viz-axis-label-rect",
                    LABEL_PERCENTAGE: " (%)"
                },
                MODULEPREFIX: "v-m-",
                DATAPOINTS_MODULE: "v-m-datapoints",
                DATAPOINTS_PLOT: "v-plot-datapoints",
                DATAPOINT_GROUP: "v-datapoint-group",
                DATAPOINT: "v-datapoint",
                DATAPOINT_MARKER: "v-datapoint-marker",
                DATAPOINTDEFAULT: "v-datapoint-default",
                DATAPOINTHOVER: "v-datapoint-hover",
                ZEROVALUEHOVER: "v-datapoint-zero-hover",
                DATAPOINTSELECTED: "v-datapoint-selected",
                NONINTERACTIVEARIA: "v-m-non-interactive-aria",
                STACK: "v-stack",
                LINES_GROUP: "v-lines-group",
                LINES: "v-lines",
                LIGHT_LINE: "v-lightLine",
                AREA: "v-area",
                AREA_GROUP: "v-area-group",
                AREA_POINT_GROUP: "v-area-point-group",
                AREA_POINT: "v-area-point",
                AREA_SELECTED: "v-selected-area",
                AREA_GROUP_SELECTED: "v-selected-area-group",
                AREADEFAULT: "v-area-default",
                AREAHOVER: "v-area-hover",
                AREASELECTED: "v-area-selected",
                AREA_PATH: "v-area-path",
                AREA_LINE_PATH: "v-area-line-path",
                AREA_DETECTION_PATH: "v-area-detection-path",
                AREA_REF_LINE_GROUP: "v-area-ref-line-group",
                AREA_REF_LINE: "v-area-ref-line",
                AREA_REF_LINE_SELECTED: "v-area-ref-line-selected",
                MORPHABLEDATAPOINT: "v-morphable-datapoint",
                MORPHABLELABEL: "v-morphable-label",
                MORPHABLEBACKGROUND: "v-morphable-background",
                MORPHABLELINE: "v-morphable-line",
                MORPHABLEAREABG: "v-morphable-areabg",
                DATALABEL_GROUP: "v-datalabel-group",
                DATALABEL_GROUP_TOTAL: "v-datalabel-group-total",
                DATALABEL_GROUP_RECAP: "v-datalabel-group-recap",
                DATALABEL: "v-datalabel",
                GRIDLINE_GROUP: "v-gridline-group",
                GRIDLINE: "v-gridline",
                GRIDLINE_INCISED: "v-incised-gridline",
                HOVER_SHADOW: "v-hovershadow",
                FOCUS_SHADOW: "v-hovershadow-mousedown",
                CLIPPATH: 'v-clippath',
                LEGENDITEM: 'v-legend-item',
                SELECTED: '-selected',
                MBCLEGENDITEM: 'v-mbc-legend-item',
                BULLETLEGENDITEM: 'v-legend-bullet',
                RADAR_NET: "v-radar-net",
                RADAR_BRANCH_AXIS: "v-radar-branch-axis",
                RADAR_BRANCH_AXIS_GROUP: "v-radar-branch-axis-group",
                RADAR_BRANCH_LABEL: "v-radar-branch-label",
                RADAR_BRANCH_LABEL_GROUP: "v-radar-branch-label-group",
                RADAR_BRANCH_GROUP: "v-radar-branch-group",
                WATERFALL_LINKLINE: "v-wtf-linkline",
                WATERFALL_RECAP: "v-wtf-recap",
                BAR_SERIES_PATH: "v-bar-series-path",
                CATEGORY_BOUND_SELECTION: ".v-m-categoryAxis .v-bound",
                CATEGORY2_BOUND_SELECTION: ".v-m-categoryAxis2 .v-bound",
                TIME_BOUND_SELECTION: ".v-m-timeAxis .v-bound:first-child",
                LEGEND_BOUND_SELECTION: ".v-m-legend .v-bound",
                LEGEND_ITEM_BOUND_SELECTION: ".v-legend-item rect:first-child",
                AXIS_ITEM_BOUND_SELECTION: "rect.viz-axis-label-rect",
                PLOT_BOUND_SELECTION: ".v-plot-bound",
                PIE_HOVER_STROKE: "v-pie-hover-stroke"
            }
        },
        LAYOUT_ADJUST_POLICY: {
            APPROXIMATE: 'APPROXIMATE',
            RELAYOUT: 'RELAYOUT'
        },
        Event: {
            SelectData: {
                name: 'selectData',
                desc: 'Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.' + '<code>{name: "selectData",' + 'data:[{\n//selected element\'s detail\n' + 'target:"Dom Element",//an object pointed to corresponding dom element\n' + 'data:{Dimension1: value\n' + 'Dimension2: value\n' + '...\n' + 'DimensionN: value\n' + 'Measure1: value\n' + 'Measure2: value\n' + '...\n' + 'MeasureN: value\n' + '}}\n' + '\\if under multi selection, there will be more than one selected elements' + '...\n]\n"type: dataPoint"}\n'//jshint ignore:line
            },
            DeSelectData: {
                name: 'deselectData',
                desc: 'Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.' + '<code>{name: "deselectData",' + 'data:["---the same as selectedData---"]}' //jshint ignore:line
            },
            TooltipShow: {
                name: 'showTooltip',
                desc: 'This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.' + '<code>{name:"showTooltip",data:{body:[{\n//All measures\n' + 'name:"...",val:[{//measure value is an array containing only one item\n' + 'value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],' + 'plotArea:{\n//this object specifies the plot area of the chart\n' + 'height:"...",width:"...",x:"...",y:"..."},point:{\n//this object specifies a point which affects the position of tooltip\n' + 'x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}'//jshint ignore:line
            },
            TooltipHide: {
                name: 'hideTooltip',
                desc: 'This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.' //jshint ignore:line
            },
            Initialized: {
                name: 'initialized',
                desc: 'Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.' //jshint ignore:line
            },
            highlightedByLegend: {
                desc: "Event fires when legend item is clicked, which contains its data context."
            },
            ContextualData: {
                name: 'contextualData',
                desc: 'Event fires when mouse right click, the event format is: <code>{name: "contextualData",\n' + 'type: "target type" //event target type,\n' + 'data:[{\n//selected element\'s detail\n' + 'target:"Dom Element",//an object pointed to corresponding dom element\n' + 'data:{key: "value",//key is usually a category name, value is the data\'s value in this category\n' + '...\n}]}' //jshint ignore:line
            }
        },
        COLOR: {
            SAPColorSingleAxis: ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2", "#3A95B3",
                "#B6D949", "#FDD36C", "#F47958", "#A65084", "#0063B1", "#0DA841", "#FCB71D",
                "#F05620", "#B22D6E", "#3C368E", "#8FB2CF", "#95D4AB", "#EAE98F", "#F9BE92",
                "#EC9A99", "#BC98BD", "#1EB7B2", "#73C03C", "#F48323", "#EB271B", "#D9B5CA",
                "#AED1DA", "#DFECB2", "#FCDAB0", "#F5BCB4"],
            SAPColorDualAxis1: ["#8FBADD", "#B8D4E9", "#7AAED6", "#A3C7E3", "#3D88C4", "#66A1D0",
                "#297CBE", "#5295CA", "#005BA3", "#146FB7", "#005395", "#0063B1"],
            SAPColorDualAxis2: ["#F6A09B", "#F9C3C0", "#F58E88", "#F8B1AD", "#F05B52", "#F37D76",
                "#EE4A40", "#F16C64", "#D92419", "#ED382D", "#C52117", "#EB271B"],
            SAPColorBulletReference: ["#CCCCCC", "#ACA8A8", "#838282"],

            BULLET: {
                ActualColor: ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C",
                    "#8873A2", "#3A95B3", "#B6D949", "#FDD36C", "#F47958",
                    "#A65084", "#0063B1", "#0DA841", "#FCB71D", "#F05620",
                    "#B22D6E", "#3C368E"],
                AdditionalColor: ["#A7BFE5", "#CFF9AA", "#FFFF91", "#FFE0AC", "#FF9DAF",
                    "#BBA6D5", "#6DC8E6", "#E9FF7C", "#FFFF9F", "#FFAC8B",
                    "#D983B7", "#3396E4", "#40DB74", "#FFEA50", "#FF8953",
                    "#E560A1", "#6F69C1"],
                ForecastColor: ["#D5DADC"]
            }

        },
        SHAPE: ['circle', 'square', 'diamond', 'triangleUp', 'triangleDown',
            'triangleLeft', 'triangleRight', 'cross', 'intersection'],
        LINE_MARKER_SHAPE: ['circle', 'diamond', 'triangleUp', 'triangleDown', 'triangleLeft',
            'triangleRight', 'cross', 'intersection', 'square', 'rectangle'],
        LEGEND_MARKER_SHAPE: ['squareWithRadius', 'square', 'rectangle'],
        DocExample: {
            SnippetUrl: '/vizdocs_snippet/#',
            TryThisValue: 'Try this.'
        },
        STYLE: {
            SEMICOLON: ";",
            COLON: ":"
        },
        FISCAL: {
            PERIOD: "fiscal_period",
            YEAR: "fiscal_year",
            ONE_FISCAL_PERIOD: 1,
            //one fiscal year may have 2 or more fiscal periods.
            //we just need to make sure ONE_FISCAL_YEAR is larger than ONE_FISCAL_PERIOD.
            ONE_FISCAL_YEAR: 12,
            //fiscal is "discrete". So unit is always 1.
            UNIT: 1,
            UNITTYPE_PREFIX: "fiscal",
            UNITTYPE_YEAR: "fiscalyear",
            UNITTYPE_PERIOD: "fiscalperiod",
            UNITTYPE_YEARPERIOD: "fiscalyearperiod",
        },
        MBCLEGEND: {
            VISIBLE_STROKE_WIDTH: 3,
            HOVER_SHADOW_COLOR: "#cccccc",
            HOVER_SHADOW_MOUSE_DOWN_COLOR: "#808080"
        },
        DIRECTION: {
            VERTICAL: "vertical",
            HORIZONTAL: "horizontal",
            RTL: "rtl",
            LTR: "ltr",
            LANG_DIR: "languageDirection" //the key saved in status manager
        },
        RTL_LANG: ["ar", "he", "iw"],
        POSITION: {
            TOP: "top",
            BOTTOM: "bottom",
            LEFT: "left",
            RIGHT: "right"
        },
        SPACING_TYPE: {
            STEP: "step",
            RANGE: "range"
        },
        GRIDLINE_TYPE: {
            SOLID: "solid",
            DASHED: "dash",
            DOTTED: "dotted",
            INCISED: "incised"
        },
        LINE_TYPE: {
            SOLID: "solid",
            LINE: "line",
            DASHED: "dash",
            DOTTED: "dotted",
            DOT: "dot"
        },
        DASH_TYPE_ARRAY: "3, 2",
        LINE_DASH_TYPE_ARRAY: "5, 3",
        REF_LINE_DASH_TYPE_ARRAY: "2, 3",
        UNITFORMATTYPE: {
            METRICUNITS: 'MetricUnits',
            FINANCIALUNITS: 'FinancialUnits'
        },
        PADDING: {
            DEFAULT: 24
        },
        PLOTAREA: {
            FIRST_DATAPOINT: "firstDataPoint",
            LAST_DATAPOINT: "lastDataPoint"
        },
        BUBBLE: {
            DEFAULT_WIDTH_RATIO: 1 / 8
        },
        AXIS: {
            VERTICAL_ANGLE: 90,
            SCROLLBAR_NAME: "axisScrollbar",
            HIDDEN_TITLE: {
                COLOR: "#a6a6a6"
            },
            SPACING_TO_ROUGH: 0.05,
            SPACING_TO_ROOT: 0.02,
            SPACING_MAX_IN_PX: 16,
            FIX_SPACING_MAX_IN_PX: 8,
            FIX_TITLE_OFFSET: 8,
            FIX_LAYOUT_TYPE: 'FIX',
            FIRST_LETTER: 'M',
            ELLIPSIS: "..."
        },
        REFERENCE_LINE: {
            LABEL_PADDING: 2
        },
        TITLE:{
            KEY:"title",
            SPACING_WITH_MAIN_TO_ROUGH: 0.08,
            SPACING_MAX_IN_PX: 40,
            FIX_SPACING_MAX_IN_PX: 16
        },
        SCROLLBAR :{
            ALIAS: "scrollbar"
        },
        LEGEND_GROUP:{
            KEY: "legendGroup",
            SPACING_WITH_MAIN_TO_ROUGH: 0.04,
            SPACING_MAX_IN_PX: 40,
            FIX_SPACING_MAX_IN_PX: 16,
            AUTO_THRESHOLD: 415
        },
        DATALABEL:{
            HORIZONTAL_OVERLAPPING_PADDING: 0.14,
            HORIZONTAL_TOTAL_LABEL_PADDING: 6,
            VERTICAL_TOTAL_LABEL_PADDING: 3,
            LOCATIONMODE_INSIDE: "LOCATIONMODE_INSIDE",
            LOCATIONMODE_OUTSIDE: "LOCATIONMODE_OUTSIDE",
            LOCATIONMODE_LINE: "LOCATIONMODE_LINE",
            PIE_LINE_OFFSET: 7,
            PIE_LINE_LABEL_OFFSET: 0.05,
            PIE_OUTSIDE_THRESHOLD: 1,
            PIE_LINE_THRESHOLD: 1.1,
            HORIZONTAL_LABEL_OFFSET: 6,
            VERTICAL_LABEL_OFFSET: -3,
            BOUND_OFFSET: 1
        },
        LEGEND:{
            HORIZONTAL_OFFSET: 5,
            SEMANTIC_ITEMS_INTERVAL: 0.7
        },
        FLEXIBLE_STACK: {
            ID_SEPARATOR: "-"
        },
        TREE_MAP: {
            NON_LEAF_DIMENSION_LABEL: "v-nonLeafDimensionLabel",
            DEFAULT_TICKS : 5,
            NULL_COLOR : "#e0e0e0",
            START_COLOR : "#C2E3A9",
            END_COLOR : "#73C03C",
            PALETTE : [],
            LEGEND_VALUES : [],
            LEFT_PADDING : 7,
            TOP_PADDING : 6
        },
        NULL_VALUE : "Null_Value",
        MEKKO_CHART : {
            MEKKO_VALUE_AXIS2_CLASS : "v-value-axis2-mekko-body"
        },
        LABEL_POSITION: {
            LEFT: "left",
            RIGHT: "right",
            MIDDLE: "middle"
        },
        DATAPOINT_INVALIDITY: {
            IGNORE: 'ignore',
            CONNECT: 'connect',
            BREAK: 'break'
        },
        DATAPOINT_INVALIDITY_SUPPORTED: ['break', 'ignore', 'connect'],
        EXTENSION:{
            FAMILYNAME : 'extensionChart'
        },
        DATA_TYPE:{
            DATE: 'date'
        },
        PROPERTY_FLAGS: {
            CORE: 1,
            CUSTOM: 1 << 1
        },
        PAGINATION_MODE: {
            RESET: "reset",
            UPDATE: "update"
        },
        PROPERTY: {
            USER_LEVEL: "user"
        },
        BINDING: {
            MEASURE_NAMES: "measureNames",
            CONTEXT_ID_NAME: "_context_row_number"
        },
        FIELD: {
            INRESULT: "inResult",
            UNIT: "unit"
        },
        RECAP: {
            WIDTH: 6,
            PADDING: 2,
            RECAP_KEY: "recap_name_key"
        },
        ZOOM: {
            DEFAULT_ZOOM_LEVEL_STEPS: 14,
            DEFAULT_ZOOM_LEVEL_STEPS_MOSUSEWHEEL: 28,
            DEFAULT_ZOOM_LEVEL_MINOFFSET: 0.1
        },
        MIN_FILL_SIZE:3
    };

    return moduleConstants;
});

define('sap/viz/framework/core/ChartViewRegistry',[
    'sap/viz/framework/common/util/FunctionUtils',
    'require',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/extension/ExtensionUtils',
    'sap/viz/framework/extension/Constants',
    "sap/viz/framework/common/util/Constants",
    'exports'
], function (
    FunctionUtils,
    require,
    LangManager,
    ExtensionUtils,
    ExtensionConstants,
    Constants
) {
    "use strict";

    var viewCache = {};
    var bindCache = {};
    var plotCache = {};
    var externalCSSCache = {};
    var renderTypeCache = {};
    var loaded = false;
    var usingV3Registry = false;

    function filterBinding(bindDef, chartType) {
        if (!bindDef) {
            return bindDef;
        }
        var tmpBindings = bindDef.slice();
        if (/trellis/i.test(chartType)) {
            //Trellis charts do not need dataFrame
            tmpBindings = tmpBindings.filter(function (item) {
                return item.id !== "dataFrame";
            });
        } else {
            //Non-trellis charts do not need trellisRow and trellisColumn
            tmpBindings = tmpBindings.filter(function (item) {
                return !/trellis/.test(item.id);
            });
        }
        if (/scatter/i.test(chartType)) {
            //Scatter does not need bubbleWidth
            tmpBindings = tmpBindings.filter(function (item) {
                return !/bubble/.test(item.id);
            });
        }
        return tmpBindings;
    }

    function safeRegister(service, serviceMeta, verySafe, extensionMetaData) {
        var needSwitch = false;
        // if it requires earlier version than 5.15.0, then we will switch to v2(viz) flow api
        if (ExtensionUtils.checkVersionTo(serviceMeta, "5.14.*") && window.__sap_v2) {
            needSwitch = true;
        }
        if (needSwitch) {
            sap.viz.extapi.Flow = window.__sap_v2.extapi.Flow;
            //register all manifests first, only called in info's registerAll
            if(verySafe) {
                window.__sap_v2.api.manifest.Viz.get();
            }
        }
        try {
            service.viz.forEach(function(item) {
                if (item && typeof item.init === 'function') {
                    item = item.init();
                }
                //item.metadata doesn't exist for viz extensions so they won't register as info extension.
                if (item && item.metadata && extensionMetaData) {
                    var chartView = ExtensionUtils.create(item, extensionMetaData);
                    if (chartView) {
                        ChartViewRegistry.registerWithChartView(item.metadata,
                            chartView);
                    }
                }
            });
        } catch (e) {
            throw e;
        } finally {
            if (needSwitch) {
                sap.viz.extapi.Flow = window.__sap_v3.extapi.Flow;
            }
        }
    }
    
    var ChartViewRegistry = {

        unregister: function (type) {
            delete viewCache[type];
            delete bindCache[type];
            delete renderTypeCache[type];
        },
        unregisterAll: function () {
            viewCache = {};
            bindCache = {};
            plotCache = {};
            renderTypeCache = {};
        },
        registerAll: function (callback) {
            if (!(sap && sap.bi && sap.bi.framework && sap.bi.framework.getService)) {
                return null;
            }
            var services = sap.bi.framework.getService("*", "*sap.viz.impls");
            var servicesMetaData = sap.bi.framework.getServiceMetadata("*sap.viz.impls");

            var loadedCount = 0;
            var chartViewDefs = [];
            var bindDefs = [];
            var plotDefs = [];

            // obtain all of binding definition
            for (var i = 0; i < services.length; i++) {
                var service = services[i];
                if (service.viz) {
                    safeRegister(service, servicesMetaData[i], true);
                    continue;
                }
                if (ExtensionUtils.checkVersion(servicesMetaData[i])) {
                    chartViewDefs[i] = service.view;
                    if(service.plot){ 
                        plotDefs.push(service.plot);
                    }
                    //if(service.bindings){
                    bindDefs[i] = service.bindings;
                    //}
                    renderTypeCache[servicesMetaData[i].id] = service.renderType;
                }
            }

            // calculate the count of module needing loaded.
            var needLoadCount = bindDefs.length + services.length + plotDefs.length;
            if (needLoadCount > 0) {
                loaded = true;
            }
            plotDefs.forEach(function(plotDef, index){
                doRegister(plotDef, index, plotCache);
            });
            chartViewDefs.forEach(function (viewDef, index) {
                doRegister(viewDef, index, viewCache);
            });

            bindDefs.forEach(function (bindDef, index) {
                doRegister(bindDef, index, bindCache, true);
            });
            


            /* global requirejs: true */
            function doRegister(module, index, target, isBinding) {
                if (!module) {
                    return;
                }
                if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
                    var nextTickBak = requirejs.s.contexts._.nextTick;
                    requirejs.s.contexts._.nextTick = function (fn) {
                        fn();
                    };

                    if (usingV3Registry) {
                        module = module + '/v3';
                    }
                    require([module], function (view) {
                        loadedCount++;
                        if (isBinding) {
                            view = filterBinding(view, services[index].name);
                        }
                        target[servicesMetaData[index].id] = {
                            family: services[index].family,
                            constructor: view,
                            name: services[index].name,
                            vender: services[index].vender
                        };

                        if (loadedCount === needLoadCount) {
                            if (callback) {
                                callback();
                            }
                        }
                    });

                    requirejs.s.contexts._.nextTick = nextTickBak;
                }
            }
        },

        usingV3Registry: function (isUsingV3) {
            usingV3Registry = isUsingV3;
        },

        registerAllWithV3: function (callback) {
            this.registerAll(callback);
        },
        registerWithChartView: function (metadata, chartView) {
            var ID = metadata.id;
            ChartViewRegistry.registerViewer(ID, chartView);
            if (metadata.css) {
                ChartViewRegistry.registerExternalCSS(ID, metadata.css);
            }
            ChartViewRegistry.registerRenderType(ID, "DIV");
            ChartViewRegistry.registerBind(ID, metadata.bindingDefinition, Constants.EXTENSION.FAMILYNAME,
                metadata.name || ID, metadata.vender, metadata.dataType);
        },
        registerByType: function (type) {

            if (!loaded) {
                this.loadAll();
            }

            if (!(sap && sap.bi && sap.bi.framework && sap.bi.framework.getService)) {
                return null;
            }
            var services = sap.bi.framework.getService("*", "*sap.viz.impls");
            var servicesMetaData = sap.bi.framework.getServiceMetadata("*sap.viz.impls");
            var extensionMetaData = sap.bi.framework.getServiceMetadata(ExtensionConstants.BUNDLEID);

            for (var len = servicesMetaData.length, i = len - 1; i > -1; i--) {
                if (servicesMetaData[i].id === type && ExtensionUtils.checkVersion(servicesMetaData[i])) {
                    break;
                }
            }
            if (i < 0) {
                services = sap.bi.framework.getService("*", ExtensionConstants.BUNDLEID);
                for (len = extensionMetaData.length, i = len - 1; i > -1; i--) {
                    if (extensionMetaData[i].id === type && ExtensionUtils.checkVersion(extensionMetaData[i])) {
                        break;
                    }
                }

            }
            if (i > -1) {
                var chart = services[i];
                if (chart.viz) { //backward for extension
                    safeRegister(chart, servicesMetaData[i], false, extensionMetaData[i]);
                } else { //For new extension API
                    if (typeof chart === 'function' && !chart.metadata) {
                        chart = chart.apply();
                    }
                    if (chart && chart.metadata) {
                        var chartView = ExtensionUtils.create(chart, extensionMetaData[i]);
                        if (chartView) {
                            ChartViewRegistry.registerWithChartView(chart.metadata, chartView);
                        }
                    }
                    //TODO: Support register infochart by type.
                    // var service = services[i];
                    // renderTypeCache[servicesMetaData[i].id] = service.renderType;
                    // doRegister(service.view, i, viewCache);
                    // doRegister(service.bindings, i, bindCache, true);
                }
                return true;

            }
            return false;
        },
        getBindingDefinition: function (type) {
            var definition = bindCache[type];
            if (definition == null && !ChartViewRegistry.registerByType(type)) {
                FunctionUtils
                    .error("can't find binding definition according to type[" + type + "]");
            }
            return bindCache[type];
        },
        getExternalCSS: function (type) {
            return externalCSSCache[type];
        },
        registerBind: function(id, binds, family, name, vender, dataModel) {
            bindCache[id] = {
                constructor: binds,
                family: family,
                name: name,
                vender: vender,
                dataModel: dataModel === ExtensionConstants.CSVDATAMODEL? undefined:dataModel
            };
        },
        registerViewer: function (id, viewer) {
            viewCache[id] = {
                constructor: viewer
            };
        },
        registerExternalCSS: function (id, css) {
            externalCSSCache[id] = css;
        },
        registerRenderType: function (id, innerId) {
            renderTypeCache[id] = innerId;
        },



        loadAll: function () {
            var i, tmp;
            if (requirejs && requirejs.s && requirejs.s.contexts) {
                var hasAIO = false;
                for (i in requirejs.s.contexts) {
                    if (i.indexOf("sap.viz.aio") > -1) {
                        hasAIO = true;
                        break;
                    }
                }
                if (!hasAIO) {
                    i = "_";
                }
                tmp = requirejs.s.contexts[i].nextTick;
                requirejs.s.contexts[i].nextTick = function (fn) {
                    fn();
                };
            }
            if (usingV3Registry) {
                this.registerAllWithV3();
            } else {
                this.registerAll();
            }
            if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts[i] && tmp) {
                requirejs.s.contexts[i].nextTick = tmp;
            }
        },


        //TODO: add scale & property get.
        /* global requirejs: true */
        getMetadata: function (type, withFamily) {

            if (!loaded) {

                this.loadAll();

            }

            if (!bindCache[type]) {
                if (!this.registerByType(type)) {
                    return null;
                }
            }

            if (bindCache[type]) {
                var retVal = {
                    "type": type,
                    "name": bindCache[type].name,
                    "vender": bindCache[type].vender,
                    "bindings": filterBinding(bindCache[type].constructor, type),
                    "dataType": bindCache[type].dataModel,
                    "isBuiltIn": bindCache[type].family.indexOf('extension') < 0 ? true : false
                };
                if (withFamily) {
                    retVal.family = bindCache[type].family;
                }
                if (retVal.family === "extension") {
                    if (sap.bi.framework && sap.bi.framework.getServiceMetadata) {
                        var arr = sap.bi.framework.getServiceMetadata("*sap.viz.impls"),
                            j;
                        for (j = 0; j < arr.length; j++) {
                            if (arr[j].id === type) {
                                if (!(/^localize\!/.test(arr[j].customProperties.name))) {
                                    retVal.name = arr[j].customProperties.name;
                                }
                                break;
                            }
                        }
                    }
                }
                return retVal;
            } else {
                return null;
            }
        },

        getMetadataWithFamily: function (type) {
            return this.getMetadata(type, true);
        },

        getAllMetadata: function () {

            if (!loaded) {

                this.loadAll();

            }

            var metadata = [];
            for (var i in renderTypeCache) {
                if (renderTypeCache.hasOwnProperty(i)) {
                    var temp = this.getMetadata(i);
                    if (temp) {
                        metadata.push(this.getMetadata(i));
                    }
                }
            }
            return metadata;
        },

        getViewInstance: function (type, runtime, bindings) {

            var renderType = renderTypeCache[type];

            var chartViewClazzInfo = viewCache[type];
            if (chartViewClazzInfo == null || renderType == null) {
                FunctionUtils.error("can't find ChartView according to type[" + type + "]");
            }

            var ChartViewClazz = chartViewClazzInfo.constructor;

            return new ChartViewClazz(runtime, {
                chartType: type,
                renderType: renderType,
                bindings: bindings
            });
        },
        getRenderType : function(type){
            return renderTypeCache[type];
        }
        
        
        
    };

    return ChartViewRegistry;
});

define('sap/viz/framework/common/log/Analyzer',['sap/viz/framework/common/log/Logger'], function Setup(LOG) {
    function Stack() {
        this.stac = [];

        this.pop = function() {
            return this.stac.pop();
        };

        this.push = function(item) {
            this.stac.push(item);
        };

        this.peek = function() {
            return this.stac[this.stac.length - 1];
        };
    }

    /*
     * return {
     *   'usedJSHeapSize' : [OPTIONAL] int
     *   'totalJSHeapSize' : [OPTIONAL] int
     *   'flag' : string
     * }
     */
    function parseProfilingMsg(msg) {
        //[18403120][24402304][767557632]Render: layout
        var ret = {};
        var exp = /\[\d+\]/g;
        var exp2 = /\d+/;
        var exp3 = /[^\d\[\]]+/;
        var heapsize = msg.match(exp);
        if (heapsize) {
            ret.usedJSHeapSize = heapsize[0].match(exp2)[0];
            ret.totalJSHeapSize = heapsize[1].match(exp2)[0];
        }
        ret.flag = msg.match(exp3)[0];
        return ret;
    }

    /*
     * return {
     *   'name': string,
     *   'client': string,
     *   'info' : Array
     * }
     */
    function parseContextMsg(msg) {
        //"[Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.22 (KHTML, like Gecko)
        //Chrome/25.0.1364.152 Safari/537.22]creation:3:16:0"
        //[useragent]contextname:[:additional values]
        var ret = {};
        var exp = /\[.+\]/;
        var exp2 = /\]:.+$/;
        ret.client = msg.match(exp)[0];
        var ctxMatch = msg.match(exp2);
        if (ctxMatch) {
            var ctxa = ctxMatch[0].split(':');
            ret.name = ctxa[1];
            ctxa.shift();
            ctxa.shift();
            ret.info = ctxa;
        }
        return ret;
    }

    //TODO FIXME @Eddy CHANGE TO STRING
    var threshold = LOG.LEVEL.DEBUG;
    var msgs = [];
    var layout = null;
    var Analyzer = {
        // add property threshold to adapt new log framework and each appender needs a threshold property
        threshold: threshold,
        doAppend: function(logTime, logLevel, logCate, logMsg) {
            msgs.push([logTime, logLevel, logCate, logMsg]);
        },
        setLayout: function(layout) {
            return layout.format && (this.layout = layout);
        },
        getLevel: function() {
            return threshold;
        },
        setLevel: function(level) {
            threshold = level;
        },

        reset: function() {
            msgs = [];
        },

        pnrProfiling: function(msg) {
            //chrome supports window.performance.memory, we include it in profile message
            if (window && window.performance && window.performance.memory) {
                var m = window.performance.memory;
                msg = '[' + m.usedJSHeapSize + '][' + m.totalJSHeapSize + '][' + m.jsHeapSizeLimit + ']' + msg;
            }
            LOG.debug(msg, 'PROFILING');
        },

        pnrContext: function(msg) {
            //try to get as many env contexts as possible
            if (window && window.navigator) {
                msg = "[" + window.navigator.userAgent + "]" + msg;
            }
            LOG.debug(msg, 'CONTEXT');
        },

        profiling: function() {
            LOG.disable();

            var pfa = [];
            var ctxmsg;
            var currentPF;

            var pStartMsg;
            var pEndMsg;
            var calculateDoneFlag = "pnr.calculate.done";
            for (var i = 0, len = msgs.length; i < len; i++) {
                //typical msg:
                //[1362633819088][DEBUG][PROFILING]-[18403120][24402304][767557632]Render: layout
                //[1362633819099][DEBUG][PROFILING]-[18786948][24402304][767557632]Render: layout
                pStartMsg = msgs[i];
                if (pStartMsg[2] === 'CONTEXT') { //group the context, push a new currentPF
                    ctxmsg = parseContextMsg(pStartMsg[3]);
                    currentPF = {
                        ctx: {
                            name: ctxmsg.name,
                            client: ctxmsg.client,
                            info: ctxmsg.info
                        },
                        data: []
                    };
                    pfa.push(currentPF);
                } else if (pStartMsg[2] === 'PROFILING') {
                    if (pfa.length < 1) { // chekc pfa  has currentPF.
                        currentPF = {
                            data: []
                        };
                        pfa.push(currentPF);
                    }

                    var startMsg = parseProfilingMsg(pStartMsg[3]);

                    for (var j = i + 1; j < len; j++) {
                        pEndMsg = msgs[j];
                        var endMsg = parseProfilingMsg(pEndMsg[3]);
                        if (startMsg.flag && endMsg.flag === startMsg.flag && (pStartMsg.length > 0 &&
                            pStartMsg[pStartMsg.length - 1] !== calculateDoneFlag)) {
                            if (pEndMsg[pEndMsg.length - 1] != calculateDoneFlag) {
                                msgs[j].push(calculateDoneFlag);
                            }

                            // [start.flag, endTime-startTime, startTime, endTime, end.usedJSHeapSize -
                            // start.usedJSHeapSize, end.totalJSHeapSize - start.totalJSHeapSize, end.usedJSHeapSize,
                            // end.totalJSHeapSize]
                            currentPF.data.push([startMsg.flag, pEndMsg[0] - pStartMsg[0], pStartMsg[0],
                                pEndMsg[0], endMsg.usedJSHeapSize - startMsg.usedJSHeapSize, endMsg.totalJSHeapSize -
                                startMsg.totalJSHeapSize, endMsg.usedJSHeapSize, endMsg.totalJSHeapSize
                            ]);
                            break;
                        }
                    }

                }
            }

            LOG.enable();

            return pfa;
        },
    };

    return Analyzer;
});
define('sap/viz/framework/common/format/XCFormat',[
    'sap/viz/framework/common/util/ObjectUtils'
], function(ObjectUtils) {

    var locale = 'en';
    var isUseDefaultFormatter = false;
    var snf = ObjectUtils.getObject('sap.common.globalization.NumericFormatManager');
    var USE_DEFAULT_FORMATTER = 'use_default_formatter';

    // Transform to Excel timestamp, days from 1900.1.1
    function getMSTime(d){
        // 1900 - 1970
        var v = (d.getTime() + 22091616e5) / 864e5;
        // fix the date here as leap year is missing
        if(v < 61){
            v--;
        }
        return v;
    }

    var NF = snf ? {
        format: function(value, pattern, isUTC, options) {
            if (isUseDefaultFormatter === true  && (pattern === null || pattern === undefined)) {
                var decimalFormatString;
                if (options && options.decimalFormatString) {
                    decimalFormatString = ";" + options.decimalFormatString;
                } else {
                    decimalFormatString = "";
                }
                var XCDefaultFormatString = this.DEFAULT_FORMAT_NUMBER + decimalFormatString;
                return snf.formatToText(value, XCDefaultFormatString,true, undefined, typeof(value) === "string");
            }

            if (['Week', 'Quarter', 'YearMonth', 'YearQuarter', 'YearMonthDay'].indexOf(pattern) > -1) {
                return USE_DEFAULT_FORMATTER;
            }
            if(isUTC && value instanceof Date){
                // The globalization only formats to UTC when passing MS Excel timestamp
                value = getMSTime(value);
            }
            return snf.formatToText(value, pattern, true, undefined, typeof(value) === "string"); 

        },

        locale: function(value) {
            if (!arguments.length) {
                return locale;
            }
            locale = value;
            snf.setPVL(locale);

            //reset default format string
            NF.DEFAULT_FORMAT_DATE_TIME = snf.DEFAULT_FORMAT_DATE_TIME;
            NF.DEFAULT_FORMAT_TIME = snf.DEFAULT_FORMAT_TIME;
            NF.DEFAULT_FORMAT_SHORT_DATE = snf.DEFAULT_FORMAT_SHORT_DATE;
            NF.DEFAULT_FORMAT_LONG_DATE = snf.DEFAULT_FORMAT_LONG_DATE;
            NF.DEFAULT_FORMAT_NUMBER = snf.DEFAULT_FORMAT_NUMBER;
            NF.DEFAULT_FORMAT_BOOLEAN = snf.DEFAULT_FORMAT_BOOLEAN;
        },

        useDefaultFormatter: function(value) {
            if (!arguments.length) {
                return isUseDefaultFormatter;
            }
            isUseDefaultFormatter = value;
        },
        
        getDecimalSeparator: function(){
            return snf.getDecimalSeparator();  
        },

        DEFAULT_FORMAT_DATE_TIME: snf.DEFAULT_FORMAT_DATE_TIME,
        DEFAULT_FORMAT_TIME: snf.DEFAULT_FORMAT_TIME,
        DEFAULT_FORMAT_SHORT_DATE: snf.DEFAULT_FORMAT_SHORT_DATE,
        DEFAULT_FORMAT_LONG_DATE: snf.DEFAULT_FORMAT_LONG_DATE,
        DEFAULT_FORMAT_NUMBER: snf.DEFAULT_FORMAT_NUMBER,
        DEFAULT_FORMAT_BOOLEAN: snf.DEFAULT_FORMAT_BOOLEAN

    } : {
        format: function(value) {
            return value;
        },
        locale: function() {},
        getDecimalSeparator: function(){
            return '.';  
        },
        DEFAULT_FORMAT_DATE_TIME: '',
        DEFAULT_FORMAT_TIME: '',
        DEFAULT_FORMAT_SHORT_DATE: '',
        DEFAULT_FORMAT_LONG_DATE: '',
        DEFAULT_FORMAT_NUMBER: '',
        DEFAULT_FORMAT_BOOLEAN: ''
    };

    return NF;
});

define('sap/viz/framework/common/format/FormatManager',['sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/format/XCFormat'],
    function Setup(TypeUtils, XCFormat) {

        var locale = 'en',
            formatUtil = XCFormat,
            props = null,
            USE_DEFAULT_FORMATTER = 'use_default_formatter';
        var listeners = [];
        var useDefaultFormatter = null;
        var customDefaultFormatter = null;

        var FM =
            /** @lends sap.viz.format.FormatManager */
            {
                /**
                 * @constructs
                 */
                constructor: function() {
                    return;
                },

                /**
                 * Apply a locale
                 *
                 * @param {String}
                 *       locale
                 *
                 * @returns {Object} {@link sap.viz.format.FormatManager}
                 * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in
                   the future, please consider to use new version of this API instead.
                 */
                apply: function(_) {
                    // formalize the locale to support both 'en_US' and 'en-US'
                    locale = _.split("-").join("_");
                    XCFormat.locale(locale);
                    if (TypeUtils.isFunction(formatUtil.locale)) {
                        formatUtil.locale(locale);
                    }
                },

                /**
                 * format a string
                 *
                 * @param {String}
                 *       value
                 *
                 * @param {String}
                 *       pattern
                 *
                 * @returns {Object} {@link sap.viz.format.FormatManager}
                 * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in
                   the future, please consider to use new version of this API instead.
                 */
                format: function(value, pattern, isUTC, options) {
                    var result = formatUtil.format(value, pattern, isUTC, options);
                    if (result === USE_DEFAULT_FORMATTER) {
                        return XCFormat.format(value, pattern, isUTC, options);
                    }
                    return result;
                },

                /**
                 * set/get format function
                 *
                 * @param {Object}
                 *       func
                 *
                 * @returns {Object} {@link sap.viz.format.FormatManager}
                 * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in
                   the future, please consider to use new version of this API instead.
                 */
                formatFunc: function(_) {
                    if ( _!==undefined && _!==null && TypeUtils.isFunction(_.format)) {
                        formatUtil = _;
                    }
                    return formatUtil;
                },

                onFormatChanged: function() {
                    listeners.forEach(function(listener) {
                        listener.fn.apply(listener.scope);
                    });
                },

                addListener: function(listener) {
                    listeners.push(listener);
                },
                removeListener: function(listener) {
                    var index = listeners.indexOf(listener);
                    if (index !== -1) {
                        listeners.splice(index, 1);
                    }
                },

                useDefaultFormatter: function(_) {
                    if (!arguments.length) {
                        return XCFormat.useDefaultFormatter();
                    }
                    if (useDefaultFormatter !== _) {
                        XCFormat.useDefaultFormatter(_);
                        this.onFormatChanged();
                        useDefaultFormatter = _;
                    }

                },

                customDefaultFormatter: function(_) {
                    if (!arguments.length) {
                        return customDefaultFormatter;
                    }
                    if (useDefaultFormatter) {
                        customDefaultFormatter = _;
                    }
                },

                getDecimalFormatString: function(component) {
                    if (customDefaultFormatter) {
                        var options = customDefaultFormatter[component];
                        if (options && options.decimalFormatString) {
                            return options.decimalFormatString;
                        } else {
                            return null;
                        }
                    }
                },
                
                getPercentagePattern: function(number){
                    var str="0";
                    if(number > 0){
                        str += XCFormat.getDecimalSeparator();
                    }
                    for(var i = 0; i < number; ++i){
                        str += "0";
                    }
                    str += "%";
                    return str;
                    
                },

                /**
                 * default data time format. It will changed by locale.
                 */
                DEFAULT_FORMAT_DATE_TIME: formatUtil.DEFAULT_FORMAT_DATE_TIME,
                /**
                 * default time format. It will changed by locale.
                 */
                DEFAULT_FORMAT_TIME: formatUtil.DEFAULT_FORMAT_TIME,
                /**
                 * default short data format. It will changed by locale.
                 */
                DEFAULT_FORMAT_SHORT_DATE: formatUtil.DEFAULT_FORMAT_SHORT_DATE,
                /**
                 * default long data format. It will changed by locale.
                 */
                DEFAULT_FORMAT_LONG_DATE: formatUtil.DEFAULT_FORMAT_LONG_DATE,
                /**
                 * default number format. It will changed by locale.
                 */
                DEFAULT_FORMAT_NUMBER: formatUtil.DEFAULT_FORMAT_NUMBER,
                /**
                 * default boolean format. It will changed by locale.
                 */
                DEFAULT_FORMAT_BOOLEAN: formatUtil.DEFAULT_FORMAT_BOOLEAN,
                /**
                 *  use default XCFormatter.
                 */
                DEFAULT_FORMATTED_VALUE: USE_DEFAULT_FORMATTER,

                SUPPORT_CUSTOM_COMPONENTS: {
                    DATALABEL: "dataLabel",
                    TOOLTIP: "tooltip",
                    VALUEAXIS: "valueAxis",
                    MBCLegend: "MBCLegend",
                    SIZELEGEND: "sizeLegend"
                }
            };

        return FM;
    });

define('sap/viz/framework/common/locale/Locale',['sap/viz/framework/common/lang/LangManager', 'sap/viz/framework/common/format/FormatManager',
    'sap/viz/framework/common/util/TypeUtils'
], function Setup(langManager, FormatManager, TypeUtils) {
    var locale = 'en',
        listeners = [];

    function onLocaleChanged(locale) {
        listeners.forEach(function(listener) {
            listener.fn.apply(listener.scope, [locale]);
        });
    }

    var Locale =
        /** @lends sap.viz.Locale */
        {
            /**
             * @constructs
             */
            constructor: function() {
                return;
            },

            /**
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
             please consider to use new version of this API instead. You can use sap.viz.api.env.Locale.set/get instead.
             * @param {String}
             *       locale
             *
             * @returns {Object} {@link sap.viz.Locale}
             */
            locale: function(loc, callbackFunc, options) {
                if (!arguments.length) {
                    return locale;
                }
                locale = loc;
                FormatManager.apply(locale);
                langManager.apply(locale, function() {
                    onLocaleChanged(loc);
                    if (TypeUtils.isFunction(callbackFunc)) {
                        callbackFunc.apply();
                    }
                }, null, options);
                return Locale;
            },

            /**
             * Add a listener which will be executed when current language is changed.
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
               please consider to use new version of this API instead. You can use sap.viz.extapi.env.Locale.
               addListener instead.
             * @param {Object}
             *          listener
             * @param {Function}
             *          listener.fn the listener function
             * @param {Object}
             *          listener.scope the "this" object in the listener function
             *
             * @returns {Object} {@link sap.viz.Locale}
             */
            addListener: function(listener) {
                listeners.push(listener);
                return Locale;
            },

            /**
             * Remove the listener.
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
               please consider to use new version of this API instead. You can use sap.viz.extapi.env.Locale.
               removeListener instead.
             * @param {Object} listener
             *          the listener reference
             *
             * @returns {Object} {@link sap.viz.Locale}
             */
            removeListener: function(listener) {
                var index = listeners.indexOf(listener);
                if (index !== -1) {
                    listeners.splice(index, 1);
                }
                return Locale;
            }
        };

    return Locale;
});

define('sap/viz/framework/core/env',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/log/Analyzer',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/locale/Locale'
], function Setup(TypeUtils, LOG, analyzer, ObjectUtils, Locale) {
    var _initLogger = function(options) {
        if (!options) {
            return;
        }

        if (options.enable) {
            LOG.enable();
        }

        if (!options.appenders) {
            //no customize appenders, we'll use default appender
            if (options.level) {
                //FIXME @Eddy, allow set level with string
                //FIXME and only for debug, trace we will use analyzer as appender
                //otherwise we set this level to default appender
                LOG.setAppenders([{
                    appenderKey: 'sap.viz.util.analyzer',
                    appender: analyzer
                }]);
            }
            return;
        }
        //if user set appenders, we remove default appender
        LOG.setAppenders([]);
        for (var i = 0, l = options.appenders.length; i < l; i++) {
            var appender = options.appenders[i];
            if (appender.appenderKey) {
                LOG.addAppender(appender.appenderKey, appender.appender);
            } else {
                LOG.addAppender(appender.appender);
            }

        }
        // LOG.addAppender('analyzerAppender', new AnalyzerAppender());
        // LOG.addAppender("ajaxApp", new LOG.AjaxAppender("http://localhost:8800"));
        // LOG.getAppender("ajaxApp").setLevel(LOG.LEVEL.DEBUG);
        //LOG.getAppender("[default]").setLevel(_level);
    };

    var _initLocal = function(options, callback) {
        Locale.locale(options.locale, callback);
    };

    var setting = {};

    var env =
        /**
         * @lends sap.viz.Environment
         */
        {
            /**
             * @constructs
             */
            constructor: function() {

            },
            /**
             * initialize visualization environment
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
               please consider to use new version of this API instead.
             * @param {Object}
             *            option {locale:'en_US'}
             *
             */
            initialize: function(option, callback) {
                if (!option) {
                    return;
                }
                _initLogger(option.log);
                if (option.locale) {
                    _initLocal(option, callback);
                } else {
                    if (callback) {
                        callback.call();
                    }
                }

                setting = ObjectUtils.extend(true, {}, setting, option);
                
            },

            /**
             * get Environment setting.
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
               please consider to use new version of this API instead.
             * @return {Object}
             *            option {locale:'en_US'}
             *
             */
            getEnvSetting: function() {
                return setting;
            },

            /**
             * @ignore
             * @param enable
             */
            setLoggerEnable: function(enable) {
                if (enable === true) {
                    LOG.enable();
                } else if (enable === false) {
                    LOG.disable();
                }

            },

            /**
             * @ignore
             * @returns TODO: add desc
             */
            addLogAppender: function() {
                if (arguments.length === 1) {
                    return LOG.addAppender(arguments[0]);
                } else if (arguments.length === 2) {
                    return LOG.addAppender(arguments[0], arguments[1]);
                }

            },

            /**
             * @ignore
             * @param key
             * @returns TODO: add desc
             */
            removeLogAppender: function(key) {
                return LOG.removeAppender(key);
            }
        };

    return env;
});
define('sap/viz/framework/core/config',['sap/viz/framework/common/util/FunctionUtils', 'sap/viz/framework/core/env'],
    function Setup(FunctionUtils, env) {

        var globalSetting = {
            "treatAsMobile" : "auto"
        };
        var canvgConfigs = {};

        var enableCanvg = false;

        var manager = {

            constructor: function() {
                return;
            },

            enableCanvg: function(_) {
                if (!arguments.length) {
                    //get option from environment.
                    return (env.getEnvSetting().enableCanvg !== undefined) ? env.getEnvSetting().enableCanvg :
                        enableCanvg;
                }
                enableCanvg = _;
                return manager;
            },

            register: function(obj) {
                if (canvgConfigs.hasOwnProperty(obj.id)) {
                    return;
                }
                canvgConfigs[obj.id] = obj.value;
                return manager;
            },

            get: function(key) {
                if (canvgConfigs.hasOwnProperty(key)) {
                    return canvgConfigs[key];
                }
            },

            getConfigs: function() {
                return canvgConfigs;
            },

            globalSetting: function(key, value) {
                if (value !== undefined && value !== null) {
                    globalSetting[key] = value;
                } else {
                    return globalSetting[key];
                }
            }
        };

        return manager;
    });
define('sap/viz/framework/common/util/UADetector',["sap/viz/framework/core/config"],

    function Setup(config) {
        var devicePixRatio = window.devicePixelRatio || 1;
        var versionSearchString;
        var searchString = function(data) {
            for (var i = 0; i < data.length; i++) {
                var dataString = data[i].string;
                var dataProp = data[i].prop;
                versionSearchString = data[i].versionSearch || data[i].identity;
                if (dataString) {
                    if (dataString.indexOf(data[i].subString) != -1) {
                        return data[i].identity;
                    }
                } else if (dataProp) {
                    return data[i].identity;
                }
            }
        };
        var seps = [";", " "];
        var searchVersion = function(dataString) {
            var index = dataString.indexOf(versionSearchString);
            if (index == -1) {
                return;
            }
            var versionStr = dataString.substring(index + versionSearchString.length + 1);
            var i = 0,
                l = seps.length,
                sepIndex = -1;
            while (sepIndex === -1 && i < l) {
                sepIndex = versionStr.indexOf(seps[i++]);
            }
            if (sepIndex !== -1) {
                versionStr = versionStr.slice(0, sepIndex);
            }
            return versionStr;
        };
        var dataBrowser = [{
            string: navigator.userAgent,
            subString: "Chrome",
            identity: "Chrome"
        }, {
            string: navigator.userAgent,
            subString: "OmniWeb",
            versionSearch: "OmniWeb/",
            identity: "OmniWeb"
        }, {
            string: navigator.userAgent,
            subString: "Safari",
            identity: "Safari",
            versionSearch: "Version"
        }, {
            string: navigator.userAgent,
            subString: "Apple",
            identity: "UIWebView",
            versionSearch: "AppleWebKit"
        }, {
            prop: window.opera,
            identity: "Opera",
            versionSearch: "Version"
        }, {
            string: navigator.vendor,
            subString: "iCab",
            identity: "iCab"
        }, {
            string: navigator.vendor,
            subString: "KDE",
            identity: "Konqueror"
        }, {
            string: navigator.userAgent,
            subString: "Firefox",
            identity: "Firefox"
        }, {
            string: navigator.vendor,
            subString: "Camino",
            identity: "Camino"
        }, { // for newer Netscapes (6+)
            string: navigator.userAgent,
            subString: "Netscape",
            identity: "Netscape"
        }, {
            string: navigator.userAgent,
            subString: "MSIE",
            identity: "Explorer",
            versionSearch: "MSIE"
        }, {
            string: navigator.userAgent,
            subString: ".NET",
            identity: "Explorer"
        }, {
            string: navigator.userAgent,
            subString: "Trident",
            identity: "Explorer"
        }, {
            string: navigator.userAgent,
            subString: "Gecko",
            identity: "Mozilla",
            versionSearch: "rv"
        }, { // for older Netscapes (4-)
            string: navigator.userAgent,
            subString: "Mozilla",
            identity: "Netscape",
            versionSearch: "Mozilla"
        }];

        var dataOS = [{
            string: navigator.userAgent,
            subString: "Windows Phone",
            identity: "WindowsPhone"
        },{
            string: navigator.platform,
            subString: "Win",
            identity: "Windows"
        }, {
            string: navigator.platform,
            subString: "Mac",
            identity: "Mac"
        }, {
            string: navigator.userAgent,
            subString: "iPhone",
            identity: "iPhone/iPod"
        }, {
            string: navigator.userAgent,
            subString: "iPad",
            identity: "iPad"
        }, {
            string: navigator.platform,
            subString: "Linux",
            identity: "Linux"
        }];

        var dataRenderEngine = [{
            string: navigator.userAgent,
            subString: "Presto",
            identity: "Presto"
        }, {
            string: navigator.userAgent,
            subString: "KHTML",
            identity: "KHTML"
        }, {
            string: navigator.userAgent,
            subString: "Gecko",
            identity: "Gecko"
        }, {
            string: navigator.userAgent,
            subString: "Trident",
            identity: "Trident"
        }];

        var dataMobile = [{
            string: navigator.userAgent,
            subString: "Touch",
            identity: "Touch"
        },{
            string: navigator.userAgent,
            subString: "Android",
            identity: "Android",
        }, {
            string: navigator.userAgent,
            subString: "iPhone",
            identity: "iPhone"
        }, {
            string: navigator.userAgent,
            subString: "iPad",
            identity: "iPad"
        }];

        var _browser = searchString(dataBrowser),
            _userAgent = _browser  || "An unknown browser",
            _version = searchVersion(navigator.userAgent) || searchVersion(navigator.appVersion) ||
                       "an unknown version",
            _isIE = _browser === "Explorer",
            _isFirefox = _browser === "Firefox",
            _isChrome = _browser === "Chrome",
            _isSafari = _browser === "Safari",
            _isUIWebView = _browser === "UIWebView",
            _os = searchString(dataOS) || "an unknown OS",
            _renderEngine = searchString(dataRenderEngine) || "An unknown RenderEngine",
            _pointerEnabled = navigator.pointerEnabled === true || 
                              "onpointertouch" in document.documentElement,
            _isTablet = navigator.userAgent.indexOf("Tablet") > -1,
            _mobile = searchString(dataMobile),
            _isTouch = _mobile === "Touch",
            _isEdge = navigator.userAgent.indexOf("Edge") > -1;

        var UADetector = {
            userAgent: function() {
                return _userAgent;
            },
            version: function() {
                return _version;
            },
            isEdge: function(){
                return _isEdge;
            },
            isIE: function() {
                return _isIE;
            },
            isIE11:function(){
                //http://stackoverflow.com/questions/21825157/internet-explorer-11-detection
                return _isIE && !!window.MSInputMethodContext && !!document.documentMode;
            },
            isFirefox: function() {
                return _isFirefox;
            },
            isChrome: function() {
                return _isChrome;
            },
            isSafari: function() {
                return _isSafari;
            },
            isUIWebView: function() {
                return _isUIWebView;
            },
            os: function() {
                return _os;
            },
            devicePixelRatio: function() {
                return devicePixRatio;
            },
            renderEngine: function() {
                return _renderEngine;
            },
            isMobile: function() {
                var treatAsMobile = config && config.globalSetting("treatAsMobile");
                var isPropUseful =  treatAsMobile && /on|off/.test(treatAsMobile);

                //exclude windows phone from TreatAsMobile
                if(isPropUseful && ((_isIE && _isTouch && _os !== "WindowsPhone") || _isEdge)){
                    return treatAsMobile === "on";
                }else{
                    return !!_mobile;
                }
            },
            isIOS: function() {
                return _mobile === "iPhone" || _mobile === "iPad";
            },
            isWindowsSurface: function() {
                var isSurfaceIE = (_os === "Windows" || _os === "WindowsPhone") && _isTouch;
                //Edge did not differentiate Desktop or Surface
                //we assume if the edge allow touch, it is Surface
                //!!!CAUTIOS  this may mistreat normal non-touch laptop as surface
                var isSurfaceEdge = _isEdge && _pointerEnabled;   
                //TODO: Chrome anf FireFox did not differentiate Desktop or Surface, either
                return isSurfaceIE || isSurfaceEdge;                      
            },
            isWindowsPhone: function(){
                return ((_os === "WindowsPhone") && _isTouch);
            },
            isAndroid: function() {
                return _mobile === "Android";
            },
            isPointerEnabled: function() {
                return _isIE && _pointerEnabled;
            }
        };
        return (UADetector);
    });
define('sap/viz/framework/common/util/UrlUtils',['sap/viz/framework/common/util/UADetector'], function Setup(UADetector) {
    var HAS_CSS_FLAG = "_viz_template_with_css";
    var urlUtils = {
        parseUrl : function (url) {
            var a = document.createElement('a'); 
            a.href = url; 
            return { 
                source: url, 
                protocol: a.protocol.replace(':',''), 
                host: a.hostname, 
                port: a.port, 
                query: a.search, 
                params: (function(){ 
                    var ret = {}, 
                    seg = a.search.replace(/^\?/,'').split('&'), 
                    len = seg.length, i = 0, s; 
                    for (;i<len;i++) { 
                        if (!seg[i]) { continue; } 
                        s = seg[i].split('='); 
                        ret[s[0]] = s[1]; 
                    } 
                    return ret; 
                })(), 
                file: (a.pathname.match(/\/([^\/?#]+)$/i) || [undefined,''])[1], 
                hash: a.hash.replace('#',''), 
                path: a.pathname.replace(/^([^\/])/,'/$1'), 
                relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [undefined,''])[1], 
                segments: a.pathname.replace(/^\//,'').split('/') 
            }; 
        },

        buildUrlInfo : function (path, id, fileName) {
            var urlInfo = this.parseUrl(path);
            var hasCssFile = urlInfo.params[HAS_CSS_FLAG];
            var loadPath = (urlInfo.query && urlInfo.query !== "") ? 
                path.split(urlInfo.query)[0] : path;
            // for ie
            if (UADetector.isIE() && !(/(^\/)/.test(path)) && /(^\/\.{0,2})/.test(loadPath)) {
                loadPath = loadPath.replace( /(^\/)/, "");
            }
            loadPath = /\/$/.test(loadPath) ? loadPath : loadPath + '/';
            return {
                path : loadPath + id + "/" + fileName,
                originalPath : loadPath,
                hasCssFile : hasCssFile
            };
        }
    };
    return urlUtils;
}); 
define('sap/viz/framework/common/template/TemplateManager',[
    'jquery',
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/UrlUtils',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/ResourceLoader',
    'sap/viz/framework/common/log/Logger'
], function($, FunctionUtils, TypeUtils, ObjectUtils, UrlUtils, langManager, ResourceLoader, Logger) {

    var listeners = [];
    var currentTemplate;
    var defaultTemplateId = "default";
    var defaultTemplate = {
        id: defaultTemplateId,
        name: "Default"
    };
    var HAS_CSS_FLAG = "_cvom_template_with_css";
    var TEMPLATE_CSS_FILE = "_viz_tpl_css_file";
    var TEMPLATE_CSS_STRING = "_viz_tpl_css_string";

    var templateQueue;
    if (window.sap && sap.viz && sap.viz.extapi && sap.viz.extapi.env &&
        sap.viz.extapi.env.template && sap.viz.extapi.env.template._queue) {
        templateQueue = sap.viz.extapi.env.template._queue;
        delete sap.viz.extapi.env.template;
    }

    var manifest = {};
    manifest.registerCategory = function (name, factory, factoryThisObj) {
        if (!TypeUtils.isNonEmptyString(name)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CATEGORY_NAME_NOT_EMPTY'));
        }

        if (factory && !TypeUtils.isFunction(factory)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION'));
        }

        if (manifest.hasOwnProperty(name)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_EXIST_CATEGORY_NAME', name));
        }

        var collection = d3.map();
        /**
         * xxx represents feeds, module and viz. The three categories have been registered into manifest and
         * could provide some common APIs.
         * @class sap.viz.manifest.xxx
         * @ignore
         */
        var category = {
            /**
             * Load an item from category by id.</br>
             * </br>
             * If the item is a Built-in_Manifest_Objects, it will provide some other APIs.Please see the
             * corresponding object in Built-in_Manifest_Objects.</br>
             * @see Built-in_Manifest_Objects
             * @method sap.viz.manifest.xxx#get
             * @param {String} id the id of item
             * @param {Object} throwErrorIfNull optional, a exception type
             * @returns {Object} the item loaded from category by id
             * @example <caption>Sample Code:</caption>
             * var moduleFeeds =  manifest.feeds.get(id);//xxx represents feeds
             * var barModule = manifest.module.get(barId);//xxx represents module
             * var lineChart = manifest.viz.get(lineChartId);//xxx represents viz
             * @ignore
             */
            get: function (id, throwErrorIfNull) {
                var manifest = this;
                var result = collection.get(id);
                if (result === undefined && throwErrorIfNull) {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'), id, name);
                }

                if (result && result["__needParsed__"] === true) {
                    var isAbstract = result["abstract"] === true;
                    result = ObjectUtils
                        .extend(true, null, result.base !== undefined ? category.get(
                            result.base, true) : null, result);

                    Object.defineProperty(result, "abstract", {
                        value: isAbstract,
                        enumerable: false
                    });

                    if (factory && !isAbstract) {
                        factory.call(factoryThisObj, result, manifest);
                    }

                    delete result["__needParsed__"];
                    collection.set(id, result);
                }
                return result;
            },

            /**
             * unregister the item with specified id from category
             * @method sap.viz.manifest.xxx#unregister
             * @param {String} id id of the item being unregistered
             * @return {Object} the removed module Object
             * @example <caption>Sample Code:</caption>
             * manifest.module.unregister('sap.viz.modules.bar');
             * @ignore
             */
            unregister: function (id) {
                var ret;
                if (TypeUtils.isExist(id)) {
                    ret = collection.get(id);
                    collection.remove(id);

                    //Remove from template queue
                    delete templateQueue[id];

                    //Reset currentTemplate to default if unregiester currentTemplate
                    if(id === currentTemplate.id){
                        currentTemplate = {};
                    }
                }
                return ret;
            },

            /**
             * Register an item into category
             * @method sap.viz.manifest.xxx#register
             * @param {Object} newItems variable parameters, at least need one item to be registered into category
             * @return {Object} manifest
             * @example <caption>Sample Code:</caption>
             * manifest.viz.register(chartOne);//xxx represents viz
             * ....
             * manifest.viz.register(chartOne,chartTwo,chartThree);
             * ....
             * manifest.module.register(tooltip);//xxx represents module
             * @ignore
             */
            register: function () {
                [].forEach.call(arguments, function (obj) {
                    if (TypeUtils.isUndefined(obj)) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT'));
                    }

                    var idStr = obj.id;

                    if (!TypeUtils.isNonEmptyString(idStr)) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID'));
                    }

                    if (collection.has(idStr)) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_ALREADY_EXIST_IN_CATEGORY',
                                idStr, name));
                    }

                    obj["__needParsed__"] = true;

                    collection.set(idStr, obj);
                });

                return manifest;
            }
        };

        manifest[name] = category;
        return category;
    };

    var templateCategory = manifest.registerCategory("template", function(obj) {
        var css = obj.css;
        if (!TypeUtils.isString(css)) {
            var text = "";
            for (var selector in css) {
                if (css.hasOwnProperty(selector)) {
                    text += selector + "{";
                    var declaration = css[selector];
                    for (var name in declaration) {
                        if (declaration.hasOwnProperty(name)) {
                            text += name + ":" + declaration[name] + ";";
                        }
                    }
                    text += "}";
                }
            }
            obj.css = text;
        }

        Object.defineProperties(obj, {
            props: {
                value: function(vizId) {
                    var properties = obj.properties;
                    if (properties) {
                        return properties[vizId];
                    }
                }
            },
            getScales : {
                value : function(vizId) {
                    var scales = obj.scales;
                    if (scales) {
                        return scales[vizId];
                    }
                }
            }
        });
        return obj;
    });

    function getUrl(path, id) {
        return UrlUtils.buildUrlInfo(path, id,  "template.js");
    }

    function getCssFile(path, id) {
        return UrlUtils.buildUrlInfo(path, id,  "template.css");
    }

    function takeinDefQueue(id) {
        var templateConfigs = [];
        var registered = !!templateCategory.get(id);
        var templatesById = templateQueue && templateQueue[id];

        if (templatesById) {
            for (var i = 0; i < templatesById.length; ++i) {
                var template = templatesById[i];
                if (registered) {
                    manager.extend(id, template);
                } else {
                    manager.register(template);
                    registered = true;
                }
            }
        }
        return templateCategory.get(id);
    }

    /** @lends sap.viz.TemplateManager */
    var manager = {
        /**
         * The file paths of templates folder. {@link sap.viz.TemplateManager} will discover available templates in
         * this folder.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @default ["../../../resources/templates"]
         */
        loadPath: ["../../../resources/templates"],

        /**
         * Return current applied template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.
           current instead.
         * @returns {Object} the manifest of template
         */
        current: function() {
            var id = currentTemplate && currentTemplate.id;
            if (id) {
                takeinDefQueue(id);
            }
            return currentTemplate;
        },

        /**
         * Get a loaded template object by template id
         * @param {string} id - a template id
         * @return {object} the template object
         */
        retrieve: function(id) {
            var template = templateCategory.get(id);
            if(!template){
                template = takeinDefQueue(id);
            }
            return template && !template._notLoaded ? template : null;
        },

        /**
         * Get a loaded template object by template id. If not found, return the current applied template.
         * If no template is available, return empty object.
         * @param {string} [id] - a template id, if omitted, return the current template
         * @return {object} the template object
         */
        get: function(id) {
            return manager.retrieve(id) || currentTemplate || {};
        },

        /**
         * Pre-load multiple templates but not apply them
         * @param {string[]|string} templateIds -
         * @param {function(loadedIds, errIds)} callback when all templates completed loading or failed to load.
         * @param {function(id)} callback when some templates failed to load. Trigger for every template
         */
        load: function(templateIds, completeCallback, failedCallback) {
            if(!TypeUtils.isArray(templateIds)){
                templateIds = [templateIds];
            }
            templateIds = templateIds.filter(TypeUtils.isString);
            var templateCount = templateIds.length;
            var loadedIds = [];
            var errIds = [];
            var onComplete = function(errors, id){
                var template = takeinDefQueue(id);

                // TODO: What to do when there's multiple cssFlags?
                var cssFlagContext;
                for(var i = 0; i < errors.length; ++i){
                    if(errors[i] && errors[i].cssFlag){
                        cssFlagContext = errors[i];
                    }
                }
                // for loaded template with css file.
                if ((!template || !template.cssFlag) && cssFlagContext) {
                    if(!template){
                        templateCategory.register({
                            id: id,
                            _notLoaded: true
                        });
                        template = templateCategory.get(id);
                    }
                    template.cssFlag = cssFlagContext.cssFlag;
                    template.path = cssFlagContext.path;
                }

                if (template) {
                    loadedIds.push(id);
                } else {
                    errIds.push(id);
                }

                // wait for every temlate to finish loading
                if(--templateCount === 0){
                    errIds.forEach(function(id){
                        if (failedCallback) {
                            failedCallback(id, 'Loading template ' + id + ' failed.');
                        }
                        try {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_LOADING_TEMPLATE_FAIL', id));
                        } catch (e) {
                            // Not a fatal error.
                        }
                    });
                    if(completeCallback){
                        completeCallback(loadedIds, errIds);
                    }
                }
            };

            if(templateCount){
                templateIds.forEach(function(id){
                    var template = takeinDefQueue(id);
                    if (template && !template._notLoaded) {
                        onComplete([], id);
                    } else {
                        ResourceLoader.loadResource({
                            id: id,
                            paths: manager.loadPath,
                            getUrl: getUrl,
                            getCssFile: getCssFile,
                            onComplete: onComplete
                        });
                    }
                });
            } else if(completeCallback) {
                completeCallback(loadedIds, errIds);
            }
            return manager;
        },

        /**
         * Check whether a template has been loaded
         * @param {string} id - a template id
         * @return {boolean} whether the template is loaded
         */
        isLoaded: function(id) {
            var template = templateCategory.get(id);
            return !!template && !template._notLoaded;
        },

        /**
         * Apply(switch) a template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
          please consider to use new version of this API instead. You can use sap.viz.api.env.Template.set instead.
         * @param {String}
         *          id the template id
         * @param {Function}
         *          [cb] the call back function. It will be executed after template is applied successfully with
         *          current template as parameter. *
         * @param {Object}
         *          [thisObj] "this" object during calling call back function.
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         *
         */
        apply: function(id, cb, thisObj, failedCallback) {
            return manager.load(id, function(){
                var template = templateCategory.get(id);
                if(template && !template._notLoaded){
                    currentTemplate = template;
                }else{
                    currentTemplate = {};
                }

                // ensure css could work only when the cssFlag is true. 
                if (template && template.cssFlag) {
                    if ($("#" + TEMPLATE_CSS_FILE).length) {
                        $("#" + TEMPLATE_CSS_FILE).attr("href", getCssFile(template.path, id).path);
                    } else {
                        $("head").append('<link type="text/css" rel="stylesheet" ' + 
                        'id="' + TEMPLATE_CSS_FILE + '" href="' +
                        getCssFile(template.path, id).path + '">');
                    }
                } else if ($("#" + TEMPLATE_CSS_FILE).length) {
                    $("#" + TEMPLATE_CSS_FILE).attr("href", "");
                }
                if (template && template.css && !template.isBuiltIn) {
                    // css string
                    if ($("#" + TEMPLATE_CSS_STRING).length) {
                        $("#" + TEMPLATE_CSS_STRING).text(template.css);
                    } else {
                        $("head").append("<style id='" + TEMPLATE_CSS_STRING + "'>" + template.css + "</style>"); 
                    }
                } else if ($("#" + TEMPLATE_CSS_STRING).length) {
                    $("#" + TEMPLATE_CSS_STRING).text("");
                }
                if(template){
                    for (var i = 0; i < listeners.length; ++i) {
                        var listener = listeners[i];
                        listener.fn.apply(listener.scope, [template, cb]);
                    }
                    if (cb) {
                        cb.call(thisObj, template);
                    }
                }
            }, function(){
                currentTemplate = {};
                if(failedCallback){
                    failedCallback.call(thisObj);
                }
            });
        },

        /**
         * Register new templates.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.
           register instead.
         * @param {Object...}
         *          templates the template descriptors(may be multiple).
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        register: function() {
            templateCategory.register.apply(templateCategory, arguments);
            return manager;
        },

        unregister : function(id) {
            templateCategory.unregister(id);
            return manager;
        },

        /**
         * Extend/modify an existing template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
         * please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.
         * register instead.
         * @param {String}
         *          id the template id
         * @param {Object}
         *          obj the extended part.
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        extend: function(id, obj) {
            var template = templateCategory.get(id) || takeinDefQueue(id);
            if (template) {
                ObjectUtils.extend(true, template.properties, obj.properties);
                template.isGhost = obj.isGhost || template.isGhost;
                if (obj.scales && template.scales) {
                    ObjectUtils.extend(true, template.scales, obj.scales);
                } else if (obj.scales) {
                    template.scales = obj.scales;
                }
                // template.css += obj.css || "";
            }
            return manager;
        },

        /**
         * Add a listener which will be executed when current template is changed.
         * @ignore
         * @param {Object}
         *          listener
         * @param {Function}
         *          listener.fn the listener function
         * @param {Object}
         *          listener.scope the "this" object in the listener function
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        addListener: function(listener) {
            listeners.push(listener);
            return manager;
        },

        /**
         * Remove the listener.
         * @ignore
         * @param {Object} listener
         *          the listener reference
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        removeListener: function(listener) {
            var index = listeners.indexOf(listener);
            if (index !== -1) {
                listeners.splice(index, 1);
            }
            return manager;
        }
    };

    var apiProp = {
        writable: false,
        configurable: false
    };
    Object.defineProperties(manager, {
        current: apiProp,
        apply: apiProp,
        register: apiProp,
        unregister : apiProp
    });

    manager.register(defaultTemplate);
    currentTemplate = templateCategory.get(defaultTemplateId);
    return manager;
});

define('sap/viz/framework/scale/ScaleRepository',[
], function Setup(
) {
    var scales = {};

    return scales;
});

define('sap/viz/framework/scale/ScaleMapping',[], function() {
    return {
        "TO_OLD_SCALETYPE": {
            "play.field": "playScale",
            "frame.data": "frameScale",
            "trellis.columnCategory": "categoryScale",
            "trellis.rowCategory": "categoryScale",
            "layout.category": "categoryScale",
            "layout.secondCategory":"categoryScale",
            "layout.value": "valueScale",
            "layout.secondValue": "valueScale",
            "layout.tree": undefined,
            "layout.time": "timeScale",
            "layout.mekko": "mekkoScale",
            "layout.mekkoCategory": "mekkoScale",
            "mark.color": "colorScale",
            "mark.shape": "shapeScale",
            "mark.size": "valueScale",
            "mark.target": "valueScale",
            "mark.forecast": "valueScale",
            "mark.quantizeColor": "quantizeScale",
            "mark.pattern" :"patternScale",
            "mark.waterfallType": "waterfallScale"
        },
        "TO_OLD_SCALEROLE": {
            "play.field": "play",
            "frame.data": "frame",
            "trellis.columnCategory": "trellisColumn",
            "trellis.rowCategory": "trellisRow",
            "layout.category": "layout",
            "layout.secondCategory": "layout",
            "layout.value": "layout",
            "layout.secondValue": "layout",
            "layout.time": "layout",
            "layout.mekko": "layout",
            "layout.mekkoCategory": "layout",
            "mark.color": "mark",
            "mark.shape": "mark",
            "mark.size": "mark",
            "mark.quantizeColor": "mark",
            "mark.forecast": "layout",
            "mark.target": "layout",
            "mark.pattern":"mark",
            "mark.waterfallType": "waterfallScale"
        }
    };
});

define('sap/viz/framework/binding/bindingValidationUtil',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/FunctionUtils','sap/viz/framework/common/util/Constants'
], function Setup(TypeUtils, LangManager, FunctionUtils, Constants) {
    var bindingValidationUtil = {};
    var valueAxisBindings = ["valueAxis", "valueAxis2"];

    var maxMinCheck = function(bind, def) {
        if (!bind) {
            return def.min === 0;
        }
        return bind.length <= def.max && bind.length >= def.min;
    };

    var MMDExclusiveCheck = function(groupId, bindings, definitions) {
        var groupMemberCount = 0;
        definitions.forEach(function(def) {
            if (def.groupId === groupId && bindings[def.id] && bindings[def.id].length) {
                groupMemberCount++;
            }
        });
        if (groupMemberCount > 1) {
            return false;
        } else {
            return true;
        }
    };

    var MNDCheck = function(idx, bindings, definitions) {
        var def = definitions[idx];
        var bind = bindings[def.id];
        var acceptMND = def.acceptMND;
        var MNDOnly = def.MNDOnly;
        var valid = true;
        var length = bind.length;
        for (var i = 0; i < length; i++) {
            if ((MNDOnly && !bind[i].measureNames) || (bind[i].measureNames && !acceptMND) || 
                (acceptMND === "exclusive" && bind[i].measureNames &&
                 !MMDExclusiveCheck(def.MNDDependency, bindings, definitions))
                // valueAxis and valueAxis2 could not both be fed when categoryAxis accept MND in CombinationEx
                ) {
                return false;
            }
        }
        return true;
    };

    var metaCheck = function(data, bind, def) {
        var length = bind.length;
        for (var i = 0; i < length; i++) {
            if (!bind[i].measureNames) {
                var metadata = data.metadata(bind[i])[0];
                if (!metadata || metadata.semanticType != def.type) {
                    return false;
                }
                /*
                 * Fix BITSDC1-6579
                 * For timeAxis binding, we only support dimension with dataType as 'Date' (timestamp or datestring), 
                 * if not, binding validation should throw exception telling the binding is invalid.
                 */
                if(def.id == 'timeAxis' && 
                    (!metadata.dataType || metadata.dataType.toLowerCase() !== Constants.DATA_TYPE.DATE)){
                    return false;
                }
            }
        }
        return true;
    };

    var allDimensionCheck = function(data, items) {
        var dimensions = data.dimensions();
        for (var i = 0, length = dimensions.length; i < length; i++) {
            if (!items[dimensions[i]]) {
                return false;
            }
        }
        return true;
    };

    var groupBindingCheck = function(groupDef, feedingDef, bindings) {
        var groupDefs = feedingDef.filter(function(def) {
            return def.groupId === groupDef.id;
        }).map(function(def) {
            return def.id;
        });
        var groupBindings = [];
        Object.keys(bindings).forEach(function(id) {
            if (groupDefs.indexOf(id) > -1) {
                groupBindings = groupBindings.concat(bindings[id]);
            }
        });
        var valid = (groupBindings.length >= groupDef.min) && (groupBindings.length <= groupDef.max);
        return valid;
    };

    bindingValidationUtil.acceptable = function (flatTable, flatTableFeedingDefinition, flatTableBinding,
        chartType, options) {

        inResultBindingCheck(flatTable, flatTableFeedingDefinition, flatTableBinding, chartType);

        if (!flatTableBinding) {
            FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
        }

        var length, i, j, k;
        var allBindingDimensions = [];
        var bindings = {};
        var allItems = {};
        var mndBind = [],
            definition;
        var trellisInFlatTableFeedingDef = false;
        var indexTrellis = -1;
        var context = flatTable.getContext();
        var feedingDefinitionObject = {};
        for (i = 0, length = flatTableFeedingDefinition.length; i < length; i++) {
            definition = flatTableFeedingDefinition[i];
            if (definition.type === 'Measure' && definition.role.indexOf('layout') > -1) {
                var feedItems = flatTableBinding.filter(function(item){
                    return item.feed === definition.id;
                });
                if (feedItems[0] && feedItems[0].source && feedItems[0].source.length) {
                    //combinationEx allow valueAxis or valueAxis2 empty
                    mndBind.push(definition.id);
                }
            }
            if (!feedingDefinitionObject.hasOwnProperty(definition.id)) {
                feedingDefinitionObject[definition.id] = true;
            }
        }

        for (i = flatTableBinding.length - 1; i >= 0; --i) {
            if (!feedingDefinitionObject.hasOwnProperty(flatTableBinding[i].feed) && flatTableBinding[i].feed !==
                "bubbleHeight") {
                FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
            }
            if (flatTableBinding[i].source === undefined || flatTableBinding[i].source.length === 0) {
                flatTableBinding.splice(i, 1);
            } else if (flatTableBinding[i].feed.indexOf("trellisRow") != -1 ||
                flatTableBinding[i].feed.indexOf("trellisColumn") != -1) {
                if (indexTrellis != -1) {
                    indexTrellis = i;
                }
                trellisInFlatTableFeedingDef = true;
            }
        }
        if ((chartType.indexOf("trellis") != -1 && !trellisInFlatTableFeedingDef) ||
            (chartType.indexOf("trellis") == -1 && trellisInFlatTableFeedingDef)) {
            if (indexTrellis != -1) {
                FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING',
                    flatTableFeedingDefinition[indexTrellis].id));
            } else {
                FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
            }
        }

        for (i = 0; i < flatTableBinding.length; i++) {
            bindings[flatTableBinding[i].feed] = flatTableBinding[i].source;
            length = flatTableBinding[i].source.length;
            var sources = {};
            for (j = 0; j < length; j++) {
                var item = flatTableBinding[i].source[j];
                if (!(options && options.allowDuplicatedBindings &&
                    options.allowDuplicatedBindings(flatTableBinding[i].feed))) {
                    if (sources.hasOwnProperty(item)) {
                        FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
                    } else {
                        sources[item] = 1;
                    }
                }
                if (item.measureNames) {
                    if (allItems['MND']) {
                        FunctionUtils.error(LangManager.getLogMessage(
                            'IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING'));
                    }
                    allItems['MND'] = true;
                    if (mndBind.length !== item.measureNames.length) {
                        FunctionUtils.error(LangManager.getLogMessage(
                            'IDS_ERROR_INVALID_BINDING', flatTableBinding[i].source[j]));
                    }
                    for (k = 0; k < mndBind.length; k++) {
                        if (item.measureNames.indexOf(mndBind[k]) < 0) {
                            FunctionUtils.error(LangManager.getLogMessage(
                                'IDS_ERROR_INVALID_BINDING', flatTableBinding[i].source[j]));
                        }
                    }
                } else {
                    /*
                    if (allItems[item]) {
                        FunctionUtils.error(LangManager.getLogMessage(
                            'IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING'));
                    }
                    */
                    allItems[item] = true;
                }
            }
        }
        if(!TypeUtils.isArray(context)){
            context = [context];
        }

        for(i = 0; i < context.length; ++i){
            var name = context[i];
            if(name.id){
                name = name.id;
            }
            // context name is invalid
            if(!flatTable.metadata(name)[0]){
                FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_CONTEXT_NAME',  name));
            }
            allItems[name] = true;  
        }
        
        if (!allDimensionCheck(flatTable, allItems) && !(/bubble|scatter/.test(chartType))) {
            //for bubble and scatter, do not check full dimensions
            FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING'));
        }

        for (i = 0, length = flatTableFeedingDefinition.length; i < length; i++) {
            definition = flatTableFeedingDefinition[i];
            var id = definition.id;
            var type = definition.type;
            var oneFeedDimensionsOrMeasures = [];
            var bind = bindings[id];

            if (type === "group") {
                if (!groupBindingCheck(definition, flatTableFeedingDefinition, bindings)) {
                    FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', definition.id));
                }
            } else {
                if (!definition.groupId && !maxMinCheck(bind, definition)) {
                    FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', definition.id));
                }
                if (bind) {
                    if (!MNDCheck(i, bindings, flatTableFeedingDefinition)) {
                        FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING', definition.id));
                    }
                    if (!metaCheck(flatTable, bind, definition)) {
                        FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA', bind));

                    }
                }
            }

        }

        return true;
    };

    function inResultBindingCheck(flatTable, defs, bindings, chartType) {
        var inResultFields = flatTable.dimensions().reduce(function(metas, dim) {
            flatTable.metadata(dim).forEach(function (meta) {
                if (meta[Constants.FIELD.INRESULT]) {
                    metas[dim] = meta;
                }
            });

            return metas;
        }, {});

        if (TypeUtils.isEmptyObject(inResultFields)) {
            return;
        }

        if (chartType.match(/time|trellis|radar|mekko|area|tagcloud|treemap/)) {
            FunctionUtils.error("inResult fields is not supported for this chart.");
        }

        var hasCategoryAxis = defs.some(function(def) {return def.id === "categoryAxis";});
        var forceColor = chartType.match(/scatter|bubble|pie|donut/);
        var inResultFeed = forceColor ? "color" : (hasCategoryAxis ? "categoryAxis" : null);

        if (!inResultFeed) {
            FunctionUtils.error("inResult fields is not supported for this chart.");
        }

        var groupedBindings = bindings.reduce(function(grouped, bd) {
            if (bd.feed === inResultFeed) {
                grouped.can.push(bd);
            } else {
                grouped.cannot.push(bd);
            }
            return grouped;
        }, {can: [], cannot: []});

        groupedBindings.cannot.forEach(function(bd) {
            bd.source.forEach(function(field) {
                if (inResultFields[field]) {
                    FunctionUtils.error('"inResult" field cannot be bound to feeding "' + bd.feed + '".');
                }
            });
        });

        groupedBindings.can.forEach(function(bd) {
            bd.source.reduce(function(prev, curr) {
                if (prev && inResultFields[prev] && !inResultFields[curr]) {
                    FunctionUtils.error("inResult fields must appear after all regular dimensions.");
                }
                return curr;
            }, null);
        });
    }

    bindingValidationUtil.getValueAxisBindings = function(bindings) {
        var valueAxes = [];
        if (bindings) {
            for(var i = 0; i < valueAxisBindings.length; ++i){
                for (var j = 0; j < bindings.length; ++j) {
                    if(bindings[j].feed === valueAxisBindings[i] &&  bindings[j].source &&
                        bindings[j].source.length ){
                        valueAxes.push(valueAxisBindings[i]);
                    }
                }
            }
        }
        return valueAxes;
    };

    return bindingValidationUtil;
});

define('sap/viz/framework/common/util/ArrayUtils',["sap/viz/framework/common/util/TypeUtils"],
    function Setup(TypeUtils) { 
        var ArrayUtils = {
            /**
             * Iterate the given array and calling the provided callback function
             * for each item
             *
             * @name sap.viz.base.utils.ArrayUtils#each
             * @function
             * @param {Array}
             *            array array to be iterated
             * @param {Function}
             *            callback function to be called at each iteration, this
             *            will point to array itself, the arguments will be index
             *            and the current item
             *
             */
            each: function(array, callback) {
                array = array || [];
                for (var i = 0, len = array.length; i < len; i++) {
                    if (callback.call(array, i, array[i]) === false) {
                        break;
                    }
                }
            },

            /** 
             *  sort an array stably
             *  @param {Array}  an object array (not string array or number array)
             *  @param {function(a, b)}  compare two element. similiar as the one used by array.sort.prototype
             * 
             */
            stableSort: function(arr, cmpr){
                arr = arr || [];
                if(arr.length <= 1){
                    return arr;
                }

                for(var i = 0; i < arr.length; i++){
                    //arr element must be object. or it will not work
                    arr[i]["_index_before_sort_"] = i;
                }

                arr.sort(function(a, b){
                    var temp = cmpr(a, b);
                    return temp === 0 ? a["_index_before_sort_"] - b["_index_before_sort_"] : temp;
                });

                for(i = 0; i < arr.length; i++){
                    delete arr[i]["_index_before_sort_"];
                }
                return arr;
            },

            /**
             * Return an array contains distinct values in the given Array
             *
             * @name sap.viz.base.utils.ArrayUtils#unique
             * @param {Array}
             *            array array to be processed
             * @param {Function}
             *            accessor function invoked for each item to obtain the
             *            identifier, if it returns false, the item will be omitted.
             * @returns
             */
            unique: function(array, accessor) {
                var u = {},
                    a = [],
                    Accessor = accessor || function(a) {
                        return a.toString();
                    };
                for (var i = 0, t, l = array.length; i < l; ++i) {
                    if (!(t = Accessor(array[i])) || Object.prototype.hasOwnProperty.call(u, t)) {
                        continue;
                    }
                    a.push(array[i]);
                    u[t] = true;
                }
                return a;
            },

            /**
             * Flat a two dimension array into one dimension Array
             *
             * @param {Array}
             *            arrayOfArray
             * @returns
             */
            flat: function(arrayOfArray) {
                return Array.prototype.concat.apply([], arrayOfArray);
            },

            /**
             * Flat a heavily nested array (n-dimentional) into a one dimensional array.
             *
             * @param {Array} arrayOfArray heavily nested array
             * @return {Array} a one dimensional array containing every scala value of
             *         the input array
             */
            deepFlat: function(arrayOfArray) {
                var stack = arrayOfArray.slice(),
                    //out = [],
                    curr;
                // Depth First Traversal with a stack, to avoid recursion
                var i = 0;
                while(i < stack.length){
                    curr = stack[i];
                    if (curr instanceof Array){
                        stack.splice(i, 1);
                        stack = stack.concat(curr);
                    } else {
                        ++i;
                    }
                }
                return stack;
                // while (stack.length > 0) {
                //     curr = stack.shift();
                //     if (curr instanceof Array) {
                //         stack.push.apply(stack, curr);
                //     } else {
                //         out.unshift(curr);
                //     }
                // }
                // return out;
            },

            /**
             * Find the maximum value in the given array. Empty array will return
             * undefined, and undefined entry will be skipped. Optional accessor
             * will be used to convert the entry to comparable data type before test
             * inequality.
             *
             * @param {Array}
             * @param {Function}
             *            accessor function will be called as accessor.call(array,
             *            array[i], i).
             */
            max: function(array, accessor) {
                var i = -1,
                    n = array.length,
                    a, t;
                if (arguments.length === 1) {
                    while (++i < n && (a = array[i]) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = array[i]) > a) {
                            a = t;
                        }
                    }
                } else if (arguments.length > 1) {
                    while (++i < n && (a = accessor.call(array, array[i], i)) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = accessor.call(array, array[i], i)) > a) {
                            a = t;
                        }
                    }
                }
                return a;
            },

            /**
             * Find the minimum value in the given array. Empty array will return
             * undefined, and undefined entry will be skipped. Optional accessor
             * will be used to convert the entry to comparable data type before test
             * inequality.
             *
             * @param {Array}
             * @param {Function}
             *            accessor function will be called as accessor.call(array,
             *            array[i], i).
             */
            min: function(array, accessor) {
                var i = -1,
                    n = array.length,
                    a, t;
                if (arguments.length === 1) {
                    while (++i < n && (a = array[i]) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = array[i]) < a) {
                            a = t;
                        }
                    }
                } else if (arguments.length > 1) {
                    while (++i < n && (a = accessor.call(array, array[i], i)) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = accessor.call(array, array[i], i)) < a) {
                            a = t;
                        }
                    }
                }
                return a;
            },
            /**
             * D3 like array facility function. Compute the sum of the array, only
             * number will be considered. If array is empty, returns 0.
             *
             * @param array
             * @param accessor
             * @returns {Number}
             */
            sum: function(array, accessor) {
                // from D3
                var s = 0,
                    n = array.length,
                    a, i = -1;
                if (arguments.length === 1) {
                    while (++i < n) {
                        if (!isNaN(a = +array[i])) {
                            s += a;
                        }
                    }
                } else {
                    while (++i < n) {
                        if (!isNaN(a = +accessor.call(array, array[i], i))) {
                            s += a;
                        }
                    }
                }
                return s;
            },

            /**
             * Find the extent in the given array. The range contains minimum and
             * maximum value.Empty array will return [undefined,undefined], and
             * undefined entry will be skipped. Optional accessor will be used to
             * convert the entry to comparable data type before test inequality.
             *
             * @param {Array}
             * @param {Function}
             *            accessor function will be called as accessor.call(array,
             *            array[i], i).
             * @return {[minimum, maximum]}
             */
            extent: function(array, accessor) {
                var i = -1,
                    n = array.length,
                    a, b, t;
                if (arguments.length === 1) {
                    while (++i < n && (a = b = array[i]) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = array[i]) < a) {
                            a = t;
                        }
                        if ((t = array[i]) > b) {
                            b = t;
                        }
                    }
                } else if (arguments.length > 1) {
                    while (++i < n && (a = b = accessor.call(array, array[i], i)) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = accessor.call(array, array[i], i)) < a) {
                            a = t;
                        }
                        if ((t = accessor.call(array, array[i], i)) > b) {
                            b = t;
                        }
                    }
                }
                return [a, b];
            },

            /**
             * Binary search the value in the array, and returns the index which
             * could be either the index of found value or insertion position.
             *
             * @param array
             * @param value
             */
            bisearch: function(array, value, getter) {
                var l = 0,
                    h = array.length,
                    m, cv;
                getter = getter || function(item){
                    return item;
                };
                while (l < h) {
                    m = l + h >> 1;
                    if ((cv = getter(array[m])) === value) {
                        return m;
                    }
                    if (value > cv) {
                        l = m + 1;
                    } else {
                        h = m;
                    }
                }
                return l;
            },
            /**
             * Transpose a 2D array(matrix)
             *  
             * @param array
             * @returns {Array}
             */
            transpose: function(x) {
                if (!TypeUtils.isArray(x) || !TypeUtils.isArray(x[0]) ||
                        !x.length || !x[0].length) {
                    return [];
                }
                var i, j, m = x.length,
                    n = x[0].length,
                    ret = Array(n),
                    A0, A1, Bj;
                for (j = 0; j < n; j++) {
                    ret[j] = Array(m);
                }
                for (i = m - 1; i >= 1; i -= 2) {
                    A1 = x[i];
                    A0 = x[i - 1];
                    for (j = n - 1; j >= 1; --j) {
                        Bj = ret[j];
                        Bj[i] = A1[j];
                        Bj[i - 1] = A0[j];
                        --j;
                        Bj = ret[j];
                        Bj[i] = A1[j];
                        Bj[i - 1] = A0[j];
                    }
                    if (j === 0) {
                        Bj = ret[0];
                        Bj[i] = A1[0];
                        Bj[i - 1] = A0[0];
                    }
                }
                if (i === 0) {
                    A0 = x[0];
                    for (j = n - 1; j >= 1; --j) {
                        ret[j][0] = A0[j];
                        --j;
                        ret[j][0] = A0[j];
                    }
                    if (j === 0) {
                        ret[0][0] = A0[0];
                    }
                }
                return ret;
            },

            /**
             * D3 like array facility function.
             *
             * @param array
             * @param indexes
             * @returns {Array}
             */
            permute: function(array, indexes) {
                // From D3
                var permutes = [],
                    i = -1,
                    n = indexes.length;
                while (++i < n) {
                    permutes[i] = array[indexes[i]];
                }
                return permutes;
            },

            /**
             * Generate an array based on the start, stop and step. The first item
             * equals to start(if specified) or 0, next one equals to start + step,
             * start + 2*step, and so on until exceeding stop.
             *
             * @param {Number}
             *            (start) the first item of the sequence, default is 0.
             * @param {Number}
             *            stop
             * @param {Number}
             *            (step) step between two near items in the sequence,
             *            default is 1.
             */
            sequence: function(start, stop, step) {
                if (arguments.length < 3) {
                    step = 1;
                }
                if (arguments.length < 2) {
                    stop = start;
                    start = 0;
                }
                start = +start;
                stop = +stop;
                step = start < stop ? Math.abs(+step) : -Math.abs(+step);
                var seq = [],
                    i = -1,
                    v;
                if ((stop - start) / step === Infinity) {
                    throw new Error('Infinite Sequence');
                }
                if (start < stop) {
                    while ((v = (start + (++i) * step)) < stop) {
                        seq.push(v);
                    }
                } else {
                    while ((v = (start + (++i) * step)) > stop) {
                        seq.push(v);
                    }
                }
                return seq;
            },

            /**
             *
             * @param array
             * @param numFunc
             */
            stepSum: function(array, numFunc) {
                var ret = [],
                    stepSum = 0,
                    i = -1,
                    len = array.length;
                numFunc = numFunc || Number;
                ret.length = len;
                while (++i < len) {
                    stepSum += numFunc(array[i]);
                    ret[i] = stepSum;
                }
                return ret;
            },

            zip: function() {
                var ret = [],
                    len = Math.min.apply(null, Array.prototype.map.call(arguments, function(d) {
                        return d.length;
                    })),
                    i = -1,
                    a, count = arguments.length,
                    j;
                while (++i < len) {
                    a = [];
                    j = -1;
                    while (++j < count) {
                        a.push(arguments[j][i]);
                    }
                    ret.push(a);
                }
                return ret;
            },

            groupBy: function(arrays, groupFunc) {
                groupFunc = groupFunc || String;
                var groups = [],
                    groupOwners = [],
                    i = -1,
                    len = arrays.length,
                    groupOwner, j;
                while (++i < len) {
                    groupOwner = groupFunc(arrays[i]);
                    if ((j = groupOwners.indexOf(groupOwner)) === -1) {
                        groupOwners.push(groupOwner);
                        groups.push([arrays[i]]);
                    } else {
                        groups[j].push(arrays[i]);
                    }
                }
                return groups;
            },

            /**
             * for fundamental type element
             */
            equal: function(array1, array2) {
                if (!array1 || !array2) {
                    return false;
                }
                if (array1.length !== array2.length) {
                    return false;
                }
                for (var i = 0; i < array1.length; i++) {
                    if (TypeUtils.isArray(array1[i]) && TypeUtils.isArray(array2[i])) {
                        if (!this.equal(array1[i], array2[i])) {
                            return false;
                        }
                    } else if (array1[i] !== array2[i]) {
                        return false;
                    }
                }
                return true;
            },

            /**
             * Tuned for array of huge size
             * @param  {Array}   arr
             * @param  {Function} callback
             * @return {Array}
             */
            map: function(arr, callback){
                var i = arr.length;
                var ret = new Array(i);
                for(; i--;){
                    ret[i] = callback(arr[i], i, arr);
                }
                return ret;
            },

            /**
             *  get the union of two arrays
             *  e.g arr1 = [1,2,3,4], arr2 = [4,5,6,7]
             *  union(arr1, arr2) = [1,2,3,4,5,6,7]
             *  note: this function does not sort the result.
             *  the order of elements may change
             */
            union:function(arr1, arr2, accessor){
                var result = arr2.concat(arr1);
                return ArrayUtils.unique(result, accessor);
            },
            /**
            *   e.g arr1 = [1,2,3,4,6]
            *       arr2 = [2,3,7]
            *      then without(arr1, arr2) = [1,4,6]
            *      assume no duplicate in array1
            */
            exclude:function(arr1, arr2){
                if (!TypeUtils.isArray(arr1) || !TypeUtils.isArray(arr2) ){
                    return [];
                }

                var result = arr1.slice();
                arr2.forEach(function(e){
                    var index = result.indexOf(e);
                    if(index >= 0){
                        result.splice(index, 1);
                    }
                });
                return result;
            },
            
            interaction:function(arr1, arr2){
                if (!TypeUtils.isArray(arr1) || !TypeUtils.isArray(arr2) ){
                    return [];
                }
                var result = [];
                for(var i = 0; i < arr1.length; ++i){
                    if(arr2.indexOf(arr1[i]) > -1){
                        result.push(arr1[i]);
                    }
                }
                return result;
            }
        };
        return ArrayUtils;
    });

define('sap/viz/framework/scale/ScaleOptionFactory',["sap/viz/framework/common/util/TypeUtils"], function(TypeUtils) {
    /**
     * Get index from valueAxis whose corresponding series is all null value.
     */
    
    var optionsFunctions = [];
    var scaleOptionFactory = {};
    scaleOptionFactory.addExtraOption = function(chartType, name, option, dataModel, runtime, propertyMgr, valueAxes){
        for(var i = optionsFunctions.length - 1; i >= 0; --i){
            var item = optionsFunctions[i];
            if(!item.chart || new RegExp(item.chart).test(chartType)){
                if(!item.type || item.type === name){
                    item.func(option, dataModel, runtime, propertyMgr, valueAxes, chartType);
                }
            }
        }
        
    };
    
    scaleOptionFactory.register = function(chart, type, func){
        optionsFunctions.push({chart: chart, type:type, func: func});
    };
  
      
    return scaleOptionFactory;
});
define('sap/viz/framework/scale/ScaleDataParseFactory',[], function() {
    /* Data Parse for special chart type*
     * Current only for "valueAxis" and waterfall valueAxis
     * If  
     */
    var scaleDataParseFactory = {
    };
    var registeredTypes = [];
    scaleDataParseFactory.register = function(chartType, valueType, func){
        registeredTypes.push({chartType:chartType, valueType:valueType, func:func});
    };
    scaleDataParseFactory.getParseFunc = function(chartType, valueType){
        var func = null;
        for(var i = registeredTypes.length - 1; i >= 0; --i){
            var item = registeredTypes[i];
            if(!func && !item.chartType && item.valueType === valueType){
                func = item.func;
            }
            if(item.chartType && new RegExp(item.chartType).test(chartType) && item.valueType === valueType){
                func = item.func;
                break;
            }
          
        }
        return func;
    };
    return scaleDataParseFactory;
});
define('sap/viz/framework/scale/ScaleRoleTypeMapFactory',["sap/viz/framework/common/util/TypeUtils"], function(TypeUtils) {
    /**
     * Get index from valueAxis whose corresponding series is all null value.
     */

    var processFuncs = [];
    var factory = {};
    factory.register = function(chartType, scaleType, func){
        processFuncs.push({chart:chartType, scaleType: scaleType, func: func});
    };
    factory.get = function(chartType, scaleType){
        var func = null;
        for(var i = 0; i < processFuncs.length; ++i){
            var item = processFuncs[i];
            if(!func && !item.chart && !item.scaleType){
                func = item.func;
            }else if(!item.chart && (item.scaleType === scaleType)){
                func = item.func;
            }else if(item.chart === chartType && item.scaleType === scaleType){
                func = item.func;
                break;
            }
            
        }
        return func;
    };
    return factory;
   
});
define('sap/viz/framework/scale/ScalePostFactory',[], function() {
    /* 
     * register function when need process after all scales has been generated,
     * for example sync 2 value axis scale.
     */
    var PostFactory = {};
    var funcs = [];
    PostFactory.register = function(chartType, func){
        funcs.push({chartType:chartType,  func:func});
    };
    PostFactory.getPostFunc = function(chartType){
        var func = null;
        for(var i = funcs.length - 1; !func && i >= 0; --i){
            var item = funcs[i];
            if(item.chartType && new RegExp(item.chartType).test(chartType)){
                func = item.func;
          
            }
        }
        return func;
    };
    return PostFactory;
});
define('sap/viz/framework/scale/ScaleManager',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/scale/ScaleRepository",
    "sap/viz/framework/scale/ScaleMapping",
    "sap/viz/framework/binding/bindingValidationUtil",
    "sap/viz/framework/common/util/ArrayUtils",
    "sap/viz/framework/scale/ScaleOptionFactory",
    "sap/viz/framework/scale/ScaleDataParseFactory",
    "sap/viz/framework/scale/ScaleRoleTypeMapFactory",
    "sap/viz/framework/scale/ScalePostFactory"
], function Setup(
    TypeUtils,
    scaleRepository,
    ScaleMapping,
    bindingValidationUtil,
    ArrayUtils,
    ScaleOptionFactory,
    ScaleDataParseFactory,
    ScaleRoleTypeMapFactory,
    ScalePostFactory
) {

    //Be Cautious
    //this file functions as a factory class for scales
    //the scaleMgr in runtime and chartApp is something different

    var scaleManager = {};

    function  generateOptions(dataModel, chartType, chartFamily, i, runtime, option, propertyMgr, bindings){
        var valueAxes = bindingValidationUtil.getValueAxisBindings(bindings);
        ScaleOptionFactory.addExtraOption(chartType, i, option, dataModel, runtime, propertyMgr, valueAxes);
        var dataParseFunc = ScaleDataParseFactory.getParseFunc(chartType, i);
        if (dataParseFunc) {
            dataModel = dataParseFunc.call(null, dataModel, chartType, runtime);
        }
      
    }

    /**
     * Get playfield index value by scale option
     * @param {Function} - dataModel
     * @param {Object} - scaleRoles
     * @param {String} - chartFamily
     * @param {Function} - runtime
     * @param {Array} - customerColorPalette
     * @param {Boolean} - isGhost
     * @return {Array} - scales
     */
    scaleManager.create = function(dataModel, scaleRoles, chartFamily, chartType, runtime,
        customerColorPalette, isGhost, bindings) {
        var scales = {},
            scaleResolver, i, colorIndex, colorIndex2, scaleMgr = runtime.scaleManager(),
            propertyMgr = runtime.propertyManager();
        var role, type;
        if (!chartFamily) {
            return {};
        }
        var factoryName = null;
        for (i in dataModel) {
            if (dataModel.hasOwnProperty(i) && TypeUtils.isFunction(dataModel[i]) && dataModel[i]()) {
                if ((TypeUtils.isExist(scaleRoles[i]) && TypeUtils.isExist(scaleRoles[i].role)) || i === 'color2') {
                    var option = {};
                    var optionFunc = ScaleRoleTypeMapFactory.get(chartFamily, i);
                    option = optionFunc.call(null, ScaleMapping, scaleRoles, dataModel, i);
                    type = option.type;
                    if(type && type.indexOf('color')>-1 && customerColorPalette){
                        option.customerColorPalette = customerColorPalette;
                    }
                   
                    generateOptions(dataModel, chartType, chartFamily, i, runtime, option, propertyMgr, bindings);
                  
                    scaleResolver = scaleRepository[type];
                    //TODO refine pagination judgment logical, consider not put in the data model
                    option.isPaging = dataModel.getPaginationOptions && !!dataModel.getPaginationOptions();
                    option.seriesType = dataModel.seriesType();
                    option.series = dataModel._series;
                    option.isGhost = isGhost;
                    option.chartFamily = chartFamily;
                    option.isTime = /timeseries/.test(chartType);
                    //to keep other feeding defs stay unchanged.
                    if (scaleResolver) {
                        scales[i] = scaleResolver.call(scaleResolver, dataModel[i](),
                              option.name, scaleMgr, propertyMgr, option, dataModel, runtime);
                    }
                }
            }
        }
        //TODO: add more decent logic to check valueScale
        var postFunc = ScalePostFactory.getPostFunc(chartType);
        if(postFunc) {
            postFunc(scales, propertyMgr);
        }
        return scales;
    };
    return scaleManager;
});

define('sap/viz/framework/binding/crosstableChains/BaseChains',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ArrayUtils'
], function Setup(
    TypeUtils,
    ArrayUtils
) {

    var crosstableChains = {};
    // {
    //      "analysisAxis" : [{
    //          "index" : 1,
    //          "data" : [{
    //              "type" : "Dimension",
    //              "name" : "Product",
    //              "values" : ["Car", "Truck", "Motorcycle", "Bicycle"]
    //          }]
    //      }, {
    //          "index" : 2,
    //          "data" : [{
    //              "type" : "Dimension",
    //              "name" : "Country",
    //              "values" : ["China", "USA"]
    //          }, {
    //              "type" : "Dimension",
    //              "name" : "Year",
    //              "values" : ["2001", "2001"]
    //          }]
    //      }],
    //      "measureValuesGroup" : [{
    //          "index" : 1,
    //          "data" : [{
    //              "type" : "Measure",
    //              "name" : "Profit",
    //              "values" : [[25, 136, 23, 116], [58, 128, 43, 73]]
    //          }, {
    //              "type" : "Measure",
    //              "name" : "Revenue",
    //              "values" : [[50, 236, 43, 126], [158, 228, 143, 183]]
    //          }]
    //      }]
    //  }

    // [{
    //   "feedId" : "primaryValues",
    //     "binding" : [{
    //        "type" : "measureValuesGroup",
    //        "index" : 1
    //     }]
    //  }, {
    //   "feedId" : "regionColor",
    //      "binding" : [{
    //        "type" : "analysisAxis",
    //        "index" : 2
    //      }, {
    //        "type" : "measureNamesDimension"
    //      }]
    //  }, {
    //   "feedId" : "axisLabels",
    //     "binding" : [{
    //        "type" : "analysisAxis",
    //        "index" : 1
    //     }]
    // }]

    var handleMND = function(categoryLength, MNDItems) {
        var length = categoryLength;
        var mndArray = [];
        MNDItems.map(function(item) {
            for (var i = 0; i < length; i++) {
                mndArray.push(item);
            }

        });
        return mndArray;
    };
    var parseDimensionsFromAA = function(aa, dimensionArray, metaData) {
        if (!TypeUtils.isArray(aa.data)) {
            return;
        }
        aa.data.map(function(data) {
            var arr = [];
            for (var i = 0; i < data.values.length; i++) {
                if (data.values[i] === undefined) {
                    arr[i] = null;
                } else {
                    arr[i] = data.values[i];
                }
            }
            if (data.values.length === 0) {
                arr = [null];
            }
            
            dimensionArray.push(arr);
            metaData.push({
                id: data.id ? data.id : data.name,
                name: data.name,
                type: data.type
            });
        });
    };

    var parseMeasuresFromAA = function(aa) {
        if (!TypeUtils.isArray(aa.data)) {
            return [];
        }
        var metaData = [];
        var measureArray = [];
        aa.data.map(function(data) {
            if (measureArray.length === 0) {
                measureArray = data.values;
            } else {
                data.values.map(function(value) {
                    measureArray.push(value);
                });
            }
            metaData.push({
                id: data.name,
                name: data.name,
                type: data.type
            });
        });
        return {
            data: measureArray,
            meta: metaData
        };
    };
    var duplicateArrayForMND = function(sourceArray, times) {
        var targetArray = [];
        sourceArray.map(function(data, index) {
            var targetData = [];
            for (var i = 0; i < times; i++) {
                targetData = targetData.concat(data);
            }
            targetArray[index] = targetData;
        });
        return targetArray;
    };

    var handleDimension = function(ct, feedings, MND) {
        var length = feedings.length;
        var category2DArray = [];
        var metaData = [];
        var hasMND = false;
        var MNDItems = MND;
        var MNDPosition = 0;
        for (var i = 0; i < length; i++) {
            var feed = feedings[i];
            if (feed.type === "measureNamesDimension") {
                hasMND = true;
                if (category2DArray.length > 0) {
                    var mndArray = handleMND(category2DArray[0].length, MNDItems);
                    category2DArray = duplicateArrayForMND(category2DArray, MNDItems.length);
                    category2DArray.push(mndArray);
                    metaData.push({
                        id: 'measureNamesDimension',
                        values: mndArray,
                        type: 'Dimension'
                    });
                } else {
                    MNDPosition = i;
                    category2DArray.push(MNDItems);
                    metaData.push({
                        id: 'measureNamesDimension',
                        values: MNDItems,
                        type: 'Dimension'
                    });
                }
            } else {
                var categoryArray = [];
                var aa = ct.analysisAxis[feed.index - 1];
                parseDimensionsFromAA(aa, category2DArray, metaData);
                if (hasMND) {
                    category2DArray = duplicateArrayForMND(category2DArray, MNDItems.length);
                    category2DArray[MNDPosition] = handleMND(category2DArray[0].length, MNDItems);
                    metaData[MNDPosition].values = category2DArray[MNDPosition];
                }
                hasMND = false;
            }
        }
        return {
            values: category2DArray,
            metaData: metaData,
            rowArray: rotateArray(category2DArray)
        };

    };

    var SimpleHandleMeasure = function(ct, feedings) {
        var length = feedings.length;
        var measure2DArray = [];
        for (var i = 0; i < length; i++) {
            var feed = feedings[i];
            if (Number(feed.index) > 0) {
                measure2DArray = parseMeasuresFromAA(ct.measureValuesGroup[feed.index - 1]);
            }
        }
        return measure2DArray;
    };

    var rotateArray = ArrayUtils.transpose;

    crosstableChains.GetDimensionsFromCrosstable = function(rawData, bindingInfo, measureNamesDimension) {

        var result = handleDimension(rawData._crosstableDataset._dataSet, bindingInfo, measureNamesDimension);
        return result;

    };

    //TODO: 
    //1.when aa1 is not bound to axis and aa2 is not bound to regioncolor.
    //2.When 2 or more aa group is bound to single feeding object.
    crosstableChains.GetMeasuresFromCrosstable = function(rawData, bindingInfo) {

        var measureArray = SimpleHandleMeasure(rawData._crosstableDataset.data(), bindingInfo);
        var domain = measureArray.data.map(function(e) {
            return ArrayUtils.extent(e);
        });
        var array = rotateArray(measureArray.data);
        return {
            values: array,
            categorySum: sumByCategory(array),
            range: domain,
            metaData: measureArray.meta
        };

    };
    var sumByCategory = function (array) {
        var results = [];
        var total = 0;
        array.map(function (item, index) {
            var sum = 0;
            if (TypeUtils.isArray(item)) {
                item.map(function (item) {
                    if(TypeUtils.isArray(item) || !TypeUtils.isNumber(item)){
                        return;
                    }
                    if (sum === 0) {
                        sum = item;
                    } else if (sum < 0 && item > 0) {
                        sum = item;
                    } else if (sum * item > 0) {
                        sum += item;
                    }
                });
            } else {
                sum = item;
            }
            results[index] = sum;
        });

        return results;
    };
    crosstableChains.GetColorRangeFromCrosstable = function(rawData, bindingInfo, measureNamesDimension) {
        var result = handleDimension(rawData._crosstableDataset._dataSet, bindingInfo, measureNamesDimension);
        return result;
    };


    crosstableChains.extend = function(type, defaultChains) {
        var newChains = {};
        defaultChains.map(function(item) {
            newChains[type + item] = crosstableChains[item];
        });
        return newChains;
    };


    return crosstableChains;
});
define('sap/viz/framework/binding/crosstableChains/XYChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var xyChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable',
        ];
    xyChains = BaseChains.extend('xy', defaultChains);

    return xyChains;
});
define('sap/viz/framework/binding/crosstableChains/YYChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var yyChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    yyChains = BaseChains.extend('yy', defaultChains);

    return yyChains;
});
define('sap/viz/framework/binding/crosstableChains/XYYChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var xyyChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    xyyChains = BaseChains.extend('xyy', defaultChains);

    return xyyChains;
});
define('sap/viz/framework/binding/crosstableChains/XXChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var xxChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    xxChains = BaseChains.extend('xx', defaultChains);

    return xxChains;
});
define('sap/viz/framework/binding/crosstableChains/TreeChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var treeChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    treeChains = BaseChains.extend('treemap', defaultChains);
    return treeChains;
});
define('sap/viz/framework/binding/crosstableChains/PieChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var pieChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    pieChains = BaseChains.extend('pie', defaultChains);

    return pieChains;
});
define('sap/viz/framework/binding/CrosstableChains',['sap/viz/framework/binding/crosstableChains/XYChains', 
    'sap/viz/framework/binding/crosstableChains/YYChains',
    'sap/viz/framework/binding/crosstableChains/XYYChains',
    'sap/viz/framework/binding/crosstableChains/XXChains',
    'sap/viz/framework/binding/crosstableChains/TreeChains', 
    'sap/viz/framework/binding/crosstableChains/PieChains'
], function Setup(XYChains, YYChains, XYYChains, XXChains, TreeChains, PieChains) {


    return [].concat(XYChains, YYChains, XYYChains, XXChains, TreeChains, PieChains);
});
define('sap/viz/framework/binding/defaultChains',[ 'sap/viz/framework/binding/CrosstableChains'
    ], function Setup(
        CrosstableChains) {
    // We have to keep crosstab chains because extension chart legend need generated series data
    var defaulChains = [];

    var addDefaultChains = function(id, chainResolver) {
        defaulChains.push({
            id: id,
            dataResolver: chainResolver
        });
    };

    CrosstableChains.map(function(item) {
        for (var i in item) {
            if (item.hasOwnProperty(i)) {
                addDefaultChains(i, item[i]);
            }
        }
    });


    return defaulChains;
});
define('sap/viz/framework/common/util/IdProducer',[], function(){

    var baseId = 1;

    return {
        get: function(){
            return baseId++;
        }
    };
});


define('sap/viz/framework/common/util/DataUtils',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/ArrayUtils",
    "sap/viz/framework/common/lang/LangManager"
], function(
    TypeUtils,
    ArrayUtils,
    langManager
) {
    var MND_ID = ["MeasureNamesDimension", "measureNames"];

    var utils = {};

    utils.stringify = function(s) {
        if (s != null) {
            return "_" + s;
        } else {
            return "null";
        }
    };

    utils.getValueLength = function(data) {
        if (!data) {
            return 0;
        }
        return (data.values && data.values[0]) ? data.values[0].length : 0;
    };

    utils.getValues = function(data, index) {
        if (!data || !data.values) {
            return null;
        }
        var result = [];
        for (var i = 0; i < data.values.length; i++) {
            var value = data.values[i];
            /*if(data.metaData && data.metaData[i] && data.metaData[i].values){
              value = data.metaData[i].values;
          }*/
            result[i] = value[index];
        }
        return result;
    };

    utils.iterateValues = function(data, fn, thisArg) {
        if (!data || !data.values) {
            return;
        }

        data.values.forEach(function(d, i1) {
            if (d) {
                d.forEach(function(val, i2) {
                    if (TypeUtils.isArray(val)) {
                        val.forEach(function(v, i3) {
                            fn.call(thisArg, v, i1, i2, i3);
                        });
                    } else {
                        fn.call(thisArg, val, i1, i2);
                    }
                });
            }
        });
    };

    utils.getMetaDataIds = function(data) {
        if (!data || !data.metaData) {
            return null;
        }
        var result = [];
        for (var i = 0; i < data.metaData.length; i++) {
            result[i] = data.metaData[i].id;
        }
        return result;
    };

    utils.buildMetaDataInfo = function(data) {
        if (!data || !data.metaData) {
            return null;
        }
        var result = [];
        for (var i = 0; i < data.metaData.length; i++) {
            var metaData = data.metaData[i];
            var info = {
                name: metaData.name || metaData.id,
                id: metaData.id
            };
            if (MND_ID.indexOf(metaData.id) !== -1) {
                info.data = {};
                var values = metaData.values || data.values[i];
                for (var n = 0; n < values.length; n++) {
                    var id = values[n];
                    if (!info.data[id]) {
                        info.data[id] = {
                            id: id,
                            name: data.values[i][n]
                        };
                    }
                }
            }
            result.push(info);
        }
        return result;
    };

    utils.parse = function(s) {
        if (s.indexOf("_") === 0) {
            return s.substring(1);
        } else {
            return null;
        }
    };

    utils.valuesToString = function(values) {
        var ret = "";
        for (var i = 0; i < values.length; ++i) {
            if (i !== 0) {
                ret += "/";
            }
            ret += utils.stringify(utils.getDimensionValue(values[i]));
        }
        return ret;
    };

    utils.getMNDIndex = function(fields) {
        if (fields) {
            for (var i = 0, len = fields.length; i < len; i++) {
                if (MND_ID.indexOf(fields[i].id) !== -1) {
                    return i;
                }
            }
        }
        return -1;
    };
    
    utils.checkMndStatus = function(metaData, textData) {
        var result = {isOnlyOneMndValue: false, mndIndex: -1};

        if (textData.length === 0) {
            return result;
        }

        // if only have measure, skip
        if (metaData == null || metaData.length === 0 || metaData.length === 1) {
            return result;
        }

        // check whether has mnd
        var mndIndex = utils.getMNDIndex(metaData);
        if (mndIndex === -1) {
            return result;
        }
        //check If MND with only inresult  
        var inResultOnly = true;
        var i;
        for(i = 0; inResultOnly && i < metaData.length; ++i){
            if(i !== mndIndex && !metaData[i].hidden){
                inResultOnly = false;
            }
        }
        if(inResultOnly){
            return result;
        }
        // check if has only one mnd value
        var firstMnd = textData[0][mndIndex];
        for (i = 1; i < textData.length; i++) {
            if (firstMnd !== textData[i][mndIndex]) {
                return result;
            }
        }

        return {isOnlyOneMndValue: true, mndIndex: mndIndex};
    };    

    utils.getDisplayTextsConverter = function(fields, mndIndex) {
        if (mndIndex == null) {
            mndIndex = utils.getMNDIndex(fields);
        }

        return function(source, hideNoValueLabel) {
            if (!TypeUtils.isExist(source)) {
                source = [];
            }
            return source.reduce(function(labels, str, i){
                if (i === mndIndex) {
                    if (fields[mndIndex].data && fields[mndIndex].data[source[mndIndex]]) {
                        str = fields[mndIndex].data[source[mndIndex]].name;
                    } else if (fields[mndIndex].values && !TypeUtils.isArray(fields[mndIndex].values)) {
                        //BITIDC7-1197
                        //for mnd binded in axis, get the name but not the id of a measure binding
                        //the structure of fields[mndIndex].values for axis is {id : name, ...}
                        //but for legend is [{id : id, name : name}, ...]
                        str = fields[mndIndex].values[str] || str;
                    }
                } else if (str === null) {
                    str = langManager.get('IDS_ISNOVALUE');
                } else {
                    str = getDisplayText(str, hideNoValueLabel);
                }
                if (!(fields && fields[i] && fields[i].hidden)) {
                    labels.push(str);
                }
                return labels;
            }, []);
        };
    };

    utils.domainWithNegativeValue = function(valueAxisDomain){
        if(valueAxisDomain && valueAxisDomain.length){
            var domain = valueAxisDomain;

            var hasNegative = domain.some(function(value) {

                // 100% stacked chart
                if (TypeUtils.isArray(value)) {
                    return value.some(function(val) {
                        return val < 0 ? true : false;
                    });
                } else {
                    return value < 0 ? true : false;
                }
            });

            if (hasNegative === true) {
                return true;
            }                
        }
        return false;
    
    };

    utils.hasNegativeValue = function(data) {
        var keys = ["valueAxis", "valueAxis2", "actualValues"];
        var index = 0;
        
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                if (keys.indexOf(key) === -1) {
                    continue;
                }
                var valueAxis = data[key];
                if (valueAxis == null) {
                    continue;
                }
                var scale = valueAxis.scale;
                if(utils.domainWithNegativeValue(scale.getDomain()) === true){
                    return true;
                }
            }
        }
        return false;
    };
    
    utils.getDomainArray = function(domain, metaData) {
        function getMeasureMapping(metaData) {
            var mapping = {};
            metaData.forEach(function(meta, i) {
                if (meta.values) {
                    mapping[i] = meta.values;
                }
            });
            return mapping;
        }

        if (domain == null || domain.length === 0) {
            return [];
        }

        if (metaData == null) {
            return domain;
        }

        var measureMapping = getMeasureMapping(metaData);
        if (Object.keys(measureMapping).length === 0) {
            return domain;
        }

        var result = [];
        for (var index = 0; index < domain.length; index++) {

            var domainItem = domain[index];
            if (!TypeUtils.isArray(domainItem)) {
                domainItem = [domainItem];
            }

            result.push(domainItem.map(function(item, index) {

                if (measureMapping[index] == null) {
                    return item;
                }

                var measureValues = measureMapping[index];
                for (var i = 0; i < measureValues.length; i++) {
                    if (measureValues[i].id === item) {
                        return measureValues[i].name || measureValues[i].id;
                    }
                }

                return item;
            }));
        }
        return result;

    };

    utils.getDomain = function(data) {
        return utils.getDomainArray(data.scale.getDomain(), data.metaData);
    };

    var DIMENSION_DISPLAYNAME = 'd',
        DIMENSION_VALUE = 'v',
        DIMENSION_PARSED_VALUE = 'parsedValue';

    function getDisplayText(context, hideNoValueLabel) {
        if (utils.isPlainValue(context)) {
            return context;
        }

        if (hideNoValueLabel === true && context[DIMENSION_VALUE] === undefined) {
            return;
        }
        
        if (context[DIMENSION_DISPLAYNAME] === "" || context[DIMENSION_DISPLAYNAME] === 0 ||
            context[DIMENSION_DISPLAYNAME]) {
            return context[DIMENSION_DISPLAYNAME];
        } else if (context[DIMENSION_VALUE] === "" || context[DIMENSION_VALUE] === 0 ||
            context[DIMENSION_VALUE]) {
            return context[DIMENSION_VALUE];
        } else {
            return langManager.get("IDS_ISNOVALUE");
        }
    }

    // If the value has either defined "v" or "d", it is considered to be a customized object value
    // Note that hasOwnProperty is very slow, so directly compare with undefined here.
    var isPlainValue = utils.isPlainValue = function(value) {
        return !value || (value.v === undefined && value.d === undefined);
    };

    // Avoid accessing out-scope content (e.g. DIMENSION_DISPLAYNAME) to speed up in v8
    utils.getDimensionValue = function(value){
        return isPlainValue(value) ? value : value.v;
    };
    
    utils.isEmptyDataset = function(data){
        if(data && data.type && data.type.indexOf('CrosstableDataset') > -1) {
            return data._crosstableDataset.isEmptyDataset();
        }
        else if(data && data.type && data.type.indexOf('FlatTableDataset') > -1) {
            return data._FlatTableD.isEmptyDataset();
        }
        return true;
    };

    utils.getDimensionDisplayName = function(value){
        return isPlainValue(value) ? value : value.d === undefined ? value.v : value.d;
    };

    utils.getDimensionParsedValue = function(value){
        return value && value.parsedValue !== undefined ? value.parsedValue : value;
    };

    // TODO: move it to context related utils
    utils.DIMENSION_DISPLAYNAME_SUFFIX = "." + DIMENSION_DISPLAYNAME;
    
    utils.DIMENSION_PARSED_VALUE_SUFFIX = "." + DIMENSION_PARSED_VALUE;
    
    utils.DIMENSION_PARSED_VALUE = DIMENSION_PARSED_VALUE; 

    // The structure of .v .d and .parsedValue in context is defined in this function
    utils.setContextValue = function(context, field, value, isMeasure){
        if (!isMeasure && !isPlainValue(value)) {
            context[field] = value.v;

            if (value.parsedValue === undefined) {
                context[field + utils.DIMENSION_DISPLAYNAME_SUFFIX] = value.d;
            } else {
                if (value.d !== undefined) {
                    context[field + utils.DIMENSION_DISPLAYNAME_SUFFIX] = value.d;
                }
                context[field + utils.DIMENSION_PARSED_VALUE_SUFFIX] = value.parsedValue;
            }
        } else {
            context[field] = value;
        }
    };

    utils.getContextValue = function(context, name) {
        var parsedName = name + "." + DIMENSION_PARSED_VALUE;
        // != null is equal to !== undefined && !== null and jshint supports this approach.
        if (context[parsedName] != null) {
            return context[parsedName];
        }
        return context[name];
    };

    utils.getLabelText = function(context) {
        return this.getDimensionDisplayName(context) || this.getDimensionValue(context);
    };
    
    utils.DIMENSION_VALUE_SUFFIX = "." + DIMENSION_VALUE;
    utils.DIMENSION_DISPLAYNAME = DIMENSION_DISPLAYNAME;
    utils.DIMENSION_VALUE = DIMENSION_VALUE;

    return utils;
});

define('sap/viz/framework/chartmodel/DataPoint',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/IdProducer',
    'sap/viz/framework/common/util/DataUtils'
], function(TypeUtils, IdProducer, DataUtils){

    /**
     * Representing a data point in chart.
     * A data point is a logical concept of a bunch of dimension/measure values (called context).
     * This class is "rendering independent", so it does not contain any information of DOM.
     * @class
     */
    function DataPoint(context, address, dataModel, mode, contextProps, contextBuilder, ignore){
        this.id = IdProducer.get();
        this.key = null;

        // if context is null, switch to lazy build context mode.
        this._data = context;
        this._addr = address;
        this._model = dataModel;
        this._mode = mode;
        this._contextProps = contextProps;
        this._builder = contextBuilder;
        this.ignore = ignore;
        this._isSemantic = null;
    }

    /**
     * Get a data point by its address
     */
    DataPoint.locate = function(address, dataModel){
        var result = getDataPointByAddress(address, get(dataModel, 'series'));
        return result && result.dp || null;
    };

    var prot = DataPoint.prototype;

    /**
     * Get the context of this data point
     * @return {Object}
     */
    prot.context = function(){
        if (!this._data) {
            // If data context is null, contextBuilder must be provided.
            this._data = {};
            var dpInfo = getDataPointByAddress(this._addr, this._model.series);
            this._builder(this._model, dpInfo, this._addr, this._contextProps, this._data);
        }
        return this._data;
    };
    
    prot.additionCtx = function(additionCtx){
        if(additionCtx){
            this._additionCtx = additionCtx;
            return this;
        }
        var context = this.context();
        if(!this._additionCtx){
            
            this._additionCtx = {};
            var dpInfo =  getDataPointByAddress(this._addr, this._model.series);
            var _context = dpInfo.addition;
            var _meta = this._model.additionInfo && this._model.additionInfo.metaData;

            if (_context &&  _meta && _meta.length > 1 ) {
                for(var i = 0, ctxVal; i < _meta.length; ++i) {
                    if(!context.hasOwnProperty(_meta[i].id)){
                        ctxVal = TypeUtils.isArray(_context[i]) ? _context[i][0] : _context[i];
                        DataUtils.setContextValue( this._additionCtx, _meta[i].id, ctxVal);
                    }
                }
            }
          
            
        }
        return this._additionCtx;
    };

    function getDataPointByAddress(address, series) {
        var dp = series,
            i = address.length;
        for (; i-- && TypeUtils.isArray(dp);) {
            dp = dp[address[i]];
        }
        return dp;
    }

    /**
     * Get the address of this data point in data model series.
     * The address is an array of indexes for serieses, starting from the inner most to the outer most,
     * just like normal address starting from the most specific to the most general.
     * @param type addressType
     * @return {Array}
     */
    prot.address = function(type){

        if (TypeUtils.isExist(type)) {
            return this._addr[type];
        }

        return this._addr.slice();
    };

    prot.setAddress = function(_){
        this._addr = _;
        return this;
    };

    prot.addressType = {
        SERIES: 1,
        CATEGORY: 0
    };

    /**
     * Get the series to which this data point belongs.
     * @return {Array}
     */
    prot.parentSeries = function(){
        var series = get(this._model, 'series');
        for(var i = this._addr.length - 1; i > 0; --i){
            series = series[i];
            if(this._mode === 'tree'){
                series = series.children;
            }
        }
        return series;
    };

    /**
     * Get the previous data point in the current series.
     * @return {DataPoint}
     */
    prot.prev = function(){
        return toDp(this, 0, -1);
    };

    /**
     * Get the next data point in the current series.
     * @return {DataPoint}
     */
    prot.next = function(){
        return toDp(this, 0, 1);
    };

    /**
     * Get the corresponding data point in the previous series.
     * @return {DataPoint}
     */
    prot.up = function(){
        return toDp(this, -1, 0);
    };

    /**
     * Get the corresponding data point in the next series.
     * @return {DataPoint}
     */
    prot.down = function(){
        return toDp(this, 1, 0);
    };

    // DataSelector APIs --------------------------------

    /**
     * Get the selector representation
     * @return {Object}
     */
    prot.selector = prot.context;

    /**
     * Get the data points that this selector matches.
     * @return {Array}
     */
    prot.getDataPoints = function(){
        return [this];
    };

    /**
     * Check whether a given data point matches this selector.
     * @param {DataPoint} dp
     * @return {Boolean}
     */
    prot.match = function(dp){
        for(var name in this._data){
            if(this._data[name] !== dp[name]){
                return false;
            }
        }
        return true;
    };

    /**
     * Merge with another selector
     * @param {DataSelector} ds
     * @param {String} [rel="or"]
     * @return {DataSelector}
     */
    prot.merge = function(ds, rel){
        return ds.merge({
            _selector: this._data
        }, rel);
    };

    // Utility ----------------------------

    function toDp(dp, seriesDelta, categoryDelta){
        var arr = get(dp._model, 'series');
        var addr = dp._addr;
        var seriesIndex = addr[1];
        var categoryIndex = addr[0];
        for(var i = addr.length - 1; i > 1; --i){
            arr = arr[i];
            if(dp._mode === 'tree'){
                arr = arr.children;
            }
        }
        var series = arr[seriesIndex + seriesDelta];
        if(dp._mode === 'tree'){
            series = series && series.children;
        }
        var item = series && series[categoryIndex + categoryDelta];
        return item && item.dp || null;
    }

    function get(model, field){
        return TypeUtils.isFunction(model[field]) ? model[field]() : model[field];
    }

    return DataPoint;
});

define('sap/viz/framework/common/util/NumberUtils',[
    'sap/viz/framework/common/util/TypeUtils'
],
    function Setup(TypeUtils) {
        function getPositiveNumber(value, defaultVal, parser) {
            var parseFn = parser || parseFloat,
                n = parseFn(value, 10);
            return (isNaN(n) || n < 0) ? defaultVal : n;
        }
        var NumberUtils = {
            getSizeValue: function(value, total, defaultValue) {
                var val,
                    isWithUnit = false;
                if (!value || !TypeUtils.isFunction(value.toString)) {
                    return 0;
                }

                var target = String(value);

                if (target.indexOf("%") != -1) {
                    val = parseFloat(value) / 100;

                    if (TypeUtils.isNaN(val)) {
                        val = defaultValue || 0;
                    } else if (val > 1) {
                        val = 1;
                    }
                } else {
                    // delete px
                    if((val = parseFloat(value)) != value){
                        isWithUnit = true; /** e.g. 1px, bypass val *= total*/
                    }
                    if (TypeUtils.isNaN(val)) {
                        val = defaultValue || 0;
                        isWithUnit = false;
                    } else if (val > total) {
                        val = total;
                    }
                }

                if (val < 0) {
                    val = 0;
                } else if (val > 0 && val <= 1 && !isWithUnit) {
                    val *= total;
                }

                return this.preciseSimple(val);
            },
            isNoValue: function(n) {
                return TypeUtils.isNaN(n);
            },
            isFloat: function(value){
                return Math.floor(value) !== value;
            }, 
            precise: function(f, isNice) {
                var result, temp,
                    str = f.toString(),
                    index = str.indexOf('e');
                if (index >= 0) {
                    result = str.substring(index);
                    temp = parseFloat(str.substring(0, index)).toFixed(8);
                    result = parseFloat(temp + result);
                    if (isNice) {
                        result = index >= 8 ? 0 : result;
                    }
                } else {
                    result = NumberUtils.preciseSimple(f);
                }
                return result;
            },
            preciseSimple: function(f) {
                return +f.toFixed(8);
            },
            /* The method round has the same function with preciseSimple. PreciseSimple will do type conversion,
             * it's performance is slow. But there are many places using preciseSimple in our previous code. To avoid 
             * regression, preciseSimple will reserved.
            */
            round: function(v) {
                var t = 1e8;
                return Math.round(v*t)/t;
            },
            preciseObject: function(obj) {
                if (TypeUtils.isArray(obj)) {
                    for (var i = 0, length = obj.length; i < length; ++i) {
                        obj[i] = NumberUtils.preciseObject(obj[i]);
                    }
                } else if (TypeUtils.isNumeric(obj)) {
                    return NumberUtils.preciseSimple(obj);
                } else if (obj instanceof Object) {
                    for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            obj[key] = NumberUtils.preciseObject(obj[key]);
                        }
                    }
                }
                return obj;
            },
            getPositiveInt: function(value, defaultValue) {
                return getPositiveNumber(value, defaultValue, parseInt);
            },
            getPositiveNumber: getPositiveNumber,
            valueInRange: function(n, range) {
                var lo = Math.min.apply(null, range),
                    hi = Math.max.apply(null, range);
                return n < lo ? lo : (n > hi ? hi : n);
            },
            getNumberAfterDecimalPoint: function(num){
                var temp = num.toString();
                var tokens = temp.split(".");
                return tokens[1] || "";
            }
        };

        return NumberUtils;
    });

define('sap/viz/framework/chartmodel/ContextBuilder',[
    'sap/viz/framework/chartmodel/DataPoint',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/NumberUtils'
], function(DataPoint, TypeUtils, DataUtils, ObjectUtils, NumberUtils){

    var MND = "measureNames";
    var CONTEXTNAME = "context";
    var allArrayEmpty = function(array) {
        var ret = false;
        if (array && array.length > 0) {
            ret = array.every(function(value) {
                // check zero, null, undefined.
                return [0, null, undefined].indexOf(value) > -1;
            });
        }
        return ret;
    };
    var pieAllEmpty = function(type, bindingResults){
        var ret = false;
        if(type && type.search(/pie|donut/) !== -1){
            var size = bindingResults.size;
            if(size && size.values && TypeUtils.isArray(size.values)){
                var values = size.values;
                if(values && values[0] && TypeUtils.isArray(values[0])){ // trellis pie/donut
                    ret = values.every(function(value){
                        if(TypeUtils.isArray(value)){
                            return value.every(function(item){
                                return allArrayEmpty(item);
                            });
                        }else{
                            return allArrayEmpty(value);
                        }
                    });
                }else if(values){ // pie/dount
                    ret = allArrayEmpty(values);
                }
            }
        }
        return ret;
    };

    function buildContext(bindingResults){
        var contextProps = getContextProps(bindingResults);
        if (bindingResults.seriesType === 'bullet') {
            return buildBullet(bindingResults);
        }
        if (typeof bindingResults.series === "object" && !bindingResults.series.hasOwnProperty('length')) {
            return buildTreeMap(bindingResults);
        }

        var dps = {};
        
        if(bindingResults.chartType && bindingResults.chartType.indexOf("mekko") > -1){
            _buildContext(contextProps, bindingResults.series, buildMekko, bindingResults, [], dps);
        }else{
            var builder = buildBasic;
            if ((bindingResults.valueAxis || bindingResults.valueAxis2) && bindingResults.categoryAxis) {
                if (bindingResults.seriesType === 'percentage') {
                    builder = buildPercentage;
                } else if(/waterfall/.test(bindingResults.chartType)){
                    builder = buildWaterfall;
                } else {
                    builder = buildCSV;
                }
                if (/^info\/(column|bar|dual_column|dual_bar)$/.test(bindingResults.chartType)){
                    builder.lazy = true;
                }
            } else if (bindingResults.timeAxis && bindingResults.seriesType !== 'yy') {
                builder = buildTime;
                // Build context lazily for time line chart
                // TODO: do we need to check whether the chart is showing data points?
                builder.lazy = true;
            } else if (/scatter|bubble/.test(bindingResults.chartType)) {
                builder = buildScatter;
                builder.lazy = true;
            }else if (/pie|donut/.test(bindingResults.chartType)) {
                builder = buildPie;
            }


            if(pieAllEmpty(bindingResults.chartType, bindingResults)){
                // if empty data for pie, no data points should generate
                // otherwise, the selection of legend will throw errows.
                dps = []; 
            }else{
                _buildContext(contextProps, bindingResults.series, builder, bindingResults, [], dps);
            }
        }
        return dps;
    }

    function buildMekko(data, value, address, contextProps, context){
        if(!value) {
            return;
        }

        var emptyValueAxisData = value.valueAxis === undefined || value.valueAxis === null;
        var emptyValueAxisData2 = value.valueAxis2 === undefined || value.valueAxis2 === null;
        if(emptyValueAxisData && emptyValueAxisData2){
            return;
        }

        var dimValue = {};
        for (var p in value) {
            if (p !== "valueAxis" && p !== "valueAxis2") {
                dimValue[p] = value[p];
            }
        }
        var categoryIndex = address[0];
        buildBasic(data, dimValue, categoryIndex, contextProps, context);

        var categoryAxis = data.categoryAxis;
        for (var i = 0; i < categoryAxis.values.length; i++) {
            setContextValue(context, categoryAxis.metaData[i], categoryAxis.values[i][categoryIndex]);
        }
        var metaData;
        if (!context[MND]) {
            var valueAxisName = value.hasOwnProperty('valueAxis') ? 'valueAxis' : null;
            var valueAxis2Name = value.hasOwnProperty('valueAxis2') ? 'valueAxis2' : null;
            if(valueAxisName){
                metaData = data[valueAxisName].metaData;
                if(metaData && metaData.length === 1){
                    context[MND] = metaData[0].id;
                    context[metaData[0].id] = value.valueAxis;
                }
            }
            if(valueAxis2Name){
                metaData = data[valueAxis2Name].metaData;
                if(metaData && metaData.length === 1){
                    context[metaData[0].id] = value.valueAxis2;
                }
            }
        }
        if(data.seriesType == "percentage"){
            var measureNames = context[MND];
            if (measureNames && context[measureNames]) {
                context[measureNames] = context[measureNames].value || context[measureNames];
            }
        }
    }
    
    function _buildContext(contextProps, series, builder, bindingResults, addrStack, dps){
        
        for (var i = 0, len = series.length; i < len; ++i) {
            var item = series[i];
            if (item) {
                var address = [i].concat(addrStack);
                if (TypeUtils.isArray(item)) {
                    _buildContext(contextProps, item, builder, bindingResults, address, dps);
                } else {
                    if (item.isNullValue) {
                        continue;
                    }
                    var dp = item.dp;
                    // If we are just cloning a data model here, no need to build context again
                    if (!dp) {
                        var context;
                        if (!builder.lazy) {
                            context = {};
                            builder(bindingResults, item, address, contextProps, context);
                        }
                        
                        // item._break being true means this data point is just a placeholder instead 
                        // of a real data point. Used to break line in time line chart
                        dp = new DataPoint(context, address, bindingResults,
                                null, contextProps, builder, item._break);
                        item.dp = dp;
                    }
                    dps[dp.id] = dp;
                }
            }
        }
    }

    function _buildAddr(series, addrStack, dps){
        for (var i = 0, len = series.length; i < len; ++i) {
            var item = series[i];
            if (!item) {
                continue;
            }
            var address = [i].concat(addrStack);
            if (TypeUtils.isArray(item)) {
                _buildAddr(item, address, dps);
            } else {
                if (item.isNullValue) {
                    continue;
                }
                var dp = item.dp;
                dp.setAddress(address);
                if (dps){
                    dps[dp.id].setAddress(address);
                }
            }
        }
    }

    function rebuildAddr(series, dps){
        _buildAddr(series, [], dps);
    }

    function getContextProps(bindingResults){
        // Get all the context props at first, so we can efficiently build context for every data point.
        var dimensions = bindingResults.dimensions;
        if(dimensions){
            var measures = bindingResults.measures;
            var props = [];
            var foundMND;
            var i, j, metaData;

            for(i = 0; i < dimensions.length; ++i){
                var dimension = dimensions[i];
                metaData = bindingResults[dimension].metaData;
                for(j = 0; j < metaData.length; ++j){
                    var field = metaData[j].id;
                    // Add a normal dimension or an MND
                    props.push({
                        field: field,
                        dm: dimension,
                        idx: j
                    });
                    if(field === MND){
                        // MND binding on a dimension, need to add corresponding measures
                        foundMND = true;
                        var values = metaData[j].values;
                        for(var k = 0; k < values.length; ++k){
                            props.push({
                                field: values[k].id,
                                measures: measures,
                                mndBinding: {
                                    dm: dimension,
                                    idx: j
                                }
                            });
                        }
                    }
                }
            }
            if(!foundMND){
                // MND not bound in any dimension, add a placeholder here
                props.push({
                    field: MND
                });
                // Since no MND, the measures are not added yet...
                for(i = 0; i < measures.length; ++i){
                    metaData = bindingResults[measures[i]].metaData;
                    for(j = 0; j < metaData.length; ++j){
                        props.push({
                            // mark it as a measure, so we can find the proper field later in builder
                            isMeasure: true,
                            field: metaData[j].id,
                            dm: measures[i],
                            idx: j
                        });
                    }
                }
            }
            // Sort the props only if we need to generate context key for every data point
            // Context key can be useful for deserialize selection
//            return props.sort(function(a, b){
//                return a.field === b.field ? 0 : a.field < b.field ? -1 : 1;
//            });
            return props;
        }
        return [];
    }

    function buildBasic(data, value, address, contextProps, context) {
        var measure;
        for (var p in value) {
            if (p !== 'dp' && value.hasOwnProperty(p)) {
                // If it is an array, it must be a dimension
                if ((TypeUtils.isArray(value[p]) ||
                            // it can also be a simple measure
                            (data[p] && data[p].metaData && data[p].metaData.length === 1))) {
                    buildContextField(context, data, p, value);
                } else {
                    // it is a measure, but it's field can not be determined directly from metaData
                    // (e.g. trellis MND case)
                    measure = p;
                }
            }
        }
        if (measure && context[MND]) {
            context[context[MND]] = value[measure];
        }
        var _meta = data.context && data.context.metaData;
        var _context = value.context;
        if (_context) {
            for(var i = 0, ctxVal; _meta && i < _meta.length; ++i) {
                ctxVal = TypeUtils.isArray(_context[i]) ? _context[i][0] : _context[i];
                DataUtils.setContextValue(context, _meta[i].id, ctxVal);
            }
        }
       
       
        return context;
    }

    function buildScatter(data, value, address, contextProps, context) {
        buildBasic(data, value, address, contextProps, context);
        //For context row Id
        return context;
    }

    function buildTime(data, value, address, contextProps, context) {
        var mndField;
        var i, prop;
        // Find out the measure field of this data point first
        for(i = contextProps.length; i--;){
            prop = contextProps[i];
            if(prop.mndBinding && value.hasOwnProperty(prop.mndBinding.dm)){
                mndField = value[prop.mndBinding.dm][prop.mndBinding.idx];
                break;
            }else if(prop.isMeasure && value.hasOwnProperty(prop.dm)){
                mndField = prop.field;
                break;
            }
        }
        for(i = 0; i < contextProps.length; ++i){
            prop = contextProps[i];
            if(prop.mndBinding && value.hasOwnProperty(prop.mndBinding.dm) && mndField === prop.field){
                // This is a measure bound by a dimension as MND
                // Have to find out which measure it is, e.g., valueAxis or valueAxis2?
                for(var j = prop.measures.length; j--;){
                    if(value.hasOwnProperty(prop.measures[j])){
                        context[mndField] = value[prop.measures[j]];
                        break;
                    }
                }
            }else if(prop.dm && value.hasOwnProperty(prop.dm)){
                // normal case

                var v = TypeUtils.isArray(value[prop.dm]) ?
                        value[prop.dm][prop.idx] : value[prop.dm];

                DataUtils.setContextValue(context, prop.field, v, prop.isMeasure);
            }else if(prop.field === MND){
                // MND case
                context[MND] = mndField;
            }
        }
        //For context row Id
        if (data.context && TypeUtils.isExist(value.context)){
            var meta = data.context.metaData;
            for(i = 0; i < meta.length; ++i){
                context[meta[i].id] = TypeUtils.isArray(value.context[i]) ? value.context[i][0] : value.context[i];
            }
        }
    }

    //csv means category series value
    function buildCSV(data, value, address, contextProps, context) {
        var dimValue = {};
        for (var p in value) {
            if (p !== "valueAxis" && p !== "valueAxis2") {
                dimValue[p] = value[p];
            }
        }
        buildBasic(data, dimValue, address, contextProps, context);
        var categoryAxis = data.categoryAxis;
        var categoryIndex = address[0];
        for (var i = 0; i < categoryAxis.values.length; i++) {
            setContextValue(context, categoryAxis.metaData[i], categoryAxis.values[i][categoryIndex]);
        }
        if (!context[MND]) {
            var valueAxisName = value.hasOwnProperty('valueAxis') ? 'valueAxis' :
                value.hasOwnProperty('valueAxis2') ? 'valueAxis2' : 
                value.hasOwnProperty('variance1') ? 'variance1' : 
                value.hasOwnProperty('variance2') ? 'variance2' : null;
            if(valueAxisName){
                var metaData = data[valueAxisName].metaData;
                if(metaData && metaData.length === 1){
                    context[MND] = metaData[0].id;
                }
            }
        }
        if (context[MND]) {
            context[context[MND]] = value.hasOwnProperty('valueAxis') ? value.valueAxis : 
            value.hasOwnProperty('valueAxis2') ? value.valueAxis2 : 
            value.hasOwnProperty('variance1') ? value.variance1 : 
            value.hasOwnProperty('variance2') ? value.variance2 : null;
        }
    }
    
    function buildPie(data, value, address, contextProps, context){
        buildBasic(data, value, address, contextProps, context);
        if (context[MND]) {
            context[context[MND]] = value.hasOwnProperty('size')? value.size : null;  // for mnd pie/donut
        }
    }

    function buildWaterfall(data, value, address, contextProps, context){
        buildCSV(data, value, address, contextProps, context);
        var tempDp = data.series[address[1]][address[0]];
        if( tempDp  && /total/.test(tempDp.waterfallType) ){
            context.isCumulative = true;
        }
    }

    function buildPercentage(data, value, address, contextProps, context) {
        buildCSV(data, value, address, contextProps, context);
        var measureNames = context[MND];
        if (measureNames && context[measureNames]) {
            context[measureNames] = context[measureNames].value || context[measureNames];
        }
    }

    // cIdx cateIndex 
    // sIdx seriesIndex
    // mIdx measureIndex
    function buildFieldContextForBullet(isTime, data, cIdx, sIdx, mIdx, dps, seriesPoint, cIdxBySeries){
        var context = {};
        var i;
        var categoryAxis = data.categoryAxis || data.timeAxis;
        var meta = categoryAxis.metaData;
        for(i = 0; i < meta.length; ++i){
            setContextValue(context, meta[i], categoryAxis.rowArray[cIdx][i]);
        }

        //e.g  act: [profit, cost] color: [china, japan]
        //     China/Profit, China/cost, Japan/Profit, Japan/cost
        //     data.color.rowArray [china, japan]
        var valNum = data.actualValues.metaData.length;
        var realColorIdx = isTime? Math.floor(sIdx/valNum) : sIdx;
        var hasColorBinding = data.color && data.color.metaData;
        if(hasColorBinding){
            meta = data.color.metaData;
            for(i = 0; i < meta.length; ++i){
                setContextValue(context, meta[i], data.color.rowArray[realColorIdx][i]);
            }
        }
        
        var fields = [
            'actualValues',
            'additionalValues',
            'targetValues',
            'forecastValues'
        ];
        var dataField;
        var value;
        var isNull = true;
        for(i = 0; i < fields.length; ++i){
            // Has color binding for bullet
            dataField = data[fields[i]];
            if(hasColorBinding && !isTime){
                if(dataField && dataField.values && dataField.values[cIdx] && dataField.values[cIdx][sIdx]){
                    value = dataField.values[cIdx][sIdx][mIdx];
                    setContextValue(context, dataField.metaData[mIdx], value);
                    if (!NumberUtils.isNoValue(value)) {
                        isNull = false;
                    }
                }
            }else{ // no color binding or time bullet, time bullet has different data structure
                if(dataField && dataField.values && dataField.values[cIdx]){
                    value = dataField.values[cIdx][mIdx];
                    setContextValue(context, dataField.metaData[mIdx], value);
                    if (!NumberUtils.isNoValue(value)) {
                        isNull = false;
                    }
                }
            }
            
        }
        var _context = data.context,
            _ctxMeta = _context && _context.metaData,
            _ctxVals = _context && _context.values;
            
        var t;
        if (_ctxMeta && _ctxVals) {
            for( t = 0; t < _ctxMeta.length; ++t){
                var _ctxVal = _ctxVals[t][cIdx];
                context[_ctxMeta[t].id] = TypeUtils.isArray(_ctxVal) ? _ctxVal[sIdx] : _ctxVal;
                if (isTime && !TypeUtils.isExist(context[_ctxMeta[t].id]) && TypeUtils.isArray(_ctxVal)) {
                    //for time series bullet, there is only one category for each series
                    context[_ctxMeta[t].id] = _ctxVal && _ctxVal[0];
                }
            }
        }
        
        
        var measureNum = data.actualValues.metaData.length;
        var realIndex = sIdx * measureNum + mIdx;
        var series = data.series;
        if(series.seriesMap){
            realIndex = series.seriesMap[realIndex];
               
        }
        var dp;
        var _additionInfo = data.additionInfo;
        var _addMeta = _additionInfo && _additionInfo.metaData;
        var _addVals = _additionInfo && _additionInfo.values;
        var additionObj = {};
        if (_addMeta && _addVals) {
            for(t = 0; t < _addMeta.length; ++t){
                if(!context.hasOwnProperty(_addMeta[t].id)){
                    var _addVal = _addVals[t][cIdx];
                    additionObj[_addMeta[t].id] = TypeUtils.isArray(_addVal) ? _addVal[sIdx] : _addVal;
                }
            }
           
        }
        if (!isNull) {
            dp = new DataPoint(context,  isTime? [cIdxBySeries, sIdx] : [cIdx, realIndex], data);
            dps[dp.id] = dp;
            dp.additionCtx(additionObj);
        }
       
        if(seriesPoint){
            seriesPoint.dp = dp;
        }else if(data.series[realIndex] && data.series[realIndex][cIdx]){
            data.series[realIndex][cIdx].dp = dp;
        }
        
        return isNull;
    }
    function buildBullet(data){
        var dps = {};

        var trellisRow = data.trellisRow;
        var trellisCol = data.trellisColumn;
        var rowLength = trellisRow && trellisRow.rowArray ? trellisRow.rowArray.length : 0;
        var colLength = trellisCol && trellisCol.rowArray ? trellisCol.rowArray.length : 0;
        var categoryAxis = data.categoryAxis || data.timeAxis;
        var categoryLen = categoryAxis.rowArray.length;
        var seriesNum = 1;
        if(data.color && data.color.rowArray){
            seriesNum = data.color.rowArray.length;
        }
        var measureNum = data.actualValues.metaData.length;
        var i, j, k, rowIndex, colIndex;
        var fields, series, metaData, values, field, context, value, dp, name, dataField, seriesField;
        var isTime = data.chartType && data.chartType.indexOf("time") > -1;
        var hasColorBinding = data.color && data.color.metaData;

        if(rowLength === 0 && colLength === 0){
            if(!isTime){
                var seriesMap = {};
                for(i = 0; i < data.series.length; ++i){
                    var rIndex = data.series[i].rIndex;
                    if(rIndex == null){
                        rIndex = i;
                    }
                    seriesMap[rIndex] = i;
                }
                data.series.seriesMap = seriesMap;
                for (i = 0; i < categoryLen; ++i) {
                    for(j = 0; j < seriesNum; ++j){
                        for(k = 0; k < measureNum; ++k){
                            buildFieldContextForBullet(isTime, data, i, j, k, dps);
                        }
                    }
                }
            }else{
                for(var ii = 0; ii < data.series.length; ii++){
                    series = data.series[ii];
                    var mId = (series.rIndex == null ? ii : series.rIndex)% measureNum;
                    for (var jj = 0; jj < series.length; ++jj) {
                        //e.g  act: [profit, cost] color: [china, japan]
                        //     China/Profit, China/cost, Japan/Profit, Japan/cost
                        //     metaData is [Profit, cost]
                        buildFieldContextForBullet(isTime, data, series[jj]._cateIndex, ii, mId, dps, series[jj], jj);
                    } 
                }
            }
        }else{
            fields = [
                'actualValues',
                'additionalValues',
                'targetValues',
                'forecastValues',
                'context'
            ];
            var dataSeries = data.series;
            rowLength = dataSeries.length;
            colLength = dataSeries[0].length;
            var cateMetaData = categoryAxis.metaData;
            var cateValues = categoryAxis.values;
            for(rowIndex = 0; rowIndex < rowLength; ++rowIndex){
                for(colIndex = 0; colIndex < colLength; ++ colIndex){
                    series = dataSeries[rowIndex][colIndex];
                    if(series.valueAxis.length === 0){
                        continue;
                    }
                    for (i = 0; i < categoryLen; ++i) {
                        var realContext = {};
                        for (j = 0; j < fields.length; ++j) {
                            field = fields[j];
                            dataField = data[field];
                            seriesField = series[field][i];
                            if (!dataField || !dataField.values || !seriesField) {
                                continue;
                            }
                            metaData = dataField.metaData;
                            values = seriesField;
                            if(field === "valueAxis"){
                                values = seriesField.values;
                            }
                            if (!metaData || !values) {
                                continue;
                            }
                            for (k = 0; k < metaData.length; ++k) {
                                name = metaData[k].id;
                                realContext[name] = TypeUtils.isArray(values) ? values[k]: values;
                            }
                        }
                        if(TypeUtils.isEmptyObject(realContext)){
                            continue;
                        }
                        ["trellisRow", "trellisColumn"].forEach(function (field){
                            if(series[field]){
                                metaData = data[field].metaData;
                                values = series[field];
                                for (k = 0; k < metaData.length; ++k) {
                                    setContextValue(realContext, metaData[k], values[k]);
                                }
                            }
                        });
                        for (k = 0; k < cateMetaData.length; ++k) {
                            setContextValue(realContext, cateMetaData[k], cateValues[k][i]);
                        }
                        dp = new DataPoint(realContext, [i], data);
                        dps[dp.id] = dp;
                        series["valueAxis"][i].dp = dp;
                    }
                }
            }
        }
        return dps;
    }

    function buildTreeMap(bindingResults){
        var result = {};
        _buildTreeMap(bindingResults.series, 0, bindingResults, {}, [], result);
        return result;
    }

    function _buildTreeMap(items, level, data, parentCtx, addrStack, output) {
        var key, i = 0, address, context, dp, item, maxLevel;
        for (key in items) {
            if (items.hasOwnProperty(key)) {
                item = items[key];
                address = [i].concat(addrStack);
                context = buildTreeMapItemContext(data, item, level, parentCtx);
                dp = new DataPoint(context, address, data, 'tree');
                item.dp = dp;
                if(item.children){
                    maxLevel = _buildTreeMap(item.children, level + 1, data, context, address, output);
                }else{
                    output[dp.id] = dp;
                    maxLevel = level;
                }
                context.levelNum = maxLevel + 1;
                i++;
            }
        }
        return maxLevel;
    }

    function buildTreeMapItemContext(data, value, level, parentCtx) {
        var ctx = ObjectUtils.extend(true, {}, parentCtx);
        for (var p in value) {
            if (value.hasOwnProperty(p)) {
                if (!data[p] || !data[p].metaData || !data[p].metaData[0]) {
                    continue;
                }
                var v = value[p], metaData;
                if (p === "title" || p === "text") {
                    metaData = data[p].metaData[level];
                    ctx[metaData.id] = DataUtils.getDimensionValue(v);
                    if (typeof v === 'object') {
                        ctx[metaData.id + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX] =
                            DataUtils.getDimensionDisplayName(v);
                    }
                } else if(p === CONTEXTNAME){
                    metaData = data[p].metaData;
                   
                    for(var i = 0; i <v.length; ++i ){
                        ctx[metaData[i].id] = v[i];
                    }
                } else if (!value.children) {
                
                    metaData = data[p].metaData[0];
                    ctx[metaData.id] = v;
                }
            }
        }
        ctx.level = level;
        return ctx;
    }

    function buildContextField(context, data, property, value){
        var prop = data[property];
        var metaData = prop && prop.metaData;
        if (metaData && metaData[0]) {
            var v = value[property];
            if (TypeUtils.isArray(v)) {
                for(var i = 0; i < v.length; ++i) {
                    setContextValue(context, metaData[i], v[i]);
                }
            } else {
                setContextValue(context, metaData[0], v);
            }
        }
    }

    //name2idTable: e.g Profit -> ENTRY_ID_Profit
    function getBindingContext(binding, name2IdTable) {
        var bindingContexts = [];
        var metaDataIds = binding.metaData.map(function(d) {
            return d.id;
        });

        var domains = binding.scale.getDomain();
        for (var index = 0; index < domains.length; index++) {
            var context = {};
            var domain = domains[index];

            //bullet target domain is a string
            if(TypeUtils.isString(domain)){
                context = domain;
            }else{
                for (var itemIndex = 0; itemIndex < domain.length; itemIndex++) {
                    context[metaDataIds[itemIndex]] = domain[itemIndex];

                    if(name2IdTable && 
                        metaDataIds[itemIndex] === "measureNames" && 
                            TypeUtils.isExist(name2IdTable[domain[itemIndex]])){
                        context["measureNamesId"] = name2IdTable[domain[itemIndex]];
                    }
                }
                buildContextValue(context);
            }
            bindingContexts.push(context); 
        }
        return bindingContexts;
    }

    function buildContextValue(context) {
        var value;
        for (var property in context) {
            if (context.hasOwnProperty(property) && context[property]) {
                value = context[property];
                if (!DataUtils.isPlainValue(value)) {
                    context[property] = DataUtils.getDimensionValue(value);
                    context[property + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX] =
                        DataUtils.getDimensionDisplayName(value);
                }
            }
        }
    }

    function setContextValue(context, metaData, value){
        // TODO: is it possible that metaData or metaData.id is empty?
        if (metaData && metaData.id) {
            DataUtils.setContextValue(context, metaData.id, value, metaData.type === "Measure");
        }
    }
    
    function buildSeriesLineContext (data, seriesIndex){
        var context =  buildSeriesContext(data, seriesIndex,
            ["color", "color2", "trellisColumn", "trellisRow"]);
        var valueAxis = data.valueAxis;
        if(valueAxis && valueAxis.metaData && valueAxis.metaData.length === 1 ){
            if(!context){
                context = {};
            }
            if(!context["measureNames"]){
                context["measureNames"]  = data.valueAxis.metaData[0].id;
            }
        }
        return context;
    }

    function buildSeriesContext(dataModel, seriesIndex, keys){
        var context = {};
        var series = dataModel.series[seriesIndex];
        //in case that the first data point is null value
        var hasContext = false;
        for (var i = 0; series && i < series.length; ++i) {
            var item = series[i];
            if (!item) {
                continue;
            }
            for (var j = 0; j < keys.length; ++j) {
                var key = keys[j];
                if (!item.hasOwnProperty(key)) {
                    continue;
                }
                buildContextField(context, dataModel, key, item);
                hasContext = true;
            }
            if (hasContext) {
                return context;
            }
        }
        return null;
    }

    function getSeriesScaleInfo(dataModel, seriesIndex, keys){
        var domain = [];
        var series = dataModel.series[seriesIndex];
        //in case that the first data point is null value
        for(var i = 0; i < series.length; ++i){
            var item = series[i];
            if(!item){
                continue;
            }
            for(var j = 0; j < keys.length; ++j){
                var key = keys[j];
                if(!item.hasOwnProperty(key)){
                    continue;
                }
                return {
                    domain: item[key],
                    field: key
                };
            }
        }
        return null;
    }

    return {
        build: buildContext,
        buildSeriesContext: buildSeriesContext,
        getBindingContext: getBindingContext,
        getSeriesScaleInfo: getSeriesScaleInfo,
        buildSeriesLineContext : buildSeriesLineContext,
        rebuildAddr: rebuildAddr,
        buildBasic: buildBasic
    };
});

define('sap/viz/framework/common/util/BulletUtils',["sap/viz/framework/common/util/TypeUtils"],
    function Setup(TypeUtils) { 
       
        var utils= {};
        utils._TIME_BULLET_MEASURES = ["actualValues", "additionalValues", "targetValues"];
        function updateRange(range, val) {
            if (range[0] > val) {
                range[0] = val;
            } else if (range[1] < val) {
                range[1] = val;
            }
        }
        
        function calculateBindingDomain(metaData) {
            var bindingMax = 0;
            var bindingMin = 0;
            var i;
            for (i = 0; i < metaData.length; i++) {
                if (metaData[i].max > 0) {
                    bindingMax += metaData[i].max;
                } else if (metaData[i].max === undefined ||
                           metaData[i].max === null) {
                    bindingMax = -Infinity;
                    break;
                }

                if (metaData[i].min < 0) {
                    bindingMin += metaData[i].min;
                } else if (metaData[i].min === undefined ||
                           metaData[i].min === null) {
                    bindingMin = -Infinity;
                    break;
                }
            }
            return [bindingMin, bindingMax];
        }

        function calculateMaximizedDomain(binding1, binding2) {
            var maximizedDomain;
            var domain1 = [-Infinity, -Infinity];
            var domain2 = [-Infinity, -Infinity];
            if (binding1 && binding1.metaData) {
                domain1 = calculateBindingDomain(binding1.metaData);
            }

            if (binding2 && binding2.metaData) {
                domain2 = calculateBindingDomain(binding2.metaData);
            }

            if (binding2 &&
                domain1[0] !== -Infinity && domain1[1] !== -Infinity &&
                domain2[0] !== -Infinity && domain2[1] !== -Infinity) {
                maximizedDomain = [Math.min(domain1[0], domain2[0], domain1[0] + domain2[0]),
                                   Math.max(domain1[1], domain2[1], domain1[1] + domain2[1])
                                  ];
            } else {
                maximizedDomain = domain1;
            }
            return maximizedDomain;
        }

        function maximizedBulletDomain(bindingResults) {
            var mainRange = calculateMaximizedDomain(bindingResults["actualValues"],
                                                     bindingResults["additionalValues"]);

            var targetRange = calculateMaximizedDomain(bindingResults["targetValues"]);
            mainRange[0] = Math.min(mainRange[0], targetRange[0]);
            mainRange[1] = Math.max(mainRange[1], targetRange[1]);

            var forecastRange = calculateMaximizedDomain(bindingResults["forecastValues"]);
            mainRange[0] = Math.min(mainRange[0], forecastRange[0]);
            mainRange[1] = Math.max(mainRange[1], forecastRange[1]);

            if (mainRange[0] === -Infinity || mainRange[1] === -Infinity) {
                mainRange = null;
            }
            return mainRange;
        }
    
        utils.bulletSetMinMax = function(bdResults) {
            var maximizedDomain = maximizedBulletDomain(bdResults);
            var actAddRange = [0, 0],
                fctRange = [0, 0],
                tgtRange = [0, 0];
    
            var record,
                series = bdResults.series;
    
            for (var i = 0; i < series.length; i++) {
                for (var j = 0; j < series[i].length; j++) {
                    record = series[i][j] || {};
                    
                    updateRange(actAddRange, +record.actualValues || 0);
                    updateRange(actAddRange, +record.additionalValues || 0);
                    updateRange(actAddRange, (+record.actualValues || 0) + (+record.additionalValues || 0));

                    updateRange(fctRange, +record.forecastValues || 0);
                    updateRange(tgtRange, +record.targetValues || 0);
                }
            }
    
            var range = {
                min: Math.min(actAddRange[0], tgtRange[0], fctRange[0]),
                max: Math.max(actAddRange[1], tgtRange[1], fctRange[1])
            };
            utils._TIME_BULLET_MEASURES.forEach(function(msr) {
                if (bdResults[msr]) {
                    bdResults[msr].minValue = range.min;
                    bdResults[msr].maxValue = range.max;
                    bdResults[msr].maximizedDomain= maximizedDomain;
                }
            });
        };
       
        return utils;
    });

define('sap/viz/framework/chartmodel/DataModel',[
    'sap/viz/framework/chartmodel/ContextBuilder',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/framework/common/util/BulletUtils'
], function(
    ContextBuilder,
    TypeUtils,
    ObjectUtils,
    DataUtils,
    BulletUtils
) {

    function DataModel(bindingResults, rawData, bindingFeeds) {
        if (bindingResults) {
            this.init(bindingResults, rawData, bindingFeeds);
        }
        this._freshScale = true;
        this._rangeIndex = [];
    }

    DataModel.prototype.init = function(bindingResults, rawData, bindingFeeds) {
        setBindingResults(this, bindingResults);
        

        this._rawData = rawData;
        this._bindingFeeds = bindingFeeds;
    };
    function resetAddr(data){
        if(TypeUtils.isArray(data)){
            data.forEach(resetAddr);
        }else {
            delete data.dp;
        }
    }
    DataModel.prototype.buildContext = function(){
        var series = this._initSeries;
        if(series && series.filter){
            var results = [];
            for(var i = 0; i < series.length; ++i){
                if(series[i].isEmpty !== true){
                    series[i].rIndex = i;
                    results.push(series[i]);
                    if(this._rebuildAddr){
                        resetAddr(series[i]);
                    }
                }
            }
            this._rebuildAddr = false;
            // filter series here, then plot will ignore noValue series auto.
            this._bindingResults.series = this._series = results;
        }
        //series = this._series;
        this._dataPoints = ContextBuilder.build(this._bindingResults);

    };

    DataModel.prototype.getDataPointCount = function(){
        return Object.keys(this._dataPoints).length;
    };

    /**
     * Get a data point by id
     * @param {String|Object} id - data point id
     * @return {DataPoint}
     */
    DataModel.prototype.getDataPoint = function(id){
        return this._dataPoints[id];
    };

    /**
     * Get an array of data points by address or customized condition
     * @param {Array|Function} - addr
     * @return {Array}
     */
    DataModel.prototype.getDataPoints = function(addr){
        var results = [];
        var args = TypeUtils.isArray(addr) || TypeUtils.isFunction(addr) ? addr : arguments;
        var dps = this._dataPoints;
        var id;
        if (TypeUtils.isFunction(addr)) {
            for (id in dps){
                if (dps.hasOwnProperty(id) && addr(dps[id])) {
                    results.push(dps[id]);
                }
            }
        } else {
            for (id in dps){
                if (dps.hasOwnProperty(id)) {
                    var dpAddr = dps[id].address();
                    var match = 1;
                    for (var i = 0; i < args.length; ++i) {
                        var idx = args[i];
                        if (typeof idx === 'number' && idx >= 0 && dpAddr[i] !== idx) {
                            match = 0;
                            break;
                        }
                    }
                    if (match) {
                        results.push(dps[id]);
                    }
                }
            }
        }
        return results;
    };

    DataModel.prototype.destroy = function(){
        this._dataPoints = null;
        this._freshScale = null;
        this._bindingFeeds = null;
        for (var key in this._bindingResults) {
            if (this._bindingResults.hasOwnProperty(key)) {
                this["_" + key] = null;
                this[key] = null;
            }
        }
        
        this._bindingResults = null;
        this._rawData = null;
        this._rangeIndex = null;
    };

    /**
     * Quary data model by input paramater
     * @param {String} feedName
     * @param {Object} - parameters
       {
            start : 1368126732073,
            end : 1368127773791
        }
     * @return {Object} - DataModel
     */
    DataModel.prototype.query = function(feedName, filterOptions, props){
        var filter = dataModelFilters[feedName];
        if(filter){
            return filter(this, feedName, filterOptions, props);
        }
        return this;
    };

    DataModel.prototype.getBindingMetaData = function() {
        var result = {};
        for (var key in this._bindingResults) {
            if (this._bindingResults.hasOwnProperty(key)) {

                // if not set bindingFeeds, this condition will skip
                if (this._bindingFeeds != null &&
                    this._bindingFeeds.indexOf(key) === -1) {
                    if (!(key === "color2" && this._bindingResults[key])) {
                        //color2 may have binding result if only feed valueAxis2
                        continue;
                    }
                }
                
                var binding = this._bindingResults[key];
                if (binding.metaData == null || binding.metaData.length == null || binding.metaData.length === 0) {
                    continue;
                }
                result[key] = binding.metaData;
            }
        }
        return result;
    };
    
    DataModel.prototype.isNeedRefreshScale = function() {
        return this._freshScale;
    };

    DataModel.prototype.getPaginationOptions = function () {
        //to return pagination option in dataModel
        //paginationOptions is set into chart metadata,
        //the object is like
        //"metadata" : {
        //    options : {
        //        pagination : {
        //            mode : "update",//reset, update
        //            ratio : 0.1
        //        }
        //    },
        //update mode means keeping layout and just update plot,
        //reset mode means redraw pagination scrollbar.
        //ratio means scroll bar thumb ratio. 
        return this && this._rawData && this._rawData._FlatTableD &&
            this._rawData._FlatTableD._dataset &&
            this._rawData._FlatTableD._dataset.metadata &&
            this._rawData._FlatTableD._dataset.metadata.options &&
            this._rawData._FlatTableD._dataset.metadata.options.pagination;
    };
    
    DataModel.prototype.updateSeriesIndex = function(index) {
        if (this.allSeries == null) {
            return;
        }
        
        var allSeries = this.allSeries();
        this._bindingResults.series = allSeries[index];
        this._initSeries = allSeries[index];
        this._series = allSeries[index];
        this._dataPoints = ContextBuilder.build(this._bindingResults);
        this.setNeedRefreshScale(false);
    };
    DataModel.prototype.getInitSeries = function(){
        return this._initSeries;
    };
    DataModel.prototype.setRebuildAddr = function(value){
        this._rebuildAddr = value;  
    };
    DataModel.prototype.setNeedRefreshScale = function(value) {
        this._freshScale = value;
    };

    DataModel.prototype.getRange = function(name, option){
        option = option || {};
        var series = this._series;
        var valueMin = Infinity, valueMax = -Infinity;
        var seriesData, seriesNum, i;
        var chartType = (TypeUtils.isFunction(this.chartType) && this.chartType()) || "";
        var needCategoryNum = option && option.needCategoryNum;
        this._rangeIndex = [];
        for (seriesNum = 0; seriesNum < series.length; seriesNum++) {
            seriesData = series[seriesNum];
            for (i = 0; i < seriesData.length; i++) {
                if (!seriesData[i]) {
                    continue;
                }
                if(!seriesData[i].hasOwnProperty(name)) {
                    break;
                }
                if (needCategoryNum) {
                    if (this._rangeIndex.indexOf(i) < 0) {
                        this._rangeIndex.push(i);
                    }
                } else {
                    valueMin = Math.min(valueMin, seriesData[i][name]);
                    valueMax = Math.max(valueMax, seriesData[i][name]);
                }
            }
        }
        if (TypeUtils.isNumber(option.min)) {
            valueMin = option.min;
        }
        if (TypeUtils.isNumber(option.max)) {
            valueMax = option.max;
        }
        
        if (Math.abs(valueMin) !== Infinity && Math.abs(valueMax) !== Infinity) {
            return [valueMin, valueMax];
        }
        return null;
    };

    // Private ----------------------------------------------------------------

    function queryNumber(series, name, option, parseFunc) {
        var start = option.start, end = option.end;
        if (!TypeUtils.isNumber(start)) {
            start = -Infinity;
        }
        if (!TypeUtils.isNumber(end)) {
            end = Infinity;
        }

        // Ignore invalid range
        var invalidJudge = start >= end;
        if (option.allowEqual){
            invalidJudge = start > end;
        }
        if (invalidJudge) {
            return null;
        }
        var seriesNum = 0,
            newSeries = [];
         //   dataPoints = {};
        var minTime = Infinity,
            maxTime = -Infinity;
        for (seriesNum = 0; seriesNum < series.length; seriesNum++) {
            var seriesData = series[seriesNum];
            newSeries[seriesNum] = [];
            for (var i = 0; i < seriesData.length; i++) {
                var item = seriesData[i], value;
                if (!item) {
                    continue;
                }
                if (TypeUtils.isArray(item[name])) {//dimension, item[name] is array
                    value = item[name][0];
                    if (parseFunc) {
                        value = parseFunc.call(null, value);
                    }
                } else {//measure, item[name] is number
                    value = item[name];
                }
                minTime = Math.min(minTime, value);
                maxTime = Math.max(maxTime, value);
                if (value >= start && value <= end) {
                    if (option.needCategoryNum) {
                        newSeries[seriesNum][i] = item;
                    } else {
                        newSeries[seriesNum].push(item);
                    }

                    if(item.dp){
                 //   dataPoints[item.dp.id] = item.dp;
                    }
                }
            }
        }
        return {
            series: newSeries
           // dataPoints: dataPoints
        };
    }

    // filters ---------------------------------------------------------------

    function timeFilter(dataModel, feedName, filterOptions, props){
        filterOptions = filterOptions || {};

        var start = filterOptions.start;
        var end = filterOptions.end;

        var startIsNumber = TypeUtils.isNumber(start);
        var endIsNumber = TypeUtils.isNumber(end);
        var parseFunc = function(element) {
            if (TypeUtils.isExist(DataUtils.getDimensionParsedValue(element))) {
                element = DataUtils.getDimensionParsedValue(element);
            } 
            return element;
        };
        var invalidJudge = start >= end;
        if (filterOptions.allowEqual){
            invalidJudge = start > end;
        }
        var originalSeries = dataModel._initSeries;
        var originalResults = dataModel._bindingResults;
        if ((startIsNumber || endIsNumber) && !(startIsNumber && endIsNumber && invalidJudge)){
            // Do filter job
            filterOptions.needCategoryNum = 
                /timeseries.*stacked_column|timeseries_waterfall/.test(dataModel._chartType);
            var filterResult = queryNumber(originalSeries, feedName, filterOptions, parseFunc);
            if(filterResult){
                //for time, only modify series, valueAxis and related range
                var series = filterResult.series;
                var newDataModel = new DataModel();
                setBindingResults(newDataModel, originalResults);
                newDataModel._initSeries = series;
                newDataModel._bindingResults.series = series;
                newDataModel._series = series;
                var i, len;
                if (newDataModel._actualValues) {
                    var bulletBindingResult = {};
                    bulletBindingResult.series = series;
                    BulletUtils._TIME_BULLET_MEASURES.forEach(function(item) {
                        bulletBindingResult[item] = ObjectUtils.clone(newDataModel[item]());
                    });
                    BulletUtils.bulletSetMinMax(bulletBindingResult);
                    BulletUtils._TIME_BULLET_MEASURES.forEach(function(item) {
                        newDataModel["_" + item] = bulletBindingResult[item];
                    });
                } else {
                    newDataModel._valueAxis = ObjectUtils.clone(newDataModel.valueAxis());
                    var valueRange =
                        newDataModel.getRange('valueAxis', {needCategoryNum: filterOptions.needCategoryNum});
                    for (i = 0, len = newDataModel._valueAxis.range.length; i < len; ++i) {
                        //override all measures' range by filtered data points' range.
                        if (valueRange) {
                            newDataModel._valueAxis.range[i] = valueRange.slice();
                        } else {
                            newDataModel._valueAxis.range[i] = valueRange;
                        }
                    }
                }
                if(TypeUtils.isExist(newDataModel.valueAxis2) && TypeUtils.isFunction(newDataModel.valueAxis2)) {
                    newDataModel._valueAxis2 = ObjectUtils.clone(newDataModel.valueAxis2());
                    var valueRange2 = newDataModel.getRange('valueAxis2');
                    for (i = 0, len = newDataModel._valueAxis2.range.length; i < len; ++i){
                        //override all measures' range by filtered data points' range.;
                        if (valueRange2){
                            newDataModel._valueAxis2.range[i] = valueRange2.slice();
                        } else {
                            newDataModel._valueAxis2.range[i] = valueRange2;
                        }
                    }
                }
                //for datapoint context
                newDataModel._dataPoints = filterResult.dataPoints;
              //  ContextBuilder.rebuildAddr(series, filterResult.dataPoints);

                var findIndexFn = function (array, key){
                    for (var i = 0, len = array.length; i < len; ++i){
                        if (DataUtils.valuesToString(array[i]) === key){
                            return i;
                        }
                    }
                    return -1;
                };
                // for filter color and shape field
                ["color", "color2", "shape"].forEach(function (bindName){
                    if (!newDataModel[bindName] || !TypeUtils.isExist(newDataModel[bindName]().values)){
                        return;
                    }
                    var bind = newDataModel[bindName]();

                    var valuesMap = {};
                    bind = ObjectUtils.clone(bind);
                    var originRowArray = bind.rowArray;
                    var originValues = bind.values;
                    var filterRowArray = [];
                    var filterValues = [];

                    originValues.forEach(function(item, index) {
                        filterValues[index] = [];
                    });
                    series.forEach(function(items) {
                        var idx = 0;
                        while(items.length > 0 && !items[idx]) {
                            idx++;
                        }
                        if (items.length === 0 || !TypeUtils.isExist(items[idx][bindName])) {
                            return;
                        }
                        var key = DataUtils.valuesToString(items[idx][bindName]);
                        var index = findIndexFn(originRowArray, key);

                        if (!valuesMap[key] && index !== -1) {
                            valuesMap[key] = 1;
                            filterRowArray.push(originRowArray[index]);

                            for (var i = 0, iLen = filterValues.length; i < iLen; i++) {
                                filterValues[i].push(originValues[i][index]);
                            }
                        }
                    });

                    bind.rowArray = filterRowArray;
                    bind.values = filterValues;
                    newDataModel["_"+bindName] = bind;
                });
                delete filterOptions.needCategoryNum;
                //for fiscal check we have to keep rawData in filtered data
                newDataModel._rawData = dataModel._rawData;
                newDataModel._bindingFeeds = dataModel._bindingFeeds;
                return newDataModel;
            }
        }
        //reset address if user set scales back.
    //    ContextBuilder.rebuildAddr(dataModel._series);
        originalResults.series = originalSeries;
        return dataModel;
    }

    var dataModelFilters = {
        'timeAxis': timeFilter
    };

    // Utility -------------------------------------

    function generateGetFn(model, key, values) {
        model['_' + key] = values;
        var fn = function() {
            return model['_' + key];
        };
        return fn;
    }

    function setBindingResults(model, bindingResults){
        model._bindingResults = bindingResults;
        model._initSeries = bindingResults.series;
        for (var key in bindingResults) {
            if (bindingResults.hasOwnProperty(key)) {
                model[key] = generateGetFn(model, key, bindingResults[key]);
            }
        }
    }

    return DataModel;
});

define('sap/viz/framework/binding/BindingManager',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/binding/defaultChains',
    'sap/viz/framework/chartmodel/DataModel',
    'sap/viz/framework/common/util/ArrayUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/binding/bindingValidationUtil',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/scale/ScaleMapping'
], function Setup(
    TypeUtils,
    FunctionUtils,
    defaultChains,
    DataModel,
    ArrayUtils,
    ObjectUtils,
    bindingValidationUtil,
    LangManager,
    ScaleMapping
) {

    var BindingManager = {};
    var BindingRepository = {};
    var bindingSequence = [];
    var oriBindings = [];
    var measures = [];
    var dimensions = [];
    var flatTableDefaultChain = {
        dimension: 'GetDimensionsFromFlattable',
        measure: 'GetMeasuresFromFlattable'
    };
    var crossTableDefaultChain = {
        dimension: 'GetDimensionsFromCrosstable',
        measure: 'GetMeasuresFromCrosstable'
    };
    var MEASURE_NAMES = "measureNames",
        LAYOUT = "layout",
        TYPENAME_DIMENSION = "Dimension",
        TYPENAME_MEASURE = "Measure";
    var WATERFALLTYPE = "waterfallType";
    var roles = {};

    var bindingDefinition = null;
    var roleMap = {};

    BindingManager.getInstance = function (def) {
        bindingDefinition = def;
        bindingDefinition.map(function (item) {
            roleMap[item.id] = ScaleMapping.TO_OLD_SCALEROLE[item.role];
        });
        return this;
    };

    BindingManager.registerChain = function (id, dataResolver) {

        if (arguments.length < 2) {
            FunctionUtils.error('need at least 2 arguments');
        }
        if (BindingRepository[id]) {
            FunctionUtils.error('already exist');
        }
        BindingRepository[id] = dataResolver;
    };

    BindingManager.unRegisterChain = function (id) {
        delete BindingRepository[id];
    };

    BindingManager.getChainResolverById = function(id) {
        return BindingRepository[id];
    };

    BindingManager.getCurrentFeedRole = function () {
        return roles;
    };

    var getMeasureNamesFromFlatTable = function (bindings) {
        var mndBinds;
        var i, j;
        for (i = 0; i < bindings.length; i++) {
            for (j = 0; j < bindings[i].source.length; j++) {
                if (bindings[i].source.hasOwnProperty(j)) {
                    if (bindings[i].source[j][MEASURE_NAMES]) {
                        mndBinds = bindings[i].source[j][MEASURE_NAMES];
                        break;
                    }
                }
            }
        }
        var mnd = [];
        if (mndBinds) {
            for (i = 0; i < bindings.length; i++) {
                if (mndBinds.indexOf(bindings[i].feed) > -1) {
                    mnd = mnd.concat(bindings[i].source);
                }
            }
        }
        return mnd;
    };

    var getBindIndex = function (bindings, feedName) {
        for (var i = 0; i < bindings.length; i++) {
            if (bindings[i].feed === feedName) {
                return i;
            }
        }
        return -1;
    };

    //for nd array parse, make sure layout binding is first dimension in values array
    //Trellis fisrt, then layout, last is mark.
    var changeBindingSequence = function (bindings) {
        var feed;
        var layoutIndex = [],
            trellisIndex = [],
            othersIndex = [];
        var i;
        for (i = 0; i < bindings.length; i++) {
            var role = roleMap[bindings[i].feed];
            if (role && role.indexOf(LAYOUT) > -1) {
                layoutIndex.push(i);
            } else if (role && /trellis|frame/.test(role)) {
                trellisIndex.push(i);
            } else {
                othersIndex.push(i);
            }
        }
        layoutIndex = [].concat(trellisIndex, layoutIndex, othersIndex);
        var newBindings = bindings.map(function(e, i){
            return bindings[layoutIndex[i]];
        });
        return newBindings;
    };

    BindingManager.setBindings = function (bindings) {

        var feeds = bindingDefinition;
        var config = null;

        var parsedFeedingDef = (function(feedingDef) {
            var typeMap = {};
            var oldType = ScaleMapping.TO_OLD_SCALETYPE;
            var oldRole = ScaleMapping.TO_OLD_SCALEROLE;

            var i = feedingDef.length;
            while (i--) {
                var feedDef = feedingDef[i];
                var role = feedDef.role;
                typeMap[feedDef.id] = {
                    type: feedDef.type,
                    scaleType: oldType[role],
                    role: oldRole[role]
                };
            }
            return typeMap;
        })(feeds);

        bindingSequence = [];
        measures = [];
        dimensions = [];
        bindings = changeBindingSequence(bindings);
        for (var i = 0; i < bindings.length; i++) {
            var feed = bindings[i].feed;
            var parsedDef = parsedFeedingDef[feed];
            if (parsedDef) {
                if (feed === WATERFALLTYPE) {
                    if (TypeUtils.isString(bindings[i].source[0])) {
                        measures.push(feed);
                    }
                } else if (feed.indexOf('pattern') > -1) {
                    if (TypeUtils.isString(bindings[i].source[0])) {
                        measures.push(feed);
                    }
                } else if (parsedDef.type === TYPENAME_DIMENSION) {
                    dimensions.push(feed);
                } else if (parsedDef.type === TYPENAME_MEASURE) {
                    measures.push(feed);
                }
                roles[feed] = {
                    feedingType: parsedDef.type,
                    config: config,
                    scaleType: parsedDef.scaleType,
                    role: parsedDef.role
                };
            }
        }
        bindingSequence = [].concat(dimensions, measures);
        return bindings;
    };


    var getMeasureNamesFromCrossTable = function (rawData) {
        var mgs = rawData._crosstableDataset._dataSet.measureValuesGroup;
        var measureName = [];
        mgs.forEach(function(mg) {
            if (TypeUtils.isArray(mg.data)) {
                mg.data.forEach(function(data) {
                    measureName.push(data.name);
                });
            }
        });
        return measureName;
    };

    var getBindingFromCrosstableFeeding = function (bindings, feedId) {
        var feedsLength = bindings.length;
        for (var i = 0; i < feedsLength; i++) {
            var binding = bindings[i];
            if (binding.feedId === feedId) {
                return {
                    bindingInfo: binding.binding
                };
            }
        }
    };


    var getBindingInfo = function(rawData, bindings, type, chartType, groupOption, options, propMgrProxy) {
        var bindingResults = {},
            mnd;
        var isInternal = false;
        var isFlatTable = false;
        var seriesType = type.split('/')[0];
        var bindItem;
        var bindResvoler;
        var seriesBindingResolver;
        var i;
        var isTimeStacked = (/timeseries.*stacked.*/).test(type);

        var getResolverById = BindingManager.getChainResolverById;
        var isTimeWaterFall = (/timeseries.*waterfall/).test(type);

        var getResolver = function (seriesType, resolverId) {
            var resolverPrefix = (seriesType === 'tyy' ? 'ty' : seriesType);
            var pointIndex = resolverPrefix.indexOf(".") + 1;
            if (pointIndex > 0) {
                //identifier names cannot contain ".".
                resolverPrefix = seriesType.substring(pointIndex);
            }

            var resolver = getResolverById(resolverPrefix + resolverId);
            if (!TypeUtils.isFunction(resolver)) {
                resolver = getResolverById("xy" + resolverId);
            }
            return resolver;
        };
        var bindSelf = function(resolver){
            return resolver.bind(resolver);
        };

        var dataType = rawData.type;
        if (dataType.indexOf('FlatTableDataset') > -1) {
            mnd = getMeasureNamesFromFlatTable( bindings);
            isInternal = true;
            isFlatTable = true;
        } else if (dataType.indexOf('CrosstableDataset') > -1) {
            mnd = getMeasureNamesFromCrossTable(rawData);
            isInternal = true;
        }
        if (isInternal) {
            //For flat and cross, we have binding dependency so we have to do build the data by sequence..
            bindSelf(getResolver(seriesType, 'OnBindingStart'))();

            if (isTimeStacked) {
                bindSelf(getResolver("xy", 'OnBindingStart'))();
            }

            var length = bindingSequence.length;
            var enableDuplicated = false;
            if (/bubble|scatter|value_line|tagcloud/.test(type)){
                enableDuplicated = true;
            }
            var needSum = null;
            if (/100_/.test(chartType)){
                needSum = "NEED_SUM_BY_CATEGORY";
            }else if(/pie|donut/.test(chartType)){
                needSum = "NEED_ONLY_TOTAL_SUM";
            }
            //The options for data parsers.
            //Currently only time dimension is using parser to truncate date
            //and transfer date string into time stamp.
            var parserOption = {
                dataTimeLevel: null,
                showAsUTC: false,
            };
            options = options || {};
            if (/timeseries_(.*combination|.*column|bullet|waterfall)/.test(chartType)) {
                parserOption = {
                    dataTimeLevel: options.dataTimeLevel,
                    showAsUTC: options.showAsUTC,
                    isTimeWaterFall: isTimeWaterFall
                };
            }

            //BITSDC2-5158 [legacy][master] "Some dates do not have the correct format" encountered
            //when create timeseries chart with empty dataset
            //when passing empty dataset, chart should not check date and throw warning.
            //Instead, it should render a empty chart
            if (/timeseries/.test(chartType)) {
                parserOption.isTimeChart = true;
                if (rawData._FlatTableD._data.length === 1 &&
                    rawData._FlatTableD._data[0].every(function (e) { return !TypeUtils.isExist(e); })) {
                    parserOption.skipDateChecking = true;
                }
            }

            for (var prop in options) {
                if (options.hasOwnProperty(prop) && (options[prop] instanceof Object)) {
                    parserOption[prop] = options[prop];
                }
            }

            for (i = 0; i < length; i++) {
                var binding = bindingSequence[i];
                var bindingObject = bindings[getBindIndex(bindings, binding)];
                if (!bindingObject) {
                    bindingObject = getBindingFromCrosstableFeeding(bindings, binding);
                }

                if (bindingObject) {
                    if (bindingObject.feed === "timeAxis" && isTimeStacked) {
                        parserOption.isTimeStacked = true;
                    }
                    bindItem = bindingObject;
                    bindResvoler = getResolverById(seriesType + bindItem.chain);
                    var isDimResolver = false;
                    if (!TypeUtils.isFunction(bindResvoler)) {
                        var chainObject = isFlatTable ? flatTableDefaultChain : crossTableDefaultChain;
                        //Using default chains
                        if (dimensions.indexOf(binding) >= 0) {
                            isDimResolver = true;
                            bindResvoler = getResolver(seriesType, chainObject.dimension);
                        } else if (measures.indexOf(binding) >= 0) {
                            var chainType = seriesType;
                            if (isTimeStacked) {
                                chainType = "xy";
                            } else if (isTimeWaterFall) {
                                chainType = "waterfall";
                            }
                            bindResvoler = getResolver(chainType, chainObject.measure);
                        } else {
                            FunctionUtils.error('Resolver is not a function');
                        }

                    }
                    var result;
                    var legendOrder = propMgrProxy && (typeof propMgrProxy.get("legend.order") === 'function');
                    groupOption.legendOrder = legendOrder;
                    if (isDimResolver){
                        result = bindSelf(bindResvoler)(rawData, bindItem.source,
                            mnd, bindings, bindingDefinition, binding, groupOption, parserOption);
                    } else {
                        if (bindingObject.feed === "valueAxis") {
                            if (isTimeStacked) {
                                parserOption.timeAxis = bindingResults.timeAxis;
                            } else if (isTimeWaterFall) {
                                parserOption.isTimeWaterFall = true;
                            }
                        }

                        result = bindSelf(bindResvoler)(rawData, bindItem.source,
                            mnd, bindings, enableDuplicated, binding, needSum, parserOption);
                    }

                    bindingResults[binding] = result;
                }
            }

            var context = [];
            var ContextResolver = getResolver(seriesType, 'GetContext');
            if (isFlatTable && rawData.getContext()) {
                context = rawData.getContext();

                var contextResult = bindSelf(ContextResolver)(rawData, context,
                    enableDuplicated, mnd);

                bindingResults.context = contextResult;
            }

            if(type.indexOf("bullet") > -1 && type.indexOf("extension") < 0){
                var Names = ["actualValues", "additionalValues","targetValues","forecastValues"];
                var actMeta = bindingResults.actualValues.metaData;

                if(actMeta && actMeta.length > 1){
                    mnd = [];
                    for(var k = 0; k < Names.length; ++k){
                        var meta = bindingResults[Names[k]] && bindingResults[Names[k]].metaData;
                        for(var t = 0; meta && t < meta.length; ++t){
                            mnd.push(meta[t].id);

                        }
                    }
                }

            }
            if(isFlatTable && (options.allBinding && options.allBinding.length > 1 ||  mnd && mnd.length > 1)){
                var addMnd = options.allBinding ? getMeasureNamesFromFlatTable(options.allBinding) : mnd;
                ContextResolver = getResolver(seriesType, 'GetContext');
                var additionInfo = bindSelf(ContextResolver)(rawData, addMnd,
                    enableDuplicated, addMnd);
                bindingResults.additionInfo = additionInfo;
            }

            if (type.match(/stacked_column/) && propMgrProxy &&
                !/dual/.test(chartType) &&
                propMgrProxy.get("plotArea.series")) {
                //flexible stack means one or more columns
                options.isFlexibleStack = true;
            }

            seriesBindingResolver = getResolver(seriesType, 'GetBindingSeries');

            if (type.indexOf('stacked_combination') > -1) {
                bindingResults.seriesType = 'stacked_combination';
            } else if (type.indexOf('100') > -1) {
                bindingResults.seriesType = 'percentage';
            } else if (type.indexOf('area') > -1) {
                bindingResults.seriesType = 'area';
            } else if (type.match(/waterfall/)) {
                bindingResults.seriesType = 'waterfall';
            } else if ((type.indexOf('stack') > -1 || type.indexOf('mekko') > -1) &&
                !options.isFlexibleStack) {
                bindingResults.seriesType = 'stacked';
            } else if (seriesType.toLowerCase().indexOf("bullet") > -1) {
                bindingResults.seriesType = 'bullet';
            } else if (type.match(/bubble|scatter/)) {
                bindingResults.seriesType = 'yy';
            } else {
                bindingResults.seriesType = 'spread';
            }
            if(type.match(/mekko|tagcloud|timeseries_bullet/)){
                options.allowEmptyMeasure = true;
            }
            if(type.match(/waterfall/)){
                options.isStacked = (/stacked_/).test(type);
                if (isTimeWaterFall) {
                    options.isTimeWaterFall = true;
                }
            }

            if(type.match(/timeseries_(.*column|combination|bullet|waterfall|stacked.*)/)){
                options.errorOnDuplicate = true;
                if (isTimeStacked) {
                    options.isTimeStacked = true;
                }
            }
            if(type.match(/timeseries_stacked_combination/)){
                var dataShapes = propMgrProxy && propMgrProxy.get("plotArea.dataShape.primaryAxis");
                if (!( dataShapes instanceof Array)) {
                    dataShapes = propMgrProxy.get("plotArea.dataShape.primaryAxis", 'defaultValue');
                }
                options.dataShapes = dataShapes;
            }

            bindSelf(seriesBindingResolver)(rawData, dimensions, measures,
                bindingResults, bindings, bindingDefinition, options);

            bindSelf(getResolver(seriesType, 'OnBindingFinished'))();


        } else {
            for (i in bindings) {
                if (bindings.hasOwnProperty(i)) {
                    bindItem = bindings[i];
                    bindResvoler = getResolverById(bindItem.chain);
                    if (TypeUtils.isFunction(bindResvoler)) {
                        bindingResults[bindItem.feed] = bindResvoler.call(bindResvoler, rawData, bindItem.source);
                    } else {
                        FunctionUtils.error('Resolver is not a function');
                    }
                }
            }
            seriesBindingResolver = getResolverById('GetBindingSeries');
            bindSelf(seriesBindingResolver)(rawData, dimensions, measures, bindingResults,
                bindings, bindingDefinition);
            bindingResults.seriesType = 'spread';


        }
        if(seriesType === "yy" || seriesType === "ty"){
             // for bubble and scatter
            if(bindingResults.seriesContext && bindingResults.seriesContext.length > 0){
                var seriesContextKeys = {};
                if(bindingResults.color && bindingResults.color.metaData){
                    var colorDepth = propMgrProxy && propMgrProxy.get("plotArea.colorDepth");
                    colorDepth = +colorDepth > 0 ? +colorDepth : 1;
                    colorDepth = Math.min(colorDepth, bindingResults.color.metaData.length);
                    for(var l = 0; l < colorDepth; l++){
                        seriesContextKeys[bindingResults.color.metaData[l].id] = true;
                    }
                }
                if(bindingResults.shape && bindingResults.shape.metaData){
                    var shapeDepth = propMgrProxy && propMgrProxy.get("plotArea.shapeDepth");
                    shapeDepth = +shapeDepth > 0 ? +shapeDepth : 1;
                    shapeDepth = Math.min(shapeDepth, bindingResults.shape.metaData.length);
                    for(var s = 0; s < shapeDepth; s++){
                        seriesContextKeys[bindingResults.shape.metaData[s].id] = true;
                    }
                }
                var tmpAllseriesContext = [];
                bindingResults.seriesContext.forEach(function(sC){
                    if(sC){
                        var tmpSeriesContext = {};
                        var keys = Object.keys(sC);
                        keys.forEach(function(d){
                            if(seriesContextKeys[d]){
                                tmpSeriesContext[d] = sC[d];
                            }
                        });
                        if(keys.length === 1 && keys[0] === "measureNames"){
                            tmpAllseriesContext.push(sC);
                        }else {
                            tmpAllseriesContext.push(tmpSeriesContext);
                        }
                    }
                });
                bindingResults.seriesContext = tmpAllseriesContext;
            }
        }
        return bindingResults;
    };

    var splitCrossBinding = function (bindings) {
        var newBindings = [],
            mnd, i, j;

        var dimBinding = [],
            measureBinding = [];
        for (i = 0; i < bindings.length; i++) {
            for (j = 0; j < bindings[i].source.length; j++) {
                if (bindings[i].source[j].type === "analysisAxis") {
                    dimBinding.push(bindings[i]);
                } else if (bindings[i].source[j].type === "measureValuesGroup") {
                    measureBinding.push(bindings[i]);
                }
            }
        }
        for (i = 0; i < measureBinding.length; i++) {
            var tempBinding = dimBinding.concat();
            tempBinding.push(measureBinding[i]);
            newBindings.push(tempBinding);
        }
        return newBindings;
    };

    var splitPatternAndDeltaBinding = function (bindings) {
        var tempBindings = [
            [],
            [],
            [],
            []
        ], patternBindings = [], i;
        var sharedBindings = [];
        for (i = 0; i < bindings.length; i++) {
            switch (bindings[i].feed) {
            case "pattern":
                tempBindings[0].push(bindings[i]);
                tempBindings[2].push(bindings[i]);
                tempBindings[3].push(bindings[i]);
                break;
            case "valueAxis":
                tempBindings[0].push(bindings[i]);
                break;
            case "pattern2":
                tempBindings[1].push(bindings[i]);
                tempBindings[2].push(bindings[i]);
                tempBindings[3].push(bindings[i]);
                break;
            case "valueAxis2":
                tempBindings[1].push(bindings[i]);
                break;
            case "variance1":
                tempBindings[2].push(bindings[i]);
                break;
            case "variance2":
                tempBindings[3].push(bindings[i]);
                break;
            default:
                sharedBindings.push(bindings[i]);
                break;
            }
        }
        for (i = 0; i < tempBindings.length; i++) {
            if (tempBindings[i].length > 0) {
                patternBindings.push(tempBindings[i].concat(sharedBindings));
            }
        }
        return patternBindings;
    };

    var splitFlatBinding = function (bindings) {
        var newBindings = [],
            mnd, i, j;
        var colorIndex = -1;
        for (i = 0; i < bindings.length; i++) {
            for (j = 0; j < bindings[i].source.length; j++) {
                if (bindings[i].source[j][MEASURE_NAMES]) {
                    mnd = bindings[i].source[j][MEASURE_NAMES];
                }
            }
            if (bindings[i].feed === 'color') {
                colorIndex = i;
            }
        }
        if (!mnd) {
            FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
        }

        var dimBinding = bindings.filter(function (e) {
            if (mnd.indexOf(e.feed) < 0) {
                return e;
            }
        });
        for (i = 0; i < mnd.length; i++) {
            var tempBinding = dimBinding.concat();
            for (j = 0; j < bindings.length; j++) {
                if (bindings[j].feed === mnd[i]) {
                    tempBinding.push(bindings[j]);
                }
            }
            newBindings.push(tempBinding);
        }
        return newBindings;
    };

    //TODO: only rename color to color2
    var renameColor = function (bindings) {
        var changeFlag = false,
            binding, colorIndex, colorBinding;
        for (var i in bindings) {
            if (bindings.hasOwnProperty(i)) {
                if (bindings[i].feed === 'color') {
                    colorIndex = i;
                }
                if (bindings[i].feed === 'valueAxis2') {
                    changeFlag = true;
                }
            }
        }
        if (changeFlag) {
            colorBinding = ObjectUtils.clone(bindings[colorIndex]);
            colorBinding.feed = 'color2';
            bindings[colorIndex] = colorBinding;
        }
    };

    //TODO: only rename color to color2
    var renameColor2 = function (bindingResults) {
        for (var i in bindingResults) {
            if (i === 'valueAxis2') {
                bindingResults['color2'] = bindingResults['color'];
                delete bindingResults['color'];

                //also update dimension
                if(bindingResults.dimensions){
                    var index = bindingResults.dimensions.indexOf('color');
                    if(index >= 0){
                        bindingResults.dimensions[index] = 'color2';
                    }
                }
                return true;
            }
        }
        return false;
    };
    var isTrellis = function (bindings) {
        var length = bindings.length;
        for (var i = 0; i < length; i++) {
            if (bindings[i].feed.indexOf('trellis') > -1) {
                return true;
            }
        }
        return false;
    };

    var isDataFrame = function (bindings) {
        var length = bindings.length;
        for (var i = 0; i < length; i++) {
            if (bindings[i].feed === 'dataFrame') {
                return true;
            }
        }
        return false;
    };

    //combine two data model and concat series
    var combineBindingResult = function (allBindingResult, bindings) {
        var abr = allBindingResult;
        var length = abr.length, i;
        if (length > 1) {
            if (isTrellis(bindings)) {
                abr[1].series.map(function (row, i) {
                    row.map(function (column, j) {
                        abr[1].series[i][j] = abr[0].series[i][j].concat(
                            abr[1].series[i][j]);
                    });
                });
            } else {
                for (i = 0; i < abr.length - 1; i++) {
                    abr[i + 1].series = abr[i].series.concat(abr[i + 1].series);

                    if (abr[i + 1].measures && abr[i].measures) {
                        abr[i + 1].measures = ArrayUtils.union(abr[i + 1].measures, abr[i].measures);
                    }

                    if (abr[i + 1].dimensions && abr[i].dimensions) {
                        abr[i + 1].dimensions = ArrayUtils.union(abr[i + 1].dimensions, abr[i].dimensions);
                    }
                }
                if (abr[1].seriesContext) {
                    abr[1].seriesContext = abr[0].seriesContext.concat(abr[1].seriesContext);
                }
                if (isDataFrame(bindings)) {
                    abr[1].allSeries.map(function (series, i) {
                        abr[1].allSeries[i] = abr[0].allSeries[i].concat(
                            abr[1].allSeries[i]);
                    });
                }
            }
        }
        var bindingResults;
        for (i = 0; i < abr.length; i++) {
            bindingResults = ObjectUtils.extend(bindingResults, abr[i]);
        }
        return bindingResults;
    };

    var getMNDFeedName = function (bindings) {
        var i, j;
        for (i in bindings) {
            if (bindings.hasOwnProperty(i)) {
                for (j in bindings[i].source) {
                    if (bindings[i].source.hasOwnProperty(j)) {
                        if (bindings[i].source[j][MEASURE_NAMES]) {
                            return bindings[i].feed;
                        }
                    }
                }
            }
        }
    };

    var changeSeriesColorName = function (series, newName) {
        if (TypeUtils.isArray(series)) {
            if (series.seriesMeta && series.seriesMeta.color) {
                series.seriesMeta['color2'] = series.seriesMeta.color;
                delete series.seriesMeta.color;
            }
            series.map(function (item) {
                changeSeriesColorName(item, newName);
            });
        } else {
            if (series.color) {
                series['color2'] = series.color;
                delete series.color;
            }
        }
    };

    var complementDataModel = function (data, def, valueAxes) {
        var length = def.length;
        for (var i = 0; i < length; i++) {
            if (!data[def[i].id] && def[i].id.indexOf('trellis') < 0) {
                if (def[i].type !== 'group' && !def[i].groupId) {
                    data[def[i].id] = {};
                }
            }
        }
    };

    function rename(bindingResults) {
        var changeName = renameColor2(bindingResults);
        if (changeName) {
            changeSeriesColorName(bindingResults.series, 'color2');
            if (bindingResults.allSeries) {
                for (var index in bindingResults.allSeries) {
                    if (bindingResults.allSeries.hasOwnProperty(index)) {
                        changeSeriesColorName(bindingResults.allSeries[index], 'color2');
                    }
                }
            }
        }
    }

    BindingManager.parseDataWithBindingInformation = function(rawData, bindings, type, chartType, groupOption,
            options, propMgrProxy) {
        var bindingResults, dataModel = null,
            i, j, k;

        var cloneBindings = ObjectUtils.clone(bindings);
        var valueAxes = bindingValidationUtil.getValueAxisBindings(bindings);

        options = options || {};
        options.isTrellis = /trellis/.test(chartType);

        if (type.indexOf('xyy') > -1 || type.indexOf('tyy') > -1 ||
            (type.indexOf('combex') > -1 && valueAxes.length > 1)) {
            var allBindingResult = [],
                newBindings;
            if (rawData.type.indexOf('FlatTableDataset') > -1) {
                if (type.indexOf('hichert') > -1) {
                    newBindings = splitPatternAndDeltaBinding(cloneBindings);
                } else {
                    newBindings = splitFlatBinding(cloneBindings);
                }
                options.allBinding = cloneBindings;
            } else {
                newBindings = splitCrossBinding(cloneBindings);
            }
            this.setBindings(cloneBindings);

            for (i in newBindings) {
                if (newBindings.hasOwnProperty(i)) {
                    bindingResults = getBindingInfo(rawData, newBindings[i], type, chartType, groupOption,
                        options, propMgrProxy);
                    rename(bindingResults);
                    allBindingResult.push(bindingResults);
                }

            }
            if(options){
                delete options.allBinding;
            }

            bindingResults = combineBindingResult(allBindingResult, cloneBindings);
        } else {
            if(/timeseries_.*combination/.test(chartType)) {
                // timeseries_combination need to check mnd
                if (rawData.type.indexOf('FlatTableDataset') > -1) {
                    splitFlatBinding(cloneBindings);
                } else {
                    splitCrossBinding(cloneBindings);
                }
            }
            bindingResults = getBindingInfo(rawData, cloneBindings, type, chartType, groupOption,
                options, propMgrProxy);
        }

        complementDataModel(bindingResults, bindingDefinition, valueAxes);
        if (valueAxes.length === 1 && valueAxes[0] === "valueAxis2") {
            rename(bindingResults);
        }

        bindingResults.chartType = chartType;
        dataModel = new DataModel(bindingResults, rawData, cloneBindings.map(function (item) {
            return item.feed;
        }), options);
        return dataModel;
    };

    var length = defaultChains.length;
    for (var i = 0; i < length; i++) {
        var defaultChainItem = defaultChains[i];
        BindingManager.registerChain(defaultChainItem.id, defaultChainItem.dataResolver);
    }

    return BindingManager;

});

define('sap/viz/framework/interaction/Constants',[],function() {
    var Constants = {
        BEHAVIOR: {
            DEFAULT_BEHAVIOR_ID: "default",
            BUILTIN_BEHAVIOR_ID: "builtIn",
            NOHOVER_BEHAVIOR_ID: "noHoverBehavior",
            DEFAULT_CHART_TYPE_KEY: "*",
            ALL_TARGETS: "*"
        },
        SELECTION_MODE: {
            INCLUSIVE: 'INCLUSIVE',
            EXCLUSIVE: 'EXCLUSIVE',
            NONE: 'NONE',
            SINGLE: 'SINGLE',
            MULTIPLE: 'MULTIPLE',
            RANGE:'RANGE'
        },
        RANGE_SELECTION:{
            OFFSET : 5  // 5px offset allowed for expanding range selection
        },
        SELECTION_BEHAVIOR: {
            DATAPOINT: "DATAPOINT",
            CATEGORY: "CATEGORY",
            SERIES: "SERIES"
        }
    };

    return Constants;
});
define('sap/viz/framework/interaction/BaseMonitor',["sap/viz/framework/common/util/ObjectUtils"], function(ObjectUtils) {
  
    var BaseMonitor = function(eventLayer) {
        
    };

    BaseMonitor.prototype.setProperties = function(_) {
        ObjectUtils.extendByRepalceArray(true, this._props, _);
        return this;
    };

    BaseMonitor.prototype.setAllHandler = function(handler){
        var dispatch = this.getDispatch();
        var types = this.getMonitorEventTypes();
        types.forEach(function(e) {
            dispatch.on(e, handler);
        });
    };

    BaseMonitor.prototype.getDispatch = function() {
        return this._dispatch;
    };

    BaseMonitor.prototype.resetStatus = function() {
        this._startPoint = null;
        this._focusTarget = null;
        this._status = "standby";
    };

    BaseMonitor.prototype.destroy = function(){
        this.setAllHandler(null);
    };
 

    /** this function return coordinate relatvie to chart node */
    BaseMonitor.getRelativeCoordinate = function(coord, node) {
        var rect = node.getBoundingClientRect(); // rect is dimension after scale
        var origin = {
            /* not to use BBox because when has scroll bar, BBox width/height is not correct.
               Asuumption: user does not set border on svg
               Chrome (before 2016 APril) support all
               Chrome  (after 2016 April) and IE10 only support clientWidth.
               Firefox support none. So fallback to bounding client width if firefox, then it does not support scale.
            */
            width: node.offsetWidth || node.clientWidth || rect.width,
            height: node.offsetHeight || node.clientHeight || rect.height
        };
        var x = coord.x - rect.left,
            y = coord.y - rect.top;
        return {
            x: Math.round( x * (origin.width / rect.width) ),
            y: Math.round( y * (origin.height / rect.height) )
        };
    };

    return BaseMonitor;
});

define('sap/viz/framework/interaction/DesktopMonitor',[
    'sap/viz/framework/common/util/oo',
    "sap/viz/framework/interaction/BaseMonitor",
    "jquery",
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/common/util/ObjectUtils"
], function(oo,
            BaseMonitor,
            $,
            UADetector, 
            ObjectUtils) {
    var MIN_LASSO_DISTANCE = 20;
    var types = [
        "click", "hover", "down", "up",
        "lassostart", "lassomove", "lassoend",
        "dragstart", "dragmove", "dragend",
        "wheelmove", "contextmenu", "blur",
        "uparrow", "downarrow", "leftarrow", "rightarrow",
        "enter", "tab", "space", "plus", "minus"
    ];

    var dragEventTypes = ["dragstart", "dragmove", "dragend"];
    var mouseEventTypes = ["click", "hover", "down", "up", "wheelmove"];

    var DesktopMonitor = function(eventLayer) {
        this._dispatch = d3.dispatch.apply(this, types);
        this._isMobile = false;
        this._props = {
            "enableClick": true,
            "enableHover": true,
            "enableDown": true,
            "enableUp": true,
            "enableLasso": true,
            "enableDrag": true,
            "enableWheelmove": true,
            "enableBlur": true,
            "enableKeyboard": false
        };
        this._eventLayer = null;
        this._divNode = null;
        this._startPoint = null;
        this._focusTarget = null;
        this._lastPoint = null;
        this._status = "standby";
        this._focusFunc = null;
        this._blurFunc = null;
        this.registerEvent(eventLayer);
    };

    oo.extend(DesktopMonitor, BaseMonitor);

    DesktopMonitor.getMonitorEventTypes = DesktopMonitor.prototype.getMonitorEventTypes  = function() {
        return types;
    };

    DesktopMonitor.prototype.registerEvent = function(eventLayer) {
        this._eventLayer = eventLayer;
        this._eventLayer.on("mousedown.monitor", this._mousedown.bind(this))
            .on("mouseup.monitor", this._mouseup.bind(this))
            .on("mousemove.monitor", this._mousemove.bind(this))
            .on("contextmenu.monitor", this._contextmenu.bind(this));

        if (UADetector.isFirefox()) {
            this._eventLayer.on("dragstart.monitor", this._preventEvent);
            this._eventLayer.on("DOMMouseScroll.monitor", this._mousewheel.bind(this));
        } else {
            this._eventLayer.on("mousewheel.monitor", this._mousewheel.bind(this));
        }
        
        if (UADetector.isIE()) {
            this._eventLayer.on("dragstart.monitor", this._preventEvent);
            if(UADetector.isIE11()){
                //https://github.com/d3/d3/issues/2454
                //d3.v3 has a legacy bug on "mouseleave" on ie11,  
                // jQuery doesn't work either, "mouseleave" event will trigger even if source is not "v-m-root"
                // Use IE native event listener
                this._eventLayer.node().addEventListener("mouseleave",  function(e){
                    this._mouseleave(e);
                }.bind(this));
            }else{
                this._eventLayer.on("mouseleave.monitor", function() {
                    this._mouseleave.call(this, d3.event);
                }.bind(this));
            }
        } else {
            $(this._eventLayer.node()).mouseleave(this._mouseleave.bind(this));
        }

        this._divNode = this._eventLayer.node().parentNode;
        if (this._divNode) {
            this._keydownHandler = function(evt) {
                this._keydown(evt);
            }.bind(this);

            this._divNode.addEventListener("keydown", this._keydownHandler);
            this._blurFunc = this._blur.bind(this);
            //Need to know div lost focus and then clear highlight border effect
            //on componement of chart when focus leaves chart with keyboard key tab or F6. 
            this._divNode.addEventListener("blur", this._blurFunc);
        }
        return this;
    };

    DesktopMonitor.prototype.destroy = function() {
        DesktopMonitor.superclass.destroy.apply(this);
        var eventLayer = this._eventLayer;
        this._eventLayer = null;
        if (eventLayer) {
            eventLayer.on("mousedown.monitor", null)
                .on("mouseup.monitor", null)
                .on("mousemove.monitor", null)
                .on("contextmenu.monitor", null);

            if (UADetector.isFirefox()) {
                eventLayer.on("DOMMouseScroll.monitor", null);
            } else {
                eventLayer.on("mousewheel.monitor", null);
            }
            if (UADetector.isIE()) {
                eventLayer.on("mouseleave.monitor", null);
            } else {
                $(eventLayer.node()).unbind("mouseleave");
            }
        }
        if (this._divNode) {
            this._divNode.removeEventListener("keydown", this._keydownHandler);
            this._divNode.removeEventListener("blur", this._blurFunc);
        }
        this._keydownHandler = null;
        this._divNode = null;
        this._dispatch = null;
        this._props = null;
        this._startPoint = null;
        this._focusTarget = null;
        this._lastPoint = null;
        this._status = null;
        this._focusFunc = null;
        this._blurFunc = null;
    };


    function isEventWithLeftMouseButton(event) {
        return event.which === 1;
    }

    function isEventWithCtrlKey(event) {
        return UADetector.os() === 'Mac' ? event.metaKey : event.ctrlKey;
    }

    function getEventCoordinate(event) {
        return {
            x: event.clientX,
            y: event.clientY
        };
    }

    function distance(p1, p2) {
        var dx = p1.x - p2.x;
        var dy = p1.y - p2.y;
        return Math.sqrt(dx * dx + dy * dy);
    }

    function getCurrentEvent() {
        if (d3.event) {
            return d3.event;
        } else {
            return window.event;
        }
    }

    function getFlagCategoryByEventType(type) {
        return "enable" + type.substring(0, 1).toUpperCase() + type.substring(1);
    }

    DesktopMonitor.prototype._preventEvent = function() {
        var originalEvent = getCurrentEvent();
        originalEvent.preventDefault();
        return false;
    };

    DesktopMonitor.prototype._blur = function() {
        if (this._props["enableKeyboard"]) {
            this._fireEvent("blur");
        }
    };

    DesktopMonitor.prototype._keydown = function(keydownEvent) {
        var evt = keydownEvent;
        switch (evt.keyCode) {
            case 37:
                this._fireKeyBoardEvent("leftarrow", evt);
                break;
            case 38:
                this._fireKeyBoardEvent("uparrow", evt);
                break;
            case 39:
                this._fireKeyBoardEvent("rightarrow", evt);
                break;
            case 40:
                this._fireKeyBoardEvent("downarrow", evt);
                break;
            case 9:
                this._fireKeyBoardEvent("tab", evt);
                break;
            case 13:
                this._fireKeyBoardEvent("enter", evt);
                break;
            case 32:
                this._fireKeyBoardEvent("space", evt);
                break;
            case 107:
            case 187:
                this._fireKeyBoardEvent("plus", evt);
                break;
            case 109:
            case 189:
                this._fireKeyBoardEvent("minus", evt);
                break;
            case 61:
                if (UADetector.isFirefox()) {
                    this._fireKeyBoardEvent("plus", evt);
                }
                break;
            case 173:
                if (UADetector.isFirefox()) {
                    this._fireKeyBoardEvent("minus", evt);
                }
                break;
        }
    };


    DesktopMonitor.prototype._mousewheel = function() {
        this._fireEvent("wheelmove");
    };

    DesktopMonitor.prototype._mousedown = function() {
        var originalEvent = getCurrentEvent();
        if (!isEventWithLeftMouseButton(originalEvent)) {
            return;
        }
        this._startPoint = getEventCoordinate(originalEvent);
        this._focusTarget = originalEvent.target;
        this._status = "focus";
        this._fireEvent("down");
    };

    DesktopMonitor.prototype._mousemove = function() {
        var originalEvent = getCurrentEvent();
        //In chrome 32, mouse click would activate mousedown, mouseup, click and mousemove in sequence.
        //So we need to add a judgement to avoid mousemove when the mouse hasn't actually moved.
        var lastPoint = this._lastPoint;
        var currentPoint = getEventCoordinate(originalEvent);
        if (lastPoint && distance(lastPoint, currentPoint) === 0) {
            return;
        }
        this._lastPoint = currentPoint;

        var status = this._status;
        var that = this;

        switch (status) {
            case "standby":
                that._fireEvent("hover", null, null, originalEvent);
                break;
            case "focus":
                if (that._checkMouseDownUpDistance(originalEvent)) {
                    var moveType = that._getMoveEventType(originalEvent); //"lasso" or "drag"
                    that._status = moveType;
                    that._fireEvent("up", that._startPoint, that._focusTarget, originalEvent);
                    //"lassostart" or "dragstart"
                    that._fireEvent(moveType + "start", that._startPoint, null, originalEvent);
                    //"lassomove" or "dragmove" 
                    that._fireEvent(moveType + "move", null, null, originalEvent); 
                }
                break;
            case "lasso":
                that._fireEvent("lassomove", null, null, originalEvent);
                break;
            case "drag":
                that._fireEvent("dragmove", null, null, originalEvent);
                break;
        }
    };

    DesktopMonitor.prototype._mouseup = function() {
        var originalEvent = getCurrentEvent();
        if (!isEventWithLeftMouseButton(originalEvent)) {
            return;
        }
        var status = this._status;
        switch (status) {
            case "standby":
                this._fireEvent("hover");
                break;
            case "focus":
                this._fireEvent("up", this._startPoint, this._focusTarget);
                this._fireEvent("click", this._startPoint, this._focusTarget);
                break;
            case "lasso":
                this._fireEvent("lassoend");
                break;
            case "drag":
                this._fireEvent("dragend");
                break;
        }
        this.resetStatus();
    };

    DesktopMonitor.prototype._mouseleave = function(e) {
        var status = this._status;
        switch (status) {
            case "lasso":
                this._fireEvent("lassoend", undefined, undefined, e);
                break;
            case "drag":
                this._fireEvent("dragend", undefined, undefined, e);
                break;
        }
        this.resetStatus();
    };

    DesktopMonitor.prototype._contextmenu = function() {
        this._fireEvent("contextmenu");
    };

    DesktopMonitor.prototype._getMoveEventType = function(event) {
        var result = "drag";
        if (this._isLasso(event)) {
            result = "lasso";
        }
        return result;
    };

    DesktopMonitor.prototype._isLasso = function(event) {
        var props = this._props;
        var ret = false;
        if (props.enableLasso) {
            ret = true;
            /*if (props.selectability.lassoWithCtrlKey && !isEventWithCtrlKey(event)) {
                ret = false;
            }*/
        }
        return ret;
    };

    DesktopMonitor.prototype._checkMouseDownUpDistance = function(evt) {
        var tmp = getEventCoordinate(evt);
        if (this._startPoint !== null &&
            (distance(this._startPoint, tmp) < MIN_LASSO_DISTANCE)) {
            return false;
        } else {
            return true;
        }
    };

    DesktopMonitor.prototype._fireEvent = function(type, point, target, evt) {
        var originalEvent = getCurrentEvent() || evt;
        if (originalEvent) {
            var wheelDelta = 0;
            if (UADetector.isFirefox()) {
                if (originalEvent.detail) {
                    wheelDelta = -120 * originalEvent.detail;
                }
            } else {
                if (originalEvent.wheelDelta) {
                    wheelDelta = originalEvent.wheelDelta;
                }
            }
            var tempEvent = {
                name: type,
                data: {
                    // point is the clientX/Y relative to page coordinate.
                    point: point || getEventCoordinate(originalEvent),
                    // pointToChart is the mouse event position relative to 
                    //chart root left top coordinate(before scale).
                    pointToChart: BaseMonitor.getRelativeCoordinate(
                        point || getEventCoordinate(originalEvent), this._eventLayer.node() ),
                    target: target ? target : originalEvent.target,
                    ctrlKey: isEventWithCtrlKey(originalEvent),
                    wheelDelta: wheelDelta,
                    originalEvent: originalEvent
                }
            };
            var props = this._props;
            var d = this._dispatch;
            if (mouseEventTypes.indexOf(type) > -1) {
                var flagCategory = getFlagCategoryByEventType(type); //"focus" -> "enableFocus"
                if (this._props[flagCategory]) {
                    this._dispatch[type](tempEvent);
                }
            } else if (dragEventTypes.indexOf(type) > -1) {
                if (this._props.enableDrag) {
                    this._dispatch[type](tempEvent);
                }
            } else {
                this._dispatch[type](tempEvent);
            }
        }
    };

    DesktopMonitor.prototype._fireKeyBoardEvent = function (type, evt) {
        //rootHandler is added to make sure we can get the v-info div note
        //because v-info is the actual currentTarget, but currentTarget
        //may be reset by other functions.
        var tempEvent = {
            name: type,
            data: {
                rootHandler: this._divNode,
                target: evt.target,
                originalEvent: evt
            }
        };
        if (this._props["enableKeyboard"]) {
            this._dispatch[type](tempEvent);
        }
    };
    return DesktopMonitor;
});

define('sap/viz/framework/interaction/gesture/GestureDetector',[
    "sap/viz/framework/common/util/UADetector",
    'sap/viz/framework/common/util/FunctionUtils'
], function Setup(UADetector, FuncUtils) {
    var noop = FuncUtils.noop;
    /**
     * Possible State. Gesture Detector is ready to detect gesture
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Possible
     * @field
     *
     */
    var Possible = 0;
    /**
     * Began State. Gesture Detector is ready to detect continuous gesture
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Began
     * @field
     *
     */
    var Began = 1;
    /**
     * Began State. Gesture Detector is continuous to detect continuous gesture
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Changed
     * @field
     *
     */
    var Changed = 2;
    /**
     * Recognized State. Discrete Gesture is detected
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Recognized
     * @field
     *
     */
    var Recognized = 3; // Recognized == Ended
    /**
     * Ended State. Continuous Gesture is detected
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Ended
     * @field
     *
     */
    var Ended = 3;
    /**
     * Ended State. Continuous Gesture is stop to detected
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Canceled
     * @field
     *
     */
    var Canceled = 4;
    /**
     * Ended State. Detector fails to detect in current touch sequence
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Failed
     * @field
     *
     */
    var Failed = 5;


    // var count = 0;
    /**
     * The base abstract gesture detector class
     *
     * @name sap.viz.mvc.GestureDetector
     * @constructor
     */
    var GestureDetector = function() {
        // this.id = count++;
        this._grEnabled = true;
        this._grTouchTotal = 0;
        this._grTouchTracker = {};
        this._grActions = [];
        this._grCancelTouches = true;
        var state = Possible;
        Object.defineProperties(this, {
            'state': {
                get: function() {
                    return state;
                },
                set: function(value) {
                    switch (value) {
                        case Possible:
                            state = Possible;
                            break;
                        case Began:
                            state = Began;
                            this._grActions.forEach(function(action, i) {
                                action(this);
                            }, this);
                            break;
                        case Changed:
                            if (state === Began) {
                                state = Changed;
                            }
                            this._grActions.forEach(function(action, i) {
                                action(this);
                            }, this);
                            break;
                        case Canceled:
                            state = Canceled;
                            this._grActions.forEach(function(action, i) {
                                action(this);
                            }, this);
                            break;
                        case Failed:
                            state = Failed;
                            break;
                        case Ended:
                        case Recognized:
                            state = value;
                            this._grActions.forEach(function(action, i) {
                                action(this);
                            }, this);
                            break;
                    }
                }
            }
        });
    };

    /**
     * Add gesture function callback which will get triggered when
     * gesture is detected. One function instance could only be
     * added once. The returned value indicates whether the adding
     * is succeed.
     *
     * @name sap.viz.mvc.GestureDetector#addGestureAction
     * @function
     * @param {Function}
     *            actionFn
     * @returns {Boolean}
     */
    GestureDetector.prototype.addGestureAction = function(actionFn) {
        var actions = this._grActions;
        if (actions.indexOf(actionFn) === -1) {
            actions.push(actionFn);
            return true;
        }
        return false;
    };
    /**
     * Remove a previous added gesture function callback, the
     * returned value indicates whether the removing is succeed.
     *
     * @name sap.viz.mvc.GestureDetector#removeGestureAction
     * @function
     * @param {Function}
     *            actionFn, the function to be removed.
     * @returns {Boolean}
     */
    GestureDetector.prototype.removeGestureAction = function(actionFn) {
        var actions = this._grActions,
            i = actions.indexOf(actionFn);
        if (i > -1) {
            actions.splice(i, 1);
            return true;
        }
        return false;
    };

    /**
     * Get the location of the gesture, the location is calculated
     * as the average of the locations of all touches on the screen.
     * Caution: This function only return meaningful point value IF
     * and ONLY IF the current state of this gesture detector is in
     * one of the <b>Recognizing</b> states, a.k.a Began, Changed,
     * Canceled, Ended, Recognized, otherwise undefined will return.
     *
     * @function
     * @returns {POINT}
     */
    GestureDetector.prototype.globalLocOfGesture = function() {
        var state = this.state;
        if (this._grEnabled && [Began, Changed, Canceled, Ended, Recognized].indexOf(state) >
            -1) {
            var count = 0;
            var ttracker = this._grTouchTracker,
                p;
            var x = 0;
            var y = 0;
            for (var tId in ttracker) {
                if (ttracker.hasOwnProperty(tId)) {
                    p = ttracker[tId];
                    x += p.x;
                    y += p.y;
                    count++;
                }
            }
            if (count) {
                return {
                    x: x / count,
                    y: y / count
                };
            }
        }
    };

    /**
     * Return an array of identifier of the touches currently
     * involved in the gesture detection, Caution: This function
     * only return meaningful array of touches IF and ONLY IF the
     * current state of this gesture detector is in one of the
     * <b>Recognizing</b> states, a.k.a Began, Canceled, Ended,
     * Recognized, otherwise empty array will return.
     *
     * @function
     * @returns {Array}
     */
    GestureDetector.prototype.involvedTouchePoints = function() {
        var ret = [],
            state = this.state;
        if (this._grEnabled && [Began, Changed, Canceled, Ended, Recognized].indexOf(state) >
            -1) {
            var ttracker = this._grTouchTracker;
            for (var tId in ttracker) {
                if (ttracker[tId] !== undefined) {
                    ret.push(ttracker[tId]);
                }
            }
        }
        return ret;
    };

    /**
     * Get the average position of all the touchs on the screen
     *
     * @function
     * @returns {POINT}
     */
    GestureDetector.prototype.globalLocOfTouchPoints = function() {
        var count = 0;
        var ttracker = this._grTouchTracker,
            p;
        var x = 0;
        var y = 0;
        for (var tId in ttracker) {
            if (ttracker.hasOwnProperty(tId)) {
                p = ttracker[tId];
                x += p.x;
                y += p.y;
                count++;
            }
        }
        if (count) {
            return {
                x: x / count,
                y: y / count
            };
        }
    };

    /**
     * Return the number of touches currently on the screen
     *
     * @function
     * @returns {Number}
     */
    GestureDetector.prototype.totalTouches = function() {
        return this._grTouchTotal;
    };

    /**
     * Get or set whether needs to cancel previous events of the
     * touches when a gesture detected. Default is yes. The related
     * logic like bookkeeping of the canceled touches among several
     * gesture detectors, are currently implemented outside of
     * gesture detector.
     *
     * @function
     * @returns {Boolean|this}
     */
    GestureDetector.prototype.cancelTouches = function(cancel) {
        if (arguments.length) {
            this._grCancelTouches = cancel ? true : false;
            return this;
        } else {
            return this._grCancelTouches;
        }
    };

    /**
     * Get or set the <b>enable</b> status of the gesture detector.
     * If the gesture detector is in detecting a continuous gesture,
     * it will immediately transit to <b>canceled</b> state.
     * Default is yes.
     *
     * @function
     * @returns {Boolean|this}
     */
    GestureDetector.prototype.enable = function(enable) {
        if (arguments.length) {
            enable = enable ? true : false;
            if (this._grEnabled !== enable) {
                this._grEnabled = enable;
                if (!enable) {
                    if ([Began, Canceled].indexOf(this.state) > -1) {
                        this.state = Canceled;
                    } else {
                        this.state = Failed;
                    }
                }
            }
            return this;
        } else {
            return this._grEnabled;
        }
    };

    /**
     * Process the touch start event of a touch sequence. This
     * method is not intent to be overridden and is supposed to be
     * called by the user.
     *
     * @name sap.viz.mvc.GestureDetector#touchBegin
     * @function
     * @param {DOMTouchEvent}
     *            touchStartEvent
     */
    GestureDetector.prototype.touchBegin = function(touchStartEvent) {
        var newTouches = touchStartEvent.changedTouches;
        var ttracker = this._grTouchTracker;
        for (var i = 0, t, len = newTouches.length; i < len; i++) {
            t = newTouches[i];
            ttracker[t.identifier] = {
                x: t.clientX,
                y: t.clientY
            };
            this._grTouchTotal++;
        }
        //Check whether number of touches is right on iOS,
        //otherwise, reset touch status.
        if (UADetector.isIOS() && this._grTouchTotal !== touchStartEvent.touches.length){
            var touches = touchStartEvent.touches;
            this._grTouchTotal = touches.length;
            ttracker = this._grTouchTracker = {};
            for (i = 0, t, len = touches.length; i < len; i++) {
                t = touches[i];
                ttracker[t.identifier] = {
                    x: t.clientX,
                    y: t.clientY
                };
            }
        }
        // console.log(this.id + ":touchadd. number:" + this._grTouchTotal);
        if (this._grEnabled && ([Began, Possible, Changed].indexOf(this.state) > -1)) {
            this.doTouchBegin(touchStartEvent);
        }
    };

    /**
     * Process the touch move event of a touch sequence. This method
     * is not intent to be overridden and is supposed to be called by
     * the user.
     *
     *
     * @name sap.viz.mvc.GestureDetector#touchMove
     * @function
     * @param {DOMTouchEvent}
     *            touchMoveEvent
     */
    GestureDetector.prototype.touchMove = function(touchMoveEvent) {
        if (this._grEnabled && ([Began, Possible, Changed].indexOf(this.state) > -1)) {
            var movedTouches = [touchMoveEvent.changedTouches];
            var ttracker = this._grTouchTracker;
            if(touchMoveEvent.touches){
                movedTouches.push(touchMoveEvent.touches);
            }
            var i, j, t, len;
            
            for( j = 0; j < movedTouches.length; ++j){
                var touches = movedTouches[j];
                for (i = 0, len = touches.length; i < len; i++) {
                    t = touches[i];
                    if (ttracker[t.identifier]) {
                        ttracker[t.identifier] = {
                            x: t.clientX,
                            y: t.clientY
                        };
                    }
                }
            }
            
            this.doTouchMove(touchMoveEvent);
        }
    };

    /**
     * Process the touch end event of a touch sequence. This method
     * is not intent to be overridden and is supposed to be called by
     * the user.
     *
     *
     * @name sap.viz.mvc.GestureDetector#touchEnd
     * @function
     * @param {DOMTouchEvent}
     *            touchEndEvent
     */
    GestureDetector.prototype.touchEnd = function(touchEndEvent) {
        var endedTouches = [touchEndEvent.changedTouches];
        var ttracker = this._grTouchTracker;
        if(touchEndEvent.touches){
            endedTouches.push(touchEndEvent.touches);
        }
        var i, j, t, len;
        for(j = 0; j < endedTouches.length; ++j){
            var touches = endedTouches[j];
            for (i = 0, len = touches.length; i < len; i++) {
                t = touches[i];
                if (ttracker[t.identifier] && !ttracker[t.identifier].toBeDeleted) {
                    ttracker[t.identifier] = {
                        x: t.clientX,
                        y: t.clientY,
                        toBeDeleted: true
                    };
                    this._grTouchTotal--;
                }
                
            }
        }
        
        if (this._grEnabled && ([Began, Possible, Changed].indexOf(this.state) > -1)) {
            this.doTouchEnd(touchEndEvent);
        }
        for (var tId in ttracker) {
            if (ttracker.hasOwnProperty(tId) && ttracker[tId].toBeDeleted) {
                delete ttracker[tId];
            }
        }
        // Reset the detector only when all fingers lifted and in
        // 'ending' state
        //Somehow the mobile browser will omit the last touchEnd event or just combine the last several
        //touchEnd event in one but give the wrong changedTouches list. In this case, 
        //the _grTouchTotal counter will not come to zero and the component will be in the intermediate state
        //and response to no further touches. Therefore, we count on the touches and targetTouches list 
        //to determine whether we should reset the gesture state. 
        if ((!this._grTouchTotal) && ([Recognized, Failed, Canceled].indexOf(this.state) > -1)) {
            this.reset();
        }
    };

    /**
     * Process the touch cancel event of a touch sequence. This
     * method is not intent to be override and is supposed to be
     * called by the user.
     *
     *
     * @name sap.viz.mvc.GestureDetector#touchCancel
     * @function
     * @param {DOMTouchEvent}
     *            touchCancelEvent
     */
    GestureDetector.prototype.touchCancel = function(touchCancelEvent) {
        var cancelledTouches = touchCancelEvent.changedTouches;
        var ttracker = this._grTouchTracker;
        for (var i = 0, t, len = cancelledTouches.length; i < len; i++) {
            t = cancelledTouches[i];
            if (ttracker[t.identifier]) {
                ttracker[t.identifier] = {
                    x: t.clientX,
                    y: t.clientY,
                    toBeDeleted: true
                };
                this._grTouchTotal--;
            }
            // console.log(this.id + ":touchremove_cancel. number:" + this._grTouchTotal);

        }
        if (this._grEnabled && ([Began, Possible, Changed].indexOf(this.state) > -1)) {
            this.doTouchCancel(touchCancelEvent);
        }
        for (var tId in ttracker) {
            if (ttracker.hasOwnProperty(tId) && ttracker[tId].toBeDeleted) {
                delete ttracker[tId];
            }
        }
        // Reset the detector only when all fingers lifted and in
        // 'ending' state
        if ((!this._grTouchTotal) && ([Recognized, Failed, Canceled].indexOf(this.state) > -1)) {
            this.reset();
        }
    };

    /**
     * This method should be overridden in subclass, to handle
     * actual gesture detection
     *
     *
     * @name sap.viz.mvc.GestureDetector#doTouchBegin
     * @function
     * @param {DOMTouchEvent}
     *            touchStartEvent
     */
    GestureDetector.prototype.doTouchBegin = noop;
    /**
     * Gesture Detector uses this method to receive touches in
     * moving phase of a touch sequence. This method should be
     * overridden in subclass.
     *
     *
     * @name sap.viz.mvc.GestureDetector#doTouchMove
     * @function
     * @param {DOMTouchEvent}
     *            touchMoveEvent
     */
    GestureDetector.prototype.doTouchMove = noop;
    /**
     * This method should be overridden in subclass, to handle
     * actual gesture detection
     *
     *
     * @name sap.viz.mvc.GestureDetector#doTouchEnd
     * @function
     * @param {DOMTouchEvent}
     *            touchEndEvent
     */
    GestureDetector.prototype.doTouchEnd = noop;
    /**
     * This method should be overridden in subclass, to handle
     * actual gesture detection
     *
     *
     * @name sap.viz.mvc.GestureDetector#doTouchCancel
     * @function
     * @param {DOMTouchEvent}
     *            touchCancelEvent
     */
    GestureDetector.prototype.doTouchCancel = noop;
    /**
     * Reset the state of this gesture detector. Subclass SHOULD NOT
     * call this method. Override it if necessary.
     *
     *
     * @name sap.viz.mvc.GestureDetector#reset
     * @function
     */
    GestureDetector.prototype.reset = function() {
        this.state = Possible;
        this._grTouchTracker = {};
        this._grTouchTotal = 0;
    };

    /**
     * The mask used to specify gesture detector's state
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState
     * @class
     */
    GestureDetector.TransitionState = {
        Possible: Possible,
        Began: Began,
        Changed: Changed,
        Recognized: Recognized,
        Ended: Ended,
        Canceled: Canceled,
        Failed: Failed
    };
    return GestureDetector;
});
define('sap/viz/framework/interaction/gesture/PanGestureDetector',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/interaction/gesture/GestureDetector'
], function Setup(oo, GestureDetector) {

    var ts = GestureDetector.TransitionState;
    var CONST_PAN_MIN_DISTANCE = 10;
    var CONST_PAN_MAX_TIME = 500;
    var _distance = function(xy1, xy2) {
        var dx = xy1.x - xy2.x;
        var dy = xy1.y - xy2.y;
        return Math.sqrt(dx * dx + dy * dy);
    };
    var _time = function(lastTime, currentTime) {
        return currentTime - lastTime;
    };

    var _refreshStatus = function(event) {
        this._startWhen = this._stopWhen;
        this._stopWhen = event.timeStamp;
        this._lastXY = this._currentXY;
        this._currentXY = this.globalLocOfTouchPoints();
    };

    /**
     * This class defines detector for detecting Panning gesture. Panning
     * gesture is detected when required number of fingers touch the screen and
     * move a reasonable distance.
     *
     * @name sap.viz.mvc.PanGestureDetector
     * @class
     * @augments sap.viz.mvc.GestureDetector
     */
    var PanGestureDetector = function(touchesRequired) {
        PanGestureDetector.superclass.constructor.apply(this, arguments);
        this._touchesRequired = (touchesRequired > 0 && touchesRequired < 6) ?
            touchesRequired : 1;
        this._startXY = undefined;
        this._lastXY = undefined;
        this._currentXY = undefined;
        this._startWhen = 0;
        this._stopWhen = 0;
        this._isLongPress = false;
    };
    oo.extend(PanGestureDetector, GestureDetector);

    /**
     * The number of touches required for tap to be detected.
     *
     * @function
     * @param {Number}
     *            numOfTouches
     * @returns {Number|this}
     */
    PanGestureDetector.prototype.touchesRequired = function(numOfTouches) {
        if (arguments.length) {
            this._touchesRequired = +numOfTouches;
            return this;
        }
        return this._touchesRequired;
    };

    PanGestureDetector.prototype.doTouchBegin = function(touchStartEvent) {
        var currentNumOfTouches = this.totalTouches();
        if (currentNumOfTouches === this._touchesRequired && this.state === ts.Possible) {
            this._startWhen = this._stopWhen = touchStartEvent.timeStamp;
            this._startXY = this._lastXY = this._currentXY = this.globalLocOfTouchPoints();
            this.state = ts.Began;
        } else if (currentNumOfTouches > this._touchesRequired) {
            if (this.state === ts.Began || this.state === ts.Changed) {
                this._stopWhen = touchStartEvent.timeStamp;
                this._lastXY = this._currentXY;
                this._currentXY = this.globalLocOfTouchPoints();
                this.state = ts.Canceled;
            } else {
                this.state = ts.Failed;
            }
        }
    };

    PanGestureDetector.prototype.doTouchMove = function(touchMoveEvent) {
        switch (this.state) {
            case ts.Began:
                if (_distance(this._currentXY, this.globalLocOfTouchPoints()) >=
                    CONST_PAN_MIN_DISTANCE) {
                    if (_time(this._stopWhen, touchMoveEvent.timeStamp) < CONST_PAN_MAX_TIME) {
                        this._isLongPress = false;
                    } else {
                        this._isLongPress = true;
                    }
                    _refreshStatus.call(this, touchMoveEvent);
                    this.state = ts.Changed;
                }
                break;
            case ts.Changed:
            

          
                _refreshStatus.call(this, touchMoveEvent);
                this.state = ts.Changed;

                break;
        }
    };

    PanGestureDetector.prototype.doTouchEnd = function(touchEndEvent) {
        if ((this.state === ts.Began || this.state === ts.Changed)) {
            _refreshStatus.call(this, touchEndEvent);
            this._isLongPress = false;
            this.state = ts.Ended;
        }
    };

    PanGestureDetector.prototype.doTouchCancel = function(touchCancelEvent) {
        if (this.state === ts.Began || this.state === ts.Changed) {
            _refreshStatus.call(this, touchCancelEvent);
            this._isLongPress = false;
            this.state = ts.Canceled;
        }
    };

    /**
     * The current moving range in X,Y direction of the gesture
     *
     * <pre>
     * {
     *      x : ###,
     *      y : ###
     * }
     * </pre>
     *
     * @name sap.viz.mvc.PanGestureDetector#rangeInXY
     * @function
     * @return {POINT}
     */
    PanGestureDetector.prototype.rangeInXY = function() {
        return {
            x: this._currentXY.x - this._startXY.x,
            y: this._currentXY.y - this._startXY.y
        };
    };

    /**
     * The current moving velocity in X,Y direction of the gesture
     *
     * <pre>
     * {
     *      x : ###,
     *      y : ###
     * }
     * </pre>
     *
     * @name sap.viz.mvc.PanGestureDetector#velocityInXY
     * @function
     * @return {POINT}
     */
    PanGestureDetector.prototype.velocityInXY = function() {
        var duration = this._stopWhen - this._startWhen;
        if (duration) {
            return {
                x: (this._currentXY.x - this._lastXY.x) / duration,
                y: (this._currentXY.y - this._lastXY.y) / duration
            };
        } else {
            return 0;
        }
    };

    PanGestureDetector.prototype.reset = function() {
        PanGestureDetector.superclass.reset.apply(this, arguments);
        this._startXY = undefined;
        this._lastXY = undefined;
        this._currentXY = undefined;
        this._startWhen = 0;
        this._stopWhen = 0;
        this._isLongPress = false;
    };

    PanGestureDetector.prototype.isLongPress = function() {
        return this._isLongPress;
    };

    return PanGestureDetector;
});
define('sap/viz/framework/interaction/gesture/PinchGestureDetector',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/interaction/gesture/GestureDetector'
], function Setup(oo, GestureDetector) {
    var ts = GestureDetector.TransitionState;

    var MIN_DISTANCE = 35;
    /**
     * This class defines detector for detecting Pinching gesture.
     *
     * @name sap.viz.mvc.PinchGestureDetector
     * @class
     * @augments sap.viz.mvc.GestureDetector
     */
    var PinchGestureDetector = function() {
        PinchGestureDetector.superclass.constructor.apply(this, arguments);
        this._origDistance = 1;
        this._currDistance = 1;
        this._startWhen = 0;
        this._stopWhen = 0;
    };
    oo.extend(PinchGestureDetector, GestureDetector);

    PinchGestureDetector.prototype._distance = function() {
        var points = [];
        for (var tId in this._grTouchTracker) {
            if (this._grTouchTracker.hasOwnProperty(tId)) {
                points.push(this._grTouchTracker[tId]);
            }
        }
        if (points.length < 2){
            return 0;
        }
        var dx = points[1].x - points[0].x;
        var dy = points[1].y - points[0].y;
        return Math.sqrt(dx * dx + dy * dy);
    };

    PinchGestureDetector.prototype.doTouchBegin = function(touchStartEvent) {
        var currentNumOfTouches = this.totalTouches();
        if (this.state === ts.Possible) {
            if (currentNumOfTouches === 2) {
                var twoTouchDistance = this._distance();
                if (twoTouchDistance > MIN_DISTANCE) {
                    this._origDistance = this._currDistance = twoTouchDistance;
                    this._startWhen = this._stopWhen = touchStartEvent.timeStamp;
                    this._touchStartPoints = [];
                    var ttracker = this._grTouchTracker;
                    for (var tId in ttracker) {
                        if (ttracker[tId] !== undefined) {
                            this._touchStartPoints.push(ttracker[tId]);
                        }
                    }
                } else {
                    this.state = ts.Failed;
                    return;
                }
            }
            // If more than 2 touches began, regard it as a failure
            else if (currentNumOfTouches > 2) {
                this.state = ts.Failed;
                return;
            }
            // If only one touch began, we can wait for another one to come.
        } else if ((this.state === ts.Began || this.state === ts.Changed)) {
            this._stopWhen = touchStartEvent.timeStamp;
            this._currDistance = this._distance();

            this.state = ts.Canceled;
            return;
        }
    };

    PinchGestureDetector.prototype.doTouchMove = function(touchMoveEvent) {
        switch (this.state) {
            case ts.Possible:
                if (this.totalTouches() === 2) {
                    this._stopWhen = touchMoveEvent.timeStamp;
                    this._currDistance = this._distance();

                    var scale = this.scale();
                    if (scale > 1.05 || scale < 0.95) {
                        this.state = ts.Began;
                    }
                }
                break;
            case ts.Began:
                if (Math.abs(this._origDistance - this._distance()) > 10) {
                    this._currDistance = this._distance();
                    this._stopWhen = touchMoveEvent.timeStamp;
                    this.state = ts.Changed;
                }
                break;
            case ts.Changed:
                
                this._currDistance = this._distance();
                this._stopWhen = touchMoveEvent.timeStamp;
                this.state = ts.Changed;

                break;
        }
    };

    PinchGestureDetector.prototype.doTouchEnd = function(touchEndEvent) {
        if (this.state === ts.Began || this.state === ts.Changed) {
            if (this.totalTouches() === 0) {
                this._stopWhen = touchEndEvent.timeStamp;
                this._currDistance = this._distance();
                this.state = ts.Ended;
            } else {
                this._stopWhen = touchEndEvent.timeStamp;
                this._currDistance = this._distance();
                this.state = ts.Canceled;
            }
          
        } else if (this.state === ts.Possible) {
            this.state = ts.Failed;
        }
    };

    PinchGestureDetector.prototype.doTouchCancel = function(touchCancelEvent) {
        if (this.state === ts.Began || this.state === ts.Changed) {
            this._stopWhen = touchCancelEvent.timeStamp;
            this._currDistance = this._distance();
            this.state = ts.Canceled;
        } else if (this.state === ts.Possible) {
            this.state = ts.Failed;
        }
    };

    /**
     * The current scale of the pinching gesture
     *
     *
     * @name sap.viz.mvc.PinchGestureDetector#scale
     * @function
     * @return {Number}
     */
    PinchGestureDetector.prototype.scale = function() {
        return this._currDistance / this._origDistance;
    };

    /**
     * The current velocity of the pinching gesture
     *
     *
     * @name sap.viz.mvc.PinchGestureDetector#velocity
     * @function
     * @return {Number}
     */
    PinchGestureDetector.prototype.velocity = function() {
        var duration = this._startWhen - this._stopWhen;
        if (duration) {
            return Math.abs((this._currDistance - this._origDistance)) * 1000 / duration;
        } else {
            return 0;
        }
    };

    PinchGestureDetector.prototype.reset = function() {
        PinchGestureDetector.superclass.reset.apply(this, arguments);
        this._origDistance = 1;
        this._currDistance = 1;
        this._startWhen = 0;
        this._stopWhen = 0;
    };
    return PinchGestureDetector;
});
define('sap/viz/framework/interaction/gesture/TouchChangeGestureDetector',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/interaction/gesture/GestureDetector'
], function Setup(oo, GestureDetector) {

    var ts = GestureDetector.TransitionState;

    /**
     * This class defines detector for detecting Touch change gesture. 
     *
     * @name sap.viz.mvc.TouchChangeGestureDetector
     * @class
     * @augments sap.viz.mvc.GestureDetector
     */
    var TouchChangeGestureDetector = function(touchesRequired) {
        TouchChangeGestureDetector.superclass.constructor.apply(this, arguments);
        this._lastTotalTouches = 0;
        this._changedTouchesNumber = 0;
    };
    oo.extend(TouchChangeGestureDetector, GestureDetector);


    TouchChangeGestureDetector.prototype.doTouchBegin = function() {
        var lastTouches = this._lastTotalTouches;
        this._lastTotalTouches = this.totalTouches();
        if (lastTouches !== this._lastTotalTouches){
            this._changedTouchesNumber = this._lastTotalTouches - lastTouches;
            if (lastTouches === 0){
                this.state = ts.Began;
            } else {
                this.state = ts.Changed;
            }
        }
    };

    TouchChangeGestureDetector.prototype.doTouchEnd = function() {
        if ((this.state === ts.Began || this.state === ts.Changed)) {
            var lastTouches = this._lastTotalTouches;
            this._lastTotalTouches = this.totalTouches();
            if (lastTouches !== this._lastTotalTouches){
                this._changedTouchesNumber = this._lastTotalTouches - lastTouches;
                if (this._lastTotalTouches === 0){
                    this.state = ts.Ended;
                } else {
                    this.state = ts.Changed;
                }
            }
        }
    };

    TouchChangeGestureDetector.prototype.doTouchCancel = function() {
        return this.doTouchEnd();
    };

    TouchChangeGestureDetector.prototype.changedTouchesNumber = function(){
        return this._changedTouchesNumber;
    };

    return TouchChangeGestureDetector;
});
define('sap/viz/framework/interaction/MobileMonitor',[
    'sap/viz/framework/common/util/oo',
    "sap/viz/framework/interaction/BaseMonitor",
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/interaction/gesture/PanGestureDetector",
    'sap/viz/framework/interaction/gesture/PinchGestureDetector',
    'sap/viz/framework/interaction/gesture/TouchChangeGestureDetector',
    "sap/viz/framework/interaction/gesture/GestureDetector",
    "sap/viz/framework/common/util/ObjectUtils"
], function(
    oo,
    BaseMonitor,
    UADetector, 
    PanGestureDetector, 
    PinchGestureDetector,
    TouchChangeGestureDetector,
    GestureDetector, 
    ObjectUtils) {

    var TRANSITION_STATE = GestureDetector.TransitionState;
    var MIN_PAN_DISTANCE = 5 ;
    var types = [
        "click", "hover", "down", "up",
        "lassostart", "lassomove", "lassoend",
        "dragstart", "dragmove", "dragend",
        'pinchstart', 'pinchmove', 'pinchend',
        "touchchange"
    ];

    var MobileMonitor = function(eventLayer) {
        this._dispatch = d3.dispatch.apply(this, types);
        this._isMobile = true;
        this._props = {
            "enableClick": true,
            "enableHover": false,
            "enableDown": true,
            "enableUp": true,
            "enableLasso": true,
            "enableDrag": true,
            "enablePinch": true
        };
        this._eventLayer = null;
        this._gestureDetectors = [];
        this.registerEvent(eventLayer);
        this._startPoint = null;
        this._focusTarget = null;
        this._status = "standby";
    };

    oo.extend(MobileMonitor, BaseMonitor);

    MobileMonitor.getMonitorEventTypes = MobileMonitor.prototype.getMonitorEventTypes = function() {
        return types;
    };


    MobileMonitor.prototype.registerEvent = function(eventLayer) {
        this._eventLayer = eventLayer;

        var detector = new PanGestureDetector();
        detector.addGestureAction(this._panHandler.bind(this));
        this.addGestureDetector(detector);

        detector = new PinchGestureDetector();
        detector.addGestureAction(this._pinchhandler.bind(this));
        this.addGestureDetector(detector);

        detector = new TouchChangeGestureDetector();
        detector.addGestureAction(this._touchChangeHandler.bind(this));
        this.addGestureDetector(detector);

        var touchHandler = this._touchHandler.bind(this);
        if (UADetector.isWindowsSurface()) {
            this._eventLayer.on("pointerdown.monitor", touchHandler)
                .on("pointermove.monitor", touchHandler)
                .on("pointerup.monitor", touchHandler)
                .on("pointercancel.monitor", touchHandler)
                .on("pointerleave.monitor", touchHandler); // "pointerleave" event is a must for windows surface.
        } else {
            this._eventLayer.on("touchstart.monitor", touchHandler)
                .on("touchmove.monitor", touchHandler)
                .on("touchend.monitor", touchHandler)
                .on("touchcancel.monitor", touchHandler);
        }
        return this;
    };

    MobileMonitor.prototype.addGestureDetector = function(gd) {
        if (gd instanceof GestureDetector) {
            gd.enable(true);
            this._gestureDetectors.push(gd);
        }
    };

    MobileMonitor.prototype.destroy = function() {
        MobileMonitor.superclass.destroy.apply(this);
        var eventLayer = this._eventLayer;
        this._eventLayer = null;
        if (eventLayer) {
            if (UADetector.isWindowsSurface()) {
                eventLayer.on("pointerdown.monitor", null)
                    .on("pointermove.monitor", null)
                    .on("pointerup.monitor", null)
                    .on("pointercancel.monitor", null)
                    .on("pointerleave.monitor", null);
            } else {
                eventLayer.on("touchstart.monitor", null)
                    .on("touchmove.monitor", null)
                    .on("touchend.monitor", null)
                    .on("touchcancel.monitor", null);
            }
        }
        this._dispatch = null;
        this._props = null;
        this._startPoint = null;
        this._focusTarget = null;
        this._status = null;
        this._gestureDetectors = null;
    };

    MobileMonitor.prototype.getOriginalEvent = function() {
        return this._originalEvent;
    };


    MobileMonitor.prototype._touchHandler = function() {

        function getCurrentEvent() {
            if (d3.event) {
                return d3.event;
            } else {
                return window.event;
            }
        }

        function pointEvent2TouchEvent(event) {
            if (event.type === "pointerdown" || event.type === "pointermove" ||
                event.type === "pointerup" || event.type === "pointercancel" ||
                event.type === "pointerleave") {

                var touch = {
                    clientX: event.clientX,
                    clientY: event.clientY,
                    pageX: event.pageX,
                    pageY: event.pageY,
                    screenX: event.screenX,
                    screenY: event.screenY,
                    identifier: event.pointerId,
                    target: event.target
                };
                event.touches = [touch];
                event.changedTouches = [touch];
                event.targetTouches = [touch];
            }
        }

        function handleGestureDetect(grs, origTouchEvent) {
            for (var i = 0, gd, len = grs.length; i < len; i++) {
                gd = grs[i];
                switch (origTouchEvent.type) {
                    case 'pointerdown':
                    case 'touchstart':
                        gd.touchBegin(origTouchEvent);
                        break;
                    case 'pointermove':
                    case 'touchmove':
                        gd.touchMove(origTouchEvent);
                        break;
                    case 'pointerup':
                    case 'touchend':
                    case 'pointerleave':
                        gd.touchEnd(origTouchEvent);
                        break;
                    case 'pointercancel':
                    case 'touchcancel':
                        gd.touchCancel(origTouchEvent);
                        break;
                }
            }
        }

        var originalEvent = getCurrentEvent();
        this._originalEvent = originalEvent;
        pointEvent2TouchEvent(originalEvent);
        handleGestureDetect(this._gestureDetectors, originalEvent);
    };

    function onChartArea(target, eventLayer) {
        if (!target || !target.getAttribute) {
            return false;
        }
        if (target === eventLayer) {
            return true;
        } else if (target.parentNode) {
            return onChartArea(target.parentNode, eventLayer);
        }
        return false;
    }

    function distance(p1, p2) {
        var dx = p1.x - p2.x;
        var dy = p1.y - p2.y;
        return Math.sqrt(dx * dx + dy * dy);
    }

    MobileMonitor.prototype._panHandler = function(go) {
        var status = this._status;
        var currentPoint = go.globalLocOfTouchPoints();
        // The elementFromPoint() method of the Document interface returns
        // the topmost element at the specified coordinates.
        var currentTarget = document.elementFromPoint(currentPoint.x, currentPoint.y);
        switch (go.state) {
            case TRANSITION_STATE.Began:
                if (status === "lasso" || status === "drag") {
                    this._fireEvent(status + "end", {
                        point: currentPoint
                    });
                }

                if (this._startPoint && this._focusTarget) {
                    this._fireEvent("up", {
                        point: this._startPoint,
                        target: this._focusTarget
                    });
                }
                this._lastPoint = this._startPoint = currentPoint;
                this._focusTarget = currentTarget;

                this._status = "focus";
                this._fireEvent("hover", {
                    point: currentPoint,
                    target: currentTarget
                });
                this._fireEvent("down", {
                    point: currentPoint,
                    target: currentTarget
                });
                break;
            case TRANSITION_STATE.Changed:
                if (status === "standby") {
                    return;
                }

                var eventType = this._props.enableLasso && !UADetector.isWindowsPhone() && go.isLongPress() ?
                    "lasso" : "drag";
                if (UADetector.isWindowsSurface() && eventType === "drag" && this.getOriginalEvent()
                    .pointerType === "mouse") {
                    return;
                }
                switch (status) {
                    case "focus":
                        this._status = eventType;
                        this._fireEvent("up", {
                            point: this._startPoint,
                            target: this._focusTarget
                        });
                        this._fireEvent(eventType + "start", {
                            point: this._startPoint,
                            target: currentTarget
                        });
                        this._fireEvent(eventType + "move", {
                            point: currentPoint,
                            target: currentTarget
                        });
                        
                        break;
                    case "lasso":
                    case "drag":
                        if (!onChartArea(currentTarget, this._eventLayer.node())) {
                            this._fireEvent(status + "end", {
                                point: currentPoint
                            });
                            this.resetStatus();
                        } else {
                            var eEvent = this.getOriginalEvent();
                            //some move event cannot be prevented. For these "moved" case, we cannot triger inner move.
                            if (eEvent.cancelable) {
                                // To improve performance, ignore too close movings
                                if (distance(currentPoint, this._lastPoint) > MIN_PAN_DISTANCE) {
                                    this._fireEvent(status + "move", {
                                        point: currentPoint,
                                        target: currentTarget
                                    });
                                    this._lastPoint = currentPoint;
                                } else {
                                    //since we use "distance" to ignore some movings, we have to prevent
                                    //"interval" original events because these events cause page scroll, 
                                    //and we cannot prevent scrolling page in "touchmove" event handler.
                                    //We have to prevent them now, or plot and page may scroll together.
                                    eEvent.preventDefault();
                                }
                            }
                        }
                        break;
                }
                break;
            case TRANSITION_STATE.Ended:
                switch (status) {
                    case "focus":
                        this._fireEvent("up", {
                            point: this._startPoint,
                            target: this._focusTarget
                        });
                        this._fireEvent("click", {
                            point: this._startPoint,
                            target: this._focusTarget
                        });
                        break;
                    case "lasso":
                    case "drag":
                        if(!onChartArea(currentTarget, this._eventLayer.node())){
                            this._fireEvent(status + "end", {
                                point: currentPoint
                            });
                        }else{
                            this._fireEvent(status + "end", {
                                point: currentPoint,
                                target: currentTarget
                            });
                        }
                        break;
                }
                this.resetStatus();
                break;
            case TRANSITION_STATE.Canceled:
            case TRANSITION_STATE.Failed:
                switch (status) {
                    case "focus":
                        this._fireEvent("up", {
                            point: this._startPoint,
                            target: this._focusTarget
                        });
                        break;
                    case "lasso":
                    case "drag":
                        this._fireEvent(status + "end", {
                            point: currentPoint,
                            target: currentTarget
                        });
                        break;
                }
                this.resetStatus();
                break;
        }
        if (status === "lasso") {
            var oEvent = this.getOriginalEvent();
            if (oEvent.cancelable) {
                //some move event cannot be prevented. It is not a bug and
                //the check is just to prevent error messages.
                oEvent.preventDefault();
            }
        }
    };

    MobileMonitor.prototype._touchChangeHandler = function(go) {
        var totalTouchesNumber = go.totalTouches();
        this._fireEvent("touchchange", {
            point: go.globalLocOfTouchPoints(),
            totalTouchesNumber: totalTouchesNumber,
            changedTouchesNumber: go.changedTouchesNumber()
        });
        if (totalTouchesNumber > 1){
            this.getOriginalEvent().preventDefault();
        }
    };
    
    var PINCH_CEIL_RATIO = 0.95, PINCH_FLOOR_RATIO = 1.05;
    MobileMonitor.prototype._pinchhandler = function(gesture) {
        var centerPoint = gesture.globalLocOfGesture();
        var currentScale = Math.round(gesture.scale() * 100) / 100;
        function processEvent(eventName){
            var ratio = currentScale / this._lastScale;
            if( ratio > PINCH_FLOOR_RATIO || ratio < PINCH_CEIL_RATIO){
                this._fireEvent(eventName, {
                    point: centerPoint,
                    scale: currentScale
                });
                this._lastScale = currentScale;
            }
        }
        switch (gesture.state) {
            case TRANSITION_STATE.Began:
                this._fireEvent("pinchstart", {
                    point: centerPoint,
                    scale: currentScale
                });
                this._lastScale = currentScale;
                break;
            case TRANSITION_STATE.Changed:
                processEvent.call(this, "pinchmove");
                break;
            default:
                processEvent.call(this, "pinchend");
                break;
        }
        
        this.getOriginalEvent().preventDefault();
    };

    function getFlagCategoryByEventType(type) {
        return "enable" + type.substring(0, 1).toUpperCase() + type.substring(1);
    }

    MobileMonitor.prototype._fireEvent = function(type, data) {
        var tempEvent = {
            name: type,
            data: {
                point: data.point,
                pointToChart: BaseMonitor.getRelativeCoordinate(data.point, this._eventLayer.node()),
                target: this._eventLayer.node(),
                originalEvent: this.getOriginalEvent()
            }
        };
        ObjectUtils.extend(true, tempEvent.data, data);
        if (["click", "hover", "down", "up"].indexOf(type) > -1) {
            var flagCategory = getFlagCategoryByEventType(type); //"focus" -> "enableFocus"
            if (this._props[flagCategory]) {
                this._dispatch[type](tempEvent);
            }
        } else if (["dragstart", "dragmove", "dragend"].indexOf(type) > -1) {
            if (this._props.enableDrag) {
                this._dispatch[type](tempEvent);
            }
        } else if (['pinchstart', 'pinchmove', 'pinchend'].indexOf(type) > -1) {
            if (this._props.enablePinch) {
                this._dispatch[type](tempEvent);
            }
        } else {
            this._dispatch[type](tempEvent);
        }
    };

    return MobileMonitor;
});
define('sap/viz/framework/common/util/EventDispatch',[], function() {
    var EventDispatch = function() {
        this._edp_dispatch = d3.dispatch.apply(d3, arguments);
        this._copyEventTypes(this._edp_dispatch, false);
    };

    EventDispatch.prototype._copyEventTypes = function(d3Dispatch, copyToLocalDispatch) {
        for (var newType in d3Dispatch) {
            if (d3Dispatch.hasOwnProperty(newType)) {
                this[newType] = d3Dispatch[newType];
                if (copyToLocalDispatch) {
                    this._edp_dispatch[newType] = d3Dispatch[newType];
                }
            }
        }
    };

    EventDispatch.prototype.addEventTypes = function() {
        var tempDispatch = d3.dispatch.apply(d3, arguments);
        this._copyEventTypes(tempDispatch, true);
        return this;
    };

    EventDispatch.prototype.on = function(type, listenFn) {
        return this._edp_dispatch.on(type, listenFn);
    };

    EventDispatch.prototype.destroy = function() {
        var dis = this._edp_dispatch;
        if (dis) {
            for (var i in dis) {
                if (dis.hasOwnProperty(i)) {
                    dis.on(i, null);
                }
            }
        }
        this._edp_dispatch = null;
    };

    return EventDispatch;
});
define('sap/viz/framework/interaction/ActionItem',[
    "sap/viz/framework/interaction/Constants",
    "sap/viz/framework/common/util/TypeUtils"
], function(Constants, TypeUtils) {
    var DEFAULT_CHART_TYPE_KEY = Constants.BEHAVIOR.DEFAULT_CHART_TYPE_KEY;
    var ALL_TARGETS = Constants.BEHAVIOR.ALL_TARGETS;

    var ActionItem = function(option) {
        this._trigger = null;
        this._handlers = null;
        if (option) {
            var trigger = option.triggerEvent;
            if (trigger) {
                
                if (option.destroy && TypeUtils.isFunction(option.destroy)) {
                    trigger.onBeforeUnregistered = option.destroy;
                }
                this.setTrigger(trigger);
            }
            if (option.handler) {
                this.setHandler(option.handler);
            }
        }
    };

    ActionItem.prototype.clone = function() {
        var clone = new ActionItem();
        clone.setTrigger(this._trigger);
        this._handlers.forEach(function(e) {
            clone.addHandler(e);
        });
        return clone;
    };

    function turnToArray(elem) {
        if (TypeUtils.isArray(elem)) {
            return elem;
        } else if (TypeUtils.isString(elem)) {
            return [elem];
        } else {
            return null;
        }
    }

    ActionItem.prototype.setTrigger = function(trigger) {
        var current = this._trigger;
        if (!current) {
            current = (this._trigger = {});
        }
        current.name = trigger.name;
        current.excludeTargets = turnToArray(trigger.excludeTargets);

        [{
            "field": "targets",
            "defaultValue": ALL_TARGETS
        }, {
            "field": "supportedChartTypes",
            "defaultValue": DEFAULT_CHART_TYPE_KEY
        }].forEach(function(e) {
            var temp = trigger[e.field];
            if (temp == null || temp === e.defaultValue) {
                current[e.field] = e.defaultValue;
            } else {
                current[e.field] = turnToArray(temp);
            }
        });

        ["onAfterRegistered", "onBeforeUnregistered"].forEach(function(e) {
            current[e] = TypeUtils.isFunction(trigger[e]) ? trigger[e] : null;
        });
        return this;
    };

    ActionItem.prototype.getTrigger = function() {
        return this._trigger;
    };

    ActionItem.prototype.setHandler = function(handler) {
        this.removeHandler();
        this.addHandler(handler);
        return this;
    };

    ActionItem.prototype.addHandler = function(handler) {
        if (!TypeUtils.isFunction(handler)) {
            return this;
        }
        if (!this._handlers) {
            this._handlers = [];
        }
        
        this._handlers.push(handler);
        return this;
    };

    ActionItem.prototype.removeHandler = function(handler) {
        if (arguments.length) {
            var index = this._handlers.indexOf(handler);
            if (index > -1) {
                this._handlers.splice(index, 1);
            }
        } else {
            this._handlers = null;
        }
        return this;
    };

    ActionItem.prototype.getHandler = function() {
        return this._handlers;
    };

    ActionItem.prototype.destroy = function() {
        this._trigger = null;
        this._handlers = null;
    };

    return ActionItem;

});
define('sap/viz/framework/interaction/ActionItemAdapter',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/oo',
    "sap/viz/framework/interaction/ActionItem"
], function(TypeUtils, oo, ActionItem) {
    
    var OBJECT_KEY_SUPPORTED_CHART_TYPES = "supportedChartTypes";
    var ActionItemAdapter = function(behavior, event) {
        this._behavior = behavior;
        this._trigger = event;
        
        this.initHandler(event.handler);
        this._actionId = event.id;
        
        var handler = this._handler;
        var triggerEvent = event.triggerEvent;
        for (var i = 0; i < triggerEvent.length; i++) {
            
            var currentEvent = {
                id: this._actionId + "." + triggerEvent[i].method,
                triggerEvent: null,
                handler: null
            };
            
            currentEvent.triggerEvent = triggerEvent[i];
            
            if (event[OBJECT_KEY_SUPPORTED_CHART_TYPES] != null && 
                triggerEvent[i][OBJECT_KEY_SUPPORTED_CHART_TYPES] == null) {
                currentEvent.triggerEvent[OBJECT_KEY_SUPPORTED_CHART_TYPES] = event[OBJECT_KEY_SUPPORTED_CHART_TYPES];
            }
            
            ["onAfterRegistered", "onBeforeUnregistered"].forEach(function(e) {
                if (triggerEvent[i][e]) {
                    currentEvent[e] = triggerEvent[i][e];
                    currentEvent.triggerEvent[e] = null;
                    delete currentEvent.triggerEvent[e];
                }
            });
            
            currentEvent.handler = handler[triggerEvent[i].method].bind(handler);
            
            var action = new ActionItem(currentEvent);
            behavior.addAction(currentEvent.id, action);
        }
    };
    
    oo.extend(ActionItemAdapter, ActionItem);
    
    ActionItemAdapter.prototype.initHandler = function(handler) {
        this._handler = (TypeUtils.isFunction(handler)) ? new handler() : handler;
    };
    
    ActionItemAdapter.prototype.clone = function(behavior) {
        
        var trigger = {};
        
        for (var name in this._trigger) {
            if (this._trigger.hasOwnProperty(name)) {

                if (TypeUtils.isArray(this._trigger[name])) {
                    trigger[name] = this._trigger[name].slice();
                } else {
                    trigger[name] = this._trigger[name];
                }
            }
        }
        
        var adapter = new ActionItemAdapter(behavior, trigger);
        return adapter;
    };
    
    ActionItemAdapter.prototype.removeActionByMethodName = function(methodName) {
        var actions = this._behavior.getAllActions();
        
        for (var key in actions) {
            if (actions.hasOwnProperty(key)) {
                if (key.indexOf(this._actionId + ".") === 0) {
                    var method = key.split(".")[1];
                    if (method == null) {
                        continue;
                    }
                    
                    if (method !== methodName) {
                        continue;
                    }
                    
                    delete actions[key];
                    
                    break;
                }
            }
        }
        
        var triggerEvent = this._trigger.triggerEvent;
        
        for (var i = 0; i < triggerEvent.length; i++) {
            
            if (triggerEvent[i].method === methodName) {
                triggerEvent.splice(i, 1);
            }
        }
    };
    
    /**
     * 
     * @param trigger {Object / Array} {
     *      name: {String}, required
     *      method: {String}, required
     *      targets: {Object}, optional
     *      excludeTargets: {Object} optional
     *      supportedChartType: {Array} optional
     * }
     */
    ActionItemAdapter.prototype.setTrigger = function(triggers) {
        
        if (!TypeUtils.isArray(triggers)) {
            triggers = [triggers];
        }
        
        var actions = this._behavior.getAllActions();
        var deletedId = [];
        for (var key in actions) {
            if (actions.hasOwnProperty(key)) {
                
                if (key.indexOf(this._actionId + ".") !== 0) {
                    continue;
                }
                deletedId.push(key);
            }
        }
        deletedId.forEach(function(id) {
            this.removeActionById(id);
        }, this._behavior);
        
        this._trigger = triggers;
        
        for (var i = 0; i < triggers.length; i++) {
            
            var trigger = triggers[i];
            
            if (trigger.name == null || trigger.method == null) {
                throw "name / method attribute is required";
            }
            
            var method = trigger.method;
            
            trigger.id = this._actionId + "." + method;
            
            trigger.triggerEvent = trigger;
            
            trigger.handler = this._handler[method].bind(this._handler);
            
            this._behavior.addAction(trigger.id, new ActionItem(trigger));
        }
    };
    
    ActionItemAdapter.prototype.setHandler = function(handler) {

        this._trigger.handler = handler;
        this.initHandler(handler);
        
        var actions = this._behavior.getAllActions();
        
        for (var key in actions) {
            if (actions.hasOwnProperty(key)) {
                if (key.indexOf(this._actionId + ".") === 0) {
                    var method = key.split(".")[1];
                    if (method == null) {
                        continue;
                    }
                    actions[key].setHandler(this._handler[method].bind(this._handler));
                }
            }
        }
    };
    
    ActionItemAdapter.prototype.getHandler = function() {
        return this._handler;
    };
    
    return ActionItemAdapter;

});
define('sap/viz/framework/interaction/ActionItemUtil',[
    "sap/viz/framework/interaction/ActionItem",
    "sap/viz/framework/interaction/ActionItemAdapter",
    "sap/viz/framework/common/util/TypeUtils",
    'sap/viz/framework/common/util/ObjectUtils'
], function(ActionItem, ActionItemAdapter, TypeUtils, ObjectUtils) {
    
    
    function requiredCheck(props, target) {
        
        props.forEach(function(name) {
            if (target[name] == null) {
                throw name + " must be defined.";
            }
        });
    }
    
    var validConfig = function(def) {
        
        requiredCheck(["id", "handler", "triggerEvent"], def);
        
        var triggerEvent = def.triggerEvent;
        
        if (!TypeUtils.isArray(triggerEvent)) {
            throw "triggerEvent must be an array.";
        }
        
        triggerEvent.forEach(function(e) {
            requiredCheck(["name", "method"], e);
        });
        
    };
    
    function createActionItems(behavior, e) {
        
        validConfig(e);
        
        var eventDef = ObjectUtils.extend(true, {}, e);
        var id = eventDef.id;
        var adapter = new ActionItemAdapter(behavior, eventDef);
        behavior.addAction(id, adapter);
        
    }
    
    return {
        requiredCheck: requiredCheck,
        validConfig: validConfig,
        createActionItems: createActionItems
    };

});
define('sap/viz/framework/interaction/Behavior',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/EventDispatch",
    "sap/viz/framework/interaction/ActionItem",
    "sap/viz/framework/interaction/ActionItemUtil"
], function(TypeUtils, EventDispatch, ActionItem, ActionItemUtil) {

    var Behavior = function() {
        this._actionItems = {};
        this._evtDisp = null;
    };

    /**
     *@this {Behavior}
     *@returns {Object} a cloned behavior object.
     */
    Behavior.prototype.clone = function() {
        var clone = new Behavior();
        for (var key in this._actionItems) {
            if (this._actionItems.hasOwnProperty(key)) {
                // for default 'xx.xx' action, it will clone by ActionItemAdapter
                // if (key.indexOf(".") != -1) {
                //     continue;
                // }
                var action = this._actionItems[key];
                if(!clone.getActionById(key)){
                    // clone the ActionItemAdapter and actionItem
                    clone.addAction(key, action.clone(clone));
                }
            }
        }
        return clone;
    };
    
    Behavior.prototype.addActionByDef = function(actionDef) {
        
        if (actionDef.handlerType === "class") {
            ActionItemUtil.createActionItems(this, actionDef);
        } else {
            this.addAction(actionDef.id, new ActionItem(actionDef));
        }
    };
    
    Behavior.prototype.addAction = function(id, action) {
        if (action instanceof ActionItem) {
            var current = this._actionItems[id];
            if (current && current.getTrigger().onBeforeUnregistered) {
                current.getTrigger().onBeforeUnregistered.call(this);
            }
            this._actionItems[id] = action;
            if (action.getTrigger().onAfterRegistered) {
                action.getTrigger().onAfterRegistered.call(this);
            }
        }
        return this;
    };

    Behavior.prototype.getActionById = function(id) {
        if (this._actionItems[id]) {
            return this._actionItems[id];
        }
        return null;
    };

    Behavior.prototype.removeActionById = function(id) {
        var current = this._actionItems[id];
        if (current && current.getTrigger().onBeforeUnregistered) {
            current.getTrigger().onBeforeUnregistered.call(this);
        }
        delete this._actionItems[id];
        return this;
    };

    Behavior.prototype.getAllActions = function(id) {
        return this._actionItems;
    };

    /**
     *@param {String} key the trigger's id to be triggered.
     *@param {Object} event the event data.
     *@param {Object} service the interaction service object.
     *@this {Behavior}
     *@returns {Object} the behavior object itself.
     */
    Behavior.prototype.trigger = function(key, event, service) {
        var current = this._actionItems[key];
        if (!current) {
            return;
        }
        var ret;
        
        // expose the key for cutomiztion<custom render> to determine
        // which render is triggered.
        current.getHandler().forEach(function(handler) {
            ret = handler(event, service, key);
        }, this);
        
        return ret;
    };

    Behavior.prototype.destroy = function() {
        for (var key in this._actionItems) {
            if (this._actionItems.hasOwnProperty(key)) {
                this.removeActionById(key);
            }
        }
        this._actionItems = null;
        this._evtDisp = null;
    };

    return Behavior;
});

define('sap/viz/framework/interaction/BehaviorFactory',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/interaction/Behavior",
    "sap/viz/framework/interaction/ActionItem"
], function(TypeUtils, Behavior, ActionItem, ActionItemUtil) {

    
    function configBehavior(behavior, configs) {
        configs.forEach(function(c) {
            if (TypeUtils.isArray(c)) {
                c.forEach(function(e) {
                    behavior.addActionByDef(e);
                });
            }
        });
    }

    var BehaviorFactory = {
        buildBehavior: function(configs, base) {
            var behavior = (base instanceof Behavior) ? base : new Behavior();
            var c = configs;
            if (!TypeUtils.isArray(configs)) {
                c = [configs];
            }
            configBehavior(behavior, c);
            return behavior;
        }
    };

    return BehaviorFactory;
});
define('sap/viz/framework/interaction/BehaviorManager',[
    "sap/viz/framework/interaction/Behavior",
    "sap/viz/framework/common/util/ObjectUtils",
    "sap/viz/framework/interaction/Constants",
    "sap/viz/framework/interaction/BehaviorFactory",
], function(Behavior,
        ObjectUtils,
        Constants,
        BehaviorFactory) {

    var BehaviorManager = {
        _map: {},
        _extTypes:[],
        get: function(id, defaultBehavior) {
            if (id && this._map[id]) {
                this._map[id].updated = false;
                return this._map[id].bhr;
            } else {
                return arguments.length === 2? defaultBehavior : new Behavior();
            }
        },
        register: function(id, bhr) {
            if (bhr instanceof Behavior) {
                if (!this._map[id] || !this._map[id].bhr || !this._map[id].bhr._actionItems) {
                    this._map[id] = {};
                    this._map[id].bhr = bhr;
                } else {
                    if (this._map[id].bhr !== bhr) {
                        ObjectUtils.extend(this._map[id].bhr._actionItems, bhr._actionItems);
                    }
                }
                this._map[id].updated = true;

            }
            return this;
        },
        registerAll:function(defBehavior, sFinBehavior){
          
            sFinBehavior = sFinBehavior || defBehavior;
            
            this.register(Constants.BEHAVIOR.DEFAULT_BEHAVIOR_ID,
                    BehaviorFactory.buildBehavior([defBehavior]));
            for(var i = 0; i < this._extTypes.length; ++i){
                this.register(this._extTypes[i], BehaviorFactory.buildBehavior([defBehavior]));
            }
            this.register(Constants.BEHAVIOR.NOHOVER_BEHAVIOR_ID,
                   BehaviorFactory.buildBehavior([sFinBehavior]));  
        },
        addBehaviorType: function(type){
            this._extTypes.push(type);
        },
        unregister: function(id) {
            if (this._map[id]) {
                this._map[id].bhr.destroy();
                delete this._map[id];
            }
            return this;
        },
        hasUpdate: function(id) {
            if (this._map[id]) {
                return this._map[id].updated;
            } else {
                return false;
            }
        },
        has : function(id) {
            if (this._map[id]) {
                return true;
            } else {
                return false;
            }
        }
    };

    return BehaviorManager;

});
define('sap/viz/framework/common/util/SVG',[],function() {
    var svgNS = 'http://www.w3.org/2000/svg';

    //Limit the trigger condition to 10 points in one pixel by default. 
    //The number 10 is judged by experience.
    var DEFAULT_DENSITY_LIMITATION = 10;
    var DEFAULT_RANGE_UNIT = 1;
    var DEFAULT_TARGET_LINE_WIDTH = 2;
    var DEFAULT_LINE_WIDTH = 2;

    function outputPath(points) {
        var d = "";
        var restart = true;
        for (var i = 0; i < points.length; i++) {
            if (!points[i]) {
                restart = true;
            } else {
                d = d && !restart ? d + "L" : d + "M";

                d += points[i][0] + "," + points[i][1];
                restart = false;
            }
        }
        return d;
    }

    function simplifyPoints(points, options) {
        if (points.some(function(e){
            return !e;
        })){
            return _simplifyPointsWithNull(points, options);
        } else {
            return _simplifyPoints(points, options);
        }
    }

    //This algorithm has a strong limititation that points must be sorted by position first.
    function _simplifyPoints(points, options) {
        var length = points.length;
        if (length < 2){
            return points;
        }
        var isHorizontal = options.isHorizontal;
        var positionField, valueField;
        if (isHorizontal){
            positionField = 1;
            valueField = 0;
        } else {
            positionField = 0;
            valueField = 1;
        }
        var point0 = points[0];
        var point0Position = point0[positionField];
        var size = Math.abs(point0Position -  points[length - 1][positionField]);
        var density = +options.density;
        if (isNaN(density)){
            density = DEFAULT_DENSITY_LIMITATION;
        }
        var rangeUnit = +options.rangeUnit;
        if (isNaN(rangeUnit)){
            rangeUnit = DEFAULT_RANGE_UNIT;
        }
        if (size === 0 || length / size * rangeUnit <= density){
            return points;
        }
        var getCeilFn = (function(rangeUnit) {
            return function(value) {
                return Math.ceil(value / rangeUnit) * rangeUnit;
            };
        })(rangeUnit);
        var point0Value = point0[valueField];
        var simplifiedPoints = [];
        var positionCeil = getCeilFn(point0Position);
        var startValue = point0Value, 
            endValue = point0Value, 
            minValue = point0Value, 
            maxValue = point0Value;
        var newPoints;
        var newPointsConfig = {
            isHorizontal : isHorizontal,
            position : null,
            startValue : null,
            endValue : null,
            minValue : null,
            maxValue : null
        };
        for (var i = 0, point, value, position, prePosition, seperator; i < length; ++i){
            point = points[i];
            value = point[valueField];
            position = point[positionField];
            if (position > positionCeil){
                seperator = endValue;
                if (prePosition){
                    seperator += (value - endValue) / (position - prePosition) * 
                        (getCeilFn(position) - rangeUnit - prePosition);
                }
                newPointsConfig.position = positionCeil;
                newPointsConfig.startValue = startValue;
                newPointsConfig.endValue = seperator;
                newPointsConfig.minValue = minValue;
                newPointsConfig.maxValue = maxValue;
                newPoints = getPoints(newPointsConfig);
                simplifiedPoints = simplifiedPoints.concat(newPoints);
                positionCeil = getCeilFn(position);
                startValue = seperator;
                minValue = value;
                maxValue = value;
                endValue = value;
            } else {
                minValue = Math.min(minValue, value);
                maxValue = Math.max(maxValue, value);
                endValue = value;
                if (i === length - 1){
                    newPointsConfig.position = positionCeil;
                    newPointsConfig.startValue = startValue;
                    newPointsConfig.endValue = endValue;
                    newPointsConfig.minValue = minValue;
                    newPointsConfig.maxValue = maxValue;
                    newPoints = getPoints(newPointsConfig);
                    simplifiedPoints = simplifiedPoints.concat(newPoints);
                }
            }
            prePosition = position;
        }
        return simplifiedPoints;
    }

    function _simplifyPointsWithNull(points, isHorizontal) {
        //FIXME: Simplify with no value in the array could cost more and have a more complex logic.
        //       Leave it for future delivery.
        return points;
    }

    function getPoints(options){
        var positionField, valueField;
        if (options.isHorizontal){
            positionField = 1;
            valueField = 0;
        } else {
            positionField = 0;
            valueField = 1;
        } 
        var points = [];
        var makePoints = (function (position, positionField, valueField, points){
            return function(values){
                values.forEach(function(value){
                    var point = [];
                    point[positionField] = position;
                    point[valueField] = value;
                    points.push(point);
                });
            };
        })(options.position, positionField, valueField, points);

        var start = options.startValue;
        var end = options.endValue;
        var min = Math.min(start, end, options.minValue);
        var max = Math.max(start, end, options.maxValue);
        var diff = 0.5;
        //Add a 0.5 pixel difference by force to make the line more smooth.
        if (min < max && max - min < diff) {
            max = min + diff;
        }
        if (max === min){
            makePoints([max]);
        } else if (
            (start === max && end === min) ||
            (start === min && end === max)){
            makePoints([start, end]);
        } else if (start === min || end === min){
            makePoints([start, max, end]);
        } else if (start === max || end === max){
            makePoints([start, min, end]);
        } else {
            makePoints([start, min, max, end]);
        }
        return points;
    }

    return {
        create: function(tagName, refNode, insert) {
            var doc = refNode ? refNode.ownerDocument : window.document;
            var ns = refNode ? refNode.namespaceURI : svgNS;
            var node = doc.createElementNS(ns, tagName);
            return refNode ? (insert ? refNode.parentNode.insertBefore(node, refNode) : refNode.appendChild(node)) :
                node;
        },
        createSVGNode: function(tagName){
            return document.createElementNS(svgNS, tagName);
        },
        simplifyPoints: simplifyPoints,
        outputPath: outputPath,
        generatePath: function(config){
            var points = config.points;
            var resPath;
            var pointCandidates = (config == null || config.isHorizontal == null) ? 
                    points : simplifyPoints(points, config);
            resPath = outputPath(pointCandidates);
            return resPath;
        },
        generateMarkerPath:function(props) {
            // TODO Maybe we can use hashmap to cache here
            var result;
            
            var temp = props.borderWidth / 2;
           
            var rxBorder, ryBorder;
            if(!props.innerBorder){
                rxBorder = props.rx + temp;
                ryBorder = props.ry + temp;
            }else{
                rxBorder = props.rx - temp;
                ryBorder = props.ry - temp;
                temp = -temp;
            }

            switch (props.type) {
                case "circle":
                    result = "M" + (-rxBorder) + ",0 A" + (rxBorder) + "," + (ryBorder) +
                        " 0 1,0 " + (rxBorder) + ",0 A";
                    result += (rxBorder) + "," + (ryBorder) + " 0 1,0 " + (-rxBorder) + ",0z";
                    break;
                case "cross":
                    result = "M" + (-rxBorder) + "," + (-props.ry / 3 - temp) + "H" + (-props.rx / 3 - temp) +
                        "V" + (-ryBorder) + "H" + (props.rx / 3 + temp);
                    result += "V" + (-props.ry / 3 - temp) + "H" + (rxBorder) + "V" + (props.ry / 3 + temp) +
                        "H" + (props.rx / 3 + temp);
                    result += "V" + (ryBorder) + "H" + (-props.rx / 3 - temp) + "V" + (props.ry / 3 + temp) +
                        "H" + (-rxBorder) + "Z";
                    break;
                case "diamond":
                    result = "M0," + (-ryBorder) + "L" + (rxBorder) + ",0" + " 0," + (ryBorder) +
                        " " + (-rxBorder) + ",0" + "Z";
                    break;
                case "square":
                    result = "M" + (-rxBorder) + "," + (-ryBorder) + "L" + (rxBorder) + ",";
                    result += (-ryBorder) + "L" + (rxBorder) + "," + (ryBorder) + "L" +
                        (-rxBorder) + "," + (ryBorder) + "Z";
                    break;
                case "rectangle":
                    result = "M" + (-rxBorder) + "," + (-props.ry/2 - temp) + "L" + (rxBorder) + ",";
                    result += (-props.ry/2 - temp) + "L" + (rxBorder) + "," + (props.ry/2 + temp) + 
                        "L" + (-rxBorder) + "," + (props.ry/2 + temp) + "Z";
                    break;
                case "triangle-down": //TODO: remove duplicate
                case "triangleDown":
                    result = "M0," + (ryBorder) + "L" + (rxBorder) + "," + (-ryBorder) + " " + 
                        (-rxBorder) + "," + (-ryBorder) + "Z";
                    break;
                case "triangle-up": //TODO: remove duplicate
                case "triangleUp":
                    result = "M0," + (-ryBorder) + "L" + (rxBorder) + "," + (ryBorder) + " " + 
                        (-rxBorder) + "," + (ryBorder) + "Z";
                    break;
                case "triangle-left": //TODO: remove duplicate
                case "triangleLeft":
                    result = "M" + -(rxBorder) + ",0L" + (rxBorder) + "," + (ryBorder) + " " + 
                        (rxBorder) + "," + (-ryBorder) + "Z";
                    break;
                case "triangle-right": //TODO: remove duplicate
                case "triangleRight":
                    result = "M" + (rxBorder) + ",0L" + -(rxBorder) + "," + (ryBorder) + " " + 
                        (-rxBorder) + "," + (-ryBorder) + "Z";
                    break;
                case "intersection":
                    result = "M" + (rxBorder) + "," + (ryBorder) + "L" + (props.rx / 3 + temp) + ",0L" +
                        (rxBorder) + "," + (-ryBorder) + "L";
                    result += (props.rx / 2 - temp) + "," + (-ryBorder) + "L0," + (-props.ry / 3 - temp) + "L" +
                        (-props.rx / 2 + temp) + "," + (-ryBorder) + "L";
                    result += -(rxBorder) + "," + (-ryBorder) + "L" + -(props.rx / 3 + temp) + ",0L" + 
                        (-rxBorder) + "," + (ryBorder) + "L";
                    result += (-props.rx / 2 + temp) + "," + (ryBorder) + "L0," + (props.ry / 3 + temp) + "L" +
                        (props.rx / 2 - temp) + "," + (ryBorder) + "Z";
                    break;
                case 'squareWithRadius':
                    var r = props.rx;
                    var radius = r - 3;
                    result = "M0," + -r + "L" + -radius + "," + -r + "Q" + -r + "," + -r + " " + -r + "," + -radius +
                        "L" + -r + "," + radius + "Q" + -r + "," + r + " " + -radius + "," + r;
                    result += "L" + radius + "," + r + "Q" + r + "," + r + " " + r + "," + radius + "L" + r + "," + -
                        radius + "Q" + r + "," + -r + " " + radius + "," + -r + "Z";
                    break;
                case "vbar":
                    result = "M" + (-props.rx / 3) + "," + (-props.ry) + "H" + (props.rx / 3) + "V" + (props.ry) + 
                        "H" + (-props.rx / 3) + "Z";
                    break;
                case "vertial-target-line":
                    result = "M" + (-DEFAULT_TARGET_LINE_WIDTH / 2) + "," + (-props.ry) + 
                        "H" + (DEFAULT_TARGET_LINE_WIDTH / 2) + "V" + (props.ry) + 
                        "H" + (-DEFAULT_TARGET_LINE_WIDTH / 2) + "Z";
                    break;
                case "horizontal-target-line":
                    result = "M" + (-props.rx) + "," + (-DEFAULT_TARGET_LINE_WIDTH / 2) + 
                        "H" + (props.rx) + "V" + (DEFAULT_TARGET_LINE_WIDTH / 2) + 
                        "H" + (-props.rx ) + "Z";
                    break;
                case "squareWithLine":
                    result = "M" + (-props.rx * 2) + "," + (-DEFAULT_LINE_WIDTH / 2) + 
                        "H" + (-rxBorder / 2) + "V" + (DEFAULT_LINE_WIDTH / 2) + 
                        "H" + (-props.rx * 2) + "Z";
                    result += "M" + (props.rx * 2) + "," + (-DEFAULT_LINE_WIDTH / 2) + 
                        "H" + (rxBorder / 2) + "V" + (DEFAULT_LINE_WIDTH / 2) + 
                        "H" + (props.rx * 2) + "Z";
                    result += "M" + (-rxBorder / 2) + ",0 A" + (rxBorder / 2) + "," + (ryBorder / 2) +
                        " 0 1,0 " + (rxBorder / 2) + ",0 A";
                    result += (rxBorder / 2) + "," + (ryBorder / 2) + " 0 1,0 " + (-rxBorder / 2) + ",0z";
                    break;
                case "line":
                    result = "M" + -(props.rx-2) + ",0 L" + (props.rx+2) + ",0";
                    break;
            }
            return result;
        },
        getTransformToElement : function(element, target){
            var result;
            if(element.getTransformToElement){
                try {
                    result = element.getTransformToElement(target);
                } catch (e) {
                }
            }else{
                var mTargetInverse;
                try {
                    mTargetInverse = target.getScreenCTM().inverse();
                } catch (e) {
                    throw "'target' CTM is not invertible.";
                }
                result = mTargetInverse.multiply(element.getScreenCTM());
            }
            result = result || {a:0, b: 0, c:0, d:0, e:0, f:0};
            return result;
        }
    };
});

define('sap/viz/framework/common/util/DataGraphics',[], function() {
    var PROP_NAME_CTX = "__data__";
    var PROP_NAME_DATA = "__extra_data__";
    var PROP_NAME_SHAPE = "__graphic_info__";
    var PROP_ADDITION_DATA = '__addition_data__';
    // Seperate the data and customizaiton
    // Make sure customizaiton will not be overridden by data.
    var PROP_NAME_CUSTOMIZATION = "__customization_info__";

    function fillContext(array) {
        var fields = array[0],
            values = array[1];
        if (Array.isArray(fields)) {
            for (var i = 0, len = fields.length; i < len; i++) {
                this[fields[i]] = values[i];
            }
        } else {
            this[fields] = values;
        }
    }

    function buildContext(data) {
        var ctx = {};
        data.forEach(fillContext, ctx);
        return ctx;
    }

    var DataGraphics = {
        buildContext: buildContext,
        setData: function(node, data) {
            node[PROP_NAME_DATA] = data;
            // // Only support to set object value, other wise no set value. Comments as it's cost PNR.
            // if(TypeUtils.isPlainObject(data)){
            //     var currentData = this.getData(node);
            //     if(currentData){
            //         for (var prop in data) {
            //             if (data.hasOwnProperty(prop)) {
            //                 currentData[prop] = data[prop];
            //             }
            //         }
            //         node[PROP_NAME_DATA] = currentData;
            //     }else{
            //     }
            // }
        },
        getData: function(node) {
            return node[PROP_NAME_DATA];
        },
        setContext: function(node, data) {
            var ctx = Array.isArray(data) ? buildContext(data) : data;
            node[PROP_NAME_CTX] = ctx;
            return ctx;
        },
        setAdditionCtx: function(node, data){
            node[PROP_ADDITION_DATA] = data;
            return data;
        },
        getAdditionCtx:function(node){
            return node[PROP_ADDITION_DATA];  
        },
        
        getContext: function(node) {
            return node[PROP_NAME_CTX];
        },
        setGraphicInfo: function(node, data) {
            node[PROP_NAME_SHAPE] = data;
        },
        getGraphicInfo: function(node) {
            return node[PROP_NAME_SHAPE];
        },
        setCustomizationInfo: function(node, data) {
            node[PROP_NAME_CUSTOMIZATION] = data;
        },
        getCustomizationInfo: function(node) {
            return node[PROP_NAME_CUSTOMIZATION];
        }
    };

    return DataGraphics;
});
define('sap/viz/framework/common/util/CSSUtils',['sap/viz/framework/common/util/UADetector',
    "sap/viz/framework/common/util/Constants"
], function Setup(UADetector,
    Constants
) {
    var CSSUtils = {
        setDOMStyle: function (DOM, styleStr) {
            //CSP Fixing
            //we cannot use DOM.setAttribute(styleStr), becasue it breaks CSP
            if (styleStr.length > 0) {
                var styleArray = styleStr.split(Constants.STYLE.SEMICOLON);
                for (var i = 0; i < styleArray.length; i++) {
                    if (styleArray[i].length > 0) {
                        var styleItemArray = styleArray[i].split(Constants.STYLE.COLON);
                        if (styleItemArray.length > 1) {
                            DOM.style[styleItemArray[0].trim()] = styleItemArray[1].trim();
                        }
                    }
                }
            }
        }
    };
    return CSSUtils;
});
define('sap/viz/framework/interaction/ActionLayer',[
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/SVG",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/framework/common/util/FunctionUtils",
    'sap/viz/framework/common/util/CSSUtils',
    'sap/viz/framework/common/util/ObjectUtils'
], function(
    DOM,
    SVG,
    DataGraphics,
    FunctionUtils,
    CSSUtils,
    ObjectUtils
) {

    var CSS_CLASS_ACTION_LAYER = "v-m-action-layer";

    var STYLE_SVG_LAYER = "position: absolute; left: 0px; top: 0px; pointer-events: none; width: 100%; height: 100%";

    function setAttribute(node, attr) {
        for (var name in attr) {
            if (attr.hasOwnProperty(name)) {
                if (attr[name] == null) {
                    node.removeAttribute(name);
                } else {
                    node.setAttribute(name, attr[name]);
                }
            }
        }
    }

    function indexOfDisplayModel(shapeModel, displayModelList) {
        return displayModelList.indexOf(shapeModel);
        // for (var i = 0, len = displayModelList.length; i < len; i++) {
        //     if (displayModelList[i] == shapeModel) {
        //         return i;
        //     }
        // }
        // return -1;
    }

    function findDisplayShape(shapeModel) {

        var index = indexOfDisplayModel(shapeModel, this._displayModels);
        if (index === -1) {
            return null;
        }

        return this._displayList[index];
    }

    function removeDisplayShape(layer, shapeModel) {
        var index = indexOfDisplayModel(shapeModel, this._displayModels);
        if (index === -1) {
            return;
        }
        DOM.remove(this._displayList[index]);
        this._displayList.splice(index, 1);
        this._displayModels.splice(index, 1);
    }

    function moveLayerToTop() {

        if (this._isRootDIV) {
            this._svgContainer.parentNode.appendChild(this._svgContainer);
        } else {
            this._actionLayerGroup.parentNode.appendChild(this._actionLayerGroup);
        }
    }

    function applyTranslate(shape, translate) {
        shape.setAttribute("transform", "translate(" + translate.x + ", " + translate.y + ")");
    }

    function findLayer(id, masks) {

        var actionLayerId = CSS_CLASS_ACTION_LAYER + id;

        var layer = this._actionLayerGroup.querySelector("." + actionLayerId);
        var contentLayer;
        if (!layer) {
            layer = SVG.create("g", this._actionLayerGroup);
            layer.setAttribute("class", actionLayerId);

            contentLayer = SVG.create("g", layer);
            contentLayer.setAttribute("class", actionLayerId + "-content");

            if (masks && masks.length) {

                var maskId = actionLayerId + "_" + ObjectUtils.guid();
                var defs = SVG.create("defs", layer);

                var clipPath = SVG.create("clipPath", defs);
                clipPath.setAttribute("id", maskId);

                for (var i = 0; i < masks.length; i++) {
                    methodMapping[masks[i].method].call(this, masks[i].shape, clipPath);
                }

                contentLayer.setAttribute("clip-path", "url(#" + maskId + ")");
            }
        } else {
            contentLayer = layer.querySelector("." + actionLayerId + "-content");
        }
        return {
            layer: layer,
            content: contentLayer
        };
    }

    var DEFAULT_LAYER_KEY = "__default__";

    function wrapSvgContainer() {

        var svgWrapper = SVG.create("svg");

        //CSP Fixing. line.setAttribute("style") is bad. 
        //The only way to allow style attributes is to use unsafe-inline.
        //(we cannot do this).
        CSSUtils.setDOMStyle(svgWrapper, STYLE_SVG_LAYER);

        this.rootNode.appendChild(svgWrapper);
        return svgWrapper;
    }

    function ActionLayer(rootNode, nodeClass) {

        this._displayList = [];
        this._displayModels = [];
        this._groupDict = {};

        var layerGroup = SVG.create("g");
        layerGroup.setAttribute("class", nodeClass); // "v-m-action-layer-group"
        this._actionLayerGroup = layerGroup;

        this._isRootDIV = (rootNode.tagName.toUpperCase() === "DIV");

        // for root is DIV, lasso is a g element
        this._svgContainer = null;
        this._wrapSvgContainer = null;

        if (this._isRootDIV === false) {
            rootNode.appendChild(layerGroup);
        } else {
            this._wrapSvgContainer = wrapSvgContainer.bind({
                rootNode: rootNode
            });
            this._svgContainer = this._wrapSvgContainer();
            this._svgContainer.appendChild(this._actionLayerGroup);
            rootNode.appendChild(this._svgContainer);
        }
    }

    function createPath(config) {
        return SVG.create("path");
    }

    function updatePath(shape, config) {
        setAttribute(shape, {
            "d": config.d,
            "pointer-events": config.pointerEvent,
            "fill": config.fill,
            "stroke": config.stroke,
            "stroke-width": config.strokeWidth,
            "fill-opacity": config.opacity,
            "stroke-opacity": config.opacity
        });
    }

    var buildRendererConfig = function(config) {
        return {
            graphic: {
                color: config.color,
                width: config.width,
                dash: config.strokeDashArray,
                linecap: config.linecap
            },
            points: config.points,
            isHorizontal: config.isHorizontal
        };
    };

    function createLine(config) {
        var shape;
        var renderer = config.renderer;
        if (renderer) {
            var rendererConfig = buildRendererConfig(config);
            var defaultRenderer = config.defaultLineRenderer;
            shape = renderer(rendererConfig, defaultRenderer);
        }
        if (!shape) {
            shape = SVG.create("path");
            setAttribute(shape, {
                "fill": "none",
                "stroke-linejoin": "round"
            });
        }
        return shape;
    }


    function updateLine(shape, config) {
        var renderer = config.renderer;
        if (renderer) {
            if (renderer.update) {
                var rendererConfig = buildRendererConfig(config);
                var defaultRenderer = config.defaultLineRenderer;
                renderer.update(shape, rendererConfig, defaultRenderer);
                if (config.pointerEvent) {
                    shape.setAttribute("pointer-events", config.pointerEvent);
                }
            }
        } else {
            setAttribute(shape, {
                "d": SVG.generatePath(config),
                "pointer-events": config.pointerEvent,
                "stroke-width": config.width,
                "stroke": config.color,
                "stroke-dasharray": config.strokeDashArray,
                "stroke-linecap": config.linecap
            });
        }
    }

    function createCircle(config) {
        return SVG.create("circle");
    }

    function updateCircle(shape, config) {
        setAttribute(shape, {
            "cx": config.cx,
            "cy": config.cy,
            "r": config.r,
            "pointer-events": config.pointerEvent,
            "fill": config.fill,
            "stroke": config.stroke,
            "stroke-width": config.strokeWidth
        });
    }

    function createRect(config) {
        return SVG.create("rect");
    }

    function updateRect(shape, config) {
        setAttribute(shape, {
            "x": config.x,
            "y": config.y,
            "width": config.width,
            "height": config.height,
            "pointer-events": config.pointerEvent,
            "fill": config.fill,
            "stroke": config.stroke,
            "stroke-width": config.strokeWidth,
            "opacity": config.opacity
        });
    }

    function createText(config) {
        return SVG.create("text");
    }

    function updateText(shape, config) {
        if (config) {
            setAttribute(shape, {
                "x": config.x,
                "y": config.y,
                "pointer-events": config.pointerEvent,
                "fill": config.fontColor,
                "font-size": config.fontSize,
                "font-weight": config.fontWeight,
                "font-Style": config.fontStyle,
                "font-family": config.fontFamily,
                "text-anchor": config.textAnchor
            });
            shape.textContent = config.text;
        }
    }

    function drawPath(config, parentNode) {
        drawShape.call(this, config, parentNode, createPath, updatePath);
        return this;
    }

    function drawPloyLine(config, parentNode) {
        drawShape.call(this, config, parentNode, createLine, updateLine);
        return this;
    }

    function drawRect(config, parentNode) {
        drawShape.call(this, config, parentNode, createRect, updateRect);
        return this;
    }

    function drawText(config, parentNode) {
        drawShape.call(this, config, parentNode, createText, updateText);
        return this;
    }

    function drawCircle(config, parentNode) {
        drawShape.call(this, config, parentNode, createCircle, updateCircle);
        return this;
    }

    function drawShape(config, parent, _create, _update) {
        var createFn = _create || FunctionUtils.noop;
        var updateFn = _update || FunctionUtils.noop;
        moveLayerToTop.call(this);

        var shape = findDisplayShape.call(this, config);
        if (shape == null) {
            this._displayModels.push(config);

            shape = createFn.call(this, config);

            parent = parent || this._actionLayerGroup;

            parent.appendChild(shape);
            this._displayList.push(shape);
        }
        updateFn.call(this, shape, config);
        var offset = config.offset;
        if (offset) {
            shape.setAttribute("transform", "translate(" + offset.x + "," + offset.y + ")");
        }
    }

    ActionLayer.prototype.getBoundingClientRect = function(shapeModel) {

        var shape = findDisplayShape.call(this, shapeModel);
        return shape.getBoundingClientRect();
    };

    ActionLayer.prototype.clearRange = function() {
        this.clear("range");
    };

    ActionLayer.prototype.clear = function(layerId) {
        var list, layer;
        var child;
        if (layerId == null) {
            while ((child = this._actionLayerGroup.firstChild) != null) {
                this._actionLayerGroup.removeChild(child);
            }
            //iOS Safari don't support following statement.
            //this._actionLayerGroup.innerHTML = "";
            this._displayList = [];
            this._displayModels = [];
            this._groupDict = {};
        } else {
            list = this._groupDict[layerId];
            if (list) {
                layer = this._actionLayerGroup.querySelector("." + CSS_CLASS_ACTION_LAYER + layerId);
                list.forEach(function(e) {
                    removeDisplayShape.call(this, layer, e);
                }, this);

                this._actionLayerGroup.removeChild(layer);
                this._groupDict[layerId] = null;
                delete this._groupDict[layerId];
            }
        }

        return this;
    };

    ActionLayer.prototype.drawLayer = function(group, clip) {

        if (!(group instanceof Layer)) {
            return;
        }

        if (clip) {
            var maskManager = group.getMaskManager();
            maskManager.addRect(clip);
        }

        var layerId = group.getId();

        if (!layerId) {
            layerId = DEFAULT_LAYER_KEY;
        }

        if (this._groupDict[layerId] == null) {
            this._groupDict[layerId] = [];
        }

        var layerInfo = findLayer.call(this, layerId, group.getAllMasks());

        var offset = group.getOffset();

        if (offset != null) {
            offset.x = offset.x || 0;
            offset.y = offset.y || 0;
            applyTranslate(layerInfo.layer, offset);
        }
        // dlLayer.getMaskManager();



        var children = group.children();

        for (var i = 0; i < children.length; i++) {
            methodMapping[children[i].method].call(this, children[i].shape, layerInfo.content);
            this._groupDict[layerId].push(children[i].shape);
        }
        return this._actionLayerGroup.querySelector("." + CSS_CLASS_ACTION_LAYER + layerId);
    };

    ActionLayer.prototype.createLayer = function(id, offset) {
        return new Layer(id, offset);
    };

    function Layer(id, offset) {
        this._id = id;
        this._offset = offset;
        this._children = [];
        this._masks = [];
        this._maskMgr = new MaskManager(this);
    }

    Layer.prototype.addPath = function(shape) {
        this._children.push({
            method: "path",
            shape: shape
        });
    };

    Layer.prototype.addRect = function(shape) {
        this._children.push({
            method: "rect",
            shape: shape
        });
    };

    Layer.prototype.addPolyLine = function(shape) {
        this._children.push({
            method: "polyLine",
            shape: shape
        });
    };

    Layer.prototype.addText = function(shape) {
        this._children.push({
            method: "text",
            shape: shape
        });
    };

    Layer.prototype.addCircle = function(shape) {
        this._children.push({
            method: "circle",
            shape: shape
        });
    };

    Layer.prototype.getMaskManager = function() {
        return this._maskMgr;
    };

    Layer.prototype.getId = function() {
        return this._id;
    };

    Layer.prototype.getOffset = function() {
        return this._offset;
    };

    Layer.prototype.children = function() {
        return this._children;
    };

    Layer.prototype.getAllMasks = function() {
        return this._masks;
    };

    function MaskManager(layer) {
        this._layer = layer;
    }

    MaskManager.prototype.addRect = function(shape) {
        this._layer._masks.push({
            method: "rect",
            shape: shape
        });
    };

    var methodMapping = {
        polyLine: drawPloyLine,
        rect: drawRect,
        path: drawPath,
        text: drawText,
        circle: drawCircle
    };

    return ActionLayer;

});
define('sap/viz/framework/common/util/FiscalUtil',[
    "sap/viz/framework/common/util/TypeUtils",
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/framework/common/util/Constants"
], function (
    TypeUtils,
    ObjectUtils,
    Constants
) {
    var FiscalUtil = {};
    var FISCAL_PROP_FULL_NAME = "timeAxis.fiscal";
    var LEVEL_PROP_FULL_NAME = "timeAxis.levels";
    var DEFAULT_PERIOD_NUMBER = 12;
    var PERIOD_WILDCARD = "*";
    var BASE_YEAR = 1970;
    var BASE_PERIOD = 1;
    var PERIOD_DIGIT = 1000;
    var YEAR_LIMIT = 10000;
    var DEFAULT_KEY = "default";
    var PARSED_VALUE_PROP = ".parsedValue";

    var ONE_ZERO = "0";
    var TWO_ZERO = "00";

    var CEIL_PADDING = 0.00001;

    //return true or false
    FiscalUtil.isFiscal = function (data) {
        var i;
        //data should be sap.viz.api.data.FlatTableDataset. Info just supports FlatTableD.
        var isFiscal = false;
        var metaDataFields = (data && data._FlatTableD && data._FlatTableD._dataset && 
            data._FlatTableD._dataset.metadata && data._FlatTableD._dataset.metadata.fields);
        //metaDataFields[i].timeUnitType may be "fiscalyear" or "fiscalyearperiod"
        if (metaDataFields) {
            for (i = 0; i < metaDataFields.length; i++) {
                if(metaDataFields[i] && metaDataFields[i].timeUnitType &&
                    (metaDataFields[i].timeUnitType === Constants.FISCAL.UNITTYPE_YEAR ||
                    metaDataFields[i].timeUnitType === Constants.FISCAL.UNITTYPE_YEARPERIOD)) {
                    isFiscal = true;
                    break;
                }
            }
        }
        return isFiscal;
    };

    //prop setting may be
    //timeAxis : {
    //    fiscal : {
    //        periodNumbers : {
    //            default: 12,
    //            deviations: {
    //                "2012": 10,
    //                "2013": 16
    //            }
    //        }
    //but
    //return an object like
    //    fiscal : {
    //        periodNumbers : {
    //            "*": 12,
    //            "2015": 4,
    //            "2016": 4,
    //            "2018": 4
    //        }
    //    }
    FiscalUtil.extractFiscalObj = function(prop) {
        var fiscalObj = null;
        var currentLevelObj = prop.get(FISCAL_PROP_FULL_NAME);
        if (currentLevelObj) {
            if (currentLevelObj.periodNumbers &&
                currentLevelObj.periodNumbers[DEFAULT_KEY]) {
                fiscalObj = {};
                fiscalObj.periodNumbers = ObjectUtils.clone(currentLevelObj.periodNumbers.deviations);
                if (!fiscalObj.periodNumbers) {
                    fiscalObj.periodNumbers = {};
                }
                fiscalObj.periodNumbers[PERIOD_WILDCARD] = currentLevelObj.periodNumbers[DEFAULT_KEY];
            }
            else {
                fiscalObj = ObjectUtils.clone(currentLevelObj);
            }

            if (FiscalUtil.extractUnitType(prop) === Constants.FISCAL.UNITTYPE_YEAR) {
                //for fisal year only, we keep each year the same distance.
                fiscalObj.periodNumbers = {};
            }
        }
        return fiscalObj;
    };

    FiscalUtil.extractUnitType = function (prop) {
        var unitType = Constants.FISCAL.UNITTYPE_YEARPERIOD;
        var currentLevels = prop.get(LEVEL_PROP_FULL_NAME);
        if (currentLevels && currentLevels.length === 1 &&
            currentLevels[0] === Constants.FISCAL.YEAR) {
            unitType = Constants.FISCAL.UNITTYPE_YEAR;
        }
        return unitType;
    };

    FiscalUtil.startEndConvertor = function (start, end, prop) {
        var values = {start:start, end:end};
        var hasFiscalLevel = FiscalUtil.hasFiscalLevel(prop);
        if (hasFiscalLevel) {
            values.start = FiscalUtil.fiscalToQuantity(start, prop);
            values.end = FiscalUtil.fiscalToQuantity(end, prop);
        }
        return values;
    };

    FiscalUtil.hasFiscalLevel = function (prop) {
        var hasFiscalLevel = false;
        if (prop) {
            var currentLevels = prop.get(LEVEL_PROP_FULL_NAME);
            if (currentLevels) {
                var i;
                for (i = 0; i < currentLevels.length; i++) {
                    if (currentLevels[i] === Constants.FISCAL.YEAR ||
                        currentLevels[i] === Constants.FISCAL.PERIOD) {
                        hasFiscalLevel = true;
                        break;
                    }
                }
            }
        }
        return hasFiscalLevel;
    };

    FiscalUtil.fiscalToQuantity = function (fiscalStamp, fObj) {
        //fiscalStamp is a number like 2014002,
        //we have to convert it to a interger
        //1969012 <-> -1
        //1970001 <-> 0
        //1970002 <-> 1
        var fiscalObj = fObj;
        if (!fiscalObj.periodNumbers) {
            //fObj is the prop
            fiscalObj = FiscalUtil.extractFiscalObj(fObj);
        }

        var periodNum;
        //now we need to get fiscal_year and fiscal_period
        var numStamp = parseInt(fiscalStamp);
        if (isNaN(numStamp)) {
            periodNum = fiscalStamp;
        }
        else {
            var sObj = FiscalUtil.fiscalStampToObj(numStamp, fObj);
            var fiscalYear = sObj.fiscalYear;
            var fiscalPeriod = sObj.fiscalPeriod;

            var regularPeriodNumber = DEFAULT_PERIOD_NUMBER;
            if (fiscalObj && fiscalObj.periodNumbers && fiscalObj.periodNumbers[PERIOD_WILDCARD]) {
                regularPeriodNumber = fiscalObj.periodNumbers[PERIOD_WILDCARD];
            }

            var periodNumCurrentYear = regularPeriodNumber;
            if(fiscalObj && fiscalObj.periodNumbers && fiscalObj.periodNumbers[fiscalYear]) {
                periodNumCurrentYear = fiscalObj.periodNumbers[fiscalYear];
            }
            if (fiscalPeriod > periodNumCurrentYear) {
                periodNum = null;
            }
            else {
                var smallerYear = fiscalYear;
                var biggerYear = BASE_YEAR;
                if (fiscalYear > BASE_YEAR) {
                    smallerYear = BASE_YEAR;
                    biggerYear = fiscalYear;
                }
                //now we count period number (from BASE_YEAR)
                periodNum = (fiscalYear - BASE_YEAR) * regularPeriodNumber;
                periodNum += (fiscalPeriod - BASE_PERIOD);
                if (fiscalObj && fiscalObj.periodNumbers) {
                    var specialFiscalYear;
                    var specialFiscalYearNum;
                    for (specialFiscalYear in fiscalObj.periodNumbers) {
                        if (fiscalObj.periodNumbers.hasOwnProperty(specialFiscalYear) &&
                            specialFiscalYear !== PERIOD_WILDCARD) {
                            specialFiscalYearNum = parseInt(specialFiscalYear);
                            if (specialFiscalYearNum >= smallerYear &&
                                specialFiscalYearNum < biggerYear) {
                                if (periodNum > 0) {
                                    periodNum +=
                                        (fiscalObj.periodNumbers[specialFiscalYear] - regularPeriodNumber);
                                }
                                else {
                                    periodNum -=
                                        (fiscalObj.periodNumbers[specialFiscalYear] - regularPeriodNumber);
                                }
                            }
                        }
                    }
                }
            }
        }

        return periodNum;
    };

    FiscalUtil.fiscalStampToObj = function (fiscalStamp, fObj) {
        //fiscalStamp is a number like 2014002
        //now we need to get fiscal_year and fiscal_period
        var numStamp = parseInt(fiscalStamp);
        var fType = FiscalUtil.extractUnitType(fObj);
        var fiscalYear;
        var fiscalPeriod;
        if (numStamp < YEAR_LIMIT) {
            fiscalYear = numStamp;
            fiscalPeriod = BASE_PERIOD; 
        }
        else {
            fiscalYear = Math.floor(numStamp / PERIOD_DIGIT); 
            fiscalPeriod = numStamp % PERIOD_DIGIT;
        }

        var fiscalStampObj = {};
        fiscalStampObj.fiscalYear = fiscalYear;
        fiscalStampObj.fiscalPeriod = fiscalPeriod;
        fiscalStampObj.fiscalString = fiscalYear.toString();

        if (fType === Constants.FISCAL.UNITTYPE_YEARPERIOD) {
            var strPeriod = fiscalPeriod.toString();
            if (fiscalPeriod < 10) {
                strPeriod = TWO_ZERO + strPeriod;
            }
            else if (fiscalPeriod < 100) {
                strPeriod = ONE_ZERO + strPeriod;
            }
            fiscalStampObj.fiscalString += strPeriod;
        }
        return fiscalStampObj;
    };

    FiscalUtil.fiscalYearCeil = function (quantityStamp, fObj) {
        //if quantityStamp is 1, 1970 has 12 fiscal periods, 
        //then fiscalCeil is 11, fiscalFloor is 0 
        var fiscalValueObj = FiscalUtil.quantityToFiscal(quantityStamp, fObj);

        var fiscalObj = fObj;
        if (!fiscalObj.periodNumbers) {
            //fObj is prop
            fiscalObj = FiscalUtil.extractFiscalObj(fObj);
        }

        var currentPeriodsNumber = (fiscalObj.periodNumbers && fiscalObj.periodNumbers[fiscalValueObj.fiscalYear]);
        if (!currentPeriodsNumber) {
            currentPeriodsNumber = DEFAULT_PERIOD_NUMBER;
            if(fiscalObj.periodNumbers && fiscalObj.periodNumbers[PERIOD_WILDCARD]) {
                currentPeriodsNumber = fiscalObj.periodNumbers[PERIOD_WILDCARD];
            }
        }

        return quantityStamp + (currentPeriodsNumber - fiscalValueObj.fiscalPeriod) + (1 - CEIL_PADDING);
    };

    FiscalUtil.fiscalYearFloor = function (quantityStamp, fObj) {
        var fiscalValueObj = FiscalUtil.quantityToFiscal(quantityStamp, fObj);
        return quantityStamp - (fiscalValueObj.fiscalPeriod - 1);
    };

    FiscalUtil.nextFiscalStamp = function (quantityStamp, fObj) {
        var fiscalYearCeil = FiscalUtil.fiscalYearCeil(quantityStamp, fObj);
        return fiscalYearCeil + CEIL_PADDING;
    };

    FiscalUtil.getFiscalYearNumber = function (start, end, originProps) {
        var startObj = FiscalUtil.quantityToFiscal(start, originProps);
        var endObj = FiscalUtil.quantityToFiscal(end, originProps);
        return endObj.fiscalYear - startObj.fiscalYear + 1;
    };

    FiscalUtil.quantityToFiscal = function (quantityStamp, fObj) {
        var fiscalStampObj = {};
        fiscalStampObj.fiscalYear = BASE_YEAR;
        fiscalStampObj.fiscalPeriod = BASE_PERIOD;

        var fiscalObj = fObj;
        if (!fiscalObj.periodNumbers) {
            //fObj is prop
            fiscalObj = FiscalUtil.extractFiscalObj(fObj);
        }

        var regularPeriodNumber = DEFAULT_PERIOD_NUMBER;
        if(fiscalObj.periodNumbers && fiscalObj.periodNumbers[PERIOD_WILDCARD]) {
            regularPeriodNumber = fiscalObj.periodNumbers[PERIOD_WILDCARD];
        }

        var iYear = BASE_YEAR;
        var iPeriod = BASE_PERIOD;
        var iQuatity;

        if (quantityStamp >= 0) {
            for (iQuatity = 0; iQuatity <= quantityStamp; iYear++) {
                fiscalStampObj.fiscalYear = iYear;
                fiscalStampObj.fiscalPeriod = BASE_PERIOD + (quantityStamp - iQuatity);
                if (fiscalObj.periodNumbers && fiscalObj.periodNumbers[iYear]) {
                    iQuatity += parseInt(fiscalObj.periodNumbers[iYear]);
                }
                else {
                    iQuatity += regularPeriodNumber;
                }
            }
        }
        else {
            for (iQuatity = 0; iQuatity > quantityStamp;) {
                iYear--;
                if (fiscalObj.periodNumbers && fiscalObj.periodNumbers[iYear]) {
                    iQuatity -= parseInt(fiscalObj.periodNumbers[iYear]);
                }
                else {
                    iQuatity -= regularPeriodNumber;
                }
                fiscalStampObj.fiscalYear = iYear;
                fiscalStampObj.fiscalPeriod = (quantityStamp - iQuatity + 1);
            }
        }

        fiscalStampObj.fiscalString = fiscalStampObj.fiscalYear.toString();
        if (FiscalUtil.extractUnitType(fObj) === Constants.FISCAL.UNITTYPE_YEARPERIOD) {
            var strPeriod = fiscalStampObj.fiscalPeriod.toString();
            if (fiscalStampObj.fiscalPeriod < 10) {
                strPeriod = TWO_ZERO + strPeriod;
            }
            else if (fiscalStampObj.fiscalPeriod < 100) {
                strPeriod = ONE_ZERO + strPeriod;
            }
            fiscalStampObj.fiscalString += strPeriod;
        }

        return fiscalStampObj;
    };

    FiscalUtil.pickPeriodValues = function (start, end, step, count, allowFirstValue, originProps) {
        //if each year has 11 periods,
        //-1, 12, 3 step should be
        //0, 3, 6, 9
        //result shoulde be
        var realCount = count;
        if (!count) {
            realCount = Infinity;
        }
        var intStart = Math.ceil(start);
        var intEnd = Math.floor(end);
        var fiscalObj = originProps;
        if (!fiscalObj.periodNumbers) {
            //fObj is prop
            fiscalObj = FiscalUtil.extractFiscalObj(originProps);
        }
        
        var regularPeriodNumber = DEFAULT_PERIOD_NUMBER;
        if(fiscalObj.periodNumbers && fiscalObj.periodNumbers[PERIOD_WILDCARD]) {
            regularPeriodNumber = fiscalObj.periodNumbers[PERIOD_WILDCARD];
        }

        var allValuesForPeriods = [];
        
        var iQuatity;
        var actualYear;
        var actualPeriod;
        for (iQuatity = intStart; iQuatity <= intEnd;) {
            if (iQuatity === intStart) {
                var actualFiscalObj = FiscalUtil.quantityToFiscal(iQuatity, originProps);
                actualYear = actualFiscalObj.fiscalYear;
                actualPeriod = actualFiscalObj.fiscalPeriod;
            }

            var yearPeriodsNumber;
            if (fiscalObj.periodNumbers && fiscalObj.periodNumbers[actualYear]) {
                yearPeriodsNumber = parseInt(fiscalObj.periodNumbers[actualYear]);
            }
            else {
                yearPeriodsNumber = regularPeriodNumber;
            }

            if ((actualPeriod + step) <= (yearPeriodsNumber + 1)) {
                allValuesForPeriods.push(iQuatity);
                iQuatity += step;
                actualPeriod += step;
            }
            else {
                iQuatity += (yearPeriodsNumber - actualPeriod + 1);
                actualPeriod = 1;
                actualYear++;
            }

            if (allValuesForPeriods.length >= realCount) {
                break;
            }
        }

        return allValuesForPeriods;
    };

    FiscalUtil.pickYearValues = function (start, end, step, count, originProps) {
        var realCount = count;
        if (!count) {
            realCount = Infinity;
        }
        var intStart = Math.ceil(start);
        var intEnd = Math.floor(end);
        var fiscalObj = originProps;
        if (!fiscalObj.periodNumbers) {
            //fObj is prop
            fiscalObj = FiscalUtil.extractFiscalObj(originProps);
        }

        var regularPeriodNumber = DEFAULT_PERIOD_NUMBER;
        if(fiscalObj.periodNumbers && fiscalObj.periodNumbers[PERIOD_WILDCARD]) {
            regularPeriodNumber = fiscalObj.periodNumbers[PERIOD_WILDCARD];
        }

        var allValuesForYear = [];

        var iQuatity;
        var actualYear;
        for (iQuatity = intStart;;) {
            if (iQuatity === intStart) {
                var actualFiscalObj = FiscalUtil.quantityToFiscal(iQuatity, originProps);
                actualYear = actualFiscalObj.fiscalYear;
                var actualPeriod = actualFiscalObj.fiscalPeriod;

                //to check if start is always a new year  
                if (actualPeriod === BASE_PERIOD) {
                    allValuesForYear.push(iQuatity);
                }

                if (fiscalObj.periodNumbers && fiscalObj.periodNumbers[actualYear]) {
                    iQuatity += (parseInt(fiscalObj.periodNumbers[actualYear]) - actualPeriod + 1);
                }
                else {
                    iQuatity += (regularPeriodNumber - actualPeriod + 1);
                }

                allValuesForYear.push(iQuatity);
                actualYear++;
            }
            else {
                if (fiscalObj.periodNumbers && fiscalObj.periodNumbers[actualYear]) {
                    iQuatity += parseInt(fiscalObj.periodNumbers[actualYear]);
                }
                else {
                    iQuatity += regularPeriodNumber;
                }

                if (iQuatity <= intEnd) {
                    allValuesForYear.push(iQuatity);
                    actualYear++;
                }
                else {
                    break;
                }
            }

            if (allValuesForYear.length >= (step * realCount)) {
                break;
            }
        }

        var valuesToReturn = [];
        for (iQuatity = 0; iQuatity < allValuesForYear.length; iQuatity += step) {
            valuesToReturn.push(allValuesForYear[iQuatity]);
            if (valuesToReturn.length >= realCount) {
                break;
            }
        }

        return valuesToReturn;
    };

    FiscalUtil.isSameFiscalPeriod = function (d1, d2) {
        //d1 and d2 are converted Milliseconds.
        return d1 === d2;
    };

    FiscalUtil.isSameFiscalYear = function (d1, d2) {
        var isSame = (d1 === d2);
        if (TypeUtils.isExist(d1) && TypeUtils.isExist(d2)) {
            //"this" is timeBodyCtx
            var fiscalYearForValue1 = FiscalUtil.quantityToFiscal(d1, this._properties.origin).fiscalYear;
            var fiscalYearForValue2 = FiscalUtil.quantityToFiscal(d2, this._properties.origin).fiscalYear;
            isSame = (fiscalYearForValue1 === fiscalYearForValue2);
        }
        return isSame;
    };

    FiscalUtil.tooltipDataToDate = function (data) {
        if (data && data.value &&
            (data.value[Constants.FISCAL.UNITTYPE_YEAR] != null ||
            data.value[Constants.FISCAL.UNITTYPE_PERIOD] != null)) {
            //clone to keep original object reference
            data.value = ObjectUtils.clone(data.value);
            data.value.day = data.value[Constants.FISCAL.UNITTYPE_YEAR];
            data.value.time = data.value[Constants.FISCAL.UNITTYPE_PERIOD];
        }
    };

    FiscalUtil.removeParsedValues = function (data) {
        //We have to remove data.data[i].data "fiscalYearPeriod.parsedValue" 
        //for external event
        var i;
        if (data && data.data && data.data.length) {
            for (i = 0; i < data.data.length; i++) {
                var dataItem = data.data[i].data;
                var propToRemove = null;
                for (var prop in dataItem) {
                    if (dataItem.hasOwnProperty(prop)) {
                        propToRemove = prop + PARSED_VALUE_PROP;
                        if (data.data[i].data[propToRemove] != null) {
                            break;
                        }
                    }
                }

                if (propToRemove) {
                    //clone to keep original object reference
                    data.data[i].data = ObjectUtils.clone(data.data[i].data);
                    delete data.data[i].data[propToRemove];
                }
            }
        }
    };

    return FiscalUtil;
});

define('sap/viz/framework/interaction/InteractionService',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/interaction/ActionLayer",
    'sap/viz/framework/common/util/UADetector',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/util/FiscalUtil',
    'sap/viz/framework/common/util/SVG'
], function (TypeUtils, ActionLayer, UADetector, Constants,
    FiscalUtil,
    SVG) {

    var MODULE_ALLOW_METHOD_NAMES = [
        "getSize",
        "getRealSize",
        "zoom",
        "scroll",
        "getHScrollbar",
        "getVScrollbar",
        "hitTest",
        "hitTestForRangeSelection",
        "getMaxZoomRatio",
        "getOffset",
        "update",
        "getRealSizeByFixedDPSize",
        "getSeries",
        "getActiveLevels",
        "getActiveLabels",
        "getRange",
        "getScale",
        "getCellPosition",
        "isHorizontal",
        "isVisible",
        "isLabelVisible",
        "getType",
        "getDataPointPosition",
        "getCellPosition",
        "getScrollbar",
        "loadMore",
        "panStart",
        "panMove",
        "panEnd",
        "getAxisBinding",
        "mappingDataPointInfo",
        "getSeriesStyle",
        "getZoomer",
        "isMarkerVisible",
        "setLastSeries",
        "getFormatTimeValue",
        "getFiscalUnitLabels",
        "drawAreaRefLine",
        "getChildPlot",
        "getDataPointShape",
        "getLineRenderer",
        "getDefaultLineRenderer",
        "isOnlyShowingFirstAndLastLabel",
        "getData",
        "getLegendTitleText",
        "getPosition",
        "getSeriesIndex"
    ];

    function NodeTypeItem(value) {
        this._value = value;
    }

    NodeTypeItem.prototype.get = function() {
        return this._value;
    };

    var CSS_CLASS = Constants.CSS.CLASS;
    var NodeType = {
        RADAR_NET:                      new NodeTypeItem(".v-radar-net"),
        RADAR_AXIS:                     new NodeTypeItem(".v-radar-branch-group .v-axis"),
        AREA_POINT_GROUP:               new NodeTypeItem(".v-area-point-group"),
        AREA:                           new NodeTypeItem("." + CSS_CLASS.AREA),
        AREA_GROUP_SELECTED:            new NodeTypeItem("." + CSS_CLASS.AREA_GROUP_SELECTED),
        CHART_TITLE:                    new NodeTypeItem(".v-m-title"),
        AXIS_TITLE:                     new NodeTypeItem(".v-m-axisTitle"),
        AXIS_BODY:                      new NodeTypeItem(".v-m-axisBody"),
        LEGEND_GROUP:                   new NodeTypeItem(".v-m-legendGroup"),
        DATA_LABEL:                     new NodeTypeItem([".v-m-plot .v-datalabel", ".v-m-trellis-plot .v-datalabel"]),
        DIMENSION_LABEL:                new NodeTypeItem(".v-dimensionlabel"),
        TRELLIS_AXIS_LEFT:              new NodeTypeItem(".v-m-axis-position-bound.v-gridcontainer-left"),
        TRELLIS_AXIS_RIGHT:             new NodeTypeItem(".v-m-axis-position-bound.v-gridcontainer-right"),
        TRELLIS_AXIS_BOTTOM:            new NodeTypeItem(".v-m-axis-position-bound.v-gridcontainer-bottom"),
        TRELLIS_AXIS_TOP:               new NodeTypeItem(".v-m-axis-position-bound.v-gridcontainer-top"),
        TRELLIS_AXIS_TITLE_LEFT:        new NodeTypeItem(".v-title.viz-axis-title.v-trellistitle-left"),
        TRELLIS_AXIS_TITLE_RIGHT:       new NodeTypeItem(".v-title.viz-axis-title.v-trellistitle-right"),
        TRELLIS_AXIS_TITLE_BOTTOM:      new NodeTypeItem(".v-title.viz-axis-title.v-trellistitle-bottom"),
        TRELLIS_AXIS_TITLE_TOP:         new NodeTypeItem(".v-title.viz-axis-title.v-trellistitle-top"),
        DATA_POINT:                     new NodeTypeItem("." + CSS_CLASS.DATAPOINT),
        DATA_POINT_GROUP:               new NodeTypeItem("." + CSS_CLASS.DATAPOINT_GROUP),
        PLOT_NODE:                      new NodeTypeItem(".v-m-plot"),
        VALUE_POINT:                    new NodeTypeItem(".v-valuepoint"),
        CATEGORY_LABEL_GROUP:           new NodeTypeItem(".v-m-categoryAxis ." + CSS_CLASS.AXIS.LABEL_GROUP),
        CATEGORY2_LABEL_GROUP:          new NodeTypeItem(".v-m-categoryAxis2 ." + CSS_CLASS.AXIS.LABEL_GROUP),
        TIME_LABEL_GROUP:               new NodeTypeItem(".v-m-timeAxis ." + CSS_CLASS.AXIS.LABEL_GROUP),
        LEGEND_LABEL_GROUP:             new NodeTypeItem(".v-m-legend .v-groups"),
        PLOT_BOUND_SELECTION:           new NodeTypeItem([".v-trellis-plot-bound", ".v-plot-bound"]),
        LEGEND_BODY_BOUND_SELECTION:    new NodeTypeItem([".v-m-legend .v-legend-body-bound"]),
        LEGEND_ITEM:                    new NodeTypeItem(".v-legend-item"),
        EMBEDDED_LEGEND_ITEM:           new NodeTypeItem(".v-embeddedLegend-item"),
        MBC_LEGEND_ITEM:                new NodeTypeItem(".v-mbc-legend-item"),
        AXIS_ITEM:                      new NodeTypeItem(".v-axis-item"),
        TIMEAXIS_ITEM:                  new NodeTypeItem("." + Constants.CSS.CLASS.AXIS.LABEL_SELECTION_TIMEAXIS),
        TIMEAXIS_ITEM_UPPERLEVEL:       new NodeTypeItem("." + 
                Constants.CSS.CLASS.AXIS.LABEL_SELECTION_TIMEAXIS_UPPERLEVEL),
        AXIS_ITEM_BACKGROUND:           new NodeTypeItem("." + Constants.CSS.CLASS.AXIS.BACKGROUND_RECT),
        TREE_MAP_ITEM:                  new NodeTypeItem(".v-treemapitem"),
        LINE:                           new NodeTypeItem(".v-lines"),
        HORIZONTAL_REFERENCE_LINE:      new NodeTypeItem(".v-referenceline-horizontal"),
        VERTICAL_REFERENCE_LINE:        new NodeTypeItem(".v-referenceline-vertical"),
        ZERO_LINE:                      new NodeTypeItem(".v-zeroline"),
        BAR_SERIES:                     new NodeTypeItem("." + CSS_CLASS.BAR_SERIES_PATH),
        AREA_REF_LINE:                  new NodeTypeItem("." + CSS_CLASS.AREA_REF_LINE),
        MAIN_NODE:                      new NodeTypeItem(".v-m-main"),
        VARIANCE1_TITLE:                new NodeTypeItem(".v-m-varianceTitle1 .v-variance-title"),
        VARIANCE2_TITLE:                new NodeTypeItem(".v-m-varianceTitle2 .v-variance-title")
    };

    function BBoxTypeItem(value) {
        this._value = value;
    }

    BBoxTypeItem.prototype.get = function() {
        return this._value;
    };

    var BBoxType = {
        ROOT_NODE:          new BBoxTypeItem("default"),
        PLOT_NODE:          new BBoxTypeItem(".v-m-plot"),
        PLOT_MAIN_NODE:     new BBoxTypeItem(".v-plot-main"),
        PLOT_BOUND_NODE:    new BBoxTypeItem(".v-plot-bound"),
        RANGE_SELECTION:    new BBoxTypeItem(".v-m-action-layerrange rect")
    };

    var LAYOUT_PROP = "general.layout.orientation";

    function OffsetTypeItem(value) {
        this._value = value;
    }

    OffsetTypeItem.prototype.get = function() {
        return this._value;
    };

    var OffsetType = {
        PLOT_NODE: new OffsetTypeItem(".v-m-plot"),
        PLOT_MAIN_NODE: new OffsetTypeItem(".v-plot-main"),
        MAIN_NODE: new OffsetTypeItem(".v-m-main")
    };

    function TransformTypeItem(value) {
        this._value = value;
    }

    TransformTypeItem.prototype.get = function() {
        return this._value;
    };

    var TransformType = {
        PLOT_MAIN_NODE: new TransformTypeItem(".v-plot-main")
    };
    var InteractionService = function(option, isStandAlone) {
        this._status = {};
        var runtime = option.runtime;
        var rootNode = option.rootNode.node();

        //TODO remove this code(remain this._rootNode for DesignTimeBehaivor).
        this._rootNode = option.rootNode;

        this._actionLayer = new ActionLayer(rootNode, "v-m-action-layer-group");
        this._decorationLayer = new ActionLayer(rootNode, "v-m-decoration-layer-group");
        this._propertyMgr = createPropertyManagerFacade(runtime, !!isStandAlone);
        this._statusMgr = createStatusManagerFacade(runtime);
        this._envMgr = runtime.envManager();
        this._semanticMgr = runtime.semanticManager();
        this._effectMgr = runtime.effectManager();
        this._dataModelMgr = option.dataModelManager;
        this._scales = option.scales;


        this._dispatch = d3.dispatch("fire");
        this._eventDispatcher = runtime.eventDispatcher();
        this._tooltipContainer = option.toolTipContainer;
        this._rootContainer = option.rootContainer;
        this._screenReaderContainer = option.screenReaderContainer;

        this._isHorizontal = initDirection(option.chartView);
        if (this._propertyMgr.has(LAYOUT_PROP)) {
            var interactionService = this;
            this._propertyMgr.watch(LAYOUT_PROP, function(newValue, oldValue) {
                interactionService._isHorizontal = (newValue === "horizontal");
            });
        }

        this.isBigDataMode = isBigDataMode.bind(option.chartView);
        this.isDisableSyncHightlight = isDisableSyncHightlight.bind(option.chartView);

        this._getRenderType = getRenderType.bind(option.chartView);
        this._getChartType = getChartType.bind(option.chartView);

        this.getModule = getModuleForExternal.bind(option.chartView);
        this.getNodes = getNodes.bind(option.rootNode);
        this.getBBox = getBBox.bind(rootNode);

        this.getOffsetMatrix = getOffsetMatrix.bind(rootNode);
        this.getTransformScaleRatio = getTransformScaleRatio.bind(null, rootNode);

        this.getTransform = getTransform.bind(rootNode);
        this.setTransform = setTransform.bind(rootNode);
    };

    /**
     *
     * @param nodeType {NodeType}
     * @param isUseD3Wrapper User can set whether return element is a dom element or d3. default value is true
     */
    function getNodes(nodeType, isUseD3Wrapper) {

        if (!(nodeType instanceof NodeTypeItem)) {
            return null;
        }

        if (isUseD3Wrapper !== false) {
            isUseD3Wrapper = true;
        }

        var rootNode = this;
        var result = null;

        var nodeTypeValue = nodeType.get();

        if (!TypeUtils.isArray(nodeTypeValue)) {
            nodeTypeValue = [nodeTypeValue];
        }

        for (var i = 0; i < nodeTypeValue.length; i++) {

            if (isUseD3Wrapper) {
                result = rootNode.selectAll(nodeTypeValue[i]);

                if (!result.empty()) {
                    break;
                }
            } else {
                result = rootNode.node().querySelectorAll(nodeTypeValue[i]);
                if (result.length !== 0) {
                    break;
                }
            }
        }

        if (isUseD3Wrapper === false) {
            result.forEach = Array.prototype.forEach;
        }

        return result;
    }

    function getBBox(bboxType) {
        if (!(bboxType instanceof BBoxTypeItem)) {
            return null;
        }

        var rootNode = this;
        var rect;
        if (bboxType === BBoxType.ROOT_NODE) {
            if (UADetector.isFirefox()) {
                rootNode = rootNode.querySelector('.v-m-background') || rootNode;
            }
            rect = rootNode.getBoundingClientRect();
            rect.x = rect.left;
            rect.y = rect.top;
            return rect;
        }

        var targetNode = rootNode.querySelector(bboxType.get());
        if (targetNode == null) {
            return null;
        }
        rect = targetNode.getBoundingClientRect();
        rect.x = rect.left;
        rect.y = rect.top;
        return rect;
    }

    function getOffsetMatrix(type, isFromRoot) {

        if (!(type instanceof OffsetTypeItem)) {
            return null;
        }

        var rootNode = this;
        var node = rootNode.querySelector(type.get());
        if (node == null) {
            return null;
        }

        return SVG.getTransformToElement(node, isFromRoot ? rootNode : node.parentNode);
    }

    /* when chart or ancestor node applied transform:scale(x, y), this function get x/y by calculation. */
    function getTransformScaleRatio(node) {
        var rect = node.getBoundingClientRect(); // rect is dimension after scale
        var origin = {
            /* not to use BBox because when has scroll bar, BBox width/height is not correct.
               Asuumption: user does not set border on svg
               Chrome (before 2016 APril) support all
               Chrome (after 2016 April) and IE10 only support clientWidth.
               Firefox support none. So fallback to bounding client width if firefox, then it does not support scale.
            */
            width: node.offsetWidth || node.clientWidth || rect.width,
            height: node.offsetHeight || node.clientHeight || rect.height
        };
        return {
            x: rect.width / origin.width,
            y: rect.height / origin.height
        };
    }

    function getTransform(type) {

        if (!(type instanceof TransformTypeItem)) {
            return null;
        }

        var rootNode = this;
        var targetNode = rootNode.querySelector(type.get());
        if (targetNode == null) {
            return null;
        }
        return targetNode.getAttribute("transform");
    }

    function setTransform(type, transform) {

        if (!(type instanceof TransformTypeItem)) {
            return null;
        }

        var rootNode = this;
        var targetNode = rootNode.querySelector(type.get());
        if (targetNode == null) {
            return null;
        }
        targetNode.setAttribute("transform", transform);
    }
    function createPropertyManagerFacade(runtime, isStandAlone) {
        var propertyMgr = runtime._propertyMgr;
        var facade = propertyMgr.proxy();
        facade.remove = null;
        facade.names = null;
        facade.load = null;
        facade.serialize = null;
        if (isStandAlone === false) {
            facade.set = null;
            facade.origin = null;
        }
        facade.setDefault = null;
        facade.reset = null;
        facade.resetDefault = null;
        facade.parentLevel = null;
        facade.proxy = null;
        return facade;
    }

    function createStatusManagerFacade(runtime) {
        var statusMgr = runtime.statusManager();
        var facade = statusMgr.proxy();
        facade.remove = null;
        facade.names = null;
        facade.load = null;
        facade.serialize = null;
        facade.setDefault = null;
        facade.origin = null;
        facade.reset = null;
        facade.resetDefault = null;
        facade.parentLevel = null;
        facade.proxy = null;
        return facade;
    }

    InteractionService.prototype.NodeType = NodeType;
    InteractionService.prototype.BoxType = BBoxType;
    InteractionService.prototype.OffsetType = OffsetType;
    InteractionService.prototype.TransformType = TransformType;

    InteractionService.prototype.setStatus = function(key, value) {
        this._status[key] = value;
        return this;
    };

    InteractionService.prototype.getStatus = function(key) {
        return this._status[key];
    };

    InteractionService.prototype.removeStatus = function(key) {
        if (this._status){
            delete this._status[key];
        }
        return this;
    };

    InteractionService.prototype.getTooltipContainer = function() {
        return this._tooltipContainer;
    };

    InteractionService.prototype.getRootContainer = function() {
        return this._rootContainer;
    };

    InteractionService.prototype.getScreenReaderContainer = function() {
        return this._screenReaderContainer;
    };

    InteractionService.prototype.getProperties = function() {
        return this._propertyMgr;
    };

    InteractionService.prototype.getStatusManager = function () {
        return this._statusMgr;
    };

    InteractionService.prototype.getEnvManager = function () {
        return this._envMgr;
    };

    InteractionService.prototype.getSemanticManager = function () {
        return this._semanticMgr;
    };

    InteractionService.prototype.getEffectManager = function() {
        return this._effectMgr;
    };

    InteractionService.prototype.getDataModel = function () {
        return this._dataModelMgr.getDataModel();
    };

    InteractionService.prototype.isTrellis = function () {
        var data = (this._dataModelMgr && this._dataModelMgr.getDataModel());
        return (data && (data.trellisRow || data.trellisColumn));
    };

    InteractionService.prototype._getActionLayer = function() {
        return this._actionLayer;
    };

    InteractionService.prototype._getDecorationLayer = function() {
        return this._decorationLayer;
    };

    /**
     * Judge whether the chart is horizontal.
     *
     * @return true|false|null
     */
    InteractionService.prototype.isHorizontal = function() {
        return this._isHorizontal;
    };

    InteractionService.prototype._getScales = function(){
        return this._scales;
    };

    InteractionService.prototype.getExtendTimeRange = function(){
        return this.getModule("main.timeAxis.axisBody").getScale().getDomain();
    };
    
    InteractionService.prototype._setScales = function(scales){
        this._scales = scales;
    };

    InteractionService.prototype.isCombChart = function(){
        return this._getChartType().indexOf("combination") > -1;
    };

    InteractionService.prototype.shouldUseDeselectedColor = function(){
        var selectedDataPoints = this.getStatus("selectedDataPoints");
        return selectedDataPoints && selectedDataPoints.length && 
                    !this.getStatus("rangeSelection");
    };
    
    function getRenderType() {
        return this._renderType;
    }

    function getChartType() {
        if (this._options) {
            return this._options.chartType;
        }
    }

    function initDirection(chartView) {
        var module = getModule(chartView, "main.plot") || getModule(chartView, "main");
        if (module == null || module.isHorizontal == null) {
            return null;
        }
        return module.isHorizontal();
    }

    function getModule(chartView, key) {
        var path = key.split(".");
        var component = chartView;
        for (var i = 0; i < path.length; ++i) {
            if (!component || !component.getChild || !component.getChild(path[i])) {
                component = null;
                break;
            } else {
                component = component.getChild(path[i]).module;
            }
        }

        return component;
    }

    function getModuleForExternal(key) {
        // obtain chart view
        var component = getModule(this, key);

        if (component == null) {
            return null;
        }

        var proxy = {};

        MODULE_ALLOW_METHOD_NAMES.forEach(function(methodName) {

            
            if (component[methodName] == null ||
                TypeUtils.isFunction(component[methodName]) === false) {
                return;
            }

            proxy[methodName] = component[methodName].bind(component);
        });

       
        return proxy;
    }

    function isBigDataMode() {
        var component = getModule(this, "main.plot");

        if (component == null || component.isBigDataMode == null) {
            return false;
        }

        return component.isBigDataMode();
    }

    function isDisableSyncHightlight() {
        var component = getModule(this, "main.plot");
        if (component == null || component.isDisableSyncHightlight == null) {
            return false;
        }
        return component.isDisableSyncHightlight();
    }

    InteractionService.prototype.on = function(eventName, handler) {
        this._dispatch.on(eventName, handler);
    };

    InteractionService.prototype.fireEvent = function(event, data, useDefault) {
        if (TypeUtils.isString(event)) {
            this._dispatch.fire({
                name: event,
                data: data ? data : {},
                useDefault: useDefault
            });
        } else if (TypeUtils.isString(event.name)) {
            this._dispatch.fire({
                name: event.name,
                data: event.data ? event.data : {},
                useDefault: arguments[1]
            });
        }
        return this;
    };

    /**
     * dispatch external event
     *@param {String} name The event name to be dispatched.
     *@param {Object} data The event data to be dispatched.
     *@param {Boolean} bSync Sync or async message mode
     *@this {Behavior}
     */
    InteractionService.prototype.fireExternalEvent = function (name, data, bSync) {
        //as the requirement of PO, to remove fiscalYearPeriod.parsedValue
        if (FiscalUtil.hasFiscalLevel(this._propertyMgr)) {
            FiscalUtil.removeParsedValues(data);
        }
        var evtDisp = this._eventDispatcher;
        if(bSync){
            evtDisp.fire(name, data);
        }else{
            window.setTimeout(function() {
                evtDisp.fire(name, data);
            }, 1);
        }
    };

    InteractionService.prototype.destroy = function() {
        this._status = null;

        this._dispatch = null;
        this._eventDispatcher = null;
        this._actionLayer.clear();
        this._actionLayer = null;
        this._decorationLayer.clear();
        this._decorationLayer = null;
        this._propertyMgr = null;
        this._statusMgr = null;
        this._envMgr = null;
        this._dataModelMgr = null;

        this._tooltipContainer = null;
        this._screenReaderContainer = null;

        this._isHorizontal = null;

        this.getModule = null;
        this.getNodes = null;
    };

    return InteractionService;
});

define('sap/viz/framework/common/effect/DefaultEffects',[], function(){

    function createSVGElement(name){
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }

    function increaseBrightness(c, percent) {
        var r = c.r,
            g = c.g,
            b = c.b,
            nr, ng, nb;
        if (percent >= 0) {
            nr = Math.round(r + (255 - r) * percent / 100);
            ng = Math.round(g + (255 - g) * percent / 100);
            nb = Math.round(b + (255 - b) * percent / 100);
        } else {
            nr = Math.round(r * (100 + percent) / 100);
            ng = Math.round(g * (100 + percent) / 100);
            nb = Math.round(b * (100 + percent) / 100);
        }
        return d3.rgb(nr, ng, nb).toString();
    }

    function drawingEffectRectangle(color, params){
        var c1 = increaseBrightness(color, 30);
        var c2 = increaseBrightness(color, 50);
        var c3 = increaseBrightness(color, -10);
        var c4 = increaseBrightness(color, 10);

        var gradient = d3.select(createSVGElement('linearGradient'));
        gradient.attr("x1", "0%").attr("y1", "0%");
        if (params.direction === 'horizontal') {
            gradient.attr("y2", "0%").attr("x2", "100%");
        } else {
            gradient.attr("y2", "100%").attr("x2", "0%");
        }

        gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 0).attr("stop-color", c1);
        gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 0.2).attr("stop-color", c2);
        gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 0.8).attr("stop-color", c3);
        gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 1).attr("stop-color", c4);
        return gradient;
    }

    function drawingEffectTriangleUpDown(color, params){
        return drawingEffectRectangle(color, {
            direction: 'vertical'
        });
    }

    function drawingEffectTriangleLeftRight(color, params){
        return drawingEffectRectangle(color, {
            direction: 'horizontal'
        });
    }

    return {
        'glossy': {
            'background': function(color, params){
                var gradient = d3.select(createSVGElement('linearGradient'));
                if (params.direction === 'horizontal') {
                    gradient.attr("x1", "100%").attr("y1", "0%").attr("x2", "0%").attr("y2", "0%");
                } else {
                    gradient.attr("x1", "0%").attr("y1", "0%").attr("x2", "0%").attr("y2", "100%");
                }
                gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 0).attr("stop-color", '#ffffff');
                gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 1).attr("stop-color", color);
                return gradient.node();
            },
            'sector': function(color, params){
                var c0 = color;
                var c2 = increaseBrightness(color, 50);
                var c3 = increaseBrightness(color, -30);

                var rg = createSVGElement('radialGradient');
                rg.setAttribute('cx', 0);
                rg.setAttribute('cy', 0);
                rg.setAttribute('r', params.radius);
                rg.setAttribute('fx', 0);
                rg.setAttribute('fy', 0);
                rg.setAttribute('gradientUnits', "userSpaceOnUse");
                var d3rg = d3.select(rg);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 0).attr("stop-color", c2);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 0.9).attr("stop-color", c0);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 1).attr("stop-color", c3);
                return d3rg;
            },
            '3dSector': function(color, params){
                var c0 = color;
                var c1 = increaseBrightness(color, 10);
                var c2 = increaseBrightness(color, 60);

                var rg = createSVGElement('radialGradient');
                rg.setAttribute('cx', '50%');
                rg.setAttribute('cy', '50%');
                rg.setAttribute('r', '50%');
                rg.setAttribute('fx', '25%');
                rg.setAttribute('fy', '25%');
                rg.setAttribute('gradientUnits', "userSpaceOnUse");
                var d3rg = d3.select(rg);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 0).attr("stop-color", c2);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 0.8).attr("stop-color", c1);
                //d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 0.9).attr("stop-color", c0);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 1).attr("stop-color", c0);
                return d3rg;
            },
            'cubeTop': function(color, params){
                var c1 = increaseBrightness(color, 50);
                var c2 = increaseBrightness(color, -10);

                var gradient = d3.select(createSVGElement('linearGradient'));
                switch (params.direction) {
                    case "LeftRight":
                        gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "0%").attr("x2", "100%");
                        break;
                    case "BottomUp":
                        gradient.attr("x1", "0%").attr("y1", "100%").attr("y2", "0%").attr("x2", "0%");
                        break;
                    case "RightLeft":
                        gradient.attr("x1", "100%").attr("y1", "0%").attr("y2", "0%").attr("x2", "0%");
                        break;
                    case "TopDown":
                        gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "100%").attr("x2", "0%");
                        break;
                    default:
                        gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "0%").attr("x2", "100%");
                        break;
                }
                gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 0).attr("stop-color", c2);
                gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 1).attr("stop-color", c1);
                return gradient;
            },
            'cubeSide': function(color, params){
                var c1 = increaseBrightness(color, 50);
                var c2 = increaseBrightness(color, -10);

                var gradient = d3.select(createSVGElement('linearGradient'));
                gradient.attr("x1", "0%").attr("y1", "100%").attr("y2", "0%").attr("x2", "100%");
                gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 0).attr("stop-color", c2);
                gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 1).attr("stop-color", c1);
                return gradient;
            },
            'sectorSide': function(color, params){
                var c1 = increaseBrightness(color, 50);
                var c2 = increaseBrightness(color, -30);

                var gradient = d3.select(createSVGElement('linearGradient'));
                gradient.attr("x1", "0%").attr("y1", "100%").attr("y2", "0%").attr("x2", "100%");
                gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 0).attr("stop-color", c2);
                gradient.append("stop").attr('stop-opacity', color.a).attr("offset", 1).attr("stop-color", c1);
                return gradient;
            },
            'circle': function(color, params){
                var c0 = color;
                var c1 = increaseBrightness(color, 10);
                var c2 = increaseBrightness(color, 80);

                var rg = createSVGElement('radialGradient');
                rg.setAttribute('cx', '50%');
                rg.setAttribute('cy', '50%');
                rg.setAttribute('r', '50%');
                rg.setAttribute('fx', '50%');
                rg.setAttribute('fy', '20%');
                var d3rg = d3.select(rg);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 0).attr("stop-color", c2);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 0.7).attr("stop-color", c1);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 0.9).attr("stop-color", c0);
                d3rg.append("stop").attr('stop-opacity', color.a).attr("offset", 1).attr("stop-color", c0);
                return d3rg;
            },
            'triangle-up': drawingEffectTriangleUpDown,
            'triangle-down': drawingEffectTriangleUpDown,
            'triangle-left': drawingEffectTriangleLeftRight,
            'triangle-right': drawingEffectTriangleLeftRight,
            'rectangle': drawingEffectRectangle,
            'diamond': drawingEffectRectangle,
            'cross': drawingEffectRectangle,
            'star': drawingEffectRectangle,
            'intersection': drawingEffectRectangle,
            'general': drawingEffectRectangle
        }
    };
});

define('sap/viz/framework/common/effect/DefaultPattern',["sap/viz/framework/common/util/SVG",], function(SVG){

    
    function createPattern(id, width, height) {
        var patternTag = SVG.create("pattern");
        patternTag.setAttribute("patternUnits", "userSpaceOnUse");
        patternTag.setAttribute("width", width);
        patternTag.setAttribute("height", height);
        patternTag.setAttribute("id", id);
        return patternTag;
    }
    
    function createPath(d, fill, stroke, opacity) {
        var pathTag = SVG.create("path");
        pathTag.setAttribute("d", d);
        if (fill) {
            pathTag.setAttribute("fill", fill);
        }
        if (stroke) {
            pathTag.setAttribute("stroke", stroke);
        }
        if (opacity) {
            pathTag.setAttribute("opacity", opacity);
        }        
        
        return pathTag;
    }

    function hatching(id, param) {
        var patternTag = createPattern(id, 7, 7);
        var backgroundTag = SVG.create("rect");
        backgroundTag.setAttribute("fill", "white");
        backgroundTag.setAttribute("x", 0);
        backgroundTag.setAttribute("y", 0);
        backgroundTag.setAttribute("width", 7);
        backgroundTag.setAttribute("height", 7);
        var pathTag = createPath("M2,0L5,0L0,5L0,2L2,0 M7,2L7,5L5,7L2,7L7,2", param.fillColor, null, param.opacity);
        if (param.isNegative) {
            pathTag.setAttribute("transform", "translate(0,7)scale(1,-1)");
        }
        patternTag.appendChild(backgroundTag);
        patternTag.appendChild(pathTag);
        return patternTag;
    }
    

    function diagonalStripe(id, param) {
        var patternTag = createPattern(id, 7, 7);
        var pathTag = createPath("M2,0L5,0L0,5L0,2L2,0 M7,2L7,5L5,7L2,7L7,2", param.fillColor, null, param.opacity);
        if (param.isNegative) {
            pathTag.setAttribute("transform", "translate(0,7)scale(1,-1)");
        }
        patternTag.appendChild(pathTag);
        return patternTag;
    }
    
    function reverseDiagonalStripe(id, param) {
        var patternTag = createPattern(id, 7, 7);
        var pathTag = createPath("M0,2L5,7L2,7L0,5L0,2 M2,0L5,0L7,2L7,5L2,0", param.fillColor, null, param.opacity);
        if (param.isNegative) {
            pathTag.setAttribute("transform", "translate(0,7)scale(1,-1)");
        }
        patternTag.appendChild(pathTag);
        return patternTag;
    }

    function lattice(id, param) {
        var patternTag = createPattern(id, 4, 4);
        var pathTag1 = createPath("M 2, 0 l 0, 4", null, param.fillColor);
        var pathTag2 = createPath("M 0,2 l 4,0", null, param.fillColor);
        patternTag.appendChild(pathTag1);
        patternTag.appendChild(pathTag2);
        return patternTag;
    }

    function diagonalLightStripe(id, param) {
        var patternTag = createPattern(id, 6, 6);
        var pathTag = createPath("M1,0L4.5,0L0,4.5L0,1M6,1L1,6L4.5,6L6,4.5", param.fillColor, null, param.opacity);
        if (param.isNegative) {
            pathTag.setAttribute("transform", "translate(0,6)scale(1,-1)");
        }
        patternTag.appendChild(pathTag);
        return patternTag;
    }

    return {
        "hatching": hatching,
        "diagonalStripe": diagonalStripe,
        "diagonalLightStripe": diagonalLightStripe,
        "reverseDiagonalStripe": reverseDiagonalStripe,
        "lattice": lattice
    };
});

define('sap/viz/framework/common/effect/EffectManager',[
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/template/TemplateManager',
    'sap/viz/framework/common/effect/DefaultEffects',
    'sap/viz/framework/common/effect/DefaultPattern'
], function(
    ObjectUtils,
    TypeUtils,
    TemplateManager,
    DefaultEffects,
    DefaultPattern
) {

    var DEFAULT_GRAPH_TYPE = 'general';

    /**
     *
     * @param svgdef d3 svg defs to store all gradient effect
     * @return TODO: add desc
     */
    function EffectManager(svgdef, enableGhostEffect, templateId) {
        this._defs = svgdef;
        this._enableGhostEffect = enableGhostEffect;
        this._effectIds = {};
        this._templateId = templateId;
        this._templateChanged = true;
        this._template = null;
        this._colorPropertyCache = {};
    }

    function rgba(r, g, b, a, signForOpacity) {
        var temp = {
            r: r,
            g: g,
            b: b,
            a: a,
            toHex: function() {
                return d3.rgb(temp.r, temp.g, temp.b).toString();
            },
            toString: function() {
                if (temp.a == 1 && signForOpacity === true || temp.a < 1) {
                    return "rgba(" + temp.r + "," + temp.g + "," + temp.b + "," + temp.a + ")";
                }
                return temp.toHex();
            }
        };
        return temp;
    }

    function color2rgba(color, a) {
        var nc = d3.rgb(0, 0, 0),
            na = 1,
            signForOpacity;
        if (a) {
            na = a;
            signForOpacity = true;
        }
        if (color != null && typeof(color) === 'object') {
            if (color.rgb) {
                nc = color.rgb();
            } else {
                nc = color;
            }
        } else if (typeof(color) === 'string') {
            color = color.toLowerCase();
            var temp, i, j;
            if (color.indexOf('rgba') >= 0) {
                temp = color.substring(color.indexOf('(') + 1);

                i = temp.lastIndexOf(',');
                j = temp.indexOf(')');
                if (i >= 0 && j >= 0) {
                    var rgbStr = 'rgb(' + temp.substring(0, i) + ')';
                    na = parseFloat(temp.substring(i + 1, j));
                    nc = d3.rgb(rgbStr);
                }
            } else if (color.indexOf('hsla') >= 0) {
                temp = color.substring(color.indexOf('(') + 1);

                i = temp.lastIndexOf(',');
                j = temp.indexOf(')');
                if (i >= 0 && j >= 0) {
                    var hslStr = 'hsl(' + temp.substring(0, i) + ')';
                    na = parseFloat(temp.substring(i + 1, j));
                    nc = d3.hsl(hslStr).rgb();
                }
            } else if (color.indexOf('hsl') >= 0) {
                nc = d3.hsl(color).rgb();
            } else if (color.indexOf('#') >= 0) {
                var r, g, b;
                if (color.length === 4) {
                    r = color.charAt(1);
                    r += r;
                    g = color.charAt(2);
                    g += g;
                    b = color.charAt(3);
                    b += b;
                } else if (color.length === 7) {
                    r = color.substring(1, 3);
                    g = color.substring(3, 5);
                    b = color.substring(5, 7);
                }
                r = parseInt(r, 16);
                g = parseInt(g, 16);
                b = parseInt(b, 16);
                nc = d3.rgb(r, g, b);
            } else {
                nc = d3.rgb(color);
            }
        }
        return rgba(nc.r, nc.g, nc.b, na, signForOpacity);
    }

    function rgba2gray(c) {
        var r = c.r,
            g = c.g,
            b = c.b,
            gc;

        if ((r === g) && (g === b)) {
            gc = Math.round(r + (255 - r) * 0.6);
        } else {
            gc = Math.round((r * 299 + g * 587 + b * 114 + 500) / 1000);
        }
        return rgba(gc, gc, gc, c.a);
    }

    function effectKey(parameters){
        if(parameters.drawingEffect === 'normal' && !parameters.patternEffect && !parameters.graphType){
            return null;
        }
        var sep = '_',
            key = (parameters.drawingEffect || 'normal') + sep +
                parameters.graphType + sep +
                parameters.fillColor + sep +
                parameters.patternEffect + sep +
                parameters.isNegative + sep +
                parameters.direction;
        return parameters.graphType === 'sector' ? key + sep + parameters.radius : key;
    }

    /**
     * 
     * @param param: {
     *      pattern: 'hatching'
     *      fillColor: "red"
     * }
     * 
     */
    EffectManager.prototype._registerPattern = function(param, key, template) {
        var patternEffect = param.patternEffect;
        var defs = this.container();
        
        if (!patternEffect || !defs) {
            return null;
        }
        
        var handler = template && template.patternEffects &&
                template.patternEffects[patternEffect] || DefaultPattern[patternEffect];
        
        if (!handler || !TypeUtils.isFunction(handler)) {
            return null;
        }
        
        var id = this._effectIds[key] = patternEffect + ObjectUtils.guid();
        
        var patternTag = handler(id, param);
        defs.node().appendChild(patternTag);
        
        return id;
    };
    
    function effectUrl(id){
        return "url(#" + id + ")";
    }

    EffectManager.prototype.rgba = rgba;
    EffectManager.prototype.color2rgba = color2rgba;
    EffectManager.prototype.rgba2gray = rgba2gray;

    /**
     * Set template id
     * @param {string} id - template id
     */
    EffectManager.prototype.setTemplateId = function(id){
        this._templateId = id;
        this._templateChanged = true;
    };

    EffectManager.prototype._getTemplate = function(){
        if(this._templateChanged){
            this._template = TemplateManager.get(this._templateId);
            this._templateChanged = false;
        }
        return this._template;
    };

    /**
     *
     * @param parameters
     * {
     *   graphType: 'circle','square','diamond'.....
     *   patternEffect: 'hatching'
     *   drawingEffect,
     *   fillColor,
     *   direction,  "horizontal" means left to right. "vertical" means top to bottom
     * }
     * @return id to use in "fill"
     */
    EffectManager.prototype.register = function(parameters) {
        var drawingEffect = parameters.drawingEffect = parameters.drawingEffect || 'normal';
        var originalColor = parameters.fillColor;

        if (parameters.patternEffect === "nonFill"){
            return "transparent";
        }
        var isColorStringType = typeof(originalColor) === 'string';
        if (isColorStringType){
            if (originalColor.indexOf('url') === 0){
                return originalColor;
            } else {
                originalColor = originalColor.toLowerCase();
                if (originalColor === 'transparent' || originalColor === 'none') {
                    return originalColor;
                }
                parameters.fillColor = originalColor;
            }
        }
        var key = effectKey(parameters);
        var id = this._effectIds[key];
        if (id) {
            return effectUrl(id);
        }

        var rgbaColor;
        if (this._enableGhostEffect) {
            rgbaColor = color2rgba(originalColor);
            rgbaColor = rgba2gray(rgbaColor);
        }

        var template = this._getTemplate();
        if (parameters.patternEffect) {
            rgbaColor = rgbaColor || color2rgba(originalColor);
            id = this._registerPattern({
                patternEffect: parameters.patternEffect,
                isNegative: parameters.isNegative,
                direction: parameters.direction,
                fillColor: rgbaColor,
                opacity: parameters.opacity
            }, key, template);
            if (id) {
                return effectUrl(id);
            }
        }

        // If the required effect is not defined in template, try to look for the default implementation.
        var effectHandlers = template && template.drawingEffects &&
                template.drawingEffects[drawingEffect] || DefaultEffects[drawingEffect];
        // If a handler for a graphType is explicitly set to null, then ignore this effect.
        var handler = effectHandlers && effectHandlers[parameters.graphType] !== null &&
                (effectHandlers[parameters.graphType] || effectHandlers[DEFAULT_GRAPH_TYPE]);

        if (handler && TypeUtils.isFunction(handler)) {

            rgbaColor = rgbaColor || color2rgba(originalColor);
            var effectElement = handler(rgbaColor, {
                radius: parameters.radius,
                direction: parameters.direction
            });

            if (effectElement) {
                // Support d3 selection
                if (TypeUtils.isFunction(effectElement.node)) {
                    effectElement = effectElement.node();
                }
                this._defs.node().appendChild(effectElement);
                // Generate effect ID lazily
                id = this._effectIds[key] = drawingEffect + ObjectUtils.guid();
                effectElement.setAttribute('id', id);
                return effectUrl(id);
            }
        }
        if(!rgbaColor){
            if(isColorStringType && originalColor.indexOf('#') === 0){
                return originalColor;
            }
            rgbaColor = color2rgba(originalColor);
        }
        return rgbaColor.toString();
    };
    
    EffectManager.prototype.container = function(container) {
        if (!arguments.length) {
            return this._defs;
        }
        this._defs = container;
    };

    EffectManager.prototype.ghostEffect = function(_) {
        if (!arguments.length) {
            return this._enableGhostEffect;
        }
        this._enableGhostEffect = _;
    };

    EffectManager.prototype.destroy = function() {
        this._defs = null;
        this._enableGhostEffect = null;
        this._effectIds = null;
        this._colorPropertyCache = null;
    };

    EffectManager.prototype.darken = function(color, val){
        var hsl = d3.hsl(color);
        hsl.l = hsl.l - val;
        return hsl.rgb().toString();
    };

    EffectManager.prototype.lighten = function(color, val){
        var hsl = d3.hsl(color);
        hsl.l = hsl.l + val;
        return hsl.rgb().toString();
    };

    EffectManager.prototype.desaturate = function(color, val){
        var hsl = d3.hsl(color);
        hsl.s = hsl.s - val;
        return hsl.rgb().toString();
    };

    EffectManager.prototype.greyscale = function(color){
        var hsl = d3.hsl(color);
        hsl.s = 0;
        return hsl.rgb().toString();
    };


    var _getStrength = function(color){
        var number;
        var reg = /[0-9]+/;
        if (reg.test(color)){
            number = color.match(/[0-9]+/);
        } else {
            number = 20;
        }
        return (+number) / 100;
    };

    EffectManager.prototype.isColorProp = function(prop){
        return /darken|lighten|desaturate|greyscale/.test(prop);
    };

    EffectManager.prototype.parseColorProperty = function(prop, defaultColor){
        var key = prop + "/" + defaultColor;
        var cached = this._colorPropertyCache[key];
        if (cached !== undefined){
            return cached;
        }
        var color = null;
        if(prop.indexOf('darken') >= 0 ){
            color = this.darken(defaultColor, _getStrength(prop));
        }else if(prop.indexOf('lighten') >= 0){
            color = this.lighten(defaultColor, _getStrength(prop));
        }else if(prop.indexOf('desaturate') >= 0){
            color = this.desaturate(defaultColor, _getStrength(prop));
        }else if(prop.indexOf('greyscale') >= 0){
            color = this.greyscale(defaultColor);
        }else{
            color = this.color2rgba(prop);
        }
        this._colorPropertyCache[key] = color;
        return color;
    };

    return EffectManager;
});

define('sap/viz/framework/env/EnvManager',[
    'sap/viz/framework/common/util/oo',
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/property/PropertyManager"
], function(
    oo,
    Constants,
    UADetector,
    PropertyManager
    ) {
    var EnvManager = function() {
        EnvManager.superclass.constructor.apply(this, arguments);
        var eObj = {};
        eObj[Constants.DIRECTION.LANG_DIR] = Constants.DIRECTION.LTR;
        this.add(eObj);
    };

    oo.extend(EnvManager, PropertyManager);

    EnvManager.prototype.isRTL = function() {
        //just return currect language direction
        var isRTL = false;
        if (this.get(Constants.DIRECTION.LANG_DIR) === Constants.DIRECTION.RTL) {
            isRTL = true;
        }
        return isRTL;
    };
    
    EnvManager.prototype.isRTLAnchorCompensation = function () {
        //for non-IE browsers, if the language direction is RTL, 
        //we should adjuct text location for text-anchor:start or 
        //text-anchor:end strings. 
        //please refer to http://www.w3.org/International/tutorials/svg-tiny-bidi/
        return (this.isRTL() && (!UADetector.isIE()));
    };
    
    EnvManager.prototype.textAnchor = function () {
        //since IE has bidirectional issue, we have to use text-anchor:start. 
        //For non-IE and RTL, text-anchor is end.
        //please refer to <SAP Wiki>/wiki/display/BISHGVisualization/RTL        
        var textAnchor = "start";
        if (this.isRTLAnchorCompensation()) {
            textAnchor = "end";
        }
        return textAnchor;
    };

    EnvManager.prototype.reverseDots = function () {
        //for RTL and IE, we have to reverse ellipsis dots.
        //please refer to <JIRA>BITSDC1-8069
        return (this.isRTL() && (UADetector.isIE()));
    };

    return EnvManager;
});

define('sap/viz/framework/common/util/TimeUtil',[
    "sap/viz/framework/common/util/TypeUtils",
    'sap/viz/framework/common/util/FiscalUtil',
    "sap/viz/framework/common/util/Constants"
], function (
    TypeUtils,
    FiscalUtil,
    Constants
) {

    // Const --------------------------------------------------------------
    var floor = Math.floor;
    var ceil = Math.ceil;
    var max = Math.max;
    var min = Math.min;

    var DEFAULT_LEVELS = ['day', 'month', 'year'];
    var ALL_LEVELS = ['second','minute','hour','day','week','month','quarter','halfyear','year'];

    var ONE_SECOND = 1000;
    var ONE_MINUTE = ONE_SECOND * 60;
    var ONE_HOUR = ONE_MINUTE * 60;
    var ONE_DAY = ONE_HOUR * 24;
    var ONE_WEEK = ONE_DAY * 7;
    var ONE_MONTH = ONE_WEEK * 4;
    var ONE_QUARTER = ONE_DAY * 91;
    var HALF_YEAR = ONE_QUARTER * 2;
    var ONE_YEAR = ONE_DAY * 365;

    var daysNum = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    var levelList = {
        'second': {
            idx: 0
        },
        'minute': {
            idx: 1
        },
        'hour': {
            idx: 2
        },
        'day': {
            idx: 3
        },
        'week': {
            idx: 4
        },
        'month': {
            idx: 5
        },
        'quarter': {
            idx: 6
        },
        'halfyear': {
            idx: 7
        },
        'year': {
            idx: 8
        },
        //fiscal levels cannot be used with regular levels 
        'fiscal_period': {
            idx: 1001
        },
        'fiscal_year': {
            idx: 1002
        }
    };

    var TimeUtil;

    //To use the function, we must call bind().
    function levelComparator(a, b){
        return this.levelList[a].idx - this.levelList[b].idx;
    }

    function normalizeLevelName(name){
        return String(name).toLowerCase();
    }

    //To use the function, we must call bind().
    function normalizeLevels(levels, _levelCtx) {
        //ctx should be time axis (fiscal axis) body.
        var levelCtx = _levelCtx || TimeUtil;
        if(levels){
            if(TypeUtils.isArray(levels)){
                levels = levels.map(normalizeLevelName).filter(function(level){ return levelCtx.levelList[level];});
            }else{
                levels = [normalizeLevelName(levels)].filter(function(level){ return levelCtx.levelList[level];});
            }
            
            if(levels.length){
                levels.sort(levelComparator.bind(levelCtx));
                levels = levels.filter(function(level, i){
                    return !i || levels[i - 1] !== level;
                });
            }

        }
        return levels && levels.length ? levels : DEFAULT_LEVELS;
    }


    function getTimestamp(utc, y, M, d, h, m, s) {
        M = M || 0;
        d = d || 1;
        h = h || 0;
        m = m || 0;
        s = s || 0;
        if (utc) {
            return Date.UTC(y, M, d, h, m, s);
        }
        return new Date(y, M, d, h, m, s).getTime();
    }


    function getTimeTable(d, utc) {
        if(isTimestamp(d)){
            d = new Date(d);
        }
        return {"second": getSeconds(d, utc),
                "minute": getMinutes(d, utc),
                "hour":   getHours(d, utc),
                "day":    getDate(d, utc),
                "month":  getMonth(d, utc),
                "year":   getFullYear(d, utc)};
    }

    function getSeconds(d, utc) {
        return utc ? d.getUTCSeconds() : d.getSeconds();
    }

    function getMinutes(d, utc) {
        return utc ? d.getUTCMinutes() : d.getMinutes();
    }

    function getHours(d, utc) {
        return utc ? d.getUTCHours() : d.getHours();
    }

    function getDate(d, utc) {
        return utc ? d.getUTCDate() : d.getDate();
    }

    function getMonth(d, utc) {
        return utc ? d.getUTCMonth() : d.getMonth();
    }

    function getQuarter(d, utc) {
        var m =  utc ? d.getUTCMonth() : d.getMonth();
        return Math.floor(m/3);
    }

    function getHalfYear(d, utc){
        var m =  utc ? d.getUTCMonth() : d.getMonth();
        return Math.floor(m/6);
    }

    function getFullYear(d, utc) {
        return utc ? d.getUTCFullYear() : d.getFullYear();
    }

    //get week day from monday to sundy. monday is 1, sunday is 7
    function getDay(d, utc) {
        return (utc ? d.getUTCDay() : d.getDay()) || 7;
    }

    function setDate(d, v, utc) {
        if (utc) {
            d.setUTCDate(v);
        } else {
            d.setDate(v);
        }
    }

    function setMonth(d, v, utc) {
        if (utc) {
            d.setUTCMonth(v);
        } else {
            d.setMonth(v);
        }
    }

    function setFullYear(d, v, utc){
        if (utc) {
            d.setUTCFullYear(v);
        } else {
            d.setFullYear(v);
        }
    }

    function addDays(d, count, utc) {
        setDate(d, getDate(d, utc) + count, utc);
    }

    function addMonths(d, count, utc) {
        setMonth(d, getMonth(d, utc) + count, utc);
    }

    function addFullYears(d, count, utc){
        setFullYear(d, getFullYear(d, utc) + count, utc);
    }

    function isSameYear(d1, d2, utc){
        if(!d1 || !d2){return false;}    
        d1 = isTimestamp(d1)? new Date(d1): d1;
        d2 = isTimestamp(d2)? new Date(d2): d2;
        
        if(utc){
            return d1.getUTCFullYear() === d2.getUTCFullYear();
        }else{
            return d1.getFullYear() === d2.getFullYear();  
        }
    }

    function isSameHalfYear(d1, d2, utc){
        if(!d1 || !d2){return false;}    
        d1 = isTimestamp(d1)? new Date(d1): d1;
        d2 = isTimestamp(d2)? new Date(d2): d2;
        
        if(!isSameYear(d1, d2, utc)){
            return false;
        }
        return getHalfYear(d1, utc) === getHalfYear(d2, utc);
    }

    function isSameQuarter(d1, d2, utc){
        if(!d1 || !d2){return false;}    
        d1 = isTimestamp(d1)? new Date(d1): d1;
        d2 = isTimestamp(d2)? new Date(d2): d2;
        if(!isSameYear(d1, d2, utc)){
            return false;
        }
        return getQuarter(d1, utc) === getQuarter(d2, utc);
    }

    function isSameMonth(d1, d2, utc) {   
        if(!d1 || !d2){return false;}    
        d1 = isTimestamp(d1)? new Date(d1): d1;
        d2 = isTimestamp(d2)? new Date(d2): d2;

        if(!isSameYear(d1, d2, utc)){
            return false;
        }
        
        if(utc){
            return d1.getUTCMonth() === d2.getUTCMonth();
        }else{
            return  d1.getMonth() === d2.getMonth();  
        }
    }

    function isSameWeek(d1, d2, utc, weekConfig){
        if(!d1 || !d2){ return false; }   
        if(d1 instanceof Date){ d1 = d1.getTime(); }
        if(d2 instanceof Date){ d2 = d2.getTime(); }
        if(Math.abs(d2 - d1) > ONE_WEEK ){  //within seven day
            return false;
        }

        var w1 = getWeek(d1, utc, weekConfig);
        var w2 = getWeek(d2, utc, weekConfig);
        return w1 === w2;
    }

    function isSameDay(d1, d2, utc) {   
        if(!d1 || !d2){return false;} 
        d1 = isTimestamp(d1)? new Date(d1): d1;
        d2 = isTimestamp(d2)? new Date(d2): d2;

        if(!isSameMonth(d1, d2, utc)){
            return false;
        }
        if(utc){
            return d1.getUTCDate() === d2.getUTCDate();
        }else{
            return d1.getDate() === d2.getDate();
        }
    }

    function isSameHour(d1, d2, utc){
        if(!d1 || !d2){return false;} 
        d1 = isTimestamp(d1)? new Date(d1): d1;
        d2 = isTimestamp(d2)? new Date(d2): d2;
        if(!isSameDay(d1, d2, utc)){
            return false;
        }
        if(utc){
            return d1.getUTCHours() === d2.getUTCHours();
        }else{
            return  d1.getHours() === d2.getHours() ;
        }
    }    

    function isSameMinute(d1, d2, utc){
        if(!d1 || !d2){return false;} 
        d1 = isTimestamp(d1)? new Date(d1): d1;
        d2 = isTimestamp(d2)? new Date(d2): d2;
        if(!isSameHour(d1, d2, utc)){
            return false;
        }
        if(utc){
            return d1.getUTCMinutes() === d2.getUTCMinutes();
        }else{
            return  d1.getHours() === d2.getHours();
        }
    }

    function isSameSecond(d1, d2, utc){
        if(!d1 || !d2){return false;} 
        d1 = isTimestamp(d1)? new Date(d1): d1;
        d2 = isTimestamp(d2)? new Date(d2): d2;
        if(!isSameMinute(d1, d2, utc)){
            return false;
        }
        if(utc){
            return d1.getUTCSeconds() === d2.getUTCSeconds();
        }else{
            return  d1.getSeconds() === d2.getSeconds();
        }
    }

    var levels = ['FullYear', 'Month', 'Date', 'Hours', 'Minutes', 'Seconds', 'Milliseconds'];

    function pickweekConfig(weekConfig, originProps){
        if(!weekConfig){
            var levelConfig = originProps && originProps.get("timeAxis.levelConfig");
            weekConfig =levelConfig && levelConfig.week;
        }
        return weekConfig;
    }
   

    function truncate(d, level, utc) {
        d = isTimestamp(d)? new Date(d):d;
        var ret = new Date(0, 0, 1); // Ensure it is 1970/1/1 for all timezones
        ret = utc? new Date(Date.UTC(ret)):ret;   //a tricky trap of UTC!!
        var levelIdx = levels.indexOf(level);
        var UTC = utc ? 'UTC' : '';
        for (var i = 0; i < levels.length; ++i) {
            var curLevel = levels[i];
            var v;
            if (i <= levelIdx) {
                v = d['get' + UTC + curLevel]();
            } else {
                v = 0;
                if (curLevel === 'Date') {
                    v = 1;
                }
            }
            ret['set' + UTC + curLevel](v);
        }
        return ret;
    }

    function isDateValid(d){
        return d instanceof Date && TypeUtils.isNumber(d.getTime());
    }

    function truncateByLevel(d, level, utc, originProps, weekConfig) {
        var t;
        //for fiscal we need special handling
        if (level === Constants.FISCAL.PERIOD) {
            t = d;
        }
        else if (level === Constants.FISCAL.YEAR) {
            t = FiscalUtil.fiscalYearFloor(d, originProps);
        }
        else {
            d = isTimestamp(d) ? new Date(d) : d;
            if (!isDateValid(d) || !level) {
                return null;
            }
            
            level = level.toLowerCase();
            switch (level) {
                case 'second':
                    t = truncate(d, "Seconds", utc);
                    break;
                case 'minute':
                    t = truncate(d, "Minutes", utc);
                    break;
                case 'hour':
                    t = truncate(d, "Hours", utc);
                    break;
                case 'day':
                case "date":
                    t = truncate(d, "Date", utc);
                    break;
                case 'week':
                    weekConfig = pickweekConfig(weekConfig, originProps);
                    t = new Date(d);
                    var w = getWeek(d, utc, weekConfig);
                    var y = getFullYear(t, utc);
                    var m = getMonth(t, utc);
                    if (m === 11 && w === 1) {
                        //Special handling for week 1.
                        y++;
                    } else if (m === 0 && (w === 52 || w === 53)) {
                        y--;
                    }
                    t = getDateByWeek(y, w, utc, weekConfig);
                    break;
                case 'month':
                    t = truncate(d, "Month", utc);
                    break;
                case 'quarter':
                    t = truncate(d, "Month", utc);
                    setMonth(t, floor(getMonth(t, utc) / 3) * 3, utc);
                    break;
                case 'halfyear':
                    t = truncate(d, "Month", utc);
                    setMonth(t, floor(getMonth(t, utc) / 6) * 6, utc);
                    break;
                case 'year':
                    t = truncate(d, "FullYear", utc);
                    break;
            }
            t = (t ? t.getTime() : null);
        }
        return t;
    }

    //e.g Minute    01:23 -> 01:59
    //    hour    06:23:21 -> 06:59:59
    //    day     Jan.1 08:29:12 -> Jan.1 23:59:59
    //    month   Jan.1 08:29:12 -> Jan.31 23:59:59
    //    Year    2009.Feb.02 -> 2009.Dec.31 23:59:59
    function ceilByLevel(d, level, utc, originProps, weekConfig) {
        //for fiscal we need special handling
        var t;
        if (level === Constants.FISCAL.PERIOD) {
            t = d;
        }
        else if (level === Constants.FISCAL.YEAR) {
            t = FiscalUtil.fiscalYearCeil(d, originProps);
        }
        else {
            d = isTimestamp(d) ? new Date(d) : d;
            if (!isDateValid(d) || !level) {
                return null;
            }
            level = level.toLowerCase();
            if (level === 'hour') {
                d = truncate(d, "Hours", utc);
                d.setMinutes(59, 59, 999);
            } else if (level === 'minute') {
                d = truncate(d, "Minutes", utc);
                d.setSeconds(59, 999);
            } else if (level === 'second') {
                d = truncate(d, "Seconds", utc);
                d.setMilliseconds(999);
            } else if (level === 'day' || level === "date") {
                d = truncate(d, "Date", utc);
                addDays(d, 1, utc);
            } else if (level === "month") {
                d = truncate(d, "Month", utc);
                addMonths(d, 1, utc);
            } else if (level === 'year') {
                d = truncate(d, "FullYear", utc);
                addFullYears(d, 1, utc);
            } else if (level === 'week') {
                weekConfig = pickweekConfig(weekConfig, originProps);
                d = new Date(truncateByLevel(d, "week", utc, originProps, weekConfig));
                addDays(d, 7, utc);
            } else if (level === 'quarter') {
                d = new Date(truncateByLevel(d, "quarter", utc));
                addMonths(d, 3, utc);
            } else if (level === 'halfyear') {
                if (d.getMonth() < 6) {
                    d = truncate(d, "FullYear", utc);
                    addMonths(d, 6, utc);
                }
                else {
                    d = truncate(d, "FullYear", utc);
                    addFullYears(d, 1, utc);
                }
            } else {
                return null;
            }

            t = d.getTime();
            if (level !== 'hour' && level !== 'minute' && level !== 'second') {
                t -= ONE_SECOND;
            }
        }
        return t;   
    }

    //e.g Minute    01:23 -> 01:00
    //    hour    06:23:21 -> 06:00:00
    //    day     Jan.1 08:29:12 -> Jan.1 00:00:00
    //    month   Jan.1 08:29:12 -> Jan.1 00:00:00
    //    Year    2009.Feb.02 -> 2009.Jan.1 00:00:00
    function floorByLevel(d, level, utc, originProps, weekConfig) {
        //the function is just used by first/last labels feature.
        var t;
        //for fiscal we need special handling
        if (level === Constants.FISCAL.PERIOD) {
            t = d;
        }
        else if (level === Constants.FISCAL.YEAR) {
            t = FiscalUtil.fiscalYearFloor(d, originProps);
        }
        else {
            d = isTimestamp(d) ? new Date(d) : d;
            if (!isDateValid(d) || !level) {
                return null;
            }
            level = level.toLowerCase();
            if (level === 'hour') {
                d = truncate(d, "Hours", utc);
                d.setMinutes(0, 0, 0);
            } else if (level === 'minute') {
                d = truncate(d, "Minutes", utc);
                d.setSeconds(0, 0);
            } else if (level === 'second') {
                d = truncate(d, "Seconds", utc);
                d.setMilliseconds(0);
            } else if (level === 'day' || level === "date") {
                d = truncate(d, "Date", utc);
            } else if (level === "month") {
                d = truncate(d, "Month", utc);
            } else if (level === 'year') {
                d = truncate(d, "FullYear", utc);
            } else if (level === 'week') {
                weekConfig = pickweekConfig(weekConfig, originProps);
                d = new Date(truncateByLevel(d, "week", utc, originProps, weekConfig));
            } else if (level === 'quarter') {
                d = new Date(truncateByLevel(d, "quarter", utc));
            } else if (level === 'halfyear') {
                if (d.getMonth() < 6) {
                    d = truncate(d, "FullYear", utc);
                }
                else {
                    d = truncate(d, "FullYear", utc);
                    addMonths(d, 6, utc);
                }
            } else {
                return null;
            }

            t = d.getTime();
            //we do not add one second here.
        }
        return t;   
    }

    // Public ------------------------------------------------------------
    var getAllDiscreteValues = function (start, end, step, count, align, limit, pivot, utc) {
        return values(start, end, step, count, Constants.FISCAL.UNIT, function () {
            //always accept all values. So always first.
            return true;
        }, limit, !align && pivot, utc);
    };

    function fiscal_periods(start, end, step, count, align, limit, pivot, utc, allowFirstValue, timeBodyCtx) {
        var originProps = timeBodyCtx._properties.origin;
        //for fiscal period, we should make sure "1" always displayed.
        return FiscalUtil.pickPeriodValues(start, end, step, count, allowFirstValue, originProps);
    }

    function fiscal_years(start, end, step, count, align, limit, pivot, utc, allowFirstValue, timeBodyCtx) {
        var originProps = timeBodyCtx._properties.origin;
        //for fiscal year, we should get right "year" values.
        return FiscalUtil.pickYearValues(start, end, step, count, originProps);
    }

    function seconds(start, end, step, count, align, limit, pivot, utc) {
        return values(start, end, step, count, ONE_SECOND, function(t, unit) {
            var s = getSeconds(new Date(t * unit), utc);
            var section = step <= 30 ? step : 15;
            return s % section === 0;
        }, limit, !align && pivot);
    }

    function minutes(start, end, step, count, align, limit, pivot, utc) {
        return values(start, end, step, count, ONE_MINUTE, function(t, unit) {
            var m = getMinutes(new Date(t * unit), true);
            var section = step <= 30 ? step : 15;
            return m % section === 0;
        }, limit, !align && pivot, utc);
    }

    function getTimeOffset( utc ){
        var offset = utc ? 0 : (new Date(0)).getTimezoneOffset() * ONE_MINUTE;
        return offset;
    }
    function hours(start, end, step, count, align, limit, pivot, utc) {
        return values(start, end, step, count, ONE_HOUR, function(t, unit) {
            var h = getHours(new Date(t * unit), true);
            var section = 1;
            if (step % 24 === 0) {
                section = 24;
            } else if (step % 12 === 0) {
                section = 12;
            } else if (step % 6 === 0) {
                section = 6;
            } else if (step % 3 === 0) {
                section = 3;
            } else if (step > 24) {
                section = 24;
            }
            return h % section === 0;
        }, limit, !align && pivot, utc);
        
        
    }

    function days(start, end, step, count, align, limit, pivot, utc, allowFirstValue) {
        limit = limit || [];
        count = count > 0 ? count : Infinity;
        var limitStart = max(start, limit[0] || -Infinity);
        var limitEnd = min(end, limit[1] || Infinity);
        var ds = new Date(start);
        var de = new Date(end);
        var ls = new Date(limitStart);
        var le = new Date(limitEnd);

        var times = [];
        var t;

        var previousValue;
        if (!align) {
            if (isTimestamp(pivot)) {
                t = truncate(pivot, 'Date', utc);
                while (t.getTime() > start) {
                    addDays(t, -step, utc);
                }
            } else {
                t = truncate(start, 'Date', utc);
                if (start > t.getTime()) {
                    addDays(t, 1, utc);
                }
            }
            while (t.getTime() <= limitEnd && times.length < count) {
                var tempTime = t.getTime();   
                if (tempTime >= limitStart) {
                    if(allowFirstValue && times.length === 0 &&
                       tempTime > limitStart) {
                        if(!previousValue) {
                            addDays(t, -step, utc);
                            previousValue = t.getTime(); 
                            addDays(t, step, utc);
                        }
                        
                        if(previousValue !== t.getTime()) {
                            times.push(previousValue);
                        }
                    }
                    times.push(t.getTime());
                }
                previousValue = tempTime;
                addDays(t, step, utc);
            }
        } else {
            t = truncate(ls, 'Month', utc);
            while (t.getTime() <= limitEnd && times.length < count) {
                var m = getMonth(t, utc);
                var arr = getNumbers(daysNum[m], step);
                for (var i = 0; i < arr.length && times.length < count; ++i) {
                    if(i > 0 || !previousValue) {
                        previousValue = t.getTime();
                    }
                    setDate(t, arr[i], utc);
                    if (getMonth(t, utc) === m) {
                        var tt = t.getTime();
                        if (tt >= limitStart && tt <= limitEnd && times.length < count) {
                            if(allowFirstValue && times.length === 0 && 
                                tt > limitStart && previousValue &&
                                previousValue !== tt) {
                                times.push(previousValue);
                            }
                            times.push(tt);
                        }
                    } else {
                        break;
                    }
                }
                previousValue = t.getTime();
                setDate(t, 1, utc);
                setMonth(t, m + 1, utc);
            }
            if ((count === Infinity || times.length === 1) &&
                getFullYear(ds, utc) === getFullYear(de, utc) &&
                getMonth(ds, utc) === getMonth(de, utc) &&
                getDate(de, utc) === getDate(le, utc)) {
                t = new Date(end);
                addDays(t, 1, utc);
                if (getMonth(t, utc) !== getMonth(ds, utc)) {

                    var lastDay = truncate(de, 'Date', utc);
                    t = new Date(times[times.length - 1]);
                    if (lastDay.getDate() - t.getDate() >= step ||
                        // February is special
                        (step >= 5 && getMonth(de, utc) === 1)) {
                        times.push(lastDay.getTime());
                    } else {
                        times[times.length - 1] = lastDay.getTime();
                    }
                }
            }
        }
        return times;
    }

    //generate values of monday 00:00:00 of weeks
    function weeks(start, end, step, count, align, limit, pivot, utc, allowFirstValue, timeBodyCtx, weekConfig) {
        limit = limit || [];
        var times = [];
        var limitStart = max(start, limit[0] || -Infinity);
        var limitEnd = min(end, limit[1] || Infinity);
        limitStart = truncateByLevel(limitStart, "week", utc, null, weekConfig);
        var ds = new Date(truncateByLevel(start, "day"));
        var de = new Date(end);
        var ls = new Date(limitStart);
        var le = new Date(limitEnd);
        var t, y;
        count = count > 0 ? count : Infinity;
        
        var previousValue;
        if (!align) {
            if (isTimestamp(pivot)) {
                t = new Date(pivot);
                while (t > ds) {
                    addDays(t, -step * 7, utc);
                }
                y = getFullYear(t, utc);
                t = getDateByWeek(y, getWeek(t, utc, weekConfig), utc, weekConfig);
            } else {
                t = ds;
                y = getFullYear(t, utc);
                t = getDateByWeek(y, getWeek(t, utc, weekConfig), utc, weekConfig);
                if (t < ds) {
                    addDays(t, 7, utc);
                }
            }
            
            while (t <= le && times.length < count) {
                if (t >= ls) {
                    if(allowFirstValue && times.length === 0 && 
                        t > ls) {
                        if(!previousValue) {
                            addDays(t, -step * 7, utc);
                            previousValue = t.getTime();
                            addDays(t, step * 7, utc);
                        }
                        
                        if(previousValue !== t.getTime()) {
                            times.push(previousValue);
                        }
                    }
                    times.push(t.getTime());
                }
                previousValue = t.getTime();
                addDays(t, step * 7, utc);
            }
        } else {
            y = getFullYear(ls, utc);
            var limitEndYear = getFullYear(le, utc);
            while (y <= limitEndYear && times.length < count) {
                var weekCount = isLongYear(y) ? 53 : 52;
                if (y === limitEndYear) {
                    weekCount = 60;
                }
                var arr = getNumbers(weekCount, step);
                
                for (var i = 0; i < arr.length && times.length < count; ++i) {
                    if(t) {
                        previousValue = t.getTime();
                    }
                    t = getDateByWeek(y, arr[i], utc, weekConfig);
                    if (getWeek(t, utc, weekConfig) === arr[i]) {
                        var tt = t.getTime();
                        if (tt <= limitEnd && times.length < count) {   
                            if ( tt >= limitStart ) { 
                                if(allowFirstValue && times.length === 0 && 
                                    tt > limitStart && previousValue &&
                                    previousValue !== tt) {
                                    times.push(previousValue);
                                }
                                times.push(tt);
                            }
                        }else{
                            break;
                        }   
                    }else{
                        break;
                    }
                }
                y++;
            }
            y = getFullYear(ds, utc);
            if (step > 50 && times.length === 1 &&
                y === getFullYear(de, utc) &&
                end === limitEnd) {
                t = getDateByWeek(y, isLongYear(y) ? 53 : 52, utc);
                times.push(t.getTime());
            }
            if (times && times.length && times.length < count){
                //In case missing the last week if the last is first one of next year.
                var extra = new Date(times[times.length - 1]);
                addDays(extra, 7 * step, utc);
                var last = new Date(times[times.length - 1]);
                if (y === getFullYear(de, utc) && extra.getTime() !== last.getTime() && extra <= de){
                    times.push(extra.getTime());
                }
            }

        }
        return times;
    }

    function months(start, end, step, count, align, limit, pivot, utc, allowFirstValue) {
        limit = limit || [];
        count = count > 0 ? count : Infinity;
        var times = [];
        var limitStart = max(start, limit[0] || -Infinity);
        var limitEnd = min(end, limit[1] || Infinity);
        limitStart = truncateByLevel(limitStart, "Day", utc );
        var ds = new Date(truncateByLevel(start, "Day", utc));
        var de = new Date(end);
        var ls = new Date(limitStart);
        var le = new Date(limitEnd);
        var t;
        var previousValue;
        if (!align && isTimestamp(pivot)) {
            t = truncate(pivot, 'Month', utc);
            while (t > ds) {
                addMonths(t, -step, utc);
            }
        } else {
            t = truncate(ds, 'Month', utc);
            if (!allowFirstValue && ds.getTime() !== t.getTime()) {
                addMonths(t, 1, utc);
            }
            if (align) {
                var section = step <= 6 ? step : 3;
                while (getMonth(t, utc) % section !== 0) {
                    addMonths(t, 1, utc);
                }
            }
        }
        while (t.getTime() <= limitEnd && times.length < count) {
            var tt = t.getTime();
            if (tt >= limitStart) {
                if(allowFirstValue && times.length === 0 && 
                    tt > limitStart) {
                    if(!previousValue) {
                        addMonths(t, -step, utc);
                        previousValue = t.getTime();
                        addMonths(t, step, utc);
                    }
                    
                    if(previousValue !== tt) {
                        times.push(previousValue);
                    }
                }
                times.push(tt);
            }
            previousValue = tt;
            addMonths(t, step, utc);
        }
        if ((count === Infinity || times.length === 1) &&
            getFullYear(ds, utc) === getFullYear(de, utc) &&
            getMonth(de, utc) === 11 &&
            getMonth(le, utc) === 11 &&
            step > 2) {
            t = new Date(times[times.length - 1]);
            var lastMonth = getTimestamp(utc, getFullYear(de, utc), 11);
            if (11 - getMonth(t, utc) >= step - 1) {
                times.push(lastMonth);
            } else if (times.length > 1) {
                times[times.length - 1] = lastMonth;
            }
        }
        return times;
    }

    function quarters(start, end, step, count, align, limit, pivot, utc, allowFirstValue) {
        step *= 3;
        limit = limit || [];
        count = count > 0 ? count : Infinity;
        var times = [];
        var limitStart = max(start, limit[0] || -Infinity);
        var limitEnd = min(end, limit[1] || Infinity);
        limitStart = truncateByLevel(limitStart , "Month", utc );
        var ds = new Date( truncateByLevel(start, "Month", utc));
        var de = new Date(end);

        var t;
        var previousValue;
        if (!align) {
            if (!isTimestamp(pivot)) {
                pivot = start;
            }
            t = truncate(pivot, 'Month', utc);
            setMonth(t, floor(getMonth(t, utc) / 3) * 3, utc);
            while (t > ds) {
                addMonths(t, -step, utc);
            }
        } else {
            t = truncate(ds, 'Month', utc);
            if (!allowFirstValue && ds.getTime() !== t.getTime()) {
                addMonths(t, 1, utc);
            }
            var section = step % 12;
            while (getMonth(t, utc) % section !== 0) {
                addMonths(t, 1, utc);
            }
        }
        while (t.getTime() <= limitEnd && times.length < count) {
            var tempValue = t.getTime();
            if (tempValue >= limitStart) {
                if(allowFirstValue && times.length === 0 && 
                    tempValue > limitStart) {
                    if(!previousValue) {
                        addMonths(t, -step, utc);
                        previousValue = t.getTime(); 
                        addMonths(t, step, utc);
                    }
                    
                    if(previousValue !== tempValue) {
                        times.push(previousValue);
                    }
                }
                times.push(tempValue);
            }
            previousValue = tempValue;
            addMonths(t, step, utc);
        }
        return times;
    }

    function halfyears(start, end, step, count, align, limit, pivot, utc) {
        limit = limit || [];
        var limitStart = max(start, limit[0] || -Infinity);
        limitStart = truncateByLevel(limitStart, "day", utc );
        var limitEnd = min(end, limit[1] || Infinity);
        var times = years(start, end, 1, count, align, null, null, utc);
        var t, m = 6,
            i;
        for (i = 0; i < times.length; i += 2) {
            t = getTimestamp(utc, getFullYear(new Date(times[i]), utc), m);
            times.splice(i + 1, 0, t);
        }
        t = new Date(start);
        var y = getFullYear(t, utc);
        var begin = getTimestamp(utc, y, 0);
        if (start > begin && step % 2 !== 0) {
            var first = getTimestamp(utc, y, m);
            if (getMonth(t, utc) < m || t.getTime() === first) {
                times.unshift(first);
            }
        }
        return times.filter(function(t, i) {
            return t >= limitStart && t <= limitEnd && i % step === 0;
        });
    }

    function years(start, end, step, count, align, limit, pivot, utc, allowFirstValue) {
        limit = limit || [];
        var limitStart = max(start, limit[0] || -Infinity);
        limitStart = truncateByLevel(limitStart, "day", utc );
        var limitEnd = min(end, limit[1] || Infinity);
        var startYear = getFullYear(new Date(limitStart), utc);
        var endYear = getFullYear(new Date(limitEnd), utc);
        if (limitStart > getTimestamp(utc, startYear, 0)) {
            startYear++;
        }
        var times = [];
        var t;
        var previousValue;
        if (!align && isTimestamp(pivot)) {
            t = getFullYear(new Date(pivot), utc);
            while (t > startYear) {
                t -= step;
            }
        } else {
            t = startYear;
            if (align) {
                while (t % step !== 0) {
                    ++t;
                }
            }
        }
        count = count > 0 ? count : Infinity;
        var tt;
        while (t <= endYear && times.length < count) {
            tt = getTimestamp(utc, t, 0);
            if (tt >= limitStart) {
                if(allowFirstValue && times.length === 0 && 
                    tt > limitStart) {
                    if(!previousValue) {
                        t -= step;
                        previousValue = getTimestamp(utc, t, 0);
                        t += step;                        
                    }
                    
                    if(previousValue !== tt) {
                        times.push(previousValue);
                    }
                }            
                times.push(tt);
            }
            previousValue = tt;
            t += step;
        }
        return times;
    }   

    //-------------------------week utiliy----------------------------------

    function getWeek(date, utc, weekConfig) {
        if(weekConfig && weekConfig.type && weekConfig.type.indexOf("Gregorian")>-1){
            return getWeekInGRG(date, utc, weekConfig);
        }else{
            return getWeekInISO(date, utc);
        }
    }

    function getDateByWeek(year, week, utc, weekConfig) {
        if(weekConfig && weekConfig.type && weekConfig.type.indexOf("Gregorian")>-1){
            return getDateByWeekInGRG(year, week, utc, weekConfig);
        }else{
            return getDateByWeekInISO(year, week, utc);
        }
    }

    function getWeekInISO(date, utc){
        // See http://en.wikipedia.org/wiki/ISO_week_date
        date = isTimestamp(date)? new Date(date):date;
        var year = getFullYear(date, utc);
        var month = getMonth(date, utc);
        // Because of daylight time, one day might not be 24 hours,
        // so can't calc day count using const ONE_DAY.
        var dayCount = 0;
        for (var i = 0; i < month; ++i) {
            dayCount += daysNum[i];
        }
        dayCount += getDate(date, utc) - 1;
        // first 2 months are not affected by leap year.
        if (!isLeapYear(year) && dayCount >= 60) {
            dayCount--;
        }
        var w = floor((dayCount - getDay(date, utc) + 11) / 7);
        if (!w) {
            return getWeekInISO(getTimestamp(utc, year - 1, 11, 31), utc);
        } else if (w === 53 && !isLongYear(year)) {
            return 1;
        }
        return w; 
    }

    function getDateByWeekInISO(year, week, utc){
        // See http://en.wikipedia.org/wiki/ISO_week_date
        var weekCount = isLongYear(year) ? 53 : 52;
        if (week > weekCount) {
            week -= weekCount;
            year++;
            weekCount = isLongYear(year) ? 53 : 52;
        }
        var weekday = 1;
        var j4 = getTimestamp(utc, year, 0, 4);
        var d = week * 7 + weekday - getDay(new Date(j4), utc) - 3;
        if (d < 1) {
            year--;
            d += getDaysInYear(year);
        } else {
            var daysInYear = getDaysInYear(year);
            if (d > daysInYear) {
                d -= daysInYear;
                year++;
            }
        }
        // get date by ordinal
        var date = new Date(getTimestamp(utc, year, 0));
        setDate(date, d, utc);
        return date;
    }

    //GRG: Gregorian
    //reference to sap/ui/core/date/UniversalDate.js  getFirstDayOfFirstWeek()
    function getFirstDayOfFirstWeek(year, utc, weekConfig) {
        var minDays, 
            firstWeekday,
            firstDay = utc ? new Date(Date.UTC(year, 0, 1)) : new Date(year, 0, 1),
            dayCount = 7; 

        minDays = weekConfig.minDays;
        firstWeekday = weekConfig.firstDayOfWeek;

        minDays = TypeUtils.isNumber(minDays) ? minDays : 1;
        firstWeekday = TypeUtils.isNumber(firstWeekday) ? firstWeekday : 7;


        // Find the first day of the first week of the year
        while (getDay(firstDay, utc) !== firstWeekday) {
            setDate(firstDay, getDate(firstDay, utc)-1, utc);
            dayCount--;
        }
        // If less then min days are left, first week is one week later
        if (dayCount < minDays) {
            setDate(firstDay, getDate(firstDay, utc)+7, utc);
        }

        return firstDay;
    }

    //reference to sap/ui/core/date/UniversalDate.js  getWeekByDate()
    function getWeekInGRG(date, utc, weekConfig){
        date = isTimestamp(date)? new Date(date):date;
        var year = getFullYear(date, utc);  

        var nextYearFirstDay = getFirstDayOfFirstWeek(year+1, utc, weekConfig);
        if(date.getTime() >= nextYearFirstDay.getTime()){
            return 1;
        }

        var lastYearFirstDay = getFirstDayOfFirstWeek(year-1, utc, weekConfig);
        if(date.getTime() <= lastYearFirstDay.getTime()){
            return Math.floor((date.getTime() - lastYearFirstDay.getTime()) / ONE_WEEK)+1;
        }
       
        var firstDay = getFirstDayOfFirstWeek(year, utc, weekConfig);
        //week start from 1
        return Math.floor((date.getTime() - firstDay.getTime()) / ONE_WEEK)+1;
    }

    function getDateByWeekInGRG(year, week ,utc, weekConfig){
        var firstDay = getFirstDayOfFirstWeek(year, utc, weekConfig);
        var result = firstDay.getTime() + (week-1) * ONE_WEEK;
        return new Date(result);
    }

    function getWeekNumInYear(year) {
        return isLongYear(year) ? 53 : 52;
    }

    // Utility -----------------------------------------------------------------------

    function values(start, end, step, count, unit, isFirst, limit, pivot, utc) {
        limit = limit || [];
        var offset = getTimeOffset(utc);
        // map time to UTC. for example: "Tue Jul 25 2017 17:37:10 GMT+0830" to "Tue Jul 25 2017 17:37:10 UTC"
        var limitStart = max(start, limit[0] || -Infinity) - offset;
        var limitEnd = min(end, limit[1] || Infinity) - offset;
        start -= offset;
        var times = [];
        var t = ceil(start / unit);
        if (isTimestamp(pivot)) {
            pivot -= offset;
            if (pivot > start) {
                pivot -= ceil((pivot - start) / (step * unit)) * step * unit;
            }
            t = floor(pivot / unit);
        } else {
            while (!isFirst(t, unit)) {
                t++;
            }
        }
        count = count > 0 ? count : Infinity;
        // Move the start point close to limitStart to improve performance
        if (t * unit < limitStart) {
            t += floor((limitStart / unit - t) / step) * step;
        }
        while (t * unit <= limitEnd && times.length < count) {
            if (t * unit >= limitStart) {
                times.push(t * unit + offset);
            }
            t += step;
        }
        return times;
    }

    function getNumbers(range, step) {
        var arr = [];
        var t;
        if (step % 5 === 0) {
            var lastGap = min(4, step);
            for (t = 0; range - t >= lastGap; t += step) {
                arr.push(t);
            }
            arr[0] = 1;
        } else {
            for (t = 1; range + 1 - t >= step; t += step) {
                arr.push(t);
            }
            if (!arr.length) {
                arr.push(1);
            }
        }
        return arr;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function isLongYear(year) {
        //See http://en.wikipedia.org/wiki/ISO_week_date
        //any year starting on Thursday or
        //and any leap year starting on Wednesday is long year
        //a long year has 53 weeks, otherwise a short year has 52 weeks
        var firstDay = new Date(Date.UTC(year, 0)).getUTCDay();
        return firstDay === 4 || (isLeapYear(year) && firstDay === 3);
    }

    function getDaysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isTimestamp(it) {
        return typeof it === 'number' && !isNaN(new Date(it).getTime());
    }

    function nextDateByLevel(d, level, utc, originProps) {
        var period;
        var t;

        //for fiscal we need special handling
        if (level === Constants.FISCAL.PERIOD) {
            return d + 1;
        }
        else if (level === Constants.FISCAL.YEAR) {
            return FiscalUtil.nextFiscalStamp(d, originProps);
        }
        else {
            switch (level) {
                case 'second':
                    period = ONE_SECOND;
                    break;
                case 'minute':
                    period = ONE_MINUTE;
                    break;
                case 'hour':
                    period = ONE_HOUR;
                    break;
                case 'day':
                    t = new Date(d);
                    addDays(t, 1, utc);
                    return t.getTime();
                case 'week':
                    t = new Date(d);
                    addDays(t, 7, utc);
                    return t.getTime();
                case 'month':
                    t = new Date(d);
                    addMonths(t, 1, utc);
                    return t.getTime();
                case 'quarter':
                    t = new Date(d);
                    addMonths(t, 3, utc);
                    return t.getTime();
                case 'halfyear':
                    t = new Date(d);
                    addMonths(t, 6, utc);
                    return t.getTime();
                case 'year':
                    t = new Date(d);
                    addFullYears(t, 1, utc);
                    return t.getTime();
            }
            return d + period;
        }
    }

    var periodMap = {
        "second": ONE_SECOND,
        "minute": ONE_MINUTE,
        "hour": ONE_HOUR,
        "day": ONE_DAY,
        "week": ONE_WEEK,
        "month": ONE_MONTH,
        "quarter": ONE_QUARTER,
        "halfyear": HALF_YEAR,
        "year": ONE_YEAR,
        "fiscal_period": Constants.FISCAL.ONE_FISCAL_PERIOD,
        "fiscal_year": Constants.FISCAL.ONE_FISCAL_YEAR
    };

    function getPeriod(level) {
        return periodMap[level] || 0;
    }

    function tickNumber(start, end, unit) {
        var limitStart = max(start, -Infinity);
        var limitEnd = min(end, Infinity);
        var ts = floor(start / unit);
        var te = ceil(end  / unit);

        var count = te - ts + 1;
        if (limitStart !== ts * unit){
            count -= 1;
        }

        if (limitEnd !== te * unit){
            count -= 1;
        }
        return count;
    }

    function tickNumberDay(start, end, utc) {
        var limitStart = max(start, -Infinity);
        var limitEnd = min(end, Infinity);
        var count = 0;
        var t = truncate(start, 'Date', utc);

        var cur = t.getTime();
        if (start > cur) {
            addDays(t, 1, utc);
            cur = t.getTime();
        }
        while (cur <= limitEnd) {
            if (cur >= limitStart) {
                count += 1;
            }
            addDays(t, 1, utc);
            cur = t.getTime();
        }
        return count;
    }

    function tickNumberWeek(start, end, utc, weekConfig) {
        var limitStart = max(start, -Infinity);
        var limitEnd = min(end, Infinity);
        var count = 0;
        var ds = new Date(start);
        var de = new Date(end);
        var ls = new Date(limitStart);
        var le = new Date(limitEnd);
        var t, y;

        t = ds;
        y = getFullYear(t, utc);
        t = getDateByWeek(y, getWeek(t, utc, weekConfig), utc, weekConfig);
        if (t < ds) {
            addDays(t, 7, utc);
        }
        while (t <= le) {
            if (t >= ls) {
                count += 1;
            }
            addDays(t, 7, utc);
        }
        return count;
    }

    function tickNumberMonth(start, end, utc) {
        var limitStart = max(start, -Infinity);
        var limitEnd = min(end, Infinity);
        var count = 0;
        var ds = new Date(start);
        var de = new Date(end);
        var ls = new Date(limitStart);
        var le = new Date(limitEnd);
        var t;

        t = truncate(ds, 'Month', utc);
        var cur = t.getTime();
        if (ds.getTime() !== cur) {
            addMonths(t, 1, utc);
            cur = t.getTime();
        }

        while (cur <= limitEnd) {
            if (cur >= limitStart) {
                count += 1;
            }
            addMonths(t, 1, utc);
            cur = t.getTime();
        }
        return count;
    }

    function tickNumberQuarter(start, end, utc) {
        var limitStart = max(start, -Infinity);
        var limitEnd = min(end, Infinity);
        var count = 0;
        var ds = new Date(start);
        var de = new Date(end);
        var t;

        t = truncate(start, 'Month', utc);
        setMonth(t, floor(getMonth(t, utc) / 3) * 3, utc);
        while (t > ds) {
            addMonths(t, -3, utc);
        }
        var cur = t.getTime();
        while (cur <= limitEnd) {
            if (cur >= limitStart) {
                count += 1;
            }
            addMonths(t, 3, utc);
            cur = t.getTime();
        }
        return count;
    }

    function tickNumberHalfYear(start, end, utc) {
        var limitStart = max(start, -Infinity);
        var limitEnd = min(end, Infinity);
        var count = 0;
        var times = years(start, end, 1, Infinity, null, null, null, utc);
        var t, m = 6,
            i;
        for (i = 0; i < times.length; i += 2) {
            t = getTimestamp(utc, getFullYear(new Date(times[i]), utc), m);
            times.splice(i + 1, 0, t);
        }
        t = new Date(start);
        var y = getFullYear(t, utc);
        var begin = getTimestamp(utc, y, 0);
        if (start > begin) {
            var first = getTimestamp(utc, y, m);
            if (getMonth(t, utc) < m || t.getTime() === first) {
                times.unshift(first);
            }
        }
        return times.filter(function(t, i) {
            return t >= limitStart && t <= limitEnd;
        }).length;
    }

    function tickNumberYear(start, end, utc) {
        var limitStart = max(start, -Infinity);
        var limitEnd = min(end, Infinity);
        var count = 0;
        var startYear = getFullYear(new Date(limitStart), utc);
        var endYear = getFullYear(new Date(limitEnd), utc);
        if (start > getTimestamp(utc, startYear, 0)) {
            startYear++;
        }
        var t = startYear;

        while (t <= endYear) {
            var tt = getTimestamp(utc, t, 0);
            if (tt >= limitStart) {
                count += 1;
            }
            t += 1;
        }
        return count;
    }

    var tickCathe = {};

    function getTickNumberByLevel(level, start, end, utc, originProps) {
        // map to utc time for convient. then we can use the same process
        var offset = getTimeOffset(utc);
        start -=  offset;
        end -=  offset;
        var key = [level, start, end, utc].join();
        if(tickCathe.hasOwnProperty(key)){
            return tickCathe[key];
        }

        var result;

        //for fiscal we need special handling
        if (level === Constants.FISCAL.PERIOD) {
            result = (end - start + 1);
        }
        else if (level === Constants.FISCAL.YEAR) {
            result = FiscalUtil.getFiscalYearNumber(start, end, originProps);
        }
        else {
            switch (level) {
                case 'second':
                    result = tickNumber(start, end, ONE_SECOND, function (t, unit) {
                        return getSeconds(new Date(t * unit), true) === 0;
                    });
                    break;
                case 'minute':
                    result = tickNumber(start, end, ONE_MINUTE, function (t, unit) {
                        return getMinutes(new Date(t * unit), true) === 0;
                    });
                    break;
                case 'hour':
                    result = tickNumber(start, end, ONE_HOUR, function (t, unit) {
                        return getHours(new Date(t * unit), true) === 0;
                    });
                    break;
                case 'day':
                    result = tickNumberDay(start, end, true);
                    break;
                case 'week':
                    var weekConfig = pickweekConfig(weekConfig, originProps);
                    result = tickNumberWeek(start, end, true, weekConfig);
                    break;
                case 'month':
                    result = tickNumberMonth(start, end, true);
                    break;
                case 'quarter':
                    result = tickNumberQuarter(start, end, true);
                    break;
                case 'halfyear':
                    result = tickNumberHalfYear(start, end, true);
                    break;
                case 'year':
                    result = tickNumberYear(start, end, true);
                    break;
            }
        }

        tickCathe[key] = result;
        return result;
    }

    function getNperiodByTimeLevel(level, start, forward, utc) {

        var result;
        var startDate = new Date(start);

        //for fiscal we need special handling
        if (level === Constants.FISCAL.PERIOD) {
            return startDate;
        } else if (level === Constants.FISCAL.YEAR) {
            return startDate;
        } else {
            switch (level) {
                case 'second':
                    result = startDate.setTime(startDate.getTime() + forward * ONE_SECOND);
                    break;
                case 'minute':
                    result = startDate.setTime(startDate.getTime() + forward * ONE_MINUTE);
                    break;
                case 'hour':
                    result = startDate.setTime(startDate.getTime() + forward * ONE_HOUR);
                    break;
                case 'day':
                    result = startDate.setDate(startDate.getDate() + forward);
                    break;
                case 'week':
                    result = startDate.setDate(startDate.getDate() + forward * 7);
                    break;
                case 'month':
                    result = startDate.setMonth(startDate.getMonth() + forward);
                    break;
                case 'quarter':
                    result = startDate.setMonth(startDate.getMonth() + forward * 3);
                    break;
                case 'halfyear':
                    result = startDate.setMonth(startDate.getMonth() + forward * 6);
                    break;
                case 'year':
                    result = startDate.setFullYear(startDate.getFullYear() + forward);
                    break;
            }
        }
        return result;
    }

    TimeUtil = {
        ONE_SECOND: ONE_SECOND,
        ONE_MINUTE: ONE_MINUTE,
        ONE_HOUR: ONE_HOUR,
        ONE_DAY: ONE_DAY,
        ONE_WEEK: ONE_WEEK,
        ONE_MONTH: ONE_MONTH,
        ONE_QUARTER: ONE_QUARTER,
        HALF_YEAR: HALF_YEAR,
        ONE_YEAR: ONE_YEAR,

        DEFAULT_LEVELS: DEFAULT_LEVELS,
        ALL_LEVELS: ALL_LEVELS,

        isDateValid:isDateValid,

        getDateByWeek: getDateByWeek,

        getSeconds: getSeconds,
        getMinutes:getMinutes,
        getHours: getHours,
        getDate: getDate,
        getWeek: getWeek,
        getMonth: getMonth,
        getQuarter:getQuarter,
        getHalfYear:getHalfYear,
        getFullYear: getFullYear,
        getNperiodByTimeLevel: getNperiodByTimeLevel,
        getTimestamp:getTimestamp,

        isSameYear:isSameYear,
        isSameHalfYear:isSameHalfYear,
        isSameQuarter: isSameQuarter,
        isSameMonth:isSameMonth,
        isSameWeek:isSameWeek,
        isSameDay:isSameDay,
        isSameHour:isSameHour,
        isSameMinute:isSameMinute,
        isSameSecond:isSameSecond,

        seconds: seconds,
        minutes: minutes,
        hours: hours,
        days: days,
        weeks: weeks,
        months: months,
        quarters: quarters,
        halfyears: halfyears,
        years: years,

        fiscal_periods: fiscal_periods,
        fiscal_years: fiscal_years,

        isLeapYear: isLeapYear,
        isLongYear: isLongYear,

        truncate: truncateByLevel,
        ceil: ceilByLevel,
        floor: floorByLevel,
        nextDateByLevel: nextDateByLevel,
        getPeriod: getPeriod,
        getTickNumberByLevel: getTickNumberByLevel,

        levelComparator: levelComparator,
        normalizeLevelName: normalizeLevelName,
        normalizeLevels: normalizeLevels,

        getWeekNumInYear:getWeekNumInYear,

        getTimeTable: getTimeTable,
        levelList: levelList
    };

    return TimeUtil;
});

/**
 * 
 */

define('sap/viz/framework/common/util/DataContextUtils',[
    'sap/viz/framework/common/util/ObjectUtils'
], function Setup(ObjectUtils) {
    var utils = {};
    utils.convertBigNumString = function(measureNames, context){
        var cContext = ObjectUtils.clone(context);
        if(cContext){
            measureNames = measureNames || [];
            measureNames.forEach(function(id) {
                if(cContext[id] != null){
                    cContext[id] = +cContext[id];
                }
            });
        }
        return cContext;
    };

    return utils;
});
define('sap/viz/framework/chartmodel/DataSelector',[
    'sap/viz/framework/chartmodel/DataPoint',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/IdProducer',
    "sap/viz/framework/common/util/DataContextUtils"
], function(DataPoint, TypeUtils, IdProducer, DataContextUtils){

    var ALL_SELECTOR = '*';

    /**
     * Representing an expression to select a bunch of data points in chart.
     * An instance of this class translates a human-readable condition or rule
     * (usu. JSON) into a predicate function, and filter the data points using
     * this function.
     * @class
     * @param {Object} [selector] - If omitted, this selector selects nothing.
     * @param {DataModel} [dataModel]
     */
    function DataSelector(selector, dataModel){
        this.id = IdProducer.get();
        this._selector = selector;
        this._expr = null;
        this._dataPoints = null;
        this._model = dataModel;
    }

    /**
     * Check whether a data point matches a selector.
     * This is shortcut method for creating a temparory DataSelector and then call its
     * match function.
     * @param {Object} selector
     * @param {DataPoint|DataContext} dataPoint
     */
    DataSelector.match = function(selector, dataPoint, additionCtx){
        return (new DataSelector(selector)).match(dataPoint, additionCtx);
    };

    var prot = DataSelector.prototype;

    /**
     * Get the selector representation.
     * @return {Object}
     */
    prot.selector = function(){
        return this._selector;
    };

    /**
     * Get all the data points that this selector matches
     * @param {DataModel} [dataModel]
     * @return {Array}
     */
    prot.getDataPoints = function(dataModel){
        var dps = this._dataPoints;
        if (!dps) {
            var model = this._model = dataModel || this._model;
            if(!model){
                return [];
            }

            dps = [];
            if (iterateDataPoints.call(this, function(dp) {
                    dps.push(dp);
                })) {
                this._dataPoints = dps;
            }
        }
        return dps;
    };

    function iterateDataPoints(cb) {
        var model = this._model;
        if (model) {
            var allDps = model._dataPoints;
            if (!allDps) {
                return false;
            }
            var measureNames = model._rawData && model._rawData.measures &&  model._rawData.measures();
            if (this._selector) {
                var expr = this._expr = this._expr || prot._createExpr(this._selector);
                var dpId;
                for (dpId in allDps) {
                    if (allDps.hasOwnProperty(dpId)) {
                        var dp = allDps[dpId];
                        var context = DataContextUtils.convertBigNumString(measureNames, dp.context());
                        var addCtx =DataContextUtils.convertBigNumString(measureNames,dp.additionCtx());
                        if (!dp.ignore && expr(context, addCtx)) {
                            if (cb(dp) === false) {
                                break;
                            }
                        }
                    }
                }
            }
        }
    }

    prot.iterateDataPoints = function(cb) {
        var dps = this._dataPoints;
        if (!dps) {
            iterateDataPoints.call(this, cb);
        } else {
            var i, len = dps.length;
            for (i = 0; i < len; i++) {
                if (cb(dps[i]) === false) {
                    break;
                }
            }
        }
    };

    /**
     * Check whether a given data point matches this selector.
     * @param {DataPoint|DataContext} dp
     * @return {Boolean}
     */
    prot.match = function(dataPoint, additionCtx){
        if (dataPoint) {
            this._expr = this._expr || prot._createExpr(this._selector);
            var context = dataPoint instanceof DataPoint ? dataPoint.context() : dataPoint;
            return this._expr(context, additionCtx);
        }
        return false;
    };

    /**
     * Merge with another selector
     * @param {DataSelector} ds
     * @param {String} [rel="or"]
     * @return {DataSelector}
     */
    prot.merge = function(dataSelector, relation){
        relation = (relation || 'or').toLowerCase();
        var mergedSelector = {};
        if (relation === 'or' || relation === 'and') {
            if (this._selector && dataSelector._selector) {
                mergedSelector[relation] = [this._selector, dataSelector._selector];
                return new DataSelector(mergedSelector);
            } else if(this._selector) {
                return this;
            }
            return dataSelector;
        }
        return null;
    };

    // Expressions ------------------------------------------------------

    prot._createExpr = function(selector){
        if ((isObject(selector) && !selector.or && !selector.and && !selector.not) ||
                selector === ALL_SELECTOR || TypeUtils.isFunction(selector)) {
            return createSingleExpr(selector);
        }
        if (TypeUtils.isArray(selector)) {
            selector = {
                'or': selector
            };
        }
        var op = selector && (selector.or ? 'or' :
                selector.and ? 'and' :
                selector.not ? 'not' : null);
        if (op) {
            var operands = selector[op];
            if (!TypeUtils.isArray(operands)) {
                operands = [operands];
            }
            if (operands.length > 0) {
                if (op === 'not') {
                    return not(prot._createExpr(operands));
                } else if (operands.length > 1) {
                    var opFunc = logicOperators[op];
                    return opFunc(operands.map(prot._createExpr));
                }
                return prot._createExpr(operands[0]);
            }
        }
        return alwaysFalse;
    };

    function createSingleExpr(selector){
        if (selector === ALL_SELECTOR) {
            return alwaysTrue;
        } else if(TypeUtils.isFunction(selector)) {
            return function(context, additionCtx){
                var result = selector(context, additionCtx );
                return String(result).toLowerCase() === 'false' ? false : !!result;
            };
        } else if(selector) {
            return createContextExpr(selector);
        }
        return alwaysFalse;
    }

    function normalizeMeasureNames(config){
        /*
         * If you want to match the data that its measure is revenue, you can config it as following: 
         * 1) Use "measureNames" or "MeasureNamesDimension" keyword: 
         * We support both keywords and "measureNames" takes higher priority if both are set. 
         * (*)This approach is not recommended. 
         * example: {dataContext: {MeasureNamesDimension: "Revenue"}} 
         * 2) Use *: 
         * example: {dataContext: {Revenue: "*"}}
         */
        config = mixin({}, config);
        if (config.MeasureNamesDimension && !config.measureNames) {
            config.measureNames = config.MeasureNamesDimension;
        }
        if (config.measureNames &&
                TypeUtils.isString(config.measureNames) &&
                !config.hasOwnProperty(config.measureNames)) {
            config[config.measureNames] = '*';
            delete config.measureNames;
        }
        delete config.MeasureNamesDimension;
        return config;
    }

    function createContextExpr(selector){
        var exprs = [];
        selector = normalizeMeasureNames(selector);
        for (var field in selector) {
            if (selector.hasOwnProperty(field)) {
                var config = selector[field];
                if (!isObject(config)) {
                    config = {
                        equal: config
                    };
                }
                var ops = [];
                var op;
                for (op in config) {
                    if (config.hasOwnProperty(op) && valueOperators[op.toLowerCase()]) {
                        ops.push(op);
                    }
                }
                if (ops.length > 1) {
                    ops.sort(opComparator);
                }
                while (ops.length) {
                    op = ops.shift();
                    var opFunc = valueOperators[op.toLowerCase()].func;
                    if (opFunc) {
                        exprs.push(opFunc(field, config[op]));
                        ops = getCompatibleOps(ops, op);
                    }
                }
            }
        }
        if (exprs.length > 1) {
            return and(exprs);
        } else if (exprs.length === 1) {
            return exprs[0];
        }
        return alwaysFalse;
    }

    // Logic Operators ---------------------------------------------

    function or(exprs){
        return function(context, additionCtx){
            for (var i = 0; i < exprs.length; ++i){
                if (exprs[i](context, additionCtx)) {
                    return true;
                }
            }
            return false;
        };
    }

    function and(exprs){
        return function(context, additionCtx){
            for (var i = 0; i < exprs.length; ++i) {
                if (!exprs[i](context, additionCtx)) {
                    return false;
                }
            }
            return true;
        };
    }

    function not(expr){
        return function(context, additionCtx){
            return !expr(context, additionCtx);
        };
    }

    // Data Operators ------------------------------------------------

    function equal(field, value){
        return function(context){
            if (value === ALL_SELECTOR) {
                return context.measureNames === field ||
                    context.MeasureNamesDimension === field ||
                    context.hasOwnProperty(field);
            }
            return context[field] === value;
        };
    }

    function notEqual(field, value){
        return function(context){
            return context[field] !== value;
        };
    }

    function oneOf(field, values){
        return function(context){
            return values.some(function(value){
                return value === context[field];
            });
        };
    }

    function max(field, value){
        return function(context){
            if (context[field] !== null) {
                return context[field] <= value;
            }
            return false;
        };
    }

    function min(field, value){
        return function(context){
            if (context[field] !== null) {
                return context[field] >= value;
            }
            return false;
        };
    }

    function openMax(field, value){
        return function(context){
            return context[field] < value;
        };
    }

    function openMin(field, value){
        return function(context){
            return context[field] > value;
        };
    }

    function alwaysTrue(){
        return true;
    }

    function alwaysFalse(){
        return false;
    }

    function opComparator(op1, op2){
        return (valueOperators[op1.toLowerCase()].priority || 0) -
            (valueOperators[op2.toLowerCase()].priority || 0);
    }

    function getCompatibleOps(operators, op){
        op = op.toLowerCase();
        var dict = valueOperators[op].compatible;
        if (dict) {
            var result = [];
            for (var i = 0; i < operators.length; ++i) {
                var targetOp = operators[i];
                if (dict[targetOp.toLowerCase()]) {
                    result.push(targetOp);
                }
            }
            return result;
        }
        return [];
    }

    var logicOperators = {
        'and': and,
        'or': or,
        'not': not
    };

    var valueOperators = {
        'equal': {
            func: equal,
            priority: 0
        },
        'notequal': {
            func: notEqual,
            priority: 1
        },
        'in': {
            func: oneOf,
            priority: 2
        },
        'max': {
            func: max,
            priority: 3,
            compatible: {
                'min': 1,
                'openmin': 1
            }
        },
        'openmax': {
            func: openMax,
            priority: 4,
            compatible: {
                'min': 1,
                'openmin': 1
            }
        },
        'min': {
            func: min,
            priority: 5,
            compatible: {
                'max': 1,
                'openmax': 1
            }
        },
        'openmin': {
            func: openMin,
            priority: 6,
            compatible: {
                'max': 1,
                'openmax': 1
            }
        }
    };

    // Utilities --------------------------------------------------------

    function isObject(it){
        return it && Object.prototype.toString.call(it) === '[object Object]';
    }

    function mixin(a, b){
        for(var key in b){
            if(b.hasOwnProperty(key)){
                a[key] = b[key];
            }
        }
        return a;
    }

    return DataSelector;
});

define('sap/viz/framework/common/util/RuleUtil',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TimeUtil',
    'sap/viz/framework/common/util/FiscalUtil',
    "sap/viz/framework/common/util/Constants",
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/framework/chartmodel/DataSelector',
    'sap/viz/framework/common/lang/LangManager'
], function(
    TypeUtils, 
    ObjectUtils, 
    TimeUtil,
    FiscalUtil,
    Constants,
    DataUtils,
    DataSelector,
    langManager
) {

    var DATE_TYPE = "date";

    /**
     *
     *
     * //This is a sample object which is passed in by users
     * refer to /wiki/display/BISHGVisualization/The+interface+of+semantic+color
     * 1.  "others" is optional. We will have our default property for users' "default".
     * 2.  "rules" may have one or more rule objects. If one data point matches many rules, the last rule will win.
     * 3.  The value of string property may be
     *     1, Single value, like "China" .
     *     2. A json object, it can support semantic definition such as contains,equal,notEqual,min,max.
     *
     *  If users want to include 200, but not 100 in the range, they may use {min:100.00001, max 200}.
     *  If users want values larger than 100, they may write {min:100}.
     *
     * 4. Wildcard characters (like "*", "?") are nice to have.
     *
     * @param context Data context
     * @param rulesSetting
     * eg.
     *{
     *    others: {
     *            properties: {
     *                  color: "#EB271B"
     *            }
     *            displayName: "others"
     *    }
     *    rules:
     *    [
     *        {
     *            dataContext:
     *                {"Type":"A","Product":"Car","Country":{
     *                  contains: [], equal: "", notEqual: "", min: "", max: ""}
     *                },
     *            properties : {
     *              color: "#000000"
     *            }
     *        },
     *        {
     *            dataContext:
     *                {"Type":"A","Product":"Truck","Country":"USA","Year":"2002",
     *                    "Revenue":{
     *                        min:100.000001,
     *                        max:200,
     *                    }
     *                },
     *            properties : {
     *              color: "#000000"
     *            }
     *        }
     *    ]
     *}
     */

    var parseRules = {
        'date' : function (condition, i, parserOption) {
            var c = condition[i];
            if (TypeUtils.isArray(c) || TypeUtils.isPlainObject(c)) {
                for (var j in c) {
                    if (c.hasOwnProperty(j)) {
                        parseRules['date'](c, j, parserOption);
                    }
                }
            } else {
                var hasFiscalLevel = FiscalUtil.hasFiscalLevel(parserOption && parserOption.originProps);
                var t;
                if(hasFiscalLevel) {
                    //t should be like 1970001
                    t = parseInt(c);
                }
                else {
                    t = (new Date(c)).getTime();
                }
                var dataTimeLevel = (parserOption && parserOption.dataTimeLevel);
                if (dataTimeLevel != null && !isNaN(t)){
                    t = TimeUtil.truncate(t, dataTimeLevel, parserOption.showAsUTC, parserOption.originProps);
                }

                if (hasFiscalLevel) {
                    t = FiscalUtil.fiscalToQuantity(t, parserOption.originProps);
                }
                condition[i] = t;
            }
        }
    };

    function verifyRule(ruleObj) {
        if (ruleObj == null ||
            ((ruleObj.rules == null || 
            ruleObj.rules.length === 0) &&
            ruleObj.others == null)) {
            return false;
        }
        return true;
    }

    function analyzeRule(context, rulesSetting, withDisplayName, addition, fetchColor, props) {

        var reRuleObj = null;

        if (verifyRule(rulesSetting)) {
            // get setting matching rules
            var setting = matchRule(context, rulesSetting.rules, addition);
            var othersSetting = rulesSetting.others;
            if (!setting) {
                if(othersSetting){
                    if(withDisplayName) {
                        reRuleObj = {
                            properties: othersSetting.properties,
                            displayName: othersSetting.displayName,
                            dataName: othersSetting.dataName
                        };
                    }
                    else {
                        reRuleObj = othersSetting.properties;
                    }
                    if (reRuleObj){
                        reRuleObj.isOthers = true;
                        reRuleObj.useDefaultOtherName  = othersSetting.useDefaultOtherName;
                    }
                }
            } else {
                if (othersSetting) {
                    reRuleObj = parseValue(setting, othersSetting.properties, withDisplayName);
                } else {
                    if(withDisplayName) {
                        reRuleObj = {
                            properties: setting.properties,
                            displayName: setting.displayName,
                            dataName: setting.dataName
                        };
                    } else {
                        if (!fetchColor) {
                            reRuleObj = setting.properties;
                        }
                        else {
                            reRuleObj = setting.color ||
                                props.origin.get('general.defaultTimePeriodColor');
                        }
                    }
                }
            }
        }

        return reRuleObj;
    }

    function parseValue(setting, defaultProperties, withDisplayName) {
        var result = ObjectUtils.extend(true, {}, defaultProperties, setting.properties);
        if(withDisplayName) {
            var reObj = {};
            reObj.properties = result;
            reObj.displayName = setting.displayName;
            reObj.dataName = setting.dataName;
            result = reObj;
        }
        
        return result;
    }

    function matchRule(context, rules, additionCtx) {
        if (rules == null) {
            return null;
        }

        var lastMatch = null;
        var index = rules.length;
        var hit = false;
        while(index--){
            var rule = rules[index];
            var ruleContent = rule.callback || rule.dataContext;
            if (TypeUtils.isArray(context)){
                // To support break line style, RuleUtil now accepts context as an array 
                // and would judge the rule as valid one if any of the context in the array 
                // matches the rule content.
                hit = context.some(function(ctx, i){
                    return matchCondition(ctx, ruleContent, additionCtx && additionCtx[i]);
                });
            } else {
                hit = matchCondition(context, ruleContent, additionCtx);
            }
            if (hit){
                lastMatch = rule;
                break;
            }
        }
        return lastMatch;
    }

    function matchCondition(context, conditions, additionCtx) {
        if (conditions == null) {
            return false;
        }
        return DataSelector.match(conditions, context, additionCtx);
    }

    var DELIMITER = /[,]/;

    function loopInPlainObject(obj, fn, scope){
        for (var key in obj){
            if (obj.hasOwnProperty(key)){
                if (fn.call(scope, obj[key], key, obj) === false){
                    break;
                }
            }
        }
    }

    function withProperty(semantic, propertyName, defaultOthers, getMetadataFn, parserOption, withDisplayName, prefix) {
        if (!verifyRule(semantic)) {
            return semantic;
        }
        var result = {
            rules: null
        };
        var others = defaultOthers || {};
        if(!TypeUtils.isArray(propertyName)){
            propertyName = [propertyName];
        } 
        var keys = propertyName[0].split(DELIMITER);
        var subKey = propertyName[1];
        result.rules = semantic.rules.filter(function(r) {
            var properties = prefix? r.properties[prefix] : r.properties;
            return properties && keys.some(function(k) {
                var pValue = properties[k];
                if(pValue && subKey){
                    pValue = pValue[subKey];
                }
                return (pValue != null && !(parserOption &&
                        parserOption.ignoreEmptyProperty &&
                        TypeUtils.isEmptyObject(pValue))); 
            });
        });

        /*For history reason, we get a reference of original prop. 
        Whatever the case, we should not modify original prop,
        so clone it before we do some changes.*/
        result = ObjectUtils.clone(result, true);

        //FIXME: should hold a cache of the parsed result
        if (getMetadataFn){
            result.rules.forEach(function(rule){
                var context = rule.dataContext;
                if (!context){
                    return;
                }
                if (!TypeUtils.isArray(context)){
                    context = [context];
                }
                context.forEach(function(c){
                    loopInPlainObject(c, function(condition, id, conditions){
                        var metadata = getMetadataFn(id);
                        if (!metadata || !metadata[0] || !metadata[0].dataType || 
                            metadata[0].dataType.toLowerCase() !== DATE_TYPE){
                            return;
                        }

                        if (!parserOption || !parserOption.disableTimeStampConverting) {
                            parseRules[DATE_TYPE](conditions, id, parserOption);
                            conditions[id + DataUtils.DIMENSION_PARSED_VALUE_SUFFIX] = conditions[id];
                            delete conditions[id];
                        }
                    });
                });
            });
        }

        if(withDisplayName){
            // result = ObjectUtils.clone(result, true); //do not modify original prop
            var textForRange = langManager.get("IDS_SEMANTICCOLORRANGE");
            result.rules.forEach(function(rule, index){
                rule.displayName = rule.displayName || textForRange + (index + 1);
            });
        }

        result.others = ObjectUtils.extend(true, others, semantic.others);
        result.others.hideInLegend = (semantic.others == null);
        return result;
    }

    return {
        verify: verifyRule,
        analyze: analyzeRule,
        matchRule: matchRule,
        matchCondition: matchCondition,
        withProperty: withProperty,
        parseRules: parseRules
    };
});

define('sap/viz/framework/common/semantic/SemanticManager',['sap/viz/framework/common/util/RuleUtil',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/DataContextUtils'
], function(
    RuleUtil,
    langManager,
    TypeUtils,
    ObjectUtils,
    DataContextUtils
) {
    

    var SemanticManager = function() {
        this._dataPointPropName = null;
        this._dataPointStyleMode = null;
        this._displayStylePropName = null;
        this._axisPropName = null;
        this._seriesStylePropName = null;
        this._propMgr = null;
        this._statusMgr = null;
        this._handlers = [];
        this._onDataPointChangeHook = null;
        this._getMetadata = null;
        this._metaCache = {};
        this._session = null;
        this._useSemanticPattern = false;
        this._useSemanticDPLineStyle = false;
        this._chartType = null;
        this._isHideSemanticLegend = false;
    };

    SemanticManager.prototype.styleType = {
        DATA_POINT: "dataPoint",
        AXIS: "axis"
    };
    
    var prot = SemanticManager.prototype;

    prot.destroy = function() {
        this._dataPointPropName = null;
        this._dataPointStyleMode = null;
        this._displayStylePropName = null;
        this._seriesStylePropName = null;
        this._propMgr = null;
        this._statusMgr = null;
        this._handlers = null;
        this._onDataPointChangeHook = null;
        this._getMetadata = null;
        this._metaCache = null;
        this._axisPropName = null;
        this._session = null;
        this._useSemanticPattern = null;
        this._useSemanticDPLineStyle = null;
        this._chartType = null;
        this._isHideSemanticLegend = null;
    };
    
    prot.setDependency = function(propMgrProxy, statusMgrProxy) {
        this._propMgr = propMgrProxy;
        this._statusMgr = statusMgrProxy;
    };
    
    prot.setChartType = function(type){
        this._chartType = type;
        this._isBullet = /bullet/.test(type);
        this._isLineType = /line|combination/.test(type);
        this._isTreemap = /treemap/.test(type);
        this._isHeatmap = /heatmap/.test(type);
    };
    var PATTERNS = ["diagonalLightStripe", "diagonalStripe", "reverseDiagonalStripe"];
    // to keep bullet dataPointStyle compatible with old style, we should convert to new style
    prot.convertBulletDataPointColorStyle = function(dataPointStyle){
        var propMgr = this._propMgr;
        var bOverride = this.isOverrideMode();
        var bulletDataPointStyle = {rules:[]};
        if(dataPointStyle == null){
            return null;
        }
        
        var rules = dataPointStyle.rules;
        if(!rules || rules.length <= 0){
            return null;
        }

        var index = 0, ii;
        
        var mustHandleColor = {
                "actualColor" : false, 
                "additionalColor": false,
                "forecastColor":false
            };

        for(index = 0; index < rules.length; index++) {
            var ruleProp = rules[index].properties;
            if (!ruleProp || ((ruleProp.color == null ||
                    ruleProp.color === "") && 
                    (ruleProp.pattern == null ||
                    ruleProp.pattern === ""))) {
                continue;
            }
            
            var color = ruleProp.color,
                pattern = ruleProp.pattern;
            var currentRule = {
                dataContext: rules[index].callback || rules[index].dataContext,
                properties: {
                    color: {},
                    pattern: {}
                },
                displayName: {},
                dataName:rules[index].dataName
            };

            var checkHandleValue = function (prop, map) {
                for(var item in currentRule.properties[prop]){
                    if(currentRule.properties[prop].hasOwnProperty(item)){
                        if(currentRule.properties[prop][item] === ''){
                            delete currentRule.properties[prop][item];
                        }else{
                            map[item] = true;
                        }
                    }
                }
            };
            if (color) {
                if(!TypeUtils.isPlainObject(color)){
                    currentRule.properties.color = {actualColor: color};
                }else{
                    currentRule.properties.color = color;
                }
                checkHandleValue("color", mustHandleColor);
            }

            if (pattern) {
                if(!TypeUtils.isPlainObject(pattern)){
                    if(isVerifiedPattern(pattern, this._chartType) >= 0){
                        currentRule.properties.pattern = {actualColor: pattern};
                    }
                }else{
                    currentRule.properties.pattern = {};
                    for( var i = 0; i < BULLETCOLORNAMES.length; ++i){
                        if(PATTERNS.indexOf(pattern[BULLETCOLORNAMES[i]]) >= 0){
                            currentRule.properties.pattern[BULLETCOLORNAMES[i]] = pattern[BULLETCOLORNAMES[i]];
                        }
                    }
                }
            }

            var displayName = rules[index].displayName;
            if(displayName && !TypeUtils.isPlainObject(displayName)){
                currentRule.displayName = {actualColor: displayName};
            }else {
                currentRule.displayName = displayName;
            }
            
            bulletDataPointStyle.rules.push(currentRule);
        }

        if(bOverride){
            var othersStyle = {properties:{color:{} , pattern:{}, isDefault:{}}, displayName:{}};
            var otherName = dataPointStyle.others? dataPointStyle.others.displayName :{};
            var otherColor = (dataPointStyle.others &&
                dataPointStyle.others.properties &&
                dataPointStyle.others.properties.color) || {},

                otherPattern =  (dataPointStyle.others &&
                dataPointStyle.others.properties &&
                dataPointStyle.others.properties.pattern) || {};

           
            if(!TypeUtils.isPlainObject(otherColor)){
                otherColor= {
                    actualColor: otherColor
                };
            }

            if(!TypeUtils.isPlainObject(otherPattern)){
                otherPattern= {
                    actualColor: otherPattern
                };
            }  
            
            if(!TypeUtils.isPlainObject(otherName)){
                otherName = {actualColor:otherName};
            }
            
            var buildOtherStyle = function (otherProp, propName, map) {
                for(ii = 0; ii < BULLETCOLORNAMES.length; ii++){
                    var prop = BULLETCOLORNAMES[ii];
                    if(otherProp[prop] && otherProp[prop] !== ""){
                        othersStyle.displayName[prop] = otherName[prop];
                        othersStyle.properties[propName][prop] = otherProp[prop];
                    }else if(map && map[prop]){
                        othersStyle.properties[propName][prop] =  
                            propMgr.get("plotArea.defaultOthersStyle." + propName);
                        othersStyle.properties.isDefault[prop] = true;
                    }
                }               
            };
            buildOtherStyle(otherColor, "color", mustHandleColor);
            buildOtherStyle(otherPattern, "pattern", null);

            if(dataPointStyle.others && dataPointStyle.others.dataName) {
                othersStyle.dataName = dataPointStyle.others.dataName;
            }
            bulletDataPointStyle.others = othersStyle;
        }
        return bulletDataPointStyle;
    };

    prot.setDataset = function(dataset){
        if (dataset && dataset.metadata){
            var that = this;
            this._getMetadata = function (id){
                if (that._metaCache){
                    var cache = that._metaCache[id];
                    if (!cache){
                        cache = that._metaCache[id] = dataset.metadata.call(dataset, id);
                    }
                    return cache;
                }
                return dataset.metadata.call(dataset, id);
            };
        }
        
        if(dataset && dataset.measures){
            this._measureNames = dataset.measures();
        }
    };

    prot.getParserOption = function(){
        if (this._parserOption){
            return this._parserOption;
        }
        var parserOption = {
            dataTimeLevel: null,
            showAsUTC: false
        };
        //hard code here for only timeseries_column need truncate.
        if (/timeseries.*column|timeseries.*combination|timeseries_bullet|timeseries_waterfall/.test(this._chartType)){
            parserOption = {
                dataTimeLevel: this._statusMgr.get("timeLevels")[0],
                showAsUTC: this._propMgr.get("general.showAsUTC")
            };
        }
        parserOption.originProps = this._propMgr;
        this._parserOption = parserOption;
        return parserOption;
    };

    prot.bindDataPointProperty = function(name, modeName) {

        if (this._dataPointPropName === name) {
            return;
        }
        
        this._dataPointPropName = name;
        this._dataPointStyleMode = modeName;

        if (this._onDataPointChangeHook) {
            this._onDataPointChangeHook.remove();
        }

        if (this._handlers.length === 0) {
            return;
        }

        this._onDataPointChangeHook = this._propMgr.watch(this._dataPointPropName, (function() {
            var handlers = this._handlers;
            handlers.forEach(function(handler) {
                handler();
            });
        }).bind(this));
    };

    prot.bindDisplayStyleProperty = function(name) {
        if (this._displayStylePropName === name) {
            return;
        }
        this._displayStylePropName = name;
    };
    
    prot.bindAxisProperty = function(name) {
        if (this._axisPropName === name) {
            return;
        }
        this._axisPropName = name;
    };

    prot.bindSeriesStyleProperty = function(_) {
        this._seriesStylePropName = _;
    };

    prot.setUseSemanticPattern = function(_) {
        this._useSemanticPattern = _;
    };

    prot.isUseSemanticPattern = function() {
        return this._useSemanticPattern;
    };

    prot.setHideSemanticLegend = function(_) {
        this._isHideSemanticLegend = _;
    };

    prot.isHideSemanticLegend = function() {
        return this._isHideSemanticLegend;
    };

    prot.setUseSemanticDPLineStyle = function(_) {
        this._useSemanticDPLineStyle = _;
    };

    prot.addDataPointChangeCallback = function(fn) {
        this._handlers.push(fn);
    };

    prot.hasDataPointStyle = function() {
        var dataPointStyle = this._session? this._session[DP_STYLE_PROP_KEY] : this.getDataPointStyle();
        return dataPointStyle != null && dataPointStyle.rules != null;
    };
    
    prot.isOverrideMode = function(){
        if(this._isTreemap || this._isHeatmap){
            return true;
        }
        var mode = this._dataPointStyleMode ? this._propMgr.get(this._dataPointStyleMode) : '';
        return mode === 'override';
    };
    function isVerifiedPattern(pattern, chartType){
        var ret = true;
        if(TypeUtils.isString(pattern) && TypeUtils.isString(chartType) &&
                /^info\//.test(chartType) && !(/^info\/hichert/.test(chartType))){
            if(/bar|column|combination|bubble|bullet/.test(chartType)){
                if(["diagonalLightStripe", "diagonalStripe", "reverseDiagonalStripe", "noFill"].indexOf(pattern) < 0){
                    ret = false;
                }
            }else if(/line/.test(chartType)){
                if(["solid" ,"noFill"].indexOf(pattern) < 0){
                    ret = false;
                }
            }
        }
        
        return ret;
    }
    
    function removeInvalidPatter(prop){
        var rule = {};
        for(var j in prop){
            if(prop.hasOwnProperty(j) && j !== 'properties'){
                rule[j] = prop[j];
            }
            
        }
        
        var newProp = {};
        for(var k in prop["properties"]){
            if(prop["properties"].hasOwnProperty(k) && k !== 'pattern'){
                newProp[k] = prop["properties"][k];
            }
        }
        rule.properties = newProp;
        return rule;
    }
    function preProcessPattern(dataPointStyle, chartType){
        var pattern;
        if(dataPointStyle.rules){
            var rules = [];
            for(var i = 0; i < dataPointStyle.rules.length; ++i){
                var currentRule = dataPointStyle.rules[i];
                pattern = currentRule.properties && currentRule.properties.pattern;
                if(!isVerifiedPattern(pattern, chartType)){

                    dataPointStyle.rules[i] = removeInvalidPatter(currentRule);
                }
            }
        }
        
        if(dataPointStyle.others){
            var properties = dataPointStyle.others && dataPointStyle.others.properties;
            if(properties && properties.pattern){
                pattern = properties.pattern;
                if(!isVerifiedPattern(pattern, chartType)){
                    dataPointStyle.properties = removeInvalidPatter(dataPointStyle.others);
                    
                }
            }
        }

        return dataPointStyle;
    }
    
    prot.getDataPointStyle = function(){
        if (this._dataPointPropName == null) {
            return null;
        }

        var dataPointStyle = this._propMgr.get(this._dataPointPropName);
        if(!dataPointStyle){
            return null;
        }
        var result = {};
        for(var i in dataPointStyle){
            if(dataPointStyle.hasOwnProperty(i)){
                result[i] = dataPointStyle[i];
            }
        }

        if(!this.isOverrideMode() && result.hasOwnProperty("others")){
            result["others"] = null;
        }
        
        if(this._useSemanticPattern){
            result = preProcessPattern(result, this._chartType);
        }

        return result;
    };

    prot.getDisplayStyle = function() {
        if (this._displayStylePropName == null) {
            return null;
        }
        var displayStyle = this._propMgr.get(this._displayStylePropName);
        if (!displayStyle) {
            return null;
        }
        var result = {};
        for(var i in displayStyle) {
            if(displayStyle.hasOwnProperty(i)){
                result[i] = displayStyle[i];
            }
        }
        return result;
    };

    prot.shouldChangeColor = function(){
        return this.hasRuleForProp("color") || this.othersStyleHas("color") || 
            (this._useSemanticDPLineStyle && 
            (this.hasRuleForProp("lineColor") || this.othersStyleHas("lineColor")));
    };

    prot.hasRuleForProp = function(prop) {
        var dataPointStyle = this.getDataPointStyle();
        if (!dataPointStyle){
            return false;
        }
        return dataPointStyle.rules && dataPointStyle.rules.some(function(r) {
            return r.properties && r.properties.hasOwnProperty(prop) && r.properties[prop] != null;
        });
    };

    prot.othersStyleHas = function(propName) {
        if (!this.isOverrideMode()){
            return false;
        }
        var dataPointStyle = this.getDataPointStyle();
        if (!dataPointStyle){
            return false;
        }
        var ret = false;
        if (!TypeUtils.isArray(propName)){
            propName = [propName];
        }
        if (dataPointStyle.others && dataPointStyle.others.properties){
            var prop = dataPointStyle.others.properties;
            if (propName.some(function(name) {
                return prop[name] != null;
            })) {
                ret = true;
            }
        }
        return ret;
    };

    prot.hasAxisStyle = function() {
        if (this._axisPropName == null) {
            return false;
        }
        var axisStyle = this._propMgr.get(this._axisPropName);
        return axisStyle != null && axisStyle.rules != null;
    };

    prot.hasDataPointColorStyle = function() {
        return this.hasRuleForProp("color") || this.othersStyleHas("color") || 
            (this._useSemanticPattern && 
            (this.hasRuleForProp("pattern") || this.othersStyleHas("pattern")));
    };

    prot.hasDataPointDataLabelStyle = function() {
        return this.hasRuleForProp("dataLabel") || this.othersStyleHas("dataLabel");
    };

    prot.hasDataPointLineStyle = function() {
        return this._useSemanticDPLineStyle && 
        (this.hasRuleForProp("lineColor") || this.hasRuleForProp("lineType") ||
        this.othersStyleHas(["lineColor", "lineType"]));
    };

    prot.hasDataPointStyleOthers = function() {
        var dataPointStyle = this.getDataPointStyle();
        return dataPointStyle != null && dataPointStyle.others != null;
    };

    //is called before session, we can store some cache here to speed
    prot.beginSession = function(){
        this._session = {};
        this._metaCache = {};
        this._parserOption = null;
    };

    //clean cache
    prot.endSession = function(){
        this._session = null;
        this._metaCache = null;
        this._parserOption = null;
    };

    prot.analyzeDataPoint = function (propertyKey, ctx, withDisplayName, additionCtx) {
        return this.analyzeDataPointForProperty(ctx, propertyKey, withDisplayName, additionCtx);
    };

    prot.analyzeValueBasedColor = function (ctx, additionCtx) {
        var rules = {};
        rules.rules = this._propMgr.origin.get('general.timePeriodStyle');
        var rCtx = DataContextUtils.convertBigNumString(this._measureNames, ctx);
        var rAddCtx = DataContextUtils.convertBigNumString(this._measureNames, additionCtx);
        return RuleUtil.analyze(rCtx, rules, false, rAddCtx, true, this._propMgr);
    };

    prot.analyzeAxisLabel = function(ctx) {
        if (this._axisPropName == null) {
            throw "The axis property name is required";
        }
        var axisStyle = this._propMgr.get(this._axisPropName);
        return RuleUtil.analyze(ctx, axisStyle, true);
    };
    
    
    prot.analyzeDataPointDataLabel = function(ctx, additionCtx) {
        return this.analyzeDataPointForProperty(ctx, "dataLabel", false, additionCtx);
    };
    
    /**
     * Analyze a data context for a certain dataPointStyle property
     *
     * @param ctx data context
     * @param propKey a particular property from dataPointStyle rule properties
     * @param withDisplayName whether or not to inculde displayName
     *
     * @return property object of the matched rule, or others if there is no matching rule
     */
    var DP_STYLE_PROP_KEY = "DataPoint_Style_Key";
    var OTHERS_KEY = "Others_Rule_Key";
    var RULES_KEY = "Rules_Key";
    prot.analyzeDataPointForProperty = function(ctx, propKey, withDisplayName, additionCtx) {
         
        if (this._dataPointPropName == null) {
            throw "The data point property name is required";
        }

        this._session = this._session || {};
        var dpStyle;
        if(this._session.hasOwnProperty(DP_STYLE_PROP_KEY)){
            dpStyle = this._session[DP_STYLE_PROP_KEY]; 
        }else{
            dpStyle = this.getDataPointStyle();
            if (this._isBullet) {
                dpStyle = this.convertBulletDataPointColorStyle(dpStyle);
            }  
            this._session[DP_STYLE_PROP_KEY] = dpStyle;
        }

        if(!dpStyle || !dpStyle.rules){
            return null;
        }

        var parserOpts = this.getParserOption();
        if(!TypeUtils.isArray(propKey)){
            propKey = [propKey];
        }
        if(this._isBullet){
            parserOpts.ignoreEmptyProperty = (propKey[0] === "pattern"); 
        }

        var others, otherKey = [OTHERS_KEY, propKey[0], (!!withDisplayName).toString()].join("__");
        if(this._session.hasOwnProperty(otherKey)){
            others = this._session[otherKey];
        }else{
            others = this.getOthersStyle(propKey[0], withDisplayName, dpStyle);
            this._session[otherKey] = others;
        }

        var rules, rulesKey = [RULES_KEY, propKey.toString(), (!!withDisplayName).toString()].join("__");
        if(this._session.hasOwnProperty(rulesKey)){
            rules = this._session[rulesKey];
        }else{
            rules = RuleUtil.withProperty(dpStyle, propKey, others, 
                                        this._getMetadata, parserOpts, withDisplayName);
            this._session[rulesKey] = rules;
        }
        var rCtx = DataContextUtils.convertBigNumString(this._measureNames, ctx);
        var rAddCtx = DataContextUtils.convertBigNumString(this._measureNames, additionCtx);
        return RuleUtil.analyze(rCtx, rules, withDisplayName, rAddCtx);
    };

    prot.analyzeDisplayStyle = function(ctx, withDisplayName, additionCtx) {
        var displayStyle = this.getDisplayStyle();
        if(!displayStyle || !displayStyle.rules){
            return null;
        }
        var rCtx = DataContextUtils.convertBigNumString(this._measureNames, ctx);
        var rAddCtx = DataContextUtils.convertBigNumString(this._measureNames, additionCtx);
        return RuleUtil.analyze(rCtx, displayStyle, withDisplayName, rAddCtx);
    };

    prot._getSeriesProps = function() {
        var orginialSeriesProps = this._propMgr.get("plotArea.series");
        if(!orginialSeriesProps){
            return null;
        }
        var seriesProps = [];
        orginialSeriesProps.forEach(function(rule) {
            if (rule) {
                var dataContext = [rule.dataContext];
                var properties = {
                    settings: {
                        type: rule.type,
                        stack: rule.stack
                    }
                };
                seriesProps.push({
                    dataContext: dataContext,
                    properties: properties
                });
            }

        });
        var others = {
            settings: {
                type: undefined,
                stack: undefined
            }
        };
        seriesProps = {
            rules: seriesProps,
            others: others
        };
        return seriesProps;
    };

    prot.analyzeSeries = function(ctx) {
        var seriesProps = this._getSeriesProps();
        var parserOption = {};
        parserOption.disableTimeStampConverting = true;
        var rules = RuleUtil.withProperty(seriesProps, "settings", null, this._getMetadata, parserOption);
        var ret = RuleUtil.analyze(ctx, rules);
        ret = ret ? ret.settings : null;
        return ret;
    };

    /**
     * WARNING, this function is only used by Legend, it removes the default others from semantic colored legend
     */
    
    var BULLETCOLORNAMES = ["actualColor", "additionalColor", "forecastColor"];
    var BULLETBINDINGS =  ["IDS_BULLETACTUALVALUES", "IDS_BULLETADDITIONALVALUES", "IDS_BULLETFORECASTVALUES"];
    function getBulletSemanticRulesBindingNames(rules, raw_others){
        var nameNums = [0,0,0];
        var i,index, color; 
        for (index = 0; index < rules.length; index++) {
            color = rules[index].properties.color;
            if (color == null) {
                continue;
            }
            for(i = 0; i < BULLETCOLORNAMES.length; ++i){
                if(color.hasOwnProperty(BULLETCOLORNAMES[i])){
                    nameNums[i] = 1;
                }
            }
        }


        if(raw_others){
            for (color in raw_others.properties.color) {
                if(raw_others.properties.color.hasOwnProperty(color)){
                    if (!color ||  raw_others.properties.isDefault[color]) {
                        continue;
                    }
                    for(i = 0; i < BULLETCOLORNAMES.length; ++i){
                        if(color === BULLETCOLORNAMES[i]){
                            nameNums[i] = 1;
                        }
                    }
                }
            }
        }

        var result = [];
        
        for(i = 0; i < nameNums.length; ++i){
            if(nameNums[i]){
                result.push(BULLETCOLORNAMES[i]);
            }
        }
        
        return  result;
    }

    prot.mergeColorPatternRules = function(dataPointStyle, bindingNames) {
        // We should not change customer input data. so we will clear index later
        var mergedStyle = {};
        var n = 0;
        var len = dataPointStyle.rules ? dataPointStyle.rules.length : 0;
        for (n = 0; n < len; ++n) {
            dataPointStyle.rules[n].index = n;
        }
        
        var propertyName = this._isLineType ? 'color,lineColor,lineType,dataLabel' : 'color,dataLabel';
        var colorOthers = this.getOthersStyle(propertyName, true, dataPointStyle, bindingNames);
        var patternOthers = this.getOthersStyle("pattern", true, dataPointStyle, bindingNames);
        
        var colorStyle = RuleUtil.withProperty(dataPointStyle, propertyName, 
            this.getOthersStyle("color"), this._getMetadata, this.getParserOption());
        var patternStyle = RuleUtil.withProperty(dataPointStyle, 'pattern', 
            this.getOthersStyle("pattern"), this._getMetadata, this.getParserOption());

        var hideInlegendColor = colorStyle.others ? colorStyle.others.hideInLegend : true;
        var hideInlegendPattern = patternStyle.others ? patternStyle.others.hideInLegend : true;

        var others = {};
        var colorRules = [];
        var patternRules = [];
        var mergedRules = [];
        if (this._useSemanticPattern) {
            var ruleIndex;
            for (n = 0; n < colorStyle.rules.length; ++n) {
                ruleIndex = colorStyle.rules[n].index;
                mergedRules[ruleIndex] = colorStyle.rules[n];
            }

            for (n = 0; n < patternStyle.rules.length; ++n) {
                ruleIndex = patternStyle.rules[n].index;
                mergedRules[ruleIndex] = patternStyle.rules[n];
            }
            mergedStyle.rules = mergedRules;

            if (!TypeUtils.isEmptyObject(patternOthers) && !TypeUtils.isEmptyObject(colorOthers)) {
                var othersProps = {};

                othersProps = ObjectUtils.extend(true, {}, patternOthers.properties, 
                                                            colorOthers.properties);
                others.displayName = colorOthers.displayName || patternOthers.displayName;
                others.properties = othersProps;
            } else {
                others = {};
            }

        } else {
            mergedStyle = colorStyle;
            others = colorOthers;
        }

        if (hideInlegendColor && hideInlegendPattern) {
            others.hideInLegend = true;
        }
        mergedStyle.others = others;
        
        // Clear index
        for (n = 0; n < len; ++n) {
            if(dataPointStyle.rules[n]){
                delete dataPointStyle.rules[n].index;
            }
        }        
        
        return mergedStyle;
    };


    prot.getDataPointColorScale = function() {
        var dataPointStyle = this.getDataPointStyle();
        if (dataPointStyle == null) {
            return [];
        }

        var hideSemanticLegend = !this.isOverrideMode() && dataPointStyle.hideSemanticLegend;
        this.setHideSemanticLegend(hideSemanticLegend);

        var bindingNames;
        if(this._isBullet){
            dataPointStyle = this.convertBulletDataPointColorStyle(dataPointStyle);
            if (dataPointStyle == null) {
                return [];
            }
            bindingNames = getBulletSemanticRulesBindingNames(dataPointStyle.rules, 
                                                                dataPointStyle.others);
        }

        dataPointStyle = this.mergeColorPatternRules(dataPointStyle, bindingNames);
        var others = dataPointStyle.others;
        var rules = dataPointStyle.rules;
        var domain = [];
        var range = [];
        var ruleCondition = [];
        var hasValidOtherCondition = false;
        var displayName;
        var i;
       
        var textForRange = langManager.get("IDS_SEMANTICCOLORRANGE");
        var bulletColorName;
        var propsRange;

        if(rules){
            for (var index = 0; index < rules.length; index++) {
                if (!rules[index]) {
                    continue;
                }
                var color = rules[index].properties.color;
                var pattern = rules[index].properties.pattern;
                var lineColor = rules[index].properties.lineColor;
                var lineType = rules[index].properties.lineType;
                if (color == null && lineColor == null && lineType == null && 
                    !(this._useSemanticPattern && pattern)) {
                    continue;
                }
                propsRange = {color: color, pattern: pattern};
             
                // only bullet color is object type
                var defaultName = textForRange + (index + 1);
                var ruleDisName;
                if(this._isBullet && (TypeUtils.isPlainObject(color) || TypeUtils.isPlainObject(pattern))){
                    displayName = {};
                    for(i = 0; i < BULLETCOLORNAMES.length; ++i){
                        bulletColorName = BULLETCOLORNAMES[i];
                        if(!color.hasOwnProperty(bulletColorName) && !pattern.hasOwnProperty(bulletColorName)){
                            continue;
                        }
                        ruleDisName = rules[index].displayName;
                        if(ruleDisName && ruleDisName.hasOwnProperty(bulletColorName)){
                            displayName[bulletColorName] = ruleDisName[bulletColorName];
                        }else if(bindingNames.length <= 1){
                            displayName[bulletColorName] = defaultName;
                        }else{
                            displayName[bulletColorName] = defaultName + " / " + 
                                langManager.get(BULLETBINDINGS[i]);
                        }
                    }
                } else {
                    displayName = rules[index].displayName;
                    if (displayName == null) {
                        displayName = defaultName;
                    }
                }

                if(this._isLineType){
                    propsRange.lineColor = lineColor;
                    propsRange.lineType = lineType;
                    if(/combination/.test(this._chartType)){
                        propsRange.seriesShape = "combination";
                    }else{
                        propsRange.seriesShape = "line";
                    }
                }
                domain.push(displayName);
                range.push(propsRange);
                ruleCondition.push(rules[index].callback || rules[index].dataContext);
            }
        }

        if (!TypeUtils.isEmptyObject(others) && others != null && !others.hideInLegend) {
 
            displayName = others.displayName;
            if (displayName == null) {
                displayName = langManager.get("IDS_SEMANTICCOLOROTHERS");
            }
            propsRange = {color: others.properties.color, pattern: others.properties.pattern};
            if(others.properties.color != null || others.properties.pattern != null || 
                this.hasLineProperties(others.properties)){
                if(this.hasLineProperties(others.properties)){
                    propsRange.lineColor = others.properties.lineColor;
                    propsRange.lineType = others.properties.lineType;
                }
                if(this._isLineType){
                    if(/line/.test(this._chartType)){
                        propsRange.seriesShape = "line";
                    }else{
                        propsRange.seriesShape = "combination";
                    }
                }
                domain.push(displayName);
                range.push(propsRange);
                hasValidOtherCondition = true;
            }
        }

        return new SemanticColorScaleAdapter(domain, range, ruleCondition, hasValidOtherCondition, 
            others, hideSemanticLegend);
    };

    prot.hasLineProperties = function(properties){
        return this._isLineType && (properties.lineColor || 
                    properties.lineType);
    };
    var seriesPropsMap = {
            "line": ["color", "width", "type"],
            "dataPoint":["pattern", "color"],
            "area":[ "opacity","color", "visible"]
        };
    prot.analyzeSeriesStyle = function(context, seriesType) {
        if(!this._seriesStylePropName){
            return null;
        }
        var props = this._seriesStylePropName.slice(),
            style = null;
        
        if (!props || props.length === 0) {
            throw "The line style property name is required";
        }
        if(!seriesType){
            seriesType = "line";
        }
        if (typeof props === "string") {
            style = this._propMgr.get(this._seriesStylePropName);
        } else if (props instanceof Array){
            while (props.length > 0 && !(style && Object.keys(style).length > 0)) {
                style = this._propMgr.get(props.pop());
            }
        }

        var metaFn = this._getMetadata;
        var parserOption = this.getParserOption();
        return seriesPropsMap[seriesType].reduce(function(result, prop) {
            var st = RuleUtil.withProperty(style, prop, false, metaFn, parserOption, null, seriesType),
                otherProps = {};
            if (!st) {
                return result;
            }
            if (st.others && st.others.properties) {
                otherProps[prop] = st.others.properties[prop];
                st.others.properties = otherProps;
            }
            return ObjectUtils.extend(true, result, RuleUtil.analyze(context, st));
        }, {});
    };
    
    

  
    prot.getOthersStyle = function(property, withDisplayName, inputStyle, bindingNames) {
        var othersStyle = {};
        if(!this.isOverrideMode()){
            return othersStyle;
        }
        var dataPointStyle = inputStyle != null ? inputStyle : this._propMgr.get(this._dataPointPropName);
        var hasValidOther = false, i;
        var keys = property.split(",");
        var otherProps;
        if(dataPointStyle && dataPointStyle.others && dataPointStyle.others.properties){
            otherProps = dataPointStyle.others.properties;
            if(keys.length > 1){
                for(i = 0; i < keys.length; i++){
                    if(otherProps[keys[i]] != null && otherProps[keys[i]] !== ''){
                        hasValidOther = true;
                        break;
                    }
                }
            } else {
                hasValidOther = (null != otherProps[property] && '' !== otherProps[property]);
            }
        }
        if(hasValidOther) {
            var others = dataPointStyle.others;
            var tempProp = {};
            if(keys.length > 1){
                for(i = 0; i < keys.length; i++){
                    var item = keys[i];
                    if(others.properties[item]){
                        tempProp[item] = others.properties[item];
                    }
                }
            }else{
                tempProp[property] = others.properties[property];
            }
            othersStyle.properties = tempProp;

            if(this._isBullet){
                othersStyle.properties.isDefault = dataPointStyle.others.properties.isDefault || {};
            }

            var displayName = othersStyle.displayName = others.displayName;
            if(!withDisplayName || others == null || others.hideInLegend) {
                return othersStyle;
            }
            var textForOthers = langManager.get("IDS_SEMANTICCOLOROTHERS");
            if (displayName == null) {
                othersStyle.displayName = textForOthers;
                othersStyle.useDefaultOtherName = true;
            } else if(this._isBullet && bindingNames && bindingNames.length > 0){
                var len = bindingNames.length;
                var bindingName;
                for(i = 0; i < len; ++i){
                    bindingName = bindingNames[i];
                    if(displayName[bindingName]){
                        continue;
                    }

                    if(othersStyle.properties["color"] && 
                        othersStyle.properties["color"][bindingName] && 
                        othersStyle.properties.isDefault[bindingName] !== true  ){
                        displayName[bindingName] = textForOthers;
                        if(len > 1 ){
                            displayName[bindingName] += " / " + 
                                langManager.get(BULLETBINDINGS[BULLETCOLORNAMES.indexOf(bindingName)]) ;
                        }
                    } 
                }
            }
        } else if (!this._isBullet){
            var shouldChangeColor = this.shouldChangeColor();
            othersStyle.properties = othersStyle.properties || {};
            var props = othersStyle.properties;
            if (keys.lastIndexOf("color") > -1 && shouldChangeColor) {
                props.color = this._propMgr.get("plotArea.defaultOthersStyle.color");
            }
            if (keys.lastIndexOf("pattern") > -1 && this._useSemanticPattern) {
                props.pattern = "";
            }
            if (keys.lastIndexOf("lineType") > -1 && this._useSemanticDPLineStyle) {
                props.lineType = "line";
            }
            if (keys.lastIndexOf("lineColor") > -1 && this._useSemanticDPLineStyle && shouldChangeColor) {
                //Use color in others when lineColor in others is not defined.
                props.lineColor = 
                    this.getOthersStyle("color", withDisplayName, inputStyle, bindingNames).properties.color;
            }
            if (keys.lastIndexOf("dataLabel") > -1){
                props.dataLabel = !!this._propMgr.get("plotArea.dataLabel.visible");
            }
            var hasOthers = TypeUtils.isExist(dataPointStyle.others);
            if(withDisplayName) {
                var tempDisplayName = null;
                if (hasOthers) {
                    if (TypeUtils.isExist(dataPointStyle.others.displayName)) {
                        tempDisplayName = dataPointStyle.others.displayName;
                    }
                }
                othersStyle.displayName = tempDisplayName || langManager.get("IDS_SEMANTICCOLOROTHERS");
            }
            //Reset othersStyle.properties if it's an empty object.
            if(TypeUtils.isEmptyObject(props)){
                othersStyle.properties = undefined;
            }
        }

        return othersStyle;
    };

    function SemanticColorScaleAdapter(domain, range, rules, hasValidOthers, others, hideSemanticLegend) {
        this._domain = domain;
        this._range = range;
        this._rules = rules;
        this._hasValidOthers = hasValidOthers;
        this._others = others;
        this._hideSemanticLegend = hideSemanticLegend;
    }

    var adapterProt = SemanticColorScaleAdapter.prototype;

    adapterProt.getDomain = function() {
        return this._domain;
    };

    adapterProt.getRange = function() {
        return this._range;
    };

    adapterProt.getRules = function() {
        return this._rules;
    };

    adapterProt.hasValidOthers = function() {
        return this._hasValidOthers;
    };

    adapterProt.others = function() {
        return this._others;
    };
    
    return SemanticManager;
});

define('sap/viz/framework/common/mark/MarkManager',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils'
], function(TypeUtils, ObjectUtils) {
    function MarkerManager(mode) {
        this.setMode(mode || "single");
    }

    MarkerManager.prototype.lock = function () {
        this._locked = true;
    };

    MarkerManager.prototype.locked = function () {
        return this._locked;
    };
    
    MarkerManager.prototype.setMode = function(mode) {
        var prevMode = MODES[this._mode];
        if (prevMode) {
            clearMode(this, prevMode);
            prevMode.destroy.call(this);
        }
        ObjectUtils.extend(true, this, MODES[mode]);
        this._mode = mode;
    };

    MarkerManager.prototype.getMode = function(){
        return this._mode;
    };

    function clearMode(obj, mode) {
        Object.keys(mode).forEach(function(prop) {
            delete obj[prop];
        });
    }

    var single = {
            setShape: function(val) {
                this._markerShape = val;
            },
            destroy: function() {
                delete this._markerShape;
            },
            getShape: function() {
                return this._markerShape;
            }
        },
        dual = {
            setShape: function(vals, fallback) {
                this._markerShapes = vals;
                this._fallback = fallback;
            },
            destroy: function() {
                delete this._markerShapes;
                delete this._fallback;
            },
            getShape: function(mndIdx, scaleIdx) {
                var idx = isNaN(scaleIdx) ? 0 : scaleIdx;
                return this._markerShapes[idx] || this._fallback;
            }
        },
        line = ObjectUtils.extend(true, {}, dual, {
            setSeriesShape: function(vals){
                this._seriesShape = vals;
            },
            getSeriesShape: function(mndIdx, scaleIdx){
                var idx = isNaN(scaleIdx) ? 0 : scaleIdx;
                if(this._seriesShape){
                    return this._seriesShape || "line";
                }
            }
        }),
        combination = ObjectUtils.extend(true, {}, line, {
            getShape: function(mndIdx, scaleIdx) {
                var shapes = dual.getShape.call(this, mndIdx, scaleIdx);
                return shapes[mndIdx] || this._fallback;
            },
            getSeriesShape: function(mndIdx, scaleIdx){
                var idx = isNaN(scaleIdx) ? 0 : scaleIdx;
                if(this._seriesShape){
                    return this._seriesShape[idx][mndIdx] || "line";
                }
            }
        }),
        series = {
            setMarkers: function(markers) {
                this._shapes = markers;
            },
            getShape: function(mndIdx, scaleIdx, seriesIdx) {
                return this._shapes[scaleIdx][seriesIdx].marker;
            },
            getSeriesShape: function(mndIdx, scaleIdx, seriesIdx) {
                return this._shapes[scaleIdx][seriesIdx].type;
            },
            destroy: function() {
                delete this._shapes;
                delete this._seriesType;
            }
        },
        MODES = {
            single: single,
            dual: dual,
            combination: combination,
            line: line,
            series: series
        };

    return MarkerManager;
});

define('sap/viz/framework/event/EventDispatcher',[
    "sap/viz/framework/common/util/EventDispatch"
], function(EventDispatch) {

    var EventDispatcher = function() {
        this._dispatch = new EventDispatch();
    };
    
    var pt = EventDispatcher.prototype;
    
    pt.destroy = function() {
        if (this._dispatch) {
            this._dispatch.destroy();
            this._dispatch = null;
        }
    };
    
    pt.on = function(name, handler) {
        var type = name.split(".")[0];
        if (!this._dispatch[type]) {
            this._dispatch.addEventTypes(type);
        }
        this._dispatch.on(name, handler);
        return this;
    };
    
    pt.off = function(name) {
        var type = name.split(".")[0];
        if (this._dispatch[type]) {
            this._dispatch.on(name, null);
        }
        return this;
    };
    
    pt.fire = function(type, data) {
        if (!this._dispatch){
            return;
        }
        if (!this._dispatch[type]) {
            this._dispatch.addEventTypes(type);
        }
        this._dispatch[type](data);
        return this;
    };
    
    return EventDispatcher;
});
define('sap/viz/framework/common/util/GeometryUtils',['sap/viz/framework/common/util/UADetector'], function(UADetector) {
    var geometry = {};

    /**
     * A safe getBBox function for DOM elements which supports getBBox() function.
     *
     * When an element is invisible (either display:none itself or inside a display:none element), the call to the
     * native getBBox() function behaves differently in different browser. In the latest IE and Chrome, it can
     * peacefully return a SVGRect with all 0s; but it throws exception in firefox.
     *
     * This safe getBBox function takes care of the difference and always return without exception, just like what
     * the latest IE and Chrome would have done.
     *
     * @param node the DOM element
     *
     * @return a SVGRect-like object having "width", "height", "x" and "y" attributes
     */
    geometry.getBBox = UADetector.isFirefox() ? function(node) { // firefox
        try {
            return node.getBBox();
        } catch (e) {
            // not error handling needed
        }

        return {
            width: 0,
            height: 0,
            x: 0,
            y: 0
        };
    } : function(node) { // Chrome and IE
        return node.getBBox();
    };

    geometry.getBoundingClientRect = function (item) {
        var reRect;
        if (item.getBoundingClientRect) {
            reRect = item.getBoundingClientRect();
        } else if (item.length > 0) {
            reRect = {};
            reRect.left = Infinity;
            reRect.right = -Infinity;
            reRect.top = Infinity;
            reRect.bottom = -Infinity;
            for (var i = 0; i < item.length; i++) {
                var itemChildRect = item[i].getBoundingClientRect();
                if (itemChildRect.left < reRect.left) {
                    reRect.left = itemChildRect.left;
                }
                if (itemChildRect.top < reRect.top) {
                    reRect.top = itemChildRect.top;
                }
                if (itemChildRect.right > reRect.right) {
                    reRect.right = itemChildRect.right;
                }
                if (itemChildRect.bottom > reRect.bottom) {
                    reRect.bottom = itemChildRect.bottom;
                }            
            }
            reRect.x = reRect.left;
            reRect.y = reRect.top;
            reRect.width = reRect.right - reRect.left;
            reRect.height = reRect.bottom - reRect.top;
        }
        return reRect;
    };

    return geometry;
});

define('sap/viz/framework/common/util/GraphicModelUtil',["sap/viz/framework/common/util/GeometryUtils",
    'sap/viz/framework/common/util/SVG'
    ], function(GeometryUtils, SVG) {

    var graphicModelUtil = {};

    // [angle, x, y];
    var regexRotate = /rotate\s*\(\s*([+-]?\d+(?:\.\d+)?),\s*([+-]?\d+(?:\.\d+)?),\s*([+-]?\d+(?:\.\d+)?)\s*\)/i;

    // [x]
    var regexSkewX = /skewX\(([+-]?\d+(?:\.\d+)?)\)/i;

    // [x, y];
    var regexTranslate = /translate\(([+-]?\d+(?:\.\d+)?),\s*([+-]?\d+(?:\.\d+)?)\)/i;

    function getFromTransform(regex, node){
        if(node){
            var transform = node.getAttribute("transform");
            if(transform){
                var m = regex.exec(transform);
                if (m) {
                    return Array.prototype.slice.call(m, 1)
                        .map(function (e) { return +e; });
                }
            }
        }
    }

    var getRotation = getFromTransform.bind(null, regexRotate);

    var getSkewX = getFromTransform.bind(null, regexSkewX);

    var getTranslate = getFromTransform.bind(null, regexTranslate);

    graphicModelUtil.getRotation = getRotation;

    graphicModelUtil.getSkewX = getSkewX;

    graphicModelUtil.getTranslate = getTranslate;

    graphicModelUtil.calculateOffset  = function(container, child) {
        var offset = null;
        if (container && child) {
            if ( !container.getBBox ) {
                container = container.querySelector(".v-m-root"); // to get svg root node if container is a div.
            }
            var transform = SVG.getTransformToElement(child, container);
            var bbox = GeometryUtils.getBBox(child);

            offset = {};
            offset.x = transform.e + bbox.x;
            offset.y = transform.f + bbox.y;
        }
        return offset;
    };

    graphicModelUtil.getGraphicSize = function(container, node) {
        var ret = null;
        if (node && container) {
            ret = {};
            var offset = graphicModelUtil.calculateOffset(container, node);
            if(offset){
                ret = offset;
            }
            var bbox = GeometryUtils.getBBox(node);
            ret.width = bbox.width;
            ret.height = bbox.height;
        }
        return ret;
    };

    graphicModelUtil.isVisible = function(container, node) {
        return !(
            node.x + node.width < container.x ||
            node.y + node.height < container.y ||
            node.x > container.x + container.width ||
            node.y > container.y + container.height ||
            (node.width === 0 || node.height === 0));
    };

    return graphicModelUtil;
});

define('sap/viz/framework/chartmodel/GraphicModel',[
    'sap/viz/framework/common/util/TypeUtils',
    "sap/viz/framework/common/util/GraphicModelUtil",
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/util/SVG'
], function(TypeUtils, GraphicModelUtil, DataGraphics, Constants, SVG) {

    // construct
    function GraphicModel() {
        this._chartRoot = null;
        this._exposedModules = ['chartRoot'];
        this._boundary = null;
        this._chartView = null;
    }

    var CLASSDATAPOINT = "." + Constants.CSS.CLASS.DATAPOINT;
    var CLASSDATALINE = ".v-lines";
    var DATA_ATTR_DATAPOINTID = "data-datapoint-id";
    var PLOTBOUND = '.v-plot-bound';
    var DATALABELS = '.' + Constants.CSS.CLASS.DATALABEL_GROUP +
        ' .' + Constants.CSS.CLASS.DATALABEL;
    var CHART_BACKGROUND = '.v-m-background';

    var MODULECSS = {
        legend: {
            MODULE: '.v-m-legend',
            BOUND : '.v-m-legend .v-bound',
            TITLE:' .v-m-legend .viz-legend-title',
            ITEM: '.v-legend-item',
        },
        sizeLegend : {
            MODULE:'.v-m-sizeLegend',
            BOUND : '.v-m-sizeLegend .v-bound',
            TITLE:'.v-m-sizeLegend .viz-legend-title',
            CIRCLE : '.v-m-sizeLegend .v-circles',
            LABEL : '.v-m-sizeLegend .v-valueLabels'
        },
        valueAxis: {
            MODULE: '.v-m-valueAxis',
            BOUND: '.v-m-valueAxis .v-bound',
            BODY: '.v-m-axisBody',
            TITLE: '.v-m-axisTitle',
            AXISLINEGROUP: '.v-line-group',
            AXISLINE: '.v-line-group .v-valueaxisline',
            AXISTICKS: '.v-tick-group .v-tick',
            AXISLABEL: '.v-label-group .viz-axis-label'
        },
        valueAxis2: {
            MODULE: '.v-m-valueAxis2',
            BOUND: '.v-m-valueAxis2 .v-bound',
            BODY: '.v-m-axisBody',
            TITLE: '.v-m-axisTitle',
            AXISLINEGROUP: '.v-line-group',
            AXISLINE: '.v-line-group .v-valueaxisline',
            AXISTICKS: '.v-tick-group .v-tick',
            AXISLABEL: '.v-label-group .viz-axis-label'
        },
        categoryAxis: {
            MODULE: '.v-m-categoryAxis',
            BOUND: '.v-m-categoryAxis .v-bound',
            BODY: '.v-m-axisBody',
            TITLE: '.v-m-axisTitle',
            AXISLINE:'.v-line-group .v-valueaxisline.v-line',
            AXISTICKER: '.v-tick',
            AXISLABEL: '.v-axis-item',
            AXISLABEL_RECT: '.v-axis-item .viz-axis-label-rect',
            AXISLABEL_WRAPPER: '.v-axis-label-wrapper'
        },
        timeAxis:{
            MODULE: '.v-m-timeAxis',
            BOUND: '.v-m-timeAxis .v-bound',
            BODY: '.v-m-axisBody',
            TITLE: '.v-m-axisTitle',
            AXISLINEGROUP: '.v-line-group',
            AXISLINE:'.v-line-group .v-valueaxisline.v-line',
            AXISTICKS: '.v-tick-group .v-tick',
            AXISLABEL: '.v-label-group .viz-axis-label'
        },
        background: {
            MODULE: '.v-m-background',
            BOUND: '.v-m-background',
        }
    };

    function getDefaultGraphic() {
        return {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            visible: false
        };
    }

    // For function based render info
    // the returned value is array structure.
    var emptyFunction = function(){
        return [];
    };

    function getDefaultRotation() {
        return {
            r: 0,
            x: 0,
            y: 0
        };
    }

    GraphicModel.prototype.setChartSize = function(size) {
        this._boundary = size;
    };

    function getTextNodeContent(node) {
        if ( !node ) {
            return;
        }
        var i = 0, len = node.childNodes.length;
        for ( ; i < len; i++) {
            if ( node.childNodes[i].nodeType === node.TEXT_NODE ) {
                //for category axis label
                return node.childNodes[i].textContent;
            } else if ( node.childNodes[i].nodeType === node.ELEMENT_NODE ) {
                //for legend with the latest DOM structure
                var result = [], length = node.childNodes[i].childNodes.length;
                if (length === 1) {
                    return node.childNodes[i].childNodes[0].textContent;
                }
                for (var j = 0; j < length; j ++) {
                    if (node.childNodes[i].childNodes[j].tagName !== "title") {
                        result.push(node.childNodes[i].childNodes[j].textContent);
                    }
                }
                return result;
            }
        }
    }

    GraphicModel.prototype.getSingleLegendItem = function(legendItem) {
        var result;
        var legendBound = this._chartRoot.querySelector('.v-legend-body-bound');
        var boundInfo = GraphicModelUtil.getGraphicSize(this._chartRoot, legendBound);

        var ctx = DataGraphics.getContext(legendItem);
        result = GraphicModelUtil.getGraphicSize(this._chartRoot, legendItem);
        result.color = ctx.color;
        //TODO: here has a bug that textContent will get all the text(including children's), 
        //We need to have another approach to do so.
        var legendItemText = legendItem.querySelector('text');
        result.displayText = getTextNodeContent(legendItemText) || "";
        result.context = ctx.ctx;

        if (ctx.shape) {
            result.shape = ctx.shape;
        }
        result.visible = GraphicModelUtil.isVisible(boundInfo, result);
        result.name = "legendItem";
        return result;
    };

    GraphicModel.prototype.getLegendItems = function() {
        var legendItems = this._chartRoot.querySelectorAll(MODULECSS['legend'].ITEM);
        var legendBound = this._chartRoot.querySelector('.v-legend-body-bound');
        var boundInfo = GraphicModelUtil.getGraphicSize(this._chartRoot, legendBound);
        var result = [];
        for (var i = 0, len = legendItems.length; i < len; i++) {
            result[i] = this.getSingleLegendItem(legendItems[i]);
        }
        return result;
    };

    GraphicModel.prototype._getBubbleSize = function(){
        var circles = this._chartRoot.querySelectorAll(MODULECSS['sizeLegend'].CIRCLE),
            labels = this._chartRoot.querySelectorAll(MODULECSS['sizeLegend'].LABEL), 
            i, result = [], info, bubbleWidths, values, len;

        if (circles.length > 0 && labels.length > 0) {
            bubbleWidths = DataGraphics.getContext(circles[0]);
            values = DataGraphics.getContext(labels[0]);

            if (bubbleWidths && values) {
                len  = Math.max(bubbleWidths.length, values.length);
                for (i=0;i<len;i++) {
                    info = {
                        value : values[i],
                        bubbleWidth : bubbleWidths[i]
                    };
                    result.push(info);
                }
            }
        }

        return result;
    };

    // ctx.index will append by the CategoryAxisNavigator when fired the 
    // afterChartRendered event
    // if the afterChartRendered handler is overridden.
    // the index could construct from {row: ctx.layer, col: ctx._cellIndex}
    var buildCategoryAxisLayer = function(selection) {
        var infoMap = {};
        for (var i = 0, len = selection.length; i < len; i++) {
            var ctx = DataGraphics.getContext(selection[i]);
            var id = ctx.id;
            if(ctx.index){
                infoMap[id] = {
                    'rowIndex' : ctx.index.row,
                    'columnIndex' : ctx.index.col
                };
            }else{
                infoMap[id] = {
                    'rowIndex' : ctx.layer,
                    'columnIndex' : ctx._cellIndex
                };
            }
        }
        return infoMap;
    };

    function buildCategoryLabel(item, rootNode, boundInfo) {
        var rectNode = item.querySelector(MODULECSS.categoryAxis.AXISLABEL_RECT);
        var info;

        info = GraphicModelUtil.getGraphicSize(rootNode, rectNode || item);
        info.name = "categoryAxis.labelItem";
        var ctx = DataGraphics.getContext(item);
        info.context = ctx.ctx;
        
        if (rectNode) { // build rotation/skew info for category label
            info.visible = GraphicModelUtil.isVisible(boundInfo, item);
            var transform = SVG.getTransformToElement(rectNode, rootNode);
            var rotation = GraphicModelUtil.getRotation(rectNode);
            var labelText = item.querySelector('text');
            info.displayText = getTextNodeContent(labelText) || "";

            if (rotation) {
                var bbox = rectNode.getBBox();
                var len = Math.sqrt(bbox.x * bbox.x + bbox.y * bbox.y);
                var translate = GraphicModelUtil.getTranslate(rectNode) || [0, 0];

                info.rotation = {
                    r: rotation[0],
                    x: transform.e + len * transform.a,
                    y: transform.f + len * transform.b,
                    width: bbox.width,
                    height: bbox.height
                };

                info.x = info.rotation.x - bbox.x - translate[0];
                info.y = info.rotation.y - bbox.y - translate[1];
                if (ctx.cellWidth) {
                    info.width = ctx.cellWidth;
                }
                if (ctx.cellHeight) {
                    info.height = ctx.cellHeight;
                }
            }

            var skewX = GraphicModelUtil.getSkewX(rectNode);
            if (skewX) {
                info.skewX = {
                    r: skewX[0],
                    x: info.x - info.y * transform.c,
                    y: info.y
                };
            }
        } else {
            info.visible = false;
        }
        return info;
    }

    GraphicModel.prototype.getCategoryLabels = function(selection) {
        var axisItems = selection.querySelectorAll(MODULECSS.categoryAxis.AXISLABEL);
        var axisBound = selection.querySelector(MODULECSS.categoryAxis.BOUND);
        var boundInfo = GraphicModelUtil.getGraphicSize(this._chartRoot, axisBound);
        var result = [];
        var layerInfo = buildCategoryAxisLayer(axisItems);
        var rootNode = this._chartRoot.querySelector(".v-m-root");

        for (var i = 0, len = axisItems.length; i < len; i++) {
            var itemResult = buildCategoryLabel(axisItems[i], rootNode, boundInfo);
            var ctx = DataGraphics.getContext(axisItems[i]);
            var id = ctx.id;

            if(ctx.index){
                itemResult.index = [ ctx.index.row, ctx.index.col ];
            }else{
                itemResult.index = [ ctx.layer, ctx._cellIndex ];
            }
            itemResult.name = "categoryAxis.labelItem";
            var info = layerInfo[id];
            if (!result[info.rowIndex]) {
                result[info.rowIndex] = [];
            }
            var wrapper = axisItems[i].querySelector(MODULECSS.categoryAxis.AXISLABEL_WRAPPER);
            // Default marker or data point will only append 'rect'/'path' as child
            // when use default render to draw.
            itemResult['hasCustomRenderer'] = _getHasCustomRenderer(wrapper);

            result[info.rowIndex][info.columnIndex] = itemResult;
        }
        return result;
    };

    GraphicModel.prototype.getCategoryAxisLine = function(selection) {

        var axisLine = selection.querySelector(MODULECSS.categoryAxis.AXISLINE);

        var result = {};

        if (axisLine) {
            var size = GraphicModelUtil.getGraphicSize(this._chartRoot, axisLine);
            result.x1 = size.x;
            result.y1 = size.y;
            result.x2 = size.x + size.width;
            result.y2 = size.y + size.height;
            result.visible = true;

        } else {
            result = {
                visible: false,
                x1: 0,
                y1: 0,
                x2: 0,
                y2: 0
            };
        }

        var axisTicker = selection.querySelectorAll(MODULECSS.categoryAxis.AXISTICKER);
        if (axisTicker && axisTicker.length) {
            result.ticksVisible = true;
        } else {
            result.ticksVisible = false;
        }
        result.name = "categoryAxis.line";
        return result;
    };

    GraphicModel.prototype.buildAxisLineInfo = function(selection, name, result) {
        var axisLine = selection.querySelector(MODULECSS[name].AXISLINE);
        result.axisLine = {};
        if (axisLine) {
            var ret = GraphicModelUtil.getGraphicSize(this._chartRoot, axisLine);
            result.axisLine.x1 = ret.x;
            result.axisLine.y1 = ret.y;
            result.axisLine.x2 = ret.x + ret.width;
            result.axisLine.y2 = ret.y + ret.height;
            result.axisLine.visible = true;
        } else {
            result.axisLine.visible = false;
            result.axisLine.x1 = 0;
            result.axisLine.y1 = 0;
            result.axisLine.x2 = 0;
            result.axisLine.y2 = 0;
        }
        var axisTicks = selection.querySelectorAll(MODULECSS[name].AXISTICKS);
        if (axisTicks) {
            result.axisLine.ticksVisible = axisTicks.length > 0;
        }else{
            result.axisLine.ticksVisible = false;
        }
        result.axisLine.name = name + '.line';
    };

    GraphicModel.prototype.buildVauleAxisMinMax = function(selection, name, result) {
        var axisLabes = selection.querySelectorAll(MODULECSS[name].AXISLABEL);
        if (axisLabes && axisLabes.length > 0) {
            var first = DataGraphics.getContext(axisLabes[0]).value;
            var last = DataGraphics.getContext(axisLabes[axisLabes.length - 1]).value;
            result.max = Math.max(first, last);
            result.min = Math.min(first, last);
        }else{
            // TODO: confirm with PO about the validate value
            // -Infinity ?
            result.min = result.max = 0;
        }
    };

    function getAxisDirection(node) {
        var clazz = node.getAttribute("class");
        if (clazz.indexOf("v-m-xAxis") > -1) {
            return "horizontal";
        }
        if (clazz.indexOf("v-m-yAxis") > -1) {
            return "vertical";
        }
    }

    GraphicModel.prototype.buildSpecialEle = function(result, name, selection) {
        if (!!MODULECSS[name]) {
            var me = this;
            if (name === 'legend') {
                result.items = function() {
                    var ret = null;
                    if (arguments.length === 0) {
                        ret = me.getLegendItems();
                    } else {
                        ret = me.getSingleLegendItem(arguments[0]);
                    }
                    return ret;
                };
                result.name = "legend";
            } else if (name === 'categoryAxis') {
                var axisContainer = this._chartRoot.querySelector(MODULECSS.categoryAxis.MODULE);

                result.axisLine = this.getCategoryAxisLine(axisContainer);

                var axisLabels = this._chartRoot.querySelectorAll(MODULECSS.categoryAxis.AXISLABEL);

                // Initialize the labels function
                result.labels = emptyFunction;
                if (axisLabels && axisLabels.length) {
                    //labels
                    result.labelVisible = true;
                    result.labels = function() {
                        return me.getCategoryLabels(axisContainer);
                    };
                } else if (!result.title || !result.title.visible) {
                    result.labelVisible = false;
                }
                if (result.axisLine.visible === false && result.labelVisible === false) {
                    result.visible = false;
                }
                var categoryTitleText = selection.querySelector(MODULECSS[name].TITLE);
                if (!result.title) {
                    result.title = {};
                }

                result.direction = getAxisDirection(axisContainer);
                result.name = "categoryAxis";
            } else if (name === 'valueAxis' || name === 'valueAxis2') {
                this.buildAxisLineInfo(selection, name, result);
                this.buildVauleAxisMinMax(selection, name, result);
                //title rotation
                var titleText = selection.querySelector(MODULECSS[name].TITLE);
                if (!result.title) {
                    result.title = {};
                }

                result.direction = getAxisDirection(selection);
                result.name = name;
            } else if (name === 'sizeLegend') {
                result.bubbleSize = this._getBubbleSize();
            } else if (name === "timeAxis") {
                this.buildAxisLineInfo(selection, name, result);
                var main = this._chartView.getChild('main');
                if (main && main.module && main.module.getDisplayedTimeDomain) {
                    var timeDomain = main.module.getDisplayedTimeDomain();
                    // start & end is timestamp which indicate current time range show on timeAxis
                    result.startTime = timeDomain[0];
                    result.endTime = timeDomain[1];
                }
                var axisBody = selection.querySelector(MODULECSS[name].BODY);
                if (axisBody) {
                    result.level = DataGraphics.getContext(axisBody).level;
                }
                result.direction = getAxisDirection(selection);
            }
        }
    };

    function getClippathNode(node, container) {
        var clippathId = node.getAttribute("clip-path"),
            clippath, match;

        if (clippathId) {
            /* clip-path="url(#plot_main_clipPath_288c06eb-a02f-40ce-85f4-28772e378dd8) */
            match = /^url\s*\(\s*(#[\w-]+)\s*\)$/.exec(clippathId);
            if (match) {
                clippathId = match[1];
                clippath = container.querySelector(clippathId);
                if (clippath) {
                    return clippath.firstElementChild;
                }
            }
        }
    }

    GraphicModel.prototype.buildGeneralBody = function(result, name, selection) {
        if (!!MODULECSS[name] && !!MODULECSS[name].BODY) {
            var body = selection.querySelector(MODULECSS[name].BODY);
            var bodyBound = selection.querySelector(MODULECSS[name].BOUND);
            var bodyResult = null;
            if (body) {
                var clippathNode = getClippathNode(body, selection);
                bodyResult = GraphicModelUtil.getGraphicSize(this._chartRoot, clippathNode || body);
                var bodyBoundInfo = GraphicModelUtil.getGraphicSize(this._chartRoot, bodyBound);
                var parentVisible = result.visible;
                if(parentVisible === true){
                    bodyResult.visible = GraphicModelUtil.isVisible(bodyBoundInfo, result);
                }else{
                    bodyResult.visible = false;
                }
            } else {
                bodyResult = getDefaultGraphic();
            }
            bodyResult.name = name + ".axisBody";
            result.body = bodyResult;
        }
    };

    GraphicModel.prototype.getBackground = function() {
        var result = {};
        var CssConfig = MODULECSS['background'];
        if (!CssConfig) {
            return result;
        }
        var module = this._chartRoot.querySelector(CssConfig.MODULE);
        if (module) {
            result = GraphicModelUtil.getGraphicSize(this._chartRoot, module);
            result.visible = result.width > 0 && result.height > 0;
        } else {
            result = getDefaultGraphic();
        }
        result.name = "background";
        return result;
    };

    GraphicModel.prototype.buildModule = function(name) {
        var result = {};
        var CssConfig = MODULECSS[name];
        if (!CssConfig) {
            return result;
        }
        var module = this._chartRoot.querySelector(CssConfig.MODULE);
        var moduleBound = this._chartRoot.querySelector(CssConfig.BOUND);
        if(moduleBound){
            result = GraphicModelUtil.getGraphicSize(this._chartRoot, moduleBound);
            result.visible = result.width>0 && result.height>0;
            if(result.visible){
                //title
                if(CssConfig.TITLE){
                    var moduleTitle = module.querySelector(CssConfig.TITLE);
                    if(moduleTitle){
                        result.title = GraphicModelUtil.getGraphicSize(this._chartRoot, moduleTitle);
                        result.title.displayText = moduleTitle?moduleTitle.textContent:'';
                        result.title.visible = result.title.width>0 && result.title.height>0;
                    }else{
                        result.title = getDefaultGraphic();
                        result.title.displayText = '';
                    }
                }
            }else{
                result.visible = false;
                result.title = getDefaultGraphic();
                result.title.displayText = '';
            }
            result.title.name = name + ".title";
            this.buildSpecialEle(result, name, module);
            if (CssConfig.BODY) {
                this.buildGeneralBody(result, name, module);
            }

        } else {
            result = getDefaultGraphic();
        }
        result.name = name;

        return result;
    };

    var getter = {
        plot: function() {
            var plot = this._chartRoot.querySelectorAll(".v-m-plot .v-plot-bound");
            if (plot.length === 0) {
                return getDefaultGraphic();
            }
            var result = GraphicModelUtil.getGraphicSize(this._chartRoot, plot[0]);
            if (result.width === 0 || result.height === 0) {
                return getDefaultGraphic();
            }
            var me = this;
            result.dataLines = function() {
                var ret = null;
                if (arguments.length === 0) {
                    ret = me.fetchDataLines();
                } else {
                    // arguments[0] is a svg node
                    ret = me.fetchDataLines([ arguments[0] ])[0];
                }
                return ret;
            };
            result.dataLabels = function() {
                var ret = null;
                if (arguments.length === 0) {
                    ret = me.fetchDataLabelSeries();
                } else {
                    // arguments[0] is a svg node
                    ret = me.fetchDataLabel(arguments[0]);
                }
                return ret;
            };
            result.dataPoints = function() {
                var ret = null;
                if (arguments.length === 0) {
                    ret = me.fetchDatapointsSeries();
                    if (ret.length === 0) {
                        // for some charts they will not render data point, so get render info from plot module
                        ret = me.fetchDatapointsSeriesFromPlot(result);
                    }
                } else {
                    // arguments[0] is a svg node
                    ret = me.fetchDataPoint(arguments[0]);
                }
                return ret;
            };
            result.referenceLines = function () {
                var node = arguments[0];
                var getReferenceLines = function (node) {
                    var axisName = /v-referenceline-([\w\d]+)/.exec(node.getAttribute("class"))[1];
                    var parentG = node.parentNode;
                    var ret =  GraphicModelUtil.getGraphicSize(me._chartRoot, node);
                    var data = DataGraphics.getData(parentG);
                    var labelNode = parentG.parentNode.querySelector('.v-referenceline-label > text');

                    ret.value = data.value;
                    ret.index = data.id;
                    ret.displayText = labelNode ? (labelNode.textContent || "") : "";
                    ret.name = 'referenceLine.' + axisName;
                    ret.visible = GraphicModelUtil.isVisible(plot, node);

                    return ret;
                };
                if (node) {
                    return getReferenceLines(node);
                } else {
                    var nodes = me._chartRoot.querySelectorAll('.v-referenceline');
                    return Array.prototype.map.call(nodes, getReferenceLines);
                }
            };
            result.visible = true;
            result.name = "plot";
            return result;
        },
        title: function() {
            var title = this._chartRoot.querySelectorAll(".v-m-title");
            var titleText = this._chartRoot.querySelectorAll(".v-m-title > .v-title");
            var result = {};
            if (titleText.length === 0) {
                result = getDefaultGraphic();
                result.displayText = '';
            } else {
                result = GraphicModelUtil.getGraphicSize(this._chartRoot, titleText[0]);
                result.displayText = titleText[0] ? titleText[0].textContent : '';
                result.visible = true;
            }
            result.name = "title";
            return result;
        },
        chartRoot: function() {
            var result  =null;
            if (this._boundary) {
                result = {
                    visible: true,
                    x: 0,
                    y: 0,
                    width: this._boundary.width,
                    height: this._boundary.height
                };
            } else {
                result = getDefaultGraphic();
            }
            result.name = 'chartRoot';
            return result;

        },
        legend: function() {
            return this.buildModule('legend');
        },
        sizeLegend: function() {
            return this.buildModule('sizeLegend');
        },
        categoryAxis: function() {
            return this.buildModule('categoryAxis');
        },
        timeAxis: function() {
            return this.buildModule('timeAxis');
        },
        valueAxis: function() {
            return this.buildModule('valueAxis');
        },
        valueAxis2: function() {
            return this.buildModule('valueAxis2');
        }
        // Currently not expose the background 
        // background: function() {
        //     return this.getBackground();
        // }
    };

    GraphicModel.prototype.get = function(name) {
        if (this._exposedModules.indexOf(name) >= 0) {
            return getter[name].bind(this);
        }
        return undefined;
    };

    GraphicModel.prototype.registerExposedModule = function(moduleName) {
        this._exposedModules.push(moduleName);
    };

    GraphicModel.prototype.exposedModules = function() {
        return this._exposedModules;
    };

    function buildLookupByDataPointId(nodes) {
        var lookup = {}, i, len;
        for ( i = 0, len = nodes.length; i< len; i++ ) {
            lookup[ nodes[i].getAttribute(DATA_ATTR_DATAPOINTID) ] = nodes[i];
        }
        return lookup;
    }

    function buildDataPointRenderInfo(g, plotBound, chartRoot, dataLabelLookup, plotMod) {
        var result = GraphicModelUtil.getGraphicSize(chartRoot, g);
        var key = g.getAttribute(DATA_ATTR_DATAPOINTID);

        result.displayText = dataLabelLookup[key] ? dataLabelLookup[key].querySelector("text").textContent : "" ;
        result.visible = GraphicModelUtil.isVisible(plotBound, result);
        result.context = DataGraphics.getContext(g);
        var plotModData = plotMod.getData();
        if ( !result.context && plotModData && plotModData._dataPoints && plotModData._dataPoints[key] ) {
            // context is null because chart not set (timeseries_line)
            result.context = plotModData._dataPoints[key].context();
        }
        result.name = "dataPoint";

        // to distinguish data point bar/column from line marker in combination
        if (g.getAttribute("combination-column") === "true") {
            result.shape = "rect";
        } else if (g.getAttribute("combination-marker") === "true") {
            result.shape = "circle";
        }

        var extraData = DataGraphics.getData(g);

        if (extraData.hasOwnProperty("color")) {
            result.color = extraData.color;
        }

        if (plotMod.getDataPointGraphicFromLineRenderer) {
            var rendererGraphic = plotMod.getDataPointGraphicFromLineRenderer(result.context);
            if (rendererGraphic && rendererGraphic.color) {
                result.color = rendererGraphic.color;
            }
        }

        // Default marker or data point will only append 'rect'/'path' as child
        // when use default render to draw.
        result['hasCustomRenderer'] = _getHasCustomRenderer(g, true);
        return result;
    }

    function _getHasCustomRenderer(dom, checkNegative) {
        var ret = false;
        checkNegative = checkNegative || false;
        if (dom) {
            // data point should check negative-datapoint
            if(checkNegative){
                var negativeDP = dom.querySelector('.negative-datapoint');
                if(negativeDP){
                    dom = negativeDP;
                }
            }
            var child = dom.childNodes[0];
            if(child){
                var _data = DataGraphics.getCustomizationInfo(child);
                if (!_data || (_data && _data['defaultRenderer'] !== true)) {
                    ret= true;
                }
            }
        }
        return ret;
    }

    function buildDataLabelRenderInfo(g, plotBound, chartRoot) {
        var result = GraphicModelUtil.getGraphicSize(chartRoot, g);
        var key = g.getAttribute(DATA_ATTR_DATAPOINTID);

        result.displayText = g.querySelector("text").textContent;
        result.visible = GraphicModelUtil.isVisible(plotBound, result);
        result.context = DataGraphics.getContext(g);
        result.dataPointId = +key;
        result.name = "dataLabel";

        var extraData = DataGraphics.getData(g);

        for (var k in extraData) {
            if (extraData.hasOwnProperty(k) && (k === 'color')) {
                result[k] = extraData[k];
            }
        }
        // Default data label  will only append 'text' as child
        // when use default render to draw.
        result['hasCustomRenderer'] = _getHasCustomRenderer(g);
        return result;
    }

    //Get data point by node
    GraphicModel.prototype.fetchDataPoint = function(node) {
        if (!node) {
            return null;
        }
        var plotBound = GraphicModelUtil.getGraphicSize(this._chartRoot, this._chartRoot.querySelector(PLOTBOUND));
        var dataLabelLookup = buildLookupByDataPointId( this._chartRoot.querySelectorAll(DATALABELS) );
        var plotMod = getPlotModule(this._chartView);
        return buildDataPointRenderInfo(node, plotBound, this._chartRoot, dataLabelLookup, plotMod);
    };

    //Only support 2D series;
    //TODO: support n-D case(trellis);
    GraphicModel.prototype.fetchDatapointsSeries = function() {
        var series = [];
        var datapoints = this._chartRoot.querySelectorAll(CLASSDATAPOINT);
        var plotMod = getPlotModule(this._chartView);

        var plotBound = GraphicModelUtil.getGraphicSize(this._chartRoot,this._chartRoot.querySelector(PLOTBOUND));

        var dataLabelLookup = buildLookupByDataPointId( this._chartRoot.querySelectorAll(DATALABELS) );

        if(datapoints.length){
            for(var i =0,len=datapoints.length;i<len;i++){
                var dp = datapoints[i];
                var seriesInfo = DataGraphics.getData(dp);
                if(!series[seriesInfo.seriesIndex]){
                    series[seriesInfo.seriesIndex]=[];
                }
                series[seriesInfo.seriesIndex][seriesInfo.itemIndex] =
                    buildDataPointRenderInfo(dp, plotBound, this._chartRoot, dataLabelLookup, plotMod);
                if (seriesInfo.shape) {
                    series[seriesInfo.seriesIndex][seriesInfo.itemIndex].shape = seriesInfo.shape;
                }
            }
        }
        return series;
    };

    function getPlotModule(chartView) {
        var main = chartView.getChild('main'),
            plot;
        if (main && main.module) {
            plot = main.module.getChild("plot");
            return plot && plot.module;
        }
    }

    GraphicModel.prototype.fetchDatapointsSeriesFromPlot = function(plotInfo) {
        var plotMod, result = [], plotDPInfo;
        plotMod = getPlotModule(this._chartView);
        var plotBound = GraphicModelUtil.getGraphicSize(this._chartRoot, this._chartRoot.querySelector(PLOTBOUND));
        var offset;

        if ( plotMod && plotMod.getDataPointsRenderInfo ) {
            plotDPInfo = plotMod.getDataPointsRenderInfo();
            offset = plotMod.getOffset();
            plotDPInfo.map(function (info) {
                // return info;
                if (!result[info.seriesIndex]) {
                    result[info.seriesIndex] = [];
                }
                var r = result[info.seriesIndex][info.itemIndex] = {
                    color: info.data.color,
                    context: info.context,
                    displayText: "",
                    hasCustomRenderer: false,
                    visible: false,
                    height: info.height,
                    width: info.width,
                    name: "dataPoint",
                    shape: info.graphic.shape,
                    x: info.data.translate[0] + plotInfo.x - info.width/2 + offset.x,
                    y: info.data.translate[1] + plotInfo.y - info.height/2 + offset.y
                };
                r.visible = GraphicModelUtil.isVisible(plotBound, result);
            });
        }
        return result;
    };

    //Get data label by node
    GraphicModel.prototype.fetchDataLabel = function(node) {
        if (!node) {
            return null;
        }
        var plotBound = GraphicModelUtil.getGraphicSize(this._chartRoot, this._chartRoot.querySelector(PLOTBOUND));
        return buildDataLabelRenderInfo(node, plotBound, this._chartRoot);
    };

    GraphicModel.prototype.fetchDataLabelSeries = function(){
        var series = [];
        var datapoints = this._chartRoot.querySelectorAll(CLASSDATAPOINT);

        var plotBound = GraphicModelUtil.getGraphicSize(this._chartRoot,this._chartRoot.querySelector(PLOTBOUND));

        var dataLabelLookup = buildLookupByDataPointId( this._chartRoot.querySelectorAll(DATALABELS) );

        if( Object.keys(dataLabelLookup).length ){
            for(var i =0,len=datapoints.length;i<len;i++){
                var dataPointId = datapoints[i].getAttribute(DATA_ATTR_DATAPOINTID);
                var dataLabel = dataLabelLookup[dataPointId];
                if ( !dataLabel ) {
                    continue;
                }
                var seriesInfo = DataGraphics.getData(datapoints[i]);
                if(!series[seriesInfo.seriesIndex]){
                    series[seriesInfo.seriesIndex]=[];
                }
                series[seriesInfo.seriesIndex][seriesInfo.itemIndex] =
                    buildDataLabelRenderInfo(dataLabel, plotBound, this._chartRoot);
            }
        }
        return series;
    };

    GraphicModel.prototype.fetchCallout = function() {
        var result;
        if (this._chartRoot) {
            result = {
                label: this._chartRoot.querySelectorAll(".v-callout-label"),
                line: this._chartRoot.querySelectorAll(".v-callout-line")
            };
        }
        return result;
    };

    var regexPathD = /([mMlL])([+-]?\d+(?:\.\d+)?)[\s,]([+-]?\d+(?:\.\d+)?)/g;
    function convertToPoints(pathStr, offsetX, offsetY) {
        offsetX = offsetX || 0;
        offsetY = offsetY || 0;

        var m, points = [];
        while( (m = regexPathD.exec(pathStr)) ) {
            switch (m[1].toUpperCase()) { // only support M|L yet
            case "M":
                if (points.length) { // insert a null point means there is a null data caused line break.
                    points.push([ null, null ]);
                }
                points.push([ +m[2] + offsetX, +m[3] + offsetY ]);
                break;
            case "L":
                points.push([ +m[2] + offsetX, +m[3] + offsetY ]);
                break;
            }
        }
        return points;
    }

    GraphicModel.prototype.fetchDataLines = function(dataLines){
        dataLines = dataLines || this._chartRoot.querySelectorAll(CLASSDATALINE);
        var lines = [];
        var plotNode = this._chartRoot.querySelector(".v-plot-main");
        var plotNodeTransform = SVG.getTransformToElement(plotNode, this._chartRoot.querySelector(".v-m-root") );

        var i = 0, len = dataLines.length, path;
        var extraData;
        for( ; i < len; i++) {
            path = dataLines[i];
            extraData = DataGraphics.getData(path);
            lines.push({
                name: "dataLine",
                context: DataGraphics.getContext(path),
                color: extraData.color,
                points: convertToPoints( path.getAttribute("d"), plotNodeTransform.e, plotNodeTransform.f )
            });
        }
        return lines;
    };

    GraphicModel.prototype.registerRootContainer = function(container) {

        this._chartRoot = container;
    };

    GraphicModel.prototype.setChartView = function(chartView) {

        this._chartView = chartView;
    };

    GraphicModel.prototype.destroy = function() {
        if (this._statusManager) {
            this._statusManager.destroy();
            this._statusManager = null;
        }
        if (this._chartRoot) {
            this._chartRoot = null;
        }
        this._exposedModules = null;
        this._boundary = null;
        this._chartView = null;
    };
    return GraphicModel;
});

define('sap/viz/framework/core/Runtime',["sap/viz/framework/property/PropertyManager",
        "sap/viz/framework/common/effect/EffectManager",
        "sap/viz/framework/env/EnvManager",
        "sap/viz/framework/common/semantic/SemanticManager",
        "sap/viz/framework/common/mark/MarkManager",
        "sap/viz/framework/event/EventDispatcher", 
        "sap/viz/framework/chartmodel/GraphicModel"], 
function (PropertyManager, EffectManager, EnvManager, SemanticManager, MarkManager, EventDispatcher, GraphicModel) {

    "use strict";

    var Runtime = function(propertyMgr, effectMgr, semanticMgr, markMgr, scaleMgr, 
            zoneMgr, evtDisp, statusMgr, interaction, graphicModel, envMgr) {
        this._propertyMgr = propertyMgr;
        this._effectMgr = effectMgr;
        this._semanticMgr = semanticMgr;
        this._markMgr = markMgr;
        this._scaleMgr = scaleMgr;
        this._zoneMgr = zoneMgr;
        this._evtDisp = evtDisp;
        this._statusMgr = statusMgr;
        this._envMgr = envMgr;
        this._interaction = null;
        this._graphicModel = graphicModel;
        // to forbid attaching other properties
        Object.seal(this);
    };

    function attachPropertyManagerFacade(propertyMgr) {
        var facade = propertyMgr.proxy();
        facade.remove = null;
        facade.names = null;
        facade.load = null;
        facade.serialize = null;
        return facade;
    }
    
    /**
     * TODO For internal usage only, should be moved out here
     * UIComponent uses this method to create a fake Runtime to make sure it can run separately
     */
    Runtime._create = function(option) {
        var propertyMgr = new PropertyManager();
        var effectMgr = (option && option.effectManager) || new EffectManager();
        var semanticMgr = new SemanticManager();
        var markMgr = new MarkManager();
        
        var scaleMgr = new PropertyManager();
        var zoneMgr = new PropertyManager();
        
        var statusMgr = new PropertyManager();
        var envMgr = (option && option.envManager) || new EnvManager();
        semanticMgr.setDependency(propertyMgr, statusMgr);
        var graphicModel = new GraphicModel();
        statusMgr.add({
            "interaction.holdSelection": false
        });
        var evtDisp = new EventDispatcher();
        
        return new Runtime(propertyMgr, effectMgr, semanticMgr, markMgr, scaleMgr, zoneMgr,
            evtDisp, statusMgr, null, graphicModel, envMgr);
    };

    Runtime.prototype = {
        /**
         * Obtain a property manager from runtime instance.
         * 
         * @return a property manager instance
         */
        propertyManager: function() {
            return this._propertyMgr;
        },
        /**
         * Obtain an effect manager from runtime instance.
         * 
         * @return an effect manager instance
         */
        effectManager: function() {
            return this._effectMgr;
        },
        
        /**
         * Obtain a semantic manager from runtime instance.
         * 
         * @return a semantic manager instance
         */
        semanticManager: function() {
            return this._semanticMgr;
        },
        
        /**
         * Obtain a mark manager from runtime instance.
         * 
         * @return a mark manager instance
         */
        markManager: function() {
            return this._markMgr;
        },
        
        /**
         * Obtain a scale manager from runtime instance.
         * 
         * @return a scale manager instance
         */
        scaleManager: function() {
            return this._scaleMgr;
        },
        /**
         * Obtain a zone manager from runtime instance.
         * 
         * @return a zone manager instance
         */
        zoneManager: function() {
            return this._zoneMgr;
        },

        /**
         * Obtain a event manager from runtime instance.
         * 
         * @return a event manager instance
         */
        eventDispatcher: function() {
            return this._evtDisp;
        },

        /**
         * Fire an interaction event
         */
        fireInteractionEvent: function(){
            if(this._interaction){
                this._interaction.fireEvent.apply(this._interaction, arguments);
            }
        },

        /**
         * Obtain a status manager from runtime instance.
         * 
         * @return a status manager instance
         */
        statusManager: function () {
            return this._statusMgr;
        },
        /**
         * Obtain a env manager from runtime instance.
         * 
         * @return a env manager instance
         */
        envManager: function () {
            return this._envMgr;
        },
        /**
         * Obtain a graphic model from runtime instance.
         * 
         * @return graphic model instance
         */
        graphicModel: function() {
            return this._graphicModel;
        },

        isDestroyed : function() {
            return (this._propertyMgr == null);
        },
        
        destroy : function() {
            this._propertyMgr = null;
            this._effectMgr = null;
            this._semanticMgr = null;
            this._markMgr = null;
            this._scaleMgr = null;
            this._zoneMgr = null;
            this._evtDisp = null;
            this._statusMgr = null;
            this._envMgr = null;
            this._graphicModel = null;
        }
    };

    return Runtime;

});

define('sap/viz/framework/interaction/InteractionUtils',[
    "sap/viz/framework/common/util/ArrayUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/interaction/Constants",
    "sap/viz/framework/interaction/BehaviorManager",
 
], function(
    ArrayUtils, 
    TypeUtils, 
    DOM,
    Constants, 
    BehaviorManager,
    HighlightHelper) {

    var utils = {};
    var BehaviorConstants = Constants.BEHAVIOR;

    var DEFAULT_CHART_TYPE_KEY = BehaviorConstants.DEFAULT_CHART_TYPE_KEY;
    var DEFAULT_BEHAVIOR_ID = BehaviorConstants.DEFAULT_BEHAVIOR_ID;
    var ALL_TARGETS = BehaviorConstants.ALL_TARGETS;

    function setBehaviorTypeFunc() {
        var that = this;
        return function(value, config) {
            var propBehaviorType;
            if (!TypeUtils.isString(value)) {
                propBehaviorType = DEFAULT_BEHAVIOR_ID;
                value = config.defaultValue;
            } else {
                propBehaviorType = value;
            }

            if (!that._currentBehavior || (that._currentBehaviorType !== propBehaviorType) ||
                BehaviorManager.hasUpdate(propBehaviorType)) {

                that._currentBehaviorType = propBehaviorType;
                if (that._currentBehavior) {
                    that._service.fireEvent("beforeBehaviorUnloaded", null);
                    that._currentBehavior.destroy();
                }
                that._currentBehavior = BehaviorManager.get(propBehaviorType).clone();
                
                that._triggerMap =
                    buildEventTriggerMap(that._currentBehavior, that._chartType, that.getMonitorEventTypes());
                that._service.fireEvent("afterBehaviorLoaded", null);
            }
            return value;
        };
    }

    function buildEventTriggerMap(behavior, currentType, monitorTypes) {
        var actions = behavior.getAllActions();

        if(window.getBehaviorActions){
            window.getBehaviorActions(actions);
        }
        var map = {};
        
        for (var key in actions) {
            if (actions.hasOwnProperty(key)) {
                
                var action = actions[key];
                
                var trigger = action.getTrigger();
                var chartType, mapKey;
                
                var eventName = trigger.name;
                if (eventName) {
                    chartType = trigger.supportedChartTypes;
                    
                    if (chartType === DEFAULT_CHART_TYPE_KEY) {
                        mapKey = DEFAULT_CHART_TYPE_KEY;
                    } else if (chartType === currentType || (TypeUtils.isArray(chartType) && chartType.indexOf(
                        currentType) > -1)) {
                        mapKey = currentType;
                    } else {
                        continue;
                    }
                    if (!map[mapKey]) {
                        map[mapKey] = {};
                    }
                    if (!map[mapKey][eventName]) {
                        map[mapKey][eventName] = [];
                    }
                    map[mapKey][eventName].push(key);
                }
                
            }
        }
        //merge current chart type's trigger with default trigger
        if (map[currentType]) {
            for (var triggerKey in map[currentType]) {
                //only merge raw event case
                if (map[DEFAULT_CHART_TYPE_KEY][triggerKey] && monitorTypes.indexOf(triggerKey) > -1) {
                    var clonedDefaultMap = map[DEFAULT_CHART_TYPE_KEY][triggerKey].slice();
                    var currentItems = map[currentType][triggerKey];
                    for (var i = 0; i < currentItems.length; i++) {
                        var currentTrigger = behavior.getActionById(currentItems[i]).getTrigger();
                        for (var j = 0; j < clonedDefaultMap.length; j++) {
                            var defaultTrigger =
                                behavior.getActionById(clonedDefaultMap[j]).getTrigger();
                            //if same targets and excludeTargets,
                            //replace default one with chart-type-specified one's trigger
                            if (isSameTrigger(currentTrigger, defaultTrigger)) {
                                clonedDefaultMap.splice(j, 1);
                                break;
                            }
                        }
                    }
                    map[currentType][triggerKey] = clonedDefaultMap.concat(map[currentType][triggerKey]);
                }
            }
        }
        return map;
    }

    function isEquivalentArray(a1, a2) {
        return ArrayUtils.equal(a1.slice().sort(), a2.slice().sort());
    }

    function isSameTrigger(currentTrigger, defaultTrigger, keys) {
        var flag = true;
        (keys || ["targets", "excludeTargets"]).forEach(function(e) {
            if (!TypeUtils.isArray(currentTrigger[e]) || !TypeUtils.isArray(defaultTrigger[e])) {
                if (currentTrigger[e] !== defaultTrigger[e]) {
                    flag = false;
                }
            } else {
                if (!isEquivalentArray(currentTrigger[e], defaultTrigger[e])) {
                    flag = false;
                }
            }
        });
        return flag;
    }

    function isTriggerActivated(trigger, event, rootNode) {
        if ((!trigger.targets && !trigger.excludeTargets) || trigger.name !== event.name) {
            return false;
        }
        var ret = false;

        var foundInclude, notFoundExclude;
        var eventData = event.data;
        var eventTarget = eventData.target;

        if (trigger.targets === ALL_TARGETS) {
            foundInclude = eventTarget;
        } else {
            foundInclude = tryToFindNode(trigger.targets, eventTarget, rootNode);
        }
        if (trigger.excludeTargets == null) {
            notFoundExclude = true;
        } else {
            notFoundExclude = !tryToFindNode(trigger.excludeTargets, eventTarget, rootNode);
        }

        if (foundInclude && notFoundExclude) {
            ret = true;
            eventData.currentTarget = foundInclude;
        }
        return ret;
    }

    function tryToFindNode(cssClass, node, rootNode) {
        if (!node || !node.getAttribute) {
            return null;
        }

        for (var i = 0; i < cssClass.length; i++) {
            if (DOM.hasClass(node, cssClass[i])) {
                return node;
            }
        }

        if (node !== rootNode.node()) {
            //not found in this level, try its parent node
            return tryToFindNode(cssClass, node.parentNode, rootNode);
        }
        return null;
    }
    
    function getDisableDeselectEvent(id, type, excludes)
    {
        return {
            "id": id,
            "triggerEvent": {
                "name": "click",
                "supportedChartTypes": type,
                "excludeTargets":excludes,
            },
            "handler": function(event, service){
                if(!service.getProperties().get("interaction.enableDeselectAll")){
                    return;
                }
                
                service.fireEvent(event, true);
            }
        };
    }
    utils.setBehaviorTypeFunc = setBehaviorTypeFunc;
    utils.buildEventTriggerMap = buildEventTriggerMap;
    utils.isTriggerActivated = isTriggerActivated;
    utils.isSameTrigger = isSameTrigger;
    utils.getDeselectEvent = getDisableDeselectEvent;
    

    return utils;

});


define('sap/viz/framework/interaction/Interaction',[
    "sap/viz/framework/common/util/ArrayUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/interaction/Constants",
    "sap/viz/framework/interaction/DesktopMonitor",
    "sap/viz/framework/interaction/MobileMonitor",
    "sap/viz/framework/interaction/BehaviorManager",
    "sap/viz/framework/interaction/InteractionService",
    'sap/viz/framework/core/Runtime',
    'sap/viz/framework/interaction/InteractionUtils'
], function(ArrayUtils, TypeUtils, DOM, UADetector,
    Constants, DesktopMonitor, MobileMonitor, 
    BehaviorManager, InteractionService, Runtime, InteractionUtils) {

    var BehaviorConstants = Constants.BEHAVIOR;

    var DEFAULT_CHART_TYPE_KEY = BehaviorConstants.DEFAULT_CHART_TYPE_KEY;
    var DEFAULT_BEHAVIOR_ID = BehaviorConstants.DEFAULT_BEHAVIOR_ID;
    var ALL_TARGETS = BehaviorConstants.ALL_TARGETS;

    function useMobileMonitor(){
        return UADetector.isMobile() && 
                            (!UADetector.isIE() || UADetector.isPointerEnabled());
    }

    /**
     * @param option {
     *  runtime: {Runtime} optional,
     *  rootNode: {d3 Dom Element} required
     * }
     */
    var Interaction = function(option) {
        this._enabled = (option.enabled == null) ? true : option.enabled;
        this._monitor = null;
        this._currentBehavior = null;
        this._currentBehaviorType = null;
        this._standAlone = false;
        if (option.runtime == null) {
            option.runtime = Runtime._create(option);
            this._standAlone = true;
        }
        
        this._service = new InteractionService(option, this._standAlone);
        
        this._service.on("fire", this._logicEventHandler.bind(this));
        
        this._rootNode = option.rootNode;
        this._rootNode.style("cursor", "default");
        var properties = this._service.getProperties();

        /* if standAlone, we need add interaction.selectabiblity.mode
           for core charts, only number chart not need interaction.selectabibity.mode
         */
        if ( this._standAlone || properties.has("interaction.selectability.mode") ) {
            properties.add({
                "interaction": {
                    "selectability": {
                        "mode": {
                            set: function(value, config) {
                                var selMode = (value || "").toUpperCase();
                                switch (selMode) {
                                    case Constants.SELECTION_MODE.INCLUSIVE:
                                    case Constants.SELECTION_MODE.EXCLUSIVE:
                                    case Constants.SELECTION_MODE.NONE:
                                    case Constants.SELECTION_MODE.SINGLE:
                                    case Constants.SELECTION_MODE.MULTIPLE:
                                        return value;
                                    default:
                                        return config.defaultValue;
                                }
                            }
                        }
                    }
                }
            });
        }
        properties.add({
            "interaction": {
                "behaviorType": {
                    defaultValue: null,
                    set: InteractionUtils.setBehaviorTypeFunc.call(this)
                }
            }
        });
        if(this._standAlone) {
            properties.add({
                "interaction": {
                    "selectability": {
                        "behavior": Constants.SELECTION_BEHAVIOR.DATAPOINT
                    }
                }
            });    
        }
        this._chartType = option.chartType;
        this._backgroundRect = null;
        this._triggerMap = null;
    };

    Interaction.prototype.initialize = function() {
        this.initializeBehavior();
        this._initializeMonitor();
        var handler = this._logicEventHandler.bind(this);
        if(this._monitor){
            this._monitor.setAllHandler(handler);
        }
        this._initialized = true;
        if (this._standAlone) {
            this._service.fireEvent("standAloneInitialized", null);
        }
        this._service.fireEvent("afterChartRendered", null);
    };

    Interaction.prototype.fireEvent = function(){
        if(this._initialized){
            this._service.fireEvent.apply(this._service, arguments);
        }
    };

    Interaction.prototype._destroyMonitor = function(){
        if(this._monitor) {
            this._monitor.destroy();
        }
        this._monitor = null;
    };

    Interaction.prototype.destroy = function() {
        this._destroyMonitor();
        if (this._currentBehavior) {
            this._service.fireEvent("beforeBehaviorUnloaded", null);
            this._currentBehavior.destroy();
        }
        this._currentBehavior = null;
        if (this._service) {
            this._service.on("fire", null);
            this._service.destroy();
        }
        
        this._service = null;
        this._rootNode = null;
        this._props = null;
        this._backgroundRect = null;
        this._currentBehaviorType = null;
        this._triggerMap = null;
    };

    /**
     * Enable/disable all interactions or get the status of enabled.
     * @param {boolean} [enabled]
     * @return {boolean|Interaction}
     */
    Interaction.prototype.enabled = function(enabled){
        if(!arguments.length){
            return this._enabled;
        }
        this._enabled = enabled;
        return this;
    };
    
    /**
     * Enable outside to set properties of interaction.
     */
    Interaction.prototype.properties = function(props) {
        if (arguments.length === 0) {
            return this._service.getProperties().get();
        }
        
        var propertyMgr = this._service.getProperties();
        propertyMgr.set(props);
    };

    /**
     * Get current DOM monitor of Interaction.
     * @return {DesktopMonitor|MobileMonitor}
     */
    Interaction.prototype.getMonitor = function() {
        if (!this._monitor){
            this._initializeMonitor();
        }
        return this._monitor;
    };
    Interaction.prototype._initializeMonitor = function(){
        var properties = this._service.getProperties();
        var thumbnailMode = properties ?  properties.get("interaction.noninteractiveMode") : false;
        var designTime = properties ? properties.get("interaction.behaviorType") === 'DesignTimeBehavior' : false;
        if(thumbnailMode && !designTime) {
            this._destroyMonitor();
        } else {
            var needNewOne = !this._monitor  ||  (this._monitor._isMobile !== useMobileMonitor());
            if(needNewOne){
                this._destroyMonitor();
                this._monitor =  useMobileMonitor() ?
                            new MobileMonitor(this._rootNode) :
                            new DesktopMonitor(this._rootNode);
            }
        }

        if (this._monitor){
            this._monitor.setProperties(properties.get("interaction"));
        }

        return this;
    };
   
    Interaction.prototype.initializeBehavior = function() {
        var chartAppId = this._service._statusMgr.get("chartAppId");
        var customizationsId = this._service._statusMgr.get("customizationsId");
        var userBehaviorType = this._service.getProperties().get("interaction.behaviorType");
        var types = [ chartAppId + "-" + customizationsId, userBehaviorType, DEFAULT_BEHAVIOR_ID ];
        types.some(function (type) {
            if (!type) {
                return; // continue;
            }
            var behavior = BehaviorManager.get(type, null);
            if (behavior) {
                if (!this._currentBehavior || type !== this._currentBehaviorType) {
                    this._currentBehavior = behavior.clone();
                    this._currentBehaviorType = type;

                    this._triggerMap = InteractionUtils.buildEventTriggerMap(
                        this._currentBehavior, this._chartType, this.getMonitorEventTypes());
                    this._service.fireEvent("afterBehaviorLoaded", null);
                }
                return true; // break;
            }
        }.bind(this));
    };

    Interaction.prototype.initializeStatus = function(){
        var service = this._service;
        service.setStatus("plotArea.window", service.getStatusManager().get("plotArea.window"));
    };

    Interaction.prototype.getMonitorEventTypes = function (){
        return useMobileMonitor() ?
            MobileMonitor.getMonitorEventTypes() :
            DesktopMonitor.getMonitorEventTypes();
    };
    
    Interaction.prototype._setScales = function(scales){
        this._service._setScales(scales);  
    };
    
    Interaction.prototype._fireExternalEvent = function(name, data, bSync){
        this._service.fireExternalEvent(name, data, bSync);
    };

    Interaction.prototype._logicEventHandler = function(event) {
        /**
         * trigger event after behavior is loaded to initialize required status like selectedDataPoints
         * event it is set to disable for example, ghost mode. Otherwise, status will not be correct when the 
         * chart is updated later.
         */
        if(this._enabled || event.name === "afterBehaviorLoaded"){
            var eventName = event.name,
                behavior = this._currentBehavior,
                mapKey;
            if (event.useDefault) {
                mapKey = DEFAULT_CHART_TYPE_KEY;
                delete event.useDefault;
            } else if (this._triggerMap[this._chartType] && this._triggerMap[this._chartType][eventName]) {
                mapKey = this._chartType;
            } else if (this._triggerMap[DEFAULT_CHART_TYPE_KEY] && 
                    this._triggerMap[DEFAULT_CHART_TYPE_KEY][eventName]) {
                mapKey = DEFAULT_CHART_TYPE_KEY;
            }

            if (mapKey) {
                var actions = this._triggerMap[mapKey][eventName] || [];
                actions.forEach(function(key) {
                    var action = behavior.getActionById(key);
                    var trigger = action.getTrigger();
                    
                    // Only enable action wil be trigger
                    // custom action can disable the default action  
                    if ((this.getMonitorEventTypes().indexOf(eventName) < 0) ||
                        InteractionUtils.isTriggerActivated(trigger, event, this._rootNode)) {
                        behavior.trigger(key, event, this._service);
                    }
                }, this);
            }
        }
    };

    return Interaction;
});

define('sap/viz/framework/common/util/FeedingZoneUtil',["sap/viz/framework/common/util/GeometryUtils",
    'sap/viz/framework/common/util/SVG'],
    function Setup(GeometryUtils, SVG) {
        var FeedingZoneUtil = {
            buildRes: function(name, feed, selection, byBound) {
                var elements = selection.selectAll('.v-m-' + name);
                var bound = [];
                elements.each(function(d, i) {
                    var rect = GeometryUtils.getBBox(this);
                    if (byBound) {
                        var node = d3.select(this).select('.v-bound').node();
                        if (node === null) {
                            return;
                        }
                        rect = GeometryUtils.getBBox(node);
                    }
                    var transform = SVG.getTransformToElement(this, this.ownerSVGElement);
                    if(transform){
                        var point1 = [transform.e + rect.x, transform.f + rect.y];
                        var point2 = [point1[0] + rect.width, point1[1]];
                        var point3 = [point1[0] + rect.width, point1[1] + rect.height];
                        var point4 = [point1[0], point1[1] + rect.height];
                        bound.push([point1, point2, point3, point4]);
                    }
                });
                var res = {
                    name: name,
                    bindDef: feed,
                    bound: bound
                };
                return res;
            },
            extension: function(){
                colorLegend.apply(this, arguments);
            },
            xy: function() {
                colorLegend.apply(this, arguments);
            },
            ty : function() {
                colorLegend.apply(this, arguments);
            },
            xyy: function() {
                colorLegend.apply(this, arguments);
            },
            "xy.hichert": function() {
                colorLegend.apply(this, arguments);
            },
            "xyy.hichert": function() {
                patternLegend.apply(this, arguments);
            },
            mekko: function() {
                colorLegend.apply(this, arguments);
            },
            radar: function() {
                colorLegend.apply(this, arguments);
            },
            pie: function() {
                colorLegend.apply(this, arguments);
            },
            treemap: function() {
                MBCLegend.apply(this, arguments);
            },
            xx: function() {
                MBCLegend.apply(this, arguments);
            },
            heatmap: function() {
                MBCLegend.apply(this, arguments);
            },
            tagcloud: function() {
                MBCLegend.apply(this, arguments);
            },
            yy: function() {
                var feedingZone = arguments[0];
                var feedDef = arguments[1];
                for (var i in feedingZone) {
                    if (i === 'legend') {
                        feedingZone[i].bindDef = [];
                        for (var j in feedDef) {
                            if (feedDef[j].id === 'color' || feedDef[j].id === 'shape') {
                                feedingZone[i].bindDef.push({id : feedDef[j].id});
                            }
                        }
                    }
                }
            },
            bubble: function() {
                var feedingZone = arguments[0];
                var feedDef = arguments[1];
                for (var i in feedingZone) {
                    if (feedingZone[i].name === 'sizeLegend') {
                        feedingZone[i].bindDef = addSizeLegend.apply(this, arguments);
                        break;
                    }
                }
            },
            scatter: function() {
                var feedingZone = arguments[0];
                var feedDef = arguments[1];
                var sizeLegendPos = -1;
                for (var i in feedingZone) {
                    if (feedingZone.hasOwnProperty(i)) {
                        if (feedingZone[i].name === 'plot') {
                            feedingZone[i].bindDef = feedingZone[i].bindDef.filter(function(e) {
                                if (e.id.indexOf('bubble') < 0) {
                                    return e;
                                }
                            });
                        }
                        if (feedingZone[i].name === 'sizeLegend') {
                            sizeLegendPos = i;
                        }
                    }
                }
                if (sizeLegendPos > -1) {
                    feedingZone.splice(sizeLegendPos, 1);
                }
            },
            tBullet: function (){
                colorLegend.apply(this, arguments);
            },
            bullet: function (){
                colorLegend.apply(this, arguments);
            },
            waterfall: function (){
                colorLegend.apply(this, arguments);
            },
            "combex": function() {
                colorLegend.apply(this, arguments);
            },
            plot : function(that) {
                return {
                    tempFeedingZone: {
                        plot: {
                            value: [],
                            readonly: true,
                            serializable: false,
                            get: function() {
                                var node, result, feeding, root;
                                if (that._selections && that._selections.plot &&
                                    that._selections.plot.node()) {
                                    node = that._selections.plot.node();
                                } else if (that._selection) {
                                    node = that._selection.node();//pie, donut
                                }
                                if (node) {
                                    root = d3.select(node.ownerSVGElement);
                                    result = FeedingZoneUtil.buildRes('plot', feeding, root, true);
                                }
                                return result;
                            }
                        }
                    }
                };
            }
        };

        var colorLegend = function() {
            var feedingZone = arguments[0];
            var feedDef = arguments[1];
            for (var i in feedingZone) {
                if (i === 'legend') {
                    feedingZone[i].bindDef = [];
                    for (var j in feedDef) {
                        if (feedDef[j].id === 'color') {
                            feedingZone[i].bindDef.push({id : feedDef[j].id});
                        }
                    }
                }
            }
        };

        var patternLegend = function() {
            var feedingZone = arguments[0];
            var feedDef = arguments[1];
            for (var i in feedingZone) {
                if (i === 'legend') {
                    feedingZone[i].bindDef = [];
                    for (var j in feedDef) {
                        if (feedDef[j].id === 'pattern' || feedDef[j].id === 'pattern2') {
                            feedingZone[i].bindDef.push({id : feedDef[j].id});
                        }
                    }
                }
            }
        };


        var MBCLegend = function() {
            var feedingZone = arguments[0];
            var feedDef = arguments[1];
            for (var i in feedingZone) {
                if (i === 'legend') {
                    feedingZone[i].bindDef = [];
                    for (var j in feedDef) {
                        if (feedDef[j].id === 'color') {
                            feedingZone[i].bindDef.push({id : feedDef[j].id});
                        }
                    }
                }
            }
        };

        var addSizeLegend = function() {
            var feedingZone = arguments[0];
            var feedDef = arguments[1];
            for (var i in feedDef) {
                if (feedDef[i].id === 'bubbleWidth') {
                    for (var j in feedingZone) {
                        if (feedingZone[j].name === 'sizeLegend') {
                            return [{id : feedDef[i].id}];
                        }
                    }
                }
            }
        };
        return FeedingZoneUtil;
    });

define('sap/viz/framework/common/util/ComboExShapeUtil',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ArrayUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/chartmodel/ContextBuilder'
], function(
    TypeUtils,
    ArrayUtils,
    ObjectUtils,
    ContextBuilder
) {

    var util = {};
    var UNDERLINE_C = "_";

    function buildSeriesContext(dataModel, options) {
        var series = dataModel.series();
        series = options.isTrellis? ArrayUtils.flat(ArrayUtils.flat(series)) : series;

        series.forEach(function(sr, i) {
            var context = {};
            if(sr.seriesMeta){
                ContextBuilder.buildBasic(dataModel._bindingResults, sr.seriesMeta, null, null, context);
            }

            if (!sr.hasOwnProperty("data")) {
                Object.defineProperty(sr, "data", {
                    enumerable: false,
                    value: context,
                    writable: true
                });
            } else {
                sr.data = context;
            }
        });
    }

    function createSeriesSettings(dataModel, propertyMgr, semanticMgr, options) {
        var series = dataModel.series();
        series = options.isTrellis? ArrayUtils.flat(ArrayUtils.flat(series)) : series;

        var shapes = {
            valueAxis: propertyMgr.get("plotArea.dataShape.primaryAxis"),
            valueAxis2: propertyMgr.get("plotArea.dataShape.secondaryAxis")
        };
        var dataShapeStacked = propertyMgr.get("plotArea.dataShape.stacked");
        // dataShape property error tolerance
        function shapeTolerance(shape) {
            return shape || "line";
        }
        if (shapes.valueAxis) {
            shapes.valueAxis = shapes.valueAxis.map(shapeTolerance);
        }
        if (shapes.valueAxis2) {
            shapes.valueAxis2 = shapes.valueAxis2.map(shapeTolerance);
        }
        var groupId;
        series.forEach(function(sr, i) {
            var mndKey = sr.spec.mndKey,
                mndIdx = sr.spec.mndIdx || 0;
            var opt = semanticMgr.analyzeSeries(sr.data) || {};
            if (options.isFlexibleStack) {
                //all types are bar.
                opt.type = "bar";
            }
            

            // here we keep backward compatibility for default value of combination dataShape property
            var shape;
            if (opt.hasOwnProperty("type")) {
                shape = TypeUtils.isString(opt.type) && 
                ["bar", "line", "area"].indexOf(opt.type.toLowerCase()) > -1 ? opt.type.toLowerCase() : "bar";
            } else if (shapes[mndKey]) {
                shape = shapes[mndKey][mndIdx] || "line";
            }
            // prefix s to distinguish user specified stack key from index-generated group key
            var stack = opt.stack;
            if (TypeUtils.isArray(dataShapeStacked) && dataShapeStacked.indexOf(shape) > -1 && !stack) {
                //migrate stacked combination dataShape settings to combex series property
                stack = mndKey + shape;
            } 
            var group = stack ? ("s:" + stack) : i;
            // series should conform its array interface as much as possible, so settings shalle be non-enumerable
            if (!sr.hasOwnProperty("settings")) {
                Object.defineProperty(sr, "settings", {
                    enumerable: false,
                    value: {},
                    writable: true
                });
            } else {
                //empty settings if it exists
                sr.settings = {};
            }

            if (options.isFlexibleStack) {
                //for stacked chart, "stack" is the id. No more mnd or type.
                groupId = UNDERLINE_C + (stack || "");
            } else {
                groupId = (mndKey + UNDERLINE_C + shape + UNDERLINE_C + group);
            }
            
            ObjectUtils.extend(sr.settings, opt, {
                type: shape,
                stack: stack,
                group: groupId
            });
        });
    }

    function handleComboExShape(type, dataModel, propertyManager, semanticMgr) {
        var options = {};
        options.isFlexibleStack = (type === "info/stacked_column" && propertyManager.origin.get("plotArea.series"));
        options.isTrellis = (type === "info/trellis_combinationEx");

        if (type === "info/combinationEx" || options.isFlexibleStack || options.isTrellis) {
            buildSeriesContext(dataModel, options);
            createSeriesSettings(dataModel, propertyManager, semanticMgr, options);
        }
    }

    util.handleComboExShape = handleComboExShape;

    return util;
    
});

define('sap/viz/framework/core/BaseApp',[
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/common/util/DOM',
    'sap/viz/framework/common/lang/LangManager',
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/env/EnvManager"
], function (NumberUtils, DomUtil, LangManager, Constants, EnvManager) {

    "use strict";

    var BaseApp = function () {
        this._sizeInterval = null;
        this._size = null;
        this._container = null;
        
        this._i18nListener = {
            fn: this._localeChanged,
            scope: this
        };

        this._envMgr = new EnvManager();

        LangManager.addListener(this._i18nListener);
    };

    var PIXEL_REG = /^\d+(\.\d+)?px$/;

    /**
     * Interface method.
     */
    BaseApp.prototype._localeChanged = function() {
        this._setupRTL();
    };

    BaseApp.prototype._setupRTL = function() {
        var addRTL = false;
        var rootNode = this._getRootNode();
        if (rootNode) {
            //according to PO's requirement, we add RTL setting for some languages.
            var i;
            for(i = 0; i < Constants.RTL_LANG.length; i++) {
                if(LangManager.currentLanguage.indexOf(Constants.RTL_LANG[i]) === 0) {
                    addRTL = true;
                    break;
                }
            }
            rootNode.style.direction = addRTL ? "rtl" : "";

            this._envMgr.set(Constants.DIRECTION.LANG_DIR,
                Constants.DIRECTION[(addRTL || (DomUtil.getBrowserComputedStyle(rootNode, 'direction') ===
                    Constants.DIRECTION.RTL)) ? "RTL" : "LTR"]);
        }
        return addRTL;
    };

    BaseApp.prototype._getRootNode = function() {

    };
    
    BaseApp.prototype._getCurrentSize = function() {
        return null;
    };
    
    BaseApp.prototype._setCurrentSize = function(size) {
    };
    
    BaseApp.prototype._onSizeChange = function(sizeInfo) {
        return null;
    };
    
    BaseApp.prototype._autoResize = function(isAuto, invisibleRender) {
        if (isAuto) {
            if (this._sizeInterval) {
                window.clearInterval(this._sizeInterval);
            }
            this._sizeInterval = window.setInterval(function () {
                if (this._container) {
                    var style = DomUtil.getBrowserComputedStyle(this._container);
                    var boundingClientRect = this._container.getBoundingClientRect();
                    var size = {
                        width: NumberUtils.getPositiveInt(
                            parseInt(style.width.match(PIXEL_REG) ? 
                                style.width : boundingClientRect.width ,
                                10),
                            this._size.width),
                        height: NumberUtils.getPositiveInt(
                            parseInt(style.height.match(PIXEL_REG) ?
                                style.height : boundingClientRect.height,
                                10),
                            this._size.height)
                    };
                    var isVisible = DomUtil.getBrowserComputedStyle(
                        this._container, 'visibility') === "visible";
                    if ((invisibleRender || isVisible) &&
                        (size.width !== this._size.width || size.height !== this._size.height)) {
                        this.size({
                            width: size.width,
                            height: size.height,
                            auto: true
                        });
                        this._size.width = size.width;
                        this._size.height = size.height;
                    }
                }
            }.bind(this), 100);
        } else {
            if (this._sizeInterval) {
                window.clearInterval(this._sizeInterval);
            }
        }
    };

    BaseApp.prototype._setDefaultSize = function() {
        var width = null;
        var height = null;

        if (this._size) {
            width = this._size.width;
            height = this._size.height;
        }
        // Do not get computed style if not need to because it can be slow
        var style;
        width = parseInt(width, 10);
        if(isNaN(width) || width < 0){
            style = DomUtil.getBrowserComputedStyle(this._container);
            width = parseInt(style.width, 10);
        }
        height = parseInt(height, 10);
        if(isNaN(height) || height < 0){
            style = style || DomUtil.getBrowserComputedStyle(this._container);
            height = parseInt(style.height, 10);
        }
        this._setCurrentSize({
            width: width,
            height: height
        });

        if (this._size == null) {
            var auto = arguments.length ? arguments[0] : true;
            this._autoResize(auto);
            this._size = {
                width: width,
                height: height,
                auto: auto
            };
        }
    };
    
    /**
     * Get or set the size of chart app.
     *
     * @param {height,width} a object including width and height information
     * @param {boolean} force re-render event width/height is equal to current size.
     * @return current size information
     */
    BaseApp.prototype.size = function (sizeInfo, force) {
        var args = [].slice.call(arguments);
        if (args.length) {
            // if user just set the sizeInfo.auto or set error data
            if (sizeInfo == null) {
                return;
            }
            // if the chart has not been append to the dom tree, then return
            if (!document.body.contains(this._container)) {
                return;
            }

            // if user just set the sizeInfo.auto or set error data
            var isAutoSize = !!sizeInfo.auto;
            if (this._size) {
                this._size.auto = isAutoSize;
            }

            if (isAutoSize === false && 
                (isNaN(sizeInfo.width) || isNaN(sizeInfo.height) ||
                sizeInfo.width <= 0 || sizeInfo.height <= 0)) {
                return;
            }

            // only work for situation that user call size method before chart view is created
            this._size = this._size || {};
            
            this._size.auto = isAutoSize;
            
            if (isAutoSize === false) {
                this._size.width = sizeInfo.width;
                this._size.height = sizeInfo.height;
            }
        }

        var currentSize = this._getCurrentSize();
        
        if (currentSize == null) {
            return;
        }
        
        if (args.length > 0) {

            if (currentSize.width === sizeInfo.width &&
                currentSize.height === sizeInfo.height && !force) {
                return;
            }

            if (sizeInfo.auto) {
                var style = DomUtil.getBrowserComputedStyle(this._container);
                var boundingClientRect = this._container.getBoundingClientRect();
                sizeInfo.width = NumberUtils.getPositiveInt(
                    parseInt(style.width.match(PIXEL_REG) ? 
                            style.width : boundingClientRect.width, 10),
                    this._size.width);
                sizeInfo.height = NumberUtils.getPositiveInt(
                    parseInt(style.height.match(PIXEL_REG) ?
                            style.height : boundingClientRect.height, 10),
                    this._size.height);
            }

            this._setCurrentSize(sizeInfo);
            this._onSizeChange(sizeInfo);

            this._autoResize(this._size.auto, sizeInfo.invisibleRender);
        } else {
            currentSize.auto = this._size.auto;
            this._autoResize(this._size.auto);
            return currentSize;
        }
    };

    BaseApp.prototype.destroy = function() {
        if (this._sizeInterval) {
            window.clearInterval(this._sizeInterval);
        }
        this._sizeInterval = null;
        this._size = null;
                
        LangManager.removeListener(this._i18nListener);
        this._i18nListener = null;
    };
    
    return BaseApp;
});

define('sap/viz/framework/scale/ScaleUtil',[
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/TimeUtil"
], function Setup(NumberUtils, TypeUtils, TimeUtil) {
        var Scaler = {
            getScaleOfType : function(scales, typeStr){
                if (!scales){
                    return null;
                }
                for (var i = 0; i < scales.length; i++){
                    var s = scales[i];
                    if (s.feed === typeStr){
                        return s;
                    }
                }
                return null;
            },

            hasNoNullValue: function(data, data2){
                var bValue = false;
                if(TypeUtils.isArray(data)){
                    for(var i = 0; !bValue && i < data.length; ++i){
                        bValue = Scaler.hasNoNullValue(data[i], data2[i]);
                    }
                }else {
                    bValue = TypeUtils.isNumber(data) && TypeUtils.isNumber(data2);
                }
                return bValue;
                
            },
            truncateScaleOption: function(options, scaleOption, propMgr) {
                var dataTimeLevel = options.dataTimeLevel;
                var showAsUTC = options.showAsUTC;
                var start = scaleOption.start;
                if (start != null && typeof start !== 'number') {
                    start = new Date(start).getTime();
                }
                var end = scaleOption.end;
                if (end != null && typeof end !== 'number') {
                    end = new Date(end).getTime();
                }
                var ret = {
                    feed: scaleOption.feed,
                    start: TimeUtil.truncate(start, dataTimeLevel, showAsUTC, propMgr),
                    end: TimeUtil.truncate(end, dataTimeLevel, showAsUTC, propMgr)
                };
                if (ret.start == null) {
                    ret.start = "auto";
                }
                if (ret.end == null) {
                    ret.end = "auto";
                }
                ret.allowEqual = true;
                return ret;
            }
        };

        return Scaler;
    });

define('sap/viz/framework/chartmodel/DataModelManager',[
    'sap/viz/framework/binding/BindingManager',
    'sap/viz/framework/scale/ScaleUtil',
    'sap/viz/framework/common/util/FiscalUtil',
    'sap/viz/framework/chartmodel/DataModel'
], function(
    BindingManager,
    ScaleUtil,
    FiscalUtil,
    DataModel
) {

    function DataModelManager(viewLoaderDelegator) {
        this._dataModel = null;
        this._originalDataModel = null;
        this._role = null;
        this._viewLoaderDelegator = viewLoaderDelegator;
        this._type = null;
        this._renderType = null;
        this._family = null;
        this._data = null;
        this._bindings = null;
    }

    var prot = DataModelManager.prototype;

    prot.init = function(type, renderType, data, bindings, groupOption) {
        this._type = type;
        this._renderType = renderType;
        this._data = data;
        this._bindings = bindings;
        this._groupOption = groupOption;
    };
    
    prot.createDataModel = function(options, propMgrProxy) {
        var bindDef = this._viewLoaderDelegator.getBindingDefinition(this._type);
        var bindingManager = BindingManager.getInstance(bindDef.constructor);
        
        var bindings = bindingManager.setBindings(this._bindings);
        var dataModel = bindingManager.parseDataWithBindingInformation(this._data, 
                bindings, 
                bindDef.family + '/' + this._renderType,
                this._type,
                this._groupOption,
                options,
                propMgrProxy);

        var role = {};
        for (var i in bindDef.constructor) {
            if (bindDef.constructor.hasOwnProperty(i) && dataModel[bindDef.constructor[i].id]) {
                role[bindDef.constructor[i].id] = bindDef.constructor[i];
            }
        }
        // let 'color2' be an independent role since we need support 'only feed valueAxis2' case
        if (dataModel['color2']) {
            role['color2'] = bindDef.constructor.filter(function(def) {
                return def.id === "color";
            })[0];
        }
        this._options = options;
        this._family = bindDef.family;
        this._originalDataModel = dataModel;
        this._dataModel = dataModel;
        this._role = role;
    };

    function needTruncate(renderType, scaleOption, data){
        if (scaleOption.feed === "timeAxis"){
            var isFiscal = FiscalUtil.isFiscal(data);
            var start = scaleOption.start;
            if (start != null && typeof start !== 'number' && !isFiscal) {
                scaleOption.start = new Date(start).getTime();
            }
            var end = scaleOption.end;
            if (end != null && typeof end !== 'number' && !isFiscal) {
                scaleOption.end = new Date(end).getTime();
            }
            return /timeseries.*column|timeseries.*combination|timeseries_bullet|timeseries_waterfall/.test(renderType);
        }
        return false;
    }

    /**
     * Get a filtered dataModel by scaleOption
     * @param {Array} - scaleOption
     * @return {Object} - dataModel
     */
    prot.filterDataModel = function(scaleArray, props) {
        var dataModel = this.getOriginalDataModel();

        for(var i = 0;i < scaleArray.length; ++i) {
            var scaleOption = scaleArray[i];
            if (!scaleOption){
                continue;
            }

            //user sets time scale for non-time chart, skip it
            if (scaleOption.feed === "timeAxis" && !/timeseries/.test(this._renderType)){
                continue;
            }

            if (needTruncate(this._renderType, scaleOption, this._data)){
                scaleOption = ScaleUtil.truncateScaleOption(this._options, scaleOption, props);
            }
            dataModel = dataModel.query(scaleOption.feed, scaleOption, props);
        }
        this._dataModel = dataModel;
        // reset series isEmpty properties,
        // when "dataPoint.invalidity" change from other to "connect" have to do this
        return dataModel;
    };

    prot.getGroupOption = function(){
        return this._groupOption;
    };

    prot.getFamily = function() {
        return this._family;
    };
    
    prot.getDataModel = function() {
        return this._dataModel; 
    };
    
    prot.getOriginalDataModel = function() {
        return this._originalDataModel; 
    };
    
    prot.getRole = function() {
        return this._role; 
    };
    
    prot.clear = function() {
        this._originalDataModel = null;
        this._dataModel = null;
        this._role = null;
        this._type = null;
        this._renderType = null;
        this._family = null;
        this._data = null;
        this._bindings = null;
    };
    
    prot.destroy = function() {
        this.clear();
        this._viewLoaderDelegator = null;
    };

    return DataModelManager;
});

define('sap/viz/migrate/scaleMigrator',['sap/viz/framework/common/util/TypeUtils'], function Setup(TypeUtils) {
    var migrateUtils = {};
    var isExist = TypeUtils.isExist;

    var scalesMap = {
        primaryScale: 'valueAxis',
        secondaryScale: 'valueAxis2',
        minValue: 'min',
        maxValue: 'max'
    };

    migrateUtils.migrateBulletScales = function (scales){

        var length = scales.length;
        var i;
        var bHasPrimary = false;
        for(i = 0; i < length; ++i){
            if (scales[i].feed === 'actualValues'){
                bHasPrimary = true;
            }
        }
        for(i = 0; i < length; ++i){
            if (scales[i].feed === "valueAxis"){
                if (bHasPrimary){
                    scales.splice(i, 1);
                    --i;
                    --length;
                }else{
                    scales[i].feed = "actualValues";
                }
            }
        }
    };

    function isBullet(type){
        return type === "info/bullet" || 
               type === "info/vertical_bullet" || 
               type === "info/timeseries_bullet";
    }
    
    migrateUtils.migrate = function (json) {
        var props = this.ScalesPropsToChartProps(json.properties, json.scales, json.scalesOption||{}, json.type);
        if (props){
            json.properties = props;
        }
        json.scales = this.ChartPropsToScalesProps(json.properties, json.scales, json.type);
        if (isBullet(json.type) && json.scales){
            migrateUtils.migrateBulletScales(json.scales);
        }
        return json;
    };

    /*
       if scale props is not specified, mapping
           plotArea: {
              primaryScale : {
                fixedRange : true,
                minValue : 0,
                maxValue : 100
              },            
              secondaryScale : {
                fixedRange : true,
                minValue : 20,
                maxValue : 200
              },
              colorPalette : ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"],
              shapePalette : ["triangleDown", "triangleUp"]
            }
        to
           {
                "feed": "valueAxis",
                "min": 0,
                "max": 100
            },
            {
                "feed": "valueAxis2",
                "min": 20,
                "max": 200
            },
            {
                "feed": "color",
                "type": "color",
                "palette": ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"]
            },
            {
                "feed": "shape",
                "type": "shape",
                "palette": ["triangleDown", "triangleUp"]
            }
          
          for dual case:
            primaryValuesColorPalette : ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"],
            secondaryValuesColorPalette :  ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2"]
          to
            {
                "feed": "color",
                "type": "color",
                "palette": [
                               ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"],
                               ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2"]
                           ]
            }
    */

    function migrateBulletProp(cscale, props){
        ["actualColor","additionalColor","forecastColor"].forEach(function(key){
            if (isExist(props.plotArea) && isExist(props.plotArea[key])) {
                cscale = cscale || {feed:'color'};
                cscale[key] =  props.plotArea[key];
            }
        });

        if(isExist(props.plotArea) && isExist(props.plotArea.colorPalette)){
            //for backward-comp
            //split to actual color and additional color
            //info/src/main/js/migrate/BaseMigrator.js  splitColorPalette: function
            cscale = cscale || {feed:'color'};
            cscale.actualColor = cscale.actualColor || props.plotArea.colorPalette[0];
            cscale.additionalColor = cscale.additionalColor || props.plotArea.colorPalette[1];
        }

        return cscale;
    }

    migrateUtils.ChartPropsToScalesProps = function(props, scales, type) {
        var scale, startColor, endColor, nullColor, legendValues, cscale;

        if (!props) {
            return scales;
        }
        if (!isExist(scales)) {
            scales = [];
        }
        var primaryScale = getScales(scales, 'valueAxis'),
            secondaryScale = getScales(scales, 'valueAxis2');
        if (!isExist(primaryScale) && !isExist(secondaryScale)) {
            if (props && props.plotArea && props.plotArea.primaryScale) {
                scale = setValue('primaryScale', props.plotArea.primaryScale);
                if (isExist(scale)) {
                    scales.push(scale);
                }
            }
            if (props && props.plotArea && props.plotArea.secondaryScale) {
                scale = setValue('secondaryScale', props.plotArea.secondaryScale);
                if (isExist(scale)) {
                    scales.push(scale);
                }
            }
        }
        var colorScale = getScales(scales, 'color');
        if (!isExist(colorScale)) {
            if (isExist(props.plotArea) && isExist(props.plotArea.colorPalette) && !isBullet(type)) {
                cscale = setPalette('color', props.plotArea.colorPalette);
            }

            if(isBullet(type)){
                cscale = migrateBulletProp(cscale, props);
            }

            if (type && type.indexOf("dual") > -1) {
                var palette = {};
                if (isExist(props.plotArea) &&
                    isExist(props.plotArea.primaryValuesColorPalette)) {
                    palette.primary = props.plotArea.primaryValuesColorPalette;
                }
                if (isExist(props.plotArea) &&
                    isExist(props.plotArea.secondaryValuesColorPalette)) {
                    palette.secondary = props.plotArea.secondaryValuesColorPalette;
                }
                if (isExist(palette.primary) ||
                    isExist(palette.secondary)) {
                    cscale = setPalette('color', palette);
                }
            }
            
            if (isExist(props.plotArea) ) {
                if (isExist(props.plotArea.startColor)){
                    startColor = props.plotArea.startColor; 
                }

                if (isExist(props.plotArea.endColor)){
                    endColor = props.plotArea.endColor;
                }

                if (isExist(props.plotArea.nullColor)){
                    nullColor = props.plotArea.nullColor;
                } 
            }

            if (isExist(startColor) || isExist(endColor) || isExist(nullColor) ) {
                cscale = cscale || {feed:'color'};
                setColors(cscale, startColor, endColor, nullColor);
            }
            if (isExist(props.plotArea) && isExist(props.plotArea.legendValues)) {
                cscale = cscale || {feed:'color'};
                setLegendValues(cscale, props.plotArea.legendValues);
            }
            if (cscale) {
                scales.push(cscale);
            }
        }
        var shapeScale = getScales(scales, 'shape');
        if (!isExist(shapeScale)) {
            if (isExist(props.plotArea) && isExist(props.plotArea.shapePalette)) {
                scale = setPalette('shape', props.plotArea.shapePalette);
                scales.push(scale);
            }
        }
        return scales;
    };
    var SCALEPROP= ["startColor", "endColor", "legendValues", "nullColor"];
    migrateUtils.ScalesPropsToChartProps = function(props, scales, scalesOption,chartType) {
        var changed = scalesOption.level === 'user' && scalesOption.replace;
        props = props || {};
        if (isExist(scales)) {
            var colorScale = getScales(scales, 'color');
            if (isExist(colorScale) && chartType !== "info/combinationEx") {
                // do not migrate color scales for combinationEx 
                // since it does not support color palette properties
                var palette = colorScale.palette;
                if (TypeUtils.isArray(palette)){
                    if (TypeUtils.isArray(palette[0])){
                        props['plotArea.primaryValuesColorPalette'] = palette[0];
                        changed = true;
                    }
                    if (TypeUtils.isArray(palette[1])){
                        props['plotArea.secondaryValuesColorPalette'] = palette[1];
                        changed = true;
                    }
                    if (!TypeUtils.isArray(palette[0]) && !TypeUtils.isArray(palette[1])){
                        props['plotArea.colorPalette'] = colorScale.palette;
                        changed = true;
                    }
                }
                for(var i = 0; i < SCALEPROP.length; ++i){
                    var name = SCALEPROP[i];
                    if (isExist(colorScale[name])){
                        props['plotArea.' + name] = colorScale[name];
                        changed = true;
                    }
                }
              
            }

            var shapeScale = getScales(scales, 'shape');
            if (isExist(shapeScale) && isExist(shapeScale.palette)) {
                props['plotArea.shapePalette'] = shapeScale.palette;
                changed = true;
            }

            var primaryScale = getScales(scales, 'valueAxis');
            if (isExist(primaryScale)) {
                props['plotArea.primaryScale.minValue'] = primaryScale.min;
                props['plotArea.primaryScale.maxValue'] = primaryScale.max;
                props['plotArea.primaryScale.fixedRange'] = true;
                changed = true;
            }
            var secondaryScale = getScales(scales, 'valueAxis2');
            if (isExist(secondaryScale)) {
                props['plotArea.secondaryScale.minValue'] = secondaryScale.min;
                props['plotArea.secondaryScale.maxValue'] = secondaryScale.max;
                props['plotArea.secondaryScale.fixedRange'] = true;
                changed = true;
            }
        }
        return changed ? props : null;
    };


    var getScales = function(scales, key) {
        for (var i in scales) {
            if (scales[i] && scales[i].feed === key) {
                return scales[i];
            }
        }
    };

    var setPalette = function(feedName, value) {
        var scale;
        scale = {};
        scale.feed = feedName;
        scale.type = feedName;
        if (TypeUtils.isPlainObject(value)) {
            scale.palette = [];
            if (value.primary) {
                scale.palette[0] = value.primary;
            }
            if (value.secondary) {
                scale.palette[1] = value.secondary;
            }
        } else {
            scale.palette = value;
        }
        return scale;
    };

    var setValue = function(prefix, key) {
        var feedName = scalesMap[prefix],
            scale;
        if (key.fixedRange) {
            if (isExist(key.minValue)) {
                if (!isExist(scale)) {
                    scale = {};
                    scale.feed = feedName;
                    scale.type = 'linear'; //set scale type to linear if scale is set by properties
                }
                scale.min = key.minValue;
            }
            if (isExist(key.maxValue)) {
                if (!isExist(scale)) {
                    scale = {};
                    scale.feed = feedName;
                    scale.type = 'linear'; //set scale type to linear if scale is set by properties
                }
                scale.max = key.maxValue;
            }
        } else {
            scale = {};
            scale.feed = feedName;
            scale.type = 'linear';
            scale.min = 'auto';
            scale.max = 'auto';
        }

        return scale;
    };
    
    var setColors = function(scale, startColor, endColor, nullColor) {
        if (scale && isExist(startColor)) {
            scale.startColor = startColor;
        }
        if (scale && isExist(endColor)) {
            scale.endColor = endColor;
        }

        if (scale && isExist(nullColor)) {
            scale.nullColor = nullColor;
        }
    };
    
    var setLegendValues = function(scale, legendValues) {
        if (scale && isExist(legendValues)) {
            scale.legendValues = legendValues;
        }
    };
    
    return migrateUtils;
});

define('sap/viz/framework/customization/BaseCustomRenderer',["sap/viz/framework/property/PropertyManager"
], function(PropertyManager) {

    /**
     * @private
     */
    var BaseCustomRenderer = function(vizInstanceInfo) {
        this._properties = new PropertyManager();
        this._properties.add(this.constructor.metadata.propertyDefinition);
        this._vizInstanceInfo = vizInstanceInfo;
    };

    // id
    BaseCustomRenderer.id = "";

    // type
    BaseCustomRenderer.type = "";

    /**
     * @static should be frozen
     */
    BaseCustomRenderer.metadata = {
        /**
         * properties schema: {
                "supportedValueType": "Object", // Number, String, Boolean, StringArray, NumberArray, BooleanArray
                "defaultValue": null,
                // optional, by default read-only is false
                "readonly": false,
                // optional, by default serializable is true
                "serializable": true,
                // optional
                "description": "",
            }
         */
        propertyDefinition: {}
    };

    //-----------------------------
    // Methods to be Overridden
    // No super() support
    //-----------------------------

    /**
    * Custom render delegate function.
    * @param {Tuple} ctx
    * @param {Object} properties
    *         default: {}
    *         the customRender supported properties,
    *         passed from VizInstance.prototype.customize({id, properties, customRenderProperties})
    * @param {sap.viz.extapi.customization.customrender.CustomRenderGraphicInfo}
    * @param {sap.viz.extapi.customization.VizModelInfo}
    * @return {SVGNode} default value is null.
    */
    BaseCustomRenderer.prototype.render = function(ctx, properties, 
        graphicInfo, vizModelInfo) {
        return null;
    };

    /**
     * @return {sap.viz.extapi.customization.VizInstanceInfo}
     */
    BaseCustomRenderer.prototype.vizInstanceInfo = function() {
        return this._vizInstanceInfo;
    };

    return BaseCustomRenderer;
});
define('sap/viz/framework/customization/CustomGraphicInfo',[ ], function() {
    var constant = {};
    constant.CUSTOM_RENDERS = 'customRenders';
    constant.CATEGORY_AXIS_LABEL_RENDERER = 'categoryAxis.labelRenderer';
    constant.PLOT_AREA_MARKER_RENDERER = 'plotArea.markerRenderer';
    constant.PLOT_AREA_LINE_MARKER = 'plotArea.line.marker';
    constant.PLOT_AREA_DATA_LABEL_RENDERER = 'plotArea.dataLabel.renderer';

    var buildCategroyLabel = function(currentGraphic) {
        var newObject = {};
        if(currentGraphic){
            // position <x,y>, the postion in current layer
            if(currentGraphic.hasOwnProperty('cellStart')){
                if(!newObject.position){
                    newObject.position = {};
                }
                // postion value: <bottom, left, right, top>
                if(currentGraphic.hasOwnProperty('position')){
                    var value = currentGraphic.position;
                    switch(value){
                        case 'left':
                        case 'right':
                            newObject.position.x = 0;
                            newObject.position.y = currentGraphic.cellStart; 
                            break;
                        case 'bottom':
                        case 'top':
                            newObject.position.x = currentGraphic.cellStart;
                            newObject.position.y = 0; 
                            break;
                    }
                }
            }
            // size
            if(currentGraphic.hasOwnProperty('size')){
                newObject.size = currentGraphic.size;
            }
            // text
            if(currentGraphic.hasOwnProperty('text')){
                newObject.text= currentGraphic.text;
            }

            // styles 
            if(currentGraphic.hasOwnProperty('styles')){
                newObject.styles = currentGraphic.styles;
            }
        }
        return newObject;
    };

    var buildMarker = function(currentGraphic) {
        var newObject = {};
        if(currentGraphic){
            // graphic item
            if(currentGraphic.hasOwnProperty('graphic')){
                newObject.graphic = {};
                // For line-markerer core-chart will expose the width = 0 
                // and height may be negative value, user normally doesn't need to 
                // know about the line mark size, cause users could determine the size themselves
                // like uvb to scale the line marker.
                if(currentGraphic.isLineMarker !== true){
                    newObject.graphic.size = {};
                    newObject.graphic.size.width = currentGraphic.graphic.width;
                    newObject.graphic.size.height = currentGraphic.graphic.height;
                }

                newObject.graphic.fill = currentGraphic.graphic.fill;

                // So far Only combination chart will construct shape
                // Use combinationIsLineMarker instead to detect the marker type.
                // if(currentGraphic.graphic.hasOwnProperty('shape')){
                //     newObject.graphic.shape = currentGraphic.graphic.shape;
                // }

                // totalStackHeight
                if(currentGraphic.graphic.hasOwnProperty('stackHeight')){
                    newObject.graphic.totalStackHeight = currentGraphic.graphic.stackHeight;
                }
                // stackPosition
                if(currentGraphic.graphic.hasOwnProperty('x')){
                    if(!newObject.graphic.stackPosition){
                        newObject.graphic.stackPosition = {};
                    }
                    newObject.graphic.stackPosition.x = currentGraphic.graphic.x;
                }
                if(currentGraphic.graphic.hasOwnProperty('y')){
                    if(!newObject.graphic.stackPosition){
                        newObject.graphic.stackPosition = {};
                    }
                    newObject.graphic.stackPosition.y = currentGraphic.graphic.y;
                }

            }

            // horizontal
            if(currentGraphic.hasOwnProperty('horizontal')){
                newObject.horizontal = currentGraphic.horizontal;
            }

            // combinationIsLineMarker
            if(currentGraphic.hasOwnProperty('isLineMarker')){
                newObject.combinationIsLineMarker = currentGraphic.isLineMarker;
            }
        }
        return newObject;
    };

    // clean all line marker in phase 1
    var buildLineMarker = function(currentGraphic) {
        return null;
    };

    var buildDataLabel = function(currentGraphic) {
        var newObject = {};
        if(currentGraphic){
            // value
            newObject.value = currentGraphic.val;

            // text
            newObject.text = currentGraphic.text;

            // styles
            if(currentGraphic.hasOwnProperty('styles') && currentGraphic.styles){
                newObject.styles = {};
                newObject.styles['color'] = currentGraphic.styles['fill'];
                newObject.styles['fontFamily'] = currentGraphic.styles['font-family'];
                newObject.styles['fontSize'] = currentGraphic.styles['font-size'];
                newObject.styles['fontWeight'] = currentGraphic.styles['font-weight'];
                newObject.styles['fontStyle'] = currentGraphic.styles['font-style'];
            }

                        // dataPointWidth
            if(currentGraphic.hasOwnProperty('dataPointWidth') && currentGraphic.hasOwnProperty('dataPointHeight') ){
                newObject.dataPointSize = {};
                newObject.dataPointSize.width = currentGraphic.dataPointWidth;
                newObject.dataPointSize.height = currentGraphic.dataPointHeight;
            }
        }
        return newObject;
    };

    var CustomGraphicInfo = {};
    /*
    *   Build the the exposed grahic info 
    *   @id {String} the custom render id, e,g: <plotArea.markerRenderer>
    *   @currentGraphic {Object} the graphic info from the build-in chart. 
    *   @return {Object}, the exposed grahpic
    */
    CustomGraphicInfo.build = function(id, currentGraphic) {
        switch (id) {
            case constant.CATEGORY_AXIS_LABEL_RENDERER:
                return buildCategroyLabel(currentGraphic);

            case constant.PLOT_AREA_MARKER_RENDERER:
                return buildMarker(currentGraphic);

            case constant.PLOT_AREA_LINE_MARKER:
                return buildLineMarker(currentGraphic);

            case constant.PLOT_AREA_DATA_LABEL_RENDERER:
                return buildDataLabel(currentGraphic);

            default:
                return null;
        }
    };
    return CustomGraphicInfo;

});
define('sap/viz/framework/customization/CustomRendererGenerator',["sap/viz/framework/property/PropertyManager",
    "sap/viz/framework/common/util/RuleUtil", 
    'sap/viz/framework/customization/CustomGraphicInfo',
    'sap/viz/framework/common/util/TypeUtils'], function(PropertyManager, RuleUtil, CustomGraphicInfo,
        TypeUtils) {
    var CUSTOM_RENDERS = 'customRenders';
    var CATEGORY_AXIS_LABEL_RENDERER = 'categoryAxis.labelRenderer';
    var PLOT_AREA_MARKER_RENDERER = 'plotArea.markerRenderer';
    var PLOT_AREA_LINE_MARKER = 'plotArea.line.marker';
    var PLOT_AREA_DATA_LABEL_RENDERER = 'plotArea.dataLabel.renderer';



    /*
     * Match the common context or hierarchy context
     * targetCtx: {Country: "China", Year: "2001"}
     * ctx: {Country: "China", Year: "2001", Product: "Trunk"}
     * return true
     */
    var _matchHierarchyContext = function(condition, target) {
        var clonedCondition = condition;
        var clonedTarget = target;
        if(clonedTarget && clonedTarget.or){
            return clonedTarget.or.every(function(e){
                return RuleUtil.matchCondition(e, clonedCondition);
            });
        }else{
            return RuleUtil.matchCondition(clonedTarget, clonedCondition);
        }
    };

    /**
     * Match the query context in the custom render property settings.
     * @function matchContext
     * @ctx, {Object} data context
     * @settings, {Arrary} the renderer properties settings, e,g:[{rule:{country:china}, propertie:{fill:red}}]
     * @return , {Object} the object(ctx, properties) which matched the query context
     */
    var matchContext = function(ctx, settings){
        var ret = null;
        if(ctx && settings && settings.length > 0){
            for(var i = 0;i < settings.length;i++){
                if(settings[i]){
                    var matched = _matchHierarchyContext(settings[i].rule, ctx);
                    if(matched){
                        ret = settings[i];
                        break;
                    }
                }
            }
        }
        return ret;
    };
    /**
     * merge the array of object to an object.
     * @function _mergeProperties
     * @arrayOfObject, {array} array of object
     * @return , {Object} the merged object properties 
     */
    var _mergeProperties = function(arrayOfObject){
        var ret = null;
        if(arrayOfObject && arrayOfObject.length > 0){
            arrayOfObject.forEach(function(obj){
                Object.keys(obj).forEach(function(key){
                    if(!ret){
                        ret = {};
                    }
                    ret[key] = obj[key];
                });
            });
        }
        return ret;
    };
    /**
     * Get the data context matched properties, multiple matched will merge the properties.
     * @function _getMatchedProperties
     * @ctx, {Object} data context
     * @settings, {Object} the rules settings, e,g: {rules:[{dataContext:{}, properties:{}}]}
     * @return , {Object} the object properties which matched the query context
     */
    var _getMatchedProperties = function(ctx, settings){
        var ret = null;
        var rules = settings.rules;
        var foundProperties = null;
        if(ctx && rules && rules.length > 0){
            var dataContext = null;
            var currentProperties = null;
            var currentRule = null;
            if(!foundProperties){
                foundProperties = [];
            }
            for(var i = 0;i < rules.length;i++){
                var matched = false;
                currentRule = rules[i];
                if(currentRule){
                    dataContext = currentRule.dataContext;
                    currentProperties = currentRule.properties;
                    if(TypeUtils.isArray(dataContext)){ // array
                        if(dataContext && currentProperties && dataContext.length > 0){
                            matched = dataContext.some(function(condition){ // match once will return.
                                return _matchHierarchyContext(condition, ctx);
                            });
                            if(matched){
                                // push the current matched properties
                                foundProperties.push(currentProperties);
                            }
                        }
                    }else{ // Align with datapointStyle, also support JSON dataContext.
                        matched = _matchHierarchyContext(dataContext, ctx);
                        if(matched){
                            foundProperties.push(currentProperties);
                        }
                    }
                }
            }
        }
        ret = _mergeProperties(foundProperties);
        return ret;
    };

    var CustomRendererGenerator = {};
    /*
    *   Generate the custom renderer function
    *   @renderInstance {Object} the base custom render instance.
    *   @renderer {Function} the custom render function
    *   @settings {Array} the custom renderer properties setting, 
    *       e,g: [[{ctx:{country:china}, propertie:{fill:red}}]]
    *   @id {String} the custom render type string the value can be one of the following:
    *       categoryAxis.labelRenderer
    *       plotArea.markerRenderer
    *       plotArea.line.marker
    *       plotArea.dataLabel.renderer
    *   @vizModelInfo, {Object} vizModelInfo delegate to custom render function as arguments.
    */

    CustomRendererGenerator.generate = function(renderInstance, renderer, settings, id, vizModelInfo) {
        return function() {
            var ret;
            if (arguments && arguments.length > 0) {
                var len = arguments.length;
                var obj = arguments[0];
                var settings = obj['settings'];
                var id = obj['id'];
                var renderInstance = obj['renderInstance'];
                var vizModelInfo = obj['vizModelInfo'];

                var currentGraphic = arguments[1];
                if(currentGraphic && settings){
                    var properties = _getMatchedProperties(currentGraphic.ctx, settings);
                    if (properties) { // Only match
                        var graphic = CustomGraphicInfo.build(id, currentGraphic);
                        var ctx = currentGraphic.ctx;
                        ret = renderer.call(renderInstance, ctx, properties, graphic, vizModelInfo);
                    }
                }
            }
            return ret;
        }.bind(null, {
            'settings': settings,
            'id': id, 
            'vizModelInfo': vizModelInfo,
            'renderInstance': renderInstance
        });
        // bind the scope as well 
    };
    return CustomRendererGenerator;

});
define('sap/viz/framework/customization/CustomRendererUtils',['sap/viz/framework/common/util/ObjectUtils',
  'sap/viz/framework/common/util/TypeUtils',
  'sap/viz/framework/customization/CustomRendererGenerator',
  'sap/viz/framework/common/util/RuleUtil'], function(ObjectUtils, TypeUtils, CustomRendererGenerator, RuleUtil) {

    var CUSTOM_RENDERS = 'customRenders';
    var CATEGORY_AXIS_LABEL_RENDERER = 'categoryAxis.labelRenderer';
    var PLOT_AREA_MARKER_RENDERER = 'plotArea.markerRenderer';
    var PLOT_AREA_LINE_MARKER = 'plotArea.line.marker';
    var PLOT_AREA_DATA_LABEL_RENDERER = 'plotArea.dataLabel.renderer';

    var renderLists = [CATEGORY_AXIS_LABEL_RENDERER,
      PLOT_AREA_MARKER_RENDERER,
      PLOT_AREA_LINE_MARKER,
      PLOT_AREA_DATA_LABEL_RENDERER
    ];

    var CustomRendererUtils = {};

    /**
     * Set the renderer function to chart renderer properites.
     * @function getRenderFunction
     * @memberof CustomRendererUtils
     * @renderInstance {Object} base custom render instance
     * @name, {String} property name, e,g: 'plotArea.markerRenderer'
     * @renderer, {Function} chart module renderer function
     * @settings, {Arrary} the renderer properties setting, e,g:;[{ctx:{country:china}, propertie:{fill:red}}]
     * @vizModelInfo, {Object} vizModelInfo delegate to custom render function as arguments.
     */
    CustomRendererUtils.getRenderFunction = function(renderInstance, name, renderer, settings, vizModelInfo) {
        if (name && renderLists.indexOf(name) > -1) {
            return CustomRendererGenerator.generate(renderInstance , renderer, settings, name, vizModelInfo);
        }else{
            return null;
        }
    };

    /**
     * Match the query context in the custom render property setting.
     * @function matchContext
     * @memberof CustomRendererUtils
     * @ctx, {Object} data context
     * @settings, {Arrary} the renderer properties setting, e,g:[{ctx:{country:china}, propertie:{fill:red}}]
     * @return , {Object} the object(ctx, properties) which matched the query context
     */
    CustomRendererUtils.matchContext = function(ctx, setting) {
        var ret = null;
        if (ctx && setting && setting.length > 0) {
            for (var i = 0; i < setting.length; i++) {
                if (setting[i]) {
                    var matched = RuleUtil.matchCondition(ctx, setting[i].ctx);
                    if (matched) {
                        ret = setting[i];
                        break;
                    } 
                }
            }
        }
        return ret;
    };

    return CustomRendererUtils;
});
define('sap/viz/framework/customization/CustomInteractionConstant',[], function() {

	/**
	* Current no support trellis hehavior 
	* @total: 36 <include, single, trellis>
	* @single: 27
	*/
    
    var constant = {};

    constant.interaction = {};

	constant.interaction.AXIS_ITEM = "v-axis-item";

    constant.interaction.DATA_LABEL = "v-datalabel";

    constant.interaction.DATA_POINT = "v-datapoint";

    constant.interaction.LEGEND_ITEM = "v-legend-item";

    constant.interaction.LINES = "v-lines";

    constant.interaction.AXIS_BODY = "v-m-axisBody";

    constant.interaction.AXIS_TITLE = "v-m-axisTitle";

    constant.interaction.BACKGROUND = "v-m-background";

    constant.interaction.CATEGORY_AXIS = "v-m-categoryAxis";

    constant.interaction.LEGEND = "v-m-legend";

    constant.interaction.SIZE_LEGEND = "v-m-sizeLegend";

    constant.interaction.LEGEND_GROUP = "v-m-legendGroup";

    constant.interaction.PLOT = "v-m-plot";

    constant.interaction.PLOT_BOUND = "v-m-plot-bound";

    constant.interaction.ROOT = "v-m-root";

    constant.interaction.TITLE = "v-m-title";

    constant.interaction.VALUE_AXIS = "v-m-valueAxis";

    constant.interaction.VALUE_AXIS2 = "v-m-valueAxis2";
    
    constant.interaction.TIME_AXIS = "v-m-timeAxis";

    constant.interaction.REFERENCE_LINE = 'v-referenceline';


    // event selection scope, 
    constant.scope = {};
    constant.scope.SINGLE = 'single';
    constant.scope.SERIES = 'series';
    constant.scope.ALL = 'all';
    
    // moduel for render info as the selector
    constant.module = {};
    constant.module.CATEGORY_AXIS = 'categoryAxis';
    constant.module.TIME_AXIS = 'timeAxis';
    constant.module.VALUE_AXIS2 = 'valueAxis2';
    constant.module.VALUE_AXIS = 'valueAxis';
    constant.module.BACKGROUND = 'background';
    constant.module.PLOT = 'plot';
    constant.module.LEGEND = 'legend';
    constant.module.SIZE_LEGEND = 'sizeLegend';
    constant.module.TITLE = 'title';
    constant.module.CHART_ROOT = 'chartRoot';

    return constant;

});
define('sap/viz/framework/customization/CustomInteractionTargetsUtils',[
    'sap/viz/framework/customization/CustomInteractionConstant',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/framework/common/util/TypeUtils'
], function(Constant, DataGraphics, TypeUtils) {

    var utils = {};
    var Scope = Constant.scope;
    var Module = Constant.module;
    Constant = Constant.interaction;


    var _getAxisType = function(targetNode){
        var type;
        while (targetNode.tagName.toLowerCase() !== "svg") {
            targetNode = targetNode.parentNode;
            var m = /v-m-((?:value|category|time)Axis\d?)\b/.exec( targetNode.getAttribute("class") );
            if (m) {
                type = m[1];
                break;
            }
        }
        return type;
    };

    var getter = function(target, targetNode, renderInfos){
        var ret = null;
        var type;
        switch(target){

            case Constant.DATA_POINT :
                ret = renderInfos.plot().dataPoints(targetNode);
                break;
            case Constant.AXIS_ITEM :
                type = _getAxisType(targetNode);
                if(type){
                    var items = renderInfos[type]().labels();
                    var ctx = DataGraphics.getContext(targetNode);
                    if(items){
                        return items[ctx.layer][ctx._cellIndex];
                    }
                }
                break;
            case Constant.DATA_LABEL :
                ret = renderInfos.plot().dataLabels(targetNode);
                break;
            case Constant.LEGEND_ITEM :
                ret = renderInfos.legend().items(targetNode); 
                break;
            case Constant.LINES :
                ret = renderInfos.plot().dataLines(targetNode);
                break;
            case Constant.REFERENCE_LINE:
                ret = renderInfos.plot().referenceLines(targetNode);
                break;
            case Constant.AXIS_BODY :
                type = _getAxisType(targetNode);
                if(type){
                    ret = renderInfos[type]().body;
                }
                break;
            case Constant.AXIS_TITLE :
                type = _getAxisType(targetNode);
                if(type){
                    ret = renderInfos[type]().title;
                }
                break;
                /*
            case Constant.BACKGROUND :
                ret = renderInfos[Module.BACKGROUND]();
                break;
                */
            case Constant.CATEGORY_AXIS :
                ret = renderInfos[Module.CATEGORY_AXIS]();
                break;
            case Constant.LEGEND :
            case Constant.LEGEND_GROUP :
                ret = renderInfos[Module.LEGEND]();
                break;
            case Constant.SIZE_LEGEND :
                ret = renderInfos[Module.SIZE_LEGEND]();
                break;
            case Constant.PLOT :
            case Constant.PLOT_BOUND :
                ret = renderInfos[Module.PLOT]();
                break;
            case Constant.TITLE :
                ret = renderInfos[Module.TITLE]();
                break;
            case Constant.VALUE_AXIS :
                ret = renderInfos[Module.VALUE_AXIS]();
                break;
            case Constant.VALUE_AXIS2 :
                ret = renderInfos[Module.VALUE_AXIS2]();
                break;
            case Constant.TIME_AXIS :
                ret = renderInfos[Module.TIME_AXIS]();
                break;
            case Constant.ROOT:
            case "*":
                ret = renderInfos[Module.CHART_ROOT]();
                break;
            default:
                break;
        }
        return ret;
    };

    /**
    *   Get render info of targets
    */
    utils.getRenderInfo = function(targetClass, targetNode, renderInfos){
        if(targetClass && targetNode && renderInfos){ // Currently only support one single target
            return getter(targetClass, targetNode, renderInfos);
        }
    };
    return utils;
});

define('sap/viz/framework/customization/CustomInteractionGenerator',["sap/viz/framework/property/PropertyManager",
    "sap/viz/framework/common/util/RuleUtil", 
    'sap/viz/framework/customization/CustomGraphicInfo',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/customization/CustomInteractionTargetsUtils',
    'sap/viz/framework/common/util/DOM'], function(PropertyManager, RuleUtil, 
        CustomGraphicInfo, TypeUtils, TargetsUtils, DOM) {

    /**
    *   find the current event target class name
    */
    var _getTargetClass = function(cssClass, target){
        var  className = null;
        if(cssClass && cssClass.length>0 && target){
            cssClass.some(function(i){
                var has = DOM.hasClass(target, i);
                if(has){
                    className = i;
                }
                return has;
            });
        }
        return className;
    };

    /**
     * Wrap the event as parameters of interaction handler
     * @function _wrapEvent
     * @event, {Object} interaction event object
     *      e,g: 
     *          {
     *               name:'click',
     *               data:{
     *                   // desktop
     *                   point:[nativeEvent.clientX, nativeEvent.clientX],
     *                   targets: htmlDomNode,
     *                   currentTarget: htmlDomNode,
     *                   ctrlKey: false,
     *                   wheelDelta: 0,
     *                   originalEvent: event,
     *                   
     *                   // mobile addtional
     *                   scale: 0.8,
     *                   isGray: false,
     *                   isAnchored: false,
     *                   isSelected: false,
     *                   mode: [INFO_MODE]
     *               }
     *          }
     * @targetClass {Array}|{String}
     *  e,g: v-datapoint
     * @renderInfos {Object} render information.
     * @chartRootDom {HTMLElement} chart root dom.
     *  e,g: <div id="UIComp_0" class="v-info" .../>
     */
    var _wrapEvent = function(event, targetClass, renderInfos, chartRootDom){
        var ret = null;
        if(event){
            ret= {};
            ret.name = event.name;
            ret.preventBrowserDefault = function () {
                if (event.data && event.data.originalEvent) {
                    return event.data.originalEvent.preventDefault();
                }
            };

            if(event.data){
                if (event.name === 'plotScroll') {
                    ret.data = {};
                    ret.data.targets = {x: event.data.x, y: event.data.y};
                    return ret;
                }
                ret.data = {
                    // pointToChart is the mouse event position relative to chart root left top coordinate
                    point: event.data.pointToChart
                };
                var targets = event.data.currentTarget ?  event.data.currentTarget : event.data.targets;

                var validTargetClassArray = targetClass && TypeUtils.isArray(targetClass) && targetClass.length>0;
                if(validTargetClassArray){
                    targetClass = _getTargetClass(targetClass, targets);
                }
                ret.data.targets = TargetsUtils.getRenderInfo(targetClass, targets,renderInfos);
                ret.data.ctrlKey = event.data.ctrlKey;
                ret.data.wheelDelta = event.data.wheelDelta;
                ret.data.scale = event.data.scale;

                // Currently not exposed below property for event.data
                // comment it for future reference.
                // ret.data.originalEvent = event.data.originalEvent;
                // ret.data.isGray = event.data.isGray;
                // ret.data.isAnchored = event.data.isAnchored;
                // ret.data.isSelected = event.data.isSelected;
                // ret.data.mode = event.data.mode;
            }
        }
        return ret;
    };


    var CustomInteractionGenerator = {};
    /*
    *   Generate the interaction handler function
    *   @hanlder {Function} the interaction event handler, the defintion is as follow:
    *       handler(event, services//InteractionServices); 
    *   @options {Object} the options includes customization vizModelInfo, vizInstanceInfo, vizRenderInfo 
    *           as events or services to build wrapper.
    *       {
    *           vizModelInfo:{}
    *           vizInstanceInfo:{}
    *           vizRenderInfo:{}
    *       }
    *   @settings {Object} the settings of the event, include the targetClass and scope<single, series, all>
    *       e,g:               {
    *                               targetClass:[v-datapoint],
    *                               scope: 'series'    
    *                          }
    *   @interactionInstance {Object} base custom interaction instance
    */

    CustomInteractionGenerator.generate = function(handler, options, settings, interactionInstance) {
        options = options || {};
        return function(chartInfos, settings, handler, interactionInstance, event, service, actionId) {
            var vizRenderInfo = chartInfos.getVizRenderInfo();
            var chartRootDom = chartInfos.getChartContainerNode();
            var targetClass = settings ? settings['targets']: undefined;
            var eventWrapper = _wrapEvent(event, targetClass, vizRenderInfo, chartRootDom);

            handler.call(
                interactionInstance,
                actionId,
                eventWrapper, 
                chartInfos.getVizModelInfo(),
                vizRenderInfo
            );
            // fix "ctrl+click" issue in exclusive mode, don't send the event again.
            if (event.name === "click" && event.data.ctrlKey) {
                var properties = chartInfos.getVizInstanceInfo().properties(); 
                if (properties && properties.interaction && properties.interaction.selectability && 
                    properties.interaction.selectability.mode &&   
                    properties.interaction.selectability.mode.toUpperCase() === "EXCLUSIVE") {
                    return;
                }
            } 
            service.fireEvent(event, true);
        }.bind(null, options, settings, handler, interactionInstance);
        // bind the scope as well 
    };
    return CustomInteractionGenerator;

});

define('sap/viz/framework/customization/constants/CustomInteractionEvents',[], function() {

    var click = {
        toString:  function(){
            return "click";
        }
    };

    var contextmenu = {
        toString:  function(){
            return "contextmenu";
        }
    };

    var hover = {
        toString: function () {
            return "hover";
        }
    };

    var down = {
        toString: function () {
            return "down";
        }
    };

    var up = {
        toString: function () {
            return "up";
        }
    };

    var wheelmove = {
        toString: function () {
            return "wheelmove";
        }
    };

    var uparrow = {
        toString: function () {
            return "uparrow";
        }
    };

    var downarrow = {
        toString: function () {
            return "downarrow";
        }
    };

    var leftarrow = {
        toString: function () {
            return "leftarrow";
        }
    };

    var rightarrow = {
        toString: function () {
            return "rightarrow";
        }
    };

    var enter = {
        toString: function () {
            return "enter";
        }
    };

    var tab = {
        toString: function () {
            return "tab";
        }
    };

    var space = {
        toString: function () {
            return "space";
        }
    };

    var renderComplete = {
        toString: function () {
            return "afterChartRendered";
        }
    };

    var plotScroll = {
        toString: function () {
            return "plotScroll";
        }
    };

    var lassoEnd = {
        toString: function () {
            return "lassoend";
        }
    };

    return {
        /* chart events */
        "RENDER_COMPLETE": renderComplete,
        "PLOT_SCROLL": plotScroll,

        /* keyboard events */
        "SPACE": space,
        "TAB": tab,
        "ENTER": enter,
        "RIGHT_ARROW": rightarrow,
        "LEFT_ARROW": leftarrow,
        "DOWN_ARROW": downarrow,
        "UP_ARROW": uparrow,

        /* mouse events */
        "LASSO_END": lassoEnd,
        "WHEEL_MOVE": wheelmove,
        "MOUSE_UP": up,
        "MOUSE_DOWN": down,
        "CLICK" : click,
        "HOVER" : hover,
        "CONTEXT_MENU" : contextmenu
    };
});

define('sap/viz/framework/customization/constants/CustomInteractionTargets',[], function() {

    var v_axis_item = {
        toString: function () {
            return "v-axis-item";
        }
    };

    var v_datalabel = {
        toString: function () {
            return "v-datalabel";
        }
    };

    var v_datapoint = {
        toString: function () {
            return "v-datapoint";
        }
    };

    var v_legend_item = {
        toString: function () {
            return "v-legend-item";
        }
    };

    var v_lines = {
        toString: function () {
            return "v-lines";
        }
    };

    var v_m_axisBody = {
        toString: function () {
            return "v-m-axisBody";
        }
    };

    var v_m_axisTitle = {
        toString: function () {
            return "v-m-axisTitle";
        }
    };

    var v_m_background = {
        toString: function () {
            return "v-m-background";
        }
    };

    var v_m_categoryAxis = {
        toString: function () {
            return "v-m-categoryAxis";
        }
    };

    var v_m_legend = {
        toString: function () {
            return "v-m-legend";
        }
    };

    var v_m_sizeLegend = {
        toString: function () {
            return "v-m-sizeLegend";
        }
    };

    var v_m_legendGroup = {
        toString: function () {
            return "v-m-legendGroup";
        }
    };

    var v_m_plot = {
        toString: function () {
            return "v-m-plot";
        }
    };

    var v_m_title = {
        toString: function () {
            return "v-m-title";
        }
    };

    var v_m_valueAxis = {
        toString: function () {
            return "v-m-valueAxis";
        }
    };

    var v_m_valueAxis2 = {
        toString: function () {
            return "v-m-valueAxis2";
        }
    };
    var v_m_timeAxis = {
        toString: function () {
            return "v-m-timeAxis";
        }
    };
    var v_m_root = {
        toString: function () {
            return "v-m-root";
        }
    };
    var v_referenceline = {
        toString: function () {
            return 'v-referenceline';
        }
    };
    return {
        "CHART_ROOT":               v_m_root,
        "AXIS_LABEL_ITEM":          v_axis_item,
        "DATALABEL":                v_datalabel,
        "DATAPOINT":                v_datapoint,
        "LEGEND_ITEM":              v_legend_item,
        "LINES":                    v_lines,
        "AXIS_BODY":                v_m_axisBody,
        "AXIS_TITLE":               v_m_axisTitle,
        "CATEGORY_AXIS":            v_m_categoryAxis,
        "LEGEND":                   v_m_legend,
        "SIZE_LEGEND":              v_m_sizeLegend,
        "CHART_TITLE":              v_m_title,
        "VALUE_AXIS":               v_m_valueAxis,
        "VALUE_AXIS2":              v_m_valueAxis2,
        "TIME_AXIS":                v_m_timeAxis,
        "REFERENCE_LINE":           v_referenceline,
        "PLOT":                     v_m_plot
    };
});

define('sap/viz/framework/customization/CustomInteractionUtils',['sap/viz/framework/common/util/ObjectUtils',
  'sap/viz/framework/common/util/TypeUtils',
  "sap/viz/framework/interaction/Constants",
  "sap/viz/framework/interaction/BehaviorFactory",
  "sap/viz/framework/interaction/BehaviorManager",
  'sap/viz/framework/customization/CustomInteractionGenerator',
  'sap/viz/framework/customization/constants/CustomInteractionEvents',
  'sap/viz/framework/customization/constants/CustomInteractionTargets',
], function(ObjectUtils,
    TypeUtils,
    Constants,
    BehaviorFactory,
    BehaviorManager,
    Generator,
    CustomInteractionEvents,
    CustomInteractionTargets) {

    var _supportedEvents = Object.keys(CustomInteractionEvents).map(function (key) {
        return String( CustomInteractionEvents[key] );
    });

    var keyBoardEvents = [
        "tab",
        "space",
        "enter",
        "uparrow",
        "downarrow",
        "leftarrow",
        "rightarrow"
    ];

    var CustomInteractionUtils = {};

    /**
     * Build the custom behaivor
     * @function buildBehavior
     * @memberof CustomInteractionUtils
     * @interactionInstance, {Object} base custom interaction  instance, 
     * already define the triggers and handler.
     * @options {Object} the options includecas customization vizModelInfo, vizInstanceInfo, vizRenderInfo, 
     *          overriddenBehaviorType
     *           as events or services to build wrapper.
     *       {
     *           vizModelInfo:{},
     *           vizInstanceInfo:{},
     *           vizRenderInfo:{},
     *           behaviorType:{String}
     *       }
     */
    CustomInteractionUtils.buildBehavior = function(interactionInstance, options) {

        var type = options && options.getBehaviorType() || Constants.BEHAVIOR.DEFAULT_BEHAVIOR_ID;

        var instance = interactionInstance;

        var behavior = BehaviorManager.get(type);
        behavior = buildActions(instance, behavior, options);
        //Register the behavior to make sure the interaciton could get the custom actions
        BehaviorManager.register(options.chartAppId + "-" + options.customizationsId, behavior);
    };

    CustomInteractionUtils.cleanBehavior = function(options) {
        BehaviorManager.unregister(options.chartAppId + "-" + options.customizationsId);
    };

    /**
    *   Currnelty only support one handler and multiple actions
    */
    var buildActions = function(instance, originalBehavior, options) {
        var triggers = copyTriggers(instance.triggers);
        var handler = instance.handle;
        var customBehaviors = [];
        var behavior = originalBehavior.clone();

        if (triggers) {
            var type = options.getVizInstanceInfo().type();

            var disableDefaults = {};
            triggers.forEach(function(trigger) {
                var id = instance.id;

                // keyBoard events need set targets as "*"
                if (keyBoardEvents.indexOf(trigger.event) > -1 &&
                        trigger.targets.indexOf("v-m-root") > -1) {
                    trigger.targets = "*";
                }
                var actions = _buildAction(instance, trigger, handler, options, type);
                actions.forEach(function (action) {
                    customBehaviors.push(action);
                });

                if (trigger && trigger.preventDefault === true) {
                    var targets = trigger.targets;

                    if (trigger.targets === "*") {
                        disableDefaults[ trigger.event + ".*" ] = {
                            event: trigger.event,
                            target: "*"
                        };
                    } else {
                        targets.forEach(function(target) {
                            disableDefaults[ trigger.event + "." + target ] = {
                                event: trigger.event,
                                target: target
                            };
                        });
                    }
                }
            });

            removeDisabledBehaviors(behavior, disableDefaults, type);
            customBehaviors.forEach(function (action) {
                behavior.addActionByDef(action);
            });
        }
        return behavior;
    };

    function removeDisabledBehaviors(behavior, disableDefaults, type) {
        var allActions = behavior.getAllActions();
        Object.keys(allActions).forEach(function (key) {
            var action = allActions[key];
            var trigger = ObjectUtils.clone( action.getTrigger() );
            var event = trigger.name;
            var ls = [];

            if (action._actionId) { // this is a actionItemAdapter, remove it
                behavior.removeActionById(key);
            } else if ( TypeUtils.isArray(trigger.targets) ) {
                ls = trigger.targets.filter(function (target) {
                    return !disableDefaults[ event + "." + target ];
                });
                if (ls.length === 0) {
                    behavior.removeActionById(key);
                } else if (ls.length < trigger.targets.length) {
                    trigger.targets = ls;
                    action.setTrigger(trigger);
                }
            } else {
                if ( disableDefaults[ event + "." + trigger.targets ] ) {
                    behavior.removeActionById(key);
                }
            }
        });
    }

    // this function is used to check whether user provided trigger event is in the CustomInteractionEvents.
    var validateTriggerEvent = function (validEvents, event) {
        return validEvents.indexOf(String(event)) > -1;
    }.bind( null,
        Object.keys(CustomInteractionEvents).map(function (key) {
            return String(CustomInteractionEvents[key]);
        })
    );

    var validateTriggerTarget = function (validTargets, target) {
        return validTargets.indexOf(String(target)) > -1;
    }.bind( null,
        Object.keys(CustomInteractionTargets).map(function (key) {
            return String(CustomInteractionTargets[key]);
        })
    );

    // this function copty triggers and validate the event and targets of the triggers
    // to make sure users are using event and target from our constants.
    // if user provided events and targets are not from constants, they will be filtered out.
    function copyTriggers(list) {
        var triggers = [];
        (list ||[]).map(function (trigger) {
            if ( validateTriggerEvent(trigger.event) === false ) {
                return;
            }
            var targets = [];
            (trigger.targets || []).forEach(function (target) {
                if ( validateTriggerTarget(target) ) {
                    targets.push( String(target) );
                }
            });
            var excludeTargets = [];
            (trigger.excludeTargets || []).map(function (target) {
                if ( validateTriggerTarget(target) ) {
                    excludeTargets.push( String(target) );
                }
            });

            triggers.push({
                id: trigger.id,
                event: String(trigger.event),
                targets: targets,
                excludeTargets: excludeTargets,
                preventDefault: trigger.preventDefault
            });
        });
        return triggers;
    }

    var _buildAction = function(interactionInstance, trigger, handler, options, type){
        var key = trigger.id;
        var actions = [], action;
        if(key && trigger && handler){
            action = {};
            // id
            action.id = key;
            // handler
            action.handler = Generator.generate(handler, options, trigger, interactionInstance);
            // triggerEvent
            action.triggerEvent = {};
            action.triggerEvent.name = trigger.event;
            action.triggerEvent.supportedChartTypes = [type];
            action.triggerEvent.excludeTargets = trigger.excludeTargets;
            action.triggerEvent.targets = trigger.targets;

            // we need to intercept action handler to see (for example) if mouse point is overlap a data point on plot
            // and not to dispatch this event if data point is in execludeTargets
            action = interceptAction(action, interactionInstance, trigger, handler, options, type);
            actions.push(action);

            // we need to simluate data point event while listening on plot because with volume data, data points
            // will not be there on DOM tree, we have to simulate this event
            action = buildSimulatingAction(interactionInstance, trigger, handler, options, type);
            if (action) {
                actions.push(action);
            }
        }
        return actions;
    };

    /**
     * This function check trigger to see if we need build internal actions to simulate interaction. For example,
     * when there are too many data points on a time series line chart, data point DOM nodes will not be rendered, so
     * we need to listen hover/click or other mouse events on plot to emulate hover/click on data point event.
     */
    function buildSimulatingAction(interactionInstance, trigger, handler, options, type) {

        // presently, only timeseries line chart not render data point when there are many data points.
        if ( trigger.targets.indexOf(String(CustomInteractionTargets.DATAPOINT)) > -1 &&
            [ "info/timeseries_line" ].indexOf(type) > -1 ) {

            return {
                triggerEvent: {
                    name: trigger.event,
                    supportedChartTypes: [type],
                    targets: [ String(CustomInteractionTargets.PLOT) ]
                },
                id: trigger.id + "_internal_" + (+new Date()),
                handler: function (event, service, actionId) {
                    if ( !service.isBigDataMode() ) {
                        return;
                    }
                    var vizRenderInfo = options.getVizRenderInfo();
                    // to check current event point is close to data point
                    var point = event.data.pointToChart;
                    var theDP = detectOnLineMarker( flattenDataPoints(vizRenderInfo.plot().dataPoints()), point );
                    if (theDP) {
                        handler.call(interactionInstance,
                            trigger.id,
                            buildEvent(event, point, theDP),
                            options.getVizModelInfo(),
                            vizRenderInfo
                        );
                    }
                }
            };
        }
    }

    /**
     * This function check trigger to see if we need intercept action to prevent some event dispatched. For example,
     * when there are too many data points on a time series line chart, data point DOM nodes will not be rendered, so
     * we dont dispatch event on plot/chartRoot if the trigger execluded data point while we detect that the mouse is
     * overlap a certain data point.
     */
    function interceptAction(action, interactionInstance, trigger, handler, options, type) {
        if ( trigger.excludeTargets &&
            trigger.excludeTargets.indexOf(String(CustomInteractionTargets.DATAPOINT)) > -1 &&
            [ "info/timeseries_line" ].indexOf(type) > -1 ) {

            action.handler = function (original, event, service, actionId) {
                if ( !service.isBigDataMode() ) {
                    original(event, service, actionId);
                    return;
                }
                var vizRenderInfo = options.getVizRenderInfo();
                // to check current event point is close to data point
                var point = event.data.pointToChart;
                var theDP = detectOnLineMarker( flattenDataPoints(vizRenderInfo.plot().dataPoints()), point );
                if ( !theDP ) {
                    original(event, service, actionId);
                }
            }.bind(null, action.handler);
        }
        return action;
    }

    // to detect if point interact on a certain data point and return it
    function detectOnLineMarker(dataPoints, point) {
        var dp;
        dataPoints.some(function (e) {
            if ( !e ) { // list may contains null/undefined elements, skip them
                return;
            }
            var x = e.x, y = e.y,
                w = e.width, h = e.height;
            // to detect whether pointer is overlap a data point, we check if pointer is in the data point rect
            // (fasten check speed) and it's distance to the center of the data point
            // is not greater than the radius. (x^2 + y^2 <= r^2)
            // the radius here used is 4 (from HitTestDecorator.hitTest, to keep same bahavior with this function)
            // so the value 16 is square of 4.
            if ( point.x >= x - 1 && point.y >= y - 1 && point.x <= (x + w + 2) && point.y <= (y + h + 2) &&
                (Math.pow(point.x - x - w/2, 2) + Math.pow(point.y - y - h/2, 2)) <= 16 ) {
                return (dp = e);
            }
        });
        return dp;
    }

    // 2d array -> array
    function flattenDataPoints(dataPoints) {
        return dataPoints.reduce(function (list, ls) {
            Array.prototype.push.apply(list, ls);
            return list;
        }, []);
    }

    function buildEvent(event, point, dataPoint) {
        return {
            name: event.name,
            preventBrowserDefault: function () {
                if (event.data && event.data.originalEvent) {
                    return event.data.originalEvent.preventDefault();
                }
            },
            data: {
                point: point,
                targets: dataPoint,
                ctrlKey: event.data.ctrlKey,
                wheelDelta: event.data.wheelDelta,
                scale: event.data.scale
            }
        };
    }

    return CustomInteractionUtils;
});

define('sap/viz/framework/customization/BaseCustomInteraction',[
    "sap/viz/framework/property/PropertyManager",
    "sap/viz/framework/common/util/TypeUtils"
], function(PropertyManager, TypeUtils) {

    /**
     * @private
     */
    var BaseCustomInteraction = function() {
        this._properties = new PropertyManager();
        this._properties.add(this.constructor.metadata.propertyDefinition);
    };

    BaseCustomInteraction.id = "";

    /**
     * @static should be frozen
     */
    BaseCustomInteraction.metadata = {
        /**
         * properties schema: {
                "supportedValueType": "Object", // Number, String, Boolean, StringArray, NumberArray, BooleanArray
                "defaultValue": null,
                // optional, by default read-only is false
                "readonly": false,
                // optional, by default serializable is true
                "serializable": true,
                // optional
                "description": "",
            }
         */
        propertyDefinition: {},

        /**
         * Array of event type String
         */
        eventDefinition: []
    };

    /**
     * @static should be frozen
     * Once the triggers were readed and registered to chart by customization api,
     * they would not be readed and re-register again in it's customizaion life cycle.
     */
    BaseCustomInteraction.triggers = [
    /* { */
        /**
         * {Array<sap.viz.extapi.customization.constant.CustomInteractionTargets>}
        targets: [],
         */
        /**
         * {Array<sap.viz.extapi.customization.constant.CustomInteractionTargets>}
        excludeTargets: [],
         */
        /**
         * {String<sap.viz.extapi.customization.constant.CustomInteractionEvents>}
        event: null,
         */
    /* } */
    ];

    //-----------------------------
    // Methods to be Overridden
    // No super() support
    //-----------------------------

    /**
     * called after vizInstance finishes all its own rendering
     *
     * @param {String} event
     * @param {sap.viz.extapi.customization.renderinfo.BaseComponent} targetInfo
     * @param {sap.viz.extapi.customization.VizModelInfo} vizModelInfo
     * @param {sap.viz.extapi.customization.VizRenderInfo} vizRenderInfo
     */
    BaseCustomInteraction.prototype.handle = function(event, targetInfo,
        vizModelInfo, vizRenderInfo) {

    };

    /**
     * optional to override
     */
    BaseCustomInteraction.prototype.destroy = function() {

    };

    /**
     * optional to override
     *
     * @param {Object} [option] {width: Number, height: Number}
     */
    BaseCustomInteraction.prototype.exportToSVGString = function(option) {
        return "";
    };

    /**
     * @return {HTMLDIVElement} the Customization Layer DIV
     */
    BaseCustomInteraction.prototype.container = function() {
        return null;
    };

    /**
     * get/set property
     * @param {String} key
     * @param {Object} value
     * @return {Object}
     */
    BaseCustomInteraction.prototype.properties = function(key, value) {
        var ret = null;
        if (arguments.length === 1) {
            if(TypeUtils.isString(key)){ //  get value by key
                ret = this._properties.get(key);
            }else{ // key is the JSON
                this._properties.set(key);
                ret = this;
            }
        } else if (arguments.length === 2) {
            this._properties.set(key, value);
            ret = this;
        } else {
            ret = this._properties.get();
        }
        return ret;
    };

    /**
     * @return {sap.viz.extapi.customization.VizInstanceInfo}
     */
    BaseCustomInteraction.prototype.vizInstanceInfo = function() {
        return null;
    };

    /**
     * re-render the whole vizInstance at the end of call stack
     */
    BaseCustomInteraction.prototype.reRenderVizInstance = function() {

    };
    return BaseCustomInteraction;
});
define('sap/viz/framework/customization/CustomInteractionFactory',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/framework/customization/BaseCustomInteraction",
    'sap/viz/framework/property/PropertyManager'
], function(oo, ObjectUtils, BaseCustomInteraction,PropertyManager) {

    var CustomInteractionFactory = {

    };

    CustomInteractionFactory.create = function(moduleFunc, args){
        var newModule = new moduleFunc(args);

        if(moduleFunc.metadata && moduleFunc.metadata.propertyDefinition){
            moduleFunc._properties = new PropertyManager();
            moduleFunc._properties.add(moduleFunc.metadata.propertyDefinition);
        }
        
        newModule.triggers = moduleFunc.triggers;
        newModule.metadata = moduleFunc.metadata;
        newModule.id = moduleFunc.id;

        return newModule;
    };

    CustomInteractionFactory.extend = function() {
        var customizationClazz = function() {
            customizationClazz.superclass.constructor.apply(this, arguments);
        };

        oo.extend(customizationClazz, BaseCustomInteraction);

        customizationClazz.triggers = [];
        customizationClazz.metadata = ObjectUtils.extend(true, {}, BaseCustomInteraction.metadata);
        customizationClazz.id = ObjectUtils.extend(true, {}, BaseCustomInteraction.id);

        return customizationClazz;
    };

    return CustomInteractionFactory;
});
define('sap/viz/framework/customization/CustomRendererFactory',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/framework/customization/BaseCustomRenderer",
    'sap/viz/framework/property/PropertyManager'
], function(oo, ObjectUtils, BaseCustomRenderer,PropertyManager) {

    var CustomRendererFactory = {

    };

    CustomRendererFactory.create = function(moduleFunc, args){
        var newModule = new moduleFunc(args);

        if(moduleFunc.metadata && moduleFunc.metadata.propertyDefinition){
            moduleFunc._properties = new PropertyManager();
            moduleFunc._properties.add(moduleFunc.metadata.propertyDefinition);
        }
        
        newModule.metadata = moduleFunc.metadata;
        newModule.id = moduleFunc.id;

        return newModule;
    };

    CustomRendererFactory.extend = function() {
        var customizationClazz = function() {
            customizationClazz.superclass.constructor.apply(this, arguments);
        };

        oo.extend(customizationClazz, BaseCustomRenderer);

        customizationClazz.metadata = ObjectUtils.extend(true, {}, BaseCustomRenderer.metadata);
        customizationClazz.id = ObjectUtils.extend(true, {}, BaseCustomRenderer.id);

        return customizationClazz;
    };

    return CustomRendererFactory;
});
define('sap/viz/framework/customization/BaseCustomOverlay',["sap/viz/framework/property/PropertyManager",
    'sap/viz/framework/common/util/TypeUtils'], function(PropertyManager, TypeUtils) {

    /**
     * @private
     */
    var BaseCustomOverlay = function(vizInstanceInfo) {
        this._properties = new PropertyManager();
        this._properties.add(this.constructor.metadata.propertyDefinition);
        this._vizInstanceInfo = vizInstanceInfo;
    };

    BaseCustomOverlay.id = "";

    /**
     * @static should be frozen
     */
    BaseCustomOverlay.metadata = {
        /**
         * properties schema: {
                "supportedValueType": "Object", // Number, String, Boolean, StringArray, NumberArray, BooleanArray
                "defaultValue": null,
                // optional, by default read-only is false
                "readonly": false,
                // optional, by default serializable is true
                "serializable": true,
                // optional
                "description": "",
            }
         */
        propertyDefinition: {},

        /**
         * Array of event type String
         */
        eventDefinition: []
    };

    //-----------------------------
    // Methods to be Overridden
    // No super() support
    //-----------------------------

    /**
     * optional to override
     */
    BaseCustomOverlay.prototype.init = function() {};

    /**
     * called before vizInstance starts its layout and rendering
     * not allow overriding deprecated scale related properties
     * override properties > user setting properties > template properties > viz default properties
     *
     * @return {Object} override properties
     */
    BaseCustomOverlay.prototype.overrideProperties = function(vizModelInfo) {
        return {};
    };

    /**
     * called after vizInstance finishes all its own rendering
     *
     * @param {Object} changes {
                            dataChanged : false,
                            bindingChanged : false,
                            scalesChanged : false,
                            propertiesChanged : false,  
                            sizeChanged : false
                       }
     * @param {sap.viz.extapi.customization.VizModelInfo} vizModelInfo
     * @param {sap.viz.extapi.customization.VizRenderInfo} vizRenderInfo
     */
    BaseCustomOverlay.prototype.render = function(changes, vizModelInfo, vizRenderInfo) {};

    /**
     * optional to override
     *
     * @param {Object} [option] {width: Number, height: Number}
     */
    BaseCustomOverlay.prototype.exportToSVGString = function(option) {
        return "";
    };

    //-----------------------------
    // Public Utility Methods
    //-----------------------------

    /**
     * @return {HTMLDIVElement} the Customization Layer DIV
     */
    BaseCustomOverlay.prototype.container = function() {
        return null;
    };

    /**
     * set property
     * @param {String} key
     * @param {Object} value
     */
    BaseCustomOverlay.prototype.properties = function() {
        var len = arguments.length;
        var ret = null;
        switch (len){
            case 0: // get all
                ret = this._properties.get();
                break;
            case 1: 
                var value = arguments[0];
                if(TypeUtils.isString(value)){ //  get by key
                    ret = this._properties.get(value);
                }else{ // set JSON value
                    this._properties.set(value);
                    ret = this;
                }
                break;
            case 2: // set value
                var key = arguments[0];
                var keyValue = arguments[1];
                this._properties.set(key, keyValue);
                ret = this;
                break;
            default:

        }
        return ret;
    };

    /**
     * @return {sap.viz.extapi.customization.VizInstanceInfo}
     */
    BaseCustomOverlay.prototype.vizInstanceInfo = function() {
        return null;
    };

    /**
     * Optional to override
     * destroy BaseCustomOverlay.
     */
    BaseCustomOverlay.prototype.destroy = function() {
    };
    return BaseCustomOverlay;

});
define('sap/viz/framework/customization/CustomOverlayFactory',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/framework/customization/BaseCustomOverlay",
    'sap/viz/framework/property/PropertyManager'
], function(oo, ObjectUtils, BaseCustomOverlay,PropertyManager) {

    var CustomOverlayFactory = {

    };

    CustomOverlayFactory.create = function(moduleFunc, args){
        var newModule = new moduleFunc(args);

        if(moduleFunc.metadata && moduleFunc.metadata.propertyDefinition){
            moduleFunc._properties = new PropertyManager();
            moduleFunc._properties.add(moduleFunc.metadata.propertyDefinition);
        }
        newModule.metadata = moduleFunc.metadata;
        newModule.id = moduleFunc.id;

        return newModule;
    };

    CustomOverlayFactory.extend = function() {
        var customizationClazz = function() {
            customizationClazz.superclass.constructor.apply(this, arguments);
        };

        oo.extend(customizationClazz, BaseCustomOverlay);

        customizationClazz.metadata = ObjectUtils.extend(true, {}, BaseCustomOverlay.metadata);
        customizationClazz.id = ObjectUtils.extend(true, {}, BaseCustomOverlay.id);

        return customizationClazz;
    };

    return CustomOverlayFactory;
});
define('sap/viz/framework/customization/BaseCustomization',["sap/viz/framework/property/PropertyManager",
    "sap/viz/framework/customization/BaseCustomRenderer",
    "sap/viz/framework/customization/CustomRendererUtils",
    'sap/viz/framework/customization/CustomInteractionUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/customization/CustomInteractionFactory',
    'sap/viz/framework/customization/CustomRendererFactory',
    'sap/viz/framework/customization/CustomOverlayFactory'
], function(PropertyManager,
    BaseCustomRenderer, CustomRendererUtils, CustomInteractionUtils, TypeUtils,
    InteractionFactory, RendererFactory, OverlayFactory) {

    var CUSTOM_MODULE_OVERLAY = 'customOverlay';
    var CUSTOM_MODULE_RENDERERS = 'customRenderers';
    var CUSTOM_MODULE_INTERACTION = 'customInteraction';


    var CUSTOM_PROPERTIES_OVERLAY = 'customOverlayProperties';
    var CUSTOM_PROPERTIES_RENDERERS = 'customRendererProperties';
    var CUSTOM_PROPERTIES_INTERACTION = 'customInteractionProperties';

    var INTERACTION_BEHAVIOR_TYPE = "interaction.behaviorType";

    /**
     * @private
     */
    var BaseCustomization = function() {
        // customization all properties
        this._properties = new PropertyManager();
        this._chartInfos = null;

        // add the properties declare
        this._properties.add({
            id:{
                defaultValue:null
            },
            customOverlayProperties:{
                defaultValue:null
            },
            customRendererProperties:{
                defaultValue:null
            },
            customInteractionProperties:{
                defaultValue:null
            }
        });

        // for serialize purpose
        this._customOverlayProperties = new PropertyManager();
        this._customRendererProperties = new PropertyManager();
        this._customInteractionProperties = new PropertyManager();

        // custom overlay instance
        this._customOverlay = null;
        this._createCustomOverlay();

        // custom renderer instances
        this._customRenderers = null;
        this._createCustomRenderers();

        // custom interaction instance
        this._customInteraction = null;
        this._createCustomInteraction();

        // custom renderer properties keys
        // as it's the custom renderer ID, the value could be 'a.b.c'
        // when perform the get() from propertyManager, the value will be {a: {b: {c:value}}}.
        // so seperate to cache the custom renderer ID for serialization purpose.
        this._customRendererIDs = null;
    };

    // @static id
    BaseCustomization.id = "";

    // @static chartType
    BaseCustomization.chartType = "";

    /**
     * @static should be frozen
     * sap.viz.extapi.core.customization.BaseCustomOverlay.extend()
     */
    BaseCustomization.customOverlay = null;

    /**
     * @static should be frozen
     * sap.viz.extapi.core.customization.BaseCustomRenderer.extend()
     */
    BaseCustomization.customRenderers = [];

    /**
     * @static should be frozen
     * sap.viz.extapi.core.customization.BaseCustomInteraction.extend()
     */
    BaseCustomization.customInteraction = null;



    //-----------------------------
    // Methods to be Overridden
    // No super() support
    //-----------------------------

    /**
     * set the custom properties from the VizInstance
     */
    BaseCustomization.prototype._setProperties = function(value) {
        if(!value){
            return ;
        }
        this._properties.set(value);
        var hasProperty = value[CUSTOM_PROPERTIES_OVERLAY] !== undefined;
        // set overlay properties
        if(this._customOverlay && hasProperty){
            this._customOverlay._properties.set(value[CUSTOM_PROPERTIES_OVERLAY]);
            this._customOverlayProperties = this._customOverlay._properties;
        }

        hasProperty = value[CUSTOM_PROPERTIES_RENDERERS] !== undefined;
        // set custom renderer properties
        if(this._customRenderers && this._customRenderers.length>0 && hasProperty){
            var subValue = value[CUSTOM_PROPERTIES_RENDERERS];
            if(subValue){
                this._customRendererIDs = Object.keys(subValue);
            }
            this._customRendererProperties.set(subValue);
        }

        hasProperty = value[CUSTOM_PROPERTIES_INTERACTION] !== undefined;
        // set interaction properties
        if(this._customInteraction && hasProperty){
            this._customInteraction._properties.set(value[CUSTOM_PROPERTIES_INTERACTION]);
            this._customInteractionProperties = this._customInteraction._properties;
        }
    };

    /**
     * Get custom renderer Properties
     */
    BaseCustomization.prototype._getCustomRendererProperties = function() {
        var ret;
        var properties = this._properties.get(CUSTOM_PROPERTIES_RENDERERS);
        ret = properties;
        if(properties){
            if(this._customRendererIDs && this._customRendererIDs.length>0){
                ret = {};
                var me = this;
                this._customRendererIDs.forEach(function(id){
                    if(properties.hasOwnProperty(id)){
                        ret[id] = me._customRendererProperties.get(id);
                    }
                });
            }
        }
        return ret;
    };

    /**
     * @private 
     */
    BaseCustomization.prototype._init = function(chartInfos) {
        this._chartInfos = chartInfos;
        if (this._customOverlay) {
            this._customOverlay.init();
        }
        this._registerCustomInteraction();
    };

    /**
     * @private
     * called before vizInstance starts its layout and rendering
     * not allow overriding deprecated scale related properties
     * override properties > user setting properties > template properties > viz default properties
     *
     * @return {Object} override properties
     */
    BaseCustomization.prototype._overrideProperties = function(vizModelInfo) {
        if (this._customOverlay) {
            return this._customOverlay.overrideProperties(vizModelInfo);
        } else {
            return {};
        }
    };

    /**
    *   Get the cutom render property value from the customiztion setting
    *   Currently, only support one defintion in renderer metadata.
    */
    var _getRendererProperties = function(customRendererID, properties){
        var ret = null;
        if(customRendererID && properties){
            ret = properties[customRendererID];
        }
        return ret;
    };

    /**
     * @private
     * called before vizInstance starts its layout and rendering
     * override chart renderer
     * @properties {Object} the override properties
     * @return {Object} override properties
     */
    BaseCustomization.prototype._overrideRendererProperties = function(properties) {
        if (!properties) {
            properties = {};
        }

        if(this._customRenderers && this._customRenderers.length>0){
            var me = this;
            this._customRenderers.forEach(function(instance){
                var id = instance.id;
                var render = instance.render;
                var renderProperties = me._properties.get(CUSTOM_PROPERTIES_RENDERERS);
                var type = instance.constructor.type;
                var typeString =type.toString();
                var propertyRendererKey = instance.id;
                renderProperties = _getRendererProperties(propertyRendererKey, renderProperties);
                // Always try to match context for creation and update case.
                var func = CustomRendererUtils.getRenderFunction(instance, typeString, render,
                    renderProperties, me._chartInfos.getVizModelInfo());
                if (func) {
                    properties[typeString] = func;
                }

            });
        }
        return properties;
    };

    /**
    *   delegateFunction
    *
    */

    var _delegateFunctions = function(instance, functions){
        var me = this;
        if(instance && functions){
            functions.forEach(function(name){
                instance[name] = function(){
                    return me['_' + name]();
                };
            });
        }
    };

    /**
    *   create custom interaction
    *
    */
    BaseCustomization.prototype._createCustomInteraction = function(){
        var interaction = this.constructor[CUSTOM_MODULE_INTERACTION];
        if(interaction){
            var instance = null;
            var me = this;
            instance = InteractionFactory.create(interaction);

            // TODO: add more function 
            var functions = ['vizInstanceInfo'];
            // _delegateFunctions(instance, functions).bind(this);
            _delegateFunctions.call(this, instance, functions);
            instance.container = function(){
                return me._chartInfos.getInteractionContainer();
            };
            instance.reRenderVizInstance = function(){
                return me._reRenderVizInstance();
            };
            this._customInteraction = instance;
        }
    };

    /**
    *   create custom overlay 
    *
    */
    BaseCustomization.prototype._createCustomOverlay = function(){
        var overlay = this.constructor[CUSTOM_MODULE_OVERLAY];
        if(overlay){
            var instance = null;
            var me = this;
            instance = OverlayFactory.create(overlay);

            // TODO: add more function 
            var functions = ['vizInstanceInfo'];
            _delegateFunctions.call(this, instance, functions);
            instance.container = function(){
                return me._chartInfos.getOverlayContainer();
            };
            this._customOverlay = instance;
        }
    };

    /**
    *   create custom renderers 
    *
    */
    BaseCustomization.prototype._createCustomRenderers = function(){
        var renderers = this.constructor[CUSTOM_MODULE_RENDERERS];
        if(renderers && renderers.length>0){
            if(!this._customRenderers){
                this._customRenderers = [];
            }
            var instance = null;
            var me = this;
            renderers.forEach(function(renderer){
                if(renderer && renderer.id){
                    // for serialize purpose
                    var id  = renderer.id;
                    var propertyDefintion = {};
                    propertyDefintion[id] = {};
                    propertyDefintion[id]['defaultValue'] = null;
                    me._customRendererProperties.add(propertyDefintion);
                }
                instance = RendererFactory.create(renderer);
                
                // TODO: add more function 
                var functions = ['vizInstanceInfo'];
                _delegateFunctions.call(me, instance, functions);

                me._customRenderers.push(instance);
            });
        }
    };

    /**
     * @private
     * called when set customization
     */
    BaseCustomization.prototype._registerCustomInteraction = function() {
        if (this._customInteraction) {
            CustomInteractionUtils.buildBehavior(this._customInteraction, this._chartInfos);
        }
    };

    /**
     * @Private  
     * called after vizInstance finishes all its own rendering
     *
     * @param {Object} changes {
                            dataChanged : false,
                            bindingChanged : false,
                            scalesChanged : false,
                            propertiesChanged : false,  
                            sizeChanged : false
                       }
     * @param {sap.viz.extapi.customization.VizModelInfo} vizModelInfo
     * @param {sap.viz.extapi.customization.VizRenderInfo} vizRenderInfo
     */
    BaseCustomization.prototype._render = function(changes, vizModelInfo, vizRenderInfo) {
        if (this._customOverlay) {
            this._customOverlay.render(changes, vizModelInfo, vizRenderInfo);
        }
    };

    /**
    * destroy module
    * here: specify for 
    *   customOverlay
    *   customRenderers
    *   customInteractions
    *       
    */
    var _destroyModule = function(module){
        if(module){
            if(TypeUtils.isArray(module)){ // customRenderers || customInteractions
                module.forEach(function(instance){
                    instance.destroy();
                    instance = null;
                });
            }else{ // customOverlay
                module.destroy();
            }
        }
        module = null;
    };
    /**
     * @private
     */
    BaseCustomization.prototype._destroy = function() {
        _destroyModule(this._customOverlay);
        // _destroyModule(this._customInteraction);
        // _destroyModule(this._customRenderers);

        if (this._customInteraction) {
            CustomInteractionUtils.cleanBehavior({
                'chartAppId' : this._chartInfos.chartAppId,
                'customizationsId' : this._chartInfos.customizationsId
            });
        }
    };

    /**
    * exportToSVGString for module
    */
    var _moduleToSVGString = function(module, option){
        var svgString = null;
        if(module){
            svgString = module.exportToSVGString(option);
        }
        return svgString;
    };

    /**
     * @private
     *
     * @param {Object} [option] {width: Number, height: Number}
     */
    BaseCustomization.prototype._exportToSVGString = function(option) {
        var svg = "";
        svg += _moduleToSVGString(this._customOverlay ,option);
        svg += _moduleToSVGString(this._customInteraction ,option);
        return svg;
    };

    /**
     * @return {sap.viz.extapi.customization.VizInstanceInfo}
     */
    BaseCustomization.prototype._vizInstanceInfo = function() {
        return this._chartInfos.getVizInstanceInfo();
    };

    /**
     * @return {sap.viz.extapi.customization.VizInstanceInfo}
     */
    BaseCustomization.prototype._reRenderVizInstance = function() {};

    return BaseCustomization;



});

define('sap/viz/framework/customization/CustomizationFactory',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/framework/customization/BaseCustomization",
    "sap/viz/framework/property/PropertyManager"

], function(oo, ObjectUtils, BaseCustomization, PropertyManager) {

    var CustomizationFactory = {
    
    };

    CustomizationFactory.create = function(moduleFunc, args){

        var newModule = new moduleFunc(args);

        return newModule;
    };



    CustomizationFactory.extend = function(){
        var customizationClazz = function(){
            customizationClazz.superclass.constructor.apply(this, arguments);
        };

        oo.extend(customizationClazz, BaseCustomization);

        customizationClazz.id = ObjectUtils.extend(true, {}, BaseCustomization.id);
        customizationClazz.chartType = ObjectUtils.extend(true, {}, BaseCustomization.chartType);

        customizationClazz.customOverlayProperties = ObjectUtils.extend(true, {}, 
                BaseCustomization.customOverlayProperties);

        customizationClazz.customRendererProperties = ObjectUtils.extend(true, {}, 
                BaseCustomization.customRendererProperties);

        customizationClazz.customInteractionProperties = ObjectUtils.extend(true, {}, 
                BaseCustomization.customInteractionProperties);


        return customizationClazz;
    };

    
    return CustomizationFactory;
});
define('sap/viz/framework/customization/CustomizationManager',[
    "sap/viz/framework/customization/CustomizationFactory",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/lang/LangManager",
    "sap/viz/framework/common/util/FunctionUtils",
    "sap/viz/framework/common/util/VersionComparator"
], function(CustomizationFactory, TypeUtils, LangManager, FunctionUtils, VersionComparator) {

    var _repository = {};

    var CustomizationManager = {};

    var supportedChartList = [
        'info/timeseries_line',
        'info/timeseries_column',
        'info/timeseries_scatter',
        'info/timeseries_bubble',
        'info/column',
        'info/dual_column',
        'info/bar',
        'info/dual_bar',
        'info/stacked_column',
        'info/stacked_bar',
        'info/100_stacked_bar',
        'info/100_stacked_column',
        'info/100_dual_stacked_bar',
        'info/100_dual_stacked_column',
        'info/dual_stacked_bar',
        'info/dual_stacked_column',
        'info/line',
        'info/area',
        'info/horizontal_area',
        'info/100_area',
        'info/100_horizontal_area',
        'info/horizontal_line',
        'info/dual_line',
        'info/dual_horizontal_line',
        'info/combination',
        'info/horizontal_combination',
        'info/dual_combination',
        'info/dual_horizontal_combination',
        'info/stacked_combination',
        'info/horizontal_stacked_combination',
        'info/dual_stacked_combination',
        'info/dual_horizontal_stacked_combination',
        'info/scatter',
        'info/bubble'
    ];
    
    // Refactor
    // BaseCustomization get no metadata.
    CustomizationManager.register = function(moduleFunc){
        if(moduleFunc && TypeUtils.isExist(moduleFunc.id) &&
            TypeUtils.isFunction(moduleFunc)){
            
            // need check before cache
            if(!isSupportedChartType(moduleFunc.chartType)){
                FunctionUtils.logWarnning(LangManager.getLogMessage('IDS_ERROR_CHART_TYPE_FOR_CUSTOMIZATION', 
                    moduleFunc.chartType));
                return;
            }
            if(!_repository[moduleFunc.id]){
                _repository[moduleFunc.id] = moduleFunc;
            }
            
            var serviceMetaData = sap.bi.framework.getServiceMetadata('*sap.viz.impls.customization')
                .filter(function(d) {
                    return d.id === moduleFunc.id;
                });
            if (serviceMetaData.length > 0) {
                checkVersion(serviceMetaData[0]);
            }
        }
    };

    CustomizationManager.unregister = function(moduleFunc){
        if(moduleFunc && TypeUtils.isExist(moduleFunc.id) &&
            TypeUtils.isFunction(moduleFunc)){
            if(_repository[moduleFunc.id]){
                delete _repository[moduleFunc.id];
            }
        }
    };

    CustomizationManager.get = function(id){
        var moduleFunc = _repository[id];
        return moduleFunc;
    };
    
    
    var checkVersion = function(servicesMetaData) {
        if (servicesMetaData.customProperties && servicesMetaData.customProperties.requires) {
            var requires = servicesMetaData.customProperties.requires;
            for (var j = 0, requiresLen = requires.length; j < requiresLen; j++) {
                if (requires[j].id === "sap.viz.common.core" &&
                        (VersionComparator.compare(requires[j].version, sap.viz.api.VERSION) > 0)) {
                    FunctionUtils.logWarnning(LangManager.getLogMessage('IDS_ERROR_SDK_VERSION_DOES_NOT_MATCH', 
                            servicesMetaData.id, requires[j].version, sap.viz.api.VERSION));
                    return false;
                }
            }
        }
        return true;
    };

    var isSupportedChartType = function(chartType) {
        if (supportedChartList.indexOf(chartType) < 0) {
            return false;
        }
        return true;
    };

    
    return CustomizationManager;
});

define('sap/viz/framework/customization/CustomizationUtils',[
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    "sap/viz/framework/customization/CustomizationManager"
], function(ObjectUtils, TypeUtils, CustomizationManager) {

    var CustomizationUtils = {};

    // Refactor
    // BaseCustomization no metadata
    CustomizationUtils.registerById = function(id){
        var services = sap.bi.framework.getService("*",
            "*sap.viz.impls.customization");
        var item;
        for(var i =0, len = services.length;i<len;i++){
            item = services[i];
            if(item && TypeUtils.isFunction(item) && !item.id){
                item = item.apply(null);
            }

            if(item && item.id === id){
                break;
            }
        }
        if(i<len && item){
            CustomizationManager.register(item);
            return item;
        } 
    };
    
    CustomizationUtils.getBundleVersion = function(customizationId) {
        var servicesMetaData = sap.bi.framework.getServiceMetadata('*sap.viz.impls.customization').filter(function(d) {
            return d.id === customizationId;
        });
        if (servicesMetaData.length > 0) {
            if (servicesMetaData[0].framework && servicesMetaData[0].framework.bundleVersion) {
                return servicesMetaData[0].framework.bundleVersion;
            }
        }
        return null;
    };

    CustomizationUtils.isSupported = function(customizationId, chartType){
        //TODO: currently only support one chart type one customization id.
        var moduleClazz = CustomizationManager.get(customizationId);
        if(!moduleClazz){
            moduleClazz = CustomizationUtils.registerById(customizationId);
        }
        if(moduleClazz && moduleClazz.chartType){
            return moduleClazz.chartType === chartType;
        }
        return false;      
    };
    
    return CustomizationUtils;
});
define('sap/viz/framework/customization/VizInstanceInfo',[ 'sap/viz/framework/common/util/TypeUtils' ], function(TypeUtils) {

    var exposedInfo = [ 'type', 'properties', 'bindings', 'data', 'scales', 'size', 'selection', 'customizations', 
    'on','off', 'dispatchEvent', 'template'];

    var VizInstanceInfo = {};
    var CUSTOMIZATION_EVENT_PREFIX = "customization_";

    var _appendPrefix = function(type) {
        return CUSTOMIZATION_EVENT_PREFIX + type;
    };

    VizInstanceInfo.createInfo = function(infos) {
        var vizInstanceInfo = {};

        exposedInfo.forEach(function(d) {
            if (TypeUtils.isFunction(infos[d])) {
                vizInstanceInfo[d] = function() {
                    return infos[d].apply(infos);
                };
            } else if (TypeUtils.isExist(infos[d])) {
                vizInstanceInfo[d] = infos[d];
            }
        });

        vizInstanceInfo.on = function(evtType, callback, scope) {
            evtType = _appendPrefix(evtType);
            infos.on.apply(infos, [evtType, callback, scope]);
        };

        vizInstanceInfo.dispatchEvent = function(evtType, data) {
            if(evtType){
                if(infos && infos._evtDisp){
                    evtType = _appendPrefix(evtType);
                    infos._evtDisp.fire(evtType, data);
                }
            }
        };

        vizInstanceInfo.off = function(evtType) {
            evtType = _appendPrefix(evtType);
            infos.off.call(infos, evtType);
        };
        return vizInstanceInfo;
    };
    
    return VizInstanceInfo;
});

define('sap/viz/framework/scale/ColorShapeScaleMerger',['sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/mark/MarkManager',
    "sap/viz/framework/common/util/TypeUtils",
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/ArrayUtils',
    'sap/viz/framework/chartmodel/ContextBuilder',
    'sap/viz/framework/scale/ScaleUtil'
], function(langManager,
        MarkManager,
        TypeUtils,
        DataUtils,
        ObjectUtils,
        ArrayUtils,
        ContextBuilder,
        ScaleUtils)
{

    "use strict";

    var MND = "measureNames";
    var DEFAULT_PATTERN_COLOR = "#aaaaaa";
    /*
     * Only used by Color Legend. Merge color and shape scales. If no shape
     * feeding, shapeScale should be a shape string. like 'rect'
     */
    var ColorShapeScaleMerger = function(markMgr) {
        this.__className = "sap.viz.scale.ColorShapeScale";

        this._defaultShape = 'squareWithRadius';
        this._defaultColor = '#748cb2';
        this._colorScales = [];
        this._shapeScale = null;
        this._semanticColorScale = null;
        this._bindingFields = null;
        this._items = [];
        this._markMgr = markMgr;
    };

    /**
     * Add color scale needing merge.
     *
     * @param scale Color scale data model
     */
    ColorShapeScaleMerger.prototype.addColorScale = function(scale) {
        this._colorScales.push(scale);
    };

    /**
     * Set semantic color scale needing merge.
     *
     * @param scale Color scale
     */
    ColorShapeScaleMerger.prototype.setSemanticColorScale = function(scale) {
        this._semanticColorScale = scale;
    };

    /**
     * Set shape scale needing merge.
     *
     * @param scale shape scale
     */
    ColorShapeScaleMerger.prototype.setShapeScale = function(scale) {
        this._shapeScale = scale;
    };

    /**
     * Obtain the item count of merge result.
     *
     * @return count
     */
    ColorShapeScaleMerger.prototype.getLength = function() {
        return this._items.length;
    };

    /**
     * Obtain the item of merge result by index.
     *
     * @param i index
     * @return item
     */
    ColorShapeScaleMerger.prototype.getItem = function(i) {
        return this._items[i];
    };

    ColorShapeScaleMerger.prototype.items = function() {
        return this._items;
    };
    
    /**
     * Set customized context.
     */
    ColorShapeScaleMerger.prototype.setContext = function(index, context) {
        if (index < this.getLength() && context) {
            this._items[index].context = context;
        }
    };
    
    /**
     * Obtain binding fields to build legend title.
     *
     * @return meta data of color scale data model
     */
    ColorShapeScaleMerger.prototype.getBindingFields = function() {
        return this._bindingFields;
    };

    /**
     * To execute merging.
     */
    ColorShapeScaleMerger.prototype.merge = function(defaultShape, ignoreNoValue, data) {
        var colorLegendItems = this._mergeColorShape(ignoreNoValue, data);
        
        var colorItemsShape = commonColorLegendItemShape(colorLegendItems);
        var semanticDefaultShape = colorItemsShape || defaultShape ||
            (this._shapeScale && this._shapeScale.scale.getRange()[0]) || this._defaultShape;
        
        var items = [];
        if (this._semanticColorScale && !this._semanticColorScale._hideSemanticLegend) {
            items = this._mergeSemanticStyleShape(semanticDefaultShape, colorLegendItems.length);
        }
        
        items = items.concat(colorLegendItems);
        this._items = items;
    };
    

    function mergetContext(a, b) {

        var result = {}, ctx1, ctx2 = {};
        var key;
        for (key in a) {
            if (a.hasOwnProperty(key)) {
                //Consider the case that the user feeds the same filed to color & shape
                if(TypeUtils.isExist(result[key]) && result[key] !== a[key]) {
                    ctx1 = result;
                    ctx2[key] = a[key];
                    result = {and:[ctx1, ctx2]};
                }
                else {
                    result[key] = a[key];
                }
            }
        }

        for (key in b) {
            if (b.hasOwnProperty(key)) {
                //Consider the case that the user feeds the same filed to color & shape
                if(TypeUtils.isExist(result[key]) && result[key] !== b[key]) {
                    ctx1 = result;
                    ctx2[key] = b[key];
                    result = {and:[ctx1, ctx2]};
                }
                else {
                    result[key] = b[key];
                }
            }
        }
        return result;
    }
    //current color & shape has number value or not. 
    function hasValue(color, shape, dataModel){
        var bValue = false, i,j,cIndex;
        if(dataModel.timeAxis){
            var sLen = dataModel.shape.rowArray.length;
            for( i = 0; !bValue && i < color.length; ++i){
                cIndex = color[i];
                for(j = 0; !bValue && j < shape.length; ++j){
                    bValue = dataModel.series[cIndex * sLen + shape[j]].some(function(e){
                        return e.valueAxis != null;
                    });
                }
            }
        }else{
            var valueAxis = dataModel.valueAxis.values;
            var valueAxis2 = dataModel.valueAxis2.values;
            for( i = 0; !bValue && i < color.length; ++i){
                cIndex = color[i];
                for(j = 0; !bValue && j < shape.length; ++j){
                    bValue = ScaleUtils.hasNoNullValue(valueAxis[cIndex][shape[j]], valueAxis2[cIndex][shape[j]]);
                }
            }
        }
        return bValue;
    }
    ColorShapeScaleMerger.prototype._mergeColorShape = function(ignoreNoValue, dataModel) {

        var shapeScale = this._shapeScale == null ? null : this._shapeScale.scale;
        var shapeScaleDomain = shapeScale == null ? [] : shapeScale.getDomain();
        var hasShapeFeed = shapeScaleDomain.length !== 0;
        var fallbackColor = this._defaultColor;

        if (hasShapeFeed === false && this._colorScales.length === 0) {
            return [];
        }

        var tmpDomain = [],
            tmpRange = [],
            range = [],
            contextArr = [],
            mndIndex = null;
        var i, len, prop, k;

        var filterNoValueFn = function(row) {
            return !row.isNoValue;
        };
        for (k = 0; k < this._colorScales.length; k++) {
            var colorScaleData = this._colorScales[k];
            var scaleIndex = colorScaleData.scale._colorId === "color" ? 0 : 1;

            var hasColorFeed = true;
            var colorScaleDomain = [];

            if (colorScaleData == null ||
                colorScaleData.scale == null) {
                hasColorFeed = false;
            } else {
                // when customer don't bind color scale, ScaleManager will add a ColorScale without domain
                // to render in plot. But because we delete auto MND feature, legend will disappear.
                colorScaleDomain = DataUtils.getDomain(colorScaleData);

                if (colorScaleDomain.length === 0) {
                    hasColorFeed = false;
                    fallbackColor = colorScaleData.scale.getRange()[0] || fallbackColor;
                }
            }

            if (!hasColorFeed && !hasShapeFeed) {
                continue;
            }
            // bubble & scatter
            if (hasColorFeed && hasShapeFeed) {
                var colorRange = _getRange(colorScaleData.scale);
                var shapeRange = _getRange(shapeScale); 
                var colorContextArr = ContextBuilder.getBindingContext(colorScaleData);
                var shapeContextArr = ContextBuilder.getBindingContext(this._shapeScale);
                for(i = 0; i < colorScaleDomain.length; ++i){
                    var colorValue = colorScaleDomain[i];
                    for(var j = 0; j < shapeScaleDomain.length; ++j){
                        // When ignoreNoValue is true, 
                        // we should filter color/shape that has no valueAxis or valueAxis2 at all. 
                        if(!ignoreNoValue ||
                                hasValue(colorValue.oriIndex, shapeScaleDomain[j].oriIndex, dataModel)){
                            tmpDomain.push(colorValue.concat(shapeScaleDomain[j]));
                            range.push({color: colorRange[i], shape: shapeRange[j]});
                            contextArr.push(mergetContext(colorContextArr[i], shapeContextArr[j]));
                        }
                    }       
                }
               



            } else if (hasColorFeed && !hasShapeFeed) {

                // some simple chart as column/bar/line and so on
                tmpDomain = tmpDomain.concat(colorScaleDomain);
                tmpRange = _getRange(colorScaleData.scale);
                var defaultShapeRange;
                var shape;
                if(this._shapeScale && this._shapeScale.scale){
                    defaultShapeRange = this._shapeScale.scale.getRange();
                }
                var defaultShape = (defaultShapeRange && defaultShapeRange.length > 0) ?
                            defaultShapeRange[0] : this._defaultShape;
                var rowArray = colorScaleData.rowArray ? (ignoreNoValue ?
                    colorScaleData.rowArray.filter(filterNoValueFn) : colorScaleData.rowArray) : undefined;
                for (i = 0, len = colorScaleDomain.length; i < len; i++) {
                    var seriesIndex = i;
                    mndIndex = rowArray && rowArray[i] && rowArray[i].mndIndex;
                    var curRange = tmpRange[i];
                    shape = this._markMgr.getShape(mndIndex, scaleIndex, seriesIndex) ||  defaultShape;
                    var rangeVal, seriesShape;

                    if(TypeUtils.isPlainObject(curRange)){
                        if (curRange.pattern && curRange.color) {
                            range.push({
                                color: curRange.color,
                                pattern: curRange.pattern,
                                shape: shape
                            });                            
                        }
                    }else{
                        rangeVal = {
                            color: tmpRange[i],
                            shape: shape
                        };
                        if(this._markMgr.getSeriesShape){
                            seriesShape = this._markMgr.getSeriesShape(mndIndex, scaleIndex, seriesIndex);
                            if(seriesShape){
                                rangeVal.seriesShape = seriesShape;
                            }
                        }
                        range.push(rangeVal);
                    }
                }
                contextArr = contextArr.concat(this.getBindingContextFromColorScale(colorScaleData));
            } else {
                // bubble & scatter can draw without color scale
                tmpDomain = tmpDomain.concat(shapeScaleDomain);
                tmpRange = _getRange(shapeScale);
                for (i = 0, len = shapeScaleDomain.length; i < len; i++) {
                    range.push({
                        color: fallbackColor,
                        shape: tmpRange[i]
                    });
                }

                contextArr = contextArr.concat(ContextBuilder.getBindingContext(this._shapeScale));
            }
        }

        // not dual & only one mnd & have dimension item, delete mnd item
        var result = checkMndStatus(this._colorScales, hasShapeFeed, tmpDomain);

        if (result.isOnlyOneMndValue) {
            for (i = 0; i < tmpDomain.length; i++) {
                tmpDomain[i].splice(result.mndIndex, 1);
            }
        }

        this._createBindingField(result);
        var realDomain = [];
        for(i = 0; i < tmpDomain.length; ++i){
            if(TypeUtils.isPlainObject(tmpDomain[i])){
                for(prop in tmpDomain[i]){
                    if(tmpDomain[i].hasOwnProperty(prop)){
                        realDomain.push([tmpDomain[i][prop]]);
                    }
                }
              
            }else{
                realDomain.push(tmpDomain[i]);
            }   
        }
        

        return realDomain.map(function(domainData, index) {
            var ret = range[index];
            var context = contextArr[index];
            var domain = {
                data: domainData,
                color: ret.color,
                shape: ret.shape,
                context: context
            };
            if (ret.pattern) {
                domain.pattern = ret.pattern;
            }
            if(ret.seriesShape){
                domain.seriesShape = ret.seriesShape;
            }
            return domain;
        });
    };

    function makeUnique(arr){
        var dict = {};
        var result = [];
        for(var i = 0; i < arr.length; ++i){
            var item = arr[i];
            if(!dict[item.id]){
                dict[item.id] = item;
                result.push(item);
            }
        }
        return result;
    }

    ColorShapeScaleMerger.prototype.getBindingContextFromColorScale = function(colorScaleData){
        var name2IdTable = null;
        if(this._isBullet){
            name2IdTable = {};
            var addToTable = function(key){
                if(this._bindingInfo[key] && this._bindingInfo[key].metaData){
                    this._bindingInfo[key].metaData.forEach(function(e){
                        name2IdTable[e.name] = e.id;
                    });
                }
            }.bind(this);

            addToTable("actualValues");
            addToTable("forecastValues");
            addToTable("additionalValues");
        }
        return ContextBuilder.getBindingContext(colorScaleData, name2IdTable);
    };

    /**
     * Create title information for non-semantic style.
     *
     * @param result {mndIndex, isOnlyOneMndValue}
     */
    ColorShapeScaleMerger.prototype._createBindingField = function(result) {

        var bindingFields = [], len, domain;

        if (this._colorScales != null && this._colorScales.length !== 0 ) {
            var mndValues = [];
            var metadata, i, j, item;
            for(i = 0; i < this._colorScales.length; ++i){
                metadata = this._colorScales[i].metaData;
                if(metadata){
                    len = metadata.length;
                    domain = DataUtils.getDomain(this._colorScales[i]);
                    if(domain.length > 0 && len > domain[0].length){
                        len = domain[0].length;
                    }
                    for (j = 0; j < len; ++j) {
                        item = metadata[j];
                        if (item.id === MND) {
                            // Make a copy since we need to change it.
                            item = ObjectUtils.extend({}, item);
                            mndValues = mndValues.concat(item.values);
                        }
                        bindingFields.push(item);
                    }
                }
            }
            bindingFields = makeUnique(bindingFields);

            for(i = bindingFields.length - 1; i >= 0; --i){
                item = bindingFields[i];
                if(item.id === MND){
                    // if has only one mnd value, delete title "All Measure"
                    if (result.isOnlyOneMndValue) {
                        bindingFields.splice(i, 1);
                    }else{
                        item.values = mndValues;
                    }
                    break;
                }
            }
        }

        if (this._shapeScale != null &&
            this._shapeScale.length !== 0 &&
            this._shapeScale.metaData != null) {
            len = this._shapeScale.metaData.length;
            domain = DataUtils.getDomain(this._shapeScale);
            if(domain.length > 0 && len > domain[0].length){
                len = domain[0].length;
            }
            bindingFields = bindingFields.concat(this._shapeScale.metaData.slice(0, len));
        }

        this._bindingFields = bindingFields;
    };

    function getSemanticContext(rules, additionalRule, isOther){
        var context = rules;
        if(isOther){
            if(rules.length === 0){
                context = "*";
            } else {
                context = {
                    'not': context
                };
            }
        }
        if(additionalRule){
            context = {
                'and': [
                    additionalRule,
                    context
                ]
            };
        }
        return context;
    }


    ColorShapeScaleMerger.prototype._mergeSemanticStyleShape = function(defaultShape, colorItemNum) {
        var reItems;
        var i;

        var shapeScale = this._shapeScale == null ? null : this._shapeScale.scale;

        var shapeScaleDomain = shapeScale == null ? [] : shapeScale.getDomain();
        var hasShapeFeed = shapeScaleDomain.length !== 0;

        var domain = [];
        var range = [];

        // create binding field
        if(colorItemNum <= 0) {
            //if we have display both colorItems and semanticItems, we do not change bindingFields
            this._bindingFields = [{
                name: langManager.get("IDS_SEMANTIC_DEFAULT_TITLE")
            }];
        }

        var rules, hasOthers;
        // bubble & scatter
        if (hasShapeFeed) {
            domain = _getCartesian(this._semanticColorScale.getDomain(), shapeScaleDomain, function(a, b) {
                return [a].concat(b);
            });

            range = _getCartesian(_getRange(this._semanticColorScale),
                _getRange(shapeScale), function(a, b) {
                    return {
                        color: a.color || DEFAULT_PATTERN_COLOR,
                        pattern: a.pattern,
                        shape: b
                    };
                });

            rules = this._semanticColorScale.getRules();
            var shapeContextArr = ContextBuilder.getBindingContext(this._shapeScale);
            // cross multiply rule
            var cartesianRules = _getCartesian(rules, shapeContextArr, function(a, b) {
                return {
                    rule: a,
                    additionalRule: b
                };
            });

            hasOthers = this._semanticColorScale.hasValidOthers();
            var shapeIndex = 0;
            reItems = domain.map(function(domainItem, index) {
                var ret = range[index];
                if (hasOthers && index >= domain.length - shapeContextArr.length) {
                    return {
                        data: domainItem,
                        color: ret.color,
                        pattern: ret.pattern,
                        shape: ret.shape,
                        context: getSemanticContext(rules, shapeContextArr[shapeIndex++], true)
                    };
                } else {
                    return {
                        data: domainItem,
                        color: ret.color,
                        pattern: ret.pattern,
                        shape: ret.shape,
                        context: getSemanticContext(cartesianRules[index].rule, cartesianRules[index].additionalRule)
                    };
                }
            });
        } else {
            domain = this._semanticColorScale.getDomain();
            var tmpRange = _getRange(this._semanticColorScale);
            var value;

            for (i = 0; i < tmpRange.length; i++) {
                var color = tmpRange[i].color;
                if (!color && tmpRange[i].pattern) {
                    color = DEFAULT_PATTERN_COLOR;
                }
                value = {
                    color: color,
                    pattern: tmpRange[i].pattern,
                    shape: defaultShape
                };
                //For line/combination's semantic color
                if(tmpRange[i].seriesShape){
                    if(tmpRange[i].lineColor){
                        value.lineColor = tmpRange[i].lineColor;
                    }
                    if(tmpRange[i].lineType){
                        value.lineType = tmpRange[i].lineType;   
                    }
                    value.seriesShape = tmpRange[i].seriesShape;
                    if (value.seriesShape === "line" && (value.lineType || value.lineColor) &&
                        value.pattern !== "noFill") {
                        // do not apply pattern in line legend item
                        value.pattern = null;
                    }
                }
                range.push(value);
            }

            rules = this._semanticColorScale.getRules();
            hasOthers = this._semanticColorScale.hasValidOthers();

            reItems = domain.map(function(domainItem, index) {

                var ret = range[index];

                if (hasOthers && index === domain.length - 1) {
                    value = {
                        data: domainItem,
                        pattern: ret.pattern,
                        shape: ret.shape,
                        context: getSemanticContext(rules, null, true)
                    };
                } else {
                    value = {
                        data: domainItem,
                        pattern: ret.pattern,
                        shape: ret.shape,
                        context: getSemanticContext(rules[index])
                    };
                }
                if(ret.seriesShape){
                    value.color = ret.color;
                    if(ret.lineColor){
                        value.lineColor = ret.lineColor;
                    }
                    if(ret.lineType){
                        value.lineType = ret.lineType;   
                    }
                    value.seriesShape = ret.seriesShape;
                }else{
                    value.color = ret.color || DEFAULT_PATTERN_COLOR;
                }
                return value;
            });
        }
        
        for(i = 0; i < reItems.length; i++) {
            reItems[i].isSemanticItem = true;
        }
        return reItems;
    };
    
    var commonColorLegendItemShape = function(colorLegendItems) {
        var commonShape = null;
        if(colorLegendItems && colorLegendItems.length > 0) {
            //if all the items has the same shape, we set it to commonShape
            var firstShape = colorLegendItems[0].shape;
            var allthesame = true;
            for(var i = 0; i < colorLegendItems.length; i++) {
                if(firstShape !== colorLegendItems[i].shape) {
                    allthesame = false;
                    break;
                }
            }
            
            if(allthesame) {
                commonShape = firstShape;
            }
        }
        return commonShape;
    };

    function checkMndStatus(colorScaleDatas, hasShapeFeed, tmpDomain) {
        var result = {isOnlyOneMndValue: false, mndIndex: -1};        
        // if dual, return false
        if (colorScaleDatas.length !== 1 || hasShapeFeed === true || tmpDomain.length === 0) {
            return result;
        }

        var metaData = colorScaleDatas[0].metaData;
        return DataUtils.checkMndStatus(metaData, tmpDomain);
    }

    var _getCartesian = function(base, target, mergeFunc) {

        var result = [];

        for (var i = 0; i < base.length; i++) {
            for (var j = 0; j < target.length; j++) {
                result.push(mergeFunc(base[i], target[j]));
            }
        }
        return result;
    };

    var _getRange = function(scale) {
        var tmpRange = scale.getRange();
        var range = tmpRange.concat([]);
        var domain = scale.getDomain();
        var i, len;
        if (range.length < domain.length) {
            len = tmpRange.length;
            for (i = len; i < domain.length; i++) {
                range.push(tmpRange[i % len]);
            }
        }
        return range.splice(0, domain.length);
    };

    return ColorShapeScaleMerger;
});

define('sap/viz/framework/customization/VizModelInfo',['sap/viz/framework/common/util/TypeUtils', 
        'sap/viz/framework/scale/ColorShapeScaleMerger',
        'sap/viz/framework/common/util/DataUtils'], 
        function (TypeUtils, ColorShapeScaleMerger, DataUtils) {


    var mapping = {
        'categoryLabels' : {
            id : ['categoryAxis'],
            needContext:true
        },
        'colorLegendItems' : {
            id : ['color','color2'],
            needContext:true
        },
        'valueAxisDomain' : {
            id : ['valueAxis']
        },
        'valueAxis2Domain' : {
            id : ['valueAxis2']
        },
        'timeAxisDomain': {
            id : ['timeAxis']
        },
        'dataPoints' : {
            id : ['dataPoints'],
            needContext :true
        },
        'sizeLegendDomain' : {
            id : ['bubbleWidth']
        }
    };
        
    var VizModelInfo = {};

    var DIMENSION_DISPLAYNAME = DataUtils.DIMENSION_DISPLAYNAME;
    var DIMENSION_VALUE = DataUtils.DIMENSION_VALUE;

    var DIMENSION_KEYS = [DIMENSION_VALUE, DIMENSION_DISPLAYNAME];
    
    function handleDisplayAndValue(ctx, name, value){
        if(TypeUtils.isPlainObject(value)){
            var obj = value;
            var keys = Object.keys(obj);
            var same = keys.every(function(key){
                return DIMENSION_KEYS.indexOf(key) > -1;
            });
            if(same){
                ctx[name] = obj[DIMENSION_VALUE];
                ctx[name + "." + DIMENSION_DISPLAYNAME] = obj[DIMENSION_DISPLAYNAME];
            }
        }else{
            ctx[name] = value;
        }
    }
    //TODO: handle .v.d case.
    function buildContext(domain, metadata){
        var emptyDomain = !domain || (domain && domain.length ===0);
        if(emptyDomain || !metadata){
            return [];
        }
        var dataContext = [];
        var len = metadata.length;
        dataContext = domain.map(function(d){
            var ctx = {};
            for(var i = 0; i < len ; i++){
                ctx[metadata[i].id] = d[i];
            }
            return ctx;
        });
        return dataContext;
    }

    function _getDataPointModelInfo(infos, type){
        var dataPoints = infos.dataModel.getDataPoints();
        var ret = null;
        if(dataPoints && dataPoints.length>0){
            ret = {};
            ret[type] = [];
            var getter = null;
            switch (type){
                case "id":
                    getter = function(datapoint){
                        return datapoint.id;
                    };
                    break;
                case "dataContext":
                    getter = function(datapoint){
                        return datapoint.context();
                    };
                    break;
                default:
                    getter =function(){};
            }
            dataPoints.forEach(function(datapoint){
                ret[type].push(getter(datapoint));
            });
        }
        return ret && ret[type]? ret[type]: ret;
    }

    function buildDataPointInfo(infos){
        return _getDataPointModelInfo(infos, 'dataContext');
    }

    function hasModule(config, scales){
        var ret = false;

        var idArray = config.id;

        ret = idArray.some(function(id) {
            return scales.hasOwnProperty(id) && 
                TypeUtils.isFunction(scales[id].getDomain);
        });
        return ret;
    }

    function _findObject(object, value){
        var key = null;
        if(object && value){
            for(var i in object){
                if(object.hasOwnProperty(i)){
                    if(value === object[i]){
                        key = i;
                        break;
                    }
                }
            }
        }
        var ret = null;
        if(key){
            ret ={};
            handleDisplayAndValue(ret, key, value);
        }
        return ret;
    }

    function _buildModuleValue(domain, metadata, needContext){
        var ret = null;
        if(needContext){
            ret = [];
            var contexts = buildContext(domain, metadata);
            var domainValue = null;
            var contextValue = null;
            if(contexts && contexts.length === domain.length){
                for(var i = 0; i < domain.length; i++){
                    domainValue = domain[i];
                    contextValue = contexts[i];
                    ret[i] = [];
                    if(TypeUtils.isArray(domainValue)){
                        var domainValueItem = null;
                        for(var j = 0; j < domainValue.length; j++){
                            var found = null;
                            domainValueItem = domainValue[j];
                            found = _findObject(contextValue, domainValueItem);
                            if(found){
                                ret[i][j] = found;
                            }
                        }
                    }
                }
            }
        }else{
            ret = domain;
        }
        return ret;
    }
    function _getCommonModelInfo(config, scales, infos, needContext, updatedScale) {
        var ret = null;
        var idArray = config.id;

        idArray.forEach(function(id) {
            if (scales.hasOwnProperty(id) && TypeUtils.isFunction(scales[id].getDomain)) {
                var metadata = infos.dataModel[id]().metaData;
                var updated = updatedScale && updatedScale[id] && updatedScale[id].scale;
                var domain =  updated ? updatedScale[id].scale.getDomain() : scales[id].getDomain();
                if(!ret){
                    ret = [];
                }
                var value = _buildModuleValue(domain, metadata, needContext);
                ret = ret.concat(value);
            }
        });
        return ret;
    }

    function _buildColorShapeScale(runtime, colorScales, shapeScale) {
        var semanticMgr = runtime.semanticManager(),
            markMgr = runtime.markManager(),
            defaultMarkerShape = runtime.propertyManager().get('legend.marker.shape'),
            colorShapeScaleMerger;
        if (defaultMarkerShape && !markMgr.locked()) {
            markMgr.setShape(defaultMarkerShape);
        }

        colorShapeScaleMerger = new ColorShapeScaleMerger(markMgr);

        if (semanticMgr.hasDataPointColorStyle()) {
            colorShapeScaleMerger.setSemanticColorScale(semanticMgr.getDataPointColorScale());
        } else {
            for (var index = 0; index < colorScales.length; index++) {
                colorShapeScaleMerger.addColorScale(colorScales[index]);
            }

        }

        if (shapeScale !== null) {
            colorShapeScaleMerger.setShapeScale(shapeScale);
        }

        colorShapeScaleMerger.merge(defaultMarkerShape);

        return colorShapeScaleMerger;
    }

    function buildCommomModelInfo(config, infos, scales, updatedScale) {
        return _getCommonModelInfo(config, scales, infos, config.needContext, updatedScale);
    }

    function buildColorShapeItems(infos, runtime) {
        var colorShapeScale = _buildColorShapeScale(runtime, [infos.dataModel.color()], infos.dataModel.shape());
        var items = colorShapeScale.items();
        return items.map(function(d){
            var arr = [], keys = Object.keys(d.context), i, ctx;
            for(i=0; i<keys.length; i++) {
                ctx = {};
                if (d.context.hasOwnProperty(keys[i])) {
                    ctx[keys[i]] = d.context[keys[i]];
                    arr.push(ctx);
                }
            }
            return arr;
        });
    }

    VizModelInfo.createInfo = function(infos, runtime, updatedScale){
        updatedScale = updatedScale || null;
        var vizModelInfo = {};

        var scales = infos.scales;
        for(var i in mapping){
            if(mapping.hasOwnProperty(i)){
                if(i === "dataPoints"){
                    vizModelInfo[i] = function(){
                        return buildDataPointInfo(infos);
                    };
                } else if(i == "colorLegendItems" && scales.shape) {
                    vizModelInfo[i] = function(){
                        return buildColorShapeItems(infos, runtime);
                    };
                } else{
                    var config = mapping[i];

                    if(hasModule(config, scales)){
                        vizModelInfo[i] = function(){
                            var config = arguments[0];
                            var updatedScale = arguments[1];
                            return buildCommomModelInfo(config, infos, scales, updatedScale);
                        }.bind(null, config, updatedScale);
                    }
                }
            }
        }
        //TODO: do we need to add data point's info also?

        return vizModelInfo;
    };

    return VizModelInfo;

});

define('sap/viz/framework/customization/VizRenderInfo',['sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/RuleUtil'
], function(TypeUtils, RuleUtil) {

    var VizRenderInfo = {};

//    var lengthOfObj = function(Obj) {
//        var count = 0;
//        for (var key in Obj) {
//            if (Obj.hasOwnProperty(key)) {
//                count++;
//            }
//        }
//        return count;
//    };
//
//    var matchCtx = function(targetCtx, ctx) {
//        var isSubCtx = function(targetCtx, ctx) {
//            if (lengthOfObj(targetCtx) > lengthOfObj(ctx)) {
//                return RuleUtil.matchCondition(targetCtx, ctx);
//            }else{
//                return RuleUtil.matchCondition(ctx, targetCtx);
//            }
//        };
//
//        if(ctx&&ctx.or){
//            var temp = targetCtx;
//            targetCtx = ctx;
//            ctx = temp;
//        }
//
//        if ((targetCtx && targetCtx.or) || ctx&&ctx.or) {
//            for (var i = 0; i < targetCtx['or'].length; i++) {
//                if (isSubCtx(targetCtx['or'][i], ctx)) {
//                    return true;
//                }
//            }
//        } else {
//            return isSubCtx(targetCtx, ctx);
//        }
//        return false;
//    };
//
//    var queryContext = function(graphicModel, ctx) {
//        var retCtx = [];
//        var context = [];
//        if (TypeUtils.isArray(graphicModel)) {
//            for (var m = 0; m < graphicModel.length; m++) {
//                context = queryContext(graphicModel[m], ctx);
//                if (TypeUtils.isArray(context) ? context.length > 0 : context) {
//                    retCtx.push(context);
//                }
//            }
//        } else if (TypeUtils.isPlainObject(graphicModel)) {
//            for (var key in graphicModel) {
//                if (graphicModel.hasOwnProperty(key)) {
//                    if (key === "dataContext") {
//                        if (matchCtx(ctx, graphicModel[key])) {
//                            return graphicModel;
//                        }
//                        break;
//                    }
//                }
//            }
//            return null;
//        }
//        return retCtx;
//    };
//
//    var queryBuilder = function(dataModel, graphicModel, moduleKey){
//        return function(key,ctx){
//            var graphicModelValue = key ? graphicModel.get(moduleKey+"." +key): graphicModel.get(moduleKey);
//            if(!ctx){
//                return graphicModelValue;
//            }else{
//                return queryContext(graphicModelValue, ctx);
//            }
//        };
//    };

    //Seperate add query function on each sub module's model.
    VizRenderInfo.createInfo = function(dataModel, graphicModel, chartView) {
        graphicModel.setChartView(chartView);
        var modules = graphicModel.exposedModules();
        var vizRenderInfo = {};
        modules.forEach(function(module) {
            vizRenderInfo[module] = graphicModel.get(module);
        });
        return vizRenderInfo;
    };

    return VizRenderInfo;

});
define('sap/viz/framework/common/util/StatusConstants',[], function Setup() {
    return {
        LOCALE_CHANGED : {
            name : "localeChanged",
            description: "Locale is changed."
        }
    };
});    
define('sap/viz/framework/core/ChartAppAddtionalFactory',[], function() {
    var AddtionalFactory = {};
    var funcs = [];
    AddtionalFactory.register = function(chartType, funName, func) {
        funcs.push({chartType:chartType,  
            funName: funName, 
            func:func});
    };
    AddtionalFactory.getAddFunc = function(chartType, funName) {
        var func = null;
        for(var i = funcs.length - 1; !func && i >= 0; --i){
            var item = funcs[i];
            if(item.chartType && chartType.indexOf(item.chartType) >= 0 && 
                item.funName && (item.funName === funName)){
                func = item.func;
            }
        }
        return func;
    };
    return AddtionalFactory;
});
define('sap/viz/framework/interaction/utils/PlotZoomUtils',[
    "sap/viz/framework/common/util/NumberUtils",
    'sap/viz/framework/common/util/Constants'
], function(NumberUtils, Constants) {
    var utils = {
        ZOOM_CONTAINER_CLASS: "v-zoom-plot"
    };

    function niceNum(n) {
        return parseFloat(n.toPrecision(2));
    }

    function geometricSeq(lo, hi, nSteps, min) {
        var r = Math.pow(hi / lo, 1 / nSteps),
            seq = [lo], last = lo, next;
        if (!isNaN(min) && r < min) {
            r = min;
        }

        for (var i = 1; i <= nSteps; i++) {
            next = niceNum(lo * Math.pow(r, i));
            if (next !== last) {
                seq.push(next);
                last = next;
            }
        }

        return seq;
    }

    /** Zoom levels are predefined, ordered zoom ratio values. */
    var ZoomLevel = (function(exp) {
        /**
         * Find the neighboring values in a sorted array for a specific number
         *
         * @param arr an array of numbers, in ascending order
         * @param n number to search for
         *
         * @return [l, r] where l and r are the values in the array next to the given number
         *         to the left and right respectively;
         *         or null if the number is not in the range of the values
         *
         * @example arr = [10, 20, 30, 40],
         *          neighbors(arr, 20) --> [10, 30]
         *          neighbors(arr, 25) --> [20, 30]
         *          neighbors(arr, 90) --> null
         */
        function neighbors(arr, n) {
            var lo = 0,
                hi = arr.length,
                l, r, mid, curr;
            if (n > arr[hi-1]) {
                return [arr[hi-1], n];
            }
            if (n < arr[lo]) {
                return [n, arr[lo]];
            }
            while (hi > lo) {
                mid = lo + hi >> 1;
                curr = arr[mid];
                if (n < curr) {
                    hi = mid;
                } else if (n > curr) {
                    lo = mid + 1;
                } else {
                    l = arr[mid - 1] || arr[0];
                    r = arr[mid + 1] || arr[arr.length - 1];
                    return [l, r];
                }
            }
            if (lo === 0 || lo === arr.length) {
                return null;
            } else {
                l = arr[lo - 1];
                r = arr[lo];
                return [l, r];
            }
        }

        function before(val, lo, hi, nSteps, minOffset) {
            if (isNaN(val)) {
                return null;
            } else {
                var ns = neighbors(geometricSeq(lo, hi, nSteps, minOffset), niceNum(val));
                return ns ? ns[0] : null;
            }
        }

        function after(val, lo, hi, nSteps, minOffset) {
            if (isNaN(val)) {
                return null;
            } else {
                var ns = neighbors(geometricSeq(lo, hi, nSteps, minOffset), niceNum(val));
                return ns ? ns[1] : null;
            }
        }

        /**
         * Compute the next zoom ratio to zoom "in"/"out" one level, based on current state
         *
         * @param dir "in" (enlarge) or "out" (shrink)
         * @param curr current zoom ratios for x and y axes
         * @param limit min/max zoom ratios for x and y axes
         * @param nSteps number of steps from min to max
         * @param minOffset minimum difference between each step, will override nSteps when necessary
         * @return ratio values for x and y axes
         */
        exp.zoomInOut = function(dir, curr, limit, nSteps, minOffset) {
            var fn = (dir === "in" ? after : before);
            return {
                x: fn(curr.x, limit.x.min, limit.x.max, nSteps, minOffset),
                y: fn(curr.y, limit.y.min, limit.y.max, nSteps, minOffset)
            };
        };

        return exp;
    })({});
    utils.zoomInOut = ZoomLevel.zoomInOut;

    utils._calcCurrentZoomLevel = function(statusAccessor, nSteps, minOffset) {
        var dir = statusAccessor.get("plot.zoom.direction") || "",
            r = statusAccessor.get("plot.transform.scale"),
            limit = statusAccessor.get("plot.zoom.limit");
        var currentZoomLevel = null, xLevel = null, yLevel = null;

        function computeZoomLevel(r, min, max, nSteps, minOffset) {
            var zoomLevel, zoomSeq;
            if (min === max) {
                zoomLevel = null;
            } else if (r >= max){
                zoomLevel = 1;
            } else {
                zoomSeq = geometricSeq(min, max, nSteps, minOffset);
                if (zoomSeq.length === 1) {
                    zoomLevel = null;
                } else {
                    zoomLevel = niceNum((niceNum(r) - zoomSeq[0]) / 
                        (zoomSeq[zoomSeq.length - 1] - zoomSeq[0]));
                }
            }
            return zoomLevel;
        }

        if (r && limit && statusAccessor.get("plot.zoom.enabled")) {
            if (!nSteps) {
                nSteps = Constants.ZOOM.DEFAULT_ZOOM_LEVEL_STEPS_MOSUSEWHEEL;
            }
            if (!minOffset) {
                minOffset = Constants.ZOOM.DEFAULT_ZOOM_LEVEL_MINOFFSET;
            }

            if ((dir.indexOf("x") > -1) && limit.x.min && limit.x.max) {
                xLevel = computeZoomLevel(r.x, limit.x.min, limit.x.max, nSteps, minOffset);
            }
            if ((dir.indexOf("y") > -1) && limit.y.min && limit.y.max) {
                yLevel = computeZoomLevel(r.y, limit.y.min, limit.y.max, nSteps, minOffset);
            }
            if (xLevel === null) {
                currentZoomLevel = yLevel;
            } else if (yLevel === null) {
                currentZoomLevel = xLevel;
            } else {
                currentZoomLevel = niceNum((xLevel + yLevel) / 2);
            }
        }
        return currentZoomLevel;
    };

    /**
     * Calculate the scroll offset to restore a fixed point to its position before zoom.
     *
     * @param origin coordinates (in global coordinate system) of the point which stays unmoved after zoom
     * @param rBefore zoom ratio of the zoom target before zoom
     * @param rAfter zoom ratio of the zoom target after zoom
     * @param container node containing the zoom target
     * @param scrollOffset offset, top-left of the zoom target relative to the top-left of its parent
     *
     * @return offset value for the top-left of the zoom target relative to the top-left of its parent
     */
    function transToRestoreZoomOrigin(origin, rBefore, rAfter, container, scrollOffset) {
        if (!container) {
            return null;
        }
        var local = container.getBoundingClientRect(),
            rDelta = {
                x: rAfter.x / rBefore.x,
                y: rAfter.y / rBefore.y
            },
            localFixPt;
        if (!origin) {
            localFixPt = {
                x: local.width >> 1,
                y: local.height >> 1
            };
        } else {
            var rx = origin.x - local.left,
                ry = origin.y - local.top;
            localFixPt = {
                x: rx < 0 ? 0 : (rx > local.width ? local.width : rx),
                y: ry < 0 ? 0 : (ry > local.height ? local.height : ry)
            };
        }

        return {
            x: (scrollOffset.x - localFixPt.x) * rDelta.x + localFixPt.x,
            y: (scrollOffset.y - localFixPt.y) * rDelta.y + localFixPt.y
        };
    }

    /**
     * Constraint a ratio {x, y} value within a limit for each direction.
     *
     * @param ratio input ratio
     * @param limit, min/max for both x and y
     * @param direction permitted direction
     * @return {x, y} value restricted within limit and direction. If value is out of limit, it will be
     * given the closest bound value. If the direction is not allowed, it will be given the NaN value.
     */
    function restrictRatio(ratio, limit, direction) {
        var dirs = direction || "";

        return {
            x: dirs.indexOf("x") === -1 ? NaN : NumberUtils.valueInRange(ratio.x, [limit.x.min, limit.x.max]),
            y: dirs.indexOf("y") === -1 ? NaN : NumberUtils.valueInRange(ratio.y, [limit.y.min, limit.y.max])
        };
    }

    

    /**
     * @private
     * Zoom the plot to a specific ratio, fixed at a given point.
     *
     * @param ratio desired zoom ratio, could be a single number for both x and y direction, or a object specifing
     *              them separately
     * @param pos coordinate for fix point for before and after zoom, default is plot center
     * @param node the SVGElement defining the bound of plot view
     * @param statusAccessor getter and setter of status
     */
    utils.applyZoom = function(ratio, pos, node, statusAccessor, runtime, nSteps, minOffset) {
        if (!statusAccessor.get("plot.zoom.enabled") || !node) {
            return;
        }

        var dir = statusAccessor.get("plot.zoom.direction"),
            r0 = statusAccessor.get("plot.transform.scale"),
            trans0 = statusAccessor.get("plot.transform.translate"),
            limit = statusAccessor.get("plot.zoom.limit"),
            r1, trans1;

        if (typeof ratio === "number") {
            ratio = {
                x: ratio,
                y: ratio
            };
        }
        var semanticMgr = runtime? runtime.semanticManager() : null;
        if (semanticMgr){
            semanticMgr.beginSession();
        }
        statusAccessor.set({
            plot: {
                transform: {
                    scale: restrictRatio(ratio, limit, dir)
                }
            }
        });
        r1 = statusAccessor.get("plot.transform.scale");

        trans1 = transToRestoreZoomOrigin(pos, r0, r1, node, trans0);
        statusAccessor.set({
            plot: {
                transform: {
                    translate: trans1
                }
            }
        });
        if (semanticMgr){
            semanticMgr.endSession();
        }
        
        if (runtime) {
            runtime.fireInteractionEvent("saveZoom");
            if (runtime.propertyManager().get("interaction.enableInternalEvents") &&
                runtime._interaction) {
                runtime._interaction._fireExternalEvent("_zoomDetected", {
                    name: "_zoomDetected",
                    data: {
                        currentZoomLevel: this._calcCurrentZoomLevel(statusAccessor, nSteps, minOffset)
                    }
                });
            }
        }
    };

    return utils;
});

define('sap/viz/framework/scale/DynamicScaleRepository',[
], function Setup(
) {
    var scales = {};

    return scales;
});

define('sap/viz/framework/scale/DynamicScaleUtil',[ 
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ArrayUtils',
    'sap/viz/framework/scale/DynamicScaleRepository',
],function(
    TypeUtils,
    ArrayUtils,
    DynamicScaleRepository
){  
    var dynamicScaleUtil = {};

    dynamicScaleUtil.setUpdynamicScale = function(type, propertyMgr, dataModel, runtime, plot){
        var statusManager = runtime.statusManager();
        if(!propertyMgr.get("general.enableScalingFactor")){
            statusManager.remove("dynamicScale");
            return;
        }

        //set default value
        if(!statusManager.has("dynamicScale")){
            statusManager.add("dynamicScale", null);
        }

        type = type.replace("info/", "");
        var utilProcessor = DynamicScaleRepository[type];
        var processor =  new utilProcessor(type, propertyMgr, dataModel, runtime, plot);
        var result =  processor.getdynamicScale();
     
        //add more info to the result
        if(result){
            //save to runtime status
            statusManager.set("dynamicScale", result);
        }else{
            statusManager.remove("dynamicScale");
        }
    };

    return dynamicScaleUtil;  
});
define('sap/viz/framework/export/ExportTooltips',[
    'sap/viz/framework/common/util/ObjectUtils',
    'jquery'
], function(
    ObjectUtils,
    $
) {
    var svgNS = 'http://www.w3.org/2000/svg';
    var textMeasureSvg; 
    var virtualTextClass;

    function textExport(textNode, parentRect, parentG, envManager){
        var textContent = textNode.textContent;
        if (textContent === "" || (textNode.style && (textNode.style.display === "none" ||
            textNode.style.visibility === "hidden"))) {
            return;
        }
        var textAnchor = null;
        if(envManager){
            textAnchor = envManager.textAnchor();
        }
        var textRect = textNode.getBoundingClientRect();
        var textNodeStyle = window.getComputedStyle(textNode, null);
        
        var textClass = textNode.getAttribute("class");
        var svgTextNode = document.createElementNS(svgNS, "text");
        svgTextNode.textContent = textContent;
        
        textMeasureSvg.setAttribute("font-style", textNodeStyle.fontStyle);
        textMeasureSvg.setAttribute("font-family", textNodeStyle.fontFamily);
        textMeasureSvg.setAttribute("font-size", textNodeStyle.fontSize);
        textMeasureSvg.setAttribute("font-weight", textNodeStyle.fontWeight);
        textMeasureSvg.setAttribute("fill", textNodeStyle.color);
        textMeasureSvg.setAttribute("class", textClass);
        textMeasureSvg.setAttribute("text-overflow",textNodeStyle.textOverflow);
        textMeasureSvg.appendChild(svgTextNode);
        
        parentG.setAttribute("font-style", textNodeStyle.fontStyle);
        parentG.setAttribute("font-family", textNodeStyle.fontFamily);
        parentG.setAttribute("font-size", textNodeStyle.fontSize);
        parentG.setAttribute("font-weight", textNodeStyle.fontWeight);
        parentG.setAttribute("fill", textNodeStyle.color);
        parentG.setAttribute("class", textClass);
        parentG.setAttribute("text-overflow",textNodeStyle.textOverflow);
        
        var bbox = svgTextNode.getBBox();
        var dy = bbox.y;
        var positionY = textRect.top - parentRect.top;
        var textWidth = parseFloat(textNodeStyle.width);
        var textOffset = 0;
        if(envManager.isRTL()){
            if(textNodeStyle.textAlign === "left"){
                textOffset = 0;
            }else if(textNodeStyle.textAlign === "middle") {
                textOffset = (textWidth -  bbox.width)/2;
            }else {
                textOffset = textWidth -  bbox.width;
            }
        }
        var positionX = textOffset + textRect.left + parseFloat(textNodeStyle.paddingLeft) - parentRect.left;
        
        var ellipsisReg = /\.{3}$/;
        var hasEllipsis = ellipsisReg.test(textContent);

        if((textClass.indexOf("label") > -1 || hasEllipsis) && envManager.isRTL()){
            var firstPartText;
            var secondPartText; 
            var svgFirstNode = document.createElementNS(svgNS, "text");
            var svgSecondNode = document.createElementNS(svgNS, "text");
            var parseNum = parseFloat(textContent);

            if(hasEllipsis){
                firstPartText = "...";  
                secondPartText = textContent.substring(0, textContent.length-3);
            }else if(isNaN(textContent[0])){
                //isNaN("1") -> false, isNaN("a") -> true 
                // ": label" case
                firstPartText = textContent[textContent.length -1];
                secondPartText = textContent.substring(0, textContent.length-1); 
            } else {
                //parseFloat("25 values selected")  --> 25
                secondPartText = parseFloat(textContent) + "";
                firstPartText = textContent.slice(secondPartText.length);
            }

            svgFirstNode.textContent = firstPartText;
            svgSecondNode.textContent = secondPartText;
            textMeasureSvg.appendChild(svgFirstNode);
            textMeasureSvg.appendChild(svgSecondNode);
            
            var bboxFirst = svgFirstNode.getBBox();
            var bboxSecond = svgSecondNode.getBBox();
         
            svgFirstNode.setAttribute("y", -1 * dy);
            svgFirstNode.setAttribute("transform", "translate(" + positionX  + "," +  positionY +")");

            var secPositionX = positionX + bbox.width - bboxSecond.width;
            svgSecondNode.setAttribute("y", -1 * dy);
            svgSecondNode.setAttribute("transform", "translate(" + secPositionX +  "," +  positionY +")");
            if(textAnchor){
                svgFirstNode.setAttribute("text-anchor", textAnchor);
                svgSecondNode.setAttribute("text-anchor", textAnchor);
            }
            parentG.appendChild(svgFirstNode);
            parentG.appendChild(svgSecondNode);
        }else{
            svgTextNode.setAttribute("y", -1 * dy);
            svgTextNode.setAttribute("transform", "translate(" + positionX + "," +  positionY +")");
            if(textAnchor){
                svgTextNode.setAttribute("text-anchor", textAnchor);
            }
            parentG.appendChild(svgTextNode);
        }
    }

    return function(parentNode, parentSVG, envManager){
        parentSVG.setAttribute("text-rendering", "geometricPrecision");
        parentSVG.setAttribute("shape-rendering", "crispEdges");
        
        var defs = document.createElementNS(svgNS, "defs");
        parentSVG.appendChild(defs);

        var containerG = parentSVG.appendChild(document.createElementNS(svgNS, "g"));
        var container = parentNode.querySelector(".v-m-tooltip");
        var background = container.querySelector(".v-background");
        var containerStyle = window.getComputedStyle(container, null);
        var backgroundStyle = window.getComputedStyle(background, null);

        var backgroundRect = background.getBoundingClientRect();
        var containerRect = parentNode.getBoundingClientRect();
        containerG.setAttribute("transform", "translate(" + (backgroundRect.left-containerRect.left ) + 
                    "," + (backgroundRect.top -containerRect.top) + ")");
        containerG.setAttribute("shape-rendering", "crispEdges");
        containerG.setAttribute("class","v-m-tooltip");

        // shadow
        var backgroundG = containerG.appendChild(document.createElementNS(svgNS, "g"));
        var rectBackgroundG = backgroundG.appendChild(document.createElementNS(svgNS, "rect"));
        rectBackgroundG.setAttribute("width", containerStyle.width);
        rectBackgroundG.setAttribute("height", containerStyle.height);
        rectBackgroundG.setAttribute("fill", backgroundStyle.backgroundColor);
        rectBackgroundG.setAttribute("stroke-width", parseFloat(background.style.borderWidth));
        rectBackgroundG.setAttribute("stroke", background.style.borderColor);
        rectBackgroundG.setAttribute("shape-rendering", "crispEdges");
        rectBackgroundG.setAttribute("rx",parseFloat(background.style.borderRadius));
        rectBackgroundG.setAttribute("ry",parseFloat(background.style.borderRadius));
    
        // Measure Text y position
        textMeasureSvg = document.body.appendChild(document.createElementNS(svgNS, "svg"));
        textMeasureSvg.style.cssText = "position:absolute;top:-1000px;z-index:-9000;width:1px;height:1px";
        virtualTextClass = "v-text-measure-" + ObjectUtils.guid();
        textMeasureSvg.setAttribute("class", virtualTextClass);

        var scrollContainer = parentNode.querySelector(".v-tooltip-mainDiv-scrollable-container");
        var isScrollable = scrollContainer && scrollContainer.scrollHeight > scrollContainer.offsetHeight;

        var table = parentNode.querySelectorAll(".v-tooltip-dimension-measure td");
        for(var tdNode, tdG, len = table.length, i = 0; i < len; i++){
            tdNode = table[i];
            if(isScrollable){
                //check if visible in scroll container
                //there is a small padding, this is a estimation algo 
                //not 100% accurate 
                var MIN_VISIBLE_RATIO = 0.2;
                var upperPadding = 10; 
                var hidenAbove = tdNode.offsetTop + tdNode.offsetHeight * (1 - MIN_VISIBLE_RATIO) < 
                                 scrollContainer.scrollTop + upperPadding;
                var hidenBelow = tdNode.offsetTop + tdNode.offsetHeight * MIN_VISIBLE_RATIO > 
                                 scrollContainer.scrollTop + scrollContainer.offsetHeight;
                if(hidenBelow|| hidenAbove){
                    continue;
                }
            }
            tdG = containerG.appendChild(document.createElementNS(svgNS, "g"));
            textExport(tdNode, backgroundRect, tdG, envManager);
        }

        var separationline = parentNode.querySelector(".v-separationline");
        if(separationline){
            var mainDiv = separationline.getBoundingClientRect();
            var separationStyle = window.getComputedStyle(separationline, null);
            var x2 = mainDiv.width;
            var line = document.createElementNS(svgNS, "line");
            line.setAttribute("x2", x2);
            line.setAttribute("shape-rendering", "crispEdges");
            line.setAttribute("stroke", separationStyle.borderBottomColor);
            line.setAttribute("stroke-width", parseFloat(separationStyle.borderBottomWidth));
            var lineG = containerG.appendChild(document.createElementNS(svgNS, "g"));
            lineG.setAttribute("transform","translate("+ (mainDiv.left + 
                parseFloat(separationStyle.paddingLeft) - backgroundRect.left) +"," + 
                    (mainDiv.top - backgroundRect.top)+ ")");
            lineG.setAttribute("shape-rendering", "crispEdges");
            lineG.appendChild(line);
        }

        var selectedLabel = parentNode.querySelector(".v-footer-label.tooltipfooterlabel");
        if(selectedLabel){
            var selectedLabelG = containerG.appendChild(document.createElementNS(svgNS, "g"));
            textExport(selectedLabel, backgroundRect, selectedLabelG, envManager);
        }
        $("." + virtualTextClass).remove();
    };
});

define('sap/viz/framework/export/ChartExportSVG',[
    "sap/viz/framework/common/util/CSSUtils",
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    "sap/viz/framework/common/log/Logger",
    "sap/viz/framework/core/ChartViewRegistry",
    'sap/viz/framework/export/ExportTooltips'
], function(
    CSSUtils,
    ObjectUtils,
    TypeUtils,
    Logger,
    ChartViewRegistry,
    processTooltip
) {

    var EMPTY_SVG =
        "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"/>";
    var svgNS = 'http://www.w3.org/2000/svg';
    var ChartExportSVG = function(){
    };

    ChartExportSVG.exportToSVGString = function(chartAppInstance, option){
        if (!(chartAppInstance._chartView&&chartAppInstance._chartView._initialized)) {
            Logger.warn("cannot export to svg, the viz has not been initialized.");
            return EMPTY_SVG;
        }
        //100% is not a valid value to export, we need to change to real pixel values.
        var size = {
            width: chartAppInstance._rootElement.style('width'),
            height: chartAppInstance._rootElement.style('height')
        };
        chartAppInstance._rootElement.attr('width', parseFloat(size.width)).attr('height', parseFloat(size
            .height));
        chartAppInstance._rootElement.style('width', '')
            .style('height', '');

        if (this._supportCustomSVG(chartAppInstance._chartView)) {
            return this._getCustomSvg(option, chartAppInstance._chartView);
        }

        var chartSvg = this._getSvgFromDom(chartAppInstance, option);
        var tooltips = chartAppInstance._tooltipContainer &&
                        chartAppInstance._tooltipContainer.querySelector(".v-m-tooltip");

        if(tooltips && tooltips.style.visibility === "visible"){
            var svgDoc = document.implementation.createDocument(svgNS, 'svg', null);
            var tooltipsSvg = chartSvg.appendChild(svgDoc.createElementNS(svgNS,"g"));
            tooltipsSvg.setAttribute("class", "v-m-tooltip-container-" + ObjectUtils.guid());
            var envManager = chartAppInstance._runtime.envManager();
            processTooltip(chartAppInstance._tooltipContainer, tooltipsSvg, envManager);
            if(chartAppInstance._setupRTL()){
                tooltipsSvg.setAttribute("direction", "rtl");
            }
        }


        var svgResultStr = EMPTY_SVG;
        try {
            svgResultStr = new XMLSerializer().serializeToString(chartSvg);
        } catch (e) {
            Logger.error("error on exporting the svg document : ", e.message);
        }

        var clippath = d3.select(chartSvg)[0][0].getElementsByTagName('clipPath');
        var reg;
        for (var num = 0; num < clippath.length; num++) {
            reg = new RegExp(clippath[num].id, "g");
            svgResultStr = svgResultStr.replace(reg, 'clipPath-' + ObjectUtils.guid());
        }

        this._postProcessSvgStr(svgResultStr);

        if(chartAppInstance._customizationModule &&
            TypeUtils.isFunction(chartAppInstance._customizationModule._exportToSVGString)){
            var SVG_END_TAG = '</svg>';
            var endSVGIndex = svgResultStr.lastIndexOf(SVG_END_TAG);
            var coreSVG = svgResultStr.substr(0, endSVGIndex);
            // Once customization support pie/donut chart
            // it should be special to handle the pie/donut customization layer.
            svgResultStr = coreSVG + chartAppInstance._customizationModule._exportToSVGString(option) +
                            SVG_END_TAG;
        }

        // return to original status
        chartAppInstance._rootElement.style('width', '100%').style('height', '100%');

        chartAppInstance._rootElement.attr('width', "100%").attr('height', "100%");

        return svgResultStr;
    };

    ChartExportSVG.supportExportToSVG = function (chartAppInstance) {
        var ret = false;
        // by now we can make sure to support all built in chart types
        if (chartAppInstance._type && chartAppInstance._chartView) {
            ret = this._supportCustomSVG(chartAppInstance._chartView) ||
                chartAppInstance._viewLoaderDelegator.getBindingDefinition(
                    chartAppInstance._type).vender ===
                "sap.viz" ||
                (chartAppInstance._rootElement.node().tagName === 'svg') || ret;
        }
        return ret;
    };

     /**
     * determine if current viz support custom SVG by providing exportContent() and supportExportToContentType function
     * @private
     */
    ChartExportSVG._supportCustomSVG = function (chartView) {
        return chartView && TypeUtils.isFunction(chartView.supportExportToContentType) &&
            chartView.supportExportToContentType("svg");
    };

    ChartExportSVG._getSvgFromDom = function (chartAppInstance, option) {
        var svg;
        try {
            svg = chartAppInstance._rootElement.node().cloneNode(true);
        }
        catch (err) {
            if (!svg) {
                // the Safari bug seems similar to the old (2013) bug in Webkit:
                // bugs.webkit.org/show_bug.cgi?id=112270. The fix will generate a CSP log / report.
                // To remove this if Safari does fix the "cloneNode" issue.
                var rootENote = chartAppInstance._rootElement.node();
                var iHtml = rootENote.innerHTML;
                svg = document.createElement('svg');
                svg.innerHTML = iHtml;
                for (var iRoot = 0; iRoot < rootENote.attributes.length; iRoot++) {
                    var attrib = rootENote.attributes[iRoot];
                    if (attrib.name !== "style") {
                        svg.setAttribute(attrib.name, attrib.value);
                    } else {
                        CSSUtils.setDOMStyle(svg, attrib.value);
                    }
                }
            }
        }
        var guid = ObjectUtils.guid("sap-viz");
        // add svg namespace
        // set namespace to avoid generate "ns1:href"
        svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', 'http://www.w3.org/2000/svg');
        svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink');

        // add chart class to the svg
        d3.select(svg).attr("class", guid + " " +  chartAppInstance._rootElement.attr("class"));

        // wrokaround for chromium min font size rendering
        d3.select(svg).attr("text-rendering", "geometricPrecision");

        // remove tooltip if any
        d3.select(svg).selectAll(".v-m-tooltip").remove();

        // remove zoom and reset button when exporting to svg
        d3.select(svg).selectAll(".v-geo-zoom-btn").remove();
        d3.select(svg).selectAll(".v-geo-reset-control").remove();

        // remove rectangle highlight
        d3.select(svg).selectAll("rect.v-select-indicator").remove();

        // remove axis if necessray
        if (option && option.hideAxis) {
            d3.select(svg).select(".v-m-main .v-m-yAxis").remove();
            d3.select(svg).select(".v-m-main .v-m-yAxis2").remove();
            d3.select(svg).select(".v-m-main .v-m-xAxis").remove();
            d3.select(svg).select(".v-m-main .v-m-xAxis2").remove();
            d3.select(svg).select(".v-m-main .v-m-zAxis").remove();
        }

        // remove legend and title if necessary
        // [workaround] resize the width/height of the svg and plot
        var svgWidth = d3.select(svg).attr("width"),
            svgHeight = d3.select(svg).attr("height");
        if (option && option.hideTitleLegend) {
            if (!d3.select(svg).select(".v-m-legendGroup .v-bound").empty()) {
                svgWidth = svgWidth - d3.select(svg).select(".v-m-legendGroup .v-bound").attr(
                    "width");
                d3.select(svg).select(".v-m-legendGroup").remove();
            }

            if (!d3.select(svg).select(".v-m-title .v-bound").empty()) {
                svgHeight = svgHeight - d3.select(svg).select(".v-m-title .v-bound").attr(
                    "height");
                d3.select(svg).select(".v-m-title").remove();
            }
            d3.select(svg).attr("width", svgWidth).attr("height", svgHeight);
            // hard-code the plot at the position when there is no title and
            // legend
            d3.select(svg).select(".v-m-main").attr("transform", "translate(24, 24)");
            d3.select(svg).select(".v-backgroundutil .v-background-body").attr("width",
                svgWidth);
            d3.select(svg).select(".v-backgroundutil .v-background-body").attr("height",
                svgHeight);
        }

        // scale if necessary
        if (option && option.width && option.height) {
            d3.select(svg).attr("width", option.width);
            d3.select(svg).attr("height", option.height);
            d3.select(svg).attr("viewBox", "0 0 " + svgWidth + " " + svgHeight);
        }

        // add external css as inline css
        var externalCss = "";
        if (sap && sap.bi && sap.bi.framework &&
            sap.bi.framework.getService(chartAppInstance._type, "*sap.viz.impls")) {
            var services = sap.bi.framework.getService(chartAppInstance._type, "*sap.viz.impls");
            var i = 0,
                cssDeclarations;
            for (; i < services.length; i++) {
                if (services[i] && services[i].viz &&
                    services[i].viz[0] &&
                    services[i].viz[0].id === chartAppInstance._type && services[i].cssString) {
                    externalCss = services[i].cssString;
                    break;
                }
            }
            //Use new extension's placeHolder
            if(!externalCss){
                externalCss = ChartViewRegistry.getExternalCSS(chartAppInstance._type);

                if (externalCss && externalCss.cssRules) {
                    var cssString="", rules, j;
                    rules = externalCss.cssRules;
                    for (j=0;j<rules.length;j++) {
                        cssString += rules.item(j).cssText;
                    }
                    externalCss = cssString;
                }
            }
        }
        if (externalCss) {
            d3.select(svg).append("style").text(externalCss);
        }

        return svg;

    };

    ChartExportSVG._postProcessSvgStr = function(svgStr){
        // fix the bug in IE
        var subSvgLength = svgStr.search('>') + 1;
        var subSvgStr = svgStr.substr(0, subSvgLength);
        // Transform 'NS1:xmlns:xlink' to 'xmlns:xlink' in IE
        var reg = /\w+:\w+:\w+/g;
        subSvgStr = subSvgStr.replace(reg, function (item) {
            var word = item.split(':');
            return word[1] + ':' + word[2];
        });

        // Clear empty URI of Non-default namespace declarations in IE
        reg = /\s\S*:NS\S*/g;
        subSvgStr = subSvgStr.replace(reg, '');

        svgStr = subSvgStr + svgStr.substr(subSvgLength);
        //fix the 'feMerge' bug in network chart by removing them
        reg = /<feMerge>.*<\/feMerge>/g;
        svgStr = svgStr.replace(reg, '');

        if (svgStr.indexOf("xmlns:xlink") < 0) {
            reg = /svg/i;
            svgStr = svgStr.replace(reg, function (str) {
                return str + " xmlns:xlink=\"http://www.w3.org/1999/xlink\"";
            });
        }

        //Remove <feGaussianBlur/>
        reg = /<feGaussianBlur[^(\/>)]*\/>/g;
        svgStr = svgStr.replace(reg, '');

        return svgStr;
    };

    ChartExportSVG._getCustomSvg = function(options, chartView) {
        return chartView && TypeUtils.isFunction(chartView.exportContent) &&
            chartView.exportContent(ObjectUtils.extend(true, {
                type: "svg"
            }, options)) || EMPTY_SVG;
    };
    return ChartExportSVG;

});
define('sap/viz/framework/common/util/TitleUtil',[
    'sap/viz/framework/common/lang/LangManager'
],
    function Setup(LangManager) {
        var TitleUtil = {
            getTextShow : function(titleText) {
                var text = titleText == null ? LangManager.get('IDS_DEFAULTCHARTTITLE') : titleText;
                return text;
            }
        };
        return TitleUtil;

    });
define('sap/viz/framework/core/ChartApp',[
    'jquery',
    'sap/viz/framework/common/template/TemplateManager',
    'sap/viz/framework/scale/ScaleManager',
    'sap/viz/framework/binding/BindingManager',
    'sap/viz/framework/interaction/Interaction',
    'sap/viz/framework/core/Runtime',
    'sap/viz/framework/common/util/UADetector',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/FeedingZoneUtil',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ComboExShapeUtil',
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/core/BaseApp',
    "sap/viz/framework/property/PropertyManager",
    "sap/viz/framework/common/effect/EffectManager",
    "sap/viz/framework/common/semantic/SemanticManager",
    "sap/viz/framework/common/mark/MarkManager",
    "sap/viz/framework/event/EventDispatcher",
    "sap/viz/framework/common/log/Logger",
    'sap/viz/framework/common/util/NumberUtils',
    "sap/viz/framework/core/ChartViewRegistry",
    'sap/viz/framework/chartmodel/DataModelManager',
    'sap/viz/migrate/scaleMigrator',
    'sap/viz/framework/customization/CustomizationManager',
    'sap/viz/framework/customization/CustomizationFactory',
    'sap/viz/framework/customization/CustomizationUtils',
    'sap/viz/framework/customization/VizInstanceInfo',
    'sap/viz/framework/customization/VizModelInfo',
    'sap/viz/framework/customization/VizRenderInfo',
    'sap/viz/framework/binding/bindingValidationUtil',
    "sap/viz/framework/common/util/StatusConstants",
    "sap/viz/framework/common/util/Constants",
    'sap/viz/framework/core/ChartAppAddtionalFactory',
    "sap/viz/framework/chartmodel/GraphicModel",
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/framework/common/util/VersionComparator',
    'sap/viz/framework/common/util/TimeUtil',
    'sap/viz/framework/common/util/FiscalUtil',
    'sap/viz/framework/extension/ExtensionUtils',
    'sap/viz/framework/interaction/utils/PlotZoomUtils',
    "sap/viz/framework/chartmodel/ContextBuilder",
    "sap/viz/framework/common/util/ArrayUtils",
    "sap/viz/framework/scale/DynamicScaleUtil",
    "sap/viz/framework/export/ChartExportSVG",
    "sap/viz/framework/common/util/TitleUtil"
], function (
    jQuery,
    TemplateManager,
    ScaleManager,
    BindingManager,
    Interaction,
    Runtime,
    UADetector,
    ObjectUtils,
    FeedingZoneUtil,
    TypeUtils,
    ComboExShapeUtil,
    oo,
    BaseApp,
    PropertyManager,
    EffectManager,
    SemanticManager,
    MarkManager,
    EventDispatcher,
    Logger,
    NumberUtils,
    ChartViewRegistry,
    DataModelManager,
    scaleMigrateUtil,
    CustomizationManager,
    CustomizationFactory,
    CustomizationUtils,
    VizInstanceInfo,
    VizModelInfo,
    VizRenderInfo,
    bindingValidationUtil,
    StatusConstants,
    Constants,
    ChartAppAddtionalFactory,
    GraphicModel,
    LangManager,
    FunctionUtils,
    DataUtils,
    VersionComparator,
    TimeUtil,
    FiscalUtil,
    ExtensionUtils,
    PlotZoomUtils,
    ContextBuilder,
    ArrayUtils,
    DynamicScaleUtil,
    ChartExportSvg,
    TitleUtil
) {

    "use strict";

    var id = 0;
    var USER_LEVEL = Constants.PROPERTY.USER_LEVEL;

    function generateAppId() {
        return 'UIComp_' + id++;
    }

    var ZOOM_CONTAINER_CLASS = "v-zoom-plot";

    var ChartApp = function (viewLoaderDelegator) {

        ChartApp.superclass.constructor.call(this);

        this._chartAppId = generateAppId();
        this._type = null;
        this._data = null;
        this._bindings = null;
        this._templateId = null;
        this._events = null;
        this._properties = null;
        this._scales = null;
        this._userSettingScales = null;
        this._sharedRuntimeScales = null;

        this._rootContainer = null;
        this._tooltipContainer = null;

        this._chartView = null;
        this._rootElement = null;
        this._interaction = null;

        this._dataRole = null;

        this._dispatchCache = {};
        this._viewLoaderDelegator = viewLoaderDelegator;

        this._propertyMgr = new PropertyManager();
        // Allow (only) get/set core chart properties
        this._propertyMgr.flag(Constants.PROPERTY_FLAGS.CORE);

        var valueStack = this._propertyMgr.valueStack();
        if (valueStack.indexOf("customizeValue") === -1) {
            valueStack.unshift("customizeValue");
            this._propertyMgr.valueStack(valueStack);
            this._propertyMgr.defaultValueAttr("value");
        }

        this._effectMgr = new EffectManager();
        this._dataModelManager = new DataModelManager(viewLoaderDelegator);
        this._markMgr = new MarkManager();
        this._scaleMgr = new PropertyManager();
        this._zoneMgr = new PropertyManager();
        this._statusMgr = new PropertyManager();
        this._statusMgr.add({
            "languageDirection": Constants.DIRECTION.LTR,
            "interaction.holdSelection": false,
            "hasCustomization": false,
            "chartAppId": this._chartAppId,
            "customizationsId": null,
            "timeLevels": [],
            "data.unit": null
        });

        this._semanticMgr = new SemanticManager();
        this._semanticMgr.setDependency(this._propertyMgr, this._statusMgr);

        this._evtDisp = new EventDispatcher();
        this._graphicModel = new GraphicModel();

        this._scaleMgr.watch("dataFrame", this.onFrameScaleChange.bind(this));
        this._runtime = new Runtime(this._propertyMgr, this._effectMgr, this._semanticMgr,
            this._markMgr, this._scaleMgr.proxy(), this._zoneMgr.proxy(), this._evtDisp, this._statusMgr,
            this._dataModelManager, this._graphicModel, this._envMgr);

        var statusMgr = this._statusMgr, runtime = this._runtime, that = this;
        statusMgr.add("zoomInOut", {
            get : function() {
                return statusMgr.get('plot.zoom');
            },
            set : function(options) {
                if (arguments.length > 0 && options && options.target === "plotArea" && that._container) {
                    var zoomEnabled = statusMgr.get('plot.zoom.enabled');
                    if (zoomEnabled) {
                        statusMgr.set("zooming", true);
                        var currR = statusMgr.get('plot.transform.scale'),
                        limit = statusMgr.get('plot.zoom.limit'),
                        r = PlotZoomUtils.zoomInOut(options.direction, currR, limit,
                            Constants.ZOOM.DEFAULT_ZOOM_LEVEL_STEPS, Constants.ZOOM.DEFAULT_ZOOM_LEVEL_MINOFFSET);
                        PlotZoomUtils.applyZoom(r, null, that._container.querySelector("." + ZOOM_CONTAINER_CLASS),
                                statusMgr, runtime, Constants.ZOOM.DEFAULT_ZOOM_LEVEL_STEPS,
                                Constants.ZOOM.DEFAULT_ZOOM_LEVEL_MINOFFSET);
                    }
                }
            }
        });

        this._propertyZone.call(this);
        this._feedingZone.call(this);

        this._dataModel = null;
        this._dataChanged = false;
        this._bindingChanged = false;
        this._scalesChanged = false;
        this._propertiesChanged = false;
        this._sizeChanged  = false;
        this._allChanged = false;

        /* for customizations */
        this._customizationId = null;
        this._customizationTimerID = null;
        this._customizationModule = null;
        this._customInteractionContainer = null;
        this._customOverlayContainer = null;
        this._vizInstanceInfo = null;

    };

    oo.extend(ChartApp, BaseApp);

    /**
     * Obtain current chart size.
     * Override super class method.
     */
    ChartApp.prototype._getCurrentSize = function() {
        if (!this._chartView) {
            return null;
        }

        return this._chartView.getSize();
    };

    ChartApp.prototype._getDataRange = function(start, end){
        return this._chartView._getDataRange(start, end);
    };

    /**
     * Obtain current chart size.
     * Override super class method.
     */
    ChartApp.prototype._setCurrentSize = function (sizeInfo) {
        // add 'updatedScaleValue' for customization ahead of resize chart.
        if(this._customizationModule){
            this._runtime.statusManager().add('updatedScaleValue', null);
        }
        this._chartView.setSize(sizeInfo);
    };

    ChartApp.prototype._getChanges = function () {

        return {
            dataChanged: this._allChanged || this._dataChanged,
            bindingChanged: this._allChanged || this._bindingChanged,
            scalesChanged: this._allChanged || this._scalesChanged,
            propertiesChanged: this._allChanged || this._propertiesChanged,
            sizeChanged: this._allChanged || this._sizeChanged,
        };

    };

    ChartApp.prototype._resetChanges = function () {
        this._dataChanged = false;
        this._bindingChanged = false;
        this._scalesChanged = false;
        this._propertiesChanged = false;
        this._sizeChanged = false;
        this._allChanged = false;
    };

    /**
     * This handler will be occurred when size is changed.
     * Override super class method.
     */
    ChartApp.prototype._onSizeChange = function(sizeInfo) {
        var chartView = this._chartView;

        this._rootContainer.style('width', sizeInfo.width + "px")
            .style('height', sizeInfo.height + "px");
        this._statusMgr.set('interaction.holdSelection', true);

        this._rootElement.style('width', '100%').style('height', '100%').style('display', 'block');
        this._rootElement.attr('width', "100%").attr('height', "100%").style('display', 'block');

        if(this._tooltipContainer){
            this._tooltipContainer.setAttribute("actualWidth", sizeInfo.width);
            this._tooltipContainer.setAttribute("actualHeight", sizeInfo.height);
        }
        if(this._customOverlayContainer){
            this._customOverlayContainer.style('width', '0').style('height', '0');
            this._customOverlayContainer.attr('width', "0").attr('height', "0");
        }
        if(this._customInteractionContainer){
            this._customInteractionContainer.style('width', '0').style('height', '0');
            this._customInteractionContainer.attr('width', "0").attr('height', "0");
        }

        this._sizeChanged = true;


        var changes = this._getChanges();

        if(chartView.changes){
            chartView.changes(changes);
        }

        var options = {};
        options.isSizeChanged = true;
        if(this._isRenderable()) {
            chartView.render(this._rootElement, options);
        }
        else {
            chartView._dispatchInitialized();
        }

        if(this._customizationModule){
            this._graphicModel.setChartSize(this.size());
            this._renderCustomization();
        }
        this._eventScreenReadForNonInteractive();
    };

    /**
     * Get or set the chart type of chart app.
     *
     * @param type {String} chart type
     * @return chart type / ChartApp instance
     */
    ChartApp.prototype.type = function (type) {
        if (arguments.length === 0) {
            return this._type;
        }
        if (this._semanticMgr){
            this._semanticMgr.setChartType(type);
        }
        this._type = type;
        return this;
    };

    /**
     * Get or set the data of chart app.
     *
     * @param data
     * @return data / ChartApp instance
     */
    ChartApp.prototype.data = function (data) {
        if (arguments.length === 0) {
            return this._data;
        }
        if (this._dataModelManager) {
            this._dataModelManager.clear();
        }
        if (this._semanticMgr){
            this._semanticMgr.setDataset(data);
        }
        this._data = data;
        return this;
    };

    /**
     * Get or set the events of chart app.
     *
     * @param events
     * @return events / ChartApp instance
     */
    ChartApp.prototype.events = function (events) {
        if (arguments.length === 0) {
            return this._events;
        }

        this._events = events;
        return this;
    };

    ChartApp.prototype.getDescription = function () {
        return {
            type: this.type(),
            classId: this._container.id
        };
    };
    /**
     * Get or set the bindings of chart app.
     *
     * @param bindings
     * @return bindings / ChartApp instance
     */
    ChartApp.prototype.bindings = function (bindings) {
        if (arguments.length === 0) {
            return this._bindings;
        }

        this._bindings = bindings;

        // if change feeding, initialize data model object
        if (this._dataModelManager) {
            this._dataModelManager.clear();
        }
        return this;
    };

    /**
     * Get the currently used template id or switch to a specific template without changing global template
     * if the template is blank or not found, the template id is kept but chart will fallback to global template
     * template is serializable
     * @param {String} id
     */
    ChartApp.prototype.template = function (id) {
        if(id !== undefined){
            this._templateId = id;
            this._effectMgr.setTemplateId(id);
            return this;
        }
        return this._templateId;
    };

    ChartApp.prototype._cleanCustomizations = function () {
        if(this._customizationModule){
            this._customizationModule._destroy();
            if(this._customOverlayContainer){
                this._customOverlayContainer.remove();
            }
            this._customOverlayContainer = null;

            if(this._customInteractionContainer){
                this._customInteractionContainer.remove();
            }
            this._customInteractionContainer = null;
            this._customizationId = null;
            this._customizationModule = null;
            this._vizInstanceInfo = null;

            if(this._customizationTimerID){
                window.clearTimeout(this._customizationTimerID);
                this._customizationTimerID = null;
            }

            this._propertyMgr.reset("customizeValue");
        }
    };

    ChartApp.prototype._setupCustomizations = function (customizations) {
        this._customizationId = customizations.id;
        var moduleClazz = CustomizationManager.get(this._customizationId);

        if (moduleClazz == null) {
            FunctionUtils.logWarnning(LangManager.getLogMessage('IDS_ERROR_CUSTOMIZATION_ID',
                    customizations.id, this.type()));
            return;
        }
        this._customizationModule = CustomizationFactory.create(moduleClazz);
        this._runtime.statusManager().set("hasCustomization", true);
        this._runtime.statusManager().set("customizationsId", this._customizationId);

        var me = this;

        this._customizationTimerID = null;
        this._customizationModule._reRenderVizInstance = function(){
            if(!me._customizationTimerID){
                me._customizationTimerID = window.setTimeout(function (){
                    me.render();
                    me._customizationTimerID = null;
                }, 0);
            }
        };

        this._customizationModule._init({
            // chart infos
            chartAppId: this._chartAppId,
            customizationsId: this._customizationId,
            getVizInstanceInfo: function (){
                return me._getVizInstanceInfo();
            },
            getBehaviorType: function () {
                var props = me.properties();
                if(props && props.interaction && props.interaction.behaviorType){
                    return props.interaction.behaviorType;
                }
            },
            // overlayContainer, interactionContainer, vizModelInfo, vizRenderInfo & chartContainerNode
            // is not created until chart rendered.
            getOverlayContainer: function (){
                return me._customOverlayContainer && me._customOverlayContainer.node();
            },
            getInteractionContainer: function (){
                return me._customInteractionContainer && me._customInteractionContainer.node();
            },
            getVizModelInfo: function () {
                return me._getCustomizationDataInfo();
            },
            getVizRenderInfo: function () {
                return me._getCustomzationRenderInfo();
            },
            getChartContainerNode: function () {
                return me._rootContainer && me._rootContainer.node();
            }
        });
    };

    /**
     * Get or set the customizations of chart app.
     *
     * @param customizations
     * @return customizations / ChartApp instance
     */
    ChartApp.prototype.customizations = function (customizations) {
        if (arguments.length === 0 || !TypeUtils.isExist(customizations)) {
            //get
            if(this._customizationModule){
                return {
                    id : this._customizationId,
                    customOverlayProperties : this._customizationModule._customOverlayProperties.get() || null,
                    customRendererProperties : this._customizationModule._getCustomRendererProperties(),
                    customInteractionProperties : this._customizationModule._customInteractionProperties.get() || null

                };

            }
            return {
                id:null,
                customOverlayProperties:null,
                customRendererProperties:null,
                customInteractionProperties:null
            };
        } else if( customizations.hasOwnProperty("id") && customizations.id == null ) {
            //clean the customization;
            this._cleanCustomizations();
            return this;

        } else if( customizations.hasOwnProperty("id") ) {
            //Id must exist, otherwise do nothing.
            if (!CustomizationUtils.isSupported(customizations.id, this.type())){
                FunctionUtils.logWarnning(LangManager.getLogMessage('IDS_ERROR_CUSTOMIZATION_ID',
                    customizations.id, this.type()));
                return this;
            }

            if (this._customizationId !== customizations.id){
                // _customizationId will set null in clean and set as new id in setup
                this._cleanCustomizations();
                this._setupCustomizations(customizations);
            }
        }

        if(this._customizationModule){
            this._customizationModule._setProperties(customizations);
        }
        return this;
    };

    /**
     * Get or set the states of chart app.
     *
     * @param states
     * @return states / ChartApp instance
     */
    ChartApp.prototype.states = function (states) {
        var statusMgr = this._statusMgr;
        if (arguments.length === 0 || TypeUtils.isString(states)) {
            return this._chartView ? statusMgr.get.apply(statusMgr, arguments) : this._states;
        }
        this._states = states;
        statusMgr.set(states);
        return this;
    };

    /**
     * Get or set the properties of chart app.
     * When options.level is "user" and options.replace is truthy, reset/clean-up all user-set properties first.
     * Then set properties if it exists.
     * Finally return the current properties. If options.level is "user", only return user-set properties.
     *
     * @param {Object} [properties]
     * @param {Object} [options] - {level : 'user', replace : true/false}
     * @return {Object} - properties
     */
    ChartApp.prototype.properties = function (properties, options) {
        var propMgr = this._propertyMgr.proxy();
        // clear flags to allow access custom properties
        propMgr.flag(0);
        // Do reset
        if(options && options.level === USER_LEVEL && options.replace === true){
            propMgr.reset();

            // Also remove all user-added properties
            propMgr.flag(Constants.PROPERTY_FLAGS.CUSTOM);
            propMgr.names().forEach(propMgr.remove, propMgr);
            propMgr.flag(0);

            // color palette is also saved in scale manager, so need to reset it too.
            // FIXME: should this be put in migration tool?
            this._scaleMgr.reset();
        }

        // Do set
        if(TypeUtils.isPlainObject(properties) &&
                (arguments.length === 1 || (options && options.level === USER_LEVEL))){

            this._properties = properties;
            //FIXME: Hard coded here,
            //to set behavior type first because it would affect the content in property manager.
            if (properties && properties.interaction &&
                properties.interaction.behaviorType !== undefined) {
                propMgr.set("interaction.behaviorType",
                    properties.interaction.behaviorType);
            }

            //TODO: need to avoid doing any setting job when this is used as a get function
            propMgr.set(properties);
        }
        // For backward compatibility
        if(arguments.length === 1){
            return this;
        }
        // Do get
        // After renderred, obtain properties from property manager
        if(this._chartView){
            var strictMode = options && options.level === USER_LEVEL;
            return propMgr.get('', 'value', strictMode) || {};
        }
        // Return user-set properties if not renderred yet.
        return this._properties;
    };

    /**
     * Get serialized properties.
     *
     * @return serialized properties
     */
    ChartApp.prototype.serializeProps = function () {
        var props = this._propertyMgr.proxy();
        // clear flags to allow serialize custom properties
        props.flag(0);
        return props.serialize();
    };

    /**
     * Get serialized customization graphic information.
     *
     * @return serialized customization graphic information.
     */
    ChartApp.prototype.serializeCustomization = function () {
        if(this._customizationId && this._customizationModule){
            return {
                id : this._customizationId,
                version: CustomizationUtils.getBundleVersion(this._customizationId),
                customOverlayProperties : this._customizationModule._customOverlayProperties.serialize() || null,
                customRendererProperties: this._customizationModule._getCustomRendererProperties(),
                customInteractionProperties: this._customizationModule._customInteractionProperties.serialize() || null,
            };
        }
    };

    /**
     * Get or set the scales of chart app.
     *
     * @param scales
     * @return scales / ChartApp instance
     */
    ChartApp.prototype.scales = function (scales, options) {
        var scaleMgr = this._scaleMgr;
        var chartAppCtx = this;

        // Do reset
        if(options && options.level === USER_LEVEL && options.replace === true){
            scaleMgr.reset();
            this._propertyMgr.reset('plotArea.colorPalette');
            this._propertyMgr.reset('plotArea.primaryValuesColorPalette');
            this._propertyMgr.reset('plotArea.secondaryValuesColorPalette');
            this._propertyMgr.reset('plotArea.startColor');
            this._propertyMgr.reset('plotArea.endColor');
            this._propertyMgr.reset('plotArea.nullColor');
            this._propertyMgr.reset('plotArea.primaryScale');
            this._propertyMgr.reset('plotArea.secondaryScale');
            this._propertyMgr.reset('plotArea.legendValues');
            this._propertyMgr.reset('plotArea.shapePalette');
            this._propertyMgr.reset('plotArea.actualColor');
            this._propertyMgr.reset('plotArea.additionalColor');
            this._propertyMgr.reset('plotArea.forecastColor');
        }

        // Do set
        var isBullet = this._type.indexOf("bullet") > -1;
        if (TypeUtils.isArray(scales) &&
                (arguments.length === 1 || (options && options.level === USER_LEVEL))) {
            this._userSettingScales = ObjectUtils.clone(scales, true);
            scales.forEach(function(scale){
                if (!TypeUtils.isExist(scale)) {
                    return;
                }
                if(isBullet && scale.feed === 'valueAxis'){
                    scale = ObjectUtils.clone(scale);
                    scale.feed = "actualValues";
                }

                if(FiscalUtil.isFiscal(chartAppCtx._data) && scale.feed === 'timeAxis') {
                    scale.start = FiscalUtil.fiscalToQuantity(scale.start, chartAppCtx._propertyMgr);
                    scale.end = FiscalUtil.fiscalToQuantity(scale.end, chartAppCtx._propertyMgr);
                }
                scaleMgr.add(scale.feed);
                scaleMgr.set(scale.feed, scale);
            });
            var dataModel = this._dataModelManager.getDataModel();
            if (dataModel) {
                dataModel.setNeedRefreshScale(true);
            }
        }
        // For backward compatibility
        if(arguments.length === 1){
            return this;
        }
        // Do get
        var strictMode = options && options.level === USER_LEVEL;
        var currentScales = scaleMgr.get('', 'value', strictMode) || {};
        // transform to an array and filter out unwanted scales
        var resultScales = [];

        for(var scaleName in currentScales){
            if(currentScales.hasOwnProperty(scaleName)){
                var scale = currentScales[scaleName];
                if(TypeUtils.isExist(scale) &&
                        scaleName !== 'sharedRuntime' &&
                        !(scaleName === 'dataFrame' && scale.domain && scale.domain.length === 0)) {
                    if (FiscalUtil.isFiscal(this._data) && scaleName === "timeAxis" &&
                        this._userSettingScales && this._userSettingScales[scaleName]) {
                        //revert fiscal values
                        resultScales.start = this._userSettingScales[scaleName].start;
                        resultScales.end = this._userSettingScales[scaleName].end;
                    }
                    resultScales.push(scale);
                }
            }
        }
        return resultScales;
    };

    ChartApp.prototype.serializeScales = function () {
        var scaleProps = this._scaleMgr.serialize();
        var resultScales = [],
            i;
        for (i in scaleProps) {
            if (scaleProps.hasOwnProperty(i)) {
                resultScales.push(scaleProps[i]);
            }
        }
        return resultScales;
    };

    /**
     * Get or set the container of chart app.
     *
     * @param container
     * @return container / ChartApp instance
     */
    ChartApp.prototype.container = function (container) {
        if (arguments.length === 0) {
            return this._container;
        }

        if (jQuery && container instanceof jQuery) {
            container = container.get(0);
        }

        this._container = container;
        return this;
    };

    function createChartView(chartApp) {

        var chartView = chartApp._viewLoaderDelegator.getViewInstance(chartApp.type(), chartApp
            ._runtime, chartApp.bindings());
        chartApp._chartView = chartView;

        if (chartApp._events) {
            var eventDispatcher = chartView.getDispatch();
            var events = chartApp._events;

            for (var name in events) {
                if (events.hasOwnProperty(name)) {
                    var handler = events[name].fn;
                    if (handler == null) {
                        continue;
                    }

                    var scope = events[name].scope;
                    if (scope) {
                        handler = handler.bind(scope);
                    }

                    eventDispatcher.on(name, handler);
                }
            }
        }

        return chartView;
    }

    function createInteraction(chartApp, isEnabled) {

        chartApp._tooltipContainer = createDefaultTooltipContainer(chartApp._rootContainer, chartApp._size);

        var context = {
            enabled: isEnabled,
            runtime: chartApp._runtime,
            chartView: chartApp._chartView,
            rootNode: chartApp._rootElement,
            chartType: chartApp.type(),
            dataModelManager: chartApp._dataModelManager,
            scales: chartApp._scales,
            toolTipContainer: chartApp._tooltipContainer,
            rootContainer: chartApp._container
        };

        var interaction = new Interaction(context);
        chartApp._runtime._interaction = interaction;
        return interaction;
    }

    function createDefaultTooltipContainer(rootContainer, size) {
        var toolTipContainer = rootContainer.append("div");
        var width = size.width;
        var height = size.height;
        //Serialize will not pass size width and height, thus use bounding rect instead
        if (!width || !height){
            var rootContainerNode = rootContainer.node();
            var containerRect = rootContainerNode.getBoundingClientRect();
            width = containerRect.width;
            height = containerRect.height;
        }
        toolTipContainer
            .style('left', '0px')
            .style('top', '0px')
            .style('height', '0px')
            .style('width', '0px')
            .style('position', "absolute")
            .attr("class", "v-m-tooltip-container")
            .attr("actualWidth", width)
            .attr("actualHeight", height);
        return toolTipContainer.node();
    }

    function createRootContainer(containerTag, chartAppId) {

        var container = d3.select(containerTag);

        var rootContainer = container.append("div").attr('id', chartAppId);

        rootContainer.style('height', '100%')
            .style('width', '100%')
            .style('position', 'relative')
            .style('font-size', '10px')
            .style('box-sizing', 'border-box')
            .style('-moz-box-sizing', 'border-box')
            .style('-moz-user-select', 'none') // firefox none selecting
            .style('-ms-box-sizing', 'border-box')
            .style('-webkit-box-sizing', 'border-box')
            .style('-webkit-user-select', 'none')
            .style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)');

        rootContainer.attr('class', 'v-info');
        var titleId = getChartTitleId(chartAppId);
        rootContainer.attr('aria-labelledby',titleId);

        return rootContainer;
    }

    function createRootElement(rootContainer, runtime, isDIV) {
        var rootElement;
        if (isDIV) {
            rootElement = rootContainer.append("div").attr('class', 'v-m-root');
        } else {
            rootElement = rootContainer.append("svg").attr('class', 'v-m-root');

            var defsNode = rootElement.select("defs");
            if (!defsNode.node()) {
                defsNode = rootElement.append('svg:defs');
            }

            var titleDesc = rootElement.select("g.v-m-desc-title");
            if (!titleDesc.node()) {
                rootElement.append('g').attr('class', 'v-m-desc-title');
            }

            runtime.effectManager().container(defsNode);
        }
        //we do not set direction, because we use text-anthor:middle to
        //keep language direction neutral
        rootElement.style('left', 0)
        .style('top', 0)
        .style('height', '100%')
        .style('width', '100%')
        .style('display', 'block');

        if (UADetector.isWindowsSurface()) {
            rootContainer.style('touch-action', 'none');
        }
        return rootElement;
    }

    function needResetDataModel(chartApp) {
        var result = false;
        // If the strategy of whether to hide invalid data is changed, need to reset the data model.
        var propMgr = chartApp._propertyMgr;

        var flexibleStackSeries = (chartApp.type() === "info/stacked_column" &&
            propMgr.origin.get("plotArea.series"));

        if (flexibleStackSeries &&
            !ObjectUtils.deepEqual(chartApp._flexibleStackSeries, flexibleStackSeries)) {
            chartApp._flexibleStackSeries = flexibleStackSeries;
            result = true;
        } else {
            var invalidity = propMgr.get('plotArea.dataPoint.invalidity');
            var ignoreNoValue = propMgr.get('legend.ignoreNoValue');

            if (invalidity !== chartApp._dataPointInvalidity) {
                chartApp._dataPointInvalidity = invalidity;
                result = true;
            }

            if (ignoreNoValue !== chartApp._ignoreNoValue) {
                chartApp._ignoreNoValue = ignoreNoValue;
                result = true;
            }

            if (!result) {
                var addtionalDataResetChecking = ChartAppAddtionalFactory.getAddFunc(chartApp.type(),
                    "addtionalDataResetChecking");
                result = addtionalDataResetChecking && addtionalDataResetChecking(chartApp, propMgr);
            }

            if (!propMgr.has("timeAxis.levels")) {
                return result;
            }
            //If minimum time level setting is changed for those who has this property, need to reset data model too.
            var timeLevels;
            var isFiscalChart = FiscalUtil.isFiscal(chartApp._data);

            //TimeUtil is used as levelCtx here. We should use time axis body as levelCtx in Chart components.
            timeLevels = TimeUtil.normalizeLevels(propMgr.get("timeAxis.levels"));

            chartApp._statusMgr.set("timeLevels", timeLevels);
            var minLevel = timeLevels[0];
            if (minLevel !== chartApp._minTimeLevel) {
                chartApp._minTimeLevel = minLevel;
                result = true;
            }
            var showAsUTC = propMgr.get("general.showAsUTC");
            if (showAsUTC !== chartApp._showAsUTC) {
                chartApp._showAsUTC = showAsUTC;
                result = true;
            }
            if (isFiscalChart) {
                var fiscalObj = FiscalUtil.extractFiscalObj(propMgr);
                if (!ObjectUtils.deepEqual(fiscalObj, chartApp._fiscalObj)) {
                    //_fiscalObj is changed. we have to reset data model
                    //reset value and parsedValue.
                    chartApp._fiscalObj = fiscalObj;
                    result = true;
                }
            }
        }

        return result;
    }

    var DATAPOINT_INVALIDITY_BREAK = Constants.DATAPOINT_INVALIDITY.BREAK;
    var DATAPOINT_INVALIDITY_IGNORE = Constants.DATAPOINT_INVALIDITY.IGNORE;

    function createDataAdapter(chartApp, metadata, groupOption) {
        var returns = {};
        // once 'extension' chart has bindings, we need use the binding to generate legend,
        // have to keep crosstable chain
        if (metadata.family === 'extensionChart' ||  (!chartApp._bindings && metadata.family === 'extension')) {
            return {
                dataModel: {
                    _rawData: chartApp._data
                },
                bindings: chartApp._bindings
            };
        }

        var dataModelMgr = chartApp._dataModelManager;

        var currentValue = null;
        var scaleArray = chartApp.scales();

        var needRefresh = needResetDataModel(chartApp) || dataModelMgr.getDataModel() == null ||
        dataModelMgr.getGroupOption().groupData !== groupOption.groupData ||
        dataModelMgr.getGroupOption().respectOrderInGroup !== groupOption.respectOrderInGroup;

        if (needRefresh) {

            dataModelMgr.init(chartApp.type(), chartApp._chartView._renderType, chartApp._data,
                chartApp._bindings, groupOption);
            var propMgr = chartApp._propertyMgr;
            var invalidity = propMgr.get('plotArea.dataPoint.invalidity');
            var hasInValProp = propMgr.has("plotArea.dataPoint.invalidity");
            var levelConfig = propMgr.get("timeAxis.levelConfig");
            var weekConfig = levelConfig && levelConfig.week;
            // The default invalidity value is 'break'
            var breakOnEmptyMeasure = Constants.DATAPOINT_INVALIDITY_SUPPORTED.indexOf(invalidity) <= 0;
            //For other chart who hasnt this property, should use IGNORE.
            //For charts who has this property(timeseries_line for example),
            //would use BREAK if property setting is not qualified.
            var allowEmptyMeasure = hasInValProp && invalidity !== DATAPOINT_INVALIDITY_IGNORE;

            var fiscalObj = null;
            if (FiscalUtil.isFiscal(chartApp._data)) {
                fiscalObj = propMgr;
            }
            var dataOptions = {
                breakOnEmptyMeasure: breakOnEmptyMeasure,
                allowEmptyMeasure: allowEmptyMeasure,
                dataTimeLevel: chartApp._minTimeLevel,
                fiscalObj: fiscalObj,
                showAsUTC: chartApp._showAsUTC,
                weekConfig: weekConfig
            };

            var addtionalCreateDataModelObj = ChartAppAddtionalFactory.getAddFunc(chartApp.type(),
                "addtionalCreateDataModelObj");
            if (addtionalCreateDataModelObj) {
                addtionalCreateDataModelObj(dataOptions, propMgr);
            }

            try {
                dataModelMgr.createDataModel(dataOptions, propMgr);
            } catch(excp){
                //Clear the half finished data model in case it is used without complete creation.
                dataModelMgr.clear();
                throw excp;
            }

            for(var i in scaleArray){
                if(scaleArray[i].feed == 'dataFrame'){
                    currentValue = scaleArray[i].currentValue;
                    break;
                }
            }
        }

        var dataModel = dataModelMgr.filterDataModel(scaleArray, chartApp._propertyMgr);
        var scales = null;

        ComboExShapeUtil.handleComboExShape(chartApp.type(), dataModel,
                         chartApp._runtime.propertyManager(), chartApp._semanticMgr);

        if (dataModel.isNeedRefreshScale()) {
            scales = ScaleManager.create(dataModel,
                                        dataModelMgr.getRole(),
                                        dataModelMgr.getFamily(),
                                        chartApp.type(),
                                        chartApp._runtime,
                                        chartApp._chartView._customerColorPalette,
                                        chartApp._template.isGhost,
                                        chartApp.bindings());
            chartApp._scales = scales;
            if(chartApp._runtime && chartApp._runtime._interaction) {
                chartApp._runtime._interaction._setScales(scales);
            }
            // scale will change dataPoint address, so we need clear dp to rebuild later,
            // otherwise, it will use cached address

            dataModel.setRebuildAddr(!needRefresh);

        } else {
            // if fresh scale is false, skip this time.
            scales = chartApp._scales;
            dataModel.setNeedRefreshScale(true);
        }

        if (currentValue !== null && scales.dataFrame && scales.dataFrame.scale) {
            var index = scales.dataFrame.scale(currentValue);
            dataModel.updateSeriesIndex(index);
        }

        dataModel.buildContext();
        returns.dataModel = dataModel;
        returns.scales = scales;
        if (metadata.family === 'extension') {
            returns.bindings = chartApp._bindings;
        }
        chartApp._statusMgr.set("data.unit", Object.keys(returns.dataModel._bindingResults).reduce(function(map, p) {
            var metadata = dataModel._bindingResults[p].metaData;
            if (metadata) {
                metadata.forEach(function(meta) {
                    if (meta.type === "Measure" && meta.unit) {
                        map[meta.id] = meta.unit;
                    }
                });
            }
            return map;
        }, {}));
        return returns;
    }

    ChartApp.prototype._getCustomizationDataInfo = function(){
        var updatedModel = this._runtime.statusManager().get('updatedScaleValue');
        return VizModelInfo.createInfo(this._dataModel, this._runtime, updatedModel);
    };

    ChartApp.prototype._getCustomzationRenderInfo = function(){
        return VizRenderInfo.createInfo(this._dataModel, this._graphicModel, this._chartView);
    };

    ChartApp.prototype._getVizInstanceInfo = function(){
        if(!this._vizInstanceInfo) {
            this._vizInstanceInfo = VizInstanceInfo.createInfo(this);
        }
        return this._vizInstanceInfo;
    };
    var SCALES_NAME = [ "variance1", "variance2"];
    function hasBinding(bindings,name){
        for(var i = 0; i < bindings.length; ++i){
            if(bindings[i].feed === name){
                return bindings[i].source && bindings[i].source.length;
            }
        }
        return false;
    }
    ChartApp.prototype._getValueScales = function(){
        var results = {};
        var scales = this._scales;
        for(var i = 0; i < SCALES_NAME.length; ++i){
            var scale = scales[SCALES_NAME[i]];
            if(hasBinding(this._bindings, SCALES_NAME[i]) && scale){
                var domain = scale.getDomain();
                results[SCALES_NAME[i]] = {min: domain[0], max: domain[1]};
            }
        }

        var primaryScale = this._propertyMgr.get("plotArea.primaryScale");

        results["valueAxis"] =  {
            min: TypeUtils.isExist(primaryScale.minValue) ? primaryScale.minValue : primaryScale.autoMinValue,
            max: TypeUtils.isExist(primaryScale.maxValue) ? primaryScale.maxValue : primaryScale.autoMaxValue
        };
        return results;

    };

    ChartApp.prototype._createCustomOverlayDom = function(){
        var node = createRootElement(this._rootContainer, this._runtime, true);
        node = node.attr('class',this._rootContainer.node().id+'-custom-overlay v-custom-overlay-Layer');
        node.style('position','absolute');
        node.style('width','0');
        node.style('height','0');
        this._customOverlayContainer = node;
        node.node().parentNode.insertBefore(node.node(), this._tooltipContainer);
    };

    ChartApp.prototype._createCustomInteractionDom = function(){
        var node = createRootElement(this._rootContainer, this._runtime, true);
        node = node.attr('class',this._rootContainer.node().id+'-custom-interaction v-custom-interaction-Layer');
        node.style('position','absolute');
        node.style('width','0');
        node.style('height','0');
        this._customInteractionContainer = node;
        node.node().parentNode.insertBefore(node.node(), this._tooltipContainer);
    };

    ChartApp.prototype._renderCustomization = function () {

        var vizModelInfo = this._getCustomizationDataInfo();
        var renderInfo = this._getCustomzationRenderInfo();

        var changes = this._getChanges();

        if(TypeUtils.isFunction(this._customizationModule._render)){
            this._customizationModule._render(changes, vizModelInfo, renderInfo);
        }

        this._resetChanges();
    };

    ChartApp.prototype._getRootNode = function() {
        var rootElement = this._rootElement;
        return rootElement && rootElement.node();
    };

    /**
     * Create a chart view instance and render chart by chart view logic.
     */
    ChartApp.prototype.render = function (options) {
        var metadata = ChartViewRegistry.getMetadataWithFamily(this._type);
        var family = metadata.family;
        var chartView = this._chartView;
        var isFirstRender;
        if (!chartView) {
            isFirstRender = true;
            chartView = createChartView(this);

            this._rootContainer = createRootContainer(this._container, this._chartAppId);
            this._graphicModel.registerRootContainer(this._rootContainer.node());

            if (chartView.renderTo() === 'DIV' || chartView.renderTo() === 'BorderDIVFlow') {
                this._rootElement = createRootElement(this._rootContainer, this._runtime, true);
            } else {
                this._rootElement = createRootElement(this._rootContainer, this._runtime);
            }
            this._setDefaultSize(!(options && options.disableIntervalSizeCheck));
        }

        var addRTL = this._setupRTL();

        // safe-add properties to include any new properties that user defined
        this._propertyMgr.add(this._properties || {}, true, Constants.PROPERTY_FLAGS.CUSTOM);

        // logic for property template
        this.applyTemplateProperties();

        var isGhost = this._template.isGhost;
        if (this._data && TypeUtils.isFunction(this._data.hasFakeData)){ //prevent when the data is null
            isGhost = isGhost || this._data.hasFakeData();
        }

        this._effectMgr.ghostEffect(isGhost);

        //check if it is emptydataset
        var isRenderable = this._isRenderable();

        var isInteractionEnabled = !isGhost && isRenderable;

        //FIXME: Hard coded here,
        //to set behavior type first because it would affect the content in property manager.
        if (this._properties && this._properties.interaction &&
            this._properties.interaction.behaviorType  !== undefined){
            this._propertyMgr.set("interaction.behaviorType",
                this._properties.interaction.behaviorType);
        }

        var propMgrProxy = this._propertyMgr.proxy();
        // clear flag to allow setting custom properties
        propMgrProxy.flag(0);
        propMgrProxy.set(this._properties);

        this.scales(this._userSettingScales);

        //TODO: Now new modules (plotArea) will be created inside setData, so
        //we have to apply template properties after this,
        //otherwise some properties will be unregistered yet.

        var groupData = this._propertyMgr.get("general.groupData");
        var respectOrderInGroup = this._propertyMgr.get("general.respectOrderInGroup");
        var groupOption = {
            groupData: groupData,
            respectOrderInGroup: respectOrderInGroup
        };

        var data  = createDataAdapter(this, metadata, groupOption);
        this._dataModel = data;
        chartView.setData(data, this.bindings());

        DynamicScaleUtil.setUpdynamicScale(this._type, this._propertyMgr, this._dataModel, this._runtime);

        if(options && options.bNoRender){
            return;
        }
        this._statusMgr.set('interaction.holdSelection', false);

        if(this._customizationModule){
            if(!this._customOverlayContainer){
                this._createCustomOverlayDom();
            }

            if(!this._customInteractionContainer){
                this._createCustomInteractionDom();
            }

            if(addRTL) {
                this._customOverlayContainer.style("direction", "rtl");
                this._customInteractionContainer.style("direction", "rtl");
            }
            else {
                this._customOverlayContainer.style("direction", null);
                this._customInteractionContainer.style("direction", null);
            }

            var vizModelInfo = this._getCustomizationDataInfo();
            var vizModelInfoCopy = ObjectUtils.clone(vizModelInfo);

            var modifiedProperties = this._customizationModule._overrideProperties(vizModelInfoCopy);
            modifiedProperties = this._customizationModule._overrideRendererProperties(modifiedProperties);
            this._propertyMgr.set(modifiedProperties, false, "customizeValue");
        }

        if (isFirstRender) {
            //need to reset some status.
            this._statusMgr.add('zooming', {
                value: false
            });
            if (!TypeUtils.isFunction(chartView.enableInteraction) || chartView.enableInteraction() === true) {
                var interaction = this._interaction = createInteraction(this, isInteractionEnabled);
                var that = this;
                chartView.getDispatch().on("ready.interaction", interaction.initialize.bind(
                    interaction));
                chartView.getDispatch().on("reRenderComplete.interaction", function(){
                    interaction.fireEvent('reRenderComplete');
                });
                this._runtime.eventDispatcher().on("plotScroll.customization", function(){
                    if(that._customizationModule){
                        that._renderCustomization();
                    }
                });
                //Init plotArea.window status after chartview render.
                this._interaction.initializeStatus();
            }
        }

        //Add description for SVG Chart
        if(chartView.renderTo() === 'SVG'){
            this._addChartDescription(this._rootElement, metadata.name);
        }

        var changes = this._getChanges();

        if(chartView.changes){
            chartView.changes(changes);
        }
        // We should make sure interactionService scales is the same as app scales
        if(this._scalesChanged && this._interaction){
            this._interaction._setScales(this._scales);
        }
        if(this._interaction) {
            this._interaction.enabled(isInteractionEnabled);
        }
        if(!isRenderable) {
            if(!isFirstRender) {
                chartView.clear();
            }
            chartView._dispatchInitialized();
        } else {
            chartView.render(this._rootElement, options);
            if(this._interaction &&
                this._propertyMgr.get("interaction.enableInternalEvents")){
                var currentZoomLevel;
                if (!this._statusMgr.get("plot.zoom.enabled")) {
                    currentZoomLevel = null;
                } else {
                    currentZoomLevel = this._statusMgr.get("plot.zoom.currentZoomLevel");
                }
                this._interaction._fireExternalEvent("_zoomDetected", {
                    'name': '_zoomDetected',
                    'data': {
                        currentZoomLevel: currentZoomLevel
                    }
                });
                if (!isFirstRender) {
                    this._interaction._fireExternalEvent("_selectionDetails", {
                        'name': '_selectionDetails',
                        'data': []
                    });
                }
            }
        }

        if(this._customizationModule){
            this._graphicModel.setChartSize(this.size());
            this._renderCustomization();
        }
        this._eventScreenReadForNonInteractive();
        this._resetChanges();
    };

    // for screen reader in non-interactive mode
    ChartApp.prototype._eventScreenReadForNonInteractive = function() {
        if (UADetector.isIE() && this._interaction) {
            this._interaction.fireEvent("focusOnChart", {
                "chartAppId" : this._chartAppId,
                "rootContainer" : this._rootContainer,
                "rootElement" : this._rootElement
            });
        }
    };

    //update property and scale according template
    ChartApp.prototype.applyTemplateProperties = function() {
        // Assume current template must exist? No
        var template = TemplateManager.get(this._templateId);
        var templateProps, templateScales;
        if (template.props) {
            templateProps = template.props(this.type());
        }
        if (template.getScales) {
            templateScales = template.getScales(this.type());
        }
        var propMgr = this._propertyMgr;
        var scaleMgr = this._scaleMgr;
        var isGhost = template.isGhost;
        var chartType = this.type();

        var scales = scaleMigrateUtil.ChartPropsToScalesProps(templateProps, templateScales, this._type);
        scaleMgr.reset('templateValue');
        if (TypeUtils.isExist(scales)) {
            for (var i = 0; i < scales.length; i++) {
                var defaultScale = scaleMgr.getDefault(scales[i].feed);
                scaleMgr.add(scales[i].feed, {
                    serializable: true
                });
                scaleMgr.set(scales[i].feed, ObjectUtils.extend({}, defaultScale, scales[i]), true,
                    'templateValue');
            }
        }
        propMgr.reset('templateValue');
        propMgr.set(templateProps, true, 'templateValue');

        this._template = template;
    };


    var addEventOnChildren = function (parent, typeToCheck, evtType, callBackFunction, dispatchCache) {
        var childrenModule = parent._children;
        var length = childrenModule.length;
        for (var i in childrenModule) {
            if (childrenModule.hasOwnProperty(i)) {
                var child = childrenModule[i];
                if (child.module && child.module.getDispatch()) {
                    var childDispatch = child.module.getDispatch();
                    if (childDispatch[typeToCheck]) {
                        childDispatch.on(evtType, function () {
                            callBackFunction.apply(null, arguments);
                        });
                        if (!dispatchCache[evtType]) {
                            dispatchCache[evtType] = [];
                        }
                        dispatchCache[evtType].push(childDispatch);
                    } else {
                        if (child.module._children) {
                            addEventOnChildren(child.module, typeToCheck, evtType,
                                callBackFunction, dispatchCache);
                        }
                    }
                }
            }
        }
    };

    /**
     * To provide a interface to add event handler.
     *
     * @param evtType {String} event type name
     * @param callback {function} callback handler
     * @param scope {Object} binding target
     */
    ChartApp.prototype.on = function (evtType, callback, scope) {
        var typeToCheck = evtType.split(".")[0];
        var customerDispatch = this._chartView._customerDispatch;

        var plot;

        if(this._chartView._children){
            plot = this._chartView.getChild('plot');
        }

        var plotDispatch = plot && plot.module && plot.module._eventDispatch;
        var dispatch = this._chartView.getDispatch();
        var metadata = ChartViewRegistry.getMetadataWithFamily(this._type);
        var family = metadata.family;
        var callBackFunction;
        if(family && family.indexOf("extension") > -1) {
            callBackFunction = function () {
                var args = arguments;
                setTimeout(function() {
                    callback.apply(scope, args);
                }, 0);
            };
        } else {
            callBackFunction = function() {
                callback.apply(scope, arguments);
            };
        }
        if (customerDispatch && customerDispatch[typeToCheck]) {
            customerDispatch.on(evtType, callBackFunction);
        } else if (plotDispatch && plotDispatch[typeToCheck]) {
            plotDispatch.on(evtType, callBackFunction);
        } else if (dispatch[typeToCheck]) {
            dispatch.on(evtType, callBackFunction);
            if (!this._dispatchCache[evtType]) {
                this._dispatchCache[evtType] = [];
            }
            this._dispatchCache[evtType].push(dispatch);
        } else if (this._interaction) {
            this._evtDisp.on(evtType, callBackFunction);
        } else {
            if (this._chartView && this._chartView._children) {
                addEventOnChildren(this._chartView, typeToCheck, evtType, callBackFunction, this._dispatchCache);
            }
        }

    };

    /**
     * To provide a interface to remove event handler.
     *
     * @param evtType {String} event type name
     */
    ChartApp.prototype.off = function (evtType) {
        var dispatchList = this._dispatchCache[evtType];
        if (dispatchList) {

            var ns = evtType.split(".")[0];

            dispatchList.map(function (item) {
                if (item && item.on && item[ns]) {
                    item.on(evtType, function () {});
                }
            });
        } else if (this._interaction) {
            this._evtDisp.off(evtType);
        }
        delete this._dispatchCache[evtType];
    };

    /**
     * Obtain selected objects from property manager.
     *
     * @return selected objects
     */
    ChartApp.prototype.getSelectedObjects = function () {
        return this._statusMgr.get('interaction.selectedDataPoints');
    };

    ChartApp.prototype.selection = function(){
        return this.getSelectedObjects();
    };
    /**
     * Set selected objects.
     *
     * @param items
     * @param options
     */
    ChartApp.prototype.setSelectedObjects = function (items, options) {
        var config = {
            items: items,
            options: options
        };
        this._statusMgr.set('interaction.selectedDataPoints', config);
        return !!config.success;
    };

    //TOFIX: these two APIs should be replaced by property api.
    ChartApp.prototype.setSelectedPropertyZone = function (items) {
        return this._propertyMgr.set('selectedPropertyZone', items);
    };

    ChartApp.prototype.getSelectedPropertyZone = function () {
        return this._propertyMgr.get('selectedPropertyZone');
    };

    /**
     * To destroy chart app and every child included in chart app.
     */
    ChartApp.prototype.destroy = function () {
        if(this._interaction){
            this._interaction._fireExternalEvent("_selectionDetails", {
                'name': '_selectionDetails',
                'data': []
            }, true);

        }
        ChartApp.superclass.destroy.call(this);

        if (this._rootElement) {
            this._rootElement.remove();
        }
        this._rootElement = null;
        if (this._tooltipContainer && this._tooltipContainer.parentNode) {
            this._tooltipContainer.parentNode.removeChild(this._tooltipContainer);
        }
        this._tooltipContainer = null;

        if (this._rootContainer) {
            this._rootContainer.remove();
        }

        this._cleanCustomizations();

        this._rootContainer = null;
        this._type = null;
        this._data = null;
        this._bindings = null;
        this._properties = null;
        this._container = null;
        this._sharedRuntimeScales = null;

        if (this._chartView) {
            this._chartView.destroy();
        }
        this._chartView = null;
        if (this._scales) {
            for (var i in this._scales) {
                if (this._scales.hasOwnProperty(i)) {
                    if (this._scales[i] != null) {
                        this._scales[i].destroy();
                    }
                }
            }
        }
        this._scales = null;
        this._userSettingScales = null;

        if (this._dataModelManager && this._dataModelManager.destroy) {
            this._dataModelManager.destroy();
        }
        this._dataModelManager = null;

        this._runtime.destroy();
        this._runtime = null;

        if (this._interaction) {
            this._interaction.destroy();
            this._interaction = null;
        }

        this._events = null;
        this._dispatchCache = null;
        this._viewLoaderDelegator = null;

        if (this._propertyMgr) {
            this._propertyMgr.destroy();
        }
        this._propertyMgr = null;

        if (this._effectMgr) {
            this._effectMgr.destroy();
        }
        this._effectMgr = null;

        if (this._semanticMgr) {
            this._semanticMgr.destroy();
        }
        this._semanticMgr = null;

        if (this._markMgr) {
            this._markMgr.destroy();
        }
        this._markMgr = null;

        if (this._scaleMgr) {
            this._scaleMgr.destroy();
        }
        this._scaleMgr = null;

        if (this._zoneMgr) {
            this._zoneMgr.destroy();
        }
        this._zoneMgr = null;

        if (this._statusMgr) {
            this._statusMgr.destroy();
        }
        this._statusMgr = null;

        if (this._envMgr) {
            this._envMgr.destroy();
        }
        this._envMgr = null;

        if (this._graphicModel) {
            this._graphicModel.destroy();
        }
        this._graphicModel = null;

        if (this._evtDisp) {
            this._evtDisp.destroy();
            this._evtDisp = null;
        }
        this._dataRole = null;
        this._flexibleStackSeries = null;
    };

    var bindingValidate = function(type, bindings, data) {
        if (this._viewLoaderDelegator) {
            var bindingDefinition = this._viewLoaderDelegator.getBindingDefinition(type).constructor;
            if (data && data.type && data.type.indexOf('FlatTableDataset') > -1) {
                var metadata = ChartViewRegistry.getMetadataWithFamily(type);
                if (metadata && metadata.family !== 'extension' && metadata.family !== 'extensionChart') {
                    var options = {};
                    options.allowDuplicatedBindings = ChartAppAddtionalFactory.getAddFunc(type,
                        "allowDuplicatedBindings");
                    bindingValidationUtil.acceptable(data, bindingDefinition, bindings, type, options);
                }
            }
        }
    };

    var checkExtensionVersion = function(param) {
        if (param.bundleVersion) {
            var bundleVersion = ExtensionUtils.getBundleVersion(param.type);
            if (VersionComparator.compare(param.bundleVersion, bundleVersion) > 0) {
                Logger.warn(LangManager.getLogMessage('IDS_ERROR_BUNDLE_VERSION_DOES_NOT_MATCH',
                        param.type, param.bundleVersion, bundleVersion));
            }
        }
    };

    var checkCustomizationVersion = function(param) {
        if (param.customizations && param.customizations.version) {
            var bundleVersion = ExtensionUtils.getBundleVersion(param.customizations.id);
            if (VersionComparator.compare(param.customizations.version, bundleVersion) > 0) {
                Logger.warn(LangManager.getLogMessage('IDS_ERROR_BUNDLE_VERSION_DOES_NOT_MATCH',
                        param.customizations.id, param.customizations.version, bundleVersion));
            }
        }
    };

    ChartApp.prototype.init = function (param) {
        checkExtensionVersion(param);
        checkCustomizationVersion(param);
        bindingValidate.call(this, param.type, param.bindings, param.data);
        this.type(param.type);
        this.data(param.data);
        this.bindings(param.bindings);
        this.template(param.template);
        this.properties(param.properties);
        this.container(param.container);
        this.events(param.events);
        this.scales(param.scales);
        this.sharedRuntimeScales(param.sharedRuntimeScales);
        this.size(param.size);
        this.customizations(param.customizations);
        this._allChanged  = true;
    };
    /**
     * Refresh Chart.
     */
    ChartApp.prototype.refresh = function(){
        this.render({});
    };
    /**
     * Update parameters of chart app.
     * e.g. data, property, bindings, scales
     *
     * @param param a object including data, property, bindings, scales information.
     */
    ChartApp.prototype.update = function (param) {
        var data = this._data, bindings = this._bindings, customizationChanged = false,
            sharedRuntimeScalesChanged = false, templateChanged = false,
            scalesChanged;  //For check re-render or not, can't reuse this._scalesChanged
        if (param.bindings) {
            bindings = param.bindings;
        }
        if (param.data) {
            data = param.data;
        }
        bindingValidate.call(this, this._type, bindings, data);

        if (!param || !this._chartView) {
            return;
        }

        if (param.data) {
            this.data(param.data);
            this._dataChanged = true;
        }

        if (param.hasOwnProperty('template')) {
            this.template(param.template);
            templateChanged = true;
        }

        if (param.properties) {
            if(param.hasOwnProperty('propertiesOption')){
                this.properties(param.properties, param.propertiesOption);
            }else{
                this.properties(param.properties);
            }
            if(TypeUtils.isEmptyObject(param.properties) &&
                !(param.propertiesOption && param.propertiesOption.replace === true)){
                this._propertiesChanged = false;
            } else {
                this._propertiesChanged = true;
            }
        }

        if (param.bindings) {
            this.bindings(param.bindings);
            this._bindingChanged = true;
        }

        if (param.scales) {
            if(param.hasOwnProperty('scalesOption')){
                this.scales(param.scales, param.scalesOption);
            }else{
                this.scales(param.scales);
            }
            if(param.scales.length === 0 &&
                !(param.scalesOption && param.scalesOption.replace === true)){
                scalesChanged = false;
            } else {
                scalesChanged = true;
            }
            this._scalesChanged = param.scales;
        }

        if (param.sharedRuntimeScales) {
            this.sharedRuntimeScales(param.sharedRuntimeScales);
            sharedRuntimeScalesChanged = true;
        }

        if (param.customizations){
            this.customizations(param.customizations);
            customizationChanged = true;
        }

        if((param.propertiesOption && param.propertiesOption.isRender === false) ||
            (param.scalesOption && param.scalesOption.isRender === false)){
            return;
        }

        var options;
        if(param && param.data) {
            options = param.data.options;
        }
        options = options || {};
        options.propertiesChanged = this._propertiesChanged;
        options.dataChanged = this._dataChanged;

        if(this._bindingChanged || this._propertiesChanged ||
                this._dataChanged || scalesChanged ||
                sharedRuntimeScalesChanged || customizationChanged || templateChanged){
            this.render(options);
        }
    };

    /**
     * Obtain all feeding zone information.
     *
     * @return feeding zone information
     */
    ChartApp.prototype.getAllFeedingZone = function () {
        return this._propertyMgr.get('feedingZone');
    };

    ChartApp.prototype.feedingZone = function () {
        return this.getAllFeedingZone();
    };

    ChartApp.prototype.propertyZone = function () {
        return this.getPropertyZone();
    };

    ChartApp.prototype._feedingZone = function () {
        var that = this;
        var parseFeedingZone = {
            defaultValue: null,
            readonly: true,
            serializable: false,
            get: function () {
                if(DataUtils.isEmptyDataset(that.data())) {
                    return [];
                }

                var feedingZone = that._zoneMgr.get('tempFeedingZone'),
                    i, j, parseFeedingZone = [];
                if (that._viewLoaderDelegator) {
                    var bindDef = that._viewLoaderDelegator.getBindingDefinition(that._type);
                    for (i in feedingZone) {
                        if (feedingZone.hasOwnProperty(i) && !TypeUtils.isExist(
                                feedingZone[i])) {
                            delete feedingZone[i];
                        }
                    }
                    for (i in feedingZone) {
                        if (feedingZone.hasOwnProperty(i)) {
                            if (i === 'plot') { //plot has all feed def
                                if (TypeUtils.isArray(feedingZone[i])) {
                                    feedingZone[i] = feedingZone[i][0];
                                }

                                if (feedingZone[i]) {
                                    feedingZone[i].bindDef = [];
                                    ChartViewRegistry.getMetadata(that._type).bindings.forEach(
                                        function (e) {
                                            if (e.id !== 'dataFrame') {
                                                feedingZone[i].bindDef.push({
                                                    id: e.id
                                                });
                                            }
                                        });
                                    parseFeedingZone.push(feedingZone[i]);
                                }

                            } else if (i === 'trellisAxis') { //for trellis axis, row, column, category, value
                                for (j in bindDef.constructor) {
                                    if (TypeUtils.isExist(feedingZone[i][bindDef.constructor[
                                            j].id])) {
                                        feedingZone[i][bindDef.constructor[j].id][0].bindDef =
                                            [{
                                                id: bindDef.constructor[j].id
                                            }];
                                    }
                                }
                                for (j in feedingZone[i]) {
                                    if (feedingZone[i].hasOwnProperty(j)) {
                                        parseFeedingZone.push(feedingZone[i][j][0]);
                                    }
                                }
                            } else if((bindDef.family === 'bullet' || bindDef.family === 'tBullet' ) &&
                                        i === "valueAxis"){
                                // In order to keep compatible, we deperate "valueAxis" in binding for bullet,
                                // And we need keep "valueAxis" property works. So we have to hard code here
                                feedingZone[i].bindDef = [{id: "actualValues"}];
                                parseFeedingZone.push(feedingZone[i]);
                            } else {
                                for (j in bindDef.constructor) {
                                    if (i === bindDef.constructor[j].id) {
                                        feedingZone[i].bindDef = [{
                                            id: bindDef.constructor[j].id
                                        }];
                                    }
                                }
                                parseFeedingZone.push(feedingZone[i]);
                            }
                        }
                    }
                    if (FeedingZoneUtil[bindDef.family]) {
                        FeedingZoneUtil[bindDef.family].apply(that, [feedingZone, bindDef.constructor]);
                    }

                    var split = that._type.split('/');
                    var type;
                    if (split.length === 1) {
                        type = that._type;
                    } else {
                        type = split[1];
                    }
                    if (type.indexOf('_') > -1) {
                        type = that._type.split('_')[1];
                    }
                    if (FeedingZoneUtil[type]) {
                        FeedingZoneUtil[type].apply(that, [parseFeedingZone, bindDef.constructor]);
                    }
                }

                if (that._chartView && that._chartView.getChild) {
                    var plot = that._chartView.getChild('plot');
                    if (plot && plot.module && plot.module.feedingZone) {
                        var extensionFeedingZone = plot.module.feedingZone();
                        if (extensionFeedingZone && TypeUtils.isArray(extensionFeedingZone)) {
                            for (var index = 0, len = extensionFeedingZone.length; index < len; index++) {
                                parseFeedingZone.push(extensionFeedingZone[index]);
                            }
                        }
                    }
                }

                return parseFeedingZone;
            }
        };
        that._propertyMgr.add('feedingZone', parseFeedingZone);
    };

    var EMPTY_SVG =
        "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"/>";

    ChartApp.prototype.exportToSVGString = function (option) {
        var svgResult = ChartExportSvg.exportToSVGString(this, option);
        return svgResult;
    };

    ChartApp.prototype.supportExportToSVG = function () {
        return ChartExportSvg.supportExportToSVG(this);
    };

    ChartApp.prototype._postProcessSvgStr = function(svgStr){
        return ChartExportSvg._postProcessSvgStr(svgStr);
    };

    ChartApp.prototype._getCustomSvg = function(options){
        return ChartExportSvg._getCustomSvg(options, this._chartView);
    };

    ChartApp.prototype.onFrameScaleChange = function (e) {
        var dataModel = this._dataModelManager.getDataModel();
        if (dataModel) {
            var seriesIndex = this._scales ? this._scales["dataFrame"].scale(e.currentValue) : 0;
            dataModel.updateSeriesIndex(seriesIndex);
        }
    };
    /**
     * Obtain all property zone information.
     *
     * @return feeding property information
     */
    ChartApp.prototype.getPropertyZone = function () {
        return this._propertyMgr.get('propertyZone');
    };

    ChartApp.prototype._propertyZone = function () {
        var that = this;
        var parsePropertyZone = {
            defaultValue: null,
            readonly: true,
            serializable: false,
            get: function () {
                var propertyZone = that._zoneMgr.get('tempPropertyZone'),
                    parsePropertyZone = [];
                for (var i in propertyZone) {
                    if (propertyZone.hasOwnProperty(i)) {
                        for (var j in propertyZone[i]) {
                            if (propertyZone[i].hasOwnProperty(j)) {
                                if (i === 'trellisAxis') { //row, column, category, value
                                    propertyZone[i][j].forEach(function (e) {
                                        parsePropertyZone.push(e);
                                    });
                                } else {
                                    parsePropertyZone.push(propertyZone[i][j]);
                                }
                            }
                        }
                    }
                }

                if (that._chartView && that._chartView.getChild) {
                    var plot = that._chartView.getChild('plot');
                    if (plot && plot.module && plot.module.propertyZone) {
                        var extensionPropertyZone = plot.module.propertyZone();
                        if (extensionPropertyZone && TypeUtils.isArray(extensionPropertyZone)) {
                            for (var index = 0, len = extensionPropertyZone.length; index < len; index++) {
                                parsePropertyZone.push(extensionPropertyZone[index]);
                            }
                        }
                    }
                }

                //remove empty array and 'flat' 2-d array
                var noEmptyArrays = [];
                parsePropertyZone = parsePropertyZone.filter(function(e){
                    if(TypeUtils.isArray(e)){
                        if(e.length > 0){
                            noEmptyArrays.push(e);
                        }
                        return false;
                    }
                    return true;
                });
                parsePropertyZone = parsePropertyZone.concat(ArrayUtils.flat(noEmptyArrays));

                return parsePropertyZone;
            }
        };
        that._propertyMgr.add('propertyZone', parsePropertyZone);
    };

    ChartApp.prototype._localeChanged = function () {
        ChartApp.superclass._localeChanged.call(this);
        // update the data of modules to let the module have change to make up locale string again.
        if (this._chartView && this._rootElement) {
            this._statusMgr.set('interaction.holdSelection', true);
            this._chartView.statusChanged(StatusConstants.LOCALE_CHANGED);

            if(this._isRenderable()) {
                this._chartView.render(this._rootElement);
            }
            else {
                this._chartView._dispatchInitialized();
            }

            this._addChartDescription(this._rootElement,
                ChartViewRegistry.getMetadataWithFamily(this._type).name);
            this._eventScreenReadForNonInteractive();
        }
    };

    //Scales
    ChartApp.prototype.sharedRuntimeScales = function (sharedRuntimeScales) {
        var scaleMgr = this._scaleMgr;
        if (arguments.length === 0) {
            // after rendering, obtain properties from property manager
            return this._chartView ? scaleMgr.get('sharedRuntime') : this._sharedRuntimeScales;
        } else {
            if (this._sharedRuntimeScales && sharedRuntimeScales &&
                ObjectUtils.deepEqual(this._sharedRuntimeScales, sharedRuntimeScales)) {
                return this;
            }

            this._sharedRuntimeScales = sharedRuntimeScales;
            scaleMgr.add('sharedRuntime', sharedRuntimeScales);

            return this;
        }
    };

    ChartApp.prototype.runtimeScales = function (param) {
        var retArray = [];
        var scales = this._scales;
        if (!scales) {
            return [];
        }

        if (arguments.length > 0 && param.merged === true) {
            if (scales.color && scales.color.mergedRuntimeColorScale && scales.color.mergedRuntimeColorScale()) {
                retArray.push(scales.color.mergedRuntimeColorScale());
            }
        } else {
            if (scales.color && scales.color.runtimeColorScale && scales.color.runtimeColorScale()) {
                retArray.push(scales.color.runtimeColorScale());
            }
            if (scales.color2 && scales.color2.runtimeColorScale && scales.color2.runtimeColorScale()) {
                retArray.push(scales.color2.runtimeColorScale());
            }
        }
        return retArray;
    };

    /**
      return if the visualization is renderable or not.
      if the dataset is empty, the visualzation is not renderable
      if the visualization is extension, it is renderable to make compatiable
    **/
    ChartApp.prototype._isRenderable = function () {
        return !DataUtils.isEmptyDataset(this.data()) ||
            ChartViewRegistry.getMetadataWithFamily(this._type).family === 'extension' ||
            ChartViewRegistry.getMetadataWithFamily(this._type).family == 'extensionChart';
    };

    /**
     * Add description to chart's SVG elements. It's for Screen reader.
     */
    ChartApp.prototype._addChartDescription = function(rootElement, chartName){
        chartName = LangManager.get(chartName);
        rootElement.attr('focusable', false)
            .attr('tabIndex', -1);
        var isNonInteractionEnabled = this._propertyMgr.get('interaction.noninteractiveMode');

        var titleText = (isNonInteractionEnabled ? 'A Noninteractive ' : 'An Interactive ') +
            (chartName || 'Chart');

        var textSet = this._propertyMgr.get('title.text');
        var textShow = TitleUtil.getTextShow(textSet);
        titleText += this._propertyMgr.get('title.visible') ? ('. Chart title is ' + textShow + ". ") :' ';

        var accDescription = this._propertyMgr.get('general.accDescription');
        titleText += isNonInteractionEnabled && accDescription ? (accDescription + ". ") : "";

        var titleElement =rootElement.selectAll('.v-m-desc-title').selectAll('title').data([titleText]);
        var titleId = getChartTitleId(this._chartAppId);
        titleElement.enter().append('title').attr('id',titleId);
        titleElement.text(titleText);
    };


    //Generate a titleid of chart. It's for Screen reader.
    function getChartTitleId(chartAppId) {
        return chartAppId + "-title";
    }
    return ChartApp;
});

define('sap/viz/migrate/migrator/versionMigrator',[ 'sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/core/ChartViewRegistry' ], function(
        ObjectUtils, ChartViewRegistry) {
    var versionMigrator = {
        migrate : function(json, isAPICall) {
            if (!ChartViewRegistry.getMetadata(json.type)) {
                json.version = this.toVersion;
                return json;
            }
            for (var i = 0; i < this.chainedMigrators.length; i++) {
                json = this.chainedMigrators[i].migrate(json, isAPICall);
            }
            json.version = this.toVersion;
            return json;
        }
    };
    return versionMigrator;
});
define('sap/viz/migrate/PropertyUtil',[ 'sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/common/util/TypeUtils' ], function Setup(
        ObjectUtils, TypeUtils) {

    var propertyUtil = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function isEmpty(obj) {
        if (!obj) {
            return true;
        }
        for ( var key in obj) {
            if (hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        if (TypeUtils.isFunction(obj)) {
            return false;
        }
        return true;
    }
    
    function clearEmptyPropertiesWithSrcPath(properties, path) {
        var paths = path.split('.'), i, j;
        for (i = paths.length - 2; i >= 0; i--) {
            var current = properties;
            for (j = 0; j < i; j++) {
                current = current[paths[j]];
            }
            if (isEmpty(current[paths[i]])) {
                delete current[paths[i]];
            }
        }
    }
    
    function isContain(rules, subProp){
        if(!rules){
            return false;
        }
        
        for(var i = 0; i < rules.length; ++i){
            if(rules[i].properties && rules[i].properties[subProp]){
                return true;
            }
        }
        
        return false;
    }
    
    propertyUtil.getProperty = function(properties, path) {
        var paths = path.split('.'), current = properties, i;

        for (i = 0; i < paths.length; i++) {
            // the given path is broken:
            // e.g. the given path is a.b.c, but a.b=null
            if (current === null) {
                return undefined;
            }
            // we do not have the key a.b, or a.b=undefined
            if (current[paths[i]] === undefined ) {
                return undefined;
            }
            current = current[paths[i]];
        }
        return current;
    };

    propertyUtil.setProperty = function(properties, path, value) {
        var paths = path.split('.'), current = properties, i;

        for (i = 0; i < paths.length - 1; i++) {
            if (current[paths[i]] === undefined || current[paths[i]] === null) {
                current[paths[i]] = {};
            }
            current = current[paths[i]];
        }
        current[paths[paths.length - 1]] = value;
    };

    propertyUtil.setPropertyWithMergence = function(properties, path, value) {
        var paths = path.split('.'), newObj = {}, tmp = newObj, i;
        for (i = 0; i < paths.length - 1; i++) {
            tmp[paths[i]] = {};
            tmp = tmp[paths[i]];
        }
        tmp[paths[paths.length - 1]] = value;
        ObjectUtils.extend(true, properties, newObj);
    };
    
    propertyUtil.removeProperty = function(properties, path) {
        var paths = path.split('.'), current = properties, i;

        for (i = 0; i < paths.length - 1; i++) {
            if (current[paths[i]] === undefined) {
                return;
            }
            current = current[paths[i]];
        }
        delete current[paths[paths.length - 1]];
        clearEmptyPropertiesWithSrcPath(properties, path);
    };
    
    function removeProperties(toProperty, subProp){
        if(toProperty && toProperty.rules && toProperty.rules.length){
            var rules = toProperty.rules;
            for(var i = rules.length - 1; i >= 0; --i){
                var rule = rules[i];
                var properties = rule.properties;
                delete properties[subProp];
                if(TypeUtils.isEmptyObject(properties)){
                    rules.splice(i, 1);
                }
            }
        }
    }
    
    propertyUtil.migrateSeriesStyle = function(properties, srcPath, srcProperty, action){
        var toProperty = propertyUtil.getProperty(properties, action.to);
        
        removeProperties(toProperty, action.subProp);
        toProperty = toProperty || {rules:[]};
        if(srcProperty && srcProperty.rules){
            var srcRules = srcProperty.rules;
            for(var i = 0; i < srcRules.length; ++i){
                var target = {};
                var rule = srcRules[i];
                ObjectUtils.extend(true, target, rule);
                if(rule && rule.dataContext && rule.dataContext.length){
                    var dataContext = rule.dataContext;
                    for(var j = 0; j < dataContext.length; ++j){
                        if(dataContext[j] === undefined){
                            target.dataContext[j] = undefined;
                        }
                    }
                }
                if(target.properties){
                    var temp = target.properties;
                    delete target.properties;
                    target.properties = {};
                    target.properties[action.subProp] = temp;
                }
                
                toProperty.rules.push(target);
            }
            
        }
        propertyUtil.setProperty(properties, action.to, toProperty);

    };

    propertyUtil.getComplexProperty = function(key, value, idx, propMgr) {
        var ret;
        if (value[idx] !== undefined) {
            ret = value[idx];
        } else {
            // fallback to template/default value if value[idx] is not set
            var templateValue = propMgr.get(key, 'templateValue');
            if (templateValue && templateValue[idx]) {
                ret = templateValue[idx];
            } else {
                var defaultValue = propMgr.get(key, 'defaultValue');
                if (TypeUtils.isArray(defaultValue)) {
                    ret = defaultValue[idx];
                } else {
                    ret = defaultValue;
                }
            }
        }
        return ret;
    };

    return propertyUtil;
});
define('sap/viz/migrate/bindingMigrator',["sap/viz/framework/core/ChartViewRegistry", 'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils'
], function Setup(ChartViewRegistry, TypeUtils, ObjectUtils) {
    var migrateUtils = {};

    var feedingMap = {
        primaryValues: 'valueAxis',
        secondaryValues: 'valueAxis2',
        axisLabels: 'categoryAxis',
        mainLabelAxis : 'categoryAxis',
        secondaryLabelAxis : 'categoryAxis2',
        regionColor: 'color',
        regionShape: 'shape',
        pieSectorColor: 'color',
        pieSectorSize: 'size',
        rectangleTitle: 'title',
        rectangleColor: 'color',
        rectangleWeight: 'weight',
        tagName : 'text',
        tagWeight : 'weight',
        tagFamily : 'color',
        "multiplier.row": "trellisRow",
        "multiplier.column": "trellisColumn",
        radarAxes : "categoryAxis",
        radarAxesValues : "valueAxis"
    };

    var FLATTABLETYPE = 'sap.viz.api.data.FlatTableDataset';
    var CROSSTABLETYPE = 'sap.viz.api.data.CrosstableDataset';
    var CONST_MND = 'MeasureNamesDimension';
    var CONST_TYPE_MEASURE = "Measure";

    var checkMND = function (arr) {
        var length = arr.length;
        for (var i = 0; i < length; i++) {
            if (arr[i] === CONST_MND) {
                return i;
            }
        }
        return -1;
    };

    var isMeasure = function (feedingDef) {
        var isMeasure = {};
        feedingDef.map(function (obj) {
            isMeasure[obj.id] = (obj.type === CONST_TYPE_MEASURE);
        });
        return isMeasure;
    };

    migrateUtils.getFeedingMap = function () {
        return feedingMap;
    };
    
    migrateUtils.isSupportedChart = function(chartType) {
        if (ChartViewRegistry.getMetadata(chartType)) {
            return true;
        } else {
            return false;
        }
    };

    migrateUtils.FlatTableFeedingToBindings = function (feeding, feedingDef) {
        if (feeding && TypeUtils.isArray(feedingDef)) {
            var bindings = [];
            var MNDItem = {
                measureNames: []
            };
            var isMeasureArr = isMeasure(feedingDef);
            for (var i in feeding) {
                if (feeding.hasOwnProperty(i)) {
                    var source = ObjectUtils.clone(feeding[i]);
                    var id = feedingMap[i];
                    if (!id) {
                        id = i;
                    }
                    if (isMeasureArr[id]) {
                        MNDItem.measureNames.push(id);
                    }
                    var MNDIndex = checkMND(source);
                    if (MNDIndex > -1) {
                        source[MNDIndex] = MNDItem;
                    }
                    bindings.push({
                        feed: id,
                        source: source
                    });

                }
            }
            return bindings;
        }
    };
    
    migrateUtils.CrosstableFeedingToBindings = function (feeding) {
        if (feeding) {
            var bindings = [];
            for (var i in feeding) {
                if (feeding.hasOwnProperty(i)) {
                    var source = ObjectUtils.clone(feeding[i]);
                    bindings[i] = {};
                    bindings[i].feed = feedingMap[source.feedId] || source.feedId;
                    bindings[i].source = source.binding;
                }
            }
            return bindings;
        }
    };

    migrateUtils.migrateBulletBindings = function(bindings){
        var i = 0;
        var bHasPrimary = false;
        var len = bindings.length;
        for(i = 0 ; i < len && !bHasPrimary; ++i){
            if(bindings[i].feed === "actualValues"){
                bHasPrimary = true;
            }
        }
        for(i = 0 ; i < len; ++i){
            if(bindings[i].feed === "valueAxis"){
                if(bHasPrimary){
                    bindings.splice(i, 1);
                    --i;
                    --len;
                }else{
                    bindings[i].feed = "actualValues";
                    if(bindings[i].source.length > 1){
                        bindings.push({feed: "additionalValues", source:[bindings[i].source[1]]});
                        bindings[i].source.pop();
                    }
                }
                
                
            }
        }
    
    };
    
    migrateUtils.migrate = function (json) {
        if (this.isSupportedChart(json.type) && !json.bindings) {
            var bindings;
            if (json.data && json.data.type === CROSSTABLETYPE) {
                bindings = migrateUtils.CrosstableFeedingToBindings(json.feeding);
            } else {
                bindings = migrateUtils.FlatTableFeedingToBindings(json.feeding, ChartViewRegistry
                    .getMetadata(json.type).bindings);       
            }
            delete json.feeding;
            if (bindings) {
                json.bindings = bindings;
            }
        }
        
        if((json.type === "info/bullet" || json.type === "info/vertical_bullet") && json.bindings){
            migrateUtils.migrateBulletBindings(json.bindings);   
        }
        
        return json;
    };


    return migrateUtils;
});

define('sap/viz/migrate/BaseMigrator',[
    'sap/viz/framework/common/util/ObjectUtils', 
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/migrate/PropertyUtil',
	'sap/viz/migrate/bindingMigrator',
    'sap/viz/framework/core/ChartViewRegistry'
], function(ObjectUtils, TypeUtils, PropertyUtil, migrateUtils, ChartViewRegistry) {

    return {
        factory: function(migrationModel) {
            var migrator = {
                _model: migrationModel,
                _isAPICall : false,
                _propertyMigrateActions: {
                    merge: function(chart, srcPath, srcProperty, action) {
                        PropertyUtil.setPropertyWithMergence(chart.properties, action.to, srcProperty);
                    },
                    
                    rename: function(chart, srcPath, srcProperty, action) {
                        PropertyUtil.setPropertyWithMergence(chart.properties, action.to, srcProperty);
                        this.remove(chart, srcPath);
                    },

                    remove: function(chart, srcPath) {
                        PropertyUtil.removeProperty(chart.properties, srcPath);
                    },
                    
                    migrateSeriesStyle: function(chart, srcPath, srcProperty, action){
                        PropertyUtil.migrateSeriesStyle(chart.properties, srcPath, srcProperty, action);
                    },
                    
                    
                    exchange: function(chart, srcPath, srcProperty, action, isAPICall) {
                        if (isAPICall) {
                            return;
                        }
                        var toProperty = PropertyUtil.getProperty(chart.properties, action.to);
                        if (toProperty !== undefined) {
                            PropertyUtil.setProperty(chart.properties, srcPath, toProperty);
                            PropertyUtil.setProperty(chart.properties, action.to, srcProperty);
                        }
                    },
                    
                    changeFormatString : function(chart, srcPath) {
                        if (this._unifyFormatString(chart.properties, srcPath)) {
                            return;
                        }
                        // normal case
                        var feedNames = [];
                        var bindingDef = ChartViewRegistry.getBindingDefinition(chart.type)["constructor"];
                        if (!bindingDef) {
                            return;
                        }
                        var bindings = chart.bindings;
                        if (!bindings) {
                            return;
                        }
                        
                        for ( var i = 0; i<bindingDef.length; i++) {
                            if (bindingDef[i].hasOwnProperty('type') && bindingDef[i].hasOwnProperty('role') &&
                                    bindingDef[i]['type'] === 'Measure' && bindingDef[i]['role'] &&
                                    bindingDef[i]['role'].indexOf('layout') > -1) {
                                feedNames.push(bindingDef[i].id);
                            }
                        }
                        
                        var measureNames = [];
                        for (var index=0; index<bindings.length; index++) {
                            var feed = bindings[index].feed;
                            if (feedNames.indexOf(feed)>=0) {
                                measureNames.push(bindings[index].source);
                            }
                        }
                        
                        var newValue = {};
                        var value = PropertyUtil.getProperty(chart.properties, srcPath);
                        if (TypeUtils.isArray(value)) {
                            for (var j=0; j<value.length; j++) {
                                if (TypeUtils.isArray(value[j])) {
                                    for (var k=0; k<value[j].length; k++) {
                                        if(measureNames[j] && measureNames[j][k]) {
                                            newValue[measureNames[j][k]] = value[j][k];    
                                        }
                                    }
                                }    
                            }
                        }
                        PropertyUtil.setProperty(chart.properties, srcPath, newValue);
                    }, 
                    splitColorPalette: function(chart, srcPath, srcProperty, action){
                        // We should process srcProperty === null case
                        if(srcProperty && !PropertyUtil.getProperty(chart.properties, action.to[0]))   {
                            PropertyUtil.setPropertyWithMergence(chart.properties, action.to[0], [srcProperty[0]]);
                            PropertyUtil.setPropertyWithMergence(chart.properties, action.to[1], [srcProperty[1]]); 
                          
                        }
                        
                        this.remove(chart, srcPath);
                    },
                    
                    _unifyFormatString : function(properties, srcPath) {
                        var value = PropertyUtil.getProperty(properties, srcPath);
                        // for the format string in the 2d array, if they are the same, convert it into one string.
                        if (TypeUtils.isArray(value)) {
                            var formatString;
                            for (var j=0; j<value.length; j++) {
                                if (TypeUtils.isArray(value[j])) {
                                    for (var k=0; k<value[j].length; k++) {
                                        if (formatString === undefined){
                                            formatString = value[j][k];
                                        } else {
                                            if (formatString !== value[j][k]) {
                                                return false;
                                            }
                                        }
                                    }
                                } else if(TypeUtils.isString(value[j])) {
                                    return true;
                                }   
                            }
                            PropertyUtil.setProperty(properties, srcPath, formatString);
                        }
                        return true;
                    }
                },

                migrate: function(json, isAPICall) {
                    this._isAPICall = arguments[1] || false;
                    var allModel = this._getTypeModel('all'),
                        chartModel = this._getTypeModel(json.type);

                    this._doMigrate(json, chartModel);
                    this._doMigrate(json, allModel);
                    return json;
                },

				_doMigrate: function(chart, model) {
                    if (!model) {
                        return;
                    }

                    this._migrateProperties(chart, model.properties);

                    // other migration goes here
                },

                _migrateProperties: function(chart, propModel) {
                    var property, path, action;
                    var properties = chart.properties;
                    if (!propModel || !properties) {
                        return properties;
                    }
                    for (path in propModel) {
                        if (propModel.hasOwnProperty(path)) {
                            property = PropertyUtil.getProperty(properties, path);
                            if (property !== undefined) {
                                action = propModel[path];
                                this._propertyMigrateActions[action.action](chart, path,
                                        property, action, this._isAPICall);
                            }
                        }
                    }
                    return properties;
                },

                _getTypeModel: function(chartType) {
                    return this._model[chartType];
                }
                   
            };

            return migrator;
        }
    };
});

define('sap/viz/migrate/migrator/Migrator10to12',[ 'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/BaseMigrator' ], function(versionMigrator,
        BaseMigrator) {
    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "4.0.10";
    migrator.toVersion = "4.0.12";
    migrator.propertyModel = {
        "all" : {
            properties : {
                "title.layout.width" : {
                    action : "rename",
                    to : "title.layout.maxWidth",
                },
                "title.layout.height" : {
                    action : "rename",
                    to : "title.layout.maxHeight",
                },
                "background.direction" : {
                    action : "rename",
                    to : "background.gradientDirection"
                },
                "background.body.color" : {
                    action : "rename",
                    to : "background.color"
                },
                "legend.layout.width" : {
                    action : "rename",
                    to : "legend.layout.maxWidth"
                },
                "legend.layout.height" : {
                    action : "rename",
                    to : "legend.layout.maxHeight"
                },
                "valueAxis.hideTitleFirst" : {
                    action : "remove"
                },
                "valueAxis.axisline" : {
                    action : "rename",
                    to : "valueAxis.axisLine"
                },
                "valueAxis.lineSize" : {
                    action : "rename",
                    to : "valueAxis.axisLine.size"
                },
                "valueAxis.unitFormatType" : {
                    action : "remove"
                },
                "valueAxis.layout.width" : {
                    action : "rename",
                    to : "valueAxis.layout.maxWidth"
                },
                "valueAxis.layout.height" : {
                    action : "rename",
                    to : "valueAxis.layout.maxHeigth"
                },
                "categoryAxis.hideTitleFirst" : {
                    action : "remove"
                },
                "categoryAxis.axisline" : {
                    action : "rename",
                    to : "categoryAxis.axisLine"
                },
                "categoryAxis.lineSize" : {
                    action : "rename",
                    to : "categoryAxis.axisLine.size"
                },
                "categoryAxis.layout.width" : {
                    action : "rename",
                    to : "categoryAxis.layout.maxWidth"
                },
                "categoryAxis.layout.height" : {
                    action : "rename",
                    to : "categoryAxis.layout.maxHeigth"
                },
                "plotArea.dataLabel.hiddenWhenOverlap" : {
                    action : "rename",
                    to : "plotArea.dataLabel.hideWhenOverlap"
                },
                "plotArea.fixedDatapointSize" : {
                    action : "rename",
                    to : "plotArea.isFixedDataPointSize"
                },
                "plotArea.dataLabel.position" : {
                    action : "remove"
                },
                "plotArea.primaryScale.autoMinValue" : {
                    action : "remove"
                },
                "plotArea.primaryScale.autoMaxValue" : {
                    action : "remove"
                },
                "background" : {
                    action : "rename",
                    to : "plotArea.background"
                },
            }
        },
        "info/100_stacked_bar" : {
            properties : {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/100_dual_stacked_bar" : {
            properties : {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.colorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/100_stacked_column" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/100_dual_stacked_column" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.colorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/bubble" : {
            properties : {
                "scale" : {
                    action : "remove"
                },
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/bullet" : {
            properties : {
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "categoryAxis2"
                },
                "plotArea.barSize.desktop" : {
                    action : "remove"
                },
                "plotArea.barSize.mobile" : {
                    action : "remove"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/combination" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.bar.barSize" : {
                    action : "remove"
                },
                "plotArea.bar.barSize.desktop" : {
                    action : "remove"
                },
                "plotArea.bar.barSize.mobile" : {
                    action : "remove"
                },
                "plotArea.line.categorySize.desktop" : {
                    action : "remove"
                },
                "plotArea.line.categorySize.mobile" : {
                    action : "remove"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.dataShape.secondaryAxis" : {
                    action : "remove"
                }
            }
        },
        "info/donut" : {
            properties : {
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/horizontal_line" : {
            properties : {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/dual_horizontal_line" : {
            properties : {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.colorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/line" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/dual_line" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.colorPalette" : {
                    action : "remove"
                },
            }
        }
    /**
     *   sample model
     "chartType": {
         properties: {
             "propertyPath" : {
                 action : "rename/remove",
                 to : "toPath"
             }
         }
     },
     */

    };
    migrator.propertyModel["info/bar"] = migrator.propertyModel["info/100_stacked_bar"];
    migrator.propertyModel["info/dual_bar"] = migrator.propertyModel["info/100_dual_stacked_bar"];
    migrator.propertyModel["info/dual_column"] = migrator.propertyModel["info/100_dual_stacked_column"];
    migrator.propertyModel["info/pie"] = migrator.propertyModel["info/donut"];
    migrator.propertyModel["info/scatter"] = migrator.propertyModel["info/bubble"];
    migrator.propertyModel["info/stacked_bar"] = migrator.propertyModel["info/100_stacked_bar"];
    migrator.propertyModel["info/dual_stacked_bar"] = migrator.propertyModel["info/100_dual_stacked_bar"];
    migrator.propertyModel["info/stacked_column"] = migrator.propertyModel["info/100_stacked_column"];
    migrator.propertyModel["info/dual_stacked_column"] = migrator.propertyModel["info/100_dual_stacked_column"];
    migrator.propertyModel["info/column"] = migrator.propertyModel["info/100_stacked_column"];
    migrator.chainedMigrators = [ BaseMigrator.factory(migrator.propertyModel) ];
    return migrator;
});
define('sap/viz/migrate/migrator/Migrator12to16',[ 'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/BaseMigrator' ], function(versionMigrator,
        BaseMigrator) {
    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "4.0.12";
    migrator.toVersion = "4.0.16";
    migrator.propertyModel = {
        "info/donut" : {
            properties : {
                "plotArea.highlightIndex" : {
                    action : "rename",
                    to : "plotArea.highlight.highlightIndex"
                },
                "plotArea.unhighlightSliceColor" : {
                    action : "rename",
                    to : "plotArea.highlight.unhighlightSliceColor"
                },
                "plotArea.contextInfos" : {
                    action : "rename",
                    to : "plotArea.highlight.contextInfos"
                },
                "plotArea.highlightContext" : {
                    action : "rename",
                    to : "plotArea.highlight.highlightContext"
                },
                "plotArea.centerRenderer" : {
                    action : "rename",
                    to : "plotArea.highlight.centerRenderer"
                },
                "plotArea.centerName" : {
                    action : "rename",
                    to : "plotArea.highlight.centerName"
                },

                "plotArea.centerValue" : {
                    action : "rename",
                    to : "plotArea.highlight.centerValue"
                }
            }
        }
    };
    migrator.chainedMigrators = [ BaseMigrator.factory(migrator.propertyModel) ];
    return migrator;
});
define('sap/viz/migrate/migrator/Migrator16to18Model/Properties',[],function() {
    var properties = {
        "all" : {
            properties : {
                "multiLayout.numberOfDimensionInColumn" : {
                    action : "remove"
                },
                "legend.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "legend.mouseDownShadow.color"
                },
                "categoryAxis.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "categoryAxis.mouseDownShadow.color"
                },
                "tooltip.separationLine.borderBottomColor" : {
                    action : "rename",
                    to : "tooltip.separationLine.color"
                },
                "background.direction": {
                    action: "rename",
                    to : "background.gradientDirection"
                },
                "dataLabel": {
                    action: "rename",
                    to : "plotArea.dataLabel"
                },
				"valueAxis.axisline": {
                    action: "rename",
                    to : "valueAxis.axisLine"
                },
                "valueAxis2.axisline": {
                    action: "rename",
                    to : "valueAxis2.axisLine"
                },
                "categoryAxis.axisline": {
                    action: "rename",
                    to : "categoryAxis.axisLine"
                },
                "valueAxis.lineSize": {
                    action: "rename",
                    to : "valueAxis.axisLine.size"
                },
                "categoryAxis.lineSize": {
                    action: "rename",
                    to : "categoryAxis.axisLine.size"
                },
                "valueAxis2.lineSize": {
                    action: "rename",
                    to : "valueAxis2.axisLine.size"
                },
                "valueAxis.scale": {
                    action: "rename",
                    to : "plotArea.primaryScale"
                },
                "valueAxis2.scale": {
                    action: "rename",
                    to : "plotArea.secondaryScale"
                },
                "background": {
                    action: "rename",
                    to : "plotArea.background"
                },
                "selectedDataPoints" : {
                    action : "rename",
                    to : "interaction.selectedDataPoints"
                },
                "plotArea.referenceLine.line.primaryValues" : {
                    action : "rename",
                    to : "plotArea.referenceLine.line.valueAxis"
                },
                "plotArea.referenceLine.line.secondaryValues" : {
                    action : "rename",
                    to : "plotArea.referenceLine.line.valueAxis2"
                },
                /////////// Format String Properties /////////////
                "valueAxis.label.formatString" : {
                    action : "changeFormatString"
                },
                "valueAxis2.label.formatString" : {
                    action : "changeFormatString"
                },
                "tooltip.formatString" : {
                    action : "changeFormatString"
                },
                "plotArea.dataLabel.formatString" : {
                    action : "changeFormatString"
                },
                "legend.formatString" : {
                    action : "changeFormatString"
                },
                "sizeLegend.formatString" : {
                    action : "changeFormatString"
                }
            }
        },
        "info/column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/stacked_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/100_stacked_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/100_dual_stacked_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/stacked_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/100_stacked_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/100_dual_stacked_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis" : {
                    action : "exchange",
                    to : "valueAxis2"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/line": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/horizontal_line": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/combination": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                
                ////////////////////Info Chart////////////////////

                "plotArea.line.lineVisible": {
                    action: "rename",
                    to: "plotArea.line.visible"
                },
                "plotArea.line.lineStyle": {
                    action: "rename",
                    to: "plotArea.line.style"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/horizontal_combination": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                
                ////////////////////Info Chart////////////////////

                "plotArea.line.lineVisible": {
                    action: "rename",
                    to: "plotArea.line.visible"
                },
                "plotArea.line.lineStyle": {
                    action: "rename",
                    to: "plotArea.line.style"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/dual_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/dual_stacked_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/dual_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis" : {
                    action : "exchange",
                    to : "valueAxis2"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/dual_stacked_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis" : {
                    action : "exchange",
                    to : "valueAxis2"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/dual_line": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/dual_horizontal_line": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis" : {
                    action : "exchange",
                    to : "valueAxis2"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/scatter": {
            properties: {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis2.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/bubble": {
            properties: {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis2.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/timeBubble": {
            properties: {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis.scale.fixedTicks" : {
                    action : "rename",
                    to : "valueAxis.axisTick.fixedTicks"
                },
                "valueAxis2.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/treeMap": {
            properties: {
    
            }
        },
        "info/pie": {
            properties: {
                ////////////////////Info Chart////////////////////

                "plotArea.contextInfos" : {
                    action : "rename",
                    to  : "plotArea.highlight.contextInfos"
                }
            }
        },
        "info/donut": {
            properties: {
                ////////////////////Info Chart////////////////////
                "plotArea.contextInfos" : {
                    action : "rename",
                    to  : "plotArea.highlight.contextInfos"
                }
            }
        },
        "info/bullet": {
            properties: {
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                },
                ////////////////////Info Chart////////////////////

                "plotArea.targetValueColor" : {
                    action : "rename",
                    to : "plotArea.target.valueColor"
                },
                "plotArea.targetShadowColor" : {
                    action : "rename",
                    to : "plotArea.target.shadowColor"
                }
            }
        }
    };

    properties["info/trellis_column"] = properties["info/column"];
    properties["info/trellis_bar"] = properties["info/bar"];
    properties["info/trellis_line"] = properties["info/line"];
    properties["info/trellis_bubble"] = properties["info/bubble"];
    properties["info/trellis_scatter"] = properties["info/scatter"];
    properties["info/trellis_stacked_column"] = properties["info/stacked_column"];
    properties["info/trellis_stacked_bar"] = properties["info/stacked_bar"];
    properties["info/trellis_dual_column"] = properties["info/dual_column"];
    properties["info/trellis_dual_line"] = properties["info/dual_line"];
    properties["info/trellis_dual_bar"] = properties["info/dual_bar"];
    properties["info/trellis_100_stacked_column"] = properties["info/100_stacked_column"];
    properties["info/trellis_100_stacked_bar"] = properties["info/100_stacked_bar"];
    properties["info/trellis_combination"] = properties["info/combination"];
    properties["info/trellis_donut"] = properties["info/donut"];
    properties["info/trellis_pie"] = properties["info/pie"];
    properties["info/trellis_horizontal_line"] = properties["info/horizontal_line"];
    properties["info/trellis_dual_horizontal_line"] = properties["info/dual_horizontal_line"];
    properties["info/trellis_horizontal_combination"] = properties["info/horizontal_combination"];
    properties["info/trellis_dual_stacked_column"] = properties["info/dual_stacked_column"];
    properties["info/trellis_100_dual_stacked_column"] = properties["info/dual_100_stacked_column"];
    properties["info/trellis_100_dual_stacked_bar"] = properties["info/100_dual_stacked_bar"];
    properties["info/trellis_dual_stacked_bar"] = properties["info/dual_stacked_bar"];
    
    return properties;
});

define('sap/viz/migrate/migrator/Migrator16to18Model/CSS',[],function() {
    var css = {
        "default" : {
            ".v-m-root .v-m-title .v-title" : {
                "font-family" : "title.style.fontFamily",
                "font-size" : "title.style.fontSize",
                "font-weight" : "title.style.fontWeight",
                "fill" : "title.style.color",
                "font-style" : "title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-title" : {
                "font-family" : "legend.title.style.fontFamily",
                "font-size" : "legend.title.style.fontSize",
                "font-weight" : "legend.title.style.fontWeight",
                "fill" : "legend.title.style.color",
                "font-style" : "legend.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-label" : {
                "font-family" : "legend.label.style.fontFamily",
                "font-size" : "legend.label.style.fontSize",
                "font-weight" : "legend.label.style.fontWeight",
                "fill" : "legend.label.style.color",
                "font-style" : "legend.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-hovershadow" : {
                "fill" : "legend.hoverShadow.color"
            },
            
            ".v-m-root .v-m-main .v-m-background .v-background-body" : {
                "fill" : "plotArea.background.color"
            },

            ".v-m-root .v-m-main .v-m-background .v-background-border" : {
                "stroke" : "plotArea.background.border.stroke",
                "stroke-width" : "plotArea.background.border.strokeWidth"
            },

            ".v-m-root .v-m-tooltip .v-background" : {
                "background-color" : "tooltip.background.color",
                "border-color" : "tooltip.background.borderColor"
            },

            ".v-m-root .v-m-tooltip .v-footer-label" : {
                "color" : "tooltip.footerLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-separationline" : {
                "border-bottom-color" : "tooltip.separationLine.color"
            },

            ".v-m-root .v-m-tooltip .v-body-dimension-label" : {
                "color" : "tooltip.bodyDimensionLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-body-dimension-value" : {
                "color" : "tooltip.bodyDimensionValue.color"
            },

            ".v-m-root .v-m-tooltip .v-body-measure-label" : {
                "color" : "tooltip.bodyMeasureLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-body-measure-value" : {
                "color" : "tooltip.bodyMeasureValue.color"
            },

            ".v-m-root .v-m-tooltip .v-closeButton" : {
                "background-color" : "tooltip.closeButton.backgroundColor",
                "border-color" : "tooltip.closeButton.borderColor"
            }
        },

        "single_default" : {
            ".v-m-root .v-m-main .v-m-datalabel .v-datalabel" : {
                "font-family" : "plotArea.dataLabel.style.fontFamily",
                "font-size" : "plotArea.dataLabel.style.fontSize",
                "font-weight" : "plotArea.dataLabel.style.fontWeight",
                "fill" : "plotArea.dataLabel.style.color",
                "font-style" : "plotArea.dataLabel.style.fontStyle"
            }
        },
        
        "bar" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },
        
        "dual_bar" : {            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-hidden-title" : {
                "fill" : "valueAxis2.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },
        
        "column" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "valueAxis.hoverShadow.color"
            }
        },
        
        "dual_column" : {           
            ".v-m-root .v-m-main .v-m-yAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis2 .v-hidden-title" : {
                "fill" : "valueAxis2.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "scatter" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "bubble" : {
            ".v-m-root .v-m-legends .v-m-sizeLegend .v-title" : {
                "font-family" : "sizeLegend.title.style.fontFamily",
                "font-size" : "sizeLegend.title.style.fontSize",
                "font-weight" : "sizeLegend.title.style.fontWeight",
                "fill" : "sizeLegend.title.style.color",
                "font-style" : "sizeLegend.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-sizeLegend .v-label" : {
                "font-family" : "sizeLegend.label.style.fontFamily",
                "font-size" : "sizeLegend.label.style.fontSize",
                "font-weight" : "sizeLegend.label.style.fontWeight",
                "fill" : "sizeLegend.label.style.color",
                "font-style" : "sizeLegend.label.style.fontStyle"
            }
        },

        "trellis_default" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-datalabel .v-datalabel" : {
                "font-family" : "plotArea.dataLabel.style.fontFamily",
                "font-size" : "plotArea.dataLabel.style.fontSize",
                "font-weight" : "plotArea.dataLabel.style.fontWeight",
                "fill" : "plotArea.dataLabel.style.color",
                "font-style" : "plotArea.dataLabel.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-background .v-background-body" : {
                "fill" : "plotArea.background.color"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-background .v-background-border" : {
                "stroke" : "plotArea.background.border.stroke",
                "stroke-width" : "plotArea.background.border.strokeWidth"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-title" : {
                "font-family" : "columnAxis.title.style.fontFamily",
                "font-size" : "columnAxis.title.style.fontSize",
                "font-weight" : "columnAxis.title.style.fontWeight",
                "fill" : "columnAxis.title.style.color",
                "font-style" : "columnAxis.title.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-label" : {
                "font-family" : "columnAxis.label.style.fontFamily",
                "font-size" : "columnAxis.label.style.fontSize",
                "font-weight" : "columnAxis.label.style.fontWeight",
                "fill" : "columnAxis.label.style.color",
                "font-style" : "columnAxis.label.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-hovershadow" : {
                "fill" : "columnAxis.hoverShadow.color"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-title" : {
                "font-family" : "rowAxis.title.style.fontFamily",
                "font-size" : "rowAxis.title.style.fontSize",
                "font-weight" : "rowAxis.title.style.fontWeight",
                "fill" : "rowAxis.title.style.color",
                "font-style" : "rowAxis.title.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-label" : {
                "font-family" : "rowAxis.label.style.fontFamily",
                "font-size" : "rowAxis.label.style.fontSize",
                "font-weight" : "rowAxis.label.style.fontWeight",
                "fill" : "rowAxis.label.style.color",
                "font-style" : "rowAxis.label.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-hovershadow" : {
                "fill" : "rowAxis.hoverShadow.color"
            }
        },

        "trellis_bar" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },

        "trellis_dual_bar" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "trellis_column" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            }
        },

        "trellis_dual_column" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "trellis_scatter" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "trellis_bubble" : {
            ".v-m-root .v-m-legends .v-m-sizeLegend .v-title" : {
                "font-family" : "sizeLegend.title.style.fontFamily",
                "font-size" : "sizeLegend.title.style.fontSize",
                "font-weight" : "sizeLegend.title.style.fontWeight",
                "fill" : "sizeLegend.title.style.color",
                "font-style" : "sizeLegend.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-sizeLegend .v-label" : {
                "font-family" : "sizeLegend.label.style.fontFamily",
                "font-size" : "sizeLegend.label.style.fontSize",
                "font-weight" : "sizeLegend.label.style.fontWeight",
                "fill" : "sizeLegend.label.style.color",
                "font-style" : "sizeLegend.label.style.fontStyle"
            }
        }
    };

    function extend(target, src) {
        for (var i in src) {
            if (src.hasOwnProperty(i)) {
                target[i] = src[i];
            }
        }
    }

    // Single
    extend(css["bar"], css["single_default"]);
    extend(css["column"], css["single_default"]);
    extend(css["scatter"], css["single_default"]);
    extend(css["dual_bar"], css["bar"]);
    extend(css["dual_column"], css["column"]);
    extend(css["bubble"], css["scatter"]);

    css["horizontal_combination"] = css["bar"];
    css["stacked_bar"] = css["bar"];
    css["100_stacked_bar"] = css["bar"];
    css["horizontal_line"] = css["bar"];

    css["dual_stacked_bar"] = css["dual_bar"];
    css["100_dual_stacked_bar"] = css["dual_bar"];
    css["dual_horizontal_line"] = css["dual_bar"];

    css["combination"] = css["column"];
    css["stacked_column"] = css["column"];
    css["100_stacked_column"] = css["column"];
    css["line"] = css["column"];

    css["dual_stacked_column"] = css["dual_column"];
    css["100_dual_stacked_column"] = css["dual_column"];
    css["dual_line"] = css["dual_column"];
    

    css["pie"] = css["default"];
    css["donut"] = css["default"];
    css["treemap"] = css["default"];
    extend(css["pie"], css["single_default"]);
    extend(css["donut"], css["single_default"]);
    extend(css["treemap"], css["single_default"]);

    // Trellis
    extend(css["trellis_bar"], css["trellis_default"]);
    extend(css["trellis_column"], css["trellis_default"]);
    extend(css["trellis_scatter"], css["trellis_default"]);
    extend(css["trellis_dual_bar"], css["trellis_bar"]);
    extend(css["trellis_dual_column"], css["trellis_column"]);

    css["trellis_stacked_bar"] = css["trellis_bar"];
    css["trellis_100_stacked_bar"] = css["trellis_bar"];
    css["trellis_horizontal_line"] = css["trellis_bar"];

    css["trellis_dual_stacked_bar"] = css["trellis_dual_bar"];
    css["trellis_100_dual_stacked_bar"] = css["trellis_dual_bar"];
    css["trellis_dual_horizontal_line"] = css["trellis_dual_bar"];

    css["trellis_stacked_column"] = css["trellis_column"];
    css["trellis_100_stacked_column"] = css["trellis_column"];
    css["trellis_line"] = css["trellis_column"];

    css["trellis_dual_stacked_column"] = css["trellis_dual_column"];
    css["trellis_100_dual_stacked_column"] = css["trellis_dual_column"];
    css["trellis_dual_line"] = css["trellis_dual_column"];

    extend(css["trellis_bubble"], css["trellis_scatter"]);

    css["trellis_pie"] = css["trellis_default"];
    css["trellis_donut"] = css["trellis_default"];

    // extra css mapping, prefix with '.viz-''
    css["_extra_viz_css"] = {
        ".viz-legend-title": ".v-title",
        ".viz-title-label":".v-title .v-title",
        ".viz-axis-title":".v-title",
        ".viz-legend-valueLabel":".v-label",
        ".viz-axis-label":".v-label"
    };

    return css;
});


define('sap/viz/migrate/CSSMigrator',['sap/viz/migrate/PropertyUtil'], function(PropertyUtil) {

    function findProperty(chartType, cssText, cssSector, cssModel) {
        var property = null;
        if (cssText && cssModel) {
            if (cssModel[chartType] && cssModel[chartType][cssText] && cssModel[chartType][cssText][cssSector]) {
                property = cssModel[chartType][cssText][cssSector];
            } else {
                if (cssModel["default"][cssText] && cssModel["default"][cssText][cssSector]) {
                    property = cssModel["default"][cssText][cssSector];
                }
            }
        }
        return property;
    }

    function applyCSSProperty(properties, chartType, cssText, cssSector, cssModel) {
        if (cssSector.indexOf(":") > -1) {
            var sector = cssSector.split(":");
            if (sector && sector.length === 2) {
                var property = findProperty(chartType, cssText, sector[0], cssModel);

                var index = sector[1].indexOf("!important");
                if (index > -1) {
                    sector[1] = sector[1].substring(0, index);
                }

                if (property) {
                    PropertyUtil.setProperty(properties, property, sector[1]);
                }
            }
        }
    }
    function removeChartTypePrefix(chartType){
        var retValue = chartType;
        var infoPrefix = "info/";
        if(chartType && chartType.indexOf(infoPrefix) > -1){
            retValue = chartType.substring(infoPrefix.length);
        }
        return retValue;
    }

    function enableCSSMigration(chartType, supportedList){
        var retValue = false;
        if(chartType && supportedList && supportedList.indexOf(chartType) >-1 ){
            retValue = true;
        }
        return retValue;
    }

    function performExtraCSSMigration(className, css, cssModel){
        if(className && css && cssModel){
            var extra_support_type = "_extra_"+className+"_css";
            if(css.indexOf("."+className +"-")>-1 && cssModel.hasOwnProperty(extra_support_type)){
                var extraCSSMapping = cssModel[extra_support_type];
                for(var item in extraCSSMapping){
                    if(extraCSSMapping.hasOwnProperty(item)){
                        css = css.replace(new RegExp(item,"gm"), extraCSSMapping[item]);
                    }
                }
            }
        }
        return css;
    }

    function prepareCSSMigration(css, cssModel){
        // extra '.viz-' css suport
        css = performExtraCSSMigration("viz",css, cssModel);
        return css;
    }

    return {
        factory: function(cssModel) {
            var cssMigrator = {
                _model: cssModel,
                _migrateCSS: function(properties, chartType, css, cssModel) {
                    if (css && cssModel) {
                        css = prepareCSSMigration(css, cssModel);
                        var ruleTexts = css.split("}");
                        ruleTexts.forEach(function(rule) {
                            if (rule && rule.indexOf("{") > -1) {
                                var ruleItems = rule.split("{");
                                if (ruleItems && ruleItems.length === 2) {
                                    var cssText = ruleItems[0].trim();
                                    var cssValue = ruleItems[1];

                                    if (cssValue && cssValue.indexOf(";") > -1) {
                                        var cssSectors = cssValue.split(";");
                                        if (cssSectors && cssSectors.length > 0) {
                                            cssSectors.forEach(function(cssSector) {
                                                applyCSSProperty(properties, chartType, cssText, cssSector,cssModel);
                                            });
                                        }
                                    }
                                }
                            }
                        });
                    }
                    return properties;
                },

                migrate : function(json) {
                    if (this._model && json.css) {
                        var chartTypeWithOutPrefix = removeChartTypePrefix(json.type);
                        if (this._model.hasOwnProperty(chartTypeWithOutPrefix)) {
                            //if css migrator of this version chain can migrate
                            json.properties = this._migrateCSS(json.properties, chartTypeWithOutPrefix, json.css,
                                this._model);
                            delete json.css;
                        }
                    }
                    return json;
                }
            };

            return cssMigrator;
        }
    };
});
define('sap/viz/migrate/migrator/Migrator16to18',[ 'sap/viz/migrate/migrator/Migrator16to18Model/Properties', 'sap/viz/migrate/migrator/Migrator16to18Model/CSS',
        'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/bindingMigrator', 'sap/viz/migrate/BaseMigrator',
        'sap/viz/migrate/scaleMigrator', 'sap/viz/migrate/CSSMigrator' ], function(propertyModel, cssModel,
        versionMigrator, bindingMigrator, BaseMigrator, scaleMigrator, cssMigrator) {

    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "4.0.16";
    migrator.toVersion = "5.0.0";
                         
    migrator.chainedMigrators = [ bindingMigrator, BaseMigrator.factory(propertyModel), scaleMigrator,
            cssMigrator.factory(cssModel) ];

    return migrator;
});
define('sap/viz/migrate/migrator/Migrator18to510',[ 'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/BaseMigrator' ], function(versionMigrator,
        BaseMigrator) {
    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "5.0.0";
    migrator.toVersion = "5.1.0";
    migrator.propertyModel = {
        "info/trellis_column": {
            properties: {
                "plotArea.cellGrid.color": {
                    action: "rename",
                    to : "plotArea.grid.line.color"
                },
                "plotArea.cellGrid.size": {
                    action: "rename",
                    to : "plotArea.grid.line.size"
                },
                "plotArea.cellGrid.visible": {
                    action: "rename",
                    to : "plotArea.grid.line.visible"
                }
            }
        }
    };
    
    migrator.propertyModel["info/trellis_bar"] = 
    migrator.propertyModel["info/trellis_line"] = 
    migrator.propertyModel["info/trellis_bubble"] = 
    migrator.propertyModel["info/trellis_scatter"] = 
    migrator.propertyModel["info/trellis_stacked_column"] = 
    migrator.propertyModel["info/trellis_stacked_bar"] = 
    migrator.propertyModel["info/trellis_dual_column"] = 
    migrator.propertyModel["info/trellis_dual_line"] = 
    migrator.propertyModel["info/trellis_dual_bar"] = 
    migrator.propertyModel["info/trellis_100_stacked_column"] = 
    migrator.propertyModel["info/trellis_100_stacked_bar"] = 
    migrator.propertyModel["info/trellis_combination"] = 
    migrator.propertyModel["info/trellis_donut"] = 
    migrator.propertyModel["info/trellis_pie"] = 
    migrator.propertyModel["info/trellis_horizontal_line"] = 
    migrator.propertyModel["info/trellis_dual_horizontal_line"] = 
    migrator.propertyModel["info/trellis_horizontal_combination"] = 
    migrator.propertyModel["info/trellis_dual_stacked_column"] = 
    migrator.propertyModel["info/trellis_100_dual_stacked_column"] = 
    migrator.propertyModel["info/trellis_100_dual_stacked_bar"] = 
    migrator.propertyModel["info/trellis_dual_stacked_bar"] = 
    migrator.propertyModel["info/trellis_column"];
    migrator.chainedMigrators = [ BaseMigrator.factory(migrator.propertyModel) ];
    return migrator;
});
define('sap/viz/migrate/migrator/Migrator510to5110Model/Properties',['sap/viz/framework/common/util/ObjectUtils'],function(ObjectUtils) {
    var properties = {
        "all" : {
            properties : {
                "general.thumbnailMode":{
                    action: "rename",
                    to : "interaction.noninteractiveMode"
                }
            }
        },
        "common" : {
            properties : {
                "categoryAxis.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "categoryAxis.mouseDownShadow.color"
                },
                "tooltip.separationLine.borderBottomColor" : {
                    action : "rename",
                    to : "tooltip.separationLine.color"
                },
                "dataLabel": {
                    action: "rename",
                    to : "plotArea.dataLabel"
                },
                "categoryAxis.axisline": {
                    action: "rename",
                    to : "categoryAxis.axisLine"
                },
                "categoryAxis.lineSize": {
                    action: "rename",
                    to : "categoryAxis.axisLine.size"
                },
                "valueAxis.scale": {
                    action: "rename",
                    to: "plotArea.primaryScale"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to: "plotArea.gridline"
                },
                "background.direction": {
                    action: "rename",
                    to : "background.gradientDirection"
                },
                "background": {
                    action: "rename",
                    to : "plotArea.background"
                },
                /////////// Format String Properties /////////////
                "tooltip.formatString" : {
                    action : "changeFormatString"
                },
                "plotArea.dataLabel.formatString" : {
                    action : "changeFormatString"
                },
                "legend.formatString" : {
                    action : "changeFormatString"
                }
            }
        },
        "info/heatmap": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis2"
                },
                "categoryAxis2.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "categoryAxis2.mouseDownShadow.color"
                },
                "categoryAxis2.axisline": {
                    action: "rename",
                    to : "categoryAxis2.axisLine"
                },
                "categoryAxis2.lineSize": {
                    action: "rename",
                    to : "categoryAxis2.axisLine.size"
                }
            }
        },
        "info/area": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                }
            }
        },
        "info/horizontal_area": {
            properties: {
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                }
            }
        },
        "info/100_area": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                }
            }
        },
        "info/100_horizontal_area": {
            properties: {
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                }
            }
        },
        "info/tagcloud": {
            properties: {
                "plotArea.animation.dataLoading" : {
                    action : "remove"
                },
                "plotArea.animation.dataUpdating" : {
                    action : "remove"
                },
                "plotArea.animation.resizing" : {
                    action : "remove"
                },
            }
        },
        "combination" : {
            properties: {
                "valueAxis.axisline": {
                    action: "rename",
                    to : "valueAxis.axisLine"
                },
                "valueAxis2.axisline": {
                    action: "rename",
                    to : "valueAxis2.axisLine"
                },
                "valueAxis.lineSize": {
                    action: "rename",
                    to : "valueAxis.axisLine.size"
                }, 
                "valueAxis2.lineSize": {
                    action: "rename",
                    to : "valueAxis2.axisLine.size"
                },
                "valueAxis.scale": {
                    action: "rename",
                    to : "plotArea.primaryScale"
                },
                "valueAxis2.scale": {
                    action: "rename",
                    to : "plotArea.secondaryScale"
                }, 
                "valueAxis.label.formatString" : {
                    action : "changeFormatString"
                },
                "valueAxis2.label.formatString" : {
                    action : "changeFormatString"
                }
            }
        },
        "info/dual_combination": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2": {
                    action: "rename",
                    to : "valueAxis2"
                }
            }
        },
        "info/dual_horizontal_combination": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "xAxis2": {
                    action: "rename",
                    to : "valueAxis2"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                }
            }
        },
        "info/bullet": {
            properties: {
                "plotArea.colorPalette": {
                    action: "splitColorPalette",
                    to : ["plotArea.actualColor","plotArea.additionalColor"],
                    
                }
               
            }
        },
        "info/vertical_bullet": {
            properties: {
                "plotArea.colorPalette": {
                    action: "splitColorPalette",
                    to : ["plotArea.actualColor","plotArea.additionalColor"],
                }
             
            }
        }
    };

    ObjectUtils.extend(true, properties["info/heatmap"], properties["common"]);
    ObjectUtils.extend(true, properties["info/area"], properties["common"]);
    ObjectUtils.extend(true, properties["info/100_area"], properties["common"]);
    ObjectUtils.extend(true, properties["info/horizontal_area"], properties["common"]);
    ObjectUtils.extend(true, properties["info/100_horizontal_area"], properties["common"]);
    properties["info/trellis_area"] = properties["info/trellis_100_area"] = properties["info/area"];
    properties["info/trellis_horizontal_area"] = properties["info/trellis_100_horizontal_area"] =
        properties["info/horizontal_area"];
    ObjectUtils.extend(true, properties["info/tagcloud"], properties["common"]);
    ObjectUtils.extend(true, properties["combination"], properties["common"]);
    ObjectUtils.extend(true, properties["info/dual_combination"], properties["combination"]);
    ObjectUtils.extend(true, properties["info/dual_horizontal_combination"], properties["combination"]);

    return properties;
});

define('sap/viz/migrate/migrator/Migrator510to5110Model/CSS',[],function() {
	var css = {
		"default" : {
            ".v-m-root .v-m-title .v-title" : {
                "font-family" : "title.style.fontFamily",
                "font-size" : "title.style.fontSize",
                "font-weight" : "title.style.fontWeight",
                "fill" : "title.style.color",
                "font-style" : "title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-title" : {
                "font-family" : "legend.title.style.fontFamily",
                "font-size" : "legend.title.style.fontSize",
                "font-weight" : "legend.title.style.fontWeight",
                "fill" : "legend.title.style.color",
                "font-style" : "legend.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-label" : {
                "font-family" : "legend.label.style.fontFamily",
                "font-size" : "legend.label.style.fontSize",
                "font-weight" : "legend.label.style.fontWeight",
                "fill" : "legend.label.style.color",
                "font-style" : "legend.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-hovershadow" : {
                "fill" : "legend.hoverShadow.color"
            },
            
            ".v-m-root .v-m-main .v-m-background .v-background-body" : {
                "fill" : "plotArea.background.color"
            },

            ".v-m-root .v-m-main .v-m-background .v-background-border" : {
                "stroke" : "plotArea.background.border.stroke",
                "stroke-width" : "plotArea.background.border.strokeWidth"
            },

            ".v-m-root .v-m-tooltip .v-background" : {
                "background-color" : "tooltip.background.color",
                "border-color" : "tooltip.background.borderColor"
            },

            ".v-m-root .v-m-tooltip .v-footer-label" : {
                "color" : "tooltip.footerLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-separationline" : {
                "border-bottom-color" : "tooltip.separationLine.color"
            },

            ".v-m-root .v-m-tooltip .v-body-dimension-label" : {
                "color" : "tooltip.bodyDimensionLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-body-dimension-value" : {
                "color" : "tooltip.bodyDimensionValue.color"
            },

            ".v-m-root .v-m-tooltip .v-body-measure-label" : {
                "color" : "tooltip.bodyMeasureLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-body-measure-value" : {
                "color" : "tooltip.bodyMeasureValue.color"
            },

            ".v-m-root .v-m-tooltip .v-closeButton" : {
                "background-color" : "tooltip.closeButton.backgroundColor",
                "border-color" : "tooltip.closeButton.borderColor"
            }
        },
        "single_default" : {
            ".v-m-root .v-m-main .v-m-datalabel .v-datalabel" : {
                "font-family" : "plotArea.dataLabel.style.fontFamily",
                "font-size" : "plotArea.dataLabel.style.fontSize",
                "font-weight" : "plotArea.dataLabel.style.fontWeight",
                "fill" : "plotArea.dataLabel.style.color",
                "font-style" : "plotArea.dataLabel.style.fontStyle"
            }
        },
        "heatmap" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis2.title.style.fontFamily",
                "font-size" : "categoryAxis2.title.style.fontSize",
                "font-weight" : "categoryAxis2.title.style.fontWeight",
                "fill" : "categoryAxis2.title.style.color",
                "font-style" : "categoryAxis2.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis2.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis2.label.style.fontFamily",
                "font-size" : "categoryAxis2.label.style.fontSize",
                "font-weight" : "categoryAxis2.label.style.fontWeight",
                "fill" : "categoryAxis2.label.style.color",
                "font-style" : "categoryAxis2.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis2.hoverShadow.color"
            }
        },
        "area" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "valueAxis.hoverShadow.color"
            }

        },
        "100_area" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "valueAxis.hoverShadow.color"
            }
        },
        "horizontal_area" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },
        "100_horizontal_area" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },
        "trellis_default" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-datalabel .v-datalabel" : {
                "font-family" : "plotArea.dataLabel.style.fontFamily",
                "font-size" : "plotArea.dataLabel.style.fontSize",
                "font-weight" : "plotArea.dataLabel.style.fontWeight",
                "fill" : "plotArea.dataLabel.style.color",
                "font-style" : "plotArea.dataLabel.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-background .v-background-body" : {
                "fill" : "plotArea.background.color"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-background .v-background-border" : {
                "stroke" : "plotArea.background.border.stroke",
                "stroke-width" : "plotArea.background.border.strokeWidth"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-title" : {
                "font-family" : "columnAxis.title.style.fontFamily",
                "font-size" : "columnAxis.title.style.fontSize",
                "font-weight" : "columnAxis.title.style.fontWeight",
                "fill" : "columnAxis.title.style.color",
                "font-style" : "columnAxis.title.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-label" : {
                "font-family" : "columnAxis.label.style.fontFamily",
                "font-size" : "columnAxis.label.style.fontSize",
                "font-weight" : "columnAxis.label.style.fontWeight",
                "fill" : "columnAxis.label.style.color",
                "font-style" : "columnAxis.label.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-hovershadow" : {
                "fill" : "columnAxis.hoverShadow.color"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-title" : {
                "font-family" : "rowAxis.title.style.fontFamily",
                "font-size" : "rowAxis.title.style.fontSize",
                "font-weight" : "rowAxis.title.style.fontWeight",
                "fill" : "rowAxis.title.style.color",
                "font-style" : "rowAxis.title.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-label" : {
                "font-family" : "rowAxis.label.style.fontFamily",
                "font-size" : "rowAxis.label.style.fontSize",
                "font-weight" : "rowAxis.label.style.fontWeight",
                "fill" : "rowAxis.label.style.color",
                "font-style" : "rowAxis.label.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-hovershadow" : {
                "fill" : "rowAxis.hoverShadow.color"
            }
        },
        "trellis_vertical" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            }
        },
        "trellis_horizontal" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },
        "dual_combination" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "valueAxis.hoverShadow.color"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis2 .v-hidden-title" : {
                "fill" : "valueAxis2.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },
        
        "dual_horizontal_combination" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-hidden-title" : {
                "fill" : "valueAxis2.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        }
	};

    function extend(target, src) {
        for (var i in src) {
            if (src.hasOwnProperty(i)) {
                target[i] = src[i];
            }
        }
    }

	css["number"] = css["default"];
    extend(css["heatmap"], css["single_default"]);

    extend(css["area"], css["single_default"]);
    extend(css["horizontal_area"], css["single_default"]);
    extend(css["100_area"], css["single_default"]);
    extend(css["100_horizontal_area"], css["single_default"]);
    css["trellis_100_area"] = css["trellis_area"] = css["area"];
    css["trellis_100_horizontal_area"] = css["trellis_horizontal_area"] = css["horizontal_area"];
    extend(css["trellis_vertical"], css["trellis_default"]);
    extend(css["trellis_horizontal"], css["trellis_default"]);
    extend(css["trellis_area"], css["trellis_vertical"]);
    extend(css["trellis_horizontal_area"], css["trellis_horizontal"]);
    extend(css["trellis_100_area"], css["trellis_vertical"]);
    extend(css["trellis_100_horizontal_area"], css["trellis_vertical"]);
    css["tagcloud"] = css["default"];
    extend(css["tagcloud"], css["single_default"]);
    extend(css["dual_combination"], css["single_default"]);
    extend(css["dual_horizontal_combination"], css["single_default"]);

    return css;
});
define('sap/viz/migrate/migrator/Migrator510to5110',[ 'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/BaseMigrator',
    'sap/viz/migrate/migrator/Migrator510to5110Model/Properties','sap/viz/migrate/CSSMigrator', 
    'sap/viz/migrate/migrator/Migrator510to5110Model/CSS',
    'sap/viz/migrate/bindingMigrator'], function(versionMigrator,
        BaseMigrator, propertyModel, cssMigrator, cssModel, bindingMigrator) {
    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "5.1.0";
    migrator.toVersion = "5.11.0";
    
    migrator.chainedMigrators = [ bindingMigrator, BaseMigrator.factory(propertyModel), 
        cssMigrator.factory(cssModel)];

    return migrator;
});
define('sap/viz/migrate/migrator/Migrator5110to5160Model/Properties',['sap/viz/framework/common/util/ObjectUtils'],function(ObjectUtils) {
    var properties = {
        "all" : {
            properties : {
                "general.thumbnailMode":{
                    action: "rename",
                    to : "interaction.noninteractiveMode"
                }
            }
        },
        "common" : {
            properties : {
                "categoryAxis.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "categoryAxis.mouseDownShadow.color"
                },
                "tooltip.separationLine.borderBottomColor" : {
                    action : "rename",
                    to : "tooltip.separationLine.color"
                },
                "dataLabel": {
                    action: "rename",
                    to : "plotArea.dataLabel"
                },
                "categoryAxis.axisline": {
                    action: "rename",
                    to : "categoryAxis.axisLine"
                },
                "categoryAxis.lineSize": {
                    action: "rename",
                    to : "categoryAxis.axisLine.size"
                },
                "valueAxis.scale": {
                    action: "rename",
                    to: "plotArea.primaryScale"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to: "plotArea.gridline"
                },
                "background.direction": {
                    action: "rename",
                    to : "background.gradientDirection"
                },
                "background": {
                    action: "rename",
                    to : "plotArea.background"
                },
                /////////// Format String Properties /////////////
                "tooltip.formatString" : {
                    action : "changeFormatString"
                },
                "plotArea.dataLabel.formatString" : {
                    action : "changeFormatString"
                },
                "legend.formatString" : {
                    action : "changeFormatString"
                }
            }
        },
    };

    return properties;
});

define('sap/viz/migrate/migrator/Migrator5110to5160Model/CSS',[],function() {
    var css = {
        "default" : {
            ".v-m-root .v-m-title .v-title" : {
                "font-family" : "title.style.fontFamily",
                "font-size" : "title.style.fontSize",
                "font-weight" : "title.style.fontWeight",
                "fill" : "title.style.color",
                "font-style" : "title.style.fontStyle"
            },
            ".v-m-root .v-m-legends .v-m-legend .v-title" : {
                "font-family" : "legend.title.style.fontFamily",
                "font-size" : "legend.title.style.fontSize",
                "font-weight" : "legend.title.style.fontWeight",
                "fill" : "legend.title.style.color",
                "font-style" : "legend.title.style.fontStyle"
            },
            ".v-m-root .v-m-legends .v-m-legend .v-label" : {
                "font-family" : "legend.label.style.fontFamily",
                "font-size" : "legend.label.style.fontSize",
                "font-weight" : "legend.label.style.fontWeight",
                "fill" : "legend.label.style.color",
                "font-style" : "legend.label.style.fontStyle"
            },
            ".v-m-root .v-m-legends .v-m-legend .v-hovershadow" : {
                "fill" : "legend.hoverShadow.color"
            },
            ".v-m-root .v-m-main .v-m-background .v-background-body" : {
                "fill" : "plotArea.background.color"
            },
            ".v-m-root .v-m-main .v-m-background .v-background-border" : {
                "stroke" : "plotArea.background.border.stroke",
                "stroke-width" : "plotArea.background.border.strokeWidth"
            },
            ".v-m-root .v-m-tooltip .v-background" : {
                "background-color" : "tooltip.background.color",
                "border-color" : "tooltip.background.borderColor"
            },
            ".v-m-root .v-m-tooltip .v-footer-label" : {
                "color" : "tooltip.footerLabel.color"
            },
            ".v-m-root .v-m-tooltip .v-separationline" : {
                "border-bottom-color" : "tooltip.separationLine.color"
            },
            ".v-m-root .v-m-tooltip .v-body-dimension-label" : {
                "color" : "tooltip.bodyDimensionLabel.color"
            },
            ".v-m-root .v-m-tooltip .v-body-dimension-value" : {
                "color" : "tooltip.bodyDimensionValue.color"
            },
            ".v-m-root .v-m-tooltip .v-body-measure-label" : {
                "color" : "tooltip.bodyMeasureLabel.color"
            },
            ".v-m-root .v-m-tooltip .v-body-measure-value" : {
                "color" : "tooltip.bodyMeasureValue.color"
            },
            ".v-m-root .v-m-tooltip .v-closeButton" : {
                "background-color" : "tooltip.closeButton.backgroundColor",
                "border-color" : "tooltip.closeButton.borderColor"
            }
        },
        "single_default" : {
            ".v-m-root .v-m-main .v-m-datalabel .v-datalabel" : {
                "font-family" : "plotArea.dataLabel.style.fontFamily",
                "font-size" : "plotArea.dataLabel.style.fontSize",
                "font-weight" : "plotArea.dataLabel.style.fontWeight",
                "fill" : "plotArea.dataLabel.style.color",
                "font-style" : "plotArea.dataLabel.style.fontStyle"
            }
        },
        "area" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "valueAxis.hoverShadow.color"
            }
        },
        "100_area" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "valueAxis.hoverShadow.color"
            }
        },
        "horizontal_area" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },
        "100_horizontal_area" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        }
	};

    function extend(target, src) {
        for (var i in src) {
            if (src.hasOwnProperty(i)) {
                target[i] = src[i];
            }
        }
    }

    
    extend(css["area"], css["single_default"]);
    extend(css["horizontal_area"], css["single_default"]);
    extend(css["100_area"], css["single_default"]);
    extend(css["100_horizontal_area"], css["single_default"]);
    css["trellis_100_area"] = css["trellis_area"] = css["area"];
    css["trellis_100_horizontal_area"] = css["trellis_horizontal_area"] = css["horizontal_area"];
    extend(css["trellis_vertical"], css["trellis_default"]);
    extend(css["trellis_horizontal"], css["trellis_default"]);
    extend(css["trellis_area"], css["trellis_vertical"]);
    extend(css["trellis_horizontal_area"], css["trellis_horizontal"]);
    extend(css["trellis_100_area"], css["trellis_vertical"]);
    extend(css["trellis_100_horizontal_area"], css["trellis_vertical"]);

    return css;
});

define('sap/viz/migrate/migrator/Migrator5110to5160',['sap/viz/migrate/migrator/versionMigrator',
        'sap/viz/migrate/BaseMigrator',
        'sap/viz/migrate/migrator/Migrator5110to5160Model/Properties',
        'sap/viz/migrate/CSSMigrator', 
        'sap/viz/migrate/migrator/Migrator5110to5160Model/CSS',
        'sap/viz/migrate/bindingMigrator'], 
        function(versionMigrator,
                 BaseMigrator, 
                 propertyModel, 
                 cssMigrator, 
                 cssModel, 
                 bindingMigrator) {
    var migrator = Object.create(versionMigrator);
    //TODO: set below to correct version
    migrator.fromVersion = "5.11.0";
    migrator.toVersion = "5.16.0";
    
    migrator.chainedMigrators = [ bindingMigrator, BaseMigrator.factory(propertyModel), 
        cssMigrator.factory(cssModel)];

    return migrator;
});
define('sap/viz/migrate/migrator/Migrator5290to5300Model/Properties',['sap/viz/framework/common/util/ObjectUtils'],function(ObjectUtils) {
    var properties = {
        "all" : {
            properties : {
                "plotArea.lineStyle":{
                    action: "migrateSeriesStyle",
                    to : "plotArea.seriesStyle",
                    subProp:"line"
                },
                "plotArea.line.style":{
                    action: "migrateSeriesStyle",
                    to : "plotArea.seriesStyle",
                    subProp:"line"
                },
                "plotArea.areaStyle":{
                    action: "migrateSeriesStyle",
                    to : "plotArea.seriesStyle",
                    subProp:"area"
                }
            }
        }
    };
        

    return properties;
});

define('sap/viz/migrate/migrator/Migrator5290to5300',[ 'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/BaseMigrator',
    'sap/viz/migrate/migrator/Migrator5290to5300Model/Properties'], function(versionMigrator,
        BaseMigrator, propertyModel) {
    var migrator = Object.create(versionMigrator);
    //TODO: set below to correct version
    migrator.fromVersion = "5.16.0";
    migrator.toVersion = "5.30.0";
    
    migrator.chainedMigrators = [ BaseMigrator.factory(propertyModel)];

    return migrator;
});
define('sap/viz/migrate/migrator/Migrator5300to6000Model/Properties',['sap/viz/framework/common/util/ObjectUtils'],function(ObjectUtils) {
    var properties = {
        "all" : {
            properties : {
                "general.thumbnailMode":{
                    action: "rename",
                    to : "interaction.noninteractiveMode"
                }
            }
        },
        "common" : {
            properties : {
                "categoryAxis.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "categoryAxis.mouseDownShadow.color"
                },
                "tooltip.separationLine.borderBottomColor" : {
                    action : "rename",
                    to : "tooltip.separationLine.color"
                },
                "dataLabel": {
                    action: "rename",
                    to : "plotArea.dataLabel"
                },
                "categoryAxis.axisline": {
                    action: "rename",
                    to : "categoryAxis.axisLine"
                },
                "categoryAxis.lineSize": {
                    action: "rename",
                    to : "categoryAxis.axisLine.size"
                },
                "valueAxis.scale": {
                    action: "rename",
                    to: "plotArea.primaryScale"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to: "plotArea.gridline"
                },
                "background.direction": {
                    action: "rename",
                    to : "background.gradientDirection"
                },
                "background": {
                    action: "rename",
                    to : "plotArea.background"
                },
                /////////// Format String Properties /////////////
                "tooltip.formatString" : {
                    action : "changeFormatString"
                },
                "plotArea.dataLabel.formatString" : {
                    action : "changeFormatString"
                },
                "legend.formatString" : {
                    action : "changeFormatString"
                }
            }
        },
        "info/waterfall": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/horizontal_waterfall": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                }
            }
        },
        "info/radar" : {
            properties : {
                "plotArea.polarAxis.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "plotArea.polarAxis.mouseDownShadow.color"
                },
                "tooltip.separationLine.borderBottomColor" : {
                    action : "rename",
                    to : "tooltip.separationLine.color"
                },
                "dataLabel": {
                    action: "rename",
                    to : "plotArea.dataLabel"
                },
                "plotArea.polarAxis.axisline": {
                    action: "rename",
                    to : "plotArea.polarAxis.axisLine"
                },
                "plotArea.polarAxis.lineSize": {
                    action: "rename",
                    to : "plotArea.polarAxis.axisLine.size"
                },
                "plotArea.valueAxis.scale": {
                    action: "rename",
                    to: "plotArea.primaryScale"
                },
                "plotArea.valueAxis.gridline": {
                    action: "rename",
                    to: "plotArea.gridline"
                },
                "background.direction": {
                    action: "rename",
                    to : "background.gradientDirection"
                },
                "background": {
                    action: "rename",
                    to : "plotArea.background"
                },
                "tooltip.formatString" : {
                    action : "changeFormatString"
                },
                "plotArea.dataLabel.formatString" : {
                    action : "changeFormatString"
                },
                "plotArea.valueAxis.label.formatString" : {
                    action : "changeFormatString"
                },
                "legend.formatString" : {
                    action : "changeFormatString"
                }
            }
        }
    };
    ObjectUtils.extend(true, properties["info/waterfall"], properties["common"]);
    ObjectUtils.extend(true, properties["info/horizontal_waterfall"], properties["common"]);
    properties["info/stacked_waterfall"] = properties["info/waterfall"];
    properties["info/horizontal_stacked_waterfall"] = properties["info/horizontal_waterfall"];
    properties["info/trellis_radar"] = properties["info/radar"];

    return properties;
});

define('sap/viz/migrate/migrator/Migrator5300to6000Model/CSS',[],function() {
    var css = {
        "default" : {
            ".v-m-root .v-m-title .v-title" : {
                "font-family" : "title.style.fontFamily",
                "font-size" : "title.style.fontSize",
                "font-weight" : "title.style.fontWeight",
                "fill" : "title.style.color",
                "font-style" : "title.style.fontStyle"
            },
            ".v-m-root .v-m-legends .v-m-legend .v-title" : {
                "font-family" : "legend.title.style.fontFamily",
                "font-size" : "legend.title.style.fontSize",
                "font-weight" : "legend.title.style.fontWeight",
                "fill" : "legend.title.style.color",
                "font-style" : "legend.title.style.fontStyle"
            },
            ".v-m-root .v-m-legends .v-m-legend .v-label" : {
                "font-family" : "legend.label.style.fontFamily",
                "font-size" : "legend.label.style.fontSize",
                "font-weight" : "legend.label.style.fontWeight",
                "fill" : "legend.label.style.color",
                "font-style" : "legend.label.style.fontStyle"
            },
            ".v-m-root .v-m-legends .v-m-legend .v-hovershadow" : {
                "fill" : "legend.hoverShadow.color"
            },
            ".v-m-root .v-m-main .v-m-background .v-background-body" : {
                "fill" : "plotArea.background.color"
            },
            ".v-m-root .v-m-main .v-m-background .v-background-border" : {
                "stroke" : "plotArea.background.border.stroke",
                "stroke-width" : "plotArea.background.border.strokeWidth"
            },
            ".v-m-root .v-m-tooltip .v-background" : {
                "background-color" : "tooltip.background.color",
                "border-color" : "tooltip.background.borderColor"
            },
            ".v-m-root .v-m-tooltip .v-footer-label" : {
                "color" : "tooltip.footerLabel.color"
            },
            ".v-m-root .v-m-tooltip .v-separationline" : {
                "border-bottom-color" : "tooltip.separationLine.color"
            },
            ".v-m-root .v-m-tooltip .v-body-dimension-label" : {
                "color" : "tooltip.bodyDimensionLabel.color"
            },
            ".v-m-root .v-m-tooltip .v-body-dimension-value" : {
                "color" : "tooltip.bodyDimensionValue.color"
            },
            ".v-m-root .v-m-tooltip .v-body-measure-label" : {
                "color" : "tooltip.bodyMeasureLabel.color"
            },
            ".v-m-root .v-m-tooltip .v-body-measure-value" : {
                "color" : "tooltip.bodyMeasureValue.color"
            },
            ".v-m-root .v-m-tooltip .v-closeButton" : {
                "background-color" : "tooltip.closeButton.backgroundColor",
                "border-color" : "tooltip.closeButton.borderColor"
            }
        },
        "single_default" : {
            ".v-m-root .v-m-main .v-m-datalabel .v-datalabel" : {
                "font-family" : "plotArea.dataLabel.style.fontFamily",
                "font-size" : "plotArea.dataLabel.style.fontSize",
                "font-weight" : "plotArea.dataLabel.style.fontWeight",
                "fill" : "plotArea.dataLabel.style.color",
                "font-style" : "plotArea.dataLabel.style.fontStyle"
            }
        },
        "waterfall" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "valueAxis.hoverShadow.color"
            }
        },
        "horizontal_waterfall" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },
        "radar" : {
            ".v-m-root .v-m-main .v-m-plot .v-polar-axis-title" : {
                "font-family" : "plotArea.polarAxis.title.style.fontFamily",
                "font-size" : "plotArea.polarAxis.title.style.fontSize",
                "font-weight" : "plotArea.polarAxis.title.style.fontWeight",
                "fill" : "plotArea.polarAxis.title.style.color",
                "font-style" : "plotArea.polarAxis.title.style.fontStyle"
            },
            ".v-m-root .v-m-main .v-m-plot .v-polar-axis-hovershadow" : {
                "fill" : "plotArea.polarAxis.hoverShadow.color"
            },
            ".v-m-root .v-m-main .v-m-plot .v-title" : {
                "font-family" : "plotArea.valueAxis.title.style.fontFamily",
                "font-size" : "plotArea.valueAxis.title.style.fontSize",
                "font-weight" : "plotArea.valueAxis.title.style.fontWeight",
                "fill" : "plotArea.valueAxis.title.style.color",
                "font-style" : "plotArea.valueAxis.title.style.fontStyle"
            }
        },
        "trellis_radar" : {
            ".v-m-root>.v-m-main>.v-m-yAxis .v-label" : {
                "font-family" : "rowAxis.label.style.fontFamily",
                "font-size" : "rowAxis.label.style.fontSize",
                "font-weight" : "rowAxis.label.style.fontWeight",
                "fill" : "rowAxis.title.label.color",
                "font-style" : "rowAxis.label.style.fontStyle"
            },
            ".v-m-root>.v-m-main>.v-m-yAxis .v-title" : {
                "font-family" : "rowAxis.title.style.fontFamily",
                "font-size" : "rowAxis.title.style.fontSize",
                "font-weight" : "rowAxis.title.style.fontWeight",
                "fill" : "rowAxis.title.title.color",
                "font-style" : "rowAxis.title.style.fontStyle"
            },
            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-label" : {
                "font-family" : "columnAxis.label.style.fontFamily",
                "font-size" : "columnAxis.label.style.fontSize",
                "font-weight" : "columnAxis.label.style.fontWeight",
                "fill" : "columnAxis.title.label.color",
                "font-style" : "columnAxis.label.style.fontStyle"
            },
            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-title" : {
                "font-family" : "columnAxis.title.style.fontFamily",
                "font-size" : "columnAxis.title.style.fontSize",
                "font-weight" : "columnAxis.title.style.fontWeight",
                "fill" : "columnAxis.title.title.color",
                "font-style" : "columnAxis.title.style.fontStyle"
            }
        }
    };

    function extend(target, src) {
        for (var i in src) {
            if (src.hasOwnProperty(i)) {
                target[i] = src[i];
            }
        }
    }
    
    extend(css["radar"], css["default"]);
    extend(css["trellis_radar"], css["default"]);
    extend(css["waterfall"], css["single_default"]);
    extend(css["horizontal_waterfall"], css["single_default"]);
    return css;
});

define('sap/viz/migrate/migrator/Migrator5300to6000',['sap/viz/migrate/migrator/versionMigrator',
        'sap/viz/migrate/BaseMigrator',
        'sap/viz/migrate/migrator/Migrator5300to6000Model/Properties',
        'sap/viz/migrate/CSSMigrator', 
        'sap/viz/migrate/migrator/Migrator5300to6000Model/CSS'], 
        function(versionMigrator,
                 BaseMigrator, 
                 propertyModel, 
                 cssMigrator, 
                 cssModel) {
    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "5.30.0";
    migrator.toVersion = "6.0.0";
    


    migrator.chainedMigrators = [ BaseMigrator.factory(propertyModel), cssMigrator.factory(cssModel)];

    return migrator;
});
define('sap/viz/migrate/migrator/Migrator6000to6100Model/Properties',['sap/viz/framework/common/util/ObjectUtils'],function(ObjectUtils) {
    var properties = {
        "info/pie" : {
            properties : {
                "plotArea.sliceRenderer": {
                    action: "rename",
                    to : "plotArea.markerRenderer"
                }
            }
        }
    };
    
    properties["info/trellis_pie"] = properties["info/pie"];
    properties["info/trellis_donut"] = properties["info/pie"];
    properties["info/donut"] = properties["info/pie"];
    return properties;
});

define('sap/viz/migrate/migrator/Migrator6000to6100',[ 'sap/viz/migrate/migrator/versionMigrator',
         'sap/viz/migrate/BaseMigrator',
         'sap/viz/migrate/migrator/Migrator6000to6100Model/Properties'], 
function(versionMigrator,
          BaseMigrator,
          propertyModel) {
    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "6.0.0";
    migrator.toVersion = "6.10.0";
    
    migrator.chainedMigrators = [ BaseMigrator.factory(propertyModel)];

    return migrator;
});
define('sap/viz/migrate/MigrationTool',['sap/viz/migrate/migrator/Migrator10to12',
    'sap/viz/migrate/migrator/Migrator12to16',
    'sap/viz/migrate/migrator/Migrator16to18',
    'sap/viz/migrate/migrator/Migrator18to510',
    'sap/viz/migrate/migrator/Migrator510to5110',
    'sap/viz/migrate/migrator/Migrator5110to5160',
    'sap/viz/migrate/migrator/Migrator5290to5300',
    'sap/viz/migrate/migrator/Migrator5300to6000',
    'sap/viz/migrate/migrator/Migrator6000to6100',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils'
], function(Migrator1,
            Migrator2, 
            Migrator3, 
            Migrator4, 
            Migrator5, 
            Migrator6,
            Migrator7,
            Migrator8,
            Migrator9,  
            ObjectUtils, 
            TypeUtils) {

    var _APICallMigrationFromVersion = "4.0.16";
    
    var migrators = (function init() {
        var migrators = {};
        [Migrator1, Migrator2, Migrator3, 
         Migrator4, Migrator5, Migrator6,
         Migrator7,Migrator8, Migrator9].
            forEach(function(versionMigrator) {
            migrators[versionMigrator.fromVersion] = versionMigrator;
        });
        return migrators;
    }());
    
    return {
        _getVersion: function(json) {
            if (!json) {
                return json;
            }
            var version = json.version,
                versionArray;
            // Migration Tool only checks first 3 version numbers without build number (e.g. 4.0.10)
            // to perform the migration.
            if (version && version.split) {
                versionArray = version.split('.');
                if (versionArray.length === 4) {
                    return versionArray[0] + '.' + versionArray[1] + '.' + versionArray[2];
                }
            }
            return version;
        },

        _getMigrator: function(fromVersion) {
            if(migrators[fromVersion] === undefined){
                var version, targetVersion;
                for(version in migrators){
                    if(this._isVersionGreaterThan(fromVersion, version)){
                        targetVersion = version;
                    }else{
                        return migrators[targetVersion];
                    }
                }
                if(this._isVersionGreaterThan(migrators[version].toVersion, fromVersion)){
                    return migrators[targetVersion];
                }else{
                    return null;
                }
            }
            else{
                return migrators[fromVersion];
            }
        },

        _isVersionGreaterThan: function(version1, version2){
            var i;
            var version1Arr = version1.split(".");
            var version2Arr = version2.split(".");
            var arrLength = Math.min(version1Arr.length, version2Arr.length);
            for(i = 0; i < arrLength; i++){
                if(TypeUtils.isNaN(version1Arr[i]) || TypeUtils.isNaN(version2Arr[i])){
                    if(version1Arr[i] > version2Arr[i]){
                        return true;
                    }else if(version1Arr[i] < version2Arr[i]){
                        return false;
                    }
                }else{
                    if(parseFloat(version1Arr[i]) > parseFloat(version2Arr[i])){
                        return true;
                    }else if(parseFloat(version1Arr[i]) < parseFloat(version2Arr[i])){
                        return false;
                    }
                }
            }
            if(version1Arr.length > version2Arr.length){
                return true;
            }else {
                return false;
            }
        },

        getCurrentVersion: function(){
            var versionArr = Object.keys(migrators);
            var currentVersion = versionArr[0];
            if(versionArr.length === 1){
                return currentVersion.toVersion;
            }
            for(var i = 1; i < versionArr.length; i++){
                if(this._isVersionGreaterThan(versionArr[i], currentVersion)){
                    currentVersion = versionArr[i];
                }
            }
            return migrators[currentVersion].toVersion;
        },

        migrate: function(inputJson) {
            if (!inputJson) {
                return inputJson;
            }

            // deep clone the original JSON
            var json = {};
            for ( var key in inputJson) {
                if (inputJson.hasOwnProperty(key)) {
                    // For the data and container, they are not involved in migration.
                    // We simply use the original to speed up. 
                    if (key === 'data' || key === 'container') {
                        json[key] = inputJson[key];
                    } else {
                        json[key] = ObjectUtils.clone(inputJson[key], true);
                    }
                }
            }
            
            var version = this._getVersion(json),
                migrator,
                isAPICall = false;

            if (version === undefined ) {
                version = _APICallMigrationFromVersion;
                isAPICall = true;
            }
            while (version && (migrator = this._getMigrator(version))) {
                json = migrator.migrate(json, isAPICall);
                version = this._getVersion(json);
            }
            if (isAPICall) {
                delete json.version;
            }

            return json;
        }
    };
});

define('sap/viz/api/core/VizInstance',[
    'jquery',
    'sap/viz/framework/core/ChartApp',
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/extension/ExtensionUtils',
    'sap/viz/migrate/MigrationTool',
    'exports'
], function(
    jQuery,
    ChartApp,
    FunctionUtils,
    ObjectUtils,
    TypeUtils,
    Constants,
    ExtensionUtils,
    MigrationTool
) {
    
        "use strict";
    
        var CROSSTABLEDATASET = 'CrosstableDataset';
        var FLATTABLEDATASET = 'FlatTableDataset';

        function isValidLevel(level){
            return level === Constants.PROPERTY.USER_LEVEL;
        }

        /**
         * sap.viz.api.core.VizInstance
         * @namespace sap.viz.api.core.VizInstance
         */
        var vizInstance = function (ChartViewRegistry, param) {
            this.__className = "sap.viz.api.core.VizInstance";

            this.app = new ChartApp(ChartViewRegistry);
            this.app.init(param);
            this.app.render({bNoRender: param.bNoRender, disableIntervalSizeCheck: param.disableIntervalSizeCheck});
        };

        vizInstance.prototype = {
            size: function (size) {
                if (!arguments.length) {
                    return this.app.size();
                }
                this.app.size(size, true === arguments[1]);
                return this;
            },
            destroy: function () {
                this.app.destroy();
                this.app = null;
            },
            feedingZone: function () {
                return this.app.getAllFeedingZone();
            },
            propertyZone: function () {
                return this.app.getPropertyZone();
            },
            data: function (data) {
                if (arguments.length > 0) {
                    this.app.update({
                        data: data
                    });
                    return this;
                } else {
                    return this.app.data();
                }
            },
            description: function () {
                return this.app.getDescription();
            },
            bindings: function (bindings) {
                if (arguments.length > 0) {
                    this.app.update({
                        bindings: bindings
                    });
                    return this;
                } else {
                    return this.app.bindings();
                }
            },
            _getDataRange: function(start, end){
                return this.app._getDataRange(start, end);  
            },
            /**
             * Setting/getting scales
             * When no arguments, return all scales.
             * When argument "scales" is valid, merge it into existing user setting scales.
             * When options.level is valid, return specific level scales.
             * When options.level is valid and options.replace is true,
             * replace existing sacels of this level with the input scales.
             * When there is only one argument or invalid arguments, return this vizInstance;
             * otherwise, return current scales (of specific level if options.level is valid) or empty array
             *
             * @function scales
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Object} [scales] Scales settings.
             * @param {Object} [options] extra options, only support "level" and "replace" for now.
             * @returns {Object} Scales settings of current vizInstance.
             * <pre>
             * [
             *  {
             *    "feed": "valueAxis", //feed named "valueAxis"
             *    "type": "linear", // currently not working
             *    "min": 0, // min value of the scale
             *    "max": 300 // max value of the scale
             *  }, {
             *    "feed": "color", // feed named "color"
             *    "type": "color", // currently not working
             *    "palette": ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"] // color palette
             *  }
             * ]
             * </pre>
             */
            scales: function (scales, options) {
                var argLen = arguments.length;
                // invalid input do nothing
                if(argLen && !TypeUtils.isArray(scales)){
                    return this;
                }
                // Do set/reset
                if(argLen){
                    var args = {
                        scales: scales
                    };
                    if(argLen > 1){
                        args.scalesOption = options;
                    }
                    this.update(args);
                }
                // For backward compatibility
                if(argLen === 1){
                    return this;
                }
                // level is a strict parameter, if not explicitly specified, return empty object.
                if(argLen > 1 && !isValidLevel(options && options.level)){
                    return [];
                }
                // Do get
                if(options){
                    options = ObjectUtils.extend({}, options);
                    options.replace = false;
                }
                return this.app.scales(null, options);
            },
            _getValueScales: function(){
                return this.app._getValueScales();  
            },
            sharedRuntimeScales: function (sharedRuntimeScales){
                if (arguments.length > 0){
                    this.app.update({
                        sharedRuntimeScales: sharedRuntimeScales
                    });
                    return this;
                } else {
                    return this.app.sharedRuntimeScales();
                }
            },
            runtimeScales: function (){
                return this.app.runtimeScales.apply(this.app, arguments);
            },
            on: function (evtType, callback, scope) {
                return this.app.on(evtType, callback, scope);
            },
            off: function (evtType) {
                return this.app.off(evtType);
            },
            update: function (updates) {
                if(updates === true){
                    //Some App use chart.update(true) to refresh chart. 
                    this.app.refresh();
                    return this;
                } else if (arguments.length > 0) {
                    var json;
                    var options = arguments[0];
                    if(!options.hasOwnProperty("type") && this.app && this.app.type()){
                        options.type = this.app.type();
                    }
                    json = MigrationTool.migrate(options);
                    this.app.update(json);
                    return this;
                }
            },

            states: function() {
                if (arguments.length > 0) {
                    this.app.states(arguments[0]);
                    return this;
                } else {
                    return this.app.states();
                }
            },

            template: function(templateId){
                if(arguments.length){
                    this.app.update({
                        template: templateId
                    });
                    return this;
                }
                return this.app.template();
            },
            
            /**
             * Get/Set chart customizations
             * @function customizations
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Object} Customization settings with id,  customOverlayProperties , 
             *      customRendererProperties, customInteractionProperties. 
             * @example <caption>Sample Code:</caption>
             * VizInstance.customizations({id : id, customOverlayProperties: { indicatorColor : "#FF0000"}, 
             *  customRendererProperties:{'custom.markerRenderer':[{ctx:[],properties:{}}]},
             *  customInteractionProperties:{'custom.infobar.interaction': 
             *      {highlighter: "#0000FF"});
             * @returns {Objet} Current used customizations id ,  customOverlayProperties,  
             * customRenderProperties and customInteractionProperties which is using.
             */
            customizations: function(obj){
                if(arguments.length === 0){
                    return this.app.customizations();
                }else{
                    this.app.update({
                        customizations: obj
                    });
                }
            },

            /**
             * Setting/getting properties
             * When no arguments, return all properties.
             * When the first argument "props" is valid, merge it into existing user setting properties.
             * When options.level is valid, return specific level properties.
             * When options.level is valid and options.replace is true,
             * replace existing properties of this level with the input properties.
             * When there is only one argument or arguments are invalid, return this vizInstance;
             * otherwise, return current properties (of specific level if options.level is valid) or empty object.
             *
             * @function properties
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Object} [props] Scales settings.
             * @param {Object} [options] extra options, only support "level" and "replace" for now.
             * @returns {Object} Properties of current vizInstance.
             */
            properties: function (props, options) {
                var argLen = arguments.length;
                if(argLen && !TypeUtils.isPlainObject(props)){
                    // Invalid input, do nothing
                    return this;
                }
                // Do set/reset
                if(argLen){
                    var args = {
                        properties: props
                    };
                    if(argLen > 1){
                        args.propertiesOption = options;
                    }
                    this.update(args);
                }
                // For backward compatibility
                if(argLen === 1){
                    return this;
                }
                // level is a strict parameter, if not explicitly specified, return empty object.
                if(argLen > 1 && !isValidLevel(options && options.level)){
                    return {};
                }
                // Do get
                if(options){
                    options = ObjectUtils.extend({}, options);
                    options.replace = false;
                }
                return this.app.properties(null, options);
            },
            selection: function () {
                var items = null;
                var selOptions = null;

                var isGet = false;
                if (arguments.length <= 0) {
                    isGet = true;
                } else if (arguments.length <= 1) {
                    if (arguments[0] instanceof Array) {
                        isGet = false;
                        items = arguments[0];
                    } else {
                        isGet = true;
                        selOptions = arguments[0];
                    }
                } else {
                    isGet = false;
                    items = arguments[0];
                    selOptions = arguments[1];
                }

                var reValue;
                if (isGet) {
                    reValue = this.app.getSelectedObjects(selOptions);
                } else {
                    reValue = this.app.setSelectedObjects(items, selOptions);
                }
                return reValue;
            },
            /**
             * Export chart instance into a JSON object which contains
             * all information of the chart including type, data, properties,
             * css, feeding, and size.
             * @function toJSON
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @deprecated
             * @returns {Object}  VizDoc object that contains all the information of VizInstance.
             * <pre>
             * {
             *   "type": String, //refer to chartproperty for all supported viz chart TypeUtils
             *   "properties": {}, //refer to chartproperty for all supported options for each viz type
             *   "css": String, //refer to chartproperty  or all supported css items for each viz type
             *   "size": {
             *         "auto": Boolean, // When "auto" is true, chart will use parent container size.
             *                          // When "auto" is false, the setting of "width" and "height" take precedence .
             *         "width": Number, // Width of chart, only works when 'auto' is true
             *         "height": Number // Height of chart, only works when 'auto' is true
             *      },
             *   "data": {
             *         "type":"Crosstable"|"FlatTable",
             *         "val":dataset
             *         },
             *   "feeding": {@link sap.viz.api.core.VizInstance#feeding}
             * }
             * </pre>
             */
            toJSON: function (options) {
                var doc = {};
                doc.type = this.app.type();
                var dsJSON = this.app.data();
                if(dsJSON.toJSON){
                    dsJSON = dsJSON.toJSON(options);
                }
                var type;
                if (dsJSON.id === 'sap.viz.data.CrosstableDataset') {
                    type = 'Crosstable';
                } else if (dsJSON.id === 'sap.viz.data.FlatTableDataset') {
                    type = 'FlatTable';
                }
                doc.data = {
                    type: type,
                    val: dsJSON.data||dsJSON,
                    info: dsJSON.info
                };
                doc.properties = this.app.serializeProps();
                if(this.app.customizations()) {
                    var serializedCustomization = this.app.serializeCustomization();
                    if (serializedCustomization) {
                        doc.customizations = serializedCustomization;
                    }
                }
                
                doc.bindings = this.bindings();
                doc.scales = this.app.serializeScales();
                doc.size = this.app.size();
                doc.template = this.app.template();
                
                var bundleVersion = ExtensionUtils.getBundleVersion(doc.type);
                if (bundleVersion) {
                    doc.bundleVersion = bundleVersion;
                }
                if (sap.viz.api.hasOwnProperty('VERSION')) {
                    doc.version = sap.viz.api.VERSION;
                }
                return doc;
            },
            /**
             * Export the current viz as SVG String.
             * The viz is ready to be exported to svg ONLY after the "initialized" event is dispatched.
             * Any attempt to export to svg before that will result in an empty svg string.
             * @param {Object} [option] 
             * <pre>
             * {
             *     width: Number - the exported svg will be scaled to the specific width.
             *     height: Number - the exported svg will be scaled to the specific height.
             *     hideTitleLegend: Boolean - flag to indicate if the exported svg 
             *     includes the original title and legend.
             *     hideAxis: Boolean - flag to indicate if the exported svg includes the original axis.
             * }
             * </pre>
             * @return {String} the SVG string of the current viz or empty svg if error occurs.
             * @ignore
             */
            exportToSVGString: function (option) {
                return this.app.exportToSVGString(option);
            },

            supportExportToSVG: function () {
                return this.app.supportExportToSVG();
            },
            
            selectedPropertyZone: function(sel) {
                if (arguments.length){
                    this.app.setSelectedPropertyZone.apply(this.app, arguments);
                    return this;
                } else {
                    return this.app.getSelectedPropertyZone();
                }
            }
        };
        return vizInstance;
    });

define('sap/viz/framework/chartmodel/feed/feed',['sap/viz/framework/common/util/FunctionUtils'],
    function Setup(FunctionUtils) {

        return function(feedId, feedName, type, min, max, aaIndex, acceptMND, mgIndex, maxStackedDims, minStackedDims) {

            var _feedId = feedId;
            var _feedName = feedName;
            var _type = type;
            var _min = min;
            var _max = max;
            var _aaIndex = aaIndex;
            var _acceptMND = acceptMND;
            var _mgIndex = mgIndex;
            var _maxStackedDims = maxStackedDims;
            var _minStackedDims = minStackedDims;

            var _data = [];

            function feed() {
                return feed;
            }

            feed.feedId = function(_) {
                if (!arguments.length) {
                    return _feedId;
                }

                _feedId = _;

                return feed;
            };

            feed.feedName = function(_) {
                if (!arguments.length) {
                    return _feedName;
                }

                _feedName = _;

                return feed;
            };

            feed.type = function(_) {
                if (!arguments.length) {
                    return _type;
                }

                _type = _;

                return feed;
            };

            feed.min = function(_) {
                if (!arguments.length) {
                    return _min;
                }

                _min = _;
                return feed;
            };

            feed.max = function(_) {
                if (!arguments.length) {
                    return _max;
                }


                _max = _;

                return feed;
            };

            feed.analysisAxisIndex = function(_) {
                if (!arguments.length) {
                    return _aaIndex;
                }


                _aaIndex = _;

                return feed;
            };

            feed.measureGroupIndex = function(_) {
                if (!arguments.length) {
                    return _mgIndex;
                }

                _mgIndex = _;

                return feed;
            };

            feed.acceptMND = function(_) {
                if (!arguments.length) {
                    return _acceptMND;
                }


                _acceptMND = _;

                return feed;
            };

            feed.maxStackedDims = function(_) {
                if (!arguments.length) {
                    return _maxStackedDims;
                }

                _maxStackedDims = _;

                return feed;
            };
            feed.minStackedDims = function(_) {
                if (!arguments.length) {
                    return _minStackedDims;
                }

                _minStackedDims = _;

                return feed;
            };

            feed.data = function(_) {
                if (!arguments.length) {
                    return _data;
                }

                _data = _;

                return feed;
            };


            feed.addData = function(_) {
                _data.push(_);
                return feed;
            };

            feed.getMeasureNames = function() {

                var mgIndex = _mgIndex - 1;
                var measureNames = [];
                for (var i = 0; i < _data.length; i++) {
                    measureNames.push({
                        'val': _data[i]['name'],
                        'ctx': {
                            'mg': mgIndex,
                            'mi': i
                        }
                    });
                }

                return measureNames;
            };

            feed.getMeasureValues = function() {
                var values = [];
                if (_data.length > 0) {
                    return _data[0].getMeasureValues();
                }

                return values;

            };

            feed.getMeasureCount = function() {
                return _data.length;
            };

            /**
             * @returns check if the feed has been feeded MND
             */
            feed.hasMNDFeeded = function() {

                var data = feed.data();
                for (var i = 0; i < data.length; i++) {
                    if (data[i].getType() === "measureNamesDimension") {
                        return true;
                    }
                }

                return false;
            };

            feed.hasFeeded = function() {
                return feed.data().length > 0 ? true : false;
            };

            feed.getIndex = function() {
                return feed.analysisAxisIndex() ? feed.analysisAxisIndex() : feed.measureGroupIndex();
            };

            feed.getDataCount = function() {
                if (feed.type() === "Dimension") {
                    return feed.data().length;
                } else {
                    return feed.data().length > 0 ? feed.data()[0].getMeasureValues().length : 0;
                }

            };

            return feed;
        };

    });
define('sap/viz/framework/chartmodel/description/DataContainer',[],
    function Setup() {
        var DataContainer = function(uid) {
            this._uId = uid;
            this._isFake = false;
            this._infos = null;
        };

        DataContainer.prototype.getId = function() {
            return this._uId;
        };

        DataContainer.prototype.fake = function(_) {
            if (!arguments.length) {
                return this._isFake;
            }
            this._isFake = _;
        };

        DataContainer.prototype.infos = function(_) {
            if (!arguments.length) {
                return this._infos;
            }
            this._infos = _;
        };

        return DataContainer;
    });
define('sap/viz/framework/chartmodel/description/DimensionLabels',['sap/viz/framework/chartmodel/description/DataContainer', 'sap/viz/framework/common/util/oo'],
    function Setup(DataContainer, oo) {
        var DimensionLabels = function(uid, type, values) {
            DimensionLabels.superclass.constructor.apply(this, arguments);
            this._type = type;
            this._values = values;
        };

        oo.extend(DimensionLabels, DataContainer);

        DimensionLabels.prototype.getType = function() {
            return this._type;
        };

        DimensionLabels.prototype.getValues = function() {
            return this._values;
        };

        return DimensionLabels;
    });
define('sap/viz/framework/chartmodel/feed/feeder',['sap/viz/framework/chartmodel/feed/feed', 'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/chartmodel/description/DimensionLabels',
    'sap/viz/framework/common/lang/LangManager'
], function Setup(Feed, FunctionUtils, TypeUtils, DimensionLabels, langManager) {

    return function(feedDefs, crossTableDS, feedingInfo) {

        var FEED_D = 'Dimension';
        var FEED_M = 'Measure';

        var FEEDID = "feedId";

        var BINDTO = "binding";
        var TYPE = "type";
        var INDEX = "index";

        var _aaMap = [];
        // analysis axis index to feed map,
        // _aamap[0] point to feed of axis 1
        var _mgMap = [];
        // measure group index to feed map,
        // _mgMap[0] point to feed of measure value
        // group 1
        var _feeds = [];
        var _feedsMap = {};

        var _aaBindingInfo = [];

        function feeder() {

            return feeder;
        }


        feeder.init = function() {
            initFeeds(feedDefs);

            // TODO separate validation and init
            if (crossTableDS) {
                if (feedingInfo) {
                    manualFeed(crossTableDS, feedingInfo);
                } else {
                    autoFeed(crossTableDS);
                }

                feeder.checkValid();
            }
        };

        /**
         * @returns {feed}
         */
        feeder.getFeeds = function() {
            return _feeds;
        };

        /**
         * @param feedId
         *            feed id
         *
         * @returns {feed} undefined if no feed matched
         *
         */
        feeder.findFeed = function(feedId) {
            return _feedsMap[feedId];
        };

        feeder.getAnalysisAxisIndex = function(feed) {

            for (var i = 0; i < _aaMap.length; i++) {
                if (_aaMap[i] === feed) {
                    return i;
                }
            }

        };

        feeder.getMeasureValuesGroupIndex = function(feed) {

            for (var i = 0; i < _mgMap.length; i++) {
                if (_mgMap[i] === feed) {
                    return i;
                }
            }

        };

        /**
         * TODO: add description
         */
        feeder.getMeasureValuesGroupFeeds = function() {

            return _mgMap;
        };

        /**
         * Check if meta data and raw data are matched. If not match,
         * throw exception
         */
        feeder.checkValid = function() {
            for (var i = 0; i < _feeds.length; i++) {
                var feed = _feeds[i];
                var dataLength;
                if (feed.type() === "Dimension") {
                    dataLength = feed.getDataCount();
                    if (dataLength < feed.min() || (feed.max() !== Number.POSITIVE_INFINITY && dataLength >
                        feed.max())) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', feed
                            .feedId()));
                    }

                } else if (feed.type() === "Measure") {
                    dataLength = feed.getDataCount();
                    if (dataLength < feed.min() || (feed.max() !== Number.POSITIVE_INFINITY && dataLength >
                        feed.max())) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', feed
                            .feedId()));
                    }

                } else {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_FEED_TYPE', feed.feedId()));
                }

            }

        };

        feeder.getBindingInfo = function() {

            return _aaBindingInfo;
        };

        /**
         * TODO: add desc
         */
        function initFeeds(feedDefinitions) {
            if (TypeUtils.isArray(feedDefinitions)) {

                var dimensonNumber = 0;

                for (var i = 0; i < feedDefinitions.length; i++) {

                    var feedType = feedDefinitions[i]['type'];
                    var aaIndex = feedDefinitions[i]['aaIndex'];
                    var feedId = feedDefinitions[i]['id'];

                    if (feedType !== FEED_D && feedType !== FEED_M) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION',
                            feedDefinitions[i]['id']));
                    }

                    if (feedDefinitions[i]['type'] === FEED_D) {
                        if (feedDefinitions[i]['aaIndex'] <= 0) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_AXIS_INDEX',
                                feedDefinitions[i]['id']));
                        }

                        dimensonNumber++;
                    }

                    if (feedDefinitions[i]['type'] === FEED_M) {
                        if (feedDefinitions[i]['mgIndex'] <= 0) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_MEASURE_AXIS_INDEX',
                                feedDefinitions[i]['id']));
                        }

                    }

                    var arrayLength = _feeds.push(Feed(feedId, feedDefinitions[i]['name'], feedType,
                        feedDefinitions[i]['min'], feedDefinitions[i]['max'], aaIndex, feedDefinitions[
                            i]['acceptMND'], feedDefinitions[i]['mgIndex'], feedDefinitions[i][
                            'maxStackedDims'
                        ], feedDefinitions[i]['minStackedDims']));

                    _feedsMap[feedId] = _feeds[arrayLength - 1];

                }

                for (i = 0; i < dimensonNumber; i++) {
                    _aaBindingInfo[i] = false;
                }
            }

        }

        function autoFeed(crosstableDS) {
            var axes = crosstableDS.getAnalysisAxisCount();
            var feed;
            for (var i = 0; i < axes; i++) {
                feed = searchFeed(_feeds, FEED_D, i + 1);
                if (feed) {
                    var axis = crosstableDS.getAnalysisAxisByIdx(i);
                    if (TypeUtils.isExist(feed.maxStackedDims()) && axis.getDimensionLabels().length >
                        feed.maxStackedDims()) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feed.feedId()));
                    }
                    if (TypeUtils.isExist(feed.minStackedDims()) && axis.getDimensionLabels().length <
                        feed.minStackedDims()) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feed.feedId()));
                    }

                    _aaMap[i] = feed;
                    _aaBindingInfo[i] = true;
                    feed.addData(axis);
                }
            }

            var mvgs = crosstableDS.getMeasureValuesGroupCount();
            for (i = 0; i < mvgs; i++) {
                feed = searchFeed(_feeds, FEED_M, i + 1);
                if (feed) {
                    _mgMap[i] = feed;
                    if (crosstableDS.getMeasureValuesGroupByIdx(i)) {
                        feed.addData(crosstableDS.getMeasureValuesGroupByIdx(i));
                    }
                }

            }
        }

        function searchFeed(feeds, type, index) {
            for (var i = 0; i < feeds.length; i++) {
                if (feeds[i].type() === type && feeds[i].getIndex() === index) {
                    return feeds[i];
                }
            }

            return null;
        }

        function manualFeed(crosstableDS, feedList) {
            var dataLength;
            for (var i = 0; i < feedList.length; i++) {
                var feeding = feedList[i];
                var feedId = feeding[FEEDID];
                if (!feedId) {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NO_FEED_ID'));
                }

                var feed = _feedsMap[feedId];
                if (!feed) {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING_NUMBER', feedId));
                }

                var bindings = feeding[BINDTO];
                for (var j = 0; j < bindings.length; j++) {
                    var type = bindings[j][TYPE];
                    var index = bindings[j][INDEX];

                    if (type === "analysisAxis") {
                        var aa = crosstableDS.getAnalysisAxisByIdx(index - 1);
                        if (!aa) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NO_AXIS', index, feedId));
                        }

                        if (TypeUtils.isExist(feed.maxStackedDims()) && aa.getDimensionLabels().length >
                            feed.maxStackedDims()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feedId));
                        }
                        if (TypeUtils.isExist(feed.minStackedDims()) && aa.getDimensionLabels().length <
                            feed.minStackedDims()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feedId));
                        }

                        dataLength = feed.getDataCount();
                        if (feed.max() !== Number.POSITIVE_INFINITY && dataLength >= feed.max()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA',
                                feedId));
                        }

                        feed.addData(aa);
                        _aaMap[index - 1] = feed;
                        _aaBindingInfo[feed.getIndex() - 1] = true;

                    } else if (type === "measureValuesGroup") {

                        var mvg = crosstableDS.getMeasureValuesGroupByIdx(index - 1);
                        if (!mvg) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_FIND_MEASURE_GROUP',
                                index, feedId));
                        }

                        dataLength = feed.getDataCount();
                        if (feed.max() !== Number.POSITIVE_INFINITY && dataLength >= feed.max()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA',
                                feedId));
                        }

                        feed.addData(mvg);
                        _mgMap[feed.getIndex() - 1] = feed;

                    } else if (type === "measureNamesDimension") {
                        if (feed.acceptMND() < 0) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_ACCEPT') +
                                " MeasureNamesDimension " + feedId + " " + langManager.get('IDS_FEED'));
                        }

                        dataLength = feed.getDataCount();
                        if (feed.max() !== Number.POSITIVE_INFINITY && dataLength >= feed.max()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA',
                                feedId));
                        }

                        feed.addData(new DimensionLabels("", "measureNamesDimension", ""));

                    } else {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
                    }
                }

            }

        }


        feeder.init();

        return feeder;
    };

});
define('sap/viz/framework/chartmodel/description/AnalysisAxis',['sap/viz/framework/chartmodel/description/DimensionLabels', 'sap/viz/framework/common/util/FunctionUtils',
        'sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/lang/LangManager'
    ],
    function Setup(DimensionLabels, FunctionUtils, TypeUtils, langManager) {

        var AnalysisAxis = function(data) {
            this._dimensionLabels = [];
            this.init(data);

        };

        AnalysisAxis.prototype.init = function(data) {

            for (var i = 0; i < data.length; i++) {
                this._dimensionLabels[i] = new DimensionLabels(data[i]["name"], data[i]["type"] ? data[i]["type"] :
                    "Dimension",
                    data[i]["values"]);

                this._dimensionLabels[i].fake(data[i]["isFake"] ? data[i]["isFake"] : false);
                this._dimensionLabels[i].infos(data[i]["infos"] ? data[i]["infos"] : null);
            }
        };

        AnalysisAxis.prototype.getDimensionLabels = function() {
            return this._dimensionLabels;
        };

        AnalysisAxis.prototype.getType = function() {
            return "analysisAxis";
        };

        AnalysisAxis.prototype.validate = function() {

            var labels = 1;
            var dimensions = this.getDimensionLabels();
            if (dimensions.length === 0) {
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_NOT_ZERO'));
            }
            for (var i = 0; i < dimensions.length; i++) {
                if (i === 0) {
                    labels = dimensions[i].getValues().length;
                    if (TypeUtils.isExist(dimensions[i].infos()) && labels !== dimensions[i].infos().length) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_COUNT',
                            dimensions[i].getId()));
                    }
                } else {
                    if (labels !== dimensions[i].getValues().length) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT',
                            dimensions[i].getId()));
                    }

                    if (TypeUtils.isExist(dimensions[i].infos()) && labels !== dimensions[i].infos().length) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_COUNT',
                            dimensions[i].getId()));
                    }
                }
            }

            return labels;

        };

        AnalysisAxis.prototype.hasFakeData = function() {
            var dimensions = this.getDimensionLabels();
            for (var i = 0; i < dimensions.length; i++) {
                if (dimensions[i].fake()) {
                    return true;
                }
            }

            return false;
        };

        return AnalysisAxis;
    });
define('sap/viz/framework/chartmodel/description/MeasureValues',['sap/viz/framework/chartmodel/description/DataContainer', 'sap/viz/framework/common/util/oo'],
    function Setup(DataContainer, oo) {
        var MeasureValues = function(uid, values) {
            MeasureValues.superclass.constructor.apply(this, arguments);
            this._values = values;
        };

        oo.extend(MeasureValues, DataContainer);

        MeasureValues.prototype.getValues = function() {
            return this._values;
        };

        return MeasureValues;
    });
define('sap/viz/framework/chartmodel/description/MeasureValuesGroup',['sap/viz/framework/chartmodel/description/MeasureValues', 'sap/viz/framework/common/util/FunctionUtils',
        'sap/viz/framework/common/lang/LangManager'
    ],
    function Setup(MeasureValues, FunctionUtils, langManager) {

        var MeasureValuesGroup = function(data) {
            this._measureValues = [];
            this.init(data);
        };

        MeasureValuesGroup.prototype.init = function(data) {

            for (var i = 0; i < data.length; i++) {
                this._measureValues[i] = new MeasureValues(data[i]["name"], data[i]["values"]);
                this._measureValues[i].fake(data[i]["isFake"] ? data[i]["isFake"] : false);
                this._measureValues[i].infos(data[i]["infos"] ? data[i]["infos"] : null);
            }
        };

        MeasureValuesGroup.prototype.getMeasureValues = function() {
            return this._measureValues;
        };

        MeasureValuesGroup.prototype.getType = function() {
            return "measureValuesGroup";
        };

        MeasureValuesGroup.prototype.validate = function(labels) {

            var measures, value, i, j;
            if (!arguments.length) {
                var label = [1, 1];
                measures = this.getMeasureValues();
                for (i = 0; i < measures.length; i++) {
                    value = measures[i].getValues();
                    if (i === 0) {
                        if (value.length !== label[1]) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',
                                measures[i].getId(), label[1]));
                        }

                        label[0] = value[0].length;

                    } else {
                        if (value.length !== label[1]) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',
                                measures[i].getId(), label[1]));
                        }

                        for (j = 0; j < value.length; j++) {
                            if (value[j].length !== label[0]) {
                                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1',
                                    measures[i].getId(), label[0]));
                            }
                        }
                    }

                }

                return label;

            } else {
                measures = this.getMeasureValues();
                for (i = 0; i < measures.length; i++) {
                    value = measures[i].getValues();
                    if (value.length !== labels[1]) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2', measures[i]
                            .getId(), labels[1]));
                    }

                    for (j = 0; j < value.length; j++) {
                        if (value[j].length !== labels[0]) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',
                                measures[i].getId(), labels[0]));
                        }
                    }
                }
            }

        };

        MeasureValuesGroup.prototype.hasFakeData = function() {
            var measures = this.getMeasureValues();
            for (var i = 0; i < measures.length; i++) {
                if (measures[i].fake()) {
                    return true;
                }
            }

            return false;
        };

        return MeasureValuesGroup;
    });
define('sap/viz/framework/chartmodel/info/Handler',['sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/common/util/TypeUtils'],
    function Setup(ObjectUtils, TypeUtils) {
        var ANALYSISAXIS = "analysisAxis";
        var MEASUREVALUESGROUP = "measureValuesGroup";
        var handler = {};
        var _handlers = {};
        /*
   {
   'analysisAxis': [{
   'index': 1,
   'data': [{
   'name': 'Product',
   'values': ['Car', 'Truck', 'Motorcycle', 'Bicycle']
   }]
   }, {
   'index' : 2,
   'data': [{
   'name': 'Country',
   'values': ['China', 'USA']
   }, {
   'name': 'Year',
   'values': ['2001', '2001']
   }]
   }],
   'measureValuesGroup': [{
   'index': 1,
   'data': [{
   'name': 'Profit',
   'values': [[25, 136, 23, 116], [58, 128, 43, 73]]
   }, {
   'name': 'Revenue',
   'values': [[50, 236, 43, 126], [158, 228, 143, 183]]
   }]
   }]};
   * */

        function findInJson(jsondata, targetname) {
            var anax = jsondata[ANALYSISAXIS].concat(jsondata[MEASUREVALUESGROUP]);
            var ret = [];
            anax.forEach(function(ana, idx) {
                var anad = ana.data;
                anad.forEach(function(d, didx) {
                    if (d.name === targetname) {
                        ret.push(d);
                    }
                }, this);
            }, this);
            return ret;
        }
        var valueinfo = {
            'type': 'valueinfo',
            /**
     *This function is only used by ZEN-waterfall chart which does not meet other regular charts' valueinfo
      requirements. More details about this, please ask Fei Christy.
     * example: 
          var ds = new CrosstableDataset();
          ds.data({
            'analysisAxis' : [ {
              'index' : 1,
              'data' : [ {
                'type' : 'Dimension',
                'name' : 'Country',
                'values' : [ 'C1', 'C2', 'C1-C2 total', 'C3', 'Total' ]
              } ]
            }, {
              'index' : 2,
              'data' : [ {
                'type' : 'Dimension',
                'name' : 'Region',
                'values' : [ 'Asia', 'Europe' ]
              } ]
            } ],
            'measureValuesGroup' : [ {
              'index' : 1,
              'data' : [ {
                'type' : 'Measure',
                'name' : 'Profit',
                'values' : [ [ 10, 10, 20, -40, -20], [ 22, -20, 2, 50, 52] ]
              } ]
            } ]
          });
          ds.info({
              'type' : 'valueinfo',
              'value' : [undefined,undefined,{'isTotal' : true}, undefined, {'isTotal' : true}] 
            });
     * result:
          the value of 'ds._crosstableDataset._dataSet.measureValuesGroup[0].data[0].infos' is: 
          [[{'valueinfo': undefined}, {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}},
           {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}}
            ],[
            {'valueinfo': undefined}, {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}},
             {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}}
            ]
          ]
     */
            'process': function(value, jsondata) {
                var i, iLen, j, jLen, k, kLen, m, mLen;
                var iterate, mgValue, mg, dValues, measureGroups = jsondata[MEASUREVALUESGROUP];
                for (i = 0, iLen = value.length; i < iLen; i++) {
                    iterate = value[i];
                    if (iterate !== undefined) {
                        for (j = 0, jLen = measureGroups.length; j < jLen; j++) {
                            mg = measureGroups[j];
                            mgValue = mg.data;
                            for (k = 0, kLen = mgValue.length; k < kLen; k++) {
                                dValues = mgValue[k];
                                if (!dValues.infos) {
                                    dValues.infos = [];
                                }
                                for (m = 0, mLen = dValues.values.length; m < mLen; m++) {
                                    if (!dValues.infos[m]) {
                                        dValues.infos[m] = [];
                                    }
                                    if (!dValues.infos[m][i]) {
                                        dValues.infos[m][i] = {};
                                    }
                                    dValues.infos[m][i][valueinfo.type] = iterate;
                                }
                            }
                        }
                    }
                }
                //      var iterate, dname, finds, d, dvalue;
                //      var i, iLen, j, jLen, k, kLen, m, mLen;
                //      for(i = 0, iLen = value.length; i < iLen; i++) {
                //        iterate = value[i];
                //        dname = iterate.name;
                //        finds = findInJson(jsondata, dname);
                //        for(j = 0, jLen = finds.length; j < jLen; j++){
                //          d = finds[j];
                //          if (iterate.value) {
                //            if (!d.infos) {
                //              d.infos = [];
                //            }
                //            for(k = 0, kLen = d.values.length; k < kLen; k++){
                //              d.infos[k] = [];
                //              dvalue = d.values[k];
                //              for(m = 0, mLen = dvalue.length; m < mLen; m++){
                //                if(d.infos[k][m] === undefined){
                //                  d.infos[k][m] = {};
                //                }
                //                d.infos[k][m][valueinfo.type] = iterate.value[k][m];
                //              }
                //            }
                //          }
                //        }
                //      }
            },
            'merge': function(jsondata) {

            },

            'remove': function(jsondata) {
                measureInfoRemove(valueinfo.type, jsondata);
            }
        };

        /**
         * [26-Feb-2013 Nick]
         * Default selection is bind with data model, it has the similar mechanism as custom label has.
         */

        var defaultSelection = {
            'type': 'defaultSelection',
            'process': function(info, data) {
                var iterate;
                var aa1, aa2, len;
                var hasAA2 = (data[ANALYSISAXIS] && data[ANALYSISAXIS][1]) ? true : false;
                var aa1Length = data[ANALYSISAXIS] ? data[ANALYSISAXIS][0].data[0].values.length : data[
                        MEASUREVALUESGROUP][0].data[0].values[0].length,
                    aa2Length = hasAA2 ? data[ANALYSISAXIS][1].data[0].values.length : 1;
                var i, m, n;
                var defaultSelectionInfo, temp;

                for (i = 0, len = info.length; i < len; i++) {
                    aa1 = new Array(aa1Length);
                    aa2 = new Array(aa2Length);
                    defaultSelectionInfo = [];
                    iterate = info[i];
                    AAContextConstructor(data, iterate, aa1, aa2);
                    // if analysis axis 2 does not exit, we think it is selected by default.
                    if (!hasAA2) {
                        aa2[0] = true;
                    }
                    // Construct a two-dimensional array, which is aa2.length * aa1.length. Each member is a object
                    // like:
                    //    'defaultSelection' : {
                    //        isSelected : false,
                    //        index : i
                    //      }
                    // According to aa1 and aa2 arrays, the 'isSelected' of corresponding object is changed from
                    // false to true.
                    for (m = 0; m < aa2.length; m++) {
                        temp = [];
                        for (n = 0; n < aa1.length; n++) {
                            var ctxObj = {
                                'defaultSelection': {
                                    isSelected: false,
                                    index: i
                                }
                            };
                            if (aa2[m] && aa1[n]) {
                                ctxObj.defaultSelection.isSelected = true;
                            }
                            temp.push(ctxObj);
                        }
                        defaultSelectionInfo.push(temp);
                    }
                    // Attach the default selection object to each data object.
                    MGContextConstructor(data, iterate, defaultSelectionInfo);
                }

            },

            'remove': function(jsondata) {
                measureInfoRemove(defaultSelection.type, jsondata);
            },
            'merge': function(jsondata) {}
        };

        function measureInfoRemove(infoName, jsondata) {
            var iterate, d, dvalue, value = jsondata[MEASUREVALUESGROUP];
            if (!value || !TypeUtils.isArray(value)) {
                return;
            }
            var i, iLen, j, jLen, k, kLen, m, mLen;
            var stillHasInfo = false;
            for (i = 0, iLen = value.length; i < iLen; i++) {
                iterate = value[i].data;
                for (j = 0, jLen = iterate.length; j < jLen; j++) {
                    d = iterate[j];
                    if (d.infos) {
                        stillHasInfo = false;
                        for (k = 0, kLen = d.infos.length; k < kLen; k++) {
                            dvalue = d.infos[k];
                            for (m = 0, mLen = dvalue.length; m < mLen; m++) {
                                if (dvalue[m]) {
                                    delete dvalue[m][infoName];
                                    if (TypeUtils.isEmptyObject(dvalue[m])) {
                                        dvalue[m] = undefined;
                                    } else {
                                        stillHasInfo = true;
                                    }
                                }
                            }
                        }
                    }
                    if (!stillHasInfo) {
                        delete d.infos;
                    }
                }
            }
        }

        /**
         * [26-Feb-2013 Nick]
         * This function is to process which elements are selected in analysis axises 1 and 2.
         * aa1 is the array that records which elements are selected in analysis axis 1.
         * aa2 is the array that records which elements are selected in analysis axis 2.
         */
        function AAContextConstructor(jsondata, target, aa1, aa2) {
            var analysisAxis = jsondata[ANALYSISAXIS];
            if (!analysisAxis) {
                for (var index = 0; index < aa1.length; index++) {
                    aa1[index] = true;
                }
                return;
            }
            analysisAxis.forEach(function(ana, idx) {
                var anad = ana.data;

                anad.forEach(function(d, didx) {
                    var value = target[d.name];
                    for (var i = 0; i < d.values.length; i++) {
                        var isMatch = (value === '*' || (value !== null && d.values[i] === value));
                        if (isMatch) {
                            if (didx === 0) {
                                if (ana.index === 1) {
                                    aa1[i] = true;
                                } else {
                                    aa2[i] = true;
                                }
                            } else {
                                if (ana.index === 1) {
                                    if (aa1[i] !== true) {
                                        aa1[i] = undefined;
                                    }
                                } else {
                                    if (aa2[i] !== true) {
                                        aa2[i] = undefined;
                                    }
                                }
                            }
                        } else {
                            if (ana.index === 1) {
                                aa1[i] = undefined;
                            } else {
                                aa2[i] = undefined;
                            }
                        }
                    }
                }, this);
            }, this);
        }

        /**
         * [26-Feb-2013 Nick]
         * This function is to process which elements are selected in measures.
         */
        function MGContextConstructor(jsondata, target, defaultSelectionInfo) {
            var measureGroup = jsondata[MEASUREVALUESGROUP];
            var unSelectionInfo = [],
                temp, m, n;
            for (m = 0; m < defaultSelectionInfo.length; m++) {
                temp = [];
                for (n = 0; n < defaultSelectionInfo[m].length; n++) {
                    var ctxObj = {
                        'defaultSelection': {
                            isSelected: false
                        }
                    };
                    temp.push(ctxObj);
                }
                unSelectionInfo.push(temp);
            }
            measureGroup.forEach(function(ana, idx) {
                var anad = ana.data;
                var i, j, selectedTarget;
                anad.forEach(function(d, didx) {
                    if (d.name === target['Measure']) {
                        selectedTarget = defaultSelectionInfo;
                    } else {
                        selectedTarget = unSelectionInfo;
                    }
                    if (!d.infos) {
                        d.infos = selectedTarget;
                    } else {
                        for (i = 0; i < selectedTarget.length; i++) {
                            var aa1 = selectedTarget[i];
                            var daa1 = d.infos[i];
                            for (j = 0; j < aa1.length; j++) {
                                var alreadySelected = daa1[j]['defaultSelection'].isSelected;
                                if (!alreadySelected) {
                                    daa1[j]['defaultSelection'] = aa1[j]['defaultSelection'];
                                }
                            }
                        }
                    }
                }, this);
            }, this);
        }

        var customlabel = {
            'type': 'customlabel',
            /*'value': [{
     'name': 'Country', //dimension name
     'mapping': {'CHN', {'type': 'url', 'val': 'http://xxxx/xxxx.png'},
     'GER', {'type': 'string', 'val': 'Germany'},
     'FRA', {'type': 'string', 'val': 'France'}} //support both string and url
     }] //you can have several mappings, it will be merged inside crosstable dataset. no info will be created
     // (existed will be deleted) if the mapping value is same as the original value.*/
            'process': function(value, jsondata) {
                var iterate, dname, finds, mapping, m, dvalues, mappingfound, removeinfo;
                for (var i = 0, len = value.length; i < len; i++) {
                    iterate = value[i];
                    dname = iterate.name;
                    finds = findInJson(jsondata, dname);
                    finds.forEach(function(d, tdidx) {
                        //if no infos exist, create one, delete it if no info found
                        mappingfound = false;
                        if (!d.infos) {
                            removeinfo = true;
                            d.infos = [];
                        }

                        dvalues = d.values;
                        mapping = iterate.mapping;
                        dvalues.forEach(function(v, idx) {
                            if (mapping[v]) {
                                if (mapping[v].type === 'string' && mapping[v].val === v) {
                                    //we won't create mapping for it. existing mapping should be deleted
                                    if (d.infos[idx]) {
                                        delete d.infos[idx][customlabel.type];
                                        //if it becomes empty, set it to undefined
                                        if (TypeUtils.isEmptyObject(d.infos[idx])) {
                                            d.infos[idx] = undefined;
                                        }
                                    } else {
                                        //tipjira: BITVIZA-1181
                                        //if current value happens to be the last value, we won't create anything for it
                                        //then d.infos will be shorter than d.values which is not allowed
                                        //so here we should create something for it.
                                        d.infos[idx] = undefined;
                                    }
                                } else {
                                    mappingfound = true;
                                    d.infos[idx] = d.infos[idx] ? d.infos[idx] : {};
                                    d.infos[idx][customlabel.type] = mapping[v];
                                }
                            } else {
                                if (!d.infos[idx]) {
                                    d.infos[idx] = undefined;
                                }
                            }
                        }, this);

                        if (removeinfo && !mappingfound) {
                            delete d.infos;
                        }
                    }, this);
                }
            },

            'merge': function(jsondata) {
                var ret = {};
                ret.type = customlabel.type;
                ret.value = [];
                var anax = jsondata[ANALYSISAXIS];
                if (!anax || !TypeUtils.isArray(anax)) {
                    return;
                }
                var found;
                anax.forEach(function(ana, idx) {
                    var anad = ana.data;
                    anad.forEach(function(d, didx) {
                        if (d.infos) {
                            var dmapping = {};
                            dmapping.name = d.name;
                            dmapping.mapping = {};
                            found = false;
                            d.infos.forEach(function(dinfo, dinfoidx) {
                                if (dinfo && dinfo[customlabel.type]) {
                                    found = true;
                                    dmapping.mapping[d.values[dinfoidx]] = dinfo[customlabel.type];
                                }
                            }, this);
                            if (found) {
                                ret.value.push(dmapping);
                            }
                        }
                    }, this);
                }, this);
                if (ret.value.length > 0) {
                    return ret;
                }
            },

            'remove': function(jsondata) {
                var anax = jsondata[ANALYSISAXIS];
                var stillHasInfo = false;
                anax.forEach(function(ana, idx) {
                    var anad = ana.data;
                    anad.forEach(function(d, didx) {
                        if (d.infos) {
                            stillHasInfo = false;
                            d.infos.forEach(function(dinfo, dinfoidx) {
                                if (dinfo) {
                                    delete dinfo[customlabel.type];
                                    if (TypeUtils.isEmptyObject(dinfo)) {
                                        d.infos[dinfoidx] = undefined;
                                    } else {
                                        stillHasInfo = true;
                                    }
                                }
                            }, this);
                            if (!stillHasInfo) {
                                delete d.infos;
                            }
                        }
                    }, this);
                }, this);
            }
        };

        handler.register = function(hndl) {
            _handlers[hndl.type] = hndl;
        };

        handler.get = function(type) {
            return _handlers[type];
        };

        /*
         * call each handler to extract corresponding info to an object and return
         */
        handler.mergeInfo = function(jsondata) {
            var iter, ret = [],
                mr;
            for (var type in _handlers) {
                if (_handlers.hasOwnProperty(type)) {
                    iter = _handlers[type];
                    mr = iter.merge(jsondata);
                    if (mr) {
                        //return a copy, intend to use ObjectUtils as we want to deep copy the array
                        ret.push(ObjectUtils.extend(true, {}, mr));
                    }
                }
            }
            return ret;
        };

        handler.register(customlabel);
        handler.register(defaultSelection);
        handler.register(valueinfo);

        return handler;

    });
define('sap/viz/framework/chartmodel/info/CrosstableHandler',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/util/ObjectUtils'], function Setup(
    TypeUtils, ObjectUtils) {
    var ANALYSISAXIS = "analysisAxis";
    var MEASUREVALUESGROUP = "measureValuesGroup";
    var handler = {};
    var internalHandlers = {};
    // for internal use and don't support info.get function
    var externalHandlers = {};
    // for external use and support info.get function

    handler.register = function(hndl, isExternal) {
        if (isExternal) {
            externalHandlers[hndl.type] = hndl;
        } else {
            internalHandlers[hndl.type] = hndl;
        }
    };

    handler.get = function(type) {
        if (externalHandlers[type]) {
            return externalHandlers[type];
        } else {
            return internalHandlers[type];
        }
    };

    handler.getExternal = function(type) {
        if (externalHandlers[type]) {
            return externalHandlers[type];
        }
    };
    handler.storeInfo = function(allInfos, info) {
        if (externalHandlers[info.type] && info.hasOwnProperty('info')) {
            allInfos[info.type] = {
                'type': info.type,
                'info': info.info
            };
        }
    };
    handler.mergeInfo = function(allInfos) {
        var ret = [];
        for (var type in externalHandlers) {
            if (allInfos.hasOwnProperty(type)) {
                var hndl = allInfos[type];
                var mr = {};
                mr.type = hndl.type;
                mr.info = hndl.info;
                if (mr.info !== "undefined") {
                    // return a copy, intend to use ObjectUtils as we want to deep copy the array
                    ret.push(ObjectUtils.clone(mr));
                }
            }
        }
        return ret;
    };

    var additionalData = {
        'type': "additionalData",
        /*
         info : [{
             name : "<dimension_name>",
             // Match dimension member's 1D Array structure
             infoValues : [{
             featureId : "<featureId1>",
             isTotal : true
            }, {
             featureId : "<featureId2>",
             isTotal : false
            }]
         }, {
         name : "<rangeure_name>",
         // Match rangeure value's 2D Array structure
         infoValues : [[{
             adata1 : "<adata1>",
             adata2 : true
         }, {
             adata1 : "<adata2>",
             adata2 : false
         }], [{
             adata1 : "<adata3>",
             adata2 : true
         }, {
             adata1 : "<adata4>",
             adata2 : false
         }]]
         }]
         */
        'process': function(info, jsondata, dimensions, measures) {
            if (!info.hasOwnProperty('info')) {
                return;
            }
            var _info = ObjectUtils.clone(info.info);
            if (_info === undefined || (TypeUtils.isArray(_info) && _info.length === 0)) {
                removeInfo(additionalData.type, jsondata, dimensions, measures);
                return;
            } else if (!TypeUtils.isArray(_info)) {
                return;
            }
            removeInfo(additionalData.type, jsondata, dimensions, measures);
            var found = false,
                i, j, index, loc;
            for (i = 0; i < _info.length; i++) {
                found = false;
                for (j = 0; j < dimensions.length; j++) {
                    if (dimensions[j].name === _info[i].name) {
                        index = dimensions[j].index;
                        loc = dimensions[j].location;
                        if (!_info[i].hasOwnProperty('infoValues')) {
                            break;
                        } else if (_info[i].infoValues === undefined) {
                            _info[i].infoValues = [];
                        } else if (!TypeUtils.isArray(_info[i].infoValues)) {
                            break;
                        }
                        setDimensionInfoValues(jsondata[ANALYSISAXIS][index].data[loc], _info[i].infoValues,
                            additionalData.type);
                        found = true;
                        break;
                    }
                }
                if (found) {
                    continue;
                }
                for (j = 0; j < measures.length; j++) {
                    if (measures[j].name === _info[i].name) {
                        index = measures[j].index;
                        loc = measures[j].location;
                        if (!_info[i].hasOwnProperty('infoValues')) {
                            break;
                        } else if (_info[i].infoValues === undefined) {
                            _info[i].infoValues = [];
                        } else if (!TypeUtils.isArray(_info[i].infoValues)) {
                            break;
                        }
                        setMeasureInfoValues(jsondata[MEASUREVALUESGROUP][index].data[loc], _info[i].infoValues,
                            additionalData.type);
                        break;
                    }
                }
            }
        }
    };

    var customlabel = {
        'type': "customlabel",
        /*
         info : [{
             name : "<dimension_name>",
             // INTERNAL usage for customlabel only
             infoMappings : {
                 "CHN" : {
                     type : "String",
                     val : "China"
                 },
                 "US" : {
                     type : "url",
                     val : "http://aa.bb.cc"
                 }
             }
         }]
         */
        'process': function(info, jsondata) {
            var _info = info.info;
            if (_info === undefined || !TypeUtils.isArray(_info)) {
                return;
            }
            if (jsondata[ANALYSISAXIS] === undefined) {
                return;
            }
            var iterate, dname, finds, mapping, m, dvalues, mappingfound, removeinfo;
            for (var i = 0, len = _info.length; i < len; i++) {
                iterate = _info[i];
                dname = iterate.name;
                finds = findInJson(jsondata, dname);
                finds.forEach(function(d, tdidx) {
                    //if no infos exist, create one, delete it if no info found
                    mappingfound = false;
                    if (!d.infos) {
                        removeinfo = true;
                        d.infos = [];
                    }

                    dvalues = d.values;
                    mapping = iterate.infoMappings;
                    dvalues.forEach(function(v, idx) {
                        if (mapping[v]) {
                            if (mapping[v].type === 'string' && mapping[v].val === v) {
                                //we won't create mapping for it. existing mapping should be deleted
                                if (d.infos[idx]) {
                                    delete d.infos[idx][customlabel.type];
                                    //if it becomes empty, set it to undefined
                                    if (TypeUtils.isEmptyObject(d.infos[idx])) {
                                        d.infos[idx] = undefined;
                                    }
                                } else {
                                    //tipjira: BITVIZA-1181
                                    //if current value happens to be the last value, we won't create anything for it
                                    //then d.infos will be shorter than d.values which is not allowed
                                    //so here we should create something for it.
                                    d.infos[idx] = undefined;
                                }
                            } else {
                                mappingfound = true;
                                d.infos[idx] = d.infos[idx] ? d.infos[idx] : {};
                                d.infos[idx][customlabel.type] = mapping[v];
                            }
                        } else {
                            if (!d.infos[idx]) {
                                d.infos[idx] = undefined;
                            }
                        }
                    }, this);

                    if (removeinfo && !mappingfound) {
                        delete d.infos;
                    }
                }, this);
            }
        }
    };

    function findInJson(jsondata, targetname) {
        var anax = jsondata[ANALYSISAXIS];
        if (jsondata[MEASUREVALUESGROUP] !== undefined) {
            anax = jsondata[ANALYSISAXIS].concat(jsondata[MEASUREVALUESGROUP]);
        }
        var ret = [];
        anax.forEach(function(ana, idx) {
            var anad = ana.data;
            anad.forEach(function(d, didx) {
                if (d.name === targetname) {
                    ret.push(d);
                }
            }, this);
        }, this);
        return ret;
    }

    function setDimensionInfoValues(destination, infoValues, infoType) {
        // no need to new a infos for empty info values
        if (destination['infos'] === undefined && (TypeUtils.isArray(infoValues) && infoValues.length === 0)) {
            return;
        }
        if (destination['infos'] === undefined) {
            destination.infos = [];
        }
        var infos = destination.infos;
        var dataLength = destination.values.length;
        for (var i = 0; i < dataLength; i++) {
            if (infos[i] === undefined && infoValues[i] !== undefined) {
                infos[i] = {};
            }
            if ((infos[i] === undefined || infos[i] === null) && infoValues[i] === undefined) {
                infos[i] = undefined;
                continue;
            }
            if (infos[i] !== undefined) {
                infos[i][infoType] = infoValues[i];
                if (infos[i][infoType] === undefined) {
                    delete(infos[i][infoType]);
                }
            }
            if (TypeUtils.isEmptyObject(infos[i])) {
                infos[i] = undefined;
            }
        }
    }

    function setMeasureInfoValues(destination, infoValues, infoType) {
        // no need to new a infos for empty info values
        if (destination['infos'] === undefined && (TypeUtils.isArray(infoValues) && infoValues.length === 0)) {
            return;
        }
        if (destination['infos'] === undefined) {
            destination.infos = [];
        }
        var infos = destination.infos;
        var dataLength = destination.values.length;
        var dataWidth = destination.values[0].length;
        for (var i = 0; i < dataLength; i++) {
            var j;
            if (infos[i] === undefined && infoValues[i] !== undefined) {
                infos[i] = [];
            }
            if (infos[i] === undefined && (infoValues[i] === undefined || infoValues[i] === null)) {
                infos[i] = infoValues[i];
                continue;
            }
            if (infos[i] !== undefined && (infoValues[i] === undefined || infoValues[i] === null)) {
                for (j = 0; j < dataWidth; j++) {
                    if (infos[i][j] !== undefined && infos[i][j] !== null && infos[i][j][infoType] !== undefined) {
                        infos[i][j][infoType] = infoValues[i];
                        if (infoValues[i] === undefined) {
                            delete(infos[i][j][infoType]);
                        }
                    }
                    if (TypeUtils.isEmptyObject(infos[i][j])) {
                        infos[i][j] = undefined;
                    }
                }
                continue;
            }
            for (j = 0; j < dataWidth; j++) {
                if (infos[i][j] === undefined && infoValues[i][j] !== undefined) {
                    infos[i][j] = {};
                }
                if (infos[i][j] === undefined && infoValues[i][j] === undefined) {
                    infos[i][j] = undefined;
                }
                if (infos[i][j] !== undefined && infos[i][j] !== null) {
                    infos[i][j][infoType] = infoValues[i][j];
                }
                if (infos[i][j] !== undefined && infos[i][j] !== null && infos[i][j][infoType] === undefined) {
                    delete(infos[i][j][infoType]);
                }
                if (TypeUtils.isEmptyObject(infos[i][j])) {
                    infos[i][j] = undefined;
                }
            }
        }
    }

    function removeInfo(infoType, jsondata, dimensions, measures) {
        var i, index, loc;
        for (i = 0; i < dimensions.length; i++) {
            index = dimensions[i].index;
            loc = dimensions[i].location;
            setDimensionInfoValues(jsondata[ANALYSISAXIS][index].data[loc], [], additionalData.type);
        }
        for (i = 0; i < measures.length; i++) {
            index = measures[i].index;
            loc = measures[i].location;
            setMeasureInfoValues(jsondata[MEASUREVALUESGROUP][index].data[loc], [], additionalData.type);
        }
    }

    handler.register(additionalData, true);
    handler.register(customlabel);

    return handler;
});
define('sap/viz/framework/chartmodel/CrosstableDataset',['sap/viz/framework/chartmodel/feed/feeder', 'sap/viz/framework/common/util/TypeUtils',
        'sap/viz/framework/common/util/FunctionUtils', 'sap/viz/framework/common/util/ObjectUtils',
        'sap/viz/framework/chartmodel/description/AnalysisAxis',
        'sap/viz/framework/chartmodel/description/MeasureValuesGroup',
        'sap/viz/framework/chartmodel/info/Handler', 'sap/viz/framework/chartmodel/info/CrosstableHandler',
        'sap/viz/framework/common/lang/LangManager'
    ],
    function Setup(Feeder, TypeUtils, FunctionUtils, ObjectUtils, AnalysisAxis, MeasureValuesGroup, Handler,
        CrosstableHandler, langManager) {

        var TYPE = 'type';
        var NAME = 'name';
        var VALUES = 'values';

        var FEEDID = 'feedId';
        var MND = 'MeasureNamesDimension';

        var ANALYSISAXIS = "analysisAxis";
        var MEASUREVALUESGROUP = "measureValuesGroup";

        function getMeasureValueDataPointCount(measureValue) {
            var values = measureValue.getValues();

            return values.length > 0 ? values.length * values[0].length : 0;
        }

        /**
         * @name sap.viz.data.CrosstableDataset
         * @constructor
         */
        function crossTableDataSet() {
            this._analysisAxis = [];
            this._measureValuesGroup = [];
            this._dataSet = {};
            this._measures = [];
            this._dimensions = [];
            this._emptyDataset = false;
            this._infos = {};
        }

        crossTableDataSet.prototype.destroy = function() {
            this._analysisAxis = null;
            this._measureValuesGroup = null;
            this._dataSet = null;
            this._measures = null;
            this._dimensions = null;
            this._emptyDataset = null;
            this._infos = null;
        };
        
        /**
         * Get/set data
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
         * please consider to use new version of this API instead. You can use sap.viz.api.data.CrosstableDataset.data
         * instead.
         * @name sap.viz.data.CrosstableDataset#data
         * @param data
         *        data with metaData and rawData
         * @returns {Object} {@link sap.viz.data.CrosstableDataset}
        */
        crossTableDataSet.prototype.data = function(data) {
            if (!arguments.length) {
                return ObjectUtils.clone(this._dataSet);
            }
            this._analysisAxis = [];
            this._measureValuesGroup = [];
            this._measures = [];
            this._dimensions = [];
            this._dataSet = ObjectUtils.clone(data);
            this.init(this._dataSet);
            this._measures = this.getMetaNames(data, MEASUREVALUESGROUP);
            this._dimensions = this.getMetaNames(data, ANALYSISAXIS);
            this._infos = {};
            return this;
        };

        //@deprecated
        crossTableDataSet.prototype.setData = function(in_data) {
            this.data(in_data);
        };
        /**
         * Get all dimension/ measure names from data
         * @ignore
         * @param data : data with metaData and rawData
         * @param range : ANALYSISAXIS/ MEASUREVALUESGROUP
         * @returns {[Object]}: array of names of all dimesions/ measures
         *            Object : {name:  "<dimension_name>"/  "<measure_name>", index: <number>, location: <number>}
         */
        crossTableDataSet.prototype.getMetaNames = function(data, range) {
            if (data === undefined || data === null) {
                return;
            }
            var ret = [];
            var ranges = data[range];
            if (ranges === undefined || !TypeUtils.isArray(ranges)) {
                return ret;
            }
            for (var i = 0; i < ranges.length; i++) {
                var rangeData = ranges[i].data;
                if (rangeData === undefined || !TypeUtils.isArray(rangeData)) {
                    continue;
                }
                for (var j = 0; j < rangeData.length; j++) {
                    if (rangeData[j].name !== undefined) {
                        var obj = {
                            'name': rangeData[j].name,
                            'index': i,
                            'location': j
                        };
                        ret.push(obj);
                    }
                }
            }
            return ret;
        };

        /**
         * Get/Set additional info for the crosstable dataset
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
         * please consider to use new version of this API instead.  You can use sap.viz.api.data.CrosstableDataset.
         * info instead.
         * @name sap.viz.data.CrosstableDataset#info
         * @returns {Object} return a copy of current additional info if no param provided
         */
        crossTableDataSet.prototype.info = function(info) {
            // only call get function for new handler
            if (!arguments.length) {
                return CrosstableHandler.mergeInfo(this._infos);
            }

            if (info !== undefined) {
                if (info.type && info.value) { // call old info handler
                    var handler = Handler.get(info.type);
                    if (handler) {
                        handler.process(info.value, this._dataSet);
                    }
                } else if (TypeUtils.isArray(info)) { // call new info handler
                    var crosstableHandler;
                    for (var i = 0; i < info.length; i++) {
                        crosstableHandler = CrosstableHandler.get(info[i].type);
                        if (crosstableHandler) {
                            CrosstableHandler.storeInfo(this._infos, info[i]);
                            crosstableHandler.process(info[i], this._dataSet, this._dimensions, this._measures);
                        }
                    }
                } else if (TypeUtils.isString(info)) { // call new info handler get function with infotype
                    var ret = [];
                    if (this._infos[info]) {
                        ret.push(ObjectUtils.clone(this._infos[info]));
                    }
                    return ret;
                }
                //Jimmy, 12/28/2012, AnalysisAxis reads info reference from this._dataset.
                //here the reference may be deleted (in clearInfo) and recreated(here), to make sure AnalysisAxis
                //still can get the right infos, we recreate them.
                //or we can optimize it to save infos in analysisAxis and merge them when we get data and info?
                this._analysisAxis = [];
                this._measureValuesGroup = [];
                this.init(this._dataSet);
            }
            return this;
        };

        /**
      clear specific additional info for the crosstable dataset
      @param {String}type "customlabel"||"geo" 
    */
        crossTableDataSet.prototype.clearInfo = function(type) {
            if (type) {
                var handler = Handler.get(type);
                if (handler) {
                    handler.remove(this._dataSet);
                }
            }
            return this;
        };

        crossTableDataSet.prototype.init = function(data) {
            // removed check for measureValuesGroup for tree map doesn't have it
            if (!data || (!data[ANALYSISAXIS] && !data[MEASUREVALUESGROUP])) {
                //FIX ME Remove when multihandler is available
                return; // FunctionUtils.error("dataset is empty or invalid");
            }
            var aaLabels = [1, 1];


            var axes = data[ANALYSISAXIS];
            var i = 0;
            var mvgs, mvg, mv;
            if (axes) {
                if (axes.length > 2) {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES'));
                }

                for (; i < axes.length; i++) {
                    var axis = axes[i];
                    var axisIndex = axis["index"];
                    if (axisIndex !== 1 && axisIndex !== 2) {
                        FunctionUtils.error(langManager.get('IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2'));
                    }

                    if (this._analysisAxis[axisIndex - 1]) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_AXIS_ALREADY_EXIST', axisIndex));
                    }

                    var aa = new AnalysisAxis(axis["data"]);
                    aaLabels[axisIndex - 1] = aa.validate();
                    this._analysisAxis[axisIndex - 1] = aa;

                }

                //TODO handle if only meta data exist in data set when layout
                if (aaLabels[0] === 0) {
                    aaLabels[1] = 0;
                    this._emptyDataset = true;
                }

                mvgs = data[MEASUREVALUESGROUP];
                // to handle tree chart without measurevaluegroup, but not know what chart is going to be filled,
                // should we give a warning for the empty measurevaluegroup?
                if (!mvgs) {
                    return;
                }
                for (i = 0; i < mvgs.length; i++) {
                    mvg = mvgs[i];
                    var mvgIndex = mvg["index"];
                    if (this._measureValuesGroup[mvgIndex - 1]) {
                        FunctionUtils.error("MeausreValuesGroup " + mvgIndex + " " + langManager.get(
                            'IDS_ALREADY_EXISTS'));
                    }

                    mv = new MeasureValuesGroup(mvg["data"]);
                    mv.validate(aaLabels);
                    this._measureValuesGroup[mvgIndex - 1] = mv;
                }
            } else { // no axes case

                mvgs = data[MEASUREVALUESGROUP];
                for (i = 0; i < mvgs.length; i++) {
                    mvg = mvgs[i];
                    mv = new MeasureValuesGroup(mvg["data"]);
                    if (i === 0) {
                        aaLabels = mv.validate();
                    } else {
                        mv.validate(aaLabels);
                    }

                    this._measureValuesGroup[mvg["index"] - 1] = mv;
                }
            }


        };

        /**
         * @name sap.viz.data.CrosstableDataset#getAnalysisAxisCount
         * @ignore
         */
        crossTableDataSet.prototype.getAnalysisAxisCount = function() {
            return this._analysisAxis.length;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#getAnalysisAxisByIdx
         * @ignore
         * @param index
         */
        crossTableDataSet.prototype.getAnalysisAxisByIdx = function(index) {
            return this._analysisAxis[index];
        };

        /**
         * @name sap.viz.data.CrosstableDataset#getMeasureValuesGroupCount
         * @ignore
         */
        crossTableDataSet.prototype.getMeasureValuesGroupCount = function() {
            return this._measureValuesGroup.length;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#getMeasureValuesGroupByIdx
         * @ignore
         * @param index
         */
        crossTableDataSet.prototype.getMeasureValuesGroupByIdx = function(index) {
            return this._measureValuesGroup[index];
        };

        /**
         * @name sap.viz.data.CrosstableDataset#hasFakeData
         * @ignore
         */
        crossTableDataSet.prototype.hasFakeData = function() {
            for (var i = 0; i < this._measureValuesGroup.length; i++) {
                if (this._measureValuesGroup[i] && this._measureValuesGroup[i].hasFakeData()) {
                    return true;
                }
            }

            for (i = 0; i < this._analysisAxis.length; i++) {
                if (this._analysisAxis[i].hasFakeData()) {
                    return true;
                }
            }

            return false;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#getDataPointCount
         * @ignore
         */
        crossTableDataSet.prototype.getDataPointCount = function() {

            var dpCount = 0;
            // to handle tree chart to accept dataset without measureValuesGroup
            var mvDpCount = 0;
            if (this._measureValuesGroup.length) {
                mvDpCount = getMeasureValueDataPointCount(this._measureValuesGroup[0].getMeasureValues()[0]);
            }

            for (var i = 0; i < this._measureValuesGroup.length; i++) {
                if (this._measureValuesGroup[i]) {
                    dpCount += mvDpCount * this._measureValuesGroup[i].getMeasureValues().length;
                }
            }

            return dpCount;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#isEmptyDataSet
         * @ignore
         */
        crossTableDataSet.prototype.isEmptyDataset = function() {
            return this._emptyDataset;
        };
        /**
         * @name sap.viz.data.CrosstableDataset#ctx2TableData
         * @ignore
         */
        crossTableDataSet.prototype.ctx2TableData = function(rawCtx) {
            var convertDims = function(ctx, crosstable) {
                var a1Index = ctx.path.dii_a1;
                var a2Index = ctx.path.dii_a2;

                var dims = {},
                    i, dim;
                if (!crosstable.getAnalysisAxisByIdx(0)) {
                    return null;
                }
                for (i = 0; i < crosstable.getAnalysisAxisByIdx(0).getDimensionLabels().length; i++) {
                    dim = crosstable.getAnalysisAxisByIdx(0).getDimensionLabels()[i];
                    dims[dim._uId] = dim._values[a1Index];
                }
                if (crosstable.getAnalysisAxisByIdx(1)) {
                    for (i = 0; i < crosstable.getAnalysisAxisByIdx(1).getDimensionLabels().length; i++) {
                        dim = crosstable.getAnalysisAxisByIdx(1).getDimensionLabels()[i];
                        dims[dim._uId] = dim._values[a2Index];
                    }
                }

                return dims;
            };
            var convertMeas = function(ctx, crosstable) {
                var a1Index = ctx.path.dii_a1;
                var a2Index = ctx.path.dii_a2;
                var mg = ctx.path.mg;
                var mi = ctx.path.mi;

                var obj = {};
                if (!crosstable.getMeasureValuesGroupByIdx(mg)) {
                    return null;
                }
                var mea = crosstable.getMeasureValuesGroupByIdx(mg).getMeasureValues()[mi];
                var meaId = mea._uId;
                obj[meaId] = mea._values[a2Index][a1Index];
                return obj;
            };
            var data = {};
            if (TypeUtils.isPlainObject(rawCtx)) {
                data.dimension = convertDims(rawCtx, this);
                data.measure = convertMeas(rawCtx, this);
            } else if (TypeUtils.isArray(rawCtx)) {
                data.dimension = convertDims(rawCtx[0], this);
                var measures = {};
                for (var i = 0; i < rawCtx.length; i++) {
                    if (!rawCtx[i]) {
                        continue;
                    }
                    var measure = convertMeas(rawCtx[i], this);
                    for (var attr in measure) {
                        if (measure.hasOwnProperty(attr)) {
                            measures[attr] = measure[attr];
                        }
                    }
                }
                data.measure = measures;
            } else {
                return;
            }
            return data;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#ctx2ArrayData
         * @ignore
         */
        crossTableDataSet.prototype.ctx2ArrayData = function(rawCtx) {
            var convertDims = function(ctx, crosstable) {
                var a1Index = ctx.path.dii_a1;
                var a2Index = ctx.path.dii_a2;

                var dims = [],
                    dim, i;
                if (!crosstable.getAnalysisAxisByIdx(0)) {
                    return null;
                }
                for (i = 0; i < crosstable.getAnalysisAxisByIdx(0).getDimensionLabels().length; i++) {
                    dim = crosstable.getAnalysisAxisByIdx(0).getDimensionLabels()[i];
                    dims.push({
                        key: dim._uId,
                        value: dim._values[a1Index]
                    });
                }
                if (crosstable.getAnalysisAxisByIdx(1)) {
                    for (i = 0; i < crosstable.getAnalysisAxisByIdx(1).getDimensionLabels().length; i++) {
                        dim = crosstable.getAnalysisAxisByIdx(1).getDimensionLabels()[i];
                        dims.push({
                            key: dim._uId,
                            value: dim._values[a2Index]
                        });
                    }
                }

                return dims;
            };
            var convertMeas = function(ctx, crosstable) {
                var a1Index = ctx.path.dii_a1;
                var a2Index = ctx.path.dii_a2;
                var mg = ctx.path.mg;
                var mi = ctx.path.mi;

                var obj = [];
                if (!crosstable.getMeasureValuesGroupByIdx(mg)) {
                    return null;
                }
                var mea = crosstable.getMeasureValuesGroupByIdx(mg).getMeasureValues()[mi];
                var meaId = mea._uId;
                obj.push({
                    key: meaId,
                    value: mea._values[a2Index][a1Index]
                });
                return obj;
            };
            var data = {};
            if (TypeUtils.isPlainObject(rawCtx)) {
                data.dimension = convertDims(rawCtx, this);
                data.measure = convertMeas(rawCtx, this);
            } else if (TypeUtils.isArray(rawCtx)) {
                data.dimension = convertDims(rawCtx[0], this);
                var measures = [];
                for (var i = 0; i < rawCtx.length; i++) {
                    if (!rawCtx[i]) {
                        continue;
                    }
                    var measure = convertMeas(rawCtx[i], this);
                    for (var element in measure) {
                        if (measure.hasOwnProperty(element)) {
                            measures.push(measure[element]);
                        }
                    }
                }
                data.measure = measures;
            } else {
                return;
            }
            return data;
        };
        /**
         * @name sap.viz.data.CrosstableDataset#tableData2Ctx
         * @ignore
         */
        crossTableDataSet.prototype.tableData2Ctx = function(data) {
            var dims = data.dimension;
            var meas = data.measure;
            if (TypeUtils.isEmptyObject(dims) && TypeUtils.isEmptyObject(meas)) {
                return [];
            }
            var i;
            var getIndexs = function(array, keyValue) {
                var ret = [];
                for (i = 0; i < array.length; i++) {
                    if (array[i] === keyValue) {
                        ret[i] = i;
                    }
                }
                return ret;
            };
            var getOnlyIndexes = function(indexes, dimsCount) {
                var onlyIndexes = [],
                    i;
                // if no dimmension in data passed in, then we'll pick out all dimensions on the measures
                if (indexes.length === 0) {
                    for (i = 0; i < dimsCount; i++) {
                        onlyIndexes.push(i);
                    }
                } else {
                    for (i = 0; i < indexes[0].length; i++) {
                        var allHas = true;
                        for (var j = 0; j < indexes.length; j++) {
                            if (indexes[j][i] === undefined) {
                                allHas = false;
                                break;
                            }
                        }
                        if (allHas) {
                            onlyIndexes.push(i);
                        }
                    }
                }
                return onlyIndexes;
            };
            var getDimensionValues = function(dim, dimValue, analysisAxis) {
                var ret = [];
                for (var i = 0; i < analysisAxis.length; i++) {
                    var dimLabels = analysisAxis[i]._dimensionLabels;
                    for (var j = 0; j < dimLabels.length; j++) {
                        if (dim === dimLabels[j]._uId) {
                            ret[i] = getIndexs(dimLabels[j]._values, dimValue);
                            return ret;
                        }
                    }
                }
            };
            var aa1 = [];
            var aa2 = [];
            for (var key in dims) {
                if (dims.hasOwnProperty(key)) {
                    var indexes = getDimensionValues(key, dims[key], this._analysisAxis);
                    if (indexes[0]) {
                        aa1.push(indexes[0]);
                    } else if (indexes[1]) {
                        aa2.push(indexes[1]);
                    }
                }
            }
            var onlyAA1 = [];
            var onlyAA2 = [];
            if (this._analysisAxis[0] && TypeUtils.isArray(this._analysisAxis[0]._dimensionLabels)) {
                onlyAA1 = getOnlyIndexes(aa1, this._analysisAxis[0]._dimensionLabels[0]._values.length);
            } else {
                var length = this.getDataPointCount() / this.getMeasureValuesGroupCount();
                for (i = 0; i < length; i++) {
                    onlyAA1.push(i);
                }
            }
            if (this._analysisAxis[1] && TypeUtils.isArray(this._analysisAxis[1]._dimensionLabels)) {
                onlyAA2 = getOnlyIndexes(aa2, this._analysisAxis[1]._dimensionLabels[0]._values.length);
            } else {
                onlyAA2.push(0);
            }


            var mgCount = this._measureValuesGroup.length;
            var getMeasureValues = function(values, onlyAA1, onlyAA2, id, mg, mi) {
                var ret = [];
                for (i = 0; i < onlyAA2.length; i++) {
                    for (var j = 0; j < onlyAA1.length; j++) {
                        var obj = {};
                        obj[id] = values[onlyAA2[i]][onlyAA1[j]];
                        obj.mg = mg;
                        obj.mi = mi;
                        obj.dii_a1 = onlyAA1[j];
                        obj.dii_a2 = onlyAA2[i];
                        ret.push(obj);
                    }
                }
                return ret;
            };
            var allMeasureValues = [];
            for (i = 0; i < mgCount; i++) {
                var measureValues = this._measureValuesGroup[i]._measureValues;
                for (var j = 0; j < measureValues.length; j++) {
                    var values = measureValues[j]._values;
                    allMeasureValues = allMeasureValues.concat(getMeasureValues(values, onlyAA1, onlyAA2, measureValues[
                        j]._uId, i, j));
                }
            }
            var allCtx = [];
            var packCtx = function(ctx) {
                var obj = {};
                obj.dii_a1 = ctx.dii_a1;
                obj.dii_a2 = ctx.dii_a2;
                obj.mg = ctx.mg;
                obj.mi = ctx.mi;
                return obj;
            };
            if (TypeUtils.isEmptyObject(meas)) {
                for (i = 0; i < allMeasureValues.length; i++) {
                    allCtx.push(packCtx(allMeasureValues[i]));
                }
            } else {
                for (i = 0; i < allMeasureValues.length; i++) {
                    for (key in meas) {
                        if (meas[key] === allMeasureValues[i][key]) {
                            allCtx.push(packCtx(allMeasureValues[i]));
                        }
                    }
                }
            }
            return allCtx;
        };

        /**
         * @name sap.viz.data.CorsstalbeDataset#toJSON
         * @ignore
         * @param {Object} options, optional
         * Example:
         *      {
         *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
         *      }
         * @return {Object} ctJSON
         * Example:
         *      {
         *          id: "sap.viz.data.CrosstableDataset",
         *          data: <data object for CrosstableDataset>
         *          info: <info array for CrosstableDataset>
         *      }
         */
        crossTableDataSet.prototype.toJSON = function(options) {
            var id = "sap.viz.data.CrosstableDataset";
            var data = this.data();
            var info = this.info(); // only 'additionalData' is supported
            info = (TypeUtils.isArray(info) && info.length > 0) ? info : undefined;
            var i, j;
            if (options && options.emptyDataset === true) {
                var emptyDataValues = function(data) {
                    for (j = 0; j < data.length; j++) {
                        if (data[j].values && TypeUtils.isArray(data[j].values)) {
                            data[j].values = [];
                        }
                        if (data[j].infos && TypeUtils.isArray(data[j].infos)) {
                            delete data[j].infos;
                        }
                    }
                };
                if (data[ANALYSISAXIS]) {
                    var aa = data[ANALYSISAXIS];
                    for (i = 0; i < aa.length; i++) {
                        emptyDataValues(aa[i].data);
                    }
                }
                if (data[MEASUREVALUESGROUP]) {
                    var mg = data[MEASUREVALUESGROUP];
                    for (i = 0; i < mg.length; i++) {
                        emptyDataValues(mg[i].data);
                    }
                }
                info = undefined;
            }
            var ctJSON = {
                id: id,
                data: data,
                info: info
            };
            return ctJSON;
        };

        /**
         * Deserialize CrosstableDataset
         * @ignore
         * @param {Object} ctJSON
         * @return {Objece} CrosstableDataset
         */
        crossTableDataSet.fromJSON = function(ctJSON) {
            if (!TypeUtils.isPlainObject(ctJSON) || ctJSON.id !== 'sap.viz.data.CrosstableDataset' ||
                !ctJSON.hasOwnProperty('data')) {
                return;
            }
            var data = ObjectUtils.clone(ctJSON.data);
            var info = ObjectUtils.clone(ctJSON.info);
            var ctDataset = new crossTableDataSet();
            ctDataset.data(data);
            ctDataset.info(info);
            return ctDataset;
        };


        return crossTableDataSet;

    });
define('sap/viz/api/data/CrosstableDataset',[
    'sap/viz/framework/chartmodel/CrosstableDataset',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'exports'
], function Setup(CrosstableDataset, ObjectUtils, TypeUtils) {

    /**
     * sap.viz.api.data.CrosstableDataset
     * @class sap.viz.api.data.CrosstableDataset
     */
    var crosstableD = function() {
        this._crosstableDataset = new CrosstableDataset();
        this.type = 'sap.viz.api.data.CrosstableDataset';
    };
    /**
     * Get or Set the data in CrosstableDataset
     * @method sap.viz.api.data.CrosstableDataset.prototype.data
     * @param {Object|undefined} value
     *                      optional, pass the data object consist of "analysisAxis" and "measureValuesGroup", 
     Check /viz/wiki/ProductGuides/Tutorials/XTabDataModel for detail
     *
     *<pre>
     * Example:
     * {
     *      "analysisAxis" : [{
     *          "index" : 1,
     *          "data" : [{
     *              "type" : "Dimension",
     *              "name" : "Product",
     *              "values" : ["Car", "Truck", "Motorcycle", "Bicycle"]
     *          }]
     *      }, {
     *          "index" : 2,
     *          "data" : [{
     *              "type" : "Dimension",
     *              "name" : "Country",
     *              "values" : ["China", "USA"]
     *          }, {
     *              "type" : "Dimension",
     *              "name" : "Year",
     *              "values" : ["2001", "2001"]
     *          }]
     *      }],
     *      "measureValuesGroup" : [{
     *          "index" : 1,
     *          "data" : [{
     *              "type" : "Measure",
     *              "name" : "Profit",
     *              "values" : [[25, 136, 23, 116], [58, 128, 43, 73]]
     *          }, {
     *              "type" : "Measure",
     *              "name" : "Revenue",
     *              "values" : [[50, 236, 43, 126], [158, 228, 143, 183]]
     *          }]
     *      }]
     *  }
     * </pre>
     Check /viz/wiki/ProductGuides/Tutorials/XTabDataModel for Understanding CrossTableDataset
     */
    crosstableD.prototype.data = function(value) {
        if (value !== undefined) {
            this._crosstableDataset.data(value);
        } else {
            return this._crosstableDataset.data();
        }
    };

    /**
     * Get/Set additional info for the crosstable dataset
     * By now, only "additionalData" info type is supported
     * @name sap.viz.api.data.CrosstableDataset#info
     * @method sap.viz.api.data.CrosstableDataset.prototype.info
     * @param {Array|String} [arguments]
     *                               Array of Objects is for setting info and passes different types of infos objects.
     * <pre>
     * Schema:
     * [{
     *     "type": "additionalData",
     *     "info": [{
     *        "name": "<dimension_name>",
     *        // Match dimension member's 1D Array structure
     *        "infoValues": []
     *     }, {
     *     "name": "<measure_name>",
     *        // Match measure value's 2D Array structure
     *        "infoValues": [[]]
     *     }]
     * }]
     * </pre>
     * <pre>
     * Example:
     * [{
     *    "type" : "additionalData",
     *    "info" : [{
     *        "name" : "Country",
     *        "infoValues" : [{
     *            "CountryID": "1"
     *        }, {
     *            "CountryID": "2"
     *        }]
     *    }, {
     *        "name" : "Profit",
     *        "infoValues" : [[{
     *            "ID" : "11"
     *        }, {
     *            "ID" : "12"
     *        }, {
     *            "ID" : "13"
     *        }, {
     *            "ID" : "14"
     *        }], [{
     *            "ID" : "21"
     *        }, {
     *            "ID" : "22"
     *        }, {
     *            "ID" : "23"
     *        }, {
     *            "ID" : "24"
     *        }]]
     *    }]
     * }]
     * </pre>
     *                               or String is for getting info and passes the name of a specific type of info.
     * <pre>
     * Example:
     * "additionalData"
     * </pre>
     * @returns {Array}
     *                 return a copy of info type passed in
     *                        or a copy all type of info set if no param provided
     */
    crosstableD.prototype.info = function(value) {
        if (value !== undefined && !TypeUtils.isString(value)) {
            this._crosstableDataset.info(ObjectUtils.clone(value));
        } else if (TypeUtils.isString(value)) {
            return ObjectUtils.clone(this._crosstableDataset.info(value));
        } else {
            return ObjectUtils.clone(this._crosstableDataset.info());
        }
    };
    /**
     * Serialize CrosstableDataset
     * @ignore
     * @name sap.viz.api.data.CrosstableDataset#toJSON
     * @method sap.viz.api.data.CrosstableDataset.prototype.toJSON
     * @param {Object} options, optional
     * Example:
     *      {
     *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
     *      }
     * @return {Object}
     *
     * <pre>
     * Example:
     *     {
     *            id: 'sap.viz.data.CrosstableDataset',
     *            data: dataObject, //data object for CrosstableDataset
     *            info: infoArray, //array for CrosstableDataset
     *     }
     * </pre>
     */
    crosstableD.prototype.toJSON = function(options) {
        return this._crosstableDataset.toJSON(options);
    };

    /**
     * Deserialize CrosstableDataset
     * @ignore
     * @param {Object} ctJSON
     * @return {Objece} CrosstableDataset
     */
    crosstableD.fromJSON = function(ctJSON) {
        if (!TypeUtils.isPlainObject(ctJSON) || ctJSON.id !== 'sap.viz.data.CrosstableDataset' ||
            !ctJSON.hasOwnProperty('data')) {
            return;
        }
        var data = ObjectUtils.clone(ctJSON.data);
        var info = ObjectUtils.clone(ctJSON.info);
        var ctDataset = new crosstableD();
        ctDataset.data(data);
        ctDataset.info(info);
        return ctDataset;
    };
    //Used for VizControls.
    crosstableD.prototype.hasFakeData = function() {
        return this._crosstableDataset.hasFakeData();
    };
    
    crosstableD.prototype.destroy = function() {
        this._crosstableDataset = null;
        this.type = null;
    };
    
    return crosstableD;
});
define('sap/viz/framework/chartmodel/info/FlatTableInfoHandler',[], function() {
    var _handler = {};
    var handler = {};

    var geoInfoHandler = {
        'process': function(infoSet, infoData) {
            if (infoData.type != 'geo') {
                return;
            }
            if (infoSet == null) {
                infoSet = {};
            }
            infoSet[infoData.type] = infoData.info;
            return infoSet;
        },
        'find': function(infoset, rowIndex, selectedColumnIndexes) {
            var geoInfos = infoset['geo'];
            var geoInfo = geoInfos[rowIndex];
            var infoResult;
            if (geoInfo == null) {
                return;
            }
            for (var i = 0; i < selectedColumnIndexes.length; ++i) {
                var colIndex = selectedColumnIndexes[i];
                if (infoResult == null) {
                    infoResult = [];
                }
                infoResult.push(geoInfo[colIndex]);
            }
            return infoResult;
        }
    };

    var additionalDataInfoHandler = {
        'process': function(infoSet, infoData) {
            if (infoData.type != 'additionalData') {
                return;
            }
            if (infoSet == null) {
                infoSet = {};
            }
            infoSet[infoData.type] = infoData.info;
            return infoSet;
        },
        'find': function(infoset, rowIndex, selectedColumnIndexes) {
            var additionalDataInfos = infoset['additionalData'];
            var additionalDataInfo = additionalDataInfos[rowIndex];
            var infoResult;
            if (additionalDataInfo == null) {
                return;
            }
            for (var i = 0; i < selectedColumnIndexes.length; ++i) {
                var colIndex = selectedColumnIndexes[i];
                if (infoResult == null) {
                    infoResult = [];
                }
                infoResult.push(additionalDataInfo[colIndex]);
            }
            return infoResult;
        }
    };

    handler.get = function(type) {
        return _handler[type];
    };

    handler.register = function(type, handler) {
        _handler[type] = handler;
    };

    handler.register('geo', geoInfoHandler);
    handler.register('additionalData', additionalDataInfoHandler);

    return handler;
});
define('sap/viz/framework/chartmodel/FlatTableDataset',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/chartmodel/info/FlatTableInfoHandler',
    'sap/viz/framework/common/util/FunctionUtils', 'sap/viz/framework/common/lang/LangManager'
], function(util, ObjectUtils, FlatTableInfoHandler, FunctionUtils, langManager) {
    var colName = 'fields';
    var rowName = "data";
    var contextIdName = "_context_row_number";
    var measureTypeName = "Measure";
    var dimesionTypeName = "Dimension";
    var sematicTypeName = "semanticType";

    /**
     * @constructor
     * Constructor of flat table dataset.
     * @param data, example:
     *             {
     *                 metadata:{
     *                     fields:[{
     *                         id: 'Year',
     *                      semanticType: 'Dimension'
     *                     },{
     *                         id: 'Profit',
     *                      semanticType: 'Measure'
     *                     }],
     *                     summary:{}
     *                 },
     *                 data:[
     *                     [2001,100000],
     *                     [2002,200000]
     *                 ],
     *                 info:[    //optional
     *                     {}
     *                 ]
     *             }
     */
    var FlatTableDataset = function(dataset, dataSettings) {
        this._infoset = {};
        if (dataSettings){
            this._isClone = !dataSettings.skipCloneData;
        }else{
            this._isClone = true;
        }
        if (dataset) {
            this.data(dataset);
            if (this._dataset.info != null) {
                this.info(this._dataset.info);
            }
            this._emptyDataset = false;
        } else {
            this._emptyDataset = true;
        }
    };
    
    FlatTableDataset.prototype.destroy = function() {
        this._infoset = null;
        this._table = null;
        this._data = null;
        this._dataset.data = null;
        this._dataset.metadata = null;
        this._dataset = null;
        this._emptyDataset = null;
    };
    
    FlatTableDataset.prototype._getTypeByIndex = function(index) {
        var type = this._dataset.metadata.fields[index].semanticType;
        if (type === dimesionTypeName) {
            return 'Dimension';
        } else if (type === measureTypeName) {
            return 'Measure';
        }
    };
    // IE doesn't has Number.MAX_SAFE_INTEGER, we have to hard code here;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    /**
     * Get/set for the property data.
     * @param value {Object}:
     * example {
     *         metadata:{},
     *         data:[]
     * }
     * @returns {Object} instance of FlatTableDataset
     */
    FlatTableDataset.prototype.data = function(value) {
        if (value != null) {
            this._dataset = this._isClone?ObjectUtils.clone(value):value;
            //remove quotes from measure
            var data = this._dataset.data;
            var fields = this._dataset.metadata.fields;

            if (this._dataset.metadata.context) {
                this._dataset.context = this._dataset.metadata.context;
            }
            if(data) {
                var i, j, iLen, jLen;
                for (i = 0, iLen = fields.length; i < iLen; i++) {
                    if (fields[i].semanticType === "Measure") {
                        for (j = 0, jLen = data.length; j < jLen; j++) {
                            var d = data[j][i];
                            var dType = Object.prototype.toString.call(d);
                            var nVal = +d;
                            if ((dType !== "[object Number]" && dType !== "[object String]") || 
                                isNaN(nVal) || (d.trim && d.trim() === "")){
                                data[j][i] = null;
                            } else if (dType !== "[object String]" || Math.abs(nVal) < MAX_SAFE_INTEGER){
                                data[j][i] = nVal;
                            }
                        }
                    }
                }
            }
            this._data = this._dataset[rowName] ? this._dataset[rowName] : [];
            this._table = null;
            return this;
        }
        return {
            metadata: this._isClone?ObjectUtils.clone(this._dataset.metadata):this._dataset.metadata,
            data: this._isClone?ObjectUtils.clone(this._dataset.data):this._dataset.data
        };
    };
    /**
     * get the data of specified column
     * @param id {String} id of column
     * @returns {Array}
     */
    FlatTableDataset.prototype.getMetadata = function(id) {
        if(id === contextIdName){
            return [{
                id: contextIdName,
                name: contextIdName
            }];
        }

        var cols = this._dataset.metadata[colName];
        for (var i = 0, len = cols.length; i < len; ++i) {
            var col = cols[i];
            if (col.id === id) {
                col = ObjectUtils.clone(col);
                //we want to know the col index of this column
                col.index = i;
                return [col];
            }
        }
        return [];
    };

    /**
     * Get the meta data of the field of the specified index
     * @param index {Number}
     * @returns
     */
    FlatTableDataset.prototype.getMetadataByIndex = function(index) {
        return this._dataset.metadata[colName][index];
    };
    
    function isContextContain(context, id){
        var contexts = context;
        var result = false;
        if(!util.isArray(context)){
            contexts = [context];
        }
        for(var i = 0; i < contexts.length; ++i){
            var name = contexts[i];
            if(name.id) {
                name = name.id;
            }
            if(name === id) {
                result = true;
                break;
            }
        }
        return result;
        
    }
    FlatTableDataset.prototype._getColumnIdOfSemanticType = function(semanticType) {
        var cols = this._dataset.metadata[colName];
        var result = [];
        var length = cols.length;
        for (var i = 0; i < length; ++i) {
            var col = cols[i];
            if (col[sematicTypeName] === semanticType) {
                if (this._dataset.context) {
                    if (isContextContain(this._dataset.context,col.id)) {
                        continue;
                    }
                }
                result.push(col.id);
            }
        }
        return result;
    };
    /**
     * get the column id of measures
     * @returns {Array}
     */
    FlatTableDataset.prototype.getMeasures = function() {
        return this._getColumnIdOfSemanticType(measureTypeName);
    };
    /**
     * get the column id of dimensions
     * @returns {Array}
     */
    FlatTableDataset.prototype.getDimensions = function() {
        return this._getColumnIdOfSemanticType(dimesionTypeName);
    };
    /**
     * Transform the data into an object table
     * @returns {Array} the data in the object table format
     */
    FlatTableDataset.prototype.getTable = function() {
        if (this._table != null) {
            return this._table;
        }
        var cols = this._dataset.metadata[colName];
        var rows = this._data;
        var result = [];
        for (var i = 0; i < rows.length; ++i) {
            var item = {};
            for (var j = 0; j < cols.length; ++j) {
                item[cols[j].id] = rows[i][j];
            }
            result.push(item);
        }
        this._table = result;
        return this._table;
    };
    /**
     * get the specified row item of some specified type
     * @param rowIndex {Number} the index of the row you want to get
     * @returns {Array|Object}
     */
    FlatTableDataset.prototype.getRow = function(rowIndex) {
        var row = this._data[rowIndex];
        if (row == null) {
            return;
        }
        return row.slice(0);
    };
    /**
     * for now we only support simple criteria which is key:value pairs
     * and we return all rows match the criteria
     * @param criteria
     * @returns {Array} all rows index match the criteria
     */
    FlatTableDataset.prototype.query = function(criteria) {
        var ret = [];
        var rowMatched = true;
        for (var i = 0, len = this._data.length; i < len; i++) {
            var row = this._data[i];
            rowMatched = true;
            for (var key in criteria) {
                if (criteria.hasOwnProperty(key)) {
                    var meta = this.getMetadata(key);
                    if (meta && meta.length > 0 && row[meta[0].index] !== criteria[key]) {
                        rowMatched = false;
                        break;
                    }
                }
            }
            if (rowMatched) {
                ret.push(i);
            }
        }
        return ret;
    };
    /**
     * set a new row to the dataset with its specified row index.
     * @param {Number} rowIndex
     * @param {Array} rowItem
     */
    FlatTableDataset.prototype.setRow = function(rowIndex, rowItem) {
        var currentRowNum = this._data.length;
        if(!currentRowNum || rowIndex >= currentRowNum){
            return;
        }
        var numCols = this._dataset.metadata[colName].length;
        var rowData = {};
        var rawRowData = [],
            colId;
        if (util.isArray(rowItem)) {
            for (var i = 0; i < numCols - 1; ++i) {
                colId = this._dataset.metadata[colName][i].id;
                rowData[colId] = rowItem[i];
                rawRowData[i] = rowItem[i];
            }
            var lastColumnId = this._dataset.metadata[colName][numCols - 1].id;
            if(lastColumnId === contextIdName){
                rowData[contextIdName] = this._data[rowIndex][numCols - 1];
                rawRowData[numCols - 1] = this._data[rowIndex][numCols - 1];
            }else{
                rowData[lastColumnId] = rowItem[numCols-1];
                rawRowData[numCols - 1] = rowItem[numCols-1];
            }
        } else {
            //TODO error handle for format error
            return;
        }
        this._data[rowIndex] = rawRowData;
        if (this._table) {
            this._table[rowIndex] = rowData;
        }
    };
    FlatTableDataset.prototype._getInfoOfSelectedColumnsByRowIndex = function(selectedColumnIndexes, rowIndex) {
        var result = null;
        for (var infoType in this._infoset) {
            if (this._infoset.hasOwnProperty(infoType)) {
                var info = this._infoset[infoType];
                var infoResult = null;
                if (info == null) {
                    continue;
                }
                var handler = FlatTableInfoHandler.get(infoType);
                if (handler != null && util.isFunction(handler.find)) {
                    infoResult = handler.find(this._infoset, rowIndex, selectedColumnIndexes);
                }
                if (result == null && infoResult != null) {
                    result = {};
                }
                if (result != null) {
                    result[infoType] = infoResult;
                }
            }
        }
        return result;
    };

    FlatTableDataset.prototype._getAllColumnIds = function() {
        var cols = this._dataset.metadata[colName];
        var result = [];
        var length = cols.length;
        for (var i = 0; i < length; ++i) {
            result.push(cols[i].id);
        }
        return result;
    };

    FlatTableDataset.prototype.getContext = function() {
        if (util.isArray(this._dataset.context)) {
            return this._dataset.context;
        } else if (this._dataset.context) {
            return [this._dataset.context];
        } else {
            return [];
        }

    };
    
    FlatTableDataset.prototype.columnDataInFields = function(selectedColumns) {
        if (selectedColumns !== undefined && !util.isArray(selectedColumns)) {
            // TODO throw error 
            FunctionUtils.error("Invalid Parameter");
        }
        if (selectedColumns == null || selectedColumns.length === 0) {
            return this._data.slice(0);
        }

        var rowData = this._data;
        var columnCount = selectedColumns.length;
        var rowCount = rowData.length;
        var allColumnIds = this._getAllColumnIds();
        var parsedData = {};

        for (var i = 0; i < columnCount; ++i) {
            var columnName = selectedColumns[i];
            var colIndex = allColumnIds.indexOf(columnName);
            parsedData[columnName] = parsedData[columnName] || [];
            var column = parsedData[columnName];
            if (!column.length){
                column.length = rowCount;
            }
            for (var j = 0; j < rowCount; ++j) {
                var data = rowData[j][colIndex];

                if (util.isArray(data)) {
                    data = data.slice();
                } else if (data instanceof Object) {
                    data = ObjectUtils.extend(true, {}, data);
                }
                column[j] = data;
            }
        }
        return {
            data: parsedData
        };
    };
    
    /**
     * seleted the data of specified columns
     * @param selectedColumns :['columnId1','columnId2']
     * @return {Array} clone of the this._data or its subset
     */
    FlatTableDataset.prototype.dataInFields = function(selectedColumns) {
        if (selectedColumns !== undefined && !util.isArray(selectedColumns)) {
            // TODO throw error 
            FunctionUtils.error("Invalid Parameter");
        }
        if (selectedColumns == null || selectedColumns.length === 0) {
            return this._data.slice(0);
        } else {
            var rowData = this._data;
            var hasInfo = this._infoset != null;
            var result = [],
                i;
            var selectedColumnIndexes = [];
            var allColumnIds = this._getAllColumnIds();
            var initialId = 0;

            for (i = 0; i < selectedColumns.length; ++i) {
                selectedColumnIndexes.push(allColumnIds.indexOf(selectedColumns[i]));
            }

            for (i = 0; i < rowData.length; ++i) {
                var data = [];
                var info = null;
                if (selectedColumns[0] === contextIdName) {
                    data.push(initialId++);
                } else {
                    for (var j = 0; j < selectedColumnIndexes.length; ++j) {
                        var colIndex = selectedColumnIndexes[j];
                        var dataValue = rowData[i][colIndex];
                        if (util.isArray(dataValue)) {
                            data.push(dataValue.slice(0));
                        } else if (dataValue instanceof Object) {
                            data.push(ObjectUtils.extend(true, {}, dataValue));
                        } else {
                            data.push(dataValue);
                        }
                    }
                    info = this._getInfoOfSelectedColumnsByRowIndex(selectedColumnIndexes, i);
                }

                result.push({
                    data: data,
                    info: info
                });
            }
            return result;
        }
    };

    /**
     * Get/set for the info.
     * @param {String|Array of Object} value
     */
    FlatTableDataset.prototype.info = function(value) {
        if (value == null) {
            var result = [];
            if (this._infoset['additionalData'] != null) {
                result.push({
                    type: 'additionalData',
                    info: this._infoset['additionalData']
                });
            }
            return result;
        } else if (util.isString(value)) {
            return [{
                type: value,
                info: this._infoset[value]
            }];
        } else if (util.isArray(value)) {
            for (var i = 0; i < value.length; ++i) {
                var infoData = value[i];
                var handler = FlatTableInfoHandler.get(infoData.type);
                if (handler != null && util.isFunction(handler.process)) {
                    this._infoset = handler.process(this._infoset, infoData);
                }
            }
            return this;
        }

    };

    FlatTableDataset.prototype.isEmptyDataset = function() {
        if (this.getDataPointCount() === 0) {
            return true;
        } else {
            return false;
        }
    };

    FlatTableDataset.prototype.getDataPointCount = function() {
        var count = 0;
        if (this._dataset.data && this._dataset.data[0]) {
            count = this._dataset.data[0].length * this._dataset.data.length;
        }
        return count;
    };

    FlatTableDataset.prototype.hasFakeData = function() {
        if (this._dataset.metadata.fields && this._dataset.metadata.fields[0]) {
            var fields = this._dataset.metadata.fields;
            for (var i = 0; i < fields.length; i++) {
                if (fields[i].semanticType && (fields[i].semanticType === dimesionTypeName || fields[i].semanticType ===
                    measureTypeName) && fields[i].isFake === true) {
                    return true;
                }
            }
        }
        return false;
    };

    /**
     * internal used for composing data form ctx
     * @ignore
     */
    FlatTableDataset.prototype.ctx2TableData = function(rawCTX) {
        var data = {};
        if (!Array.isArray(rawCTX)) {
            rawCTX = [rawCTX];
        }
        var dims = {};
        var measures = {};
        for (var i = 0; i < rawCTX.length; i++) {
            var ctx = rawCTX[i];
            if (!ctx) {
                continue;
            }
            var row = this.getRow(ctx.row);
            //for each value in row, if it's a dimension put it in dims
            //if it's a measure, put it in measure if it's index is same as ctx.col
            for (var j = 0; j < row.length; j++) {
                var eachMetadata = this.getMetadataByIndex(j);
                if (eachMetadata.semanticType === dimesionTypeName) {
                    dims[eachMetadata.name] = row[j];
                } else if (eachMetadata.semanticType === measureTypeName && j === ctx.col) {
                    measures[eachMetadata.name] = row[j];
                }
            }
        }
        data.dimension = dims;
        data.measure = measures;
        return data;
    };

    /**
     * Serialize FlatTableDataset.data to JSON format
     * @ignore
     * @param {Object} options, optional
     * Example:
     *      {
     *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
     *      }
     * @return {Object} ftJSON
     * Example:
     * {
     *    id: "sap.viz.data.FlatTableDataset",
     *    data: <data object for FlatTableDataset>,
     *    info: <info array for FlatTableDataset>
     * }
     */
    FlatTableDataset.prototype.toJSON = function(options) {
        var id = "sap.viz.data.FlatTableDataset";
        var data = this.data();
        var infos = this._isClone?ObjectUtils.clone(this._infoset):this._infoset;
        var info = [];
        for (var key in infos) {
            if (infos.hasOwnProperty(key)) {
                var obj = {};
                obj.type = key;
                obj.info = infos[key];
                info.push(obj);
            }
        }
        info = info.length > 0 ? info : undefined;
        if (options && options.emptyDataset === true) {
            data.data = [];
            info = undefined;
        }
        var ftJSON = {
            id: id,
            data: data,
            info: info
        };
        return ftJSON;
    };

    /**
     * Deserialize stringified FlatTableDataset.data back to object
     * @param {Object} ftJSON
     * @param {Object} [dataSettings] The settings of FlatTableDataset in a JSON object
     * @return {Object} data Object of FlatTableDataset.
     */
    FlatTableDataset.fromJSON = function(ftJSON, dataSettings) {
        if (!util.isPlainObject(ftJSON) || ftJSON.id !== 'sap.viz.data.FlatTableDataset' || !ftJSON.hasOwnProperty(
            'data')) {
            return;
        }
        var isClone = true;
        if (dataSettings){
            isClone = !dataSettings.skipCloneData;
        }
        var data;
        if (isClone) {
            data = ObjectUtils.clone(ftJSON.data);
            var info = ObjectUtils.clone(ftJSON.info);
            if (info !== undefined) {
                data.info = info;
            }
        } else {
            data = {};
            for (var i in ftJSON.data) {
                if (ftJSON.data.hasOwnProperty(i)) {
                    data[i] = ftJSON.data[i];
                }
            }
            if (ftJSON.info !== undefined) {
                data.info = ftJSON.info;
            }
        }
        var ftDataset = new FlatTableDataset(data, dataSettings);
        return ftDataset;
    };

    return FlatTableDataset;
});

define('sap/viz/api/data/FlatTableDataset',[
    'sap/viz/framework/chartmodel/FlatTableDataset',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/ObjectUtils',
    'exports'
], function Setup(FlatTableDataset, TypeUtil, Logger, langManager, ObjectUtil) {

    /**
     * sap.viz.api.data.FlatTableDataset
     * @class sap.viz.api.data.FlatTableDataset
     * @param {Object} data JSON object
     * @param {Object} [dataSettings] The settings of FlatTableDataset in a JSON object.
     *  The current supported setting is {skipCloneData: boolean}. Default setting is {skipCloneData: false}
     *  Enabling skipCloneData greatly improves the general charting performance when viewing a large amount of dataset.
     *  It will also apply any change to dataset right away without calling api of FlatTableDataset.data().
     * <pre>
     * Example:
     *     {
     *         metadata:{
     *             fields:[{
     *                 id: 'Year',
     *                 semanticType: 'Dimension'
     *             },{
     *                 id: 'Profit',
     *                 semanticType: 'Measure'
     *             }],
     *             summary:{}
     *         },
     *         data:[
     *             [2001,100000],
     *             [2002,200000]
     *         ],
     *             info:[    //optional
     *            {}
     *         ]
     *     }
     *
     * Parameters:
     * 0 param: default constructor, Example:
     *          var ft = new sap.viz.api.data.FlatTableDataset()
     * 1 param: data or dataSettings, Example:
     *          var ft = new sap.viz.api.data.FlatTableDataset(data); 
     *          var ft = new sap.viz.api.data.FlatTableDataset(dataSettings);
     * 2 params: data and dataSettings, Example:
     *          var ft = new sap.viz.api.data.FlatTableDataset(data, dataSettings);
     * </pre>
     */
    var FlatTableD = function() {
        if(arguments.length == 1 && arguments[0] && arguments[0].skipCloneData !== undefined && !arguments[0].data){
            this._FlatTableD = new FlatTableDataset(undefined, arguments[0]);
        }else{
            this._FlatTableD = new FlatTableDataset(arguments[0], arguments[1]);
        }
        this.type = 'sap.viz.api.data.FlatTableDataset';
    };
    /**
     * Get/Set data and metadata in FlatTableDataset
     * @method sap.viz.api.data.FlatTableDataset.prototype.data
     * @param {Object} value JSON Object
     *
     * <pre>
     * Example:
     *     {
     *         metadata:{
     *             fields:[{
     *                 id: 'Year',
     *                 semanticType: 'Dimension'
     *             },{
     *                 id: 'Profit',
     *                 semanticType: 'Measure'
     *             }],
     *             summary:{}
     *         },
     *         data:[
     *             [2001,100000],
     *             [2002,200000]
     *         ]
     *     }
     * </pre>
     */
    FlatTableD.prototype.data = function(value) {
        return this._FlatTableD.data(value);
    };

    /**
     * Get the data of specified column id
     * @name sap.viz.api.data.FlatTableDataset#metadata
     * @method sap.viz.api.data.FlatTableDataset.prototype.metadata
     * @param {String} id   id of column
     * @returns {Array of Object}
     */
    FlatTableD.prototype.metadata = function(id) {
        if (id != null) {
            return this._FlatTableD.getMetadata(id);
        } else {
            Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
        }
    };

    /**
     * Get the column ids of measures
     * @name sap.viz.api.data.FlatTableDataset#measures
     * @method sap.viz.api.data.FlatTableDataset.prototype.measures
     * @returns {Array of Object}
     */
    FlatTableD.prototype.measures = function() {
        return this._FlatTableD.getMeasures();
    };
    /**
     * Get the column ids of dimensions
     * @name sap.viz.api.data.FlatTableDataset#dimensions
     * @method sap.viz.api.data.FlatTableDataset.prototype.dimensions
     * @returns {Array of Object}
     */
    FlatTableD.prototype.dimensions = function() {
        return this._FlatTableD.getDimensions();
    };

    /**
     * Transform the data into an object table
     * @name sap.viz.api.data.FlatTableDataset#table
     * @method sap.viz.api.data.FlatTableDataset.prototype.table
     * @returns {Array of Object} the data in the object table format
     */
    FlatTableD.prototype.table = function() {
        return this._FlatTableD.getTable();
    };

    /**
     * Get/Set the specified row item of some specified type
     * @name sap.viz.api.data.FlatTableDataset#row
     * @method sap.viz.api.data.FlatTableDataset.prototype.row
     * @param  {Number}  rowIndex the index of the row you want to get
     * @param {Undefined|Array} param  to get the data in raw format or set the row
     *
     * <pre>
     * Example:
     *     FlatTableDataset.row(index) is the get method to get row.
     *     FlatTableDataset.row(index,[2001, 'Q2', 'CAN', 300, 200]) is the set method the set row.
     * </pre>
     * @returns {Array|Object|} return the raw value if this is a get function and no return value if this is a set 
     function.
     */
    FlatTableD.prototype.row = function(rowIndex, param) {
        if (TypeUtil.isNumber(rowIndex)) {
            if (TypeUtil.isPlainObject(param) || TypeUtil.isArray(param)) {
                this._FlatTableD.setRow(rowIndex, param);
            } else {
                return this._FlatTableD.getRow(rowIndex);
            }
        }
    };

    /**
     * Seleted the data of specified fields
     * @name sap.viz.api.data.FlatTableDataset#dataInFields
     * @method sap.viz.api.data.FlatTableDataset.prototype.dataInFields
     * @param {Array|Undefined} selectedColumns ['fieldId1','fieldId2']
     * @return {Array of Object} clone of the this._table or its subset
     */
    FlatTableD.prototype.dataInFields = function(selectedFields) {
        return this._FlatTableD.dataInFields(selectedFields);
    };

    /**
     * Get/set of the info of dataset
     * By now, only 'additionalData' info type is supported.
     * @name sap.viz.api.data.FlatTableDataset#info
     * @method sap.viz.api.data.FlatTableDataset.prototype.info
     * @param {Undefined|String|Array}infoData
     * @return {Array of Object}
     * <pre>
     * Example:
     *     1. dataset.info(); return the info of 'additionalData' type.
     *     2. dataset.info('additionalData'); return the info of the specified data. for current example the type is
      'additionalData'.
     *     3. dataset.info([{
     *                 type:'additionalData'
     *                 info:[[1,2,3,4]]
     *             }]);                    set the new info with it's type and info data.
     *</pre>
     */
    //TODO:NOT finished code.
    FlatTableD.prototype.info = function(infoData) {
        return this._FlatTableD.info(infoData);
    };


    /**
     * Serialize FlatTableDataset
     * @deprecated
     * @name sap.viz.api.data.FlatTableDataset#toJSON
     * @method sap.viz.api.data.FlatTableDataset.prototype.toJSON
     * @return {Object}
     *
     * <pre>
     * Example:
     *     {
     *            id: 'sap.viz.data.FlatTableDataset',
     *            data: dataObject, //data object for FlatTableDataset
     *            info: infoArray, //array for FlatTableDataset
     *     }
     * </pre>
     */

    FlatTableD.prototype.toJSON = function(options) {
        return this._FlatTableD.toJSON(options);
    };

    /**
     * Deserialize FlatTableDataset
     * @deprecated
     * @name sap.viz.api.data.FlatTableDataset#fromJSON
     * @method sap.viz.api.data.FlatTableDataset.fromJSON
     * @param {Object} ftJSON an object returned by method toJSON
     * @param {Object} [dataSettings] The settings of FlatTableDataset in a JSON object
     *  The current supported setting is {skipCloneData: boolean}. Default setting is {skipCloneData: false}
     *  Enabling skipCloneData greatly improves the general charting performance when viewing a large amount of dataset.
     *  It will also apply any change to dataset right away without calling api of FlatTableDataset.data().
     * @return {Object} an instance of FlatTableDataset same with which called method toJSON
     */
    FlatTableD.fromJSON = function(ftJSON, dataSettings) {
        var ftD = new FlatTableD(null, dataSettings);
        ftD._FlatTableD = FlatTableDataset.fromJSON(ftJSON, dataSettings);
        return ftD;
    };
    //Used for VizControls.
    FlatTableD.prototype.hasFakeData = function() {
        return this._FlatTableD.hasFakeData();
    };
    //Used for VizControls.
    FlatTableD.prototype.getContext = function() {
        return this._FlatTableD.getContext();
    };
    
    FlatTableD.prototype.destroy = function() {
        if (this._FlatTableD) {
            this._FlatTableD.destroy();
        }
        this._FlatTableD = null;
        this.type = null;
    };
    return FlatTableD;
});
define('sap/viz/api/core',[
    "sap/viz/framework/core/ChartViewRegistry",
    "sap/viz/api/core/VizInstance",
    "sap/viz/migrate/bindingMigrator",
    "sap/viz/framework/common/lang/LangManager",
    "sap/viz/api/data/CrosstableDataset",
    "sap/viz/api/data/FlatTableDataset",
    "sap/viz/framework/common/log/Logger",
    "sap/viz/migrate/MigrationTool",
    "exports"
], function(ChartViewRegistry, VizInstance, migrateUtils, langManager, CrosstableDataset,
    FlatTableDataset, Logger, MigrationTool) {
    return {

        createViz: function(param) {
            param.properties = param.properties || param.options;
            param = MigrationTool.migrate(param);
            var viz = new VizInstance(ChartViewRegistry, param);
            return viz;
        },
        destroyViz: function() {
            for (var i = -1, j = arguments.length; ++i < j;) {
                arguments[i].destroy();
            }
        },
        exportViz: function(chart, options) {
            return chart.toJSON(options);
        },
        loadViz: function(vizJSON, container) {
            if (arguments.length === 2) {
                var chartJSON = JSON.parse(JSON.stringify(vizJSON));
                chartJSON = MigrationTool.migrate(chartJSON, true);
                chartJSON.container = container;
                var data = null;

                data = chartJSON.data;
                data.data = data.val;
                if (chartJSON.data.type === "Crosstable") {
                    data.id = "sap.viz.data.CrosstableDataset";
                    data = CrosstableDataset.fromJSON(data);
                } else if (chartJSON.data.type === "FlatTable") {
                    data.id = "sap.viz.data.FlatTableDataset";
                    data = FlatTableDataset.fromJSON(data);
                }

                chartJSON.data = data;
                return this.createViz(chartJSON);
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
            }

        },
        getValueScales:function(param){
            var scales = param.scales;
            delete param.scales;
            param.properties = param.properties || param.options;
            param = MigrationTool.migrate(param);
            param.bNoRender = true;   
            var viz = new VizInstance(ChartViewRegistry, param);
            delete param.bNoRender;
            var results = viz._getValueScales();
            viz.destroy();
            param.scales = scales;
            return results;
            
        }
    };

});

define('sap/viz/framework/common/util/NameColorUtils',['sap/viz/framework/common/util/ObjectUtils'],
    function Setup(ObjectUtils) {

        var configs = {};
        var colorRegex =
            /^ *(#[a-f0-9]{6}|#[a-f0-9]{3}|(rgb|rgba|hsl|hsla) *\([^)]*\)|AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen|DarkGrey|DarkSlateGrey|DimGrey|Grey|LightGrey|LightSlateGrey|SlateGrey) *$/i; //jshint ignore:line
        var registered = false;
        var namedColorUtils = {

            constructor: function() {
                return;
            },

            register: function(obj) {
                registered = true;
                configs = ObjectUtils.extendByRepalceArray(true, null, configs, obj);
                return namedColorUtils;
            },
            convertColor: function(namedColor) {
                if (!registered){
                    return namedColor;
                }
                var colorValue = null;
                if (configs.hasOwnProperty(namedColor)) {
                    colorValue = configs[namedColor];
                }

                var retValue = null;
                if (colorValue) {
                    retValue = colorValue;
                } else if (colorRegex.test(namedColor)) {
                    retValue = namedColor;
                } else {
                    retValue = "#000000";
                }
                return retValue;
            }

        };

        return namedColorUtils;
    });

define('sap/viz/framework/common/format/UnitFormat',['sap/viz/framework/common/util/TypeUtils', 
        'sap/viz/framework/common/format/FormatManager',
        'sap/viz/framework/common/util/Constants',
        'sap/viz/framework/common/util/ObjectUtils',
        'sap/viz/framework/common/format/XCFormat'
    ],
    function Setup(TypeUtils, FormatManager, Constants, ObjectUtils, XCFormat) {
        
        function SI_formatPrefix(v, i) {
            var k = Math.pow(10, Math.abs(8 - i) * 3);
            return {
                scale : i > 8 ? function(v) {
                    return v / k;
                } : function(v) {
                    return v * k;
                },
                symbol : v
            };
        }
        
        var SI_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "Î¼", "m", "", "k", 
                                  "M", "G", "T", "P", "E", "Z", "Y" ].map(SI_formatPrefix);

        var SI_formatPrefix_ex = d3.formatPrefix;

        // For standard scientific format, the decimal index is always 1. 
        var DECIMALINDEX = 1; 

        function SI_format_precision(x, p) {
            return p - (x ? 1 +  Math.floor(
                            Math.log(x + Math.pow(10, 1 + Math.floor(Math.log(x) / Math.LN10) - p)) / Math.LN10) 
                            : 1);
        }
        
        function SI_formatPrefix_base(v, precision) {
            var i = 0;
            if (v) {
                if (v < 0){
                    v *= -1;
                }
                if (precision){
                    v = d3.round(v, SI_format_precision(v, precision));
                }
                
                i = 1 + Math.floor(1e-12 + Math.log(v) / Math.LN10);
                i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));
            }
            return SI_formatPrefixes[8 + i / 3];
        }

        function repeatStringNumTimes(string, times) {
            var repeatedString = "";
            for(var i = 0; i < times ;i++) {
                repeatedString += string;
            }
            return repeatedString;
        }
        
        var configs = {"useLatestFormatPrefix": false};
        var UnitFormat = {
            format: function(value, pattern, unitFomratType, options) {
                if (value === null || value === undefined) {
                    return null;
                }
                
                if (!configs.useLatestFormatPrefix) {
                    d3.formatPrefix = SI_formatPrefix_base;
                }

                // Parse prefix and suffix
                var prefix, suffix;
                var PRE_MARKER = '[CVOM#PFIX]',
                    SUF_MARKER = '[CVOM#SFIX]';
                // MARKER_LEGNTH = PRE_MARKER.length and MARKER_LEGNTH = SUF_MARKER.length
                var MARKER_LEGNTH = 11;
                if (pattern) {
                    // parse out the prefix
                    var sIdx = pattern.indexOf(PRE_MARKER);
                    var eIdx = pattern.lastIndexOf(PRE_MARKER);
                    if (sIdx >= 0 && eIdx >= 0 && sIdx !== eIdx) {
                        prefix = pattern.substring(sIdx + MARKER_LEGNTH, eIdx);
                        pattern = pattern.substring(eIdx + MARKER_LEGNTH);
                    }

                    // parse out the suffix
                    sIdx = pattern.indexOf(SUF_MARKER);
                    eIdx = pattern.lastIndexOf(SUF_MARKER);
                    if (sIdx >= 0 && eIdx >= 0 && sIdx !== eIdx) {
                        suffix = pattern.substring(sIdx + MARKER_LEGNTH, eIdx);
                        pattern = pattern.substring(0, sIdx);
                    }
                }

                var CVOMNUMBERUNITPREFIX = '[CVOM#UNIT]';
                var tempValueLeft, tempValueRight, numLeft, result, formatFun, index, str, temp;
                if ((typeof pattern === 'string') &&
                    (pattern.charAt(pattern.length - 1) === 'u')) {
                    if ((typeof value === 'number') || typeof value === 'string') {
                        // currently, the difference between financial units and metrics units is that
                        // we only change the G to B
                        numLeft = value;
                        tempValueRight = '';
                        formatFun = d3.format('s');
                        while (pattern.charAt(pattern.length - 1) === 'u') {
                            tempValueLeft = formatFun(numLeft);
                            //Fix a bug in d3 v2 which use u2212 as - but this symbol cannot be parsed with parseFloat.
                            tempValueLeft = tempValueLeft.replace("\u2212",'-');
                            if (isNaN(tempValueLeft.charAt(tempValueLeft.length - 1))) {
                                tempValueRight = tempValueLeft.substr(tempValueLeft.length - 1, 1) + tempValueRight;
                                if (unitFomratType !== Constants.UNITFORMATTYPE.METRICUNITS && tempValueRight ===
                                    'G') {
                                    tempValueRight = 'B';
                                }
                                tempValueLeft = tempValueLeft.substr(0, tempValueLeft.length - 1);
                            }
                            numLeft = parseFloat(tempValueLeft);
                            pattern = pattern.substring(0, pattern.length - 1);
                        }

                        numLeft = parseFloat(numLeft.toPrecision(8));
                        if ((Math.abs(numLeft) >= 1e12) ||
                            (Math.abs(numLeft) < 1e-3 && Math.abs(numLeft) > 0)) {
                            tempValueLeft = numLeft.toExponential();
                            index = tempValueLeft.indexOf('e');
                            tempValueRight = tempValueLeft.substring(index) + tempValueRight;
                            numLeft = parseFloat(tempValueLeft.substring(0, index));
                        }

                        tempValueLeft = UnitFormat.format(numLeft, pattern);
                        result = tempValueLeft + tempValueRight;

                    } else {
                        result = value;
                    }
                } else if ((typeof pattern === 'string') &&
                    (pattern.substring(pattern.length - CVOMNUMBERUNITPREFIX.length - 1, pattern.length - 1) ===
                        CVOMNUMBERUNITPREFIX)) {
                    // Example:
                    //  call UnitFormat.format(1.234567890123, "0.##########[CVOM#UNIT]k")
                    //  returns "0.0012345679k"
                    if (typeof value !== 'number') {
                        result = value;
                    } else {
                        var unit = pattern.charAt(pattern.length - 1).toUpperCase();
                        var validatedUnit = true,
                            unitIndicaterIdx = pattern.indexOf("["),
                            scale = {
                                'K': 3,
                                'M': 6,
                                'B': 9,
                                'T': 12
                            }[unit] || 0;
                        // We should use FormatManager to format value according pattern before[CVOM#UNIT]
                        result = value / Math.pow(10,scale);
                        result = FormatManager.format(result, pattern.substring(0, unitIndicaterIdx));
                        result += (unit === 'K'? 'k': unit);

                    }
                } else {
                    str = value.toString();
                    index = str.indexOf('e');
                    var decimalSeparator = XCFormat.getDecimalSeparator();
                    var reg = new RegExp("([\\d|\\" + 
                        decimalSeparator + "|#]+)[eE][+-]([\\d|\\" + 
                        decimalSeparator + "|#])", "g");
                    var regMatchLastIndex = [], regResult, patternIndex;
                    //check scientific format pattern wheteher is repetition or not 
                    while ((regResult = reg.exec(pattern)) != null)  {
                        regMatchLastIndex.push(reg.lastIndex);
                    }
                    if ((typeof value === 'number') && (regMatchLastIndex.length === 1)) {
                        patternIndex = regMatchLastIndex[0] - 3;
                        var patternBeforeE = pattern.substring(0, patternIndex);
                        var valueBeforeE, valueAfterE;

                        if (index === -1) {
                            str = value.toExponential();
                            index = str.indexOf('e');
                            valueAfterE = str.substring(index + 1);
                            // Switch the str to crresponding scientific format 
                            // according to the decimal position in patternBeforeE.
                            // value: 123.45, patternBeforeE: "00.00", str:1.2345e+2 -> 12.345e+1
                            if ((valueAfterE[0] === "+") && (valueAfterE[1] !== "0")) {
                                var decimalIndexBeforeE, numPatternBeforeE;
                                var numPos = patternBeforeE.search(/[\d|#]/g);
                                if (numPos !== -1) {
                                    numPatternBeforeE = patternBeforeE.substring(numPos);
                                    decimalIndexBeforeE = numPatternBeforeE.indexOf(decimalSeparator);
                                    if (decimalIndexBeforeE === -1) {
                                        decimalIndexBeforeE = numPatternBeforeE.length;
                                    }
                                    var numOffset = valueAfterE - (decimalIndexBeforeE - DECIMALINDEX);
                                    if (numOffset <= 0) {
                                        str = value.toString() + "e+0";
                                    } else if(decimalIndexBeforeE !== DECIMALINDEX){
                                        var decimalOffset = 0;
                                        if (str[0] === "-") {
                                            decimalOffset = 1;
                                        }
                                        var mid = str.substring(2 + decimalOffset, 
                                            decimalIndexBeforeE + 1 + decimalOffset);
                                        var last = str.substring(DECIMALINDEX + 
                                            decimalIndexBeforeE + decimalOffset, index + 2);
                                        var midEIndex = mid.indexOf("e");
                                        if (midEIndex > -1) {
                                            mid = mid.substr(0, midEIndex) + 
                                                repeatStringNumTimes("0", mid.length - midEIndex);
                                            last = str.substring(index, index + 2);
                                        } else if (str.indexOf(".") === -1) {
                                            mid = repeatStringNumTimes("0", decimalIndexBeforeE - 1);
                                            last = str.substring(index, index + 2);
                                        }
                                        str = str.substring(0, 1 + decimalOffset) + mid + "." +
                                            last + numOffset;
                                    }
                                }
                                index = str.indexOf('e');
                            }
                        }

                        valueBeforeE = str.substring(0, index);
                        valueAfterE = str.substring(index + 1);

                        // format the value before e|E 
                        temp = FormatManager.format(parseFloat(valueBeforeE), patternBeforeE);

                        // format the vallue after e|E
                        // value: "-1", patternAfterE: "+0", result: "-1"
                        // value: "+1", patternAfterE: "-0", result: "+1"
                        var patternAfterE = pattern.substring(patternIndex + 1); 
                        if ((valueAfterE[0] === "+") && (patternAfterE[0] === "-")) {
                            patternAfterE = "+" + patternAfterE.substring(1);
                        } else if (valueAfterE[0] === "-"){
                            patternAfterE = patternAfterE.substring(1); 
                        }
                        result = FormatManager.format(parseFloat(valueAfterE), patternAfterE);
                        // value: "+0", patternAfterE: "+#...", result: "+0"
                        if ((patternAfterE.indexOf("#") !== -1) && (result.length === 1)) {
                            result = "+0";
                        }
                        result = temp + pattern.substring(patternIndex, patternIndex + 1) + result;
                    } else {
                        result = FormatManager.format(value, pattern,  undefined, options); 
                        // we always try to convert number to string
                    }
                }

                result = prefix ? prefix + result : result;
                result = suffix ? result + suffix : result;

                if (!configs.useLatestFormatPrefix) {
                    d3.formatPrefix = SI_formatPrefix_ex;
                }
                return result;
            },

            register: function(obj) {
                configs = ObjectUtils.extendByRepalceArray(true, null, configs, obj);
                return UnitFormat;
            }
        };
        
        UnitFormat.cache = {};

        UnitFormat.SUPPORT_CUSTOM_COMPONENTS = FormatManager.SUPPORT_CUSTOM_COMPONENTS;

        UnitFormat.getDecimalFormatString = FormatManager.getDecimalFormatString;

        return UnitFormat;
    });

define('sap/viz/api/env',[
    'sap/viz/framework/core/env',
    'sap/viz/framework/core/config',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/NameColorUtils',
    'sap/viz/framework/common/format/UnitFormat',
    'exports'
], function Setup(environment, config, TypeUtils, ObjectUtils, Logger, langManager, NameColorUtils, UnitFormat) {
    var env =
        /**
         * sap.viz.api.env
         * @namespace sap.viz.api.env
         */
        {
            /**
             * Experimental
             * @function globalSettings
             * @memberof sap.viz.api.env
             * @static
             * @param {Object|undefined} globalSettings
             * If there is no input parameter, this is a get globalSettings function, otherwise this is a set 
             globalSettings function.
             * <pre>
             * Example:
             *      sap.viz.api.env.globalSettings({"treatAsMobile": "auto"}); //Set globalSettings
             *      var globalSettings = sap.viz.api.env.globalSettings(); //Get globalSettings, it returns an cloned 
             object which contains globalSettings.
             * </pre>
             * @returns {Object}
             *                  return a copy of global settings
             */
            globalSettings: function(input) {
                var values;
                if (arguments.length === 1 && TypeUtils.isPlainObject(input)) {
                    values = ObjectUtils.clone(input);
                    if (values.enableCanvg) {
                        environment.initialize(values);
                    }
                    if (values.enableCanvgConfig && TypeUtils.isPlainObject(values.enableCanvgConfig)) {
                        for (var i in values.enableCanvgConfig) {
                            if (values.enableCanvgConfig.hasOwnProperty(i)) {
                                config.register({
                                    id: i,
                                    value: values.enableCanvgConfig[i]
                                });
                            }
                        }
                    }
                    if (values.colorMapping && TypeUtils.isPlainObject(values.colorMapping)){
                        NameColorUtils.register(values.colorMapping);
                    }
                    if (values.useLatestFormatPrefix && values.useLatestFormatPrefix === true) {
                        UnitFormat.register({"useLatestFormatPrefix" : true});
                    }
                    if (values.treatAsMobile) {
                        if (["auto", "on", "off"].indexOf(values.treatAsMobile) > -1) {
                            config.globalSetting("treatAsMobile", values.treatAsMobile);
                        }
                    }
                    if (typeof values.disableTooltipTimer === "boolean") {
                        //internal flag to disable tooltip timer for ST automation use
                        config.globalSetting("disableTooltipTimer", values.disableTooltipTimer);
                    }
                } else if (arguments.length === 0) {
                    values = {};
                    if (environment.getEnvSetting() && environment.getEnvSetting().enableCanvg) {
                        values = {
                            enableCanvg: environment.getEnvSetting().enableCanvg
                        };
                    }
                    if (config.getConfigs()) {
                        var configs = {
                            enableCanvgConfig: config.getConfigs()
                        };
                        values = ObjectUtils.extend(true, {}, values, configs);
                    }
                    return values;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                }
            }
        };
    return env;
});
define('sap/viz/api/env/Format',['sap/viz/framework/common/format/FormatManager',
        'sap/viz/framework/common/util/TypeUtils',
        'sap/viz/framework/common/format/UnitFormat',
        'exports'
    ],
    function Setup(FormatManager, TypeUtils, UnitFormat) {

        var format =
            /**
             * sap.viz.api.env.Format
             * @namespace sap.viz.api.env.Format
             */
            {
                /**
                 * Customize the global numeric formatter.
                 * If you set a formatter, it will replace the existing formatter.
                 * @function numericFormatter
                 * @memberof sap.viz.api.env.Format
                 * @static
                 * @param {Object} formatter
                 * {format: function(value, pattern) {...}}
                 *
                 *
                 * <pre>
                 * Example:
                 *      var customerFormatter = {
                 *          format : function(value, pattern) {
                 *              //add your codes here to convert number value to formatted string according to the 
                 pattern string
                 *              return formattedString;
                 *          }
                 *      };
                 *      sap.viz.api.env.Format.numericFormatter(customerFormatter);
                 * </pre>
                 */
                numericFormatter: function(formatter) {
                    return FormatManager.formatFunc(formatter);
                },

                /**
                 *
                 * Set Use default numeric formatter when usingDefaultFormatter is set to 'true'.
                 * @function useDefaultFormatter
                 * @memberof sap.viz.api.env.Format
                 * @static
                 * @param {Boolean}  usingDefaultFormatter when value is true, the formatted number displays as default
                  setting based on locale.
                 */
                useDefaultFormatter: function(usingDefaultFormatter) {
                    if (usingDefaultFormatter === true || usingDefaultFormatter === false) {
                        FormatManager.useDefaultFormatter(usingDefaultFormatter);
                    }
                    return FormatManager.useDefaultFormatter();

                },

                customDefaultFormatter: function() {
                    if (!arguments.length) {
                        return FormatManager.customDefaultFormatter();
                    }
                    return FormatManager.customDefaultFormatter(arguments[0]);
                },

                format: UnitFormat.format,
                /**
                 * The formatted value which tells the format manager to use its default formatter.
                 */
                DEFAULT_FORMATTED_VALUE: FormatManager.DEFAULT_FORMATTED_VALUE
            };
        return format;
    });
define('sap/viz/api/env/Language',[
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'exports'
], function Setup(langManager, TypeUtils, Logger) {
    var language =
        /**
         * sap.viz.api.env.Language
         * @namespace sap.viz.api.env.Language
         */
        {


            /**
             * Set current language
             * @function set
             * @memberof sap.viz.api.env.Language
             * @static
             * @param {String} language
             *                      language value like en, de, fr, zh_CN, ja, ru, pt
             * @param {Function} completeCallback
             *                      optional, function(language){...}
             * @param {Function} failedCallback
             *                      optional, function(language, errorMsg){...}
             * @return {sap.viz.api.env.Language} self
             *
             */
            set: function(language, completeCallback, failedCallback) {
                if (TypeUtils.isString(language) &&
                    (arguments.length === 1 ||
                        (arguments.length === 2 && TypeUtils.isFunction(completeCallback)) ||
                        (arguments.length === 3 && TypeUtils.isFunction(completeCallback) &&
                            TypeUtils.isFunction(failedCallback)))) {
                    langManager.apply(language, completeCallback, failedCallback);
                    return language;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get current language
             * @function get
             * @memberof sap.viz.api.env.Language
             * @static
             * @return {String} language value like en, de, fr, es, zh_CN, ja, ru, pt
             */
            get: function() {
                return langManager.current();
            },

            /**
             * Get error message in current language by error code
             * @function getErrorMessage
             * @memberof sap.viz.api.env.Language
             * @static
             * @param {Number} code
             * error code
             *
             * @return {String} error message
             *
             * @example sap.viz.api.env.Language.getErrorMessage(50000) =
                "Length of dimension cannot be zero."(locale == en);
             */
            getErrorMessage: function(code) {
                if (TypeUtils.isNumber(code)) {
                    return langManager.getLogMessageByID(code);
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                }
            }

        };
    return language;
});
define('sap/viz/api/env/Locale',[
    'sap/viz/framework/common/locale/Locale',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'exports'
], function Setup(Locale, TypeUtils, Logger, langManager) {
    var locale =
        /**
         * sap.viz.api.env.Locale
         * @namespace sap.viz.api.env.Locale
         */
        {

            /**
             * Set current locale
             * @function set
             * @memberof sap.viz.api.env.Locale
             * @static
             * @param {String}
             *             locale value like en, de, fr, es, zh_CN, ja, ru, pt
             * @param {Function} callback
             *                      optional, function(){...}
             * @return {sap.viz.api.env.Locale} self
             */
            set: function(l, callback, options) {
                if (TypeUtils.isString(l) &&
                    (arguments.length === 1 ||
                        ((arguments.length === 2 || arguments.length === 3) &&
                         (callback == null || TypeUtils.isFunction(callback))))) {
                    Locale.locale(l, callback, options);
                    return locale;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_LOCALE_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get current locale
             * @function get
             * @memberof sap.viz.api.env.Locale
             * @static
             * @return {String} locale value like en, de, fr, zh_CN, ja, ru, pt
             */
            get: function() {
                return Locale.locale();
            }
        };
    return locale;
});
define('sap/viz/api/env/Resource',[
    'sap/viz/framework/common/template/TemplateManager',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'exports'
], function(TemplateManager, langManager, TypeUtils, Logger) {

    function toArray(p) {
        return TypeUtils.isArray(p) ? p.slice() : [p];
    }

    function toItem(p) {
        return TypeUtils.isArray(p) ? p[0] : p;
    }

    var handlers = {
        'sap.viz.GeoManager.resourcePath': {
            path: "../../resources",
            setPath: function(path) {
                var GeoManager = sap && sap.viz && sap.viz.GeoManager;
                if (GeoManager) {
                    GeoManager.resourcePath(toItem(path));
                }
            }
        },
        'sap.viz.api.env.Template.loadPaths': {
            path: TemplateManager.loadPath,
            setPath: function(path) {
                TemplateManager.loadPath = toArray(path);
            }
        },
        'sap.viz.api.env.Language.loadPaths': {
            path: langManager.loadPath,
            setPath: function(path) {
                langManager.loadPath = toArray(path);
            }
        },
        // if the package ONLY includes sap.viz.sdk, only needs to set sdk language loadpath.
        'sap.viz.env.Language.loadPaths.sdk': {
            path: ["../../../resources/langs/sdk/"],
            setPath: function(path) {
                langManager.loadPath = toArray(path);
            }
        },
        'sap.viz.map.Resources': {
            path: ["../../resources"]
        }
    };
    //temporary to set sap.viz.extapi.* to sap.viz.api.*
    handlers['sap.viz.extapi.env.Template.loadPaths'] = handlers['sap.viz.api.env.Template.loadPaths'];
    handlers['sap.viz.extapi.env.Language.loadPaths'] = handlers['sap.viz.api.env.Language.loadPaths'];

    function setPath(key, path) {
        var handler = handlers[key] = handlers[key] || {};
        handler.path = path;
        if (handler.setPath) {
            handler.setPath(path);
        }
    }

    function getPath(key) {
        if (!key) {
            var allPath = {};
            for (var i in handlers) {
                if (handlers.hasOwnProperty(i)) {
                    var value = handlers[i] && handlers[i].path;
                    allPath[i] = TypeUtils.isArray(value) ? value.slice() : value;
                }
            }
            return allPath;
        }
        if (!handlers.hasOwnProperty(key)) {
            // explicitly null to keep backwards
            return null;
        }
        var handler = handlers[key];
        var path = handler && handler.path;
        return TypeUtils.isArray(path) ? path.slice() : path;
    }

    /**
     * sap.viz.api.env.Resource
     * @namespace sap.viz.api.env.Resource
     */
    var resource = {
        /**
         * Get/Set resource path
         * @function path
         * @memberof sap.viz.api.env.Resource
         * @static
         * @name  sap.viz.api.env.Resource.path
         * @param {String} key
         * @param {undefined|String|Array} [path]
         * If path is undefined, this is a get path by key function, otherwise this is a set path by key function.
         * Example:
         *      Resource.path('baseURL') is to get path by key.
         *      Resource.path('baseURL', 'testurl') is to set path by key.
         * If path is Array, keep a cloned Array in the internal map.
         * Predefined Resource Paths:
         * <pre>
         *     "sap.viz.api.env.Template.loadPaths":                       ["../../../resources/templates"]
         *     "sap.viz.api.env.Language.loadPaths":                       ["../../../resources/langs/"]
         *     "sap.viz.map.Resources" :                                   "../../resources"
         *
         * Example:
         *
         * Set path:
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Template.loadPaths", ["../../../resources/templates"]);
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths", ["../../../resources/langs/"]);
         * sap.viz.api.env.Resource.path("sap.viz.map.Resources", "../../resources");
         *
         * Get path:
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Template.loadPaths") =  ["../../../resources/templates"];
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths") =  ["../../../resources/langs/"];
         * sap.viz.api.env.Resource.path("sap.viz.map.Resources") = "../../resources";
         *
         * </pre>
         * Or you can use customized paths:
         *      sap.viz.api.env.Resource.path("baseURL", "testurl"), you can set any key-value pair which value should
          be a valid path.
         * @return {sap.viz.api.env.Resource|String|Array} return self when it is a set function and return String or 
          Array if it is a get function.
         */
        path: function() {
            if (arguments.length === 1 && TypeUtils.isString(arguments[0])) {
                return getPath(arguments[0]);
            } else if (arguments.length === 2 && TypeUtils.isString(arguments[0])) {
                setPath(arguments[0], arguments[1]);
            } else if (arguments.length === 0) {
                return getPath();
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
            }
            return resource;
        }
    };

    return resource;
});
define('sap/viz/api/env/Template',[
    'sap/viz/framework/common/template/TemplateManager',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'exports'
], function Setup(TemplateManager, TypeUtils, Logger, langManager) {
    var _listeners = {};
    var template =
        /**
         * sap.viz.api.env.Template
         * @namespace sap.viz.api.env.Template
         */
        {

            /**
             * Set current template's unique id
             * @function set
             * @memberof sap.viz.api.env.Template
             * @static
             * @param {String} id
             *                          tempalte's unique id
             * @param {Function} [completeCallback]
             *                           function(id){...} //parameter id is optional
             * @param {Function} [failedCallback]
             *                           function(id, errorMsg){...} //parameter id and errorMsg are optional
             * @return {sap.viz.api.env.Template} self
             *
             */
            set: function (id, completeCallback, failedCallback) {
                if (TypeUtils.isString(id) &&
                    (arguments.length === 1 ||
                        (arguments.length === 2 && TypeUtils.isFunction(completeCallback)) ||
                        (arguments.length === 3 && TypeUtils.isFunction(completeCallback) && TypeUtils.isFunction(
                            failedCallback)))) {
                    TemplateManager.apply(id, completeCallback, this, failedCallback);
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get current template's unique id
             * @function get
             * @memberof sap.viz.api.env.Template
             * @static
             * @return {String} template's unique id
             *
             * Example:
             *      sap.viz.api.env.Template.set('flashy', completeCallback, failedCallback);//set template by id
             *      sap.viz.api.env.Template.get() = 'flashy';//Get the set template id.
             */
            get: function () {
                return TemplateManager.current().id;
            },

            /**
             * Pre-load single or multiple templates but not apply them
             * @function load
             * @memberof sap.viz.api.env.Template
             * @static
             * @param {string[]|string} templateIds - 
             * @param {function(loadedIds, errIds)} callback when all templates completed loading or failed to load.
             * @param {function(id)} callback when some templates failed to load. Trigger for every template
             */
            load: function (templateIds, completeCallback, failedCallback) {
                TemplateManager.load(templateIds, completeCallback, failedCallback);
                return template;
            },

            /**
             *
             * @ignore
             */
            addListener: function (func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    var listener = {
                        fn: func
                    };
                    TemplateManager.addListener(listener);
                    _listeners[func] = _listeners[func] || [];
                    _listeners[func].push(listener);
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             *
             * @ignore
             */
            removeListener: function (func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    if (_listeners[func]) {
                        for (var i = 0; i < _listeners[func].length; i++) {
                            if (_listeners[func][i].fn === func) {
                                TemplateManager.removeListener(_listeners[func][i]);
                                _listeners[func].splice(i, 1);
                                break;
                            }
                        }
                    }
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            }
        };
    return template;
});

define('sap/viz/api/interaction/Behavior',[
    "sap/viz/framework/interaction/Behavior",
    "sap/viz/framework/interaction/ActionItem",
    'exports'
], function(SDKBehavior, ActionItem, ActionItemUtil) {
    function Behavior(options) {
        this.id = options && options.id ? options.id : "";
        this._sdkBehavior = new SDKBehavior();
    }

    var pt = Behavior.prototype;
    /**
     * sap.viz.api.interaction.Behavior
     * @ignore
     * @namespace sap.viz.api.interaction.Behavior
     */


    /**
     * Add a new ActionItem according to input action option to behavior.
     *
     * @ignore
     * @function add
     * @memberof sap.viz.api.interaction.Behavior
     * @param {Object} actionOption Action option data, it should follow action option rule defined in spec.
     * <pre>
     * {
     *   "id": String,
     *   "declaredEvents": Array, //event names for any chart level events, which can be listened by external chart
     consumer
     *   "triggerEvent": Object, //The action trigger event
     *   "destroy": Function, //Destroy for lifecycle management
     *   "handler": Function, // Handler function
     * }
     * @this {Behavior}
     */
    pt.add = function(actionOption) {
        
        if(actionOption && actionOption.trigger && !actionOption.triggerEvent){
            actionOption.triggerEvent = actionOption.trigger;
        }
        
        this._sdkBehavior.addActionByDef(actionOption);
        
    };

    /**
     * Remove an ActionItem according to input action id.
     *
     * @ignore
     * @function remove
     * @memberof sap.viz.api.interaction.Behavior
     * @param {String} actionId the action's id.
     * @this {Behavior}
     */
    pt.remove = function(actionId) {
        this._sdkBehavior.removeActionById(actionId);
    };

    return Behavior;
});
define('sap/viz/api/interaction',[
    "sap/viz/api/interaction/Behavior",
    'sap/viz/framework/interaction/BehaviorManager',
    'exports'
], function (Behavior, behaviorManager) {
    return {
        /**
         * sap.viz.api.interaction
         *
         * @ignore
         * @namespace sap.viz.api.interaction
         */
        /**
         * Add a behavior
         *
         * @ignore
         * @function add
         * @memberof sap.viz.api.interaction
         * @param {sap.viz.api.interaction.Behavior} behavior
         */
        "add": function (behavior) {
            if (behavior && behavior.id) {
                behaviorManager.register(behavior.id, behavior._sdkBehavior);
            }
        },
        /**
         * Remove a behavior with the specified id
         *
         * @ignore
         * @function remove
         * @memberof sap.viz.api.interaction
         * @param {String} behaviorId
         */
        "remove": function (behaviorId) {
            behaviorManager.unregister(behaviorId);
        },
        /**
         * Query behavior by its id, and return its copy. 
         *
         * @ignore
         * @function getBehaviorById
         * @memberof sap.viz.api.interaction
         * @param {String} behaviorId
         * @returns {sap.viz.api.interaction.Behavior} behavior or null
         */
        "getBehaviorById": function (behaviorId) {
            if (behaviorId && behaviorManager.has(behaviorId)) {
                var Bhvr = new Behavior({
                    id: behaviorId
                });
                Bhvr._sdkBehavior = behaviorManager.get(behaviorId).clone();
                return Bhvr;
            }
            return null;
        }
    };
});
define('sap/viz/api/log/Appender',['sap/viz/framework/common/log/Logger', 'exports'], function Setup(LOG) {

    /**
     * The appender class of sap logger.
     * @namespace sap.viz.api.log.Appender
     */
    var appender = {};

    /**
     * Console appender class, the log will displayed on browser console.
     * @member ConsoleAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.ConsoleAppender = LOG.ConsoleAppender;

    /**
     *  DivAppender class, the log will be displayed on web page.
     * @member DivAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.DivAppender = LOG.DivAppender;

    /**
     * AjaxAppender class, the log will be displayed on remote file.
     * @member AjaxAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.AjaxAppender = LOG.AjaxAppender;

    return appender;
});
define('sap/viz/api/log/Layout',['sap/viz/framework/common/log/Logger', 'exports'], function Setup(LOG) {

    /**
     * The layout class of sap logger appender.
     * @namespace sap.viz.api.log.Layout
     */
    var layout = {};

    /**
     * Appender default layout Class.
     * @memberof sap.viz.api.log.Layout
     * @member DefaultLayout
     * @static
     */
    layout.DefaultLayout = LOG.DefaultLayout;

    /**
     * Appender html layout Class.
     * @memberof sap.viz.api.log.Layout
     * @member HTMLLayout
     * @static
     */
    layout.HTMLLayout = LOG.HTMLLayout;

    /**
     * Appender xml layout Class.
     * @memberof sap.viz.api.log.Layout
     * @member XMLLayout
     * @static
     */
    layout.XMLLayout = LOG.XMLLayout;

    /**
     * Appender JSON layout Class.
     * @memberof sap.viz.api.log.Layout
     * @member JSONLayout
     * @static
     */
    layout.JSONLayout = LOG.JSONLayout;


    return layout;


});
define('sap/viz/api/log/Logger',['sap/viz/framework/common/log/Logger', 'exports'], function Setup(LOG) {
    /**
     * sap.viz.api.log.Logger
     * @namespace sap.viz.api.log.Logger
     */
    var logger = {};
    /**
     * @ignore
     */
    logger.LEVEL = {};

    /**
     * Log level constant, OFF.
     * @constant LEVEL.OFF
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.OFF = LOG.LEVEL.NO;

    /**
     * Log level constant, TRACE
     * @constant LEVEL.TRACE
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.TRACE = LOG.LEVEL.TRACE;

    /**
     * Log level constant, DEBUG
     * @constant LEVEL.DEBUG
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.DEBUG = LOG.LEVEL.DEBUG;

    /**
     * Log level constant, INFO.
     * @constant LEVEL.INFO
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.INFO = LOG.LEVEL.INFO;

    /**
     * Log level constant, WARN.
     * @constant LEVEL.WARN
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.WARN = LOG.LEVEL.WARN;

    /**
     * Log level constant, ERROR.
     * @constant LEVEL.ERROR
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.ERROR = LOG.LEVEL.ERROR;
    
    var supportedLevels = [logger.LEVEL.OFF, logger.LEVEL.TRACE, logger.LEVEL.DEBUG, 
                           logger.LEVEL.INFO, logger.LEVEL.WARN, logger.LEVEL.ERROR];

    /** 
     * Get or set log appenders.
     * @function appenders
     * @memberof sap.viz.api.log.Logger
     * @static
     * @param {Array} value - Array of the instances of sap.viz.api.log.Appender.#Appender
     * <pre>
     * {
     *   The instancecan be
     *   sap.viz.api.log.Appender.ConsoleAppender
     *   sap.viz.api.log.Appender.DivAppender
     *   sap.viz.api.log.Appender.AjaxAppender
     * }
     * </pre>
     * @returns {Array}  [sap.viz.api.log.ConsoleAppender, sap.viz.api.log.DivAppender].
     */
    logger.appenders = function(value) {
        if (arguments.length > 0) { // set appenders
            for (var i = 0; i < value.length; i++) {
                LOG.addAppender(value[i]);
            }
            return this;
        }
        return LOG.getAppenders();
    };

    /**
     * Get or set log level.
     * @function level
     * @memberof sap.viz.api.log.Logger
     * @static
     * @param {String} value - sap.viz.log.LEVEL constant.
     * <pre>
     * {
     *   The value can be
     *   sap.viz.log.LEVEL.NO
     *   sap.viz.log.LEVEL.TRACE
     *   sap.viz.log.LEVEL.DEBUG
     *   sap.viz.log.LEVEL.INFO
     *   sap.viz.log.LEVEL.WARN
     *   sap.viz.log.LEVEL.ERROR
     * }
     * </pre>
     * @returns {String} sap.viz.log.LEVEL constant.
     */

    logger.level = function(value) {
        if (arguments.length > 0) {
            if (supportedLevels.indexOf(value) < 0) {
                return LOG.level;
            }
            
            LOG.level = value;
            if (LOG.level === logger.LEVEL.OFF) {
                LOG.disable();
            } else {
                LOG.enable();
            }
        } else {
            return LOG.level;
        }
    };

    return logger;
});
define('sap/viz/api/serialization',['sap/viz/migrate/MigrationTool',
    'sap/viz/migrate/bindingMigrator',
    'exports'
    ], function(MigrationTool, bindingMigrator) {

    var serialization =

        /**
         * sap.viz.api.serialization
         * @ignore
         * @namespace sap.viz.api.serialization
         */
        {
            /**
             * Migrate the serialized chart to the latest version.
             * @ignore
             * @function migrate
             * @memberof sap.viz.api.serialization
             * @static
             * @param {Object} json
             * <pre>
             * serialized chart in json format
             * </pre>
             * @returns {Object} the migrated chart in json format
             **/
            migrate: function(json) {
                return MigrationTool.migrate(json);
            },
            feedsIdToBindingId: function(chartType, feedsId) {
                if(!chartType || !feedsId){
                    return null;
                }            
                var feedingMap = bindingMigrator.getFeedingMap();                
                if(!bindingMigrator.isSupportedChart(chartType)){
                    return null;
                }
                if(!feedingMap[feedsId]){
                    return null;
                }else{
                    return feedingMap[feedsId];
                }
            }        
        };

    return serialization;
});
define('sap/viz/framework/flow/FlowConstant',[], function() {

    var flowConstant = {
        CONST_DEFAULT_TYPE:'DIV',
        CONST_DEFAULT_ELEMENT_PATH:'root.modules.main.modules.plot',
        CONST_SVG_TYPE:'SVG',
        CONST_POSITION_LEFT:'left',
        CONST_POSITION_RIGHT:'right',
        CONST_POSITION_TOP:'top',
        CONST_POSITION_BOTTOM:'bottom',
        CONST_POSITION_CENTER:'center',
        CONST_TITLE_NAME:'sap.viz.modules.title',
        CONST_LEGEND_NAME:'sap.viz.modules.legend.common',
        CONST_LEGENDS_NAME: 'sap.viz.modules.legend',
        CONST_LEGENDS_MODULE_KEY: 'legends',
        CONST_INTERACTION_NAME: 'sap.viz.modules.controller.interaction',
        CONST_DATA_FILTER_NAME: 'sap.viz.modules.dataFilter'
    };

    return  flowConstant;

});

define('sap/viz/framework/flow/Flow',['sap/viz/framework/flow/FlowConstant', 'sap/viz/framework/common/util/TypeUtils',
 'sap/viz/framework/common/lang/LangManager', 'sap/viz/framework/common/util/FunctionUtils'
], function (FlowConstant,
    TypeUtils, langManager, Logger) {
    /* jshint ignore:start */
    /**
     * @constructer
     * @param {Object} options
     * {
     *  id: flow id,
     *  name: flow name,
     *  type: flow type, currently we have: Single DIV Flow, Border SVG Flow, Border DIV Flow.
     *  dataModel: dataModel supported for the flow, currently we have: sap.viz.api.data.CrosstableDataset" , "sap.viz.api.data.FlatTableDataset". Default is none which means no specific data model defined.
     * }
     * @param {String}flowType Flow type, like div,svg...
     */
    /* jshint ignore:end */
    var supportedType = ["BorderSVGFlow", "BorderDIVFlow", "SVG", "DIV"];

    var flow = function (options, flowType) {
        if (supportedType.indexOf(flowType) < 0) {
            Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
        }
        this.elements = [];
        this.type = flowType;
        this.id = options ? options.id : null;
        this.name = options ? options.name : null;
        this.dataModel = options.dataModel;
    };


    /**
     *
     * sample parameters:
     * element: plotElement,
     * propertyCategory: "plot",
     * place: "center" //Other supported place top, bottom, left, right
     * });
     */

    flow.prototype.addElement = function (parameterObject) {
        if (parameterObject != null) {
            if (parameterObject.element) {
                if (!parameterObject.place) {
                    parameterObject.place = 'center';
                }
                if(!parameterObject.propertyCategory){
                    parameterObject.propertyCategory = 'plotArea';
                }
                parameterObject.id = parameterObject.propertyCategory;
                this.elements.push(parameterObject);
            }
        }
    };

    return flow;
});
define('sap/viz/framework/common/util/RequireUtil',['require'], function(req) {
    var requireUtil = {
        /* global requirejs: true */
        syncRequire: function(modules, callback, isV3) {
            if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
                var nextTickBak = requirejs.s.contexts._.nextTick;
                requirejs.s.contexts._.nextTick = function(fn) {
                    fn();
                };
                if(isV3) {
                    modules = modules.map(function(module) {
                        if(req && !req.defined(module)) {
                            return module + "/v3";
                        } else {
                            return module;
                        }
                    });
                }
                (req||require)(modules, function() {
                    callback.apply(this, arguments);
                });

                requirejs.s.contexts._.nextTick = nextTickBak;
            }
        },
        syncRequireV3: function(modules, callback) {
            this.syncRequire(modules, callback, true);
        }
    };

    return requireUtil;
});
define('sap/viz/framework/flow/Element',[
        'sap/viz/framework/common/util/ObjectUtils',
        'sap/viz/framework/common/util/TypeUtils',
        'sap/viz/framework/common/util/FunctionUtils',
        'sap/viz/framework/common/lang/LangManager',
        'sap/viz/framework/common/util/oo',
        'sap/viz/framework/common/util/Constants',
        'sap/viz/framework/common/util/RequireUtil'
    ],
    function(ObjectUtils, TypeUtils, Logger, langManager, oo, Constants, RequireUtil) {
        /* jshint ignore:start */
        /**
         * @param {Object} options
         * {
         *  id: element id,
         *  name: element name,
         *  fn: element function base object.//See more on basic module spec, fn needs to implement each function of the basic module.
         * }
         */
        /* jshint ignore:end */
        var Element = function(options) {

            this.elementDefinition = {};
            for (var i in options) {
                if (options.hasOwnProperty(i)) {
                    //type in manifest is not same with this, we don't need to change the value of this key.
                    if (i !== 'type') {
                        this.elementDefinition[i] = options[i];
                    }
                }

            }
            this.bindingDefinition = [];
            this.properties = {};
            this.implementFn = null;
            this.id = options ? options.id : null;
            if (options && options.fn) {
                this.implementFn = options.fn;
            }

        };

        Element.prototype.addFeed = function(feed) {
            //TODO backward
            //  var binding = migrateUtil.feedToBind(feed);
            this.addBindingDefition(feed);
        };


        var migrateFeedingToBinding = function(feeding) {
            var binding = {};
            for (var i in feeding) {
                if (feeding.hasOwnProperty(i)) {
                    binding[i] = feeding[i];

                    if (i === "type" && feeding[i] === "Dimension") {
                        binding.role = "mark.color";
                    } else if (i === "type" && feeding[i] === "Measure") {
                        binding.role = "layout.value";
                    } else if (i === "acceptMND") {
                        binding.acceptMND = (feeding[i] >= 0);
                    }
                }
            }
            return binding;
        };

        Element.prototype.addBindingDefition = function(binds) {
            if (TypeUtils.isArray(binds)) {
                var len = binds.length;
                for (var i = 0; i < len; i++) {
                    this.bindingDefinition.push(migrateFeedingToBinding(binds[i]));
                }
            } else {
                this.bindingDefinition.push(migrateFeedingToBinding(binds));
            }

        };
        var checkObjectValid = function(Obj, key) {
            if (key !== undefined) {
                var keyLength = key.length;
                for (var i = 0; i < keyLength; i++) {
                    if (Obj[key[i]] === undefined) {
                        return false;
                    }
                }
            }
            return true;
        };

        var validPropSettingsV2 = ["defaultValue",
            "readonly",
            "serializable"];
        var checkObjectValidV2 = function(propertyObject) {
            for (var p in propertyObject) {
                if (propertyObject.hasOwnProperty(p)) {
                    var propertyDef = propertyObject[p];
                    var valid = false;
                    validPropSettingsV2.forEach(function(item) {
                        if(propertyDef[item] !== undefined) {
                            valid = true;
                        }
                    });
                    if(!valid) {
                        return false;
                    }
                }
            }
            return true;
        };

        /*
         * Adapt old property object to new version
         * Old -> New
         * name -> ObjectKey
         * type -> supportedValueType
         * supportedValues -> supportedValues
         */
        var adaptPropertyObject = function(propertyObject, baseName, ret) {
            if(!ret) {
                ret = {};
                adaptPropertyObject(propertyObject, undefined, ret);
                return ret;
            }
            var newProp = {};
            var propertyName = baseName ? baseName + "." + propertyObject.name : propertyObject.name;
            if(propertyObject.type === "Object" || propertyObject.supportedValueType === "Object") {
                var sv = propertyObject.supportedValues;
                if(sv) {
                    for(var sub in sv) {
                        if(sv.hasOwnProperty(sub)) {
                            adaptPropertyObject(sv[sub], propertyName, ret);
                        }
                    }
                }
            } else {
                newProp.defaultValue = propertyObject.defaultValue;
                newProp.readonly = false;
                newProp.serializable = true;
                ret[propertyName] = newProp;
            }
        };

        /*
         * Properties sample:
         * {
         * 'properties' : {
         * 'tooltip' : {
         *   'name' : 'tooltip',
         *   'supportedValueType' : 'Object',
         *   'supportedValues' : {
         *   'enabled' : {
         *     'name' : 'enabled',
         *     'supportedValueType' : 'Boolean',
         *     'defaultValue' : true,
         *     'description' : 'Set enabled/disabled tooltip.'
         *     }
         *    }
         *   }
         *  }
         * }
         */
        var propertyObjectKey = ['name', 'type']; //must have properties.
    
        var extendImplement = function(type, extendJson) {
            var implementFn;
            RequireUtil.syncRequireV3(['sap/viz/chart/components/UIComponent'], function(Base) {
                    if (Base) {
                        var superMethod = Base.prototype;
                        implementFn = function() {
                            implementFn.superclass.constructor.apply(this, arguments);
                        };
                        oo.extend(implementFn, Base);
                        //change to BaseGraphic
                        for (var i in extendJson) {
                            if (extendJson.hasOwnProperty(i)) {
                                implementFn.prototype[i] = extendJson[i];
                                implementFn[i] = extendJson[i];
                            }


                        }
                        implementFn.prototype._manifest = {};
                        return implementFn;
                    } else {
                        Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
                    }
                });
            return implementFn;
        };

        /**
         *
         * @param {String} path Base element path.
         * @param {Object} extendJson Override functions object.
         */
        Element.prototype.implement = function(type, extendJson) {

            var fn = extendImplement(type, extendJson);
            this.implementFn = fn;
        };

        /**
         * @param {Object}propertyObject
         * {
         *   name:propName,
         *   type:String, property type, can be: Obejct, String, Number, ...
         *   defaultValue: default property values
         * }
         *
         */
        Element.prototype.addProperty = function(propertyObject) {
            if (checkObjectValid(propertyObject, propertyObjectKey)) {
                // Backward compatibility
                this.addProperty(adaptPropertyObject(propertyObject));
            } else if(checkObjectValidV2(propertyObject)) {
                var propertiesToAdd = {};
                for(var p in propertyObject) {
                    if(propertyObject.hasOwnProperty(p)) {
                        propertiesToAdd[p] = {};
                        ["defaultValue", "readonly", "serializable"].forEach(function(configEntry) {
                            propertiesToAdd[p][configEntry] = propertyObject[p][configEntry];
                        });
                    }
                }
                var colorPaletteProperty = propertiesToAdd["colorPalette"];
                if(colorPaletteProperty && !colorPaletteProperty.defaultValue) {
                    colorPaletteProperty.defaultValue = Constants.COLOR.SAPColorSingleAxis;
                }
                ObjectUtils.extend(true, this.properties, propertiesToAdd);
            } else {
                Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
            }
        };

        return Element;
    });

define('sap/viz/framework/flow/flowModule/DataFilter',[
    "sap/viz/framework/common/util/EventDispatch"
], function Setup(EventDispatch) {
    // Implementation copied from the UIComponent to keep the same interface

    var EVENT_SHOW = 'showDataFilter',
        EVENT_HIDE = 'hideDataFilter',
        EVENT_SELECT_DATA = 'selectData',
        DEFAULT_HEIGHT = '30px',
        DEFAULT_WIDTH = '160px';

    /**
     * @name DataFilter
     * @constructor
     * @param {framework/core/Runtime} runtime
     * @param {Object} options
     */
    var DataFilter = function (runtime, options) {
        this._eventDispatch = new EventDispatch();
        this._runtime = runtime;
        this._chartDiv = null;
        this._filterDiv = null;
        this._runtime.propertyManager().add({
            tooltip: {
                preRender: null,
                postRender: null
            }
        });

        //this._eventDispatch.addEventTypes(EVENT_SHOW);
        //this._eventDispatch.addEventTypes(EVENT_HIDE);
        this._eventDispatch.addEventTypes(EVENT_SELECT_DATA);
    };

    /**
     * To render element.
     *
     * @param rootElement {D3Selection} the parent D3 selection for rendering
     */
    DataFilter.prototype.render = function (rootElement) {
        if (!rootElement) {
            return;
        }

        this._chartDiv = rootElement.node().parentNode;
        this._removeDataFilterDiv();
    };

    /**
     * @return {framework/common/util/EventDispatch}
     */
    DataFilter.prototype.getDispatch = function () {
        return this._eventDispatch;
    };

    DataFilter.prototype.show = function (evt) {
        var ctx, preRender, props, postRender;
        this._createDataFilterDiv();
        if (evt && this._filterDiv && this._runtime) {
            props = this._runtime.propertyManager();
            preRender = props.get('tooltip.preRender');
            postRender = props.get('tooltip.postRender');
            ctx = evt.dataCtx;
            if (preRender && postRender && ctx) {
                preRender.call(window, this._filterDiv, ctx);
                postRender.call(window, this._filterDiv, ctx);
                if (evt.options && evt.options.position) {
                    this._filterDiv.style({
                        left: evt.options.position.x + 'px',
                        top: evt.options.position.y + 'px',
                        right: undefined
                    });
                }
                this._eventDispatch[EVENT_SELECT_DATA]({
                    data: ctx
                });
            }
        }
    };

    DataFilter.prototype.hide = function (evt) {
        this._removeDataFilterDiv();
    };

    DataFilter.prototype._createDataFilterDiv = function () {
        if (this._chartDiv) {
            this._removeDataFilterDiv();
            this._filterDiv = d3.select(this._chartDiv).insert('div', true);
            this._filterDiv.attr('id', 'datafilter').
            style({
                'position': 'absolute',
                'width': DEFAULT_WIDTH,
                'height': DEFAULT_HEIGHT,
                'right': '0px',
                'top': '0px'
            });
        }
    };

    DataFilter.prototype._removeDataFilterDiv = function () {
        if (this._filterDiv) {
            this._filterDiv.remove();
        }
    };

    DataFilter.prototype.destroy = function () {
        if (this._eventDispatch) {
            this._eventDispatch.destroy();
        }

        this._runtime = null;
        this._eventDispatch = null;
    };

    DataFilter.EVENT_SHOW = EVENT_SHOW;
    DataFilter.EVENT_HIDE = EVENT_HIDE;
    DataFilter.EVENT_SELECT_DATA = EVENT_SELECT_DATA;

    return DataFilter;
});

define('sap/viz/framework/chartmodel/MultiAxesDataAdapterDecorator',[], function() {
    var addGetDataPointCount = function(crosstable) {
        crosstable.dataPointCount = function() {
            return this.dataset._crosstableDataset.getDataPointCount();
        };
    };
    var addGetAnalysisAxisDataByIdx = function(crosstable) {
        if(!crosstable._aa) {
            //build full aa
            var ct = crosstable.dataset._crosstableDataset,
                aaCount = ct.getAnalysisAxisCount(),
                aaArray = [];
            for(var i = 0; i < aaCount; i++) {
                var aa = ct.getAnalysisAxisByIdx(i);
                var aaItem = {
                    index: i,
                    values: []
                };
                var dimLabels = aa.getDimensionLabels();
                for(var j = 0; j < dimLabels.length; j++) {
                    var dimLabel = dimLabels[j];
                    var aaDataItem = {};
                    aaDataItem.col = {
                        val: dimLabel._uId
                    };
                    var rows = [];
                    for(var k = 0; k < dimLabel._values.length; k++) {
                        var value = dimLabel._values[k];
                        rows.push({
                            val: value,
                            ctx: {
                                type: "Dimension",
                                path: {
                                    aa: i,
                                    di: j,
                                    dii: k
                                }
                            }
                        });
                    }
                    aaDataItem.rows = rows;
                    aaItem.values.push(aaDataItem);
                }
                aaArray.push(aaItem);
            }
            crosstable._aa = aaArray;
        }
        crosstable.getAnalysisAxisDataByIdx = function(idx) {
            if (!arguments.length) {
                return this._aa;
            }
            for (var i = 0; i < this._aa.length; i++) {
                if (this._aa[i].index === idx) {
                    return this._aa[i];
                }
            }
            return null;
        };
    };
    var addGetMeasureValuesGroupDataByIdx = function(crosstable) {
        if(!crosstable._mg) {
            var ct = crosstable.dataset._crosstableDataset,
                mgCount = ct.getMeasureValuesGroupCount(),
                mgArray = [];
            for(var i = 0; i < mgCount; i++) {
                var mg = ct.getMeasureValuesGroupByIdx(i);
                var mgItem = {
                    index: i,
                    values: []
                };
                var measureValues = mg.getMeasureValues();
                for(var j = 0; j < measureValues.length; j++) {
                    var measureValue = measureValues[j];
                    var mgDataItem = {
                        col: measureValue._uId,
                        rows: []
                    };
                    var values = measureValue.getValues();
                    for(var k = 0; k < values.length; k++) {
                        var value = values[k];
                        var row = [];
                        for(var m = 0; m < value.length; m++) {
                            row.push({
                                val: value[m],
                                ctx: {
                                    type: "Measure",
                                    path: {
                                        mg: i,
                                        mi: j,
                                        dii_a2: k,
                                        dii_a1: m
                                    }
                                }
                            });
                        }
                        mgDataItem.rows.push(row);
                    }
                    mgItem.values.push(mgDataItem);
                }
                mgArray.push(mgItem);
            }
            crosstable._mg = mgArray;

        }
        crosstable.getMeasureValuesGroupDataByIdx = function(idx) {
            if (!arguments.length) {
                return this._mg;
            }
            for (var i = 0; i < this._mg.length; i++) {
                if (this._mg[i].index === idx) {
                    return this._mg[i];
                }
            }
            return null;
        };
    };
    var decorate = function(crosstable) {
        var ret = crosstable;//TODO: clone
        addGetAnalysisAxisDataByIdx(crosstable);
        addGetMeasureValuesGroupDataByIdx(crosstable);
        addGetDataPointCount(crosstable);
        return crosstable;
    };

    return {
        decorate: decorate
    };
});
define('sap/viz/framework/flow/ChartViewFactory',['sap/viz/framework/common/util/oo', 'sap/viz/framework/core/ChartViewRegistry',
        'sap/viz/framework/common/util/FunctionUtils', 'sap/viz/framework/common/lang/LangManager',
        'sap/viz/framework/common/util/Constants', 'sap/viz/framework/common/util/NameColorUtils',
        'sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/flow/FlowConstant', 
        'sap/viz/framework/flow/flowModule/DataFilter',
        'sap/viz/framework/common/util/RequireUtil',
        'sap/viz/framework/chartmodel/MultiAxesDataAdapterDecorator'
    ],
    function(oo, ChartViewRegistry, Logger, LangManager, Constants, NameColorUtils, ObjectUtils, 
        FlowConstant, DataFilter, RequireUtil, MultiAxesDataAdapterDecorator) {

        var ChartViewFactory = {};
        var moduleFactory = function(module, propertyCategory, place, id, name, renderTo, legendIndexes, dataModel) {
            if (module.id === "sap.viz.chart.elements.Title" || module.id === "sap.viz.modules.title") {
                return {
                    id: 'title',
                    place: place
                };
            } else if (module.id === "sap.viz.chart.elements.ColorLegend" || module.id === "sap.viz.modules.legend") {
                if (module.elementDefinition && module.elementDefinition.dimensionIndex) {
                    legendIndexes = module.elementDefinition.dimensionIndex;
                }
                return {
                    id: 'legend',
                    place: place,
                    legendIndexes: legendIndexes
                };
            } else if (module.id === FlowConstant.CONST_DATA_FILTER_NAME) {
                // return data filter module implementation
                return {
                    id: 'dataFilter',
                };
            }

            var newModule = function() {
                newModule.superclass.constructor.apply(this, arguments);
                // if (module.properties) {
                //     var propertiesToAdd = {};
                //     for(var p in module.properties) {
                //         if(module.properties.hasOwnProperty(p)) {
                //             propertiesToAdd[p] = {};
                //             ["defaultValue", "readonly", "serializable"].forEach(function(configEntry) {
                //                 propertiesToAdd[p][configEntry] = module.properties[p][configEntry];
                //             });
                //         };
                //     }
                //     this._properties.add(propertiesToAdd);
                // }
                if (module.implementFn && module.implementFn._properties) {
                    var propertyList = {};
                    propertyList[propertyCategory] = module.implementFn._properties;
                    this._runtime._propertyMgr.add(propertyList);
                }
                if (place && place !== 'center') {
                    var placeProp = {};
                    placeProp['layout'] = {
                        position: place
                    };

                    this._properties.add(placeProp);
                }
                this._runtimePropsMgr = this._runtime._propertyMgr.proxy();
                this._runtimePropsMgr.flag(Constants.PROPERTY_FLAGS.CUSTOM, true);
                var that = this;
                this._originalProperties = this._properties;
                this._properties = null;
                //= this._properties, _dispatch = this._dispatch, _feeds = this._manifest.feeds
                //Backward compatibility.
                this._manifest = {};
                
                if(module.implementFn.dispatch instanceof Function) {
                    newModule.prototype.dispatch = module.implementFn.dispatch;
                } else {
                    newModule.prototype.dispatch = function() {
                        return this._originalDispatch;
                    };
                }
                if(module.implementFn._dispatch) {
                    if(module.implementFn._dispatch instanceof Array){
                        this._originalDispatch = d3.dispatch.apply(d3, module.implementFn._dispatch);
                    }else{
                        this._originalDispatch = d3.dispatch.apply(d3, Object.keys(module.implementFn._dispatch));
                    }
                    Object.defineProperty(this, "_dispatch", {
                        get: function() {
                            return that._originalDispatch;
                        },
                        set: function(_){
                            that._originalDispatch = _;
                        }
                    });
                }
                
                Object.defineProperty(this, "_colorPalette", {
                    get: function() {
                        return that.colorPalette();
                    },
                    set: function(){                      
                    }
                });
                Object.defineProperty(this, "_data", {
                    get: function() {
                        return that.data();
                    },
                    set: function(){
                    }
                });
                Object.defineProperty(this, "_width", {
                    get: function() {
                        return that.width();
                    },
                    set: function(){                        
                    }
                });
                Object.defineProperty(this, "_height", {
                    get: function() {
                        return that.height();
                    },
                    set: function(){                        
                    }
                });
                Object.defineProperty(this, "_properties", {
                    get: function() {
                        return that.properties();
                    },
                    set: function(){                        
                    }
                });
                Object.defineProperty(this._manifest, "feeds", {
                    get: function() {
                        return that.feeds();
                    },
                    set: function(){
                    }
                });
                Object.defineProperty(this, "_props", {
                    get: function() {
                        return that.properties();
                    },
                    set: function(){                        
                    }
                });
            };
            if (module.implementFn) {
                oo.extend(newModule, module.implementFn);
            }
            newModule.id = module.id;
            newModule.name = module.name;

            newModule.prototype.getPreferredSize = function(measureInfo) {
                return {
                    maxWidth: 0,
                    maxHeight: 0,
                    minWidth: 0,
                    minHeight: 0,
                    width: measureInfo.width,
                    height: measureInfo.height
                };
            };
            newModule.prototype.feeds = function() {
                return module.bindingDefinition;
            };
            newModule.prototype.data = function() {
                if (this._rawData && this._rawData._crosstableDataset) {
                    return MultiAxesDataAdapterDecorator.decorate({
                        dataset: this._rawData
                    });
                } else {
                    return {
                        dataset: this._rawData
                    };
                }
                
            };
            newModule.prototype.renderTo = function() {
                return renderTo;
            };
            newModule.prototype.setRawData = function(rawData) {
                this._rawData = rawData.dataModel._rawData;
                this._originalData = rawData;
            };
            newModule.prototype.width = function() {
                return this._size.width;
            };
            newModule.prototype.height = function() {
                return this._size.height;
            };
            newModule.prototype.colorPalette = function() {
                if (module.implementFn._colorPalette) {
                    // if customer defined color palette in module.js
                    return module.implementFn._colorPalette;
                } else if (this._runtimePropsMgr.get('plotArea.colorPalette') !== 
                    Constants.COLOR.SAPColorSingleAxis) {
                    var colorPalette = ObjectUtils.clone(this._runtimePropsMgr.get('plotArea.colorPalette'));
                    for (var index = 0, len = colorPalette.length; index < len; index++) {
                        colorPalette[index] = NameColorUtils.convertColor(colorPalette[index]);
                    }
                    return colorPalette;
                } else if (this._originalData && this._originalData.scales) {
                    // if color palette is defined in scales
                    for (var i in module.bindingDefinition) {
                        if (module.bindingDefinition.hasOwnProperty(i)) {
                            if (module.bindingDefinition[i].scaleType === "colorScale") {
                                if (this._originalData.scales[module.bindingDefinition[i].id]) {
                                    return this._originalData.scales[module.bindingDefinition[i].id]._range;
                                }
                            }
                        }
                    }
                }
                // return core chart color palette by default
                return Constants.COLOR.SAPColorSingleAxis;
            };
            newModule.prototype.properties = function() {
                if (this._runtime && this._runtimePropsMgr) {
                    var props = this._runtimePropsMgr.get(propertyCategory);
                    if (!props) {
                        props = this._runtimePropsMgr.get(module.id);
                    }
                    return props;
                }

                return null;
            };
            newModule.prototype.setSelectedObjects = function (value) {
                if (module && module.implementFn && module.implementFn.setSelectedObjects) {
                    module.implementFn.setSelectedObjects.apply(module.implementFn, arguments);
                }
            };
            newModule.prototype.getSelectedObjects = function () {
                if (module && module.implementFn && module.implementFn.getSelectedObjects) {
                    return module.implementFn.getSelectedObjects.apply(module.implementFn, arguments);
                }
            };
            if (module.bindingDefinition) {
                for (var i in module.bindingDefinition) {
                    if (legendIndexes && legendIndexes.indexOf(module.bindingDefinition[i].aaIndex) >= 0) {
                        module.bindingDefinition[i].isLegendBinding = true;

                    } else {
                        module.bindingDefinition[i].role = 'layout.category';
                    }
                }
            }

            if (module.bindingDefinition) {
                ChartViewRegistry.registerBind(id, module.bindingDefinition, "extension", name, undefined, dataModel);
                ChartViewRegistry.registerRenderType(id, id);
            }
            return newModule;
        };

        ChartViewFactory.createChartView = function(viz) {
            var newChartView;
            RequireUtil.syncRequireV3(['sap/viz/chart/views/ChartView'], function(ChartView) {
                    if (ChartView) {
                        newChartView = function() {
                            this._dataItem = [];
                            this._dataFilter = null;
                            newChartView.superclass.constructor.apply(this, arguments);
                        };
                        var childrens = [];
                        var legendIndexes;
                        //pre sort the elements to process color legend first: it contains binding role information.
                        viz.elements.sort(function(src, target) {
                            var module = src.element;
                            if(module && module.id === "sap.viz.chart.elements.ColorLegend" ||
                                module.id === "sap.viz.modules.legend") {
                                return -1;
                            }
                            module = target.element;
                            if(module && module.id === "sap.viz.chart.elements.ColorLegend" ||
                                module.id === "sap.viz.modules.legend") {
                                return 1;
                            }
                            return 0;
                        });
                        childrens = viz.elements.map(function(child) {
                            var module = moduleFactory(child.element, child.propertyCategory, child.place, viz.id,
                                viz.name,
                                viz.type,
                                legendIndexes,
                                viz.dataModel);
                            legendIndexes = module.legendIndexes ? module.legendIndexes : legendIndexes;
                            return module;
                        });

                        oo.extend(newChartView, ChartView);


                        newChartView.prototype._createChildren = function() {
                            function connectDataFilterToPlot(dataFilter, plot) {
                                var tmpDisp;
                                if (plot && dataFilter) {
                                    if (plot.dispatch && dataFilter.getDispatch) {
                                        if (!plot.dispatch()[DataFilter.EVENT_SHOW]) {
                                            tmpDisp = d3.dispatch(DataFilter.EVENT_SHOW);
                                            plot.dispatch()[DataFilter.EVENT_SHOW] = tmpDisp[DataFilter.EVENT_SHOW];
                                        }
                                         
                                        if (!plot.dispatch()[DataFilter.EVENT_HIDE]) {
                                            tmpDisp = d3.dispatch(DataFilter.EVENT_HIDE);
                                            plot.dispatch()[DataFilter.EVENT_HIDE] = tmpDisp[DataFilter.EVENT_HIDE];
                                        }

                                        if (!plot.dispatch()[DataFilter.EVENT_SELECT_DATA]) {
                                            tmpDisp = d3.dispatch(DataFilter.EVENT_SELECT_DATA);
                                            plot.dispatch()[DataFilter.EVENT_SELECT_DATA] =
                                                tmpDisp[DataFilter.EVENT_SELECT_DATA]; 
                                        }
                                        
                                        // hook show/hide filter event
                                        plot.dispatch().on(DataFilter.EVENT_SHOW, function (event) {
                                            dataFilter.show(event);
                                        });
                                        plot.dispatch().on(DataFilter.EVENT_HIDE, function (event) {
                                            dataFilter.hide(event);
                                        });

                                        // hook selectData event
                                        dataFilter.getDispatch().on(DataFilter.EVENT_SELECT_DATA,
                                            function (data) {
                                                plot.dispatch()[DataFilter.EVENT_SELECT_DATA](data);
                                            });
                                    }
                                }
                            }
                            var that = this, index = 2, plotModule;
                            childrens.map(function(child) {
                                if (child.id === 'title') {
                                    that._createTitle(child.place);
                                } else if (child.id === 'legend') {
                                    that._createLegendGroup(child.place);
                                } else if (child.id === 'dataFilter') {
                                    that._dataFilter = new DataFilter(that.runtime());
                                } else {
                                    // plot, one and only one plot is supported
                                    plotModule = new child(that.runtime(), {
                                        name: child.id
                                    });
                                    that.setChild(child.id, plotModule, {
                                        priority: index++
                                    });
                                    if (plotModule.feeds) {
                                        that._dataItem = parseId(plotModule.feeds());
                                    }
                                    if (plotModule.colorPalette) {
                                        Object.defineProperty(that, "_customerColorPalette", {
                                            get: function() {
                                                return plotModule.colorPalette();
                                            }
                                        });
                                    }
                                    if (plotModule.dispatch) {
                                        that._customerDispatch = plotModule.dispatch();
                                    }
                                }
                            });
                            
                            if (this._dataFilter) {
                                // connect plot with datafilter
                                connectDataFilterToPlot(this._dataFilter, plotModule);

                                this.runtime().statusManager().add({
                                    'interaction.selectedDataPoints' : {
                                        set : function() {
                                            return plotModule.setSelectedObjects.apply(this, arguments);
                                        },
                                        get : function() {
                                            return plotModule.getSelectedObjects.apply(this, arguments);
                                        }
                                    }
                                });
                            }
                            this._createBackground();
                        };

                        var parseId = function(feeds) {
                            return feeds.map(function(item) {
                                return item.id;
                            });
                        };

                        newChartView.prototype.enableInteraction = function() {
                            return false;
                        };

                        newChartView.prototype.renderTo = function() {
                            return viz.type;
                        };

                        newChartView.prototype.render = function(root) {
                            newChartView.superclass.render.apply(this, arguments);

                            if (this._dataFilter) {
                                this._dataFilter.render(root);
                            }
                        };

                        newChartView.prototype._updateData = function() {

                            newChartView.superclass._updateData.apply(this, arguments);

                            if (this._data) {
                                for (var key in this._children) {
                                    if (this._children.hasOwnProperty(key)) {
                                        if (this.getChild(key).module.setRawData && this._rawData.dataModel._rawData) {
                                            this.getChild(key).module.setRawData(this._rawData);
                                        }
                                    }
                                }
                            }

                        };

                        newChartView.prototype._getDataItems = function() {
                            return this._dataItem;
                        };
                        newChartView.id = viz.id;

                        return newChartView;
                    } else {
                        Logger.error(LangManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
                    }
                });
            return newChartView;
        };


        return ChartViewFactory;
    });

define('sap/viz/framework/flow/FlowManager',['sap/viz/framework/flow/FlowConstant',
        'sap/viz/framework/flow/Flow',
        'sap/viz/framework/flow/Element',
        'sap/viz/framework/core/ChartViewRegistry',
        'sap/viz/framework/flow/ChartViewFactory',
        'sap/viz/framework/core/ChartPropertyRegistry'
    ],
    function (FlowConstant, Flow, Element, ChartViewRegistry, ChartViewFactory, ChartPropertyRegistry) {

        var FlowManager = {};
        var defaultType = FlowConstant.CONST_DEFAULT_TYPE;
        FlowManager.createElement = function (options) {
            return new Element(options);
        };

        FlowManager.createFlow = function (options) {
            var flowType = (options && options.type) ? options.type : defaultType;
            return new Flow(options, flowType);
        };

        function idEquals(element, id) {
            if(!element.elementDefinition) {
                return false;
            }
            var elementId = element.elementDefinition.id;
            return elementId === id;
        }

        function isTitle(element) {
            return idEquals(element, "sap.viz.chart.elements.Title") || idEquals(element,
                "sap.viz.modules.title");
        }

        function isLegend(element) {
            return idEquals(element, "sap.viz.chart.elements.ColorLegend") || idEquals(element,
                "sap.viz.modules.legend");
        }

        FlowManager.register = function (flow) {
            var chartView = ChartViewFactory.createChartView(flow);
            ChartViewRegistry.registerViewer(chartView.id, chartView);
            var customProperties = {}, metadata = {};
            flow.elements.forEach(function(ele) {
                if(ele.element) {
                    var element = ele.element;
                    if(isTitle(element)) {
                        metadata.extendTitle = true;
                    } else if(isLegend(element)) {
                        metadata.extendLegend = true;
                    } else if(element.properties) {
                        var properties = element.properties;
                        for(var entry in properties) {
                            if(properties.hasOwnProperty(entry)) {
                                customProperties[ele.propertyCategory + "." + entry] = properties[entry];
                            }
                        }
                    }
                }
            });
            ChartPropertyRegistry.register(chartView.id, customProperties, metadata);
        };



        FlowManager.registerFlow = function (options) {
            if (options.id) {
                var ID = options.id;
                if (options.renderType) {
                    ChartViewRegistry.registerRenderType(ID, options.renderType);
                }
                if (options.bindings && options.family) {
                    ChartViewRegistry.registerBind(ID, options.bindings, options.family,options.name);
                }
            }

        };

        FlowManager.unregister = function (type) {
            ChartViewRegistry.unregister(type);
            ChartPropertyRegistry.unregister(type);
        };

        return FlowManager;
    });
define('sap/viz/extapi/Flow',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/log/Logger',
        'sap/viz/framework/flow/FlowManager', 'exports'
], function Setup(TypeUtils, Logger, FlowManager) {

    /**
     * sap.viz.extapi.Flow
     * @namespace sap.viz.extapi.Flow
     */
    var FlowApi = {};
    /* jshint ignore:start */
    /**
     * Create visualization Flow.
     * @function createFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {Object}flowParams Parameters for the visualization flow.<br>
     * e.g.<br>
     * <pre>
     *      {
     *          'id':"flowId", //the flow id. You can use this id to create visualization.
     *          'name': "flowName", //the flow name.
     *          'type': flow type, //currently we have: "DIV", "BorderDIVFlow", "BorderSVGFlow".
     *          'dataModel': dataModel, //the dataModel visulization will use. Currently CVOM support : "sap.viz.api.data.CrosstableDatasetâ , âsap.viz.api.data.FlatTableDataset". Default is none which means no specific data model defined.
     *      }
     * </pre>
     * @returns {Object}
     *                 return a flow instance.<br><br>
     *              With this instance, you can add an element into flow by calling it's method :addElement.
     * <br>
     *<div class="name" id="flowInstance.addElement" style="margin:20px,font-size:12px;color:black;font-weight:bold">
     *     <a name="createFlow"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">flowInstance.addElement</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">elementParam:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">Element and it's properties.<div>e.g.</div></div>
     * <pre>
     *          {
     *              element:elementInstance, //element instance which is created by sap.viz.extapi.Flow.createElement.
     *              propertyCategory: property category, //you can use this category to set property for the element in createViz.
     *              place:  position for the element. //Currently we support five positions: "center", "top", "right", "bottom", "left".
     *          }
     * </pre>
     * @example <caption>How to add element into flow:</caption>
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     * });
     *  var flow = sap.viz.extapi.Flow.createFlow({
     *     id:flowId,
     *     name:flowName
     * });
     * //add element1 into flow.
     *  flow.addElement({
     *     element:element1
     *     propertyCategory: "plot",
     *     place: "center"
     * });
     */
    /* jshint ignore:end */

    FlowApi.createFlow = function (options) {
        return FlowManager.createFlow(options);
    };
    /* jshint ignore:start */
    /**
     * Create visualization element.
     * @function createElement
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {Object}elmParams Parameters for the visualization element:<br>
     * e.g.<br>
     * <pre>
     *      {
     *          'id':"elementId", //the element id
     *          'name':"elementName", //the element name
                'dimensionIndex': dimensionIndex, //optional, the index of dimension which is needed by your element. Currently is used by CVOM legend to set the correct dimensions to the legend element only. 
     *      }
     * </pre>
     * CVOM enable you to reuse internal elements to create flow, you can refer to: /viz/wiki/ProductGuides/Tutorials/ReusingVizElements
     * @returns {Object}
     *                 return an element instance. 
     *
     * <br>With this instance you can add it's implementation by using method: implement();
     * <br>With this instance you can add it's property by using method: addProperty();
     * <br>With this instance you can add it's feed definition by using method: addFeed();
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     *<div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.implement</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;">
     *         <li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">baseElementPath:</span><span style="margin-left:5px;">String</span></li>
     *              <div>base element path. We currently only support:'sap.viz.elements.common.BaseGraphic'. refer to /viz/wiki/ProductGuides/Tutorials/UnderstandingTheBaseGraphicClass"</div>
     *         <br>
     *         <li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">implementFunction:</span><span style="margin-left:5px;">Object</span></li>
     *              <div>element implementation class</div>
     * </div>
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.addProperty</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">propertyObject:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">Properties for the element:</div>
     * <pre style="margin-left:50px;">
     * {
     *     name:propName, //must have. The property name.
     *     type:String, //must have. The property type.
     *     supportedValues:[value1, value2] //optional. The supportedValues array.
     * }
     * </pre>
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.addFeed</div>
     * <div style="margin:20px,font-size:12px;color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">feedObject:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">feed for the element: refer to /viz/wiki/ProductGuides/Tutorials/ChartFeed</div>
     * <br>
     * <br>
     *
     * @example <caption>How to add implementation class into element:</caption>
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     * });
     * 
     *  var DimfeedingInfo = [{
     * 'id' : 'regionColor',
     * 'name' : 'IDS_REGIONCOLOR',
     *       'type' : 'Dimension', //Cannot access constants.Type.Dimension,
     *       'min' : 0,
     *       'max' : 2,
     *       'aaIndex' : 2,
     *       'acceptMND' : 1
     *   }, {
     *       'id' : 'axisLabels',
     *       'name' : 'IDS_AXISLABELS',
     *       'type' : 'Dimension',
     *       'min' : 1,
     *       'max' : 2,
     *       'acceptMND' : 0,
     *       'aaIndex' : 1
     *   }];
     *   var MeasureFeedingInfo = {
     *       'id' : 'primaryValues',
     *       'name' : 'IDS_PRIMARYVALUES',
     *       'type' : 'Measure',
     *       'min' : 1,
     *      'max' : Number.POSITIVE_INFINITY,
     *       'mgIndex' : 1
     *  };
     * 
     * element1.addFeed(DimfeedingInfo);//addFeed by using arrary of feeding definition.
     * element1.addFeed(MeasureFeedingInfo);//addFeed by single feeding definition.
     * 
     * var chartFn = {
     *      render : function(){
     *     //do your rendering works here...
     *      }
     * };
     * //add visualization implement functions into element1.
     *  element1.implement('sap.viz.elements.common.BaseGraphic',chartFn);
     * refer to /viz/wiki/ProductGuides/Tutorials/UnderstandingTheBaseGraphicClass"
     */
    /* jshint ignore:end */
    FlowApi.createElement = function (options) {
        return FlowManager.createElement(options);
    };

    /* jshint ignore:start */
    /**
     * Register flow into CVOM. <br>
     * After registering, you can use sap.viz.api.core.createViz to create registered visualization
     * <br>by using flow's id as the visualization id
     * @function registerFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {flowInstance}flowInstance Flow Instance.
     * @example <caption>How to register and create visualization flow</caption>
     *  //Create Flow steps:
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     *  });
     *  var chartFn = {
     *      render : function(){
     *     //do your rendering works here...
     *      }
     *  };
     *  //add visualization implementation functions into element1.
     *  element1.implement('sap.viz.elements.common.BaseGraphic',chartFn);
     *
     *  //create visualization flow.
     * var chartFlow = sap.viz.extapi.Flow.createFlow({
     *     id:flowId,
     *  });
     *
     *  //add element into flow.
     *  chartFlow.addElement({
     *     element:element1
     *  });
     *
     *  //Register flow into CVOM.
     *  sap.viz.extapi.Flow.registerFlow(flow);
     *
     *  //Create visualization flow:
     *  var chartInstance = sap.viz.api.core.createViz({
     *    type : flowId,
     *     data : {}//visualization dataset
     *     container :{} //visualization plotting jquery HTMLDivElement
     *     options : {}//visualization options.
     * });
     * refer to /viz/wiki/ProductGuides/Tutorials/UnderstandingTheBaseGraphicClass"
     */
    /* jshint ignore:end */

    FlowApi.registerFlow = function (flow) {
        FlowManager.register(flow);
    };

    /**
     * UnRegister flow from CVOM.
     * @function unregisterFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {String}flowId The flow id you want to unregister.
     *
     */
    FlowApi.unregisterFlow = function (flowId) {
        FlowManager.unregister(flowId);
    };

    /* jshint ignore:start */
    /**
     * This class is a reference for basic graphic for you to extend and implement element.
     * <br>You can not get this class through global namespace.<br>
     * You can use basic graphic path:<br> <div style="font-weight:bold;">'sap.viz.elements.common.BaseGraphic'</div><br>
     * as base class to create element implementation function.<br>
     * You car refer {sap.viz.extapi.Flow#createElement} for more information.
     * @example <caption>How to use base graphic</caption>
     * var elementInstance = sap.viz.extapi.Flow.createElement({id:'sampleChart'});
     * elementInstance.implement('sap.viz.elements.common.BaseGraphic',{<br>    render:<bar>function(){},<br>    size:<bar>function(){},<br>    other function definitions...});
     *
     * @Class sap.viz.elements.common.BaseGraphic
     * @ignore
     */

    /**
     * Function for visualization to get/set visualization size.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *     {
     *         size:function(parameters){Implementation code}
     *     });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.size
     * @param {object}sizeObject size object with width&height.
     * <br>e.g.<br>
     * <pre>
     * {
     *     width:300,
     *     height:400
     * }
     * </pre>
     * @return {object}sizeObject size of the set width&height
     * <br>e.g.<br>
     * <pre>
     * {
     *     width:300,
     *     height:400
     * }
     * </pre>
     */
    /**
     * Rendering function for element to create visualization.<br>
     * <br><div style="font-weight:bold">You must override this function to do your visualization rendering.<br>
     * @method sap.viz.elements.common.BaseGraphic.render
     * @param {object}selection The d3 selection object. It's the dom's div/svg selection for you to render visualization.
     * @example <caption>How to override rendering function</caption>
     *
     * //Create element
     * var elementInstance = sap.viz.extapi.Flow.createElement({id:'sampleChart'});
     *
     * //Create function object.
     * var renderFn = {};
     * renderFunctionObject.render = function(parameters){Implementation code};
     *
     * //Add function object with base class into element.
     * elementInstance.implement('sap.viz.elements.common.BaseGraphic',renderFn);
     */
    /**
     * Function for visualization to get/set dom width.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          width:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.width
     * @param {Number|undefined}width Width of rendering area.
     *
     * @return {Number}height Height of rendering area.
     */
    /**
     * Function for visualization to get/set dom height.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          height:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.height
     * @param {Number|undefined}height Height of rendering area.
     *
     * @return {Number}height Height of rendering area.
     */
    /**
     * Function for visualization to get dataset.<br><br>
     * You can change the dataset by overriding this method.<br><br>
     *
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          data:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.data
     * @param {Object|undefined}data Dataset
     * <br>e.g.<br>
     * <pre>
     * {
     *    dataset: Dataset,// Dataset which is set in createViz's data option.
     *    feeding: Feeding// Feeding which is set in createViz's feeding option.
     * }
     * </pre>
     * For more dataset and feeding information, please refer {@link sap.viz.api.core#createViz}.
     *
     * @return{Object}data Dataset
     */

    /**
     * Function for visualization to destory itself.<br><br>
     * You can change the destroy logic by overriding this method.<br><br>
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          destroy:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.destroy
     */

    /* jshint ignore:end */

    return FlowApi;
});

define('sap/viz/extapi/core',['sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    "sap/viz/framework/customization/CustomizationFactory",
    "sap/viz/framework/customization/CustomRendererFactory",
    "sap/viz/framework/customization/CustomInteractionFactory",
    "sap/viz/framework/customization/CustomOverlayFactory",
    "sap/viz/framework/customization/CustomizationManager",
    'sap/viz/framework/extension/BaseChart',
    'sap/viz/framework/extension/ExtensionUtils',
    'sap/viz/framework/core/ChartViewRegistry',
    'exports'
], function Setup(TypeUtils, Logger, langManager, CustomizationFactory, CustomRendererFactory,
    CustomInteractionFactory, CustomOverlayFactory,
    CustomizationManager, BaseChart, ExtensionUtils, ChartViewRegistry) {

    /**
     * sap.viz.extapi.core
     * @namespace sap.viz.extapi.core
     */
    var coreExtAPi = {};
    /**
     * @ignore
     */

    coreExtAPi.BaseCustomization = {};
    coreExtAPi.BaseCustomization.extend = function(){
        return CustomizationFactory.extend();
    };

    coreExtAPi.BaseCustomRenderer = {};
    coreExtAPi.BaseCustomRenderer.extend = function(){
        return CustomRendererFactory.extend();
    };

    coreExtAPi.BaseCustomOverlay = {};
    coreExtAPi.BaseCustomOverlay.extend = function(){
        return CustomOverlayFactory.extend();
    };


    coreExtAPi.BaseCustomInteraction = {};
    coreExtAPi.BaseCustomInteraction.extend = function(){
        return CustomInteractionFactory.extend();
    };

    // //TODO: remove this, this is for dev env as bundle registeration need build env.
    // coreExtAPi.BaseCustomization.register = function(moduleClazz){
    //     return CustomizationManager.register(moduleClazz);
    // };

    /**
     * Register extension's bundle
     * @function registerBundle
     * @memberof sap.viz.extapi.core
     * @static
     * @param {Object} bundle The bundle description defined in extension's -bundle.js
     * Sample:
     * <pre>
     * (function() {
     *		var viz   = {...};
     *		var chart = {...};
     *
     *		var vizExtImpl = {
     *			"viz": [viz],
     *			"module": [chart],
     *			"feeds": []
     *		};
     *
     *		var vizExtBundle = {
     *			id : "com.company.vizext",
     *			loadAfter : ["sap.viz.aio"],
     *			components : [{
     *				id : "comp.company.vizext"
     *				provide : "sap.viz.impls",
     *				instance : vizExtImpl
     *			}]
     *		};
     *
     *		if (sap.bi.framework.getService("sap.viz.aio", "sap.viz.extapi")) {
     *			sap.bi.framework.getService("sap.viz.aio", "sap.viz.extapi").registerBundle(vizExtBundle);
     *		} else {
     *			define(function() {
     *				return vizExtBundle;
     *			});
     *		}
     *	})();
     * </pre>
     */
    coreExtAPi.registerBundle = function (bundle) {
        var def = define;
        var names = bundle.id.split(".");
        var moduleName = names[names.length - 1] + "-bundle";
        def(moduleName, function () {
            return bundle;
        });
        return bundle;
    };

    var baseClass = BaseChart;
    
    coreExtAPi.BaseChart = {

        extend: function () {

            return ExtensionUtils.extend(baseClass);
        },
        // register: function (extension) {
        //     var extensionView = ExtensionUtils.create(extension);
        //     ChartViewRegistry.registerWithChartView(extension.metadata, extensionView);
        // }
    };

    return coreExtAPi;

    /**
     * sap.viz.extapi.VERSION
     * @namespace sap.viz.extapi.VERSION
     *
     */



    /**
     * Constant, the current version of sap.viz.extapi.
     * @member VERSION
     * @memberof sap.viz.extapi.VERSION
     * @static
     * @example
     * var version = sap.viz.extapi.VERSION;
     */

});

define('sap/viz/framework/customization/constants/CustomRendererTypes',[], function() {

    var plotArea_markerRenderer = {
        toString:  function(){
            return "plotArea.markerRenderer";
        }
    };

    var categoryAxis_labelRenderer = {
        toString:  function(){
            return "categoryAxis.labelRenderer";
        }
    };

    var plotArea_dataLabel_renderer = {
        toString:  function(){
            return "plotArea.dataLabel.renderer";
        }
    };

    return {
        "PLOTAREA_MARKERRENDERER" : plotArea_markerRenderer,
        "CATEGORYAXIS_LABELRENDERER" : categoryAxis_labelRenderer,
        "PLOTAREA_DATALABEL_RENDERER": plotArea_dataLabel_renderer
    };
});

define('sap/viz/extapi/customization',[
    "sap/viz/framework/customization/constants/CustomRendererTypes",
    "sap/viz/framework/customization/constants/CustomInteractionTargets",
    "sap/viz/framework/customization/constants/CustomInteractionEvents",
    "exports"
], function Setup(
    CustomRendererTypes,
    CustomInteractionTargets,
    CustomInteractionEvents) {

    /**
     * sap.viz.extapi.customization
     * @namespace sap.viz.extapi.customization
     */
    var customization = {};

    /**
     * sap.viz.extapi.customization.constants
     * @namespace sap.viz.extapi.customization.constants
     */
    var constants = customization.constants = {};

    constants.CustomRendererTypes = CustomRendererTypes;
    constants.CustomInteractionTargets = CustomInteractionTargets;
    constants.CustomInteractionEvents = CustomInteractionEvents;

    return customization;
});

define('sap/viz/extapi/component/ColorLegend',[
    'sap/viz/framework/extension/Constants',
    'exports'
], function(
	Constants
) {

    var Legend = {};
     
    Legend.NAME = Constants.ModuleName['legend'];
     


    return Legend;
     
});
define('sap/viz/extapi/component/Title',[
    'sap/viz/framework/extension/Constants',
    'exports'
], function(
    Constants
) {

    var Title = {};
     
    Title.NAME = Constants.ModuleName['title'];
     
    return Title;
     
});
define('sap/viz/framework/common/util/ContextUtils',['sap/viz/api/data/CrosstableDataset', 'sap/viz/api/data/FlatTableDataset',
        'sap/viz/framework/common/util/ObjectUtils'], 
    function(CrosstableDataset, FlatTableDataset, ObjectUtils){
        function flat(dataSet, binding, needCache) {
            var measureTypeName = "Measure",
                dimesionTypeName = "Dimension",
                sematicTypeName = "semanticType";

            var fields,
                ctx = [];

            var hashFlt;

            dataSet = dataSet.data();
            fields = dataSet.metadata.fields;

            if(binding && binding.length>0){
                hashFlt = {};
                binding.forEach(function(e){
                    e.source.forEach(function(s){
                        if( typeof s == 'string'){
                            hashFlt[s] = true;
                        }                        
                    });
                });
            }
                
            dataSet.data.forEach(function(row, idx_r){
                var ctx_row = [], 
                    dims = {};

                row.forEach(function(dp, idx_f){
                    var rawCtx = {};
                    if(!hashFlt || hashFlt[fields[idx_f].id]){
                        if(fields[idx_f][sematicTypeName] == dimesionTypeName){
                            dims[fields[idx_f].id] = dp;
                        }else if(fields[idx_f][sematicTypeName] == measureTypeName){
                            rawCtx[fields[idx_f].id] = dp;
                            rawCtx._dims = dims;
                            /**keep measure id for quick ref in connext method of element of csv */
                            if(needCache){
                                rawCtx._mea = fields[idx_f].id; 
                            }
                            ctx_row.push(rawCtx);
                        }
                    }
                });
                ctx.push(
                    ctx_row.map(function(rawCtx){
                        var dims = rawCtx._dims;
                        delete rawCtx._dims;
                        return ObjectUtils.extend(rawCtx, dims);
                    })
                );                
            });

            return ctx;
        }

        function cross(dataSet, binding) {
            var ctx = [], mgLen,
                i, j, k, l, measureGroup, measures, measureVals, measuresLen, a1Vals, 
                ctx_mg, ctx_ms, ctx_a1, ctx_a0;

            var hashFlt;
            if(binding && binding.length>0){
                hashFlt = {};
                binding.forEach(function(e){
                    e.source.forEach(function(s){
                        hashFlt[s.type + s.index] = true;
                    });
                });
            }

            dataSet = dataSet.data();
            mgLen = dataSet.measureValuesGroup.length;

            for( i = 0; i < mgLen; i++){
                ctx_mg = [];
                measureGroup = dataSet.measureValuesGroup[i];
                if(hashFlt && !hashFlt['measureValuesGroup'+ (i + 1)]){
                    /**only care measuregroup binding here. since binding subset of analysis axis doesn't make sense*/
                    continue;
                }
                measures = measureGroup.data;
                measuresLen = measureGroup.data.length;
                for( j = 0; j < measuresLen; j++){
                    ctx_ms = [];
                    measureVals = measures[j].values;
                    for( k = 0; k < measureVals.length; k++){                        
                        a1Vals = measureVals[k];
                        ctx_a1 = [];
                        for( l = 0; l < a1Vals.length; l++){                            
                            ctx_a1.push({   
                                type: "Measure",
                                path: {
                                    mg: i,
                                    mi: j,
                                    dii_a1: l,
                                    dii_a2: k
                                }
                            });
                        }                        
                        ctx_ms.push(ctx_a1);
                    }
                    ctx_mg.push(ctx_ms);
                }
                ctx.push(ctx_mg);
            }
            return ctx;
        }

        return{
            flatTableContext: flat,
            crossTableContext: cross
        };
    }
);
define('sap/viz/extapi/utils/Data',['sap/viz/framework/common/util/ContextUtils', 'exports'],
    /**
     * sap.viz.extapi.utils.Data     
     * @namespace sap.viz.extapi.utils.Data
     */
    function(ContextUtils){ 
        return {
            /**
             * The main entry point of creating a context.
             * 
             * @function getDataContext
             * @memberof sap.viz.extapi.utils.Data
             * @static
             * @param {Object} dataSet
             * <pre>
             * crossTableDataSet or flatTableDataSet
             * for crossTableDatSet,
             * {
             *    'analysisAxis': [{
             *        'index': 1,
             *        'data': [{
             *                'type': 'Dimension',
             *                'name': 'Product',
             *                'values': ['Car', 'Truck']
             *             },]
             *    }, {
             *        'index': 2,
             *        'data': [{
             *                'type': 'Dimension',
             *                'name': 'Country',
             *                'values': ['China', 'USA']
             *            }]
             *    }],
             *    'measureValuesGroup' :[{
             *        'index': 1,
             *        'data': [{
             *                'type': 'Measure',
             *                'name': 'Profit',
             *                'values': [[25, 236], [58, 128]],
             *            }, {
             *                'type': 'Measure',
             *                'name': 'Revenue',
             *                'values': [[50, 86], [158, 88]]
             *            }]
             *    }, {
             *        'index': 2,
             *        'data': [{
             *                'type': 'Measure',
             *                'name': 'Profit1',
             *                'values': [[925, 9236], [958, 9128]],
             *            }, {
             *                'type': 'Measure',
             *                'name': 'Revenue1',
             *                'values': [[950, 986], [9158, 988]]
             *            }]
             *    }]
             * }
             *
             * for flatTabledataSet,
             * {
             *     metadata:{
             *         fields: [{
             *             id: 'Year',
             *             name: 'Year',
             *             semanticType: 'Dimension',
             *             dataType: 'Number'
             *         }, {
             *             id: 'Quarter',
             *             name: 'Quarter',
             *             semanticType: 'Dimension',
             *             dataType: 'String'
             *         }, {
             *             id: 'Country',
             *             name: 'Country',
             *             semanticType: 'Dimension',
             *             dataType: 'String'
             *         }, {
             *             id: 'SumRevenue',
             *             name: 'Sum of Revenue',
             *             semanticType: 'Measure'
             *         }, {
             *             id: 'SumProfit',
             *             name: 'Sum of Profit',
             *             semanticType: 'Measure'
             *         }, {
             *             id: 'Quarter_ID',
             *             name: 'Quarter_ID',
             *             semanticType: 'Dimension',
             *             dataType: 'String'
             *         }],
             *         context : ['Quarter_ID']
             *     },
             *     data: [
             *         [2001, 'Q1', 'USA', 100, 50,  'U2001_1'],
             *         [2001, 'Q1', 'CAN', 200, 100, 'C2001_1'],
             *         [2001, 'Q2', 'USA', 200, 100, 'U2001_2'],
             *         [2001, 'Q2', 'CAN', 300, 200, 'C2001_2'],
             *         [2002, 'Q1', 'USA', 150, 100, 'U2002_1'],
             *         [2002, 'Q1', 'CAN', 300, 200, 'C2002_1'],
             *         [2002, 'Q2', 'USA', 250, 150, 'U2002_2'],
             *         [2002, 'Q2', 'CAN', 350, 250, 'C2002_2']
             *     ]
             * }
             * </pre>
             * @param {Object} binding 
             * <pre>
             * (optional)binding information of chart, to filter out those data out of binding info
             * for crossTableDatSet, 
             * [
             *    {
             *        "feed" : "categoryAxis",
             *        "source" :  [{
             *            "type" : "analysisAxis",
             *            "index" : 1
             *        }]
             *    }, {
             *        "feed" : "valueAxis",
             *        "source" : [{
             *            "type" : "measureValuesGroup",
             *            "index" : 2
             *        }]
             *    }, {
             *        "feed" : "color",
             *        "source" : [{
             *            "type" : "analysisAxis",
             *            "index" : 2
             *          }, {
             *            "type" : "measureNamesDimension"
             *        }]
             *    }
             * ]
             * for flatTabledataSet,
             * [{
             *     "feed": "trellisRow",
             *     "source": ["Year"]
             * }, {
             *     "feed": "valueAxis",
             *     "source": ["SumProfit", "SumRevenue"]
             * }, {
             *     "feed": "forecastValues",
             *     "source": ["Country"]
             * }]
             * </pre>
             * @returns {Object} context Array
             * <pre>
             * for crossTableDatSet, 
             *     [
             *         [
             *             [                          
             *                 [{
             *                     "type": "Measure",
             *                     "path": {
             *                         "mg": 0,
             *                         "mi": 0,
             *                         "dii_a1": 0,
             *                         "dii_a2": 0
             *                     }
             *                 }, {
             *                     "type": "Measure",
             *                     "path": {
             *                         "mg": 0,
             *                         "mi": 0,
             *                         "dii_a1": 1,
             *                         "dii_a2": 0
             *                     }
             *                 }],
             *                 [{
             *                     "type": "Measure",
             *                     "path": {
             *                         "mg": 0,
             *                         "mi": 0,
             *                         "dii_a1": 0,
             *                         "dii_a2": 1
             *                 }
             *                 }, {
             *                     "type": "Measure",
             *                     "path": {
             *                         "mg": 0,
             *                         "mi": 0,
             *                         "dii_a1": 1,
             *                         "dii_a2": 1
             *                     }
             *                 }]
             *             ],
             *             [...]//mg:0 mi:1
             *         ],
             *             [...]//mg:1 mi:0
             *             [...]//mg:1 mi:1
             *     ]
             * for flatTabledataSet,
             *     [
             *         [{
             *             Year: 2001,
             *             Quater: 'Q1',
             *             Country: 'USA',
             *             SumRevenue: 100,
             *             'Quarter_ID': 'U2001_1'
             *         }, {
             *             Year: 2001,
             *             Quater: 'Q1',
             *             Country: 'USA',
             *             SumProfit: 50,
             *             'Quarter_ID': 'U2001_1'
             *         }],//record of data array
             *         [... ]//record of data array
             *          ...
             *     ]
             * </pre>              
             */
            getDataContext : function(dataSet, binding){
                var _parse;

                if(!dataSet){
                    return;
                }

                if(dataSet.type == 'sap.viz.api.data.CrosstableDataset'){           
                    _parse = ContextUtils.crossTableContext;                
                }else if(dataSet.type == 'sap.viz.api.data.FlatTableDataset'){ 
                    _parse = ContextUtils.flatTableContext;
                }else{
                    return;
                }

                return _parse(dataSet, binding);                
            }
        };    
    });
define('sap/viz/extapi/env/Language',['sap/viz/framework/common/lang/LangManager', 'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger', 'exports'
], function Setup(langManager, TypeUtils, Logger) {

    //var _listeners = new LinkedHashMap();
    var _listeners = {};
    var language =
        /**
         * sap.viz.extapi.env.Language
         * @namespace sap.viz.extapi.env.Language
         */
        {

            /**
             * Get current language
             * @function get
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @return {String} language value like en, de, fr, es, zh_CN, ja, ru, pt
             */
            get: function() {
                return langManager.current();
            },

            /**
             * @function addListener
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {Function} listener
             *                      function(language){...} //parameter language is optional
             * @return {sap.viz.extapi.env.Language} self
             */
            addListener: function(l) {
                if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                    var listener = {
                        fn: l
                    };
                    langManager.addListener(listener);
                    // _listeners.add(l, listener);
                    _listeners[l] = listener;
                    return language;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }

            },

            /**
             * @function removeListener
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {Function} listener
             *                      function(language){...} //this function must be the original listener function
             * @return {sap.viz.extapi.env.Language} self
             *
             */
            removeListener: function(l) {
                if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                    // langManager.removeListener(_listeners.get(l));
                    // _listeners.remove(l);
                    langManager.removeListener(_listeners[l]);
                    delete _listeners[l];
                    return language;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * @function register
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {Object} languagePackage
             * <pre>
             * { "id" : languageId,
             *     "value" :
             *     {
             *         "string_key" : string_value,
             *         ...
             *     },
             * }
             * </pre>
             * @return {sap.viz.extapi.env.Language} self
             */
            register: function(languagePackage) {
                if (arguments.length === 1 && TypeUtils.isPlainObject(languagePackage)) {
                    langManager.register(languagePackage);
                    return language;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get error message in current language by error code
             * @function getErrorMessage
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {Number} id
             * error id
             *
             * @return {String} error message
             *
             * @example sap.viz.extapi.env.Language.getErrorMessage(50000) =
             *  "Length of dimension cannot be zero."(locale == en);
             */
            getErrorMessage: function(id) {
                return langManager.getLogMessageByID(id);
            },

            /**
             * Get user defined resourceString according to current language setting
             * @function getResourceString
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {String} ids
             *
             * @return {String} the value of ids
             *
             * @example sap.viz.extapi.env.Language.getResourceString("TESTKEY") = "testValue"
             */
            getResourceString: function(ids) {
                return langManager.get(ids);
            }
        };
    return language;
});
define('sap/viz/extapi/env/Locale',['sap/viz/framework/common/locale/Locale', 'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager', 'exports'
], function Setup(Locale, TypeUtils, Logger, langManager) {
    // var _listeners = new LinkedHashMap();
    var _listeners = {};
    var locale =
        /**
         * sap.viz.extapi.env.Locale
         * @namespace sap.viz.extapi.env.Locale
         */
        {

            /**
             * Get current locale
             * @function get
             * @memberof sap.viz.extapi.env.Locale
             * @static
             * @return {String} locale value like en, de, fr, es, zh_CN, ja, ru, pt
             */
            get: function() {
                return Locale.locale();
            },

            /**
             * @function addListener
             * @memberof sap.viz.extapi.env.Locale
             * @static
             * @param {Function}
             *            listener function(locale){...} //parameter locale is optional
             * @return {sap.viz.extapi.env.Locale} self
             */
            addListener: function(l) {
                if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                    var listener = {
                        fn: l
                    };
                    Locale.addListener(listener);
                    // _listeners.add(l, listener);
                    _listeners[l] = listener;
                    return locale;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * @function removeListener
             * @memberof sap.viz.extapi.env.Locale
             * @static
             * @param {Function} listener
             *            function(locale){...} //this function must be the original listener function
             * @return {sap.viz.extapi.env.Locale} self
             */
            removeListener: function(l) {
                if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                    // Locale.removeListener(_listeners.get(l));
                    // _listeners.remove(l);
                    Locale.removeListener(_listeners[l]);
                    delete _listeners[l];
                    return locale;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            }
        };
    return locale;
});
define('sap/viz/extapi/env/Resource',[
    'sap/viz/api/env/Resource',
    'exports'
], function(Resource) {

    /**
     * sap.viz.extapi.env.Resource
     * @namespace sap.viz.extapi.env.Resource
     */

    /**
     * Get/Set resource path
     * @function path
     * @memberof sap.viz.extapi.env.Resource
     * @static
     * @param {String} key
     * @param {undefined|String|Array} [path]
     *     If path is undefined, this is a get path by key function, otherwise this is a set path by key function.
     * Example:
     *          Resource.path('baseURL') is to get path by key.
     *          Resource.path('baseURL', 'testurl') is to set path by key.
     * If path is Array, keep a cloned Array in the internal map.
     * Predefined Resource Paths:
     * <pre>
     *   1.  "sap.viz.api.env.Template.loadPaths":    ["../../../resources/templates"];
     *   2.  "sap.viz.api.env.Language.loadPaths":    ["../../../resources/langs/"];
     *   4.  "sap.viz.map.Resources" :                                   "../../resources"
     *
     *
     * Example:
     *
     *   Set path:
     *
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Template.loadPaths", ["../../../resources/templates"]);
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Language.loadPaths", ["../../../resources/langs/"]);
     *   sap.viz.api.env.Resource.path("sap.viz.map.Resources", "../../resources");
     *
     *   Get path:
     *
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Template.loadPaths") =  ["../../../resources/templates"];
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Language.loadPaths") =  ["../../../resources/langs/"];
     *   sap.viz.api.env.Resource.path("sap.viz.map.Resources")                 =  "../../resources";
     *
     * Or you can use customized paths:
     *         Resource.path('baseURL', 'testurl'), you can set any key-value pair which value should be a valid path.
     * @return {sap.viz.extapi.env.Resource|String|Array}
     *  return self when it is a set function and return String or Array if it is a get function.
     */

    return Resource;
});
define('sap/viz/extapi/env/Template',[
    'sap/viz/framework/common/template/TemplateManager', 
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger', 
    'sap/viz/framework/common/lang/LangManager', 
    'exports'
], function Setup(TemplateManager, ObjectUtils, TypeUtils, Logger, langManager) {
    var _listeners = {};
    var template =
        /**
         * sap.viz.extapi.env.Template
         * @namespace sap.viz.extapi.env.Template
         */
        {

            /**
             * Get current template's unique id
             * @function get
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @return {String} template's unique id
             * <pre>
             *  Example:
             *      sap.viz.extapi.env.Template.set("flashy", completeCallback, failedCallback);
             *      //set template by id
             *      sap.viz.extapi.env.Template.get() = "flashy";//Get the set template id.
             * </pre>
             */
            get: function() {
                return TemplateManager.current().id;
            },

            /**
             * Get a clone of current applied template object
             * @function current
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @return {Object} templatePackage
             * <pre>
             * {
             *     "id" : templateId,
             *     "name" : templateName,
             *     "version" : version,
             *     "css" : templateCss,
             *      //such as css: ".v-m-main .v-background-body{fill:#eeeeee;}
             *      .v-m-main .v-background-body{fill:#eeeeee;}"
             *     "properties" :
             *     {
             *            "string_key" : string_value,
             *         ...
             *     },
             * }
             * </pre>
             */
            current: function() {
                var templatePackage = {};
                return ObjectUtils.extend(true, templatePackage, TemplateManager.current());
            },

            /**
             * Get a clone of a loaded template object by template id, if not found return null
             * @function getPackage
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @param {String} id - a template id
             * @return {Object} templatePackage
             */
            getPackage: function(id) {
                var template = TemplateManager.retrieve(id);
                return template ? ObjectUtils.extend(true, {}, template) : null;
            },

            
            /**
             * Check whether a template has been loaded
             * @function isRegistered
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @param {string} id - a template id
             * @return {boolean} whether the template is loaded
             */
            isRegistered: function (templateId) {
                return TemplateManager.isLoaded(templateId);
            },

            unregister : function(templateId){
                return TemplateManager.unregister(templateId);
            },

            /**
             * Add or extend existing template object.
             * The api sap.viz.TemplateManager.extend which in the previous api version
             * is now replaced by this function. <br>
             *
             * If the template is not exist, it will add this template.
             * If the template is already exist, it will merge and extend the old one with the new template.
             *
             * @function register
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @param {Object} templatePackage
             * <pre>
             * {
             *     "id" : templateId,
             *     "name" : templateName,
             *     "version" : version,
             *     "css" : templateCss,
             *      //such as css: ".v-m-main .v-background-body{fill:#eeeeee;}
             *      .v-m-main .v-background-body{fill:#eeeeee;}"
             *     "properties" :
             *     {
             *            "string_key" : string_value,
             *         ...
             *     },
             * }
             * </pre>
             * @return {sap.viz.extapi.env.Template} self
             */

            /**
             * @function addListener
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @param {Function} func
             *             function(template){...} //parameter template is optional
             * @return {sap.viz.extapi.env.Template} self
             */
            addListener: function(func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    var listener = {
                        fn: func
                    };
                    TemplateManager.addListener(listener);
                    _listeners[func] = _listeners[func] || [];
                    _listeners[func].push(listener);
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * @function removeListener
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @param {Function} func
             *            function(template){...} //this function must be the original listener function
             * @return {sap.viz.extapi.env.Template} self
             */
            removeListener: function(func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    if (_listeners[func]) {
                        for (var i = 0; i < _listeners[func].length; i++) {
                            if (_listeners[func][i].fn === func) {
                                TemplateManager.removeListener(_listeners[func][i]);
                                _listeners[func].splice(i, 1);
                                break;
                            }
                        }
                    }
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            }
        };
    return template;
});

define('sap/viz/framework/binding/supportBindingUtil',[], function Setup() {

    var accpetBindingChartList = [
        'info/bar',
        'info/column',
        'info/bubble'
    ];
    var supportBinding = {};

    supportBinding.isAcceptBinding = function(type) {
        if (accpetBindingChartList.indexOf(type) >= 0) {
            return true;
        }
        return false;
    };

    // feeding = {
    //     primaryValues: ['Profit'],
    //     secondaryValues: ['Revenue'],
    //     regionColor: ['MeasureNamesDimension', 'Country'],
    //     axisLabels: ['Product', 'Year']
    // };
    // bindings = {
    //     'axisLabels': {
    //         chain: 'GetCategoryFromFlatTable', //default chain
    //         bindingInfo: {
    //             fieldsName: ['Year', 'MeasureNamesDimension', 'Country']
    //         }
    //     },
    //     'primaryValues': {
    //         chain: 'GetMeasuresFromFlatTable',
    //         bindingInfo: {
    //             fieldsName: ['Profit']
    //         }
    //     },
    //     'secondaryValues': {
    //         chain: 'GetMeasuresFromFlatTable',
    //         bindingInfo: {
    //             fieldsName: ['Revenue']
    //         }
    //     },
    //     'regionColor': {
    //         chain: 'GetColorRangeFromFlatTable',
    //         bindingInfo: {
    //             fieldsName: ['Product']
    //         }
    //     }
    // };

    var createSingleFlatBindingItem = function(feedingItem) {
        var bindingItem = {};
        bindingItem.bindingInfo = {};
        bindingItem.bindingInfo.fieldsName = feedingItem;
        return bindingItem;
    };
    supportBinding.transferFeedingToBinding = function(feeding) {
        var binding = {};
        for (var i in feeding) {
            if (feeding.hasOwnProperty(i)) {
                binding[i] = createSingleFlatBindingItem(feeding[i]);
            }
        }
        return binding;
    };
    return supportBinding;
});
define('sap/viz/framework/common/util/Math',['sap/viz/framework/common/util/UADetector'],
    function Setup(UADetector) {
        var OptMath = {
            PI: Math.PI,
            E: Math.E,
            LN10: Math.LN10,
            LN2: Math.LN2,
            LOG2E: Math.LOG2E,
            LOG10E: Math.LOG10E,
            SQRT1_2: Math.SQRT1_2,
            SQRT2: Math.SQRT2,

            abs: (function() {
                if (UADetector.isSafari() || (UADetector.isIE() && parseFloat(UADetector.version()) < 9)) {
                    return function(n) {
                        return n < 0 ? -n : n;
                    };
                } else {
                    return Math.abs;
                }
            })(),

            acos: (function() {
                return Math.acos;
            })(),

            asin: (function() {
                return Math.asin;
            })(),

            atan: (function() {
                return Math.atan;
            })(),

            atan2: (function() {
                return Math.atan2;
            })(),

            ceil: (function() {
                return Math.ceil;
            })(),

            cos: (function() {
                return Math.cos;
            })(),

            exp: (function() {
                return Math.exp;
            })(),

            floor: (function() {
                return Math.floor;
            })(),

            log: (function() {
                return Math.log;
            })(),

            max: (function() {
                return Math.max;
            })(),

            min: (function() {
                return Math.min;
            })(),

            pow: (function() {
                return Math.pow;
            })(),

            random: (function() {
                return Math.random;
            })(),

            round: (function() {
                return Math.round;
            })(),

            sin: (function() {
                return Math.sin;
            })(),

            sqrt: (function() {
                return Math.sqrt;
            })(),

            tan: (function() {
                return Math.tan;
            })()
        };
        return OptMath;
    });
define('sap/viz/framework/common/util/ColorUtils',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/Math'
], function Setup(TypeUtils, Math) {
        var namedColor = {
            aliceblue: "#f0f8ff",
            antiquewhite: "#faebd7",
            aqua: "#00ffff",
            aquamarine: "#7fffd4",
            azure: "#f0ffff",
            beige: "#f5f5dc",
            bisque: "#ffe4c4",
            black: "#000000",
            blanchedalmond: "#ffebcd",
            blue: "#0000ff",
            blueviolet: "#8a2be2",
            brown: "#a52a2a",
            burlywood: "#deb887",
            cadetblue: "#5f9ea0",
            chartreuse: "#7fff00",
            chocolate: "#d2691e",
            coral: "#ff7f50",
            cornflowerblue: "#6495ed",
            cornsilk: "#fff8dc",
            crimson: "#dc143c",
            cyan: "#00ffff",
            darkblue: "#00008b",
            darkcyan: "#008b8b",
            darkgoldenrod: "#b8860b",
            darkgray: "#a9a9a9",
            darkgreen: "#006400",
            darkgrey: "#a9a9a9",
            darkkhaki: "#bdb76b",
            darkmagenta: "#8b008b",
            darkolivegreen: "#556b2f",
            darkorange: "#ff8c00",
            darkorchid: "#9932cc",
            darkred: "#8b0000",
            darksalmon: "#e9967a",
            darkseagreen: "#8fbc8f",
            darkslateblue: "#483d8b",
            darkslategray: "#2f4f4f",
            darkslategrey: "#2f4f4f",
            darkturquoise: "#00ced1",
            darkviolet: "#9400d3",
            deeppink: "#ff1493",
            deepskyblue: "#00bfff",
            dimgray: "#696969",
            dimgrey: "#696969",
            dodgerblue: "#1e90ff",
            firebrick: "#b22222",
            floralwhite: "#fffaf0",
            forestgreen: "#228b22",
            fuchsia: "#ff00ff",
            gainsboro: "#dcdcdc",
            ghostwhite: "#f8f8ff",
            gold: "#ffd700",
            goldenrod: "#daa520",
            gray: "#808080",
            green: "#008000",
            greenyellow: "#adff2f",
            grey: "#808080",
            honeydew: "#f0fff0",
            hotpink: "#ff69b4",
            indianred: "#cd5c5c",
            indigo: "#4b0082",
            ivory: "#fffff0",
            khaki: "#f0e68c",
            lavender: "#e6e6fa",
            lavenderblush: "#fff0f5",
            lawngreen: "#7cfc00",
            lemonchiffon: "#fffacd",
            lightblue: "#add8e6",
            lightcoral: "#f08080",
            lightcyan: "#e0ffff",
            lightgoldenrodyellow: "#fafad2",
            lightgray: "#d3d3d3",
            lightgreen: "#90ee90",
            lightgrey: "#d3d3d3",
            lightpink: "#ffb6c1",
            lightsalmon: "#ffa07a",
            lightseagreen: "#20b2aa",
            lightskyblue: "#87cefa",
            lightslategray: "#778899",
            lightslategrey: "#778899",
            lightsteelblue: "#b0c4de",
            lightyellow: "#ffffe0",
            lime: "#00ff00",
            limegreen: "#32cd32",
            linen: "#faf0e6",
            magenta: "#ff00ff",
            maroon: "#800000",
            mediumaquamarine: "#66cdaa",
            mediumblue: "#0000cd",
            mediumorchid: "#ba55d3",
            mediumpurple: "#9370db",
            mediumseagreen: "#3cb371",
            mediumslateblue: "#7b68ee",
            mediumspringgreen: "#00fa9a",
            mediumturquoise: "#48d1cc",
            mediumvioletred: "#c71585",
            midnightblue: "#191970",
            mintcream: "#f5fffa",
            mistyrose: "#ffe4e1",
            moccasin: "#ffe4b5",
            navajowhite: "#ffdead",
            navy: "#000080",
            oldlace: "#fdf5e6",
            olive: "#808000",
            olivedrab: "#6b8e23",
            orange: "#ffa500",
            orangered: "#ff4500",
            orchid: "#da70d6",
            palegoldenrod: "#eee8aa",
            palegreen: "#98fb98",
            paleturquoise: "#afeeee",
            palevioletred: "#db7093",
            papayawhip: "#ffefd5",
            peachpuff: "#ffdab9",
            peru: "#cd853f",
            pink: "#ffc0cb",
            plum: "#dda0dd",
            powderblue: "#b0e0e6",
            purple: "#800080",
            red: "#ff0000",
            rosybrown: "#bc8f8f",
            royalblue: "#4169e1",
            saddlebrown: "#8b4513",
            salmon: "#fa8072",
            sandybrown: "#f4a460",
            seagreen: "#2e8b57",
            seashell: "#fff5ee",
            sienna: "#a0522d",
            silver: "#c0c0c0",
            skyblue: "#87ceeb",
            slateblue: "#6a5acd",
            slategray: "#708090",
            slategrey: "#708090",
            snow: "#fffafa",
            springgreen: "#00ff7f",
            steelblue: "#4682b4",
            tan: "#d2b48c",
            teal: "#008080",
            thistle: "#d8bfd8",
            tomato: "#ff6347",
            turquoise: "#40e0d0",
            violet: "#ee82ee",
            wheat: "#f5deb3",
            white: "#ffffff",
            whitesmoke: "#f5f5f5",
            yellow: "#ffff00",
            yellowgreen: "#9acd32"
        };

        var hue2rgb = function(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        };
        var hsl2rgb = function(h, s, l) {
            var r, g, b;
            if (s === 0) {
                r = g = b = l;
                // achromatic
            } else {
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }
            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
        };
        var rgb2hsl = function(r, g, b) {
            r /= 255;
            g /= 255;
            b /= 255;
            var max = Math.max(r, g, b),
                min = Math.min(r, g, b);
            var h = 0,
                s, l = (max + min) / 2;

            if (max == min) {
                h = s = 0;
                // achromatic
            } else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        h = (b - r) / d + 2;
                        break;
                    case b:
                        h = (r - g) / d + 4;
                        break;
                }
                h /= 6;
            }
            return [h, s, l];
        };
        var parsePercentage = function(value) {
            return parseInt(value.substring(0, value.lastIndexOf('%'))) / 100;
        };
        var parseRGBValue = function(value) {
            if (value.lastIndexOf('%') > 0) {
                return Math.ceil(parseInt(value.substring(0, value.lastIndexOf('%'))) * 255 / 100);
            } else {
                return parseInt(value);
            }
        };
        var toHexString = function(decimal) {
            return decimal < 16 ? '0' + decimal.toString(16) : decimal.toString(16);
        };

        var RGBA = function(r, g, b, a) {
            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        };

        RGBA.prototype.rgb = function() {
            return this;
        };

        RGBA.prototype.lighter = function(percent) {
            if (!arguments.length || isNaN(+percent) || +percent > 1.0 || +percent < 0.0) {
                percent = 0.1;
            }
            var color = this.hsl();
            color.l = Math.max(0.1, color.l * (1 - percent));
            color = color.rgb();
            this.r = color.r;
            this.g = color.g;
            this.b = color.b;
            return this;
        };

        RGBA.prototype.darker = function(percent) {
            if (!arguments.length || isNaN(+percent) || +percent > 1.0 || +percent < 0.0) {
                percent = 0.1;
            }
            var color = this.hsl();
            color.l = Math.min(1, color.l * (1 + percent));
            color = color.rgb();
            this.r = color.r;
            this.g = color.g;
            this.b = color.b;
            return this;
        };

        RGBA.prototype.hsl = function() {
            var HSL = rgb2hsl(this.r, this.g, this.b);
            return new HSLA(HSL[0], HSL[1], HSL[2], this.a);
        };
        RGBA.prototype.toString = function(type) {
            var hsl;
            switch (type) {
                case 'rgb':
                    return 'rgb(' + Math.round(this.r) + ',' + Math.round(this.g) + ',' + Math.round(this.b) + ')';
                case 'rgba':
                    return 'rgba(' + Math.round(this.r) + ',' + Math.round(this.g) + ',' + Math.round(this.b) + ',' +
                        this.a + ')';
                case 'hsl':
                    hsl = rgb2hsl(this.r, this.g, this.b);
                    return 'hsl(' + hsl[0] * 360 + ',' + hsl[1] * 100 + '%,' + hsl[2] * 100 + '%)';
                case 'hsla':
                    hsl = rgb2hsl(this.r, this.g, this.b);
                    return 'hsla(' + hsl[0] * 360 + ',' + hsl[1] * 100 * 100 + '%,' + hsl[2] * 100 * 100 + '%,' + (this
                        .a || 1.0) + ')';
                default:
                    return '#' + toHexString(Math.round(this.r)) + toHexString(Math.round(this.g)) +
                        toHexString(Math.round(this.b));
            }
        };

        var HSLA = function(h, s, l, a) {
            this.h = h;
            this.s = s;
            this.l = l;
            this.a = a;
        };

        HSLA.prototype.rgb = function() {
            var rgb = hsl2rgb(this.h, this.s, this.l);
            return new RGBA(Math.round(rgb[0]), Math.round(rgb[1]), Math.round(rgb[2]), this.a);
        };

        HSLA.prototype.hsl = function() {
            return this;
        };

        HSLA.prototype.lighter = function(percent) {
            if (!arguments.length || isNaN(+percent) || +percent > 1.0 || +percent < 0.0) {
                percent = 0.1;
            }
            this.l = Math.max(0.1, this.l * (1 - percent));
            return this;
        };

        HSLA.prototype.darker = function(percent) {
            if (!arguments.length || isNaN(+percent) || +percent > 1.0 || +percent < 0.0) {
                percent = 0.1;
            }
            this.l = Math.min(1, this.l * (1 + percent));
            return this;
        };

        HSLA.prototype.toString = function(type) {
            var rgb;
            switch (type) {
                case 'rgb':
                    rgb = hsl2rgb(this.h, this.s, this.l);
                    return 'rgb(' + Math.round(rgb[0]) + ',' + Math.round(rgb[1]) + ',' + Math.round(rgb[2]) + ')';
                case 'rgba':
                    rgb = hsl2rgb(this.h, this.s, this.l);
                    return 'rgba(' + Math.round(rgb[0]) + ',' + Math.round(rgb[1]) + ',' + Math.round(rgb[2]) + ',' +
                        this.a + ')';
                case 'hsl':
                    return 'hsl(' + this.h + ',' + this.s + '%,' + this.l + '%)';
                case 'hsla':
                    return 'hsla(' + this.h + ',' + this.s + '%,' + this.l + '%,' + this.a + ')';
                default:
                    rgb = hsl2rgb(this.h, this.s, this.l);
                    return '#' + toHexString(Math.round(rgb[0])) + toHexString(Math.round(rgb[1])) +
                        toHexString(Math.round(rgb[2]));
            }
        };
        /**
         * Represent a color normalized from css color setting
         *
         * @name sap.viz.base.types.Color
         * @constructor
         */
        var ColorUtils = {
            random: function () {
                var letters = '0123456789ABCDEF'.split('');
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.round(Math.random() * 15)];
                }
                return color;
            },
            isCSSColorString: function (cssColorString) {
                return TypeUtils.isString(cssColorString) && /^(#|rgb\(|rgba\(|hsl\(|hsla\()/i.test(cssColorString) ||
                    namedColor.hasOwnProperty(cssColorString);
            },

            isRGBColorString: function (cssColorString) {
                return TypeUtils.isString(cssColorString) && /^(#|rgb\(|rgba\()/i.test(cssColorString) ||
                    namedColor.hasOwnProperty(cssColorString);
            },

            isHSLColorString: function (cssColorString) {
                return TypeUtils.isString(cssColorString) && /^(hsl\(|hsla\()/i.test(cssColorString);
            },

            /**
             * Factory method for creating a color object from valid CSS color
             * string.
             *
             * @param cssColorString
             * @returns {sap.viz.base.types.Color}
             */
            fromCSSColor: function(cssColorString) {
                if (cssColorString.charAt(0) == '#') {
                    return this.fromRGBHexString(cssColorString);
                } else if (cssColorString.substr(0, 4).toLowerCase() == 'rgba') {
                    return this.fromRGBA(cssColorString);
                } else if (cssColorString.substr(0, 3).toLowerCase() == 'rgb') {
                    return this.fromRGB(cssColorString);
                } else if (cssColorString.substr(0, 4).toLowerCase() == 'hsla') {
                    return this.fromHSLA(cssColorString);
                } else if (cssColorString.substr(0, 3).toLowerCase() == 'hsl') {
                    return this.fromHSL(cssColorString);
                } else if (namedColor.hasOwnProperty(cssColorString)) {
                    return this.fromRGBHexString(namedColor[cssColorString]);
                }
            },
            /**
             * Factory method for creating a color object from either valid CSS rgb
             * string or seperated r,g,b components.
             *
             * @param {String|Number}
             *            rgb css rgb string or red component
             * @param {Number}
             *            [g] the green component
             * @param {Number}
             *            [b] the blue component
             * @returns {sap.viz.base.types.Color}
             */
            fromRGB: function(rgb) {
                var red = 0,
                    green = 0,
                    blue = 0;
                if (arguments.length == 1) {
                    var comps = rgb.substring(4, rgb.lastIndexOf(')')).split(',');
                    red = parseRGBValue(comps[0]);
                    green = parseRGBValue(comps[1]);
                    blue = parseRGBValue(comps[2]);
                } else if (arguments.length == 3) {
                    red = arguments[0];
                    green = arguments[1];
                    blue = arguments[2];
                }
                return new RGBA(red, green, blue, 1.0);
            },
            /**
             * Factory method for creating a color object from either valid CSS rgba
             * string or seperated r,g,b,a components.
             *
             * @param {String|Number}
             *            rgb css rgb string or red component
             * @param {Number}
             *            [g] the green component
             * @param {Number}
             *            [b] the blue component
             * @param {Number}
             *            [a] the alpha component
             * @returns {sap.viz.base.types.Color}
             */
            fromRGBA: function(rgba) {
                var red = 0,
                    green = 0,
                    blue = 0,
                    alpha = 0;
                if (arguments.length == 1) {
                    var comps = rgba.substring(5, rgba.lastIndexOf(')')).split(',');
                    red = parseRGBValue(comps[0]);
                    green = parseRGBValue(comps[1]);
                    blue = parseRGBValue(comps[2]);
                    alpha = parseFloat(comps[3]);
                } else if (arguments.length == 4) {
                    red = Math.ceil(arguments[0]);
                    green = Math.ceil(arguments[1]);
                    blue = Math.ceil(arguments[2]);
                    alpha = parseFloat(arguments[3]);
                }
                return new RGBA(red, green, blue, alpha);
            },
            /**
             * Factory method for creating a color object from either valid CSS
             * numbering color string.
             *
             * @param {String}
             *            hexString css color string like #FFFFFF
             * @returns {sap.viz.base.types.Color}
             */
            fromRGBHexString: function(hexString) {
                var red = 0,
                    green = 0,
                    blue = 0,
                    alpha = 1.0;
                if (hexString.length === 7) {
                    red = hexString.substr(1, 2);
                    green = hexString.substr(3, 2);
                    blue = hexString.substr(5, 2);
                }
                if (hexString.length === 4) {
                    red = hexString.charAt(1);
                    red += red;
                    green = hexString.charAt(2);
                    green += green;
                    blue = hexString.charAt(3);
                    blue += blue;
                }
                return new RGBA(parseInt(red, 16), parseInt(green, 16), parseInt(blue, 16), alpha);
            },
            /**
             * Factory method for creating a color object from either valid CSS hsl
             * color string or hue, saturation, lightness component.
             *
             * @param {String|Number}
             *            hsl css hsl string or hue component
             * @param {Number}
             *            [s] saturation component
             * @param {Number}
             *            [l] lightness component
             * @returns {sap.viz.base.types.Color}
             */
            fromHSL: function(hsl) {
                if (arguments.length == 1) {
                    var comps = hsl.substring(4, hsl.lastIndexOf(')')).split(',');
                    var hue = (parseInt(comps[0]) % 360 + 360) % 360 / 360;
                    var saturation = parsePercentage(comps[1]);
                    var lightness = parsePercentage(comps[2]);
                    return new HSLA(hue, saturation, lightness, 1.0);
                } else if (arguments.length == 3) {
                    return new HSLA(arguments[0], arguments[1], arguments[2], 1.0);
                }
            },
            /**
             * Factory method for creating a color object from either valid CSS hsla
             * color string or hue, saturation, lightness, alpha component.
             *
             * @param {String|Number}
             *            hsl css hsl string or hue component
             * @param {Number}
             *            [s] saturation component
             * @param {Number}
             *            [l] lightness component
             * @param {Number}
             *            [a] alpha component
             * @returns {sap.viz.base.types.Color}
             */
            fromHSLA: function(hsla) {
                if (arguments.length == 1) {
                    var comps = hsla.substring(5, hsla.lastIndexOf(')')).split(',');
                    var hue = (parseInt(comps[0]) % 360 + 360) % 360 / 360;
                    var saturation = parsePercentage(comps[1]);
                    var lightness = parsePercentage(comps[2]);
                    var alpha = parseFloat(comps[3]);
                    return new HSLA(hue, saturation, lightness, alpha);
                } else if (arguments.length == 4) {
                    return new HSLA(arguments[0], arguments[1], arguments[2], arguments[3]);
                }
            },

            /**
             * Adjust the alpha channel of a color, the returned color is in format
             * of rgba(r,g,b,a).
             *
             * @param cssColor
             * @param opacity
             * @returns
             */
            changeOpacity: function(cssColor, opacity) {
                var color = ColorUtils.fromCSSColor(cssColor);
                if (color) {
                    color.a = +opacity;
                    return color.toString('rgba');
                }
            },
            getColorFromEffectManager: function(prop, effectMgr, defaultColor) {
                var _getColorVal = function(color){
                    var start = color.indexOf('(') + 1,
                        end = color.indexOf('%') > -1 ?
                                color.indexOf('%') : color.indexOf(')');
                    if(start === end) {
                        return 0.2;
                    }
                    return color.slice(start, end)/100;
                };
                var color;
                if(prop){
                    if(TypeUtils.isFunction(prop)){
                        color = prop(defaultColor);
                    } else if(TypeUtils.isString(prop)){
                        if(prop.indexOf('darken') >= 0 ){
                            color = effectMgr.darken(defaultColor, _getColorVal(prop));
                        }else if(prop.indexOf('lighten') >= 0){
                            color = effectMgr.lighten(defaultColor, _getColorVal(prop));
                        }else if(prop.indexOf('desaturate') >= 0){
                            color = effectMgr.desaturate(defaultColor, _getColorVal(prop));
                        }else if(prop.indexOf('greyscale') >= 0){
                            color = effectMgr.greyscale(defaultColor);
                        }else{
                            color = effectMgr.color2rgba(prop);
                        }
                    }
                }
                return color;
            }
        };

        return ColorUtils;
    });
define('sap/viz/framework/common/util/PositionUtil',["sap/viz/framework/common/util/Constants"],
    function Setup(Constants) {

        var PositionUtil = {};

        var isGElement = function(selection) {
            return selection.node().nodeName.toLowerCase() === 'g';
        };
        var isSVGElement = function(selection) {
            return selection.node().nodeName.toLowerCase() === 'svg';
        };
        var isDIV = function(selection) {
            return selection.node().nodeName.toLowerCase() === 'div';
        };
        var isSVG = function(selection) {
            return isGElement(selection) || isSVGElement(selection);
        };

        var positionSVG = function(element, boundry) {
            if (element && boundry) {
                if (isSVGElement(element)) {
                    //if it's SVG element, we should use left/top to position it, instead of transform
                    element.attr('width', boundry.width)
                        .attr('height', boundry.height);
                    element.style('position', 'absolute')
                        .style('box-sizing', 'border-box')
                        .style('left', boundry.x + 'px')
                        .style('top', boundry.y + 'px');
                } else {
                    element.attr('transform', 'translate(' + boundry.x + ', ' + boundry.y + ')');
                }
            }
        };

        var positionDIV = function(element, boundry) {
            if (element && boundry) {
                element.style('position', 'absolute')
                    .style('box-sizing', 'border-box')
                    .style('overflow', 'hidden')
                    .style('width', boundry.width + 'px')
                    .style('height', boundry.height + 'px')
                    .style('left', boundry.x + 'px')
                    .style('top', boundry.y + 'px');
            }
        };

        /*
         * this function helps you to position dom elements (D3 selections) based on passed in layout boundries.
         */
        PositionUtil.positionElements = function(layouts, selections) {
            var iter;
            for (iter in selections) {
                if (selections.hasOwnProperty(iter)) {
                    if (layouts[iter]) {
                        var boundry = layouts[iter];
                        var element = selections[iter];
                        if (isSVG(element)) {
                            positionSVG(element, boundry);
                        } else if (isDIV(selections[iter])) {
                            positionDIV(element, boundry);
                        }
                    }
                }
            }
        };

        PositionUtil.isVertical = function(p) {
            return p === Constants.POSITION.LEFT || p === Constants.POSITION.RIGHT;
        };

        PositionUtil.isHorizontal = function(p) {
            return p === Constants.POSITION.TOP || p === Constants.POSITION.BOTTOM;
        };

        return PositionUtil;
    });
define('sap/viz/framework/common/util/PropertyZoneUtil',['sap/viz/framework/common/util/TypeUtils'],
    function Setup(TypeUtils) {
        var PropertyZoneUtil = {
            calcOffsetFromChart: function(root, result) {
                if (TypeUtils.isExist(root)) {
                    var rootRect = root.getBoundingClientRect();
                    var xOffset = rootRect.left;
                    var yOffset = rootRect.top;
                    var i, j, k, bound, zone, coordinate;
                    for (i = 0; i < result.length; i++) {
                        bound = result[i].bound;
                        for (j = 0; j < bound.length; j++) {
                            zone = bound[j];
                            for (k = 0; k < zone.length; k++) {
                                coordinate = zone[k];
                                coordinate[0] = Math.round(coordinate[0] - xOffset);
                                coordinate[1] = Math.round(coordinate[1] - yOffset);
                            } //zone
                        } //bound
                    } //result
                }
            },
            plot : function(that) {
                return {
                    tempPropertyZone: {
                        plot: {
                            value: [],
                            readonly: true,
                            serializable: false,
                            get: function() {
                                var result = [], node, root; 
                                if (that._selections && that._selections.plot &&
                                 that._selections.plot.node()) {
                                    node = that._selections.plot.node().querySelector(".v-plot-bound");
                                } else if (that._selection) {
                                    node = that._selection.node();//pie, donut
                                }
                                if (node) {
                                    var boundRect = node.getBoundingClientRect();
                                    if (boundRect.width > 1.5 && boundRect.height > 1.5) {
                                        var bound = [
                                            []
                                        ];
                                        bound[0].push([boundRect.left, boundRect.top]);
                                        bound[0].push([boundRect.right, boundRect.top]);
                                        bound[0].push([boundRect.right, boundRect.bottom]);
                                        bound[0].push([boundRect.left, boundRect.bottom]);
                                        result.push({
                                            "name": 'plot',
                                            "bound": bound
                                        });
                                    }
                                    root = node.ownerSVGElement;
                                }
                                PropertyZoneUtil.calcOffsetFromChart(root, result);
                                return result;
                            }
                        }
                    }
                };
            },
            getBounds: function(node, clipPath) {
                var rBound = [];
                rBound.push([node.left, node.top]);
                rBound.push([node.right, node.top]);
                rBound.push([node.right, node.bottom]);
                rBound.push([node.left, node.bottom]);
                var cBound = [];
                cBound.push([clipPath.left, clipPath.top]);
                cBound.push([clipPath.right, clipPath.top]);
                cBound.push([clipPath.right, clipPath.bottom]);
                cBound.push([clipPath.left, clipPath.bottom]);
                var result = [[]];
                result[0].push([(rBound[0][0] > cBound[0][0] ? rBound[0][0] : cBound[0][0]),
                    (rBound[0][1] > cBound[0][1] ? rBound[0][1] : cBound[0][1])]);
                result[0].push([(rBound[1][0] < cBound[1][0] ? rBound[1][0] : cBound[1][0]),
                    (rBound[1][1] > cBound[1][1] ? rBound[1][1] : cBound[1][1])]);
                result[0].push([(rBound[2][0] < cBound[2][0] ? rBound[2][0] : cBound[2][0]),
                    (rBound[2][1] < cBound[2][1] ? rBound[2][1] : cBound[2][1])]);
                result[0].push([(rBound[3][0] > cBound[3][0] ? rBound[3][0] : cBound[3][0]),
                    (rBound[3][1] < cBound[3][1] ? rBound[3][1] : cBound[3][1])]);
                return result;
            },
            top : function(node, clipPath, root) {
                var result = {};
                var xAxis2 = node.select('.v-m-xAxis2').node() ?
                    node.select('.v-m-xAxis2').node().parentNode.getBoundingClientRect() : null;
                var clip = clipPath.select('rect').node().getBoundingClientRect();
                if (TypeUtils.isExist(xAxis2)) {
                    result.valueAxis = [];
                    result.valueAxis.push({name : 'valueAxis', bound : PropertyZoneUtil.getBounds(xAxis2, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result.valueAxis);
                }
                return result;
            },
            bottom : function(node, clipPath, root, type) {
                var result = {};
                var xAxis = node.select('.v-m-xAxis').node() ?
                    node.select('.v-m-xAxis').node().parentNode.getBoundingClientRect() : null;
                var xAxis2 = node.select('.v-m-xAxis2').node() ?
                    node.select('.v-m-xAxis2').node().parentNode.getBoundingClientRect() : null;
                var columnAxis = node.select('.v-m-trellis-axis').node() ? 
                     node.select('.v-m-trellis-axis').node().parentNode.getBoundingClientRect() : null;
                var clip = clipPath.select('rect').node().getBoundingClientRect();
                if (TypeUtils.isExist(xAxis)) {
                    result[type] = [];
                    result[type].push({name : type, bound : PropertyZoneUtil.getBounds(xAxis, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result[type]);
                }
                if (TypeUtils.isExist(xAxis2)) {
                    result[type] = [];
                    result[type].push({name : type, bound : PropertyZoneUtil.getBounds(xAxis2, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result[type]);
                }
                if (TypeUtils.isExist(columnAxis)) {
                    result.trellisColumn = [];
                    result.trellisColumn.push({name : 'trellisColumn', 
                        bound : PropertyZoneUtil.getBounds(columnAxis, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result.trellisColumn);
                }
                return result;
            },
            left : function(node, clipPath, root, type) {
                var result = {};
                var yAxis = node.select('.v-m-yAxis').node() ?
                    node.select('.v-m-yAxis').node().parentNode.getBoundingClientRect() : null;
                var rowAxis = node.select('.v-m-trellis-axis').node() ? 
                     node.select('.v-m-trellis-axis').node().parentNode.getBoundingClientRect() : null;
                var clip = clipPath.select('rect').node().getBoundingClientRect();
                if (TypeUtils.isExist(yAxis)) {
                    result[type] = [];
                    result[type].push({name : type, bound : PropertyZoneUtil.getBounds(yAxis, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result[type]);
                }
                if (TypeUtils.isExist(rowAxis)) {
                    result.trellisRow = [];
                    result.trellisRow.push({name : 'trellisRow', bound : PropertyZoneUtil.getBounds(rowAxis, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result.trellisRow);
                }
                return result;
            },
            right : function(node, clipPath, root) {
                var result = {};
                var yAxis2 = node.select('.v-m-yAxis2').node() ?
                    node.select('.v-m-yAxis2').node().parentNode.getBoundingClientRect() : null;
                var clip = clipPath.select('rect').node().getBoundingClientRect();
                if (TypeUtils.isExist(yAxis2)) {
                    result.valueAxis2 = [];
                    result.valueAxis2.push({name : 'valueAxis2', bound : PropertyZoneUtil.getBounds(yAxis2, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result.valueAxis2);
                }
                return result;
            }
        };

        return PropertyZoneUtil;
    });

define('sap/viz/framework/extension/DataModelToCSVUtil',[
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/ContextUtils'
], function(FunctionUtils, LangManager, ContextUtils) {

    /**
     * Convert a crosstable or flattable to csv. Every member of CVS has a method context
     * 
     * @function DataModelToCSVUtil
     * @memberof sap.viz.framework.extension
     * @static
     * @param {Object} dataSet
     * @param {Object} [optional] bindings
     * @param {Object} [optional] mapper
     * @param {Object} [optional] successful callback
     * @returns {Object}
     * <pre>
     * var dataModel = {
     *        "metadata": {
     *            "fields": [{
     *                "id": "Country",
     *                "name": "Country",
     *                "semanticType": "Dimension",
     *                "dataType": "String",
     *                "domain": ["China", "USA"]
     *            }, {
     *                "id": "Year",
     *                "name": "Year",
     *                "semanticType": "Dimension",
     *                "dataType": "String"
     *            }, {
     *                "id": "Product",
     *                "name": "Product",
     *                "semanticType": "Dimension",
     *                "dataType": "String",
     *                "domain": ["Car", "Motorcycle", "Truck"]
     *            }, {
     *                "id": "Profit",
     *                "name": "Profit",
     *                "semanticType": "Measure",
     *                "dataType": "Number"
     *            }, {
     *                "id": "Revenue",
     *                "name": "Revenue",
     *                "semanticType": "Measure",
     *                "dataType": "Number"
     *            }, {
     *                "id": "GrowthRate",
     *                "name": "GrowthRate",
     *                "semanticType": "Measure",
     *                "dataType": "Number"
     *            }, {
     *                "id": "_contextId",
     *                "name": "_contextId",
     *                "dataType": "String"
     *            }]
     *        },
     *        "data": [
     *            ["USA", "2001", "Car", 58, 116, 0.2, "context6"],
     *            ["USA", "2001", "Truck", 149, 249, 0.65, "context7"],
     *            ["USA", "2001", "Motorcycle", 49, 149, 0.4, "context8"],
     *            ["China", "2001", "Truck", 159, 300, 0.35, "context1"],
     *            ["China", "2001", "Car", -150, 500, 0.25, "context0"],
     *            ["China", "2001", "Motorcycle", 129, 229, 0.15, "context2"],
     *            ["China", "2002", "Car", 136.1245, 272, 0.4, "context3"],
     *            ["China", "2002", "Truck", 147, 247, 0.15, "context4"],
     *            ["China", "2002", "Motorcycle", 47, 147, 0.10, "context5"],
     *            ["USA", "2002", "Car", 128, 256, 0.35, "context9"],
     *            ["USA", "2002", "Truck", 269, 369, 0.10, "context10"],
     *            ["USA", "2002", "Motorcycle", 69, 169, 0.8, "context11"]
     *        ]
     *    };
     *  var ft = new FlatTableDataset(dataModel);
     *  var result = DataModelToCSVUtil(ft, bindings, function(d){
     *      return d;
     *  }, function(a){ return a;});
     *  deepEqual(result[0].context('Revenue') ,{
            ctx: [{ "Country": "USA",
            "Year": "2001",
            "Product": "Car",
            "Revenue": 116}]
        } ,'context of result[0] revenue');
     * </pre>              
    */
    var processData = function() {
        var util = { /*__FOLD__*/
            /*
             * Converts data to csv format.  
             * CrosstableDataset and FlattableDataset as data input.
             * Invocation example:
             * _util.toTable(data, feeding, [mapper], callback);
             * data : data input
             * feedings : binding info
             * mapper[optional] : a mapper that maps each data to another format.
             * eg. mapper = function(d, [meta]){...}
             * callback[optional] : accepts the error message and output data to generate visualization.
             * eg. callback = function(err, data, [meta]){...}
             */
            toTable: function(data, feedings, f1, f2) {
                var cb = f2 || f1,
                    mapper = f2 ? f1 : undefined,
                    me = this,
                    rows;
                try {
                    var parser = me._getParser(data);
                    if(!parser){//known data model type
                        return;
                    }
                    rows = parser.call(me, data, feedings);
                    if (!rows) {
                        rows = [];
                    }
                    if (mapper) {
                        me._meta = rows.meta;
                        rows = rows.map(function(d) {
                            return mapper(d, me._meta);
                        });
                        rows.meta = me._meta;
                    }
                } catch (err) {
                    FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_WRONG_TYPE'));
                    return;
                }

                if (cb) {
                    return cb(rows);
                } else {
                    return rows;
                }
            },

            _flat: function(data, feedings) {
                //current no context support for flatTable, to be added
                var dataset = data,
                    ret = dataset.table(),
                    ctx = data.type == 'sap.viz.api.data.CrosstableDataset'?
                    ContextUtils.crossTableContext(data, feedings):ContextUtils.flatTableContext(data, feedings, true),
                    i, j, len, mLen, datumCtx;

                len = ret.length;
                if(!ctx || len !== ctx.length){
                    return null;
                }
                for(i = 0; i < len; i++){
                    datumCtx = {};
                    for(j = 0, mLen = ctx[i].length; j < mLen; j++){
                        datumCtx[ctx[i][j]._mea] = ctx[i][j];
                        delete ctx[i][j]._mea;
                    }
                    ret[i].context = (function(ctxs){
                                return function(measure){
                                    if (ctxs && ctxs[measure]) {
                                        //tis format align to lumira req
                                        return {ctx:[ctxs[measure]]};
                                    }
                                    return {ctx:[]};
                                };
                            })(datumCtx);
                }

                ret.meta = {
                    _dimensionSets: [dataset.dimensions()],
                    _measureSets: [dataset.measures()],

                    dimensions: function(i, j) {
                        if (arguments.length === 2) {
                            return this._dimensionSets[0][j];
                        }
                        return this._dimensionSets[0];
                    },

                    measures: function(i, j) {
                        if (arguments.length === 2) {
                            return this._measureSets[0][j];
                        }
                        return this._measureSets[0];
                    }
                };
                return ret;
            },

            _cross: function(data, feeds) {
                
                var ret = this._toFlattenTable(data, feeds);
                if (!ret) {
                    return null;
                }           
                return ret;
            },

            _getParser: function(data) {
                if (data && data.type) {
                    if (data.type === 'sap.viz.api.data.FlatTableDataset') {
                        return this._flat;
                    } else {
                        return this._cross;
                    }
                }
            },

            _parseMeta: function(meta) {
                if (!meta) {
                    return null;
                } else {
                    return {
                        _meta: {
                            measureSets: (function(measureSets) {
                                var tmp = [];
                                measureSets.forEach(function(ele, idx) {
                                    tmp[idx] = ele.map(function(d) {
                                        return d.measure;
                                    });
                                });
                                return tmp;
                            }(meta.measureSets)),
                            dimSets: (function(dimSets) {
                                var tmp = [];
                                dimSets.forEach(function(ele, idx) {
                                    tmp[idx] = ele.map(function(d) {
                                        return d.dimension;
                                    });
                                });
                                return tmp;
                            }(meta.dimSets))
                        },
                        measures: function(i, j) {
                            if (arguments.length === 0) {
                                var ret = [];
                                this._meta.measureSets.forEach(function(ms, idx) {
                                    ms.forEach(function(measure, idx) {
                                        ret.push(measure);
                                    });
                                });
                                return ret;
                            } else if (arguments.length === 1) {
                                if (!this._meta.measureSets[i]) {
                                    FunctionUtils.error(
                                            LangManager.getLogMessage('IDS_ERROR_NOT_FIND_MEASURE_GROUP'));    
                                }
                                return this._meta.measureSets[i];
                            } else {
                                return this._meta.measureSets[i][j];
                            }
                        },
                        dimensions: function(i, j) {
                            if (arguments.length === 0) {
                                var ret = [];
                                this._meta.dimSets.forEach(function(ds, idx) {
                                    ds.forEach(function(dim, idx) {
                                        ret.push(dim);
                                    });
                                });
                                return ret;
                            } else if (arguments.length === 1) {
                                if (!this._meta.dimSets[i]) {
                                    FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_DIMENSION_NOT_FOUND', i));
                                }
                                return this._meta.dimSets[i];
                            } else {
                                return this._meta.dimSets[i][j];
                            }
                        }
                    };
                }
            },
            /*
             * extract dimension sets from data
             * @param data [Crosstable Dataset] crosstable dataset
             * @returns array of dimension sets, and each dimension set
             * is an object of {dimension: "dimension name", data: [members]}.
             * e.g. [{dimension: "country", data: ["China", "US", ...]},
             * {dimension: "year", data: ["2010", "2011", ...]}, ...]
             */
            _extractDimSets: function(data) {
                var res = [];
                if (data && data.data) {
                    var analysisAxis = data.data().analysisAxis;
                    if (analysisAxis) {
                        analysisAxis.forEach(function(g) {
                            var resg = [];
                            g.data.forEach(function(d) {
                                var result = {data: []};                         
                                for (var prop in d.values) {
                                    if (d.values.hasOwnProperty(prop)) {
                                        result.data[prop] = d.values[prop];
                                    }
                                }
                                result.dimension = d.name;
                                resg.push(result);
                            });
                            res.push(resg);
                        });
                    }
                    return res;
                }
                return res;
            },

            /*
             * extract measure sets from data
             * @param data [Crosstable Dataset] crosstable dataset
             * @returns array of measures, and each measure is an object of
             * {measure: "measure name", data: [measure data]}.
             * for example, [[{measure: "income", data: [555, 666, 777, ...]},
             * {measure: "cost", data:[55, 66, 77, ...]}, ...], ...]
             */
            _extractMeasureSets: function(data, feedings) {
                var reses = [], 
                    measureValuesGroups, 
                    bindingMeasure = {};

                if(feedings){
                    feedings.forEach(function(f){
                        if(f.feed == "valueAxis"){
                            f.source.forEach(function(s){
                                bindingMeasure[s.index - 1] = true;
                            });                        
                        }
                    });
                }
                
                if (data && data.data) {
                    measureValuesGroups = data.data().measureValuesGroup;
                    if(measureValuesGroups){
                        measureValuesGroups.forEach(function(g, idx) {
                            var resg = [];
                            if(feedings && !bindingMeasure[idx]){
                                return;
                            }
                            g.data.forEach(function(d) {
                                var result = {};
                                result.data = [];
                                for (var prop in d.values) {
                                    if (d.values.hasOwnProperty(prop)) {
                                        result.data[prop] = d.values[prop];
                                    }
                                }
                                result.measure = d.name;
                                resg.push(result);
                            });
                            reses.push(resg);
                        });
                        return reses;
                    }                
                }
                return reses;
            },

            /*
             * convert crosstable data to flatten table data
             * @param data [Crosstable Dataset] crosstable dataset
             * @returns array of objects, and each object represents a row of data table:
             * [{"dimension name1" : value1, "dimension name2" : value2, "measure name1" : value3},
             * ....{"dimension name1" : valueN1, "dimension name2" : valueN2, "measure name1" : valueN3} ]
             *
             * This method returns an extra meta data in data.meta, which includes all dimension and measure sets.
             */
            _toFlattenTable: function(data, feedings) {
                var dimSets = this._extractDimSets(data),
                    measureSets = this._extractMeasureSets(data, feedings),
                    fdata = [], 
                    datum, measure0Data, measure, ctx, d, 
                    me = this;
                //measureValueGroup is necessary in crosstable dataset
                //please directly call _util.extractDimSets() to get dimension values 
                if (measureSets.length === 0) {
                    return null;
                }
                
                ctx = data.type == 'sap.viz.api.data.CrosstableDataset'?
                    ContextUtils.crossTableContext(data, feedings):ContextUtils.flatTableContext(data, feedings, true);

                fdata = this._toFlatJsonArray(measureSets, dimSets, ctx);    
                fdata.meta = this._parseMeta({
                    dimSets : dimSets,
                    measureSets : measureSets
                });      
                
                return fdata;
            },

            _toFlatJsonArray : function(measureSets, dimSets, ctx) {
                //convert data from ct to flat
                //TODO : if there is no measure, this logic will fail
                var fdata = [], me = this,
                    measure0Data, datumCtx, datum, i, j, m;

                measure0Data = measureSets[0][0].data;
                for ( i = 0; i < measure0Data.length; i++) {
                    for ( j = 0; j < measure0Data[i].length; j++) {
                        datum = {};
                        datumCtx = {};
                        dimSets.forEach(function(dimSet, idx) {
                            var counter = idx === 0 ? j : i;
                            for ( m = 0; m < dimSet.length; m++) {
                                datum[dimSet[m].dimension] = dimSet[m].data[counter];
                            }
                        });
                        measureSets.forEach(function(measureSet, idx) {
                            var measure;
                            for ( m = 0; m < measureSet.length; m++) {
                                measure = measureSet[m];
                                datum[measure.measure] = measure.data[i][j];
                                if(ctx){
                                    /**currently not support same measure name in different measureGroup*/
                                    datumCtx[measure.measure] = ctx[idx][m][i][j];
                                }
                            }
                        });
                        if(ctx){
                            datum.context = (function(ctxs){
                                return function(measure){
                                    if (ctxs && ctxs[measure]) {
                                        //tis format align to lumira req
                                        return {ctx:[ctxs[measure].path]};
                                    }
                                    return {ctx:[]};
                                };
                            })(datumCtx);
                        }
                        fdata.push(datum);
                    }
                }
                return fdata;
            }
        };

        return util.toTable.apply(util, arguments);
    };
    return processData;
});

define('sap/bi/framework/BundleLoader/ServicePlugin',[], function() {
    "use strict";

    /**
     * RequireJS plugin that loads services from the kernel.
     * Example usage: "service!sap.bi.myservice".
     */
    function ServicePlugin(kernel) {
        this._kernel = kernel;
    }

    ServicePlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ServicePlugin is loading '" + name + "'");
        }
        onload(this.getService(name));
    };

    ServicePlugin.prototype.getService = function(name) {
        //parse the name
        var cardinality;
        if (name[0] === "*") {
            cardinality = "multiple";
            name = name.slice(1);
            return this._kernel.getAllInstances(name);
        }
        else {
            cardinality = "single";
            return this._kernel.getInstance(name);
        }
    };

    ServicePlugin.prototype.getServiceForBundle = function(bundle, service) {
        return this.getService(service);
    };

    ServicePlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ServicePlugin;
});
define('sap/bi/framework/BundleLoader/ServiceMetadataPlugin',[], function() {
    "use strict";

    /**
     * RequireJS plugin that loads service metadata from the kernel.
     * Example usage: "serviceMetadata!sap.bi.myservice".
     */
    function ServiceMetadataPlugin(kernel) {
        this._kernel = kernel;
    }

    ServiceMetadataPlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ServiceMetadataPlugin is loading '" + name + "'");
        }
        onload(this.getServiceMetadata(name));
    };

    ServiceMetadataPlugin.prototype.getServiceMetadata = function(name) {
        // Component exported metadata should always exist as this bag contains required component attributes
        if (name[0] === "*") {
            name = name.slice(1);
            return this._kernel.getAll(name).map(function(component) {
                return component.exportedMetadata;
            });
        } else {
            var service = this._kernel.get(name);
            return service ? service.exportedMetadata : undefined;
        }
    };

    ServiceMetadataPlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ServiceMetadataPlugin;
});
define('sap/bi/framework/BundleLoader/ImportPlugin',[], function() {
    "use strict";

    /**
     * RequireJS plugin that loads imports from a given source bundle.
     * Example usage: "import!source.bundle.id:Some/Module".
     */
    function ImportPlugin(kernel) {
        this._kernel = kernel;
    }

    ImportPlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ImportPlugin is loading '" + name + "'");
        }

        var bundleLoaderHelpers = this._kernel.getInstance("bundleLoader.getHelpers");
        var nameComponents = name.split(":");
        nameComponents[1] = bundleLoaderHelpers.stripLeading(nameComponents[1], "/");

        Q(bundleLoaderHelpers.getBundlePromise(nameComponents[0])).then(function(sourceBundleMetadata) {

            if (!sourceBundleMetadata) {
                throw new Error("Error importing " + nameComponents[1] + " from non-existent bundle " + nameComponents[0]);
            }

            if (!sourceBundleMetadata.exports ||
                !(sourceBundleMetadata.exports.some(function(exported) {
                    return bundleLoaderHelpers.startsWith(nameComponents[1], exported);
                }))) {
                throw new Error("Attempting to import " + nameComponents[1] + " which is not exported by " + nameComponents[0]);
            }

            bundleLoaderHelpers.getRequireContext(nameComponents[0])([nameComponents[1]], onload, onload.error);
        }).fail(function(err) {
            onload.error(err);
        });
    };

    ImportPlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ImportPlugin;
});
/**
 * A requirejs CSS module.
 */
define('sap/bi/framework/BundleLoader/CssPlugin',[], function() {
    "use strict";
    
    function CssPlugin(resourceLoaderFunction, log) {
        this._resourceLoaderFunction = resourceLoaderFunction;
        this._log = log;
    }
    
    // Compatibility functions:

    // Gets the document head in a cross-browser manner  
    var getHead = function () {
        return document.head || document.getElementsByTagName("head")[0] || document.documentElement;
    };
    
    // Convert a url into a fully qualified url.
    var qualifyUrl = function(url) {
        if(/^http[s]?:\/\//.test(url)) {
            return url;
        } else {
            var a = document.createElement('a');
            a.href = url;
            return a.href;
        }
    };

    // Convert any relative urls within the css to absolute urls.
    var convertRelativeUrlsToAbsolute = function(log, absoluteCssUrl, css) {
        // The relative url's are all relative to the css file.  Strip the css file name
        // off of its absolute url to use as a base for building our new urls.
        // Base url should look like "http://machine:port/sap/bi/bundles/sap/bi/va/common/stylesheets/"
        var idx = absoluteCssUrl.lastIndexOf("/");
        var baseUrl = absoluteCssUrl.substring(0, idx + 1);

        // Matches something like: url('../images/foo.png')
        var URL_REGEX = /url ?\((\"|\')?([a-zA-Z0-9\.\/\-\_]*)(\"|\')?\)/gm;
        var result = css.replace(URL_REGEX, function(fullMatch, openQuote, relUrl, closeQuote, offset, fullString){
            if (relUrl && relUrl.length > 0) {
                // Should produce a full url like this:
                // "http://machine:port/sap/bi/bundles/sap/bi/va/common/stylesheets/../images/foo.png"
                log("Converting " + relUrl + " to " + (baseUrl + relUrl));
                return "url(" + baseUrl + relUrl + ")";
            }
        });
        return result;
    };

    //The RequireJS module methods
    CssPlugin.prototype.normalize = function(name, normalizer) {
        if (!/\.css$/.test(name)) {
            name = name + ".css";
        }

        return normalizer(name);
    };

    CssPlugin.prototype.load = function (name, req, load, config) {
        
        var cssUrl = (req.toUrl ? req.toUrl(name) : name);
        var originalUrl;
        if (this._resourceLoaderFunction) {
            // A resource loader function has been provided - see if it can load the content for this css url.
            var cssContent = this._resourceLoaderFunction(cssUrl);
            if(cssContent) {
                // We do have content for the css!  Make sure it doesn't have any relative urls as they will be broken.
                var absoluteCssUrl = qualifyUrl(cssUrl);
                cssContent = convertRelativeUrlsToAbsolute(this._log, absoluteCssUrl, cssContent);
                
                // Add source url to help with debugging
                cssContent += "\n/*# sourceURL="+ absoluteCssUrl + " */";
               
                // Create an object url for it so it can be linked into
                // the html doc just like it was a remote resource.
                this._log("CssPlugin.load() returning cached content for url: " + cssUrl);
                originalUrl = cssUrl;
                var URLFactory = window.URL || window.webkitURL;
                var cssBlob = new Blob([cssContent], {type: 'text/css'});
                cssUrl = URLFactory.createObjectURL(cssBlob);
            } else {
                this._log("CssPlugin.load() loading from network for url: " + cssUrl);
            }
        }
        
        var link = document.createElement("link");
        
        link.type = "text/css";
        link.rel = "stylesheet";
        link.href = cssUrl;
        
        if (originalUrl) {
            link.setAttribute("bundle_cache_src", originalUrl);
        }

        link.onload = function(e) {
            load(this.sheet);
            this.onerror = this.onload = null;
        };
        link.onerror = function(e) {
            load.error(new Error("Failed to load " + this.href));
            this.onerror = this.onload = null;
        };

        getHead().appendChild(link);

        if (window.navigator.userAgent.indexOf("PhantomJS") !== -1) {
            /*
             * PhantomJS (the headless browser we use for unit testing) is based on an old version of
             * Webkit that doesn't fire load/error events on stylesheet links. So we simulate them by
             * polling the document.styleSheets collections (which is not updated until the stylsheet
             * finishes loading).
             */
            
            var href = link.href;
            var intervalId = window.setInterval(function() {
                var stylesheets = Array.prototype.slice.call(document.styleSheets); //convert to proper array
                var matchingStylesheets = stylesheets.filter(function(styleSheet) {
                    return styleSheet.href === href;
                });
                
                if (matchingStylesheets.length > 0) {
                    window.clearInterval(intervalId);
                    link.sheet = matchingStylesheets[0];
                    if (link.onload) {
                        link.onload();
                    }
                }
            }, 10);
        }
    };
    
    CssPlugin.prototype.pluginBuilder = "cssBuilder";
        
    return CssPlugin;
});

/*
 * Override the default XMLHttpRequest object so that we can intercept outbound calls
 * going through it and try to satisfy them with resources loaded in some other way (like from RequireJS).
 */
define('sap/bi/framework/BundleLoader/XHRInterceptor',['require'],function(require) {
    "use strict";

    function createInterceptor(resourceLoaderFunction, originalXmlHttpRequestConstructor, log) {

        function qualifyURL(url) {
            if(/^http[s]?:\/\//.test(url)) {
                return url;
            } else {
                var a = document.createElement('a');
                a.href = url;
                var origin = window.location.origin ? window.location.origin : (window.location.protocol + "//" + window.location.host);
                var absoluteHref = a.href.slice(origin.length);
                return absoluteHref;
            }
        }

        var XMLHttpRequest = function() {
            this.originalXHRConstructor = originalXmlHttpRequestConstructor;
            this.originalXHR = new this.originalXHRConstructor();
            var myXHR = this;
            this.originalXHR.onreadystatechange = function(){myXHR.onreadystatechangefunction();};
            return this;
        };

        XMLHttpRequest.prototype.isXHRInterceptor = true;

        XMLHttpRequest.prototype.getOriginalXmlHttpRequestConstructor = function () {
            return this.originalXHRConstructor;
        };

        XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
            this.url = qualifyURL(url);
            return this.originalXHR.open(method, url, async, user, password); //send it on
        };

        XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
            this.originalXHR.setRequestHeader(header, value);
        };

        XMLHttpRequest.prototype.send = function(postBody) {

            var contentForUrl = this.url && resourceLoaderFunction(this.url);

            if(contentForUrl !== undefined && contentForUrl !== null) {
                log("XHRInterceptor.send() returning cached content for url: " + this.url);
                this.wasIntercepted = true;

                this.response = contentForUrl;
                this.responseText = this.response;
                this.readyState = 4;
                this.responseXML = null;
                this.status = 200;
                this.statusText = "OK";

                if(this.onreadystatechange) {
                    this.onreadystatechange();
                }

                return;
            }

            try {
                log("XHRInterceptor.send() using original xhr for url: " + this.url);
                return this.originalXHR.send(postBody);
            } catch(e) {
// TODO - double check that this is still a problem.  Maybe I can get rid of this catch block?
                // The default XHR behaviour seemed to be to throw an error and then fire the readyStateChangedEvent.
                // This seemed to break with the interceptor so try to fix it by manually firing
                // the event here and then re-throw the error.
                this.onreadystatechangefunction();
                throw e;
            }

        };

        // overrideMimeType is not supported in IE
        if ((new originalXmlHttpRequestConstructor()).overrideMimeType) {
            XMLHttpRequest.prototype.overrideMimeType = function() {
                return this.originalXHR.overrideMimeType.call(this.originalXHR, arguments);
            };
        }

        XMLHttpRequest.prototype.getAllResponseHeaders = function() {
            if(this.wasIntercepted) {
                if(this.url.match(/\.js$/)) {
                    return "Content-Type: application/x-javascript";
                } else {
                    return "";
                }
            } else {
                return this.originalXHR.getAllResponseHeaders.call(this.originalXHR, arguments);
            }

        };

        XMLHttpRequest.prototype.getResponseHeader = function() {
            return this.originalXHR.getResponseHeader.call(this.originalXHR, arguments);
        };

        XMLHttpRequest.prototype.onreadystatechangefunction = function() {
            this.readyState = this.originalXHR.readyState;
            if (this.readyState === 4) {
                // The request has completed so we should have valid status and response values.
                this.responseText = this.originalXHR.responseText;
                this.responseXML = this.originalXHR.responseXML;
                this.status = this.originalXHR.status;
                this.statusText = this.originalXHR.statusText;
            } else {
                this.responseText = undefined;
                this.responseXML = undefined;
                this.status = undefined;
                this.statusText = undefined;
            }

            if(this.onreadystatechange) {
                this.onreadystatechange();
            }
        };

        return XMLHttpRequest;
    }

    function uninstallInterceptor() {
        var origXHR = new window.XMLHttpRequest();
        if (origXHR && origXHR.isXHRInterceptor) {
            // The default XmlHttpRequest has already been overridden by an interceptor.  We need to remove that interceptor instance
            // and restore the default XHR.
            window.XMLHttpRequest = origXHR.getOriginalXmlHttpRequestConstructor();
        }
    }

    function installInterceptor(resourceLoaderFunction, log) {
        // Try to uninstall the interceptor to remove any copies that might have previously been installed.
        uninstallInterceptor();

        log("Installing XHRInterceptor...");
        var interceptor = createInterceptor(resourceLoaderFunction, window.XMLHttpRequest, log);
        window.XMLHttpRequest = interceptor;
    }


    return {
        installInterceptor: installInterceptor,
        uninstallInterceptor: uninstallInterceptor
    };
});
/**
 * This bundle loader uses promises extensively. The overall workflow is described below where each step is 'blocked' waiting on the
 * promise provided in the previous step:
 * - Loop through the config to determine the root bundles to load. For each bundle
 *     - Construct bundle-specific require context
 *     - Attempt to load a bundle
 *         - Resolve bundle - involves loading bundle manifest with bundle-specific require to read contents
 *         - Load all the dependent bundles (a promise which blocks loading of the current bundle)
 *           ** this step (utilizing loadAfter property) is to be deprecated **
 *         - For each component in bundle, construct component factory and place into data structure
 *           that maps service ID -> factories of components implementing service
 * - Once all bundles are loaded the components need to be activated (registered with the kernel)
 *     - For each service
 *           - For each component factory for service
 *               - Activate dependent providers
 *               - Activate component by registering it's factory with kernel
 *                 (Places it into kernel datastructure that maps from service ID -> component)
 *                 If the component is provided by a 'module', its factory is constructed via
 *                 loading the module's file using requireJS.
 * - Finally call the completion callback provided
 *
 * After all this, consumers of kernel services can utilize the service plugin(s) to obtain instances
 * of component(s) providing a particular service.
 */
define('sap/bi/framework/BundleLoader/BundleLoader',["require", "./ServicePlugin", "./ServiceMetadataPlugin", "./ImportPlugin", "./CssPlugin", "./XHRInterceptor"],
function(parentRequire, ServicePlugin, ServiceMetadataPlugin, ImportPlugin, CssPlugin, XHRInterceptor) {
    "use strict";

    var log = function(msg) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger(msg);
        }
    };

    var notify = function(eventType, event) {
        var listeners = this._kernel.getAllInstances("core.listener");
        if (listeners) {
            listeners.forEach( function(listener) {
               listener(eventType, event);
            });
        }
    };

    var convertBundleIdToPath = function(bundleId) {
        return bundleId.replace(/\./g, "/");
    };

    var convertBundleIdToModuleId = function(bundleId) {
        var lastDot = bundleId.lastIndexOf(".");
        var bundleClass = bundleId.substr(lastDot + 1, bundleId.length);
        return bundleClass + "-bundle";
    };

    var processUI5Metadata = function(ui5Metadata, bundleId, bundleFullUrl) {
        // Helper to detect duplicate registrations and produce warning
        var registerUI5ModulePath = function(ui5Module, path) {
            if (this._registeredUI5ModulePaths[ui5Module]) {
                log.apply(this, ["Warning: UI5 module '" + ui5Module + "' bound to path '" + this._registeredUI5ModulePaths[ui5Module] +
                                 "' is being replaced by '" + path + "' by bundle '" + bundleId + "'"]);
            }
            window.$.sap.registerModulePath(ui5Module, path);
        }.bind(this);
        // Register UI5 module paths
        if (window.$ && window.$.sap && window.$.sap.registerModulePath) {
            // Default path to set for every bundle
            registerUI5ModulePath(bundleId, bundleFullUrl);
            // User-specified mappings
            if (ui5Metadata && ui5Metadata.moduleMapping) {
                var mappings = Object.keys(ui5Metadata.moduleMapping);
                mappings.forEach(function(key) {
                    registerUI5ModulePath(key, bundleFullUrl + "/" + ui5Metadata.moduleMapping[key]);
                });
            }
        }
    };

    /**
     * Extend a given base require config with settings from a given ext require config.
     * Settings from ext will only be applied to base if they don't already exist, OR overwirte flag is true.
     * Note: Use of user-defined require config is discouraged. There are likely ways to get around
     *       any problems you have without having to specify require config settings.
     *       If you need to specify such settings, your bundle isn't portable (and it should be),
     *       as it is now tied to the execution environment.
     */
    var extendRequireConfig = function(base, ext, overwrite) {
        if (!ext) {
            ext = this._requireConfig;
        }
        for (var key in ext) {
            if (ext.hasOwnProperty(key)) {
                if (!base[key] || overwrite === true) {
                    base[key] = ext[key];
                }
            }
        }
        return base;
    };

    var startsWith = function(str, prefix) {
        return str.indexOf(prefix) === 0;
    };

    var endsWith = function(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };

    var stripLeading = function(str, prefix) {
        if (startsWith(str, prefix)) {
            str = str.substring(prefix.length);
        }
        return str;
    };

    var stripTrailing = function(str, suffix) {
        if (endsWith(str, suffix)) {
            str = str.substring(0, str.length - suffix.length);
        }
        return str;
    };

    /**
     * It's not clear what the best way to determine the base Url currently being used by the application.
     * However, we need that URL so we can use the same base when creating a new RequireJS context for each
     * bundle implementation being loaded. This function encapsulates the magic by which we determine the baseUrl.
     *
     * Note: only reason bundle ID is needed here is due to the potential usage of requireJS 'paths',
     *       which need the full path to the bundle root to know when to re-direct.
     */
    var getRequireJSBaseUrl = function(bundleId) {
        var url = parentRequire.toUrl("").split("?")[0];
        if (bundleId) {
            var dummyFileName = convertBundleIdToPath(bundleId) + "/foo";
            url = parentRequire.toUrl(dummyFileName).split("?")[0];
            url = stripTrailing(url, ".js");
            url = stripTrailing(url, dummyFileName);
        }
        return stripTrailing(url, "/");
    };

    /**
    * Given a bundle's require context, obtain a url (if specified) based on the bundle's root URL.
    */
    var getBundleUrl = function(requireContext, url) {
        url = url || "";
        var bundleBaseUrl = requireContext.toUrl(url).split("?")[0];
        return stripTrailing(bundleBaseUrl, "/");
    };

    /**
    * Given a bundle's require context, attempt to resolve the bundle ID.
    */
    var getBundleId = function(requireContext) {
        return this._bundlePaths[getBundleUrl(requireContext)];
    };

    /**
    * Given a bundle ID, return its promise.
    */
    var getBundlePromise = function(bundleId) {
        return this._bundles[bundleId];
    };

    /**
    * Given a bundle ID, obtain the require context.
    */
    var getRequireContext = function(bundleId) {
        return this._bundleRequires[bundleId];
    };

    /**
     * Gets full URL of a URL that is relative to bundle base.
     */
    var getFullUrl = function(bundleBaseUrl, urlRelativeToBundleBase, bundleId) {
        var fullUrl = getRequireJSBaseUrl(bundleId);
        fullUrl += (bundleBaseUrl ? "/" + bundleBaseUrl : "");
        fullUrl += (urlRelativeToBundleBase ? "/" + urlRelativeToBundleBase : "");
        return fullUrl;
    };

    /**
    * Clean-up bundle loader state that should not persist across sessions of bundle loading.
    * This includes component factories. Without cleaning this, subsequent bundle loading sessions will hit the
    * already-processed component factories for a given service and not bother loading any new components implementing said service.
    */
    var cleanupState = function() {
        this._componentFactories = {};
    };

    /**
     * Create a resource loader function that can be used by the XHRInterceptor to load resources from requirejs 
     * rather than calling out over the network.  This assumes that the resource was defined as a module in the 
     * bundle.js file which has already been loaded and defined by requirejs.
     */
    var createResourceLoaderFunction = function(bundleLoader) {
        var resourceLoaderFunction = function(url) {
            // Figure out if this url points into one of the bundles we have loaded.
            // Some example values to try to help explain what is going on...
            // incoming url="/C:/p4/dt_hanabi/src/BIFramework/test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor/resources/strings_en.properties"
            // bundleLoader._config.baseurl="test/sap/bi/framework/BundleLoader/bundles"
            // bundleLoader._bundlePaths={"../../../../test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor":"XHRInterceptor"}
            
            // If there is a base url (as in the examples above) we need to adjust the url to account for the requirejs configurations
            // both inside and outside the bundleloader.
            var currPath = url;
            if (bundleLoader._config.baseUrl) {
                var matchIdx = currPath.indexOf(bundleLoader._config.baseUrl);
                if (matchIdx === -1) {
                    // The url is aimed somewhere else so it must not be a bundle resource
                    return undefined;
                }
                
                if (matchIdx !== 0) {
                    // There is something in the url before the baseUrl - strip it off and build our own requirejs url.
                    currPath = url.substring(matchIdx);
                    currPath = getFullUrl(currPath);
                }
            }
            
            // At this point we should have something that looks like "../../../../test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor/resources/strings_en.properties"
            // Go thru the bundlePaths to find the one that matches this path - specifically we want the LONGEST match.
            var matchingBundlePath = "";
            Object.keys(bundleLoader._bundlePaths).forEach(function(existingPath){
                if (currPath.indexOf(existingPath) === 0) {
                    // We found a match - see if it is longer than any previous matches.
                    if (existingPath.length > matchingBundlePath.length) {
                        matchingBundlePath = existingPath;
                    }
                }
            });
            
            if (matchingBundlePath.length > 0) {
                // It looks like the url is pointing into one of our bundles.  Get the requirejs context and see if the module exists.
                var matchingBundleId = bundleLoader._bundlePaths[matchingBundlePath];
                var matchingBundleRequireContextId = bundleLoader._id + "_" + matchingBundleId;
                var matchingBundleRequireContext = window.requirejs.s.contexts[matchingBundleRequireContextId];
                if (matchingBundleRequireContext) {
                    // Strip the original url to just the parts internal to the bundle and make sure it is
                    // a module that requirejs knows about.
                    var bundlePathPart = convertBundleIdToPath(matchingBundleId);
                    var bundlePathIdx = url.indexOf(bundlePathPart);
                    if (bundlePathIdx !== -1) {
                        var bundleInternalPath = "resource:" + url.substring(bundlePathIdx + bundlePathPart.length + 1); // +1 to get rid of the slash after the bundle id.

                        // Remove any url parameters if they exist.
                        var urlParamIdx = bundleInternalPath.indexOf("?");
                        if (urlParamIdx > 0) {
                            bundleInternalPath = bundleInternalPath.substring(0, urlParamIdx);
                        }
                        
                        // Check if requirejs knows about this url and if so, get the contents.
                        if (matchingBundleRequireContext.require.specified(bundleInternalPath)) {
                            // Trick the requirejs context into being synch rather than asynch and get the resource's module.
                            var origNextTick = matchingBundleRequireContext.nextTick;
                            var retVal;
                            try {
                                matchingBundleRequireContext.nextTick = function(fn) { fn(); };
                                matchingBundleRequireContext.require([bundleInternalPath], function(content){
                                    retVal = content;
                                });
                            } finally {
                                matchingBundleRequireContext.nextTick = origNextTick;
                            }
                            
                            if (retVal) {
                                return retVal;
                            }
                        }
                    }
                }
            }
            return undefined;
        };
        return resourceLoaderFunction;
    };
    
    var initializeRequirePlugins = function (bundleLoader) {
        var result = {};
        
        // Register a "service!" requirejs plugin for bundle loader instance
        var servicePlugin = new ServicePlugin(bundleLoader._kernel);
        define("service", servicePlugin);
        result.servicePlugin = servicePlugin;

        // Register a "serviceMetadata!" requirejs plugin for bundle loader instance
        var serviceMetadataPlugin = new ServiceMetadataPlugin(bundleLoader._kernel);
        define("serviceMetadata", serviceMetadataPlugin);
        result.serviceMetadataPlugin = serviceMetadataPlugin;

        // Register a "import!" requirejs plugin for bundle loader instance
        var importPlugin = new ImportPlugin(bundleLoader._kernel);
        define("import", importPlugin);
        result.importPlugin = importPlugin;

        // Register a "css!" requirejs plugin for bundle loader instance
        var resourceLoader;
        if (bundleLoader._config.enableXHRInterceptor) {
            resourceLoader = createResourceLoaderFunction(bundleLoader);
        }

        var logger = bundleLoader._kernel.getInstance("core.logger");
        var cssPlugin = new CssPlugin(resourceLoader, logger);
        define("css", cssPlugin);
        result.cssPlugin = cssPlugin;
        
        return result;
    };


    /**
     *  Constructor for the Bundle Loader
     */
    function BundleLoader(kernel, config) {
        var requireConfig = config.requireConfig || {};
        requireConfig.context = requireConfig.context || (new Date()).getTime();
        this._id = requireConfig.context;
        this._kernel = kernel;
        this._config = config;
        this._requireConfig = requireConfig;

        config.repoPath = config.repoPath || "";
        config.repoPath = startsWith(config.repoPath, "http") ? config.repoPath :
                          getFullUrl(config.baseUrl, config.repoPath);

        // Declare new require context for this instance of bundle loader
        this._require = require.config(extendRequireConfig.apply(this, [{
            baseUrl: getFullUrl(config.baseUrl)
        }]));

        // Immediately associate loader plugins to the bundle loader's require context
        var requirePlugins = initializeRequirePlugins(this);
        this._require([]);

        window.sap = window.sap || {};
        window.sap.bi = window.sap.bi || {};
        window.sap.bi.framework = window.sap.bi.framework || {};

        // Global to store bundle IDs that have been loaded into require framework.
        // Used by bundle loader afterwards to register bundles with kernel.
        window.sap.bi.framework.contexts = window.sap.bi.framework.contexts || {};

        // Register "service!" and "serviceMetadata!" as a global variables for access outside of AMD code
        // TODO: Using these global calls will fail in the case where multiple BundleLoader instances
        // exist as they will overwrite each other. These need to be deprecated and removed.
        window.sap.bi.framework.getService = window.sap.bi.framework.getService || function(bundleId, serviceId) {
            return requirePlugins.servicePlugin.getServiceForBundle(bundleId, serviceId);
        };
        window.sap.bi.framework.getServiceMetadata = window.sap.bi.framework.getServiceMetadata || function(serviceId) {
            return requirePlugins.serviceMetadataPlugin.getServiceMetadata(serviceId);
        };
        // This function is really here to make it easier to find the metadata json inside bundle.js file, especially when minified
        window.sap.bi.framework.declareBundle = window.sap.bi.framework.declareBundle || function(bundle) {
            // Just return the bundle without doing anything.
            return bundle;
        };

        // Define provided capabilities
        window.sap.bi.framework.capabilities = window.sap.bi.framework.capabilities || {};
        window.sap.bi.framework.capabilities.bundleLoading = window.sap.bi.framework.capabilities.bundleLoading || {};
        window.sap.bi.framework.capabilities.bundleLoading.hostBundle = true;

        // This holds the bundles (or promises of bundles) that have been loaded. Used to only load a bundle once.
        // This is a map from bundleID to bundle (string to bundle object)
        this._bundles = {};

        // This holds the component factories (or promises for them) that have been loaded. Used to resolve dependencies
        // before the parent factory.
        // This is a map from 'provide' id to array of component factories implementing the component.  If there are
        // multiple implementations they are ordered in reverse dependency order (activate first, then second, ...)
        this._componentFactories = {};

        // This holds a new RequireJS instance (context) for each bundle being loaded. By loading each bundle in a
        // separate context we can ensure there are no name collisions and potentially verify that bundles are not
        // attempting to load files from other bundles.
        this._bundleRequires = {};

        // Hash to track UI5 module paths that have been registered. Used to detect duplicate registrations.
        this._registeredUI5ModulePaths = {};

        // map a bundle's base path URL to the bundle's ID, to make it easier to reverse-lookup an ID from the path
        this._bundlePaths = {};
        
        // Check the config property to see if the XHRInterceptor should be enabled.
        if (this._config.enableXHRInterceptor) {
            var resourceLoaderFunction = createResourceLoaderFunction(this);
            XHRInterceptor.installInterceptor(resourceLoaderFunction, this._kernel.getInstance("core.logger"));
        }
    }
    
    // This function is used by a BundleLoader service to uninstall the interceptor for unit test cleanup.
    // Although potentially it could be used by other fwk clients.
    BundleLoader.prototype._uninstallInterceptor = function() {
        XHRInterceptor.uninstallInterceptor();
    };

    BundleLoader.prototype._loadBundles = function(bundleIds, onCompleteCallback, onErrorCallback) {
        // HACK: Clearing the component factories is a hack to enable us to reuse the bundle loader.  Without
        // it services for which an implementation already exists wil lnot be loaded (ie. new extensions to
        // an extension point won't load if one already exists).
        // We should do something more complex, like create a new BundleLoader entirely.  This method
        // is not thread safe (having 2 loads simultaneously will break!
        this._componentFactories = {};

        var bundleBaseUrl = this._config.baseUrl; // This could be undefined if no base is specified

        var getBundleContextPromises = function() {
            var bundleContextPromises = [];
            bundleIds.forEach(function(bundleId) {
                bundleContextPromises.push(this._createBundleContext(bundleId, bundleBaseUrl));
            }.bind(this));
            return Q.all(bundleContextPromises);
        }.bind(this);

        var getBundleContentPromises = function() {
            var bundleContentPromises = [];
            bundleIds.forEach(function(bundleId) {
                bundleContentPromises.push(this._loadBundle(bundleId, bundleBaseUrl));
            }.bind(this));
            return Q.all(bundleContentPromises);
        }.bind(this);

        var callback = function(promiseResult) {
            cleanupState.apply(this);
            onCompleteCallback();
        };

        getBundleContextPromises()
        .then(getBundleContentPromises.bind(this))
        .then(this._activateAllProviders.bind(this, bundleBaseUrl))
        .then(callback.bind(this))
        .fail(onErrorCallback)
        .done();
    };

    BundleLoader.prototype._createBundleContext = function(bundleId, bundleBaseUrl) {

        // If the bundle context is already created then return the promise that represents it
        if (this._bundleRequires[bundleId]) {
            log.apply(this, ["Shortcut creating context: " + bundleId]);
            return this._bundleRequires[bundleId];
        }

        log.apply(this, ["Creating context: " + bundleId]);

        var deferred = Q.defer();

        var fullBaseUrl = getFullUrl(bundleBaseUrl, convertBundleIdToPath(bundleId), bundleId);
        this._bundlePaths[fullBaseUrl] = bundleId;

        // Load the bundle in a new RequireJS context thereby creating a level of isolation for each bundle
        // so that for example, identically named modules in two bundles do not conflict.
        // The new context is uniquely identified by this bundle loader's ID plus this bundle's ID.
        var bundleRequire = require.config(extendRequireConfig.apply(this, [{
            baseUrl: fullBaseUrl,
            context: this._id + "_" + bundleId
        }]));

        initializeRequirePlugins(this);
        
        // Immediately associate loader plugins to the bundle's require context
        bundleRequire([], function() {
            // Hold onto the require context as it will be used to load implementation files for this bundle later.
            this._bundleRequires[bundleId] = bundleRequire;
            log.apply(this, ["Context created: " + bundleId]);
            deferred.resolve();
        }.bind(this), function(err) {
            log.apply(this, ["Error creating context: " + bundleId]);
            deferred.reject();
        });

        return deferred.promise;
    };

    BundleLoader.prototype._resolveBundle = function(bundleId) {

        // Load bundle contents
        var deferred = Q.defer();
        var currentBundleRequire = this._bundleRequires[bundleId];
        var currentModuleId = convertBundleIdToModuleId(bundleId);

        var boundLogger = log.bind(this);
        currentBundleRequire([currentModuleId],
           function(result) {
            deferred.resolve(result);
        }, function(result) {
            // The bundle could not be loaded.  Log an error, but resolve the promise anyways so that loading will continue
            // Failure to load a bundle should be non-fatal (only the missing bundle is skipped)
            boundLogger("Failed to load bundle with id: " + bundleId);
            deferred.resolve(undefined);
        });
        return deferred.promise;
    };

    BundleLoader.prototype._parseBundle = function(bundle, bundleBaseUrl) {
        // Hold onto the component factories so they can be resolved once all bundles are known
        var previouslyDeclaredServiceIds = [];

        // Url of bundle relative to host root
        var bundleFullUrl = getFullUrl(bundleBaseUrl, convertBundleIdToPath(bundle.id), bundle.id);

        // The framework property is reserved and bundle developers should not provide it
        var framework = {
             bundleId: bundle.id,
             bundleUrl: bundleFullUrl,
             bundleVersion: bundle.version
        };

        // Process any UI5-specific metadata in bundle manifest
        processUI5Metadata.apply(this, [bundle.ui5, bundle.id, bundleFullUrl]);

        var that = this;
        (bundle.components || []).forEach(function(component) {
            // Add framework metadata into component (will be exposed to consumers with call to get component metadata)
            component.framework = framework;
            component.bundleId = bundle.id;

            // If there is an explicit set of included dependencies declared for the component then use it, otherwise assume that this
            // component could have access to any of the dependencies declared for the bundle.  Additionally, components have
            // an implicit dependency on any component declared previously in the bundle (unless explicitly set for the component)
            component.dependencies = component.includedDependencies;
            if (!component.dependencies) {
                component.dependencies = bundle.dependencies || [];
                component.dependencies = component.dependencies.concat(previouslyDeclaredServiceIds);
            }
            previouslyDeclaredServiceIds.push(component.provide);

            // If the component lacks an ID, create a default ID using the bundle name and component provided
            component.id = component.id || bundle.id + "." + component.provide;

            that._componentFactories[component.provide] = that._componentFactories[component.provide] || [];
            that._componentFactories[component.provide].push(component);
        });

        // This allows bundles to cause code to be executed after they are loaded
        if(typeof bundle.onLoaded === "function"){
            bundle.onLoaded.apply(this);
        }
    };

    BundleLoader.prototype._loadBundle = function(bundleId, bundleBaseUrl) {
        // If the bundle is already loading then return the promise that represents it
        if (this._bundles[bundleId]) {
            log.apply(this, ["Shortcut loading: " + bundleId]);
            return this._bundles[bundleId];
        }

        log.apply(this, ["Loading: " + bundleId]);
        notify.call(this, "loadBundle", { bundleId: bundleId });

        var that = this;
        var promise = this._resolveBundle(bundleId);
        promise = promise.then(function(bundle) {
            // The bundle may not have resolved.  We don't want to abort loading entirely so the promise is resolved with 'undefined'
            // rather than rejected.  Handle the undefined bundle here, again without failure (error message was logged earlier in promise stack)
            if (!bundle) {
                return;
            }
            
            var depPromise = that._loadDependentBundles(bundle, bundleBaseUrl);

            if (bundle.imports) {
                var mapConfig = {"*": {}};
                bundle.imports.forEach(function(importMetadata) {
                    mapConfig["*"][importMetadata.localPath] = "import!" + importMetadata.bundle + ":" + (importMetadata.remotePath ? importMetadata.remotePath : "");
                });
                require.config({
                    context: that._id + "_" + bundle.id,
                    map: mapConfig
                });
            }

            // If this bundle has a host bundle then we need to reload this bundle in the correct context.
            var reloadedPromise;
            if (bundle.hostBundle) {
                // Clear the existing bundle being loaded, update the context, and reload
                // The updated context will use the 'context' of the host bundle and the baseUrl of the extension bundle
                that._bundles[bundleId] = "ReloadingInHost";

                // CVOM Hack
                var paths = {};
                if (bundleId === "sap.viz.geo.all") {
                    paths["all-bundle"] = "../../../sap/viz/geo/all/all-bundle";
                    paths["sap.viz.geo.all"] = "../../../sap/viz/geo/all/sap.viz.geo.all";
                    paths["resources/libs/jslinq"] = "../../../sap/viz/geo/all/resources/libs/jslinq";
                    paths["resources/libs/dojo.has"] = "../../../sap/viz/geo/all/resources/libs/dojo.has";
                    paths["resources/libs/dojo.i18n"] = "../../../sap/viz/geo/all/resources/libs/dojo.i18n";
                    paths["resources/styles/esri"] = "../../../sap/viz/geo/all/resources/styles/esri";
                    paths["resources/styles/map"] = "../../../sap/viz/geo/all/resources/styles/map";
                }

                var hostBundleRequire = require.config(extendRequireConfig.apply(that, [{
                    context: that._id + "_" + bundle.hostBundle,
                    paths: paths
                }]));
                that._bundleRequires[bundleId] = hostBundleRequire;
                reloadedPromise = that._resolveBundle(bundleId);
                reloadedPromise.then(function(bundle) {
                    that._parseBundle(bundle, bundleBaseUrl);
                });
                return reloadedPromise.then(function() {
                    return bundle;
                });
            } else {
                depPromise.then(function(bundleDeps) {
                    that._parseBundle(bundle, bundleBaseUrl);
                });
                return depPromise.then(function() {
                    return bundle;
                });
            }
        });
        this._bundles[bundleId] = promise;
        return promise;
    };

    /**
     * Bundle dependencies force the ordering of bundles.  This is dangerous as it leads to performance problems
     * due to the serial nature in which the bundles must be processed.
     */
    BundleLoader.prototype._loadDependentBundles = function(bundle, bundleBaseUrl) {
        var allDepPromises = [];

        notify.call(this, "loadDependentBundles", { bundleId: bundle.id, bundle: bundle });

        // The 'loadAfter' property introduces a bundle dependency
        var dependentBundles = (bundle && bundle.loadAfter) || [];
        var that = this;
        var depPromise;
        for (var i = 0; i < dependentBundles.length; i++) {
            var depBundleId = dependentBundles[i];
            log.apply(that, ["Loading dep '" + depBundleId + "' for '" + bundle.id + "'"]);
            if (!this._bundleRequires[depBundleId]) {
                var bundleCtxtPromise = this._createBundleContext(depBundleId, bundleBaseUrl);
                depPromise = bundleCtxtPromise.then(that._loadBundle.bind(this, depBundleId));
            }
            else {
                depPromise = that._loadBundle(depBundleId);
            }
            allDepPromises.push(depPromise);
        }

        // The 'hostBundle' indirectly introduces a bundle dependency as the host bundle must be loaded first
        // The specific workflow is when the host is minified.  The host bundle must be loaded as a single request
        // for the minified bundle, not as individual files as would be referenced by the 'extension' bundle.
        if (bundle.hostBundle) {
            // Check that the hostBundle is one of the bundles the loader knows about.  It's an error if the host doesn't exist.
            if (!that._bundleRequires[bundle.hostBundle]) {
                throw "Bundle '" + bundle.id + "' specified an invalid hostBundle of '" + bundle.hostBundle + "'";
            }

            log.apply(that, ["Loading host bundle '" + bundle.hostBundle + "' for '" + bundle.id + "'"]);
            depPromise = that._loadBundle(bundle.hostBundle);
            allDepPromises.push(depPromise);
        }

        return Q.all(allDepPromises);
    };

    var GOVERNATOR_PROVIDER_NAME = "sap.bi.gdd.governator";
    BundleLoader.prototype._activateAllProviders = function(bundleBaseUrl) {
        var govProviderPromise = (this._componentFactories[GOVERNATOR_PROVIDER_NAME] !== undefined)
                               ? this._activateProvider(GOVERNATOR_PROVIDER_NAME, bundleBaseUrl)
                               : undefined;

        // activate governator provider first, so that we can use it to govern activation of other components
        var that = this;
        return Q(govProviderPromise).then(function() {
            var providerPromises = [];
            for (var provideId in that._componentFactories) {
                if (that._componentFactories.hasOwnProperty(provideId) && provideId !== GOVERNATOR_PROVIDER_NAME) {
                    providerPromises.push(that._activateProvider(provideId, bundleBaseUrl));
                }
            }

            return Q.all(providerPromises);
        });
    };


    BundleLoader.prototype._activateProvider = function(provideId, bundleBaseUrl) {
        // Strip off the leading '*' used to indicate dependency on all implementations rather than last implementation
        if (provideId[0] === "*") {
            provideId = provideId.slice(1);
        }

        // If there are no providers (this is a valid case that occurs when a dependency is expressed but no
        // implementation of the dependency is present in the current deployment) then return
        if (!this._componentFactories[provideId]) {
            return;
        }

        // If the provider has already been resolved then return
        if (this._componentFactories[provideId].activatedProviders) {
            return this._componentFactories[provideId].activatedProviders;
        }

        // Should we add a check for infinite loops?
        if (this._componentFactories[provideId].activateInProgress) {
            throw "Infinity and beyond!";
        }
        this._componentFactories[provideId].activateInProgress = true;

        // Ensure all the dependencies have been resolved
        var activatedDeps = [];
        var that = this;
        var components = this._componentFactories[provideId];
        // Loop over components that provide service
        components.forEach(function(component) {
            (component.dependencies || []).forEach(function(dep) {
                // Components can depend on 'themselves' which just means that the previously provided implementation
                // must be evaluated before this one.  In this case the components are activated in the order they
                // exist in the _componentFactories array and there is no need to recurse (which would lead to an infinite loop)
                if (dep !== provideId) {
                    activatedDeps.push(that._activateProvider(dep, bundleBaseUrl));
                }
            });
        });

        // Once the dependencies have been activated, activate this factory
        var providers = Q.all(activatedDeps).then(function() {
            // Components need to be activated in order to preserve dependencies in the ordering
            var activationPromise;
            components.map(function(component) {
                if (activationPromise) {
                    activationPromise = activationPromise.then(function() {
                        return that._activateComponent(component, bundleBaseUrl);
                    });
                } else {
                    activationPromise = that._activateComponent(component, bundleBaseUrl);
                }
            });
            return activationPromise;
        });
        this._componentFactories[provideId].activatedProviders = providers;
        this._componentFactories[provideId].activateInProgress = false;
        return providers;
    };

    var REQUIRE_KEY = "require:";

    var getRequireDependencies = function(instance, dependencies) {
        dependencies = dependencies || [];
        if (typeof instance === "string") {
            if (instance.indexOf(REQUIRE_KEY) === 0) {
                dependencies.push(instance.substring(REQUIRE_KEY.length));
            }
        } else if (typeof instance === "object" && instance !== null) {
            if (Array.isArray(instance)) {
                instance.forEach(function(arrayElement) {
                    getRequireDependencies(arrayElement, dependencies);
                });
            } else {
                Object.keys(instance).forEach(function(key) {
                    getRequireDependencies(instance[key], dependencies);
                });
            }
        }
        return dependencies;
    };

    var replaceRequireDepencencies = function(instance, dependencyMap) {
        if (typeof instance === "string") {
            if (instance.indexOf(REQUIRE_KEY) === 0) {
                var moduleId = instance.substring(REQUIRE_KEY.length);
                return dependencyMap[moduleId];
            }
        } else if (typeof instance === "object") {
            if (Array.isArray(instance)) {
                return instance.map(function(arrayElement) {
                    return replaceRequireDepencencies(arrayElement, dependencyMap);
                });
            } else {
                Object.keys(instance).forEach(function(key) {
                    instance[key] = replaceRequireDepencencies(instance[key], dependencyMap);
                });
            }
        }
        return instance;
    };

    BundleLoader.prototype._registerComponent = function(component) {
        log.apply(this, ["Registering: " + component.provide + " | " + component.id]);
        this._kernel.register(component);
        if (component.provide === GOVERNATOR_PROVIDER_NAME) {
            var governator = sap.bi.framework.getService(null, GOVERNATOR_PROVIDER_NAME);
            return governator.init();
        }
    };

    BundleLoader.prototype._activateComponent = function(component, bundleBaseUrl) {
        var governator = sap.bi.framework.getService(null, GOVERNATOR_PROVIDER_NAME);
        if (governator && !governator.isComponentEnabled(component)) {
            return;
        }
        
        log.apply(this, ["Activating: " + component.provide + " | " + component.id]);
        if (component.module) {
            component.instance = REQUIRE_KEY + component.module;
        }

        if (component.instance) {
            var requireDependencies = getRequireDependencies(component.instance);
            if (requireDependencies.length > 0) {
                var deferred = Q.defer();
                var onSuccess = function() {
                    deferred.resolve(Array.prototype.slice.call(arguments));
                };
                var onFailure = function(result) {
                    deferred.reject(result);
                };

                var bundleRequire = this._bundleRequires[component.bundleId];
                bundleRequire(requireDependencies, onSuccess, onFailure);

                var that = this;
                var activatedComponent = deferred.promise.then(function(modules) {
                    var dependencyMap = {};
                    requireDependencies.forEach(function(dep, index) {
                        dependencyMap[requireDependencies[index]] = modules[index];
                    });
                    component.instance = replaceRequireDepencencies(component.instance, dependencyMap);
                    return that._registerComponent(component);
                });
                return activatedComponent;
            }
        }

        if (component.factory || component.instance){
            return this._registerComponent(component);
        } else {
            var id = component.id || "unknown";
            throw new Error("component " + id + " cannot be registered - valid module, factory, or instance not provided");
        }
    };

    BundleLoader.prototype._getMetadata = function() {
        return {
            id: this._id,
            config: this._config,
            require: this._require
        };
    };

    BundleLoader.prototype._getHelpers = function() {
        return {
            getBundleUrl: getBundleUrl.bind(this),
            getBundleId: getBundleId.bind(this),
            getBundlePromise: getBundlePromise.bind(this),
            getRequireContext: getRequireContext.bind(this),
            extendRequireConfig: extendRequireConfig.bind(this),
            startsWith: startsWith,
            endsWith: endsWith,
            stripLeading: stripLeading,
            stripTrailing: stripTrailing
        };
    };

    return {
        init: function (kernel, config) {
            var bundleLoader = new BundleLoader(kernel, config);

            kernel.register({
                provide: "bundleLoader.loadBundles",
                instance: bundleLoader._loadBundles.bind(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.getMetadata",
                instance: bundleLoader._getMetadata.apply(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.getHelpers",
                instance: bundleLoader._getHelpers.apply(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.uninstallInterceptor",
                instance: bundleLoader._uninstallInterceptor.bind(bundleLoader)
            });
        }
    };
});

define('sap/bi/framework/kernel/DIKernel',[], function() {
    "use strict";

    function DIKernel() {
        this._componentsByService = {};

        var kernel = this;
        this.register({
            provide: "kernel",
            instance: kernel
        });
    }

    DIKernel.prototype._getComponentsForService = function(service) {
        var components = this._componentsByService[service];
        if (components === undefined) {
            components = [];
            this._componentsByService[service] = components;
        }

        return components;
    };

    DIKernel.prototype.register = function(component) {
        var service = component.provide;
        var componentToRegister = {service: service};

        if (component.factory) {
            componentToRegister.factory = component.factory;
        } else if (component.instance) {
            componentToRegister.instance = component.instance;
        }

        if (!componentToRegister.factory && !componentToRegister.instance) {
            throw new Error("component " + component.id + " cannot be registered - valid instance or factory not provided");
        }

        componentToRegister.dependencies = (component.dependencies || []).map(function(dependency) {
            if (dependency[0] === "*") {
                return {
                    service: dependency.slice(1),
                    cardinality: "multiple"
                };
            }
            else {
                return {
                    service: dependency,
                    cardinality: "single"
                };
            }
        });

        componentToRegister.exportedMetadata = {
            id: component.id,
            framework: component.framework,
            customProperties: component.customProperties
        };

        this._getComponentsForService(service).push(componentToRegister);
    };

    DIKernel.prototype._getDependency = function(dependency) {
        if (dependency.cardinality === "single") {
            return this.getInstance(dependency.service);
        } else if (dependency.cardinality === "multiple") {
            return this.getAllInstances(dependency.service);
        } else {
            throw new Exception("Unrecognized cardinality: " + dependency.cardinality);
        }
    };

    DIKernel.prototype._getInstance = function(component) {
        var instance = component.instance;

        if (instance === undefined) {
            component.constructing = true;

            var resolvedDependecies = component.dependencies.map(this._getDependency.bind(this));

            instance = component.factory.apply(null, resolvedDependecies);

            component.instance = instance;

            delete component.constructing;
        }

        return instance;
    };

    DIKernel.prototype.get = function(service) {
        var components = this._getComponentsForService(service);

        var validComponents = components.filter(function(component) {
            return !component.constructing;
        });

        if (validComponents.length === 0) {
            return undefined;
        }

        return validComponents[validComponents.length - 1];
    };

    DIKernel.prototype.getAll = function(service) {
        var components = this._getComponentsForService(service);

        return components.filter(function(component) {
            return !component.constructing;
        });
    };

    DIKernel.prototype.getInstance = function(service) {
        var component = this.get(service);
        return component ? this._getInstance(component) : component;
    };

    DIKernel.prototype.getAllInstances = function(service) {
        var components = this.getAll(service);
        return components ? components.map(this._getInstance.bind(this)) : components;
    };

    return DIKernel;
});

// only included in sap.viz.js standalone mode

// fake sap.viz.aio for sap.viz.aio-bundle in sap.viz.js standalone mode
// because sap.viz.js already includes all the contents of sap.viz.aio
define("export.bi", [], function(){return {};});

// TODO workaround here for ONLY standalone mode
// to provide sap.bi.framework.declareBundle for sap.viz.aio-bundle instead of waiting BundleLoader.init()
window.sap = window.sap || {};
window.sap.bi = window.sap.bi || {};
window.sap.bi.framework = window.sap.bi.framework || {};
window.sap.bi.framework.declareBundle = function(bundle) {
    // Just return the bundle without doing anything.
    // This function is really here to make it easier to find the metadata json inside bundle.js file.
    return bundle;
};

// for release version
define('sap.viz.core-bundle',["export.bi"], function() {
    return sap.bi.framework.declareBundle( {
        "id" : "sap.viz.core",
        "version" : "buildnumreplace",
        "components" : [ {
            "id" : "sap.viz.api",
            "provide" : "sap.viz.api",
            "instance" : sap.viz.api
        }, {
            "id" : "sap.viz.extapi",
            "provide" : "sap.viz.extapi",
            "instance" : sap.viz.extapi
        }
    ]});
});

define('sap.viz.core-bundleloader',[
    "sap/bi/framework/BundleLoader/BundleLoader",
    "sap/bi/framework/kernel/DIKernel",
    "sap/bi/framework/BundleLoader/CssPlugin",
    "sap.viz.core-bundle",
    'require'
], function(BundleLoader, DIKernel, CssPlugin, aioBundle) {
    if (sap === undefined || sap.bi === undefined || sap.bi.framework === undefined || sap.bi.framework.getService === undefined) {
        if(!window._cvom_kernel) {
            window._cvom_kernel = new DIKernel();
        }
        BundleLoader.init(window._cvom_kernel, {});
    }

    aioBundle.components.forEach(function(component) {
        if (!component.instance) {
            component.instance = {};
        }
    });

    (aioBundle.components || []).forEach(window._cvom_kernel.register.bind(window._cvom_kernel));

    window.sap = window.sap || {};
    window.sap.viz = window.sap.viz || {};
    window.sap.viz.extapi = window.sap.viz.extapi || {};
    window.sap.viz.extapi.core = window.sap.viz.extapi.core || {};
    window.sap.viz.extapi.core.registerBundle = function(bundle) {
        (bundle.components || []).forEach(function(component) {
            if (!component.framework) {
                component.framework = {
                    bundleId : bundle.id,
                    bundleVersion : bundle.version
                };
            }
        });
        (bundle.components || []).forEach(window._cvom_kernel.register.bind(window._cvom_kernel));
        return bundle;
    };

    /*
    * by aio: use original requirejs if exists, hack with viz-require if not exist
    * by src: use requirejs directly
    */ 
    var def = sap.viz.moduleloader ? (sap.viz.moduleloader.originalDefine || define) : define;
    def("css", new CssPlugin());
    return null;
});


(function(){
    var list = define && define.__autoLoad;
    if(list && list.length){
        define.__autoLoad = [];
        require(list);
    }
})();
(function (global) {
    // restore global require & define
    global.define = sap.viz.moduleloader.originalDefine;
    global.require = sap.viz.moduleloader.originalRequire;
    global.requirejs = sap.viz.moduleloader.originalRequirejs;
})(this);

if(!sap){
    window.sap={};
}
if(!sap.viz){
    sap.viz={};
}
if(!sap.viz.api){
    sap.viz.api = {};
}
if(!sap.viz.extapi){
    sap.viz.extapi = {};
}

Object.defineProperty(sap.viz.api, 'VERSION', { value: '7.34.1-SNAPSHOT', writable: false });
Object.defineProperty(sap.viz.extapi, 'VERSION', { value: '7.34.1-SNAPSHOT', writable: false });

//# sourceMappingURL=sap-viz-info-framework.js.map
